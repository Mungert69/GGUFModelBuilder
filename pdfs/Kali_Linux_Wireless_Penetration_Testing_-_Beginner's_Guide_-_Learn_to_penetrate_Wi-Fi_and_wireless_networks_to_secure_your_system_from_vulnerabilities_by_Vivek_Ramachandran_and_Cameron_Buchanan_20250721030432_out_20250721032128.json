[
  {
    "input": "",
    "summary": "This book provides a comprehensive guide to wireless penetration testing using Kali Linux, covering the setup of a wireless lab, inherent security flaws in WLAN, methods to bypass authentication, and advanced attacks. It also includes practical demonstrations for each technique, making it a valuable resource for both beginners and experienced wireless security professionals. The book aims to educate readers on how to conduct security audits and penetration tests on wireless networks.",
    "output": "www.it-ebooks.info\nKali Linux Wireless Penetration\nTesting Beginner's Guide\nMaster wireless testing techniques to survey and attack\nwireless networks with Kali Linux\nVivek Ramachandran\nCameron Buchanan\nBIRMINGHAM - MUMBAI\nwww.it-ebooks.info\nKali Linux Wireless Penetration Testing Beginner's Guide\nCopyright © 2015 Packt Publishing\nAll rights reserved. No part of this book may be reproduced, stored in a retrieval system,\nor transmitted in any form or by any means, without the prior written permission of the\npublisher, except in the case of brief quotations embedded in critical articles or reviews.\nEvery effort has been made in the preparation of this book to ensure the accuracy of the\ninformation presented. However, the information contained in this book is sold without\nwarranty, either express or implied. Neither the authors, nor Packt Publishing, and its\ndealers and distributors will be held liable for any damages caused or alleged to be caused\ndirectly or indirectly by this book.\nPackt Publishing has endeavored to provide trademark information about all of the\ncompanies and products mentioned in this book by the appropriate use of capitals.\nHowever, Packt Publishing cannot guarantee the accuracy of this information.\nFirst published: September 2011\nSecond edition: March 2015\nProduction reference: 1230315\nPublished by Packt Publishing Ltd.\nLivery Place\n35 Livery Street\nBirmingham B3 2PB, UK.\nISBN 978-1-78328-041-4\nwww.packtpub.com\nwww.it-ebooks.info\nCredits\nAuthors Project Coordinator\nVivek Ramachandran Harshal Ved\nCameron Buchanan\nProofreaders\nSimran Bhogal\nReviewer\nMarco Alamanni Stephen Copestake\nCommissioning Editor Indexer\nErol Staveley Monica Ajmera Mehta\nAcquisition Editor Production Coordinator\nSam Wood Komal Ramchandani\nContent Development Editor Cover Work\nShubhangi Dhamgaye Komal Ramchandani\nTechnical Editor\nNaveenkumar Jain\nCopy Editor\nRashmi Sawant\nwww.it-ebooks.info\nAbout the Authors\nVivek Ramachandran has been working on Wi-Fi Security since 2003. He discovered the\nCaffe Latte attack and also broke WEP Cloaking, a WEP protection schema, publicly in 2007\nat DEF CON. In 2011, he was the first to demonstrate how malware could use Wi-Fi to\ncreate backdoors, worms, and even botnets.\nEarlier, he was one of the programmers of the 802.1x protocol and Port Security in Cisco's\n6500 Catalyst series of switches and was also one of the winners of the Microsoft Security\nShootout contest held in India among a reported 65,000 participants. He is best known in\nthe hacker community as the founder of SecurityTube.net, where he routinely posts videos\non Wi-Fi Security, assembly language, exploitation techniques, and so on. SecurityTube.net\nreceives over 100,000 unique visitors a month.\nVivek's work on wireless security has been quoted in BBC Online, InfoWorld, MacWorld,\nThe Register, IT World Canada, and so on. This year, he will speak or train at a number\nof security conferences, including Blackhat, Defcon, Hacktivity, 44con, HITB-ML, BruCON\nDerbycon, Hashdays, SecurityZone, SecurityByte, and so on.\nI would like to thank my lovely wife for all her help and support during the\nbook-writing process. I would also like to thank my parents, grandparents,\nand sister for believing in me and encouraging me for all these years, and\nlast but not least, I would like to thank all the users of SecurityTube.net who\nhave always been behind me and supporting all my work. You guys rock!\nCameron Buchanan is a penetration tester by trade and a writer in his spare time.\nHe has performed penetration tests around the world for a variety of clients across many\nindustries. Previously, he was a member of the RAF. He enjoys doing stupid things, such\nas trying to make things fly, getting electrocuted, and dunking himself in freezing cold\nwater in his spare time. He is married and lives in London.\nwww.it-ebooks.info\nAbout the Reviewer\nMarco Alamanni has professional experience working as a Linux system administrator\nand information security administrator, in banks and financial institutions, in Italy and Peru.\nHe holds a BSc degree in computer science and an MSc degree in information security.\nHis interests in information technology include ethical hacking, digital forensics, malware\nanalysis, Linux, and programming, among others. He also collaborates with IT magazines,\nwriting articles about Linux and IT security.\nI'd like to thank my family and Packt Publishing for giving me the\nopportunity to review this book.\nwww.it-ebooks.info\nwww.PacktPub.com\nSupport files, eBooks, discount offers, and more\nFor support files and downloads related to your book, please visit www.PacktPub.com.\nDid you know that Packt offers eBook versions of every book published, with PDF and ePub\nfiles available? You can upgrade to the eBook version at www.PacktPub.com and, as a print\nbook customer, you are entitled to a discount on the eBook copy. Get in touch with us at\nservice@packtpub.com for more details.\nAt www.PacktPub.com, you can also read a collection of free technical articles, sign up for a\nrange of free newsletters, and receive exclusive discounts and offers on Packt books and eBooks.\nTM\nhttps://www2.packtpub.com/books/subscription/packtlib\nDo you need instant solutions to your IT questions? PacktLib is Packt's online digital book\nlibrary. Here, you can search, access, and read Packt's entire library of books.\nWhy subscribe?\n Fully searchable across every book published by Packt\n Copy and paste, print, and bookmark content\n On demand and accessible via a web browser\nFree access for Packt account holders\nIf you have an account with Packt at www.PacktPub.com, you can use this to access\nPacktLib today and view 9 entirely free books. Simply use your login credentials for\nimmediate access.\nwww.it-ebooks.info\nDisclaimer\nThe content within this book is for educational purposes only. It is designed to help users test\ntheir own system against information security threats and protect their IT infrastructure from\nsimilar attacks. Packt Publishing and the author of this book take no responsibility for actions\nresulting from the inappropriate usage of learning material contained within this book.\nwww.it-ebooks.info\nwww.it-ebooks.info\nTable of Contents\nPreface v\nChapter 1: Wireless Lab Setup 1\nHardware requirements 2\nSoftware requirements 2\nInstalling Kali 3\nTime for action – installing Kali 3\nSetting up the access point 5\nTime for action – configuring the access point 5\nSetting up the wireless card 8\nTime for action – configuring your wireless card 8\nConnecting to the access point 9\nTime for action – configuring your wireless card 9\nSummary 12\nChapter 2: WLAN and its Inherent Insecurities 13\nRevisiting WLAN frames 14\nTime for action – creating a monitor mode interface 16\nTime for action – sniffing wireless packets 19\nTime for action – viewing management, control, and data frames 22\nTime for action – sniffing data packets for our network 26\nTime for action – packet injection 28\nImportant note on WLAN sniffing and injection 29\nTime for action – experimenting with your adapter 29\nThe role of regulatory domains in wireless 31\nTime for action – experimenting with your adapter 31\nSummary 36\n[ i ]\nwww.it-ebooks.info\nTable of Contents\nChapter 3: Bypassing WLAN Authentication 37\nHidden SSIDs 38\nTime for action – uncovering hidden SSIDs 38\nMAC filters 44\nTime for action – beating MAC filters 44\nOpen Authentication 47\nTime for action – bypassing Open Authentication 47\nShared Key Authentication 48\nTime for action – bypassing Shared Authentication 49\nSummary 55\nChapter 4: WLAN Encryption Flaws 57\nWLAN encryption 58\nWEP encryption 58\nTime for action – cracking WEP 59\nWPA/WPA2 72\nTime for action – cracking WPA-PSK weak passphrases 75\nSpeeding up WPA/WPA2 PSK cracking 81\nTime for action – speeding up the cracking process 82\nDecrypting WEP and WPA packets 84\nTime for action – decrypting WEP and WPA packets 85\nConnecting to WEP and WPA networks 87\nTime for action – connecting to a WEP network 88\nTime for action – connecting to a WPA network 89\nSummary 90\nChapter 5: Attacks on the WLAN Infrastructure 91\nDefault accounts and credentials on the access point 91\nTime for action – cracking default accounts on the access points 92\nDenial of service attacks 94\nTime for action – deauthentication DoS attacks 94\nEvil twin and access point MAC spoofing 100\nTime for action – evil twins and MAC spoofing 101\nA rogue access point 107\nTime for action – cracking WEP 108\nSummary 116\nChapter 6: Attacking the Client 117\nHoneypot and Mis-Association attacks 118\nTime for action – orchestrating a Mis-Association attack 118\n[ ii ]\nwww.it-ebooks.info\nTable of Contents\nThe Caffe Latte attack 123\nTime for action – conducting a Caffe Latte attack 124\nDeauthentication and disassociation attacks 127\nTime for action – deauthenticating the client 128\nThe Hirte attack 130\nTime for action – cracking WEP with the Hirte attack 131\nAP-less WPA-Personal cracking 132\nTime for action – AP-less WPA cracking 134\nSummary 135\nChapter 7: Advanced WLAN Attacks 137\nA man-in-the-middle attack 138\nTime for action – man-in-the-middle attack 138\nWireless Eavesdropping using MITM 142\nTime for action – Wireless Eavesdropping 142\nSession hijacking over wireless 147\nTime for action – session hijacking over wireless 148\nFinding security configurations on the client 151\nTime for action – deauthentication attacks on the client 152\nSummary 155\nChapter 8: Attacking WPA-Enterprise and RADIUS 157\nSetting up FreeRADIUS-WPE 157\nTime for action – setting up the AP with FreeRADIUS-WPE 158\nAttacking PEAP 161\nTime for action – cracking PEAP 162\nEAP-TTLS 166\nSecurity best practices for Enterprises 166\nSummary 167\nChapter 9: WLAN Penetration Testing Methodology 169\nWireless penetration testing 169\nPlanning 170\nDiscovery 170\nAttack 171\nCracking the encryption 171\nAttacking infrastructure 172\nCompromising clients 172\nReporting 172\nSummary 173\n[ iii ]\nwww.it-ebooks.info\nTable of Contents\nChapter 10: WPS and Probes 175\nWPS attacks 175\nTime for action – WPS attack 176\nProbe sniffing 179\nTime for action – collecting data 179\nSummary 183\nAppendix: Pop Quiz Answers 185\nChapter 1, Wireless Lab Setup 185\nChapter 2, WLAN and its Inherent Insecurities 185\nChapter 3, Bypassing WLAN Authentication 186\nChapter 4, WLAN Encryption Flaws 186\nChapter 5, Attacks on the WLAN Infrastructure 186\nChapter 6, Attacking the Client 186\nChapter 7, Advanced WLAN Attacks 187\nChapter 8, Attacking WPA-Enterprise and RADIUS 187\nIndex 189\n[ iv ]\nwww.it-ebooks.info\nPreface\nWireless Networks have become ubiquitous in today's world. Millions of people use it\nworldwide every day at their homes, offices and public hotspots to logon to the Internet\nand do both personal and professional work. Even though wireless makes life incredibly\neasy and gives us such great mobility, it comes with risks. In recent times, insecure wireless\nnetworks have been used to break into companies, banks and government organizations.\nThe frequency of these attacks is only intensified, as network administrators are still\nclueless when it comes to securing wireless networks in a robust and fool proof way.\nKali Linux Wireless Penetration Testing Beginner's Guide is aimed at helping the reader\nunderstand the insecurities associated with wireless networks, and how to conduct\npenetration tests to find and plug them. This is an essential read for those who would like\nto conduct security audits on wireless networks and always wanted a step-by-step practical.\nAs every wireless attack explained in this book is immediately followed by a practical demo,\nthe learning is very complete.\nWe have chosen Kali Linux as the platform to test all the wireless attacks in this book.\nBacktrack, as most of you may already be aware, is the world's most popular penetration\ntesting distribution. It contains hundreds of security and hacking tools, some of which we\nwill use in this course of this book.\nWhat this book covers\nChapter 1, Wireless Lab Setup: There are dozens of exercises we will be doing in this book.\nIn order to be able to try them out, the reader will need to setup a wireless lab. This chapter\nfocuses on how to create a wireless testing lab using off-the-shelf hardware and open source\nsoftware. We will first look at hardware requirements, which include wireless cards, antennas,\naccess points and other Wi-Fi enabled devices, then we will shift our focus to the software\nrequirements which include the operating system, Wi-Fi drivers and security tools. Finally, we\nwill create a test bed for our experiments and verify different wireless configurations on it.\n[ v ]\nwww.it-ebooks.info\nPreface\nChapter 2, WLAN and its Inherent Insecurities: This chapter focuses on inherent design flaws in\nwireless networks, that make insecure out-of-the-box. We will begin with a quick recap of the\n802.11 WLAN protocols using a network analyzer called Wireshark. This will give us a practical\nunderstanding about how these protocols work. Most importantly, we will see how client and\naccess point communication works at the packer level by analyzing Management, Control and\nData frames. We will then learn about packet injection and packer sniffing in wireless networks,\nand look at some tools which enable us to do the same.\nChapter 3, Bypassing WLAN Authentication: Now we get into how to break WLAN\nauthentication mechanism! We will go step by step and explore how to subvert Open and\nShared Key authentications. In the course of this, you will learn how to analyse wireless\npackets and figure out the authentication mechanism of the network. We will also look\nat how to break into networks with Hidden SSID and MAC Filtering enabled. These are\ntwo common mechanisms employed by network administrators to make wireless networks\nmore stealthy and difficult to penetrate; however, these are extremely simple to bypass.\nChapter 4, WLAN Encryption Flaws: One of the most vulnerable parts of the WLAN protocol\nis the Encryption schemas – WEP, WPA and WPA2. Over the past decade hackers have found\nmultiple flaws in these schemas and have written publically available software to break them\nand decrypt the data. Also, even though WPA/WPA2 is secure by design, misconfiguring\nthose opens up security vulnerabilities, that can be easily exploited. In this chapter, we will\nunderstand the insecurities in each of these encryption schemas and do practical demos on\nhow to break them.\nChapter 5, Attacks on the WLAN Infrastructure: We will now shift our focus to WLAN\nInfrastructure vulnerabilities. We will look at vulnerabilities created due to both configuration\nand design problem. We will do practical demos of attacks such as access point MAC spoofing,\nbit flipping and replay attacks, rogue access points, fuzzing and denial of services. This chapter\nwill give the reader a solid understanding of how to do a penetration test of the WLAN\ninfrastructure.\nChapter 6, Attacking the Client: This chapter might open your eyes if you always believed\nthat wireless client security was something you did not have to worry about! Most people\nexclude the client from their list when they think about WLAN security. This chapter will\nprove beyond doubt why the client is just as important as the access point when penetration\ntesting a WLAN network. We will look at how to compromise the security using client side\nattacks such as Miss-Association, Caffe Latte, disassociation, ad-hoc connections, fuzzing,\nhoneypots and a host of others.\n[ vi ]\nwww.it-ebooks.info\nPreface\nChapter 7, Advanced WLAN Attacks: Now that we have already covered most of the basic\nattacks on both the infrastructure and the client, we will look at more advanced attacks in\nthis chapter. These attacks typically involve using multiple basic attacks in conjunction to\nbreak security in more challenging scenarios. Some of the attacks which we will learn include\nwireless device fingerprinting, man-in-the-middle over wireless, evading wireless intrusion\ndetection and prevention systems, rogue access points operating using custom protocol and\na couple of others. This chapter presents the absolute bleeding edge in wireless attacks out\nin the real world.\nChapter 8, Attacking WPA-Enterprise and RADIUS: This chapter graduates the user to\nthe next level by introducing him to advanced attacks on WPA-Enterprise and the RADIUS\nserver setup. These attacks will come in handy when the reader has to penetration test large\nenterprise networks which rely on WPA-Enterprise and RADIUS authentication to provide\nthem with security. This is probably as advanced as Wi-Fi attacks can get in the real world.\nChapter 9, WLAN Penetrating Testing Methodology: This is where all the learning from the\nprevious chapters comes together, and we will look at how to do a wireless penetration test\nin a systematic and methodical way. We will learn about the various phases of penetration\ntesting—Planning, Discovery, Attack and Reporting, and apply it to wireless penetration\ntesting. We will also understand how to propose recommendations and best practices after\na wireless penetration test.\nChapter 10, WPS and Probes: This chapter covers the two new attacks in the industry\nthat have developed since the initial publication of this book—WPS brute-force and\nprobe sniffing for monitoring.\nWhat you need for this book\nTo follow and recreate the practical exercises in this book you will need two laptops with\nbuilt in Wi-Fi cards, a USB wireless Wi-Fi adapter, Kali Linux and some other hardware and\nsoftware. We have detailed this in Chapter 1, Wireless Lab Setup.\nAs an alternate to the two laptops, you could also create a Virtual Machine housing Kali\nLinux and connect the card to it over the USB interface. This will help you get started with\nusing this book much faster, but we would recommend a dedicated machine running Kali\nLinux for actual assessments in the field.\nFrom a prerequisite perspective, readers should be aware of the basics of wireless\nnetworks. This includes having prior knowledge about the basics of the 802.11 protocol\nand client-access point communication. Though we will briefly touch upon some of this\nwhen we setup the lab, it is expected that the user is already aware of these concepts.\n[ vii ]\nwww.it-ebooks.info\nPreface\nWho this book is for\nThough this book is a Beginner's series, it is meant for all levels of users, from amateurs right\nthrough to wireless security experts. There is something for everyone. The book starts with\nsimple attacks but then moves on to explain the more complicated ones, and finally discusses\nbleeding edge attacks and research. As all attacks are explained using practical demonstrations,\nit is very easy for readers at all levels to quickly try the attack out by themselves. Please note\nthat even though the book highlights the different attacks, which can be launched against a\nwireless network, the real purpose is to educate the user to become a wireless penetration\ntester. An adept penetration tester would understand all the attacks out there and would be\nable to demonstrate them with ease, if requested by his client.\nConventions\nIn this book, you will find a number of styles of text that distinguish between different kinds of\ninformation. Here are some examples of these styles, and an explanation of their meaning.\nCode words in text, database table names, folder names, filenames, file extensions,\npathnames, dummy URLs, user input, and Twitter handles are shown as follows: \"Open\na console terminal and type in iwconfig.\"\nAny command-line input or output is written as follows:\nairodump-ng –bssid 00:21:91:D2:8E:25 --channel 11 --write WEPCrackingDemo\nmon0\nNew terms and important words are shown in bold. Words that you see on the screen, in\nmenus or dialog boxes for example, appear in the text like this: \"Boot the laptop with this\nDVD and select the option Install from the Boot menu.\"\nWarnings or important notes appear in a box like this.\nTips and tricks appear like this.\nReader feedback\nFeedback from our readers is always welcome. Let us know what you think about this\nbook—what you liked or may have disliked. Reader feedback is important for us to\ndevelop titles that you really get the most out of.\n[ viii ]\nwww.it-ebooks.info\nPreface\nTo send us general feedback, simply send an e-mail to feedback@packtpub.com, and\nmention the book title via the subject of your message.\nIf there is a topic that you have expertise in and you are interested in either writing or\ncontributing to a book, see our author guide on www.packtpub.com/authors.\nCustomer support\nNow that you are the proud owner of a Packt book, we have a number of things to help\nyou to get the most from your purchase.\nErrata\nAlthough we have taken every care to ensure the accuracy of our content, mistakes do\nhappen. If you find a mistake in one of our books—maybe a mistake in the text or the\ncode—we would be grateful if you would report this to us. By doing so, you can save other\nreaders from frustration and help us improve subsequent versions of this book. If you find\nany errata, please report them by visiting http://www.packtpub.com/submit-errata,\nselecting your book, clicking on the errata submission form link, and entering the details of\nyour errata. Once your errata are verified, your submission will be accepted and the errata\nwill be uploaded on our website, or added to any list of existing errata, under the Errata\nsection of that title. Any existing errata can be viewed by selecting your title from\nhttp://www.packtpub.com/support.\nPiracy\nPiracy of copyright material on the Internet is an ongoing problem across all media. At\nPackt, we take the protection of our copyright and licenses very seriously. If you come\nacross any illegal copies of our works, in any form, on the Internet, please provide us\nwith the location address or website name immediately so that we can pursue a remedy.\nPlease contact us at copyright@packtpub.com with a link to the suspected\npirated material.\nWe appreciate your help in protecting our authors, and our ability to bring you\nvaluable content.\nQuestions\nYou can contact us at questions@packtpub.com if you are having a problem with any\naspect of the book, and we will do our best to address it.\n[ ix ]\nwww.it-ebooks.info\nwww.it-ebooks.info"
  },
  {
    "input": "What hardware and software are required to set up a wireless lab for penetration testing experiments?",
    "summary": "This chapter explains how to set up a wireless lab for penetration testing, emphasizing the need for preparation. It outlines the hardware and software requirements, including two laptops, a wireless adapter, an access point, and Kali Linux. The chapter also provides step-by-step instructions on installing Kali and configuring the lab environment.",
    "output": "1\nWireless Lab Setup\n\"If I had eight hours to chop down a tree, I'd spend six hours sharpening\nmy axe.\"\nAbraham Lincoln, 16th US President\nBehind every successful execution is hours or days of preparation, and wireless\npenetration testing is no exception. In this chapter, we will create a wireless\nlab that we will use for our experiments in this book. Consider this lab as your\npreparation arena before you dive into real-world penetration testing!\nWireless penetration testing is a practical subject, and it is important to first set\nup a lab where we can try out all the different experiments in this book in a safe\nand controlled environment. It is important that you set up this lab first before\nmoving on in this book.\nIn this chapter, we will take a look at the following:\n Hardware and software requirements\n Installing Kali\n Setting up an access point and configuring it\n Installing the wireless card\n Testing connectivity between the laptop and the access point\nSo let the games begin!\n[ 1 ]\nwww.it-ebooks.info\nWireless Lab Setup\nHardware requirements\nWe will need the following hardware to set up the wireless lab:\n Two laptops with internal Wi-Fi cards: We will use one of the laptops as the\nvictim in our lab and the other as the penetration tester's laptop. Though almost\nany laptop would fit this profile, laptops with at least 3 GB RAM are desirable. This is\nbecause we may be running a lot of memory-intensive software in our experiments.\n One wireless adapter (optional): Depending on the wireless card of your laptop,\nwe may need a USB Wi-Fi card that can support packet injection and packet sniffing,\nwhich is supported by Kali. The best choice seems to be the Alfa AWUS036H card\nfrom Alfa Networks, as Kali supports this out-of-the-box. This is available on\nwww.amazon.com for a retail price of £18 at the time of writing. An alternative\noption is the Edimax EW-7711UAN, which is smaller and, marginally, cheaper.\n One access point: Any access point that supports WEP/WPA/WPA2 encryption\nstandards would fit the bill. I will be using a TP-LINK TL-WR841N Wireless router\nfor the purpose of illustration in this book. You can purchase it from Amazon.com\nfor a retail price of around £20 at the time of writing.\n An Internet connection: This will come in handy for performing research,\ndownloading software, and for some of our experiments.\nSoftware requirements\nWe will need the following software to set up the wireless lab:\n Kali: This software can be downloaded from the official website located at\nhttp://www.kali.org. The software is open source, and you should be\nable to download it directly from the website.\n Windows XP/Vista/7: You will need any one of Windows XP, Windows Vista,\nor Windows 7 installed on one of the laptops. This laptop will be used as the\nvictim machine for the rest of the book.\nIt is important to note that, even though we are using a Windows-based\nOS for our tests, the techniques learnt can be applied to any Wi-Fi-capable\ndevices such as smart phones and tablets, among others.\n[ 2 ]\nwww.it-ebooks.info\nChapter 1\nInstalling Kali\nLet's now quickly take a look at how to get up-and-running with Kali.\nKali will be installed on the laptop that will serve as the penetration tester's machine\nfor the rest of the book.\nTime for action – installing Kali\nKali is relatively simple to install. We will run Kali by booting it as a Live DVD and then install\nit on the hard drive.\nPerform the following instructions step by step:\nBurn the Kali ISO (we are using the Kali 32-bit ISO) you downloaded onto a bootable DVD.\n1. Boot the laptop with this DVD and select the option Install from the Boot menu:\n[ 3 ]\nwww.it-ebooks.info\nWireless Lab Setup\n2. If booting was successful, then you should see an awesome retro screen as follows:\n3. This installer is similar to the GUI-based installers of most Linux systems and\nshould be simple to follow. Select the appropriate options in every screen and\nstart the installation process. Once the installation is done, restart the machine\nas prompted and remove the DVD.\n4. Once the machine restarts, a login screen will be displayed. Type in the login as\nroot and the password as whatever you set it to during the installation process.\nYou should now be logged into your installed version of Kali. Congratulations!\nI will change the desktop theme and some settings for this book. Feel free to\nuse your own themes and color settings!\n[ 4 ]\nwww.it-ebooks.info"
  },
  {
    "input": "What are the key steps involved in setting up a wireless lab with Kali, an access point, and a wireless adapter?",
    "summary": "This chapter explains how to set up a wireless lab using Kali, including installing Kali on a laptop, configuring an access point with Open Authentication, and setting up a wireless adapter. It also covers connecting to the access point and verifying the connection. The setup is essential for later experiments and understanding WLAN security vulnerabilities.",
    "output": "Chapter 1\nWhat just happened?\nWe have successfully installed Kali on the laptop! We will use this laptop as the penetration\ntester's laptop for all other experiments in this book.\nHave a go hero – installing Kali on VirtualBox\nWe can also install Kali within virtualization software such as VirtualBox. If you don't\nwant to dedicate a full laptop to Kali, this is the best option. Kali's installation process\nin VirtualBox is exactly the same. The only difference is the pre-setup, which you will\nhave to create in VirtualBox. Have a go at it! You can download VirtualBox from\nhttp://www.virtualbox.org.\nOne of the other ways in which we can install and use Kali is via USB drives. This is\nparticularly useful if you do not want to install on the hard drive but still want to store\npersistent data on your Kali instance, such as scripts and new tools. We encourage\nyou to try this out as well!\nSetting up the access point\nNow we will set up the access point. As mentioned earlier, we will be using the TP-LINK\nTL-WR841N Wireless Router for all the experiments in this book. However, feel free to\nuse any other access point. The basic principles of operation and usage remain the same.\nTime for action – configuring the access point\nLet's begin! We will set the access point up to use Open Authentication with an SSID of\nWireless Lab.\nFollow these instructions step by step:\n1. Power on the access point and use an Ethernet cable to connect your laptop to\none of the access point's Ethernet ports.\n[ 5 ]\nwww.it-ebooks.info\nWireless Lab Setup\n2. Enter the IP address of the access point configuration terminal in your browser. For\nthe TP-Link, it is by default 192.168.1.1. You should consult your access point's\nsetup guide to find its IP address. If you do not have the manuals for the access\npoint, you can also find the IP address by running the route –n command. The\ngateway IP address is typically the access point's IP. Once you are connected, you\nshould see a configuration portal that looks like this:\n3. Explore the various settings in the portal after logging in and find the settings\nrelated to configuring a new SSID.\n4. Change the SSID to Wireless Lab. Depending on the access point, you may\nhave to reboot it for the settings to change:\n[ 6 ]\nwww.it-ebooks.info\nChapter 1\n5. Similarly, find the settings related to Wireless Security and change the setting to\nDisable Security. Disable Security indicates that it is using Open Authentication mode.\n6. Save the changes to the access point and reboot it if required. Now your access\npoint should be up-and-running with an SSID Wireless Lab.\nAn easy way to verify this is to use the Wireless Configuration utility on Windows and\nobserve the available networks using the Windows laptop. You should find Wireless Lab\nas one of the networks in the listing:\nWhat just happened?\nWe have successfully setup our access point with an SSID Wireless Lab. It is broadcasting\nits presence and this is being picked up by our Windows laptop and others within the\nRadio Frequency (RF) range of the access point.\nIt is important to note that we configured our access point in Open mode, which is the\nleast secure. It is advisable not to connect this access point to the Internet for the time\nbeing, as anyone within the RF range will be able to use it to access the Internet.\n[ 7 ]\nwww.it-ebooks.info\nWireless Lab Setup\nHave a go hero – configuring the access point to use WEP and WPA\nPlay around with the configuration options of your access point. Try to get it up-and-running\nusing encryption schemes such as WEP and WPA/WPA2. We will use these modes in later\nchapters to illustrate attacks against them.\nSetting up the wireless card\nSetting up our wireless adapter is much easier than the access point. The advantage is that\nKali supports this card out-of-the-box and ships with all requisite device drivers to enable\npacket injection and packet sniffing.\nTime for action – configuring your wireless card\nWe will be using the wireless adapter with the penetration tester's laptop.\nPlease follow these instructions step-by-step to set up your card:\n1. Plug in the card to one of the Kali laptop's USB ports and boot it.\nOnce you log in, open a console terminal and type in iwconfig. Your screen\nshould look as follows:\nAs you can see, wlan0 is the wireless interface created for the wireless adapter.\nType in ifconfig wlan0 to bring the interface up. Then, type in ifconfig\nwlan0 to see the current state of the interface:\n[ 8 ]\nwww.it-ebooks.info\nChapter 1\n2. The MAC address 00:c0:ca:3e:bd:93 should match the MAC address written\nunder your Alfa card. I am using the Edimax that gives me the preceding MAC\naddress 80:1f:02:8f:34:d5. This is a quick check to ensure that you have\nenabled the correct interface.\nWhat just happened?\nKali ships with all the required drivers for the Alfa and Edimax adapters out of the box. As\nsoon as the machine booted, the adapter was recognized and was assigned the network\ninterface wlan0. Now our wireless adapter is up and functional!\nConnecting to the access point\nNow we will take a look at how to connect to the access point using the wireless adapter.\nOur access point has an SSID Wireless Lab and does not use any authentication.\nTime for action – configuring your wireless card\nHere we go! Follow these steps to connect your wireless card to the access point:\n1. Let's first see what wireless networks our adapter is currently detecting. Issue\nthe command iwlist wlan0 scanning and you will find a list of networks in\nyour vicinity:\n[ 9 ]\nwww.it-ebooks.info\nWireless Lab Setup\nKeep scrolling down and you should find the Wireless Lab network in this list.\nIn my setup, it is detected as Cell 05; it may be different in yours. The ESSID\nfield contains the network name.\n2. As multiple access points can have the same SSID, verify that the MAC address\nmentioned in the preceding Address field matches your access point's MAC.\nA fast and easy way to get the MAC address is underneath the access point or\nusing web-based GUI settings.\n3. Now, issue the iwconfig wlan0 essid \"Wireless Lab\" command and then\niwconfig wlan0 to check the status. If you have successfully connected to the\naccess point, you should see the MAC address of the access point in the Access\nPoint: field in the output of iwconfig.\n4. We know that the access point has a management interface IP address 192.168.0.1\nfrom its manual. Alternately, this is the same as the default router IP address when we\nrun the route –n command. Let's set our IP address in the same subnet by issuing\nthe ifconfig wlan0 192.168.0.2 netmask 255.255.255.0 up command.\nVerify the command succeeded by typing ifconfig wlan0 and checking the output.\n5. Now let's ping the access point by issuing the ping 192.168.0.1 command. If the\nnetwork connection has been set up properly, then you should see the responses from\nthe access point. You can additionally issue an arp –a command to verify that the\nresponse is coming from the access point. You should see that the MAC address of the\nIP 192.168.0.1 is the access point's MAC address we noted earlier. It is important\nto note that some of the more recent access points might have responses to Internet\nControl Message Protocol (ICMP) echo request packets disabled. This is typically\ndone to make the access point secure out-of-the-box with only minimal configuration\nsettings available. In such a case, you can try to launch a browser and access the\nweb interface to verify that the connection is up-and-running:\n[ 10 ]\nwww.it-ebooks.info\nChapter 1\nOn the access point, we can verify connectivity by looking at the connection\nlogs. As you can see in the following log, the MAC address of the wireless card\n4C:0F:6E:70:BD:CB has been logged making DHCP requests from the router:\nWhat just happened?\nWe just connected to our access point successfully from Kali using our wireless adapter as\nthe wireless device. We also learnt how to verify that a connection has been established at\nboth the wireless client and the access point side.\nHave a go hero – establishing a connection in a WEP configuration\nHere is a challenging exercise for you—set up the access point in a WEP configuration. For\neach of these, try establishing a connection with the access point using the wireless adapter.\nHint: check the manual for the iwconfig command by typing man iwconfig to see how to\nconfigure the card to connect to WEP.\nPop quiz – understanding the basics\nQ1. After issuing the command ifconfig wlan0, how do you verify the wireless card\nis up and functional?\nQ2. Can we run all our experiments using the Kali live CD alone? Can we not install the CD\nto the hard drive?\nQ3. What does the command arp –a show?\nQ4. Which tool should we use in Kali to connect to WPA/WPA2 networks?\n[ 11 ]\nwww.it-ebooks.info\nWireless Lab Setup\nSummary\nThis chapter provided you with detailed instructions on how to set up your own wireless\nlab. Also, in the process, you learned the basic steps for:\n Installing Kali on your hard drive and exploring other options such as Virtual\nMachines and USBs\n Configuring your access point over the web interface\n Understanding and using several commands to configure and use your\nwireless card\n Verifying the connection state between the wireless client and the\naccess point\nIt is important that you gain confidence in configuring the system. If you aren't confident,\nit is advisable that you repeat the preceding examples a couple of times. In later chapters,\nwe will design more complicated scenarios.\nIn the next chapter, we will learn about inherent design-based insecurities in WLANs\ndesign. We will use the network analyzer tool, Wireshark, to understand these concepts\nin a practical way.\n[ 12 ]\nwww.it-ebooks.info"
  },
  {
    "input": "What are the inherent insecurities of WLANs and how can they be exploited through packet spoofing, injection, and sniffing?",
    "summary": "This chapter discusses the inherent insecurities of WLANs, highlighting how management, control, and data frames are unencrypted and can be easily exploited through packet spoofing, injection, and sniffing. It explains how to use Wireshark and tools like airmon-ng to monitor and analyze wireless traffic, emphasizing the importance of encryption to protect data. The chapter also covers the limitations of WLAN sniffing and injection, including the need to operate within specific frequency bands and regulatory settings.",
    "output": "2\nWLAN and its Inherent Insecurities\n\"The loftier the building, the deeper the foundation must be laid.\"\nThomas Kempis\nNothing great can be built on a weak foundation, and in our context, nothing\nsecure can be built on something that is inherently insecure.\nWLANs, by design, have certain insecurities that are relatively easy to exploit,\nfor example, by packet spoofing, packet injection, and sniffing (this could even\nhappen from far away). We will explore these flaws in this chapter.\nIn this chapter, we shall look at the following:\n Revisiting WLAN frames\n Different frame types and subtypes\n Using Wireshark to sniff management, control, and data frames\n Sniffing data packets for a given wireless network\n Injecting packets into a given wireless network\nLet's get started!\n[ 13 ]\nwww.it-ebooks.info\nWLAN and its Inherent Insecurities\nRevisiting WLAN frames\nAs this book deals with the security aspects of wireless, we will assume that you already\nhave a basic understanding of the protocol and the packet headers. If not, or if it's been\nsome time since you worked on wireless, this would be a good time to revisit this topic again.\nLet's now quickly review some basic concepts of WLANs that most of you may already\nbe aware of. In WLANs, communication happens over frames. A frame would have the\nfollowing header structure:\nThe Frame Control field itself has a more complex structure:\n[ 14 ]\nwww.it-ebooks.info\nChapter 2\nThe Type field defines three types of WLAN frame:\n1. Management frames: Management frames are responsible for maintaining\ncommunication between access points and wireless clients. Management frames\ncan have the following subtypes:\nAuthentication\n\nDeauthentication\n\nAssociation request\n\nAssociation response\n\nReassociation request\n\nReassociation response\n\nDisassociation\n\nBeacon\n\nProbe request\n\nProbe response\n\n2. Control frames: Control frames are responsible for ensuring a proper exchange\nof data between access points and wireless clients. Control frames can have the\nfollowing subtypes:\nRequest to Send (RTS)\n\nClear to Send (CTS)\n\nAcknowledgement (ACK)\n\n3. Data frames: Data frames carry the actual data that is sent on the wireless network.\nThere are no subtypes for data frames.\nWe will discuss the security implications of each of these frames when we discuss different\nattacks in later chapters.\nWe will now look at how to sniff these frames over a wireless network using Wireshark.\nThere are other tools—such as Airodump-NG, Tcpdump, or Tshark—that you can use for\nsniffing as well. We will, however, mostly use Wireshark in this book, but we encourage you\nto explore other tools as well. The first step to do this is to create a monitor mode interface.\nThis will create an interface for our adapter, which allows us to read all wireless frames\nin the air, regardless of whether they are destined for us or not. In the wired world, this is\npopularly called promiscous mode.\n[ 15 ]\nwww.it-ebooks.info\nWLAN and its Inherent Insecurities\nTime for action – creating a monitor mode interface\nLet's now set our wireless adapter into monitor mode.\nFollow these instructions to get started:\n1. Boot Kali with your adapter connected. Once you are within the console, enter\niwconfig to confirm that your card has been detected and the driver has been\nloaded properly.\n2. Use the ifconfig wlan1 up command to bring the card up (where wlan1\nis your adapter). Verify whether the card is up by running ifconfig wlan1.\nYou should see the word UP in the second line of the output as shown in the\nfollowing screenshot:\n[ 16 ]\nwww.it-ebooks.info\nChapter 2\n3. To put our card into monitor mode, we will use the airmon-ng utility that\nis available by default on Kali. First run airmon-ng command to verify whether it\ndetects the available cards. You should see the wlan0 interface listed in the output:\n[ 17 ]\nwww.it-ebooks.info\nWLAN and its Inherent Insecurities\n4. Now enter airmon-ng start wlan1 command to create a monitor mode\ninterface corresponding to the wlan0 device. This new monitor mode interface\nwill be named mon0. (You can verify if it has been created by running airmon-ng\nwithout arguments again).\n5. Also, running ifconfig mon0 should now display a new interface called mon0.\nWhat just happened?\nWe have successfully created a monitor mode interface called mon0. This interface will be used\nto sniff wireless packets off the air. This interface has been created for our wireless adapter.\n[ 18 ]\nwww.it-ebooks.info\nChapter 2\nHave a go hero – creating multiple monitor mode interfaces\nIt is possible to create multiple monitor mode interfaces using the same physical card. Use\nthe airmon-ng utility to see how you can do this.\nAwesome! We have a monitor mode interface just waiting to read some packets off the air.\nSo let's get started.\nIn the next exercise, we will use Wireshark to sniff packets off the air using the mon0\nmonitor mode interface we just created.\nTime for action – sniffing wireless packets\nFollow the following instructions to begin sniffing packets:\n1. Power up the Access Point Wireless Lab that we configured in Chapter 1, Wireless\nLab Setup.\n2. Start Wireshark by typing Wireshark & in the console. Once Wireshark is running,\nnavigate to Capture | Interfaces.\n[ 19 ]\nwww.it-ebooks.info\nWLAN and its Inherent Insecurities\n3. Select packet capture from the mon0 interface by clicking on the Start button to\nthe right of the mon0 interface as shown in the previous screenshot. Wireshark will\nbegin the capture, and now you should see packets within the Wireshark window.\n4. These are wireless packets that your wireless adapter is sniffing off the air.\nIn order to view any packet, select it in the top window and the entire packet\nwill be displayed in the middle window.\n[ 20 ]\nwww.it-ebooks.info\nChapter 2\nClick on the triangle in front of IEEE 802.11 Wireless LAN management frame to\nexpand and view additional information.\nLook at the different header fields in the packet and correlate them with the WLAN frame\ntypes and sub-types you have learned earlier.\nWhat just happened?\nWe just sniffed out first set of packets off the air! We launched Wireshark, which used\nthe monitor mode interface mon0 we created previously. You should notice, by looking at\nWireshark's footer region, the speed at which the packets are being captured and also the\nnumber of packets captured till now.\n[ 21 ]\nwww.it-ebooks.info\nWLAN and its Inherent Insecurities\nHave a go hero – finding different devices\nWireshark traces can be a bit daunting at times; even for a reasonably populated\nwireless network, you could end up sniffing a few thousand packets. Hence, it is important\nto be able to drill down to those packets that interest us. This can be accomplished using\nfilters in Wireshark. Explore how you can use these filters to identify unique wireless devices\nin the traces– both access points and wireless clients.\nIf you are unable to do this, don't worry as this is the next thing we will learn.\nTime for action – viewing management, control, and data frames\nNow we will learn how to apply filters in Wireshark to look at Management, Control and\nData Frames.\nPlease follow the below instructions step by step:\n1. To view all the Management frames in the packets being captured, enter the filter\nwlan.fc.type == 0 into the filter window and click Apply. You can stop the\npacket capture if you want to prevent the packets from scrolling down too fast.\n[ 22 ]\nwww.it-ebooks.info\nChapter 2\n2. To view Control Frames, modify the filter expression to read wlan.fc.type == 1.\n3. To view data frames, modify the filter expression to wlan.fc.type == 2.\n[ 23 ]\nwww.it-ebooks.info\nWLAN and its Inherent Insecurities\n4. To additionally select a sub-type, use the wlan.fc.subtype filter.\nFor example, to view all the Beacon frames among all Management frames,\nuse the following filter:\n(wlan.fc.type == 0) && (wlan.fc.subtype == 8).\n5. Alternately, you can right-click on any of the header fields in the middle window and\nthen select Apply as Filter | Selected to add it as a filter.\n[ 24 ]\nwww.it-ebooks.info\nChapter 2\n6. This will automatically add the correct filter expression for you in the Filter field.\nWhat just happened?\nWe just learned how to filter packets in Wireshark using various filter expressions.\nThis helps us monitor selected packets from devices we are interested in, instead of\ntrying to analyze all the packets in the air.\nAlso, we can see that the packet headers of Management, Control and Data frames are in\nplain text and are not encrypted. Anyone who can sniff the packets can read these headers.\nIt is also important to note that it is also possible for a hacker to modify any of these packets\nand re-transmit them. As there is no integrity or replay attack mitigation in the protocol, this\nis very easy to do. We will look at some of these attacks in later chapters.\n[ 25 ]\nwww.it-ebooks.info\nWLAN and its Inherent Insecurities\nHave a go hero – playing with filters\nYou can consult Wireshark's manual to know more about available filter expressions and how\nto use them. Try playing around with various filter combinations till you are confident that\nyou can drill down to any level of detail, even in a very large packet trace.\nIn the next exercise, we will look at how to sniff data packets transferred between our access\npoint and wireless client.\nTime for action – sniffing data packets for our network\nIn this exercise, we will learn how to sniff data packets for a given wireless network.\nFor the sake of simplicity, we will look at packets without any encryption.\nFollow these instructions to get started:\n1. Switch on the access point we named Wireless Lab. Let it remain configured\nto use no encryption.\n2. We will first need to find the channel on which the Wireless Lab access point is\nrunning. To do this, open a terminal and run airodump-ng --bssid <mac>\nmon0 where <mac>, which is the MAC address of our access point. Let the program\nrun, and shortly you should see your access point shown on the screen along with\nthe channel it is running on.\n3. We can see from the preceding screenshot that our access point Wireless Lab is\nrunning on Channel 11. Note that this may be different for your access point.\nIn order to sniff data packets going to and fro from this access point, we need to\nlock our wireless card on the same channel, that is channel 11. To do this, run\nthe iwconfig mon0 channel 11 command and then run iwconfig mon0 to\nverify it. You should see the Frequency: 2.462 GHz value in the output. This\ncorresponds to Channel 11.\n[ 26 ]\nwww.it-ebooks.info\nChapter 2\n4. Now fire up Wireshark and start sniffing on the mon0 interface. After Wireshark\nhas started sniffing the packets, apply a filter for the bssid of our access point as\nshown below using wlan.bssid == <mac> in the filter area. Use the appropriate\nMAC address for your access point.\n5. In order to see the data packets for our access point, add the following to the filter\n(wlan.bssid == <mac>) && (wlan.fc.type_subtype == 0x20). Open\nyour browser on the client laptop and type in the management interface the URL of\nthe access point. In my case, as we have seen in Chapter 1, Wireless Lab Setup, it is\nhttp://192.168.0.1. This will generate data packets that Wireshark will capture.\n6. Packet sniffing allows us to analyze unencrypted data packets very easily. This is\nthe reason why we need to use encryption in wireless.\nWhat just happened?\nWe have just sniffed data packets over the air with Wireshark using various filters. As our\naccess point is not using any encryption, we are able to see all the data in plain text. This is\na major security issue as anyone within RF range of the access point can see all the packets\nif he uses a sniffer such as Wireshark.\n[ 27 ]\nwww.it-ebooks.info\nWLAN and its Inherent Insecurities\nHave a go hero – analyzing data packets\nUse Wireshark to analyze the data packets further. You would notice that a DHCP request\nis made by the client and, if a DHCP server is available, it responds with an address. Then\nyou would find ARP packets and other protocol packets on the air. This is a nice and simple\nway to do passive host discovery on the wireless network. It is important to be able to see a\npacket trace and reconstruct how applications on the wireless host are communicating with\nthe rest of the network. One of the interesting features Wireshark provides is the ability to\nfollow a stream. This allows you to view multiple packets together, that are part of a TCP\nexchange, in the same connection.\nAlso, try logging into www.gmail.com or any other popular website and analyze the data\ntraffic generated.\nWe will now see a demonstration of how to inject packets into a wireless network.\nTime for action – packet injection\nWe will be using the aireplay-ng tool, which is available in Kali, for this exercise.\nFollow the instructions below carefully:\n1. In order to do an injection test, first start Wireshark and the filter expression\n(wlan.bssid == <mac>) && !(wlan.fc.type_subtype == 0x08).\nThis will ensure that we only see non-beacon packets for our lab network.\n2. Now run the following command aireplay-ng -9 -e Wireless Lab -a <mac>\nmon0 on a terminal.\n3. Go back to Wireshark and you should see a lot of packets on the screen now.\nSome of these packets have been sent by aireplay-ng, which we launched, and\nothers are from the access point Wireless Lab in response to the injected packets.\nWhat just happened?\nWe just successfully injected packets into our test lab network using aireplay-ng. It is\nimportant to note that our card injected these arbitrary packets into the network without\nbeing actually connected to the access point Wireless Lab.\n[ 28 ]\nwww.it-ebooks.info\nChapter 2\nHave a go hero – installing Kali on VirtualBox\nWe will look at packet injection in greater detail in later chapters; however, feel free to\nexplore other options of the Aireplay-ng tool to inject packets. You can verify whether\ninjection succeeded by using Wireshark to monitor the air.\nImportant note on WLAN sniffing and injection\nWLANs typically operate within three different frequency ranges – : 2.4 GHz, 3.6 GHz and\n4.9/5.0 GHz. Not all Wi-Fi cards support all these ranges and associated bands. For instance,,\nan Alfa card only supports IEEE 802.11b/g. This would mean that this card cannot operate in\n802.11a/n. The key here is to sniff or inject packets in a particular band; your Wi-Fi card will\nneed to support it.\nAnother interesting aspect of Wi-Fi is that, in each of these bands, there are multiple channels.\nIt is important to note that your Wi-Fi card can only be on one channel at any given moment.\nIt is not possible to tune into multiple channels at the same time. The best analogy I can give\nyou is your car radio. You can tune it to only one of the available channels at any given time. If\nyou want to hear to something else, you will have to change the channel. The same principle\napplies to WLAN Sniffing. This brings us to an important conclusion—we cannot sniff all\nchannels at the same time; we will need to select the channel that is of interest to us. What\nthis means is that, if our access point of interest is on channel 1, we will need to set our card\non channel 1.\nThough we have addressed WLAN sniffing in the above paragraphs, the same applies to\ninjection as well. To inject packets on a specific channel, we will need to put the card radio\non that channel.\nLet's now do some exercises on setting our card to specific channels, channel hopping,\nsetting regulatory domains, power levels etc.\nTime for action – experimenting with your adapter\nFollow the instructions below carefully:\n1. Enter the iwconfig wlan0 command to check the capabilities of your card.\nAs you can see in the figure below, my adapter can operate in the b, g, and n bands.\n[ 29 ]\nwww.it-ebooks.info\nWLAN and its Inherent Insecurities\n2. To set the card on a particular channel, we use the iwconfig mon0 channel X\ncommands.\n3. The iwconfig series of commands does not have a channel hopping mode.\nOne could write a simple script over it to make it do so. An easier way is to use\nAirodump-NG with options to either hop channels arbitrarily, use only a subset,\nor use only selected bands. All these options are illustrated in the screenshot below\nwhen we run airodump-ng --help:\n[ 30 ]\nwww.it-ebooks.info\nChapter 2\nWhat just happened?\nWe understood that both wireless sniffing and packet injection depend on the hardware\nsupport available. This means that we can only operate on bands and channels allowed by\nour card. Also, the wireless card radio can only be on one channel at a time. This further\nmeans that we can only sniff or inject in one channel at a time.\nHave a go hero – sniffing multiple channels\nIf you need to simultaneously sniff on multiple channels, you will require multiple physical\nWi-Fi cards. If you can procure additional cards, then try to sniff on multiple channels\nsimultaneously.\nThe role of regulatory domains in wireless\nThe complexities of Wi-Fi don't end here. Every country has its own unlicensed spectrum\nallocation policy. This specifically dictates allowed power levels and allowed users for the\nspectrum. In the US, for example, the FCC decides this and, if you use WLANs in the US, you\nhave to abide by these regulations. In some countries, not doing this is a punishable offense.\nNow let's look at how we can find the default regulatory settings and then how to change\nthem if required.\nTime for action – experimenting with your adapter\nFollow these instructions carefully:\n1. Reboot your computer and do not connect your adapter to it yet.\n2. Once logged in, monitor the kernel messages using the tail command:\n[ 31 ]\nwww.it-ebooks.info\nWLAN and its Inherent Insecurities\nInsert the adapter, and you should see something that resembles the following\nscreenshot. This shows the default regulatory settings applied to your card:\n3. Let's assume that you are based in the US. To change your regulatory domain to\nthe US, we issue the command iw reg set US in a new terminal:\nIf the command is successful, we get an output such as the one in the following\nscreenshot in the terminal where we monitoring /var/log/messages:\n[ 32 ]\nwww.it-ebooks.info\nChapter 2\n4. Now try changing the card to channel 11; it will work. But, when you try changing\nit to channel 12, you get an error. This is because channel 12, cannot be used in\nthe US.\n[ 33 ]\nwww.it-ebooks.info\nWLAN and its Inherent Insecurities\n5. The same applies for power levels. The US only allows a maximum of 27 dBm\n(500 milliwatts); thus even though my adapter has an advertised power of 1 Watt\n(30 dBm), we cannot set the card to the maximum transmit power:\n6. However, if we were in Bolivia, then we could transmit at a power of 1 Watt as this\nis allowed there. As we can see, once we set the regulatory domain to Bolivia—iw\nreg set BO—we can change the card power to 30DMB or 1 Watt. We can also use\nchannel 12 in Bolivia, which was disallowed in the US:\n[ 34 ]\nwww.it-ebooks.info\nChapter 2\nWhat just happened?\nEvery country has its own regulations for the use of the unlicensed wireless band. When\nwe set our regulatory domain to a specific country, our card will obey the allowed channels\nand power levels specified. However, it is easy to change the regulatory domain of the card\nand force it to work on disallowed channels and to transmit at a power level that is greater\nthan allowed.\nHave a go hero – exploring regulatory domains\nLook at the various parameters you can set such as channel, power, regulatory domains etc.\nusing the iw series of commands on Kali. This should give you a firm understanding of how to\nconfigure your card when you are in various countries and require to change your card settings.\nPop quiz – WLAN packet sniffing and injection\nQ1. Which frame types are responsible for authentication in WLANs?\n1. Control\n2. Management\n3. Data\n4. QoS\nQ2. What is the name of the second monitor mode interface that can be created on wlan0\nusing airmon-ng?\n1. Mon0\n2. Mon1\n3. 1Mon\n4. Monb\nQ3. What is the filter expression to view all non-beacon frames in Wireshark?\n1. !(wlan.fc.type_subtype == 0x08)\n2. wlan.fc.type_subtype == 0x08\n3. (no beacon)\n4. Wlan.fc.type == 0x08\n[ 35 ]\nwww.it-ebooks.info\nWLAN and its Inherent Insecurities\nSummary\nIn this chapter, we have made some key observations about WLAN protocols.\nManagement, Control and Data frames are unencrypted and thus can be easily read by\nsomeone who is monitoring the airspace. It is important to note here that the data packet\npayload can be protected using encryption to keep it confidential. We will talk about this\nin the next chapter.\nWe can sniff the entire airspace in our vicinity by putting our card into monitor mode.\nAs there is no integrity protection in Management and Control frames, it is very easy to inject\nthese packets by modifying them or replaying them as-is using tools such as aireplay-ng.\nUnencrypted data packets can also be modified and replayed back to the network. If the\npacket is encrypted, we can still replay the packet as-is, as WLAN by design does not have\npacket replay protection.\nIn the next chapter, we will look at different authentication mechanisms that are used in\nWLANs such as MAC filtering and shared Authentication etc. and understand the various\nsecurity flaws in them through live demonstrations.\n[ 36 ]\nwww.it-ebooks.info"
  },
  {
    "input": "What are the methods used to bypass WLAN authentication and how do they work?",
    "summary": "This chapter discusses how to bypass WLAN authentication methods, including hidden SSIDs, MAC filters, Open Authentication, and Shared Key Authentication. It explains that these methods are not secure and can be easily exploited using tools like airodump-ng and aireplay-ng. The chapter also covers how to crack WEP and WPA/WPA2 encryption, highlighting that WEP is always vulnerable, while WPA/WPA2 can be cracked if a weak passphrase is used. Finally, it shows how to use the cracked keys to connect to the network and decrypt packets.",
    "output": "3\nBypassing WLAN Authentication\n\"A false sense of security is worse than being unsure.\"\nAnonymous\nA false sense of security is worse than being insecure, as you may not be\nprepared to face the eventuality of being hacked.\nWLANs can have weak authentication schemas that can be easily broken and\nbypassed. In this chapter, we will take a look at the various basic authentication\nschemas used in WLANs and learn how to beat them.\nIn this chapter, we will take a look at the following topics:\n Uncovering hidden SSIDs\n Beating MAC filters\n Bypassing Open Authentication\n Bypassing Shared Key Authentication\n[ 37 ]\nwww.it-ebooks.info\nBypassing WLAN Authentication\nHidden SSIDs\nIn the default configuration mode, all access points send out their SSIDs in Beacon frames.\nThis allows clients in the vicinity to discover them easily. Hidden SSIDs is a configuration\nwhere the access point does not broadcast its SSID in Beacon frames. Thus, only clients that\nknow the SSID of the access point can connect to it.\nUnfortunately, this measure does not provide robust security, but most network\nadministrators think it does. Hidden SSIDs should not be considered a security measure by\nany stretch of the imagination. We will now take a look at how to uncover hidden SSIDs.\nTime for action – uncovering hidden SSIDs\nPerform the following instructions to get started:\n1. Using Wireshark, if we monitor Beacon frames in the Wireless Lab network,\nwe are able to see the SSID in plain text. You should see Beacon frames, as shown\nin the following screenshot:\n[ 38 ]\nwww.it-ebooks.info\nChapter 3\n2. Configure your access point to set the Wireless Lab network as a hidden SSID.\nThe configuration option to do this may differ across access points. In my case, I\nneed to check the Invisible option in the Visibility Status option,\nas shown in the following screenshot:\n[ 39 ]\nwww.it-ebooks.info\nBypassing WLAN Authentication\n3. Now if you take a look at the Wireshark trace, you will find that the SSID\nWireless Lab has disappeared from the Beacon frames. This is what hidden\nSSIDs are all about:\n[ 40 ]\nwww.it-ebooks.info\nChapter 3\n4. In order to bypass Beacon frames, we will first use the passive technique of waiting\nfor a legitimate client to connect the access point. This will generate probe request\nand probe response packets that will contain the SSID of the network, thus revealing\nits presence:\n[ 41 ]\nwww.it-ebooks.info\nBypassing WLAN Authentication\n5. Alternately, you can use the aireplay-ng utility to send deauthentication packets\nto all stations on behalf of the Wireless Lab access point by typing aireplay-ng\n-0 5 -a <mac> --ignore-negative mon0, where <mac> is the MAC address\nof the router. The -0 option is used to choose a deauthentication attack, and 5 is the\nnumber of deauthentication packets to send. Finally, -a specifies the MAC address\nof the access point you are targeting:\n6. The preceding deauthentication packets will force all legitimate clients to disconnect\nand reconnect. It would be a good idea to add a filter for deauthentication packets\nto view them in an isolated way:\n[ 42 ]\nwww.it-ebooks.info\nChapter 3\n7. The probe responses from the access point will end up revealing its hidden SSID.\nThese packets will show up on Wireshark as shown next. Once the legitimate clients\nconnect back, we can see the hidden SSID using the probe request and probe\nresponse frames. You can use the filter (wlan.bssid == 00:21:91:d2:8e:25) &&\n!(wlan.fc.type_subtype == 0x08) to monitor all non-Beacon packets to and fro from\nthe access point. The && sign stands for the logical AND operator and the ! sign\nstands for the logical NOT operator:\nWhat just happened?\nEven though the SSID is hidden and not broadcasted, whenever a legitimate client tries\nto connect to the access point, they exchange probe request and probe response packets.\nThese packets contain the SSID of the access point. As these packets are not encrypted,\nthey can be very easily sniffed from the air and the SSID can be found.\nWe will cover using probe requests for other purposes such as tracking in a later chapter.\nIn many cases, all clients may be already connected to the access point and there may be\nno probe request/response packets available in the Wireshark trace. Here, we can forcibly\ndisconnect the clients from the access point by sending forged deauthentication packets\non the air. These packets will force the clients to reconnect back to the access point, thus\nrevealing the SSID.\n[ 43 ]\nwww.it-ebooks.info\nBypassing WLAN Authentication\nHave a go hero – selecting deauthentication\nIn the previous exercise, we sent broadcast deauthentication packets to force reconnection\nof all wireless clients. Try to verify how you can selectively target individual clients using the\naireplay-ng utility.\nIt is important to note that, even though we are illustrating many of these concepts using\nWireshark, it is possible to orchestrate these attacks with other tools, such as the aircrack-\nng suite as well. We encourage you to explore the entire aircrack-NG suite of tools and other\ndocumentation located on their website at http://www.aircrack-ng.org.\nMAC filters\nMAC filters are an age-old technique used for authentication and authorization and have\ntheir roots in the wired world. Unfortunately, they fail miserably in the wireless world.\nThe basic idea is to authenticate based on the MAC address of the client. The MAC filter is\nan identification code assigned to a network interface; a router will be able to check this\ncode and compare it to a list of approved MACs. This list of allowed MAC addresses will be\nmaintained by the network administrator and will be fed into the access point. We will now\ntake a look at how easy it is to bypass MAC filters.\nTime for action – beating MAC filters\nLet's follow the instructions to get started:\n1. Let's first configure our access point to use MAC filtering and then add the client\nMAC address of the victim laptop. The settings pages on my router looks as follows:\n[ 44 ]\nwww.it-ebooks.info\nChapter 3\n2. Once MAC filtering is enabled, only the allowed MAC address will be able to\nsuccessfully authenticate with the access point. If we try to connect to the access\npoint from a machine with a non-whitelisted MAC address, the connection will fail.\n3. Behind the scenes, the access point is sending Authentication failure messages to\nthe client. The packet trace resembles the following:\n[ 45 ]\nwww.it-ebooks.info\nBypassing WLAN Authentication\n4. In order to beat MAC filters, we can use airodump-ng to find the MAC addresses\nof clients connected to the access point. We can do this by issuing the airodump-\nng -c 11 -a --bssid <mac> mon0 command. By specifying the bssid\ncommand, we will only monitor the access point, which is of interest to us. The -c\n11 command sets the channel to 11 where the access point is. The -a command\nensures that, in the client section of the airodump-NG output, only clients\nassociated and connected to an access point are shown. This will show us all the\nclient MAC addresses associated with the access point:\n5. Once we find a whitelisted client's MAC address, we can spoof the MAC address\nof the client using the macchanger utility, which ships with BackTrack. You can use\nthe macchanger –m <mac> wlan0 command to get this done. The MAC address\nyou specify with the -m command option is the new spoofed MAC address for the\nwlan0 interface:\n6. As you can clearly see, we are now able to connect to the access point after spoofing\nthe MAC address of a whitelisted client.\n[ 46 ]\nwww.it-ebooks.info\nChapter 3\nWhat just happened?\nWe monitored the air using airodump-ng and found the MAC address of legitimate clients\nconnected to the wireless network. We then used the macchanger utility to change our\nwireless card's MAC address to match the client's. This fooled the access point into believing\nthat we were the legitimate client, and it allowed us access to its wireless network.\nYou are encouraged to explore the different options of the airodump-NG utility by going\nthrough the documentation on their website at http://www.aircrack-ng.org/doku.\nphp?id=airodump-ng.\nOpen Authentication\nThe term Open Authentication is almost a misnomer, as it actually provides no\nauthentication at all. When an access point is configured to use Open Authentication,\nit will successfully authenticate all clients that connect to it.\nWe will now do an exercise to authenticate and connect to an access point using\nOpen Authentication.\nTime for action – bypassing Open Authentication\nLet's now take a look at how to bypass Open Authentication:\n1. We will first set our lab access point Wireless Lab to use Open Authentication.\nOn my access point, this is simply done by setting Security Mode to Disable Security:\n[ 47 ]\nwww.it-ebooks.info\nBypassing WLAN Authentication\n2. We then connect to this access point using the iwconfig wlan0 essid\nWireless Lab command and verify that the connection has succeeded\nand that we are connected to the access point.\n3. Note that we did not have to supply any username/password/passphrase to\nget through Open Authentication.\nWhat just happened?\nThis is probably the simplest exercise so far. As you saw, there is no barrier to connecting\nto an Open Authentication network and connecting to the access point.\nShared Key Authentication\nShared Key Authentication uses a shared secret such as the WEP key to authenticate the\nclient. The exact exchange of information is illustrated in the following screenshot (taken\nfrom www.netgear.com):\nThe wireless client sends an authentication request to the access point, which responds\nback with a challenge. The client now needs to encrypt this challenge with the shared key\nand send it back to the access point, which decrypts this to check whether it can recover the\noriginal challenge text. If it succeeds, the client successfully authenticates; if not, it sends an\nauthentication failed message.\n[ 48 ]\nwww.it-ebooks.info\nChapter 3\nThe security problem here is that an attacker passively listening to this entire communication\nby sniffing the air has access to both the plain text challenge and the encrypted challenge. He\ncan apply the XOR operation to retrieve the keystream. This keystream can be used to encrypt\nany future challenge sent by the access point without needing to know the actual key.\nThe most common form of shared authentication is known as WEP or Wired Equivalent\nProtocol. It is easy to break, and numerous tools have been created over time to facilitate\nthe cracking of WEP networks.\nIn this exercise, we will learn how to sniff the air to retrieve the challenge and the encrypted\nchallenge, retrieve the keystream, and use it to authenticate to the access point without\nneeding the shared key.\nTime for action – bypassing Shared Authentication\nBypassing Shared Authentication is a bit more challenging than the previous exercises, so\nfollow the steps carefully:\n1. Let's first set up Shared Authentication for our Wireless Lab network. I have done\nthis on my access point by setting the security mode as WEP and Authentication as\nShared Key:\n[ 49 ]\nwww.it-ebooks.info\nBypassing WLAN Authentication\n2. Let's now connect a legitimate client to this network using the shared key we have\nset in step 1.\n3. In order to bypass Shared Key Authentication, we will first start sniffing packets\nbetween the access point and its clients. However, we would also like to log the\nentire shared authentication exchange. To do this, we use the airodump-ng\nutility using the airodump-ng mon0 -c 11 --bssid <mac> -w keystream\ncommand. The -w option, which is new here, requests Airodump-NG to store the\npackets in a file whose name is prefixed with the word keystream. Incidentally, it\nmight be a good idea to store different sessions of packet captures in different files.\nThis allows you to analyze them long after the trace has been collected:\n4. We can either wait for a legitimate client to connect to the access point or force\na reconnect using the deauthentication technique used previously. Once a client\nconnects and the shared key authentication succeeds, airodump-ng will capture\nthis exchange automatically by sniffing the air. An indication that the capture has\nsucceeded is when the AUTH column reads WEP.\n5. The captured keystream is stored in a file prefixed with the words keystream file\nin the current directory. In my case, the name of the file is keystream-01-00-21-\n91-D2-8E-25.xor.\n6. In order to fake a shared key authentication, we will use the aireplay-ng tool.\nWe run the aireplay-ng -1 0 -e \"Wireless Lab\" -y keystream-\n01-00-21-91-D2-8E-25.xor -a <mac> -h AA:AA:AA:AA:AA:AA mon0\ncommand. This aireplay-ng command uses the keystream we retrieved in\nstep 5 and tries to authenticate with the access point with SSID Wireless Lab and\nMAC address 00:21:91:D2:8E:25, and uses an arbitrary client MAC address\nAA:AA:AA:AA:AA:AA. Fire up Wireshark and sniff all packets of interest by\napplying a wlan.addr == AA:AA:AA:AA:AA:AA filter. We can verify this using\nWireshark. You should see a trace on the Wireshark screen, as shown in the\nfollowing screenshot:\n[ 50 ]\nwww.it-ebooks.info\nChapter 3\n7. The first packet is the authentication request sent by the aireplay-ng tool to the\naccess point:\n[ 51 ]\nwww.it-ebooks.info\nBypassing WLAN Authentication\n8. The second packet consists of the access point sending the client challenge text,\nas shown in the following screenshot:\n9. In the third packet, the tool sends the encrypted challenge to the access point:\n[ 52 ]\nwww.it-ebooks.info\nChapter 3\n10. As the aireplay-ng tool used the derived keystream for encryption, the\nauthentication succeeds and the access point sends a success message in\nthe fourth packet:\n11. After the authentication succeeds, the tool fakes an association with the access\npoint, which succeeds as well:\n[ 53 ]\nwww.it-ebooks.info\nBypassing WLAN Authentication\n12. If you check the wireless logs in your access point's administrative interface,\nyou should now see a wireless client with the MAC address AA:AA:AA:AA:AA:AA\nconnected:\nWhat just happened?\nWe were successful in deriving the keystream from a shared authentication exchange, and\nwe used it to fake an authentication to the access point.\nHave a go hero – filling up the access point's tables\nAccess points have a maximum client count after which they start refusing connections. By\nwriting a simple wrapper over aireplay-ng, it is possible to automate and send hundreds of\nconnection requests from random MAC addresses to the access point. This will end up filling\nthe internal tables and once the maximum client count is reached, the access point will stop\naccepting new connections. This is typically what is called a Denial of Service (DoS) attack\nand can force the router to reboot or make it dysfunctional. This can lead to all the wireless\nclients being disconnected and being unable to use the authorized network.\nCheck whether you can verify this in your lab!\nPop quiz – WLAN authentication\nQ1. How can you force a wireless client to re-connect to the access point?\n1. By sending a deauthentication packet.\n2. By rebooting the client.\n3. By rebooting the access point.\n4. All of the above.\nQ2. What does Open Authentication do?\n1. It provides decent security.\n2. It provides no security.\n3. It requires the use of encryption.\n4. None of the above.\n[ 54 ]\nwww.it-ebooks.info\nChapter 3\nQ3. How does breaking Shared Key Authentication work?\n1. By deriving the keystream from the packets.\n2. By deriving the encryption key.\n3. By sending deauthentication packets to the access point.\n4. By rebooting the access point.\nSummary\nIn this chapter, we learnt about WLAN Authentication. Hidden SSIDs are a security-through-\nobscurity feature and are is relatively simple to beat. MAC address filters do not provide\nany security, as MAC addresses can be sniffed from the air from the wireless packets. This is\npossible because the MAC addresses are unencrypted in the packet. Open Authentication\nprovides no real authentication at all. Shared Key Authentication is a bit tricky to beat but,\nwith the help of the right tools, we can derive the store and the keystream, using which it is\npossible to answer all future challenges sent by the access point. The result is that we can\nauthenticate without needing to know the actual key.\nIn the next chapter, we will take a look at different WLAN encryption mechanisms—WEP,\nWPA, and WPA2—and look at the insecurities that plague them.\n[ 55 ]\nwww.it-ebooks.info\nwww.it-ebooks.info\n4\nWLAN Encryption Flaws\n\"640K is more memory than anyone will ever need.\"\nBill Gates, Founder, Microsoft\nEven with the best of intentions, the future is always unpredictable.\nThe WLAN committee designed WEP and then WPA to be foolproof encryption\nmechanisms but, over time, both these mechanisms had flaws that have been\nwidely publicized and exploited in the real world.\nWLAN encryption mechanisms have had a long history of being vulnerable to\ncryptographic attacks. It started with WEP in early 2000, which eventually was\ncompletely broken. In recent times, attacks are slowly targeting WPA. Even\nthough there is no public attack available currently to break WPA in all general\nconditions, there are attacks that are feasible under special circumstances.\nIn this chapter, we will take a look at the following topics:\n Different encryption schemas in WLANs\n Cracking WEP encryption\n Cracking WPA encryption\n[ 57 ]\nwww.it-ebooks.info\nWLAN Encryption Flaws\nWLAN encryption\nWLANs transmit data over the air and thus there is an inherent need to protect data\nconfidentiality. This is best done using encryption. The WLAN committee (IEEE 802.11)\nformulated the following protocols for data encryption:\n Wired Equivalent Privacy (WEP)\n Wi-Fi Protected Access (WPA)\n Wi-Fi Protection Access v2 (WPAv2)\nIn this chapter, we will take a look at each of these encryption protocols and demonstrate\nvarious attacks against them.\nWEP encryption\nThe WEP protocol was known to be flawed as early as 2000 but, surprisingly, it is still\ncontinuing to be used and access points still ship with WEP enabled capabilities.\nThere are many cryptographic weaknesses in WEP and they were discovered by Walker,\nArbaugh, Fluhrer, Martin, Shamir, KoreK, and many others. Evaluation of WEP from a\ncryptographic standpoint is beyond the scope of this book, as it involves understanding\ncomplex math. In this section, we will take a look at how to break WEP encryption using\nreadily available tools on the BackTrack platform. This includes the entire aircrack-ng\nsuite of tools—airmon-ng, aireplay-ng, airodump-ng, aircrack-ng, and others.\nThe fundamental weakness in WEP is its use of RC4 and a short IV value that is recycled\nevery 224 frames. While this is a large number in itself, there is a 50 percent chance of four\nreuses every 5,000 packets. To use this to our advantage, we generate a large amount of\ntraffic so that we can increase the likelihood of IVs that have been reused and thus compare\ntwo cipher texts encrypted with the same IV and key.\nLet's now first set up WEP in our test lab and see how we can break it.\n[ 58 ]\nwww.it-ebooks.info\nChapter 4\nTime for action – cracking WEP\nFollow the given instructions to get started:\n1. Let's first connect to our access point Wireless Lab and go to the settings area that\ndeals with wireless encryption mechanisms:\n[ 59 ]\nwww.it-ebooks.info\nWLAN Encryption Flaws\n2. On my access point, this can be done by setting the Security Mode to WEP. We will\nalso need to set the WEP key length. As shown in the following screenshot, I have\nset WEP to use 128bit keys. I have set the default key to WEP Key 1 and the value in\nhex to abcdefabcdefabcdefabcdef12 as the 128-bit WEP key. You can set this to\nwhatever you choose:\n3. Once the settings are applied, the access point should now be offering WEP as the\nencryption mechanism of choice. Let's now set up the attacker machine.\n4. Let's bring up Wlan0 by issuing the following command:\nifconfig wlan0 up\n5. Then, we will run the following command:\nairmon-ng start wlan0\n[ 60 ]\nwww.it-ebooks.info\nChapter 4\n6. This is done so as to create mon0, the monitor mode interface, as shown in the\nfollowing screenshot. Verify that the mon0 interface has been created using the\niwconfig command:\n7. Let's run airodump-ng to locate our lab access point using the following command:\nairodump-ng mon0\n[ 61 ]\nwww.it-ebooks.info\nWLAN Encryption Flaws\n8. As you can see in the following screenshot, we are able to see the Wireless Lab\naccess point running WEP:\n9. For this exercise, we are only interested in the Wireless Lab, so let's enter the\nfollowing command to only see packets for this network:\nairodump-ng –bssid 00:21:91:D2:8E:25 --channel 11 --write\nWEPCrackingDemo mon0\n[ 62 ]\nwww.it-ebooks.info\nChapter 4\nThe preceding command line is shown in the following screenshot:\n10. We will request airodump-ng to save the packets into a pcap file using the\n--write directive:\n[ 63 ]\nwww.it-ebooks.info\nWLAN Encryption Flaws\n11. Now let's connect our wireless client to the access point and use the WEP key as\nabcdefabcdefabcdefabcdef12. Once the client has successfully connected,\nairodump-ng should report it on the screen.\n12. If you do an ls in the same directory, you will be able to see files prefixed with\nWEPCrackingDemo-*, as shown in the following screenshot. These are traffic\ndump files created by airodump-ng:\n[ 64 ]\nwww.it-ebooks.info\nChapter 4\n13. If you notice the airodump-ng screen, the number of data packets listed under\nthe #Data column is very few in number (only 68). In WEP cracking, we need a\nlarge number of data packets, encrypted with the same key to exploit weaknesses\nin the protocol. So, we will have to force the network to produce more data packets.\nTo do this, we will use the aireplay-ng tool:\n[ 65 ]\nwww.it-ebooks.info\nWLAN Encryption Flaws\n14. We will capture ARP packets on the wireless network using Aireplay-ng and inject\nthem back into the network to simulate ARP responses. We will be starting Aireplay-\nng in a separate window, as shown in the next screenshot. Replaying these packets a\nfew thousand times, we will generate a lot of data traffic on the network. Even though\nAireplay-ng does not know the WEP key, it is able to identify the ARP packets by\nlooking at the size of the packets. ARP is a fixed header protocol; thus, the size of the\nARP packets can be easily determined and can be used to identify them even within\nencrypted traffic. We will run aireplay-ng with the options that are discussed\nnext. The -3 option is for ARP replay, -b specifies the BSSID of our network, and -h\nspecifies the client MAC address that we are spoofing. We need to do this, as replay\nattacks will only work for authenticated and associated client MAC addresses:\n[ 66 ]\nwww.it-ebooks.info\nChapter 4\n15. Very soon you should see that aireplay-ng was able to sniff ARP packets and\nstarted replaying them into the network. If you encounter channel-related errors\nas I did, append –ignore-negative-one to your command, as shown in the\nfollowing screenshot:\n[ 67 ]\nwww.it-ebooks.info\nWLAN Encryption Flaws\n16. At this point, airodump-ng will also start registering a lot of data packets.\nAll these sniffed packets are being stored in the WEPCrackingDemo-* files that\nwe saw previously:\n17. Now let's start with the actual cracking part! We fire up aircrack-ng with\nthe option WEPCRackingDemo-0*.cap in a new window. This will start the\naircrack-ng software and it will begin working on cracking the WEP key using\nthe data packets in the file. Note that it is a good idea to have Airodump-ng collect\nthe WEP packets, aireplay-ng do the replay attack, and aircrack-ng attempt\nto crack the WEP key based on the captured packets, all at the same time. In this\nexperiment, all of them are open in separate windows.\n[ 68 ]\nwww.it-ebooks.info\nChapter 4\n18. Your screen should look like the following screenshot when aircrack-ng is\nworking on the packets to crack the WEP key:\n[ 69 ]\nwww.it-ebooks.info\nWLAN Encryption Flaws\n19. The number of data packets required to crack the key is nondeterministic, but\ngenerally in the order of a hundred thousand or more. On a fast network (or using\naireplay-ng), this should take 5-10 minutes at most. If the number of data\npackets currently in the file is not sufficient, then aircrack-ng will pause, as\nshown in the following screenshot, and wait for more packets to be captured; it will\nthen restart the cracking process:\n[ 70 ]\nwww.it-ebooks.info\nChapter 4\n20. Once enough data packets have been captured and processed, aircrack-ng\nshould be able to break the key. Once it does, it proudly displays it in the terminal\nand exits, as shown in the following screenshot:\n21. It is important to note that WEP is totally flawed and any WEP key (no matter how\ncomplex) will be cracked by Aircrack-ng. The only requirement is that a large\nenough number of data packets, encrypted with this key, are made available to\naircrack-ng.\n[ 71 ]\nwww.it-ebooks.info\nWLAN Encryption Flaws\nWhat just happened?\nWe set up WEP in our lab and successfully cracked the WEP key. In order to do this, we first\nwaited for a legitimate client of the network to connect to the access point. After this, we\nused the aireplay-ng tool to replay ARP packets into the network. This caused the network\nto send ARP replay packets, thus greatly increasing the number of data packets sent over the\nair. We then used the aircrack-ng tool to crack the WEP key by analyzing cryptographic\nweaknesses in these data packets.\nNote that we can also fake an authentication to the access point using the Shared Key\nAuthentication bypass technique we learnt in the last chapter. This can come in handy if the\nlegitimate client leaves the network. This will ensure that we can spoof an authentication\nand association and continue to send our replayed packets into the network.\nHave a go hero – fake authentication with WEP cracking\nIn the previous exercise, if the legitimate client had suddenly logged off the network, we\nwould not have been able to replay the packets as the access point will refuse to accept\npackets from un-associated clients.\nYour challenge will be to fake an authentication and association using the Shared Key\nAuthentication bypass we learnt in the last chapter, while WEP cracking is going on. Log off\nthe legitimate client from the network and verify that you are still able to inject packets into\nthe network and whether the access point accepts and responds to them.\nWPA/WPA2\nWPA( or WPA v1 as it is referred to sometimes) primarily uses the TKIP encryption algorithm.\nTKIP was aimed at improving WEP, without requiring completely new hardware to run it.\nWPA2 in contrast mandatorily uses the AES-CCMP algorithm for encryption, which is much\nmore powerful and robust than TKIP.\nBoth WPA and WPA2 allow either EAP-based authentication, using RADIUS servers\n(Enterprise) or a Pre-Shared key (PSK) (personal)-based authentication schema.\nWPA/WPA2 PSK is vulnerable to a dictionary attack. The inputs required for this attack are\nthe four-way WPA handshake between client and access point, and a wordlist that contains\ncommon passphrases. Then, using tools such as Aircrack-ng, we can try to crack the WPA/\nWPA2 PSK passphrase.\n[ 72 ]\nwww.it-ebooks.info\nChapter 4\nAn illustration of the four-way handshake is shown in the following screenshot:\nThe way WPA/WPA2 PSK works is that it derives the per-session key, called the Pairwise\nTransient Key (PTK), using the Pre-Shared Key and five other parameters—SSID of Network,\nAuthenticator Nounce (ANounce), Supplicant Nounce (SNounce), Authenticator MAC\naddress (Access Point MAC), and Suppliant MAC address (Wi-Fi Client MAC). This key is\nthen used to encrypt all data between the access point and client.\nAn attacker who is eavesdropping on this entire conversation by sniffing the air can get\nall five parameters mentioned in the previous paragraph. The only thing he does not have\nis the Pre-Shared Key. So, how is the Pre-Shared Key created? It is derived by using the\nWPA-PSK passphrase supplied by the user, along with the SSID. The combination of both of\nthese is sent through the Password-Based Key Derivation Function (PBKDF2), which outputs\nthe 256-bit shared key.\n[ 73 ]\nwww.it-ebooks.info\nWLAN Encryption Flaws\nIn a typical WPA/WPA2 PSK dictionary attack, the attacker would use a large dictionary of\npossible passphrases with the attack tool. The tool would derive the 256-bit Pre-Shared key\nfrom each of the passphrases and use it with the other parameters, described earlier, to\ncreate the PTK. The PTK will be used to verify the Message Integrity Check (MIC) in one of\nthe handshake packets. If it matches, then the guessed passphrase from the dictionary was\ncorrect; if not, it was incorrect.\nEventually, if the authorized network passphrase exists in the dictionary, it will be identified.\nThis is exactly how WPA/WPA2 PSK cracking works! The following figure illustrates the\nsteps involved:\nIn the next exercise, we will take a look at how to crack a WPA PSK wireless network. The\nexact same steps will be involved in cracking a WPA2-PSK network using CCMP(AES) as well.\n[ 74 ]\nwww.it-ebooks.info\nChapter 4\nTime for action – cracking WPA-PSK weak passphrases\nFollow the given instructions to get started:\n1. Let's first connect to our access point Wireless Lab and set the access point to use\nWPA-PSK. We will set the WPA-PSK passphrase to abcdefgh so that it is vulnerable\nto a dictionary attack:\n2. We start airodump-ng with the following command so that it starts capturing and\nstoring all packets for our network:\nairodump-ng –bssid 00:21:91:D2:8E:25 –channel 11 –write\nWPACrackingDemo mon0\"\nThe following screenshot shows the output:\n[ 75 ]\nwww.it-ebooks.info\nWLAN Encryption Flaws\n3. Now we can wait for a new client to connect to the access point so that we can\ncapture the four-way WPA handshake, or we can send a broadcast deauthentication\npacket to force clients to reconnect. We do the latter to speed things up. The same\nthing can happen again with the unknown channel error. Again, use –-ignore-\nnegative-one. This can also require more than one attempt:\n4. As soon as we capture a WPA handshake, the airodump-ng tool will indicate it\nin the top-right corner of the screen with a WPA handshake followed by the access\npoint's BSSID. If you are using –ignore-negative-one, the tool may replace the\nWPA handshake with a fixed channel message. Just keep an eye out for a quick flash\nof a WPA handshake.\n[ 76 ]\nwww.it-ebooks.info\nChapter 4\n5. We can stop the airodump-ng utility now. Let's open up the cap file in Wireshark\nand view the four-way handshake. Your Wireshark terminal should look like the\nfollowing screenshot. I have selected the first packet of the four-way handshake in\nthe trace file in the screenshot. The handshake packets are the one whose protocol\nis EAPOL:\n[ 77 ]\nwww.it-ebooks.info\nWLAN Encryption Flaws\n6. Now we will start the actual key cracking exercise! For this, we need a dictionary\nof common words. Kali ships with many dictionary files in the metasploit folder\nlocated as shown in the following screenshot. It is important to note that, in\nWPA cracking, you are just as good as your dictionary. BackTrack ships with some\ndictionaries, but these may be insufficient. Passwords that people choose depend\non a lot of things. This includes things such as which country users live in, common\nnames and phrases in that region the, security awareness of the users, and a host of\nother things. It may be a good idea to aggregate country- and region-specific word\nlists, when undertaking a penetration test:\n[ 78 ]\nwww.it-ebooks.info\nChapter 4\n7. We will now invoke the aircrack-ng utility with the pcap file as the input\nand a link to the dictionary file, as shown in the following screenshot. I have used\nnmap.lst , as shown in the terminal:\n[ 79 ]\nwww.it-ebooks.info\nWLAN Encryption Flaws\n8. aircrack-ng uses the dictionary file to try various combinations of passphrases\nand tries to crack the key. If the passphrase is present in the dictionary file, it will\neventually crack it and your screen will look similar to the one in the screenshot:\n9. Please note that, as this is a dictionary attack, the prerequisite is that the passphrase\nmust be present in the dictionary file you are supplying to aircrack-ng. If the\npassphrase is not present in the dictionary, the attack will fail!\n[ 80 ]\nwww.it-ebooks.info\nChapter 4\nWhat just happened?\nWe set up WPA-PSK on our access point with a common passphrase: abcdefgh. We then use\na deauthentication attack to have legitimate clients reconnect to the access point. When we\nreconnect, we capture the four-way WPA handshake between the access point and the client.\nAs WPA-PSK is vulnerable to a dictionary attack, we feed the capture file that contains the\nWPA four-way handshake and a list of common passphrases (in the form of a wordlist) to\nAircrack-ng. As the passphrase abcdefgh is present in the wordlist, Aircrack-ng is\nable to crack the WPA-PSK shared passphrase. It is very important to note again that, in\nWPA dictionary-based cracking, you are just as good as the dictionary you have. Thus, it is\nimportant to compile a large and elaborate dictionary before you begin. Though BackTrack\nships with its own dictionary, it may be insufficient at times and might need more words,\nespecially taking into account the localization factor.\nHave a go hero – trying WPA-PSK cracking with Cowpatty\nCowpatty is a tool that can also crack a WPA-PSK passphrase using a dictionary attack.\nThis tool is included with BackTrack. I leave it as an exercise for you to use Cowpatty to\ncrack the WPA-PSK passphrase.\nAlso, set an uncommon passphrase that is not present in the dictionary and try\nthe attack again. You will now be unsuccessful in cracking the passphrase with both\nAircrack-ng and Cowpatty.\nIt is important to note that the same attack applies even to a WPA2 PSK network. I encourage\nyou to verify this independently.\nSpeeding up WPA/WPA2 PSK cracking\nAs we have already seen in the previous section, if we have the correct passphrase in our\ndictionary, cracking WPA-Personal will work every time like a charm. So, why don't we\njust create a large elaborate dictionary of millions of common passwords and phrases\npeople use? This would help us a lot and most of the time, we would end up cracking the\npassphrase. It all sounds great but we are missing one key component here— the time\ntaken. One of the more CPU and time-consuming calculations is that of the Pre-Shared\nkey using the PSK passphrase and the SSID through the PBKDF2. This function hashes the\ncombination of both over 4,096 times before outputting the 256-bit Pre-Shared key. The next\nstep in cracking involves using this key along with parameters in the four-way handshake\nand verifying against the MIC in the handshake. This step is computationally inexpensive.\nAlso, the parameters will vary in the handshake every time and hence, this step cannot be\nprecomputed. Thus, to speed up the cracking process, we need to make the calculation of\nthe Pre-Shared key from the passphrase as fast as possible.\n[ 81 ]\nwww.it-ebooks.info\nWLAN Encryption Flaws\nWe can speed this up by precalculating the Pre-Shared Key, also called the Pairwise Master\nKey (PMK) in 802.11 standard parlance. It is important to note that, as the SSID is also used\nto calculate the PMK, with the same passphrase and with a different SSID, we will end up\nwith a different PMK. Thus, the PMK depends on both the passphrase and the SSID.\nIn the next exercise, we will take a look at how to precalculate the PMK and use it for\nWPA/WPA2 PSK cracking.\nTime for action – speeding up the cracking process\nWe can proceed with the following steps:\n1. We can precalculate the PMK for a given SSID and wordlist using the genpmk tool\nwith the following command:\ngenpmk –f <chosen wordlist>–d PMK-Wireless-Lab –s \"Wireless Lab\nThis creates the PMK-Wireless-Lab file containing the pregenerated PMK:\n[ 82 ]\nwww.it-ebooks.info\nChapter 4\n2. We now create a WPA-PSK network with the passphrase abcdefgh (present in the\ndictionary we used) and capture a WPA-handshake for that network. We now use\nCowpatty to crack the WPA passphrase, as shown in the following screenshot:\nIt takes approximately 7.18 seconds for Cowpatty to crack the key, using the\nprecalculated PMKs.\n3. We now use aircrack-ng with the same dictionary file, and the cracking\nprocess takes over 22 minutes. This shows how much we are gaining because\nof the precalculation.\n[ 83 ]\nwww.it-ebooks.info\nWLAN Encryption Flaws\n4. In order to use these PMKs with aircrack-ng, we need to use a tool called\nairolib-ng. We will give it the options airolib-ng, PMK-Aircrack\n--import,and cowpatty PMK-Wireless-Lab, where PMK-Aircrack is the\naircrack-ng compatible database to be created and PMK-Wireless-Lab is the\ngenpmk compliant PMK database that we created previously.\n5. We now feed this database to aircrack-ng and the cracking process speeds up\nremarkably. We use the following command:\naircrack-ng –r PMK-Aircrack WPACrackingDemo2-01.cap\n6. There are additional tools available on BackTrack such as Pyrit that can leverage\nmulti CPU systems to speed up cracking. We give the pcap filename with the -r\noption and the genpmk compliant PMK file with the -i option. Even on the same\nsystem used with the previous tools, Pyrit takes around 3 seconds to crack the key,\nusing the same PMK file created using genpmk.\nWhat just happened?\nWe looked at various different tools and techniques to speed up WPA/WPA2-PSK cracking.\nThe whole idea is to pre-calculate the PMK for a given SSID and a list of passphrases in\nour dictionary.\nDecrypting WEP and WPA packets\nIn all the exercises we have done till now, we cracked the WEP and WPA keys using various\ntechniques. What do we do with this information? The first step is to decrypt data packets\nwe have captured using these keys.\nIn the next exercise, we will decrypt the WEP and WPA packets in the same trace file that we\ncaptured over the air, using the keys we cracked.\n[ 84 ]\nwww.it-ebooks.info\nChapter 4\nTime for action – decrypting WEP and WPA packets\nWe can proceed with the following steps:\n1. We will decrypt packets from the WEP capture file we created earlier:\nWEPCrackingDemo-01.cap. For this, we will use another tool in the Aircrack-ng\nsuite called airdecap-ng. We will run the following command, as shown in the\nfollowing screenshot, using the WEP key we cracked previously:\nairdecap-ng -w abcdefabcdefabcdefabcdef12 WEPCrackingDemo-02.cap\n[ 85 ]\nwww.it-ebooks.info\nWLAN Encryption Flaws\n2. The decrypted files are stored in a file named WEPCrackingDemo-02-dec.cap.\nWe use the tshark utility to view the first ten packets in the file. Please note that\nyou may see something different based on what you captured:\n3. WPA/WPA2 PSK will work in exactly the same way as with WEP, using\nthe airdecap-ng utility, as shown in the following screenshot, with the\nfollowing command:\nairdecap-ng –p abdefg WPACrackingDemo-02.cap –e \"Wireless Lab\"\n[ 86 ]\nwww.it-ebooks.info\nChapter 4\nWhat just happened?\nWe just saw how we can decrypt WEP and WPA/WPA2-PSK encrypted packets using\nAirdecap-ng. It is interesting to note that we can do the same using Wireshark. We would\nencourage you to explore how this can be done by consulting the Wireshark documentation.\nConnecting to WEP and WPA networks\nWe can also connect to the authorized network after we have cracked the network key. This\ncan come in handy during penetration testing. Logging onto the authorized network with the\ncracked key is the ultimate proof you can provide to your client that his network is insecure.\n[ 87 ]\nwww.it-ebooks.info\nWLAN Encryption Flaws\nTime for action – connecting to a WEP network\nWe can proceed with the following steps:\n1. Use the iwconfig utility to connect to a WEP network, once you have the key. In a\npast exercise, we broke the WEP key—abcdefabcdefabcdefabcdef12:\nWhat just happened?\nWe saw how to connect to a WEP network.\n[ 88 ]\nwww.it-ebooks.info\nChapter 4\nTime for action – connecting to a WPA network\nWe can proceed with the following steps:\n1. In the case of WPA, the matter is a bit more complicated. The iwconfig utility\ncannot be used with WPA/WPA2 Personal and Enterprise, as it does not support\nit. We will use a new tool called WPA_supplicant for this lab. To use WPA_\nsupplicant for a network, we will need to create a configuration file, as shown\nin the following screenshot. We will name this file wpa-supp.conf:\n2. We will then invoke the WPA_supplicant utility with the following options:\n-D wext -i wlan0 –c wpa-supp.conf to connect to the WPA network we\njust cracked. Once the connection is successful, WPA_supplicant will give you the\nmessage: Connection to XXXX completed.\n3. For both the WEP and WPA networks, once you are connected, you can use\ndhcpclient to grab a DHCP address from the network by typing dhclient3 wlan0.\n[ 89 ]\nwww.it-ebooks.info\nWLAN Encryption Flaws\nWhat just happened?\nThe default Wi-Fi utility iwconfig cannot be used to connect to WPA/WPA2 networks.\nThe de-facto tool for this is WPA_Supplicant. In this lab, we saw how we can use it to\nconnect to a WPA network.\nPop quiz – WLAN encryption flaws\nQ1. What packets are used for Packet Replay?\n1. Deauthentication packet.\n2. Associated packet.\n3. Encrypted ARP packet.\n4. None of the above.\nQ2. When can WEP be cracked?\n1. Always.\n2. Only if a weak key/passphrase is chosen.\n3. Under special circumstances only.\n4. Only if the access point runs old software.\nQ3. When can WPA be cracked?\n1. Always.\n2. Only if a weak key/passphrase is chosen.\n3. If the client contains old firmware.\n4. Even with no client connected to the wireless network.\nSummary\nIn this chapter, we learnt about WLAN encryption. WEP is flawed and no matter what\nthe WEP key is, with enough data packet samples: it is always possible to crack WEP.\nWPA/WPA2 is cryptographically un-crackable currently; however, under special\ncircumstances, such as when a weak passphrase is chosen in WPA/WPA2-PSK,\nit is possible to retrieve the passphrase using dictionary attacks.\nIn the next chapter, we will take a look at different attacks on the WLAN infrastructure,\nsuch as rogue access points, evil twins, bit-flipping attacks, and so on.\n[ 90 ]\nwww.it-ebooks.info"
  },
  {
    "input": "What are the main types of attacks discussed in this chapter against the WLAN infrastructure?",
    "summary": "This chapter discusses various methods to attack WLAN infrastructure, including exploiting default credentials, conducting denial of service attacks, creating evil twins with MAC spoofing, and setting up rogue access points. It highlights how these attacks can compromise network security by gaining unauthorized access or disrupting communication. The chapter also emphasizes the importance of securing WLAN devices and networks to prevent such vulnerabilities.",
    "output": "5\nAttacks on the WLAN Infrastructure\n\"Thus, what is of supreme importance in war is to attack the enemy's strategy\"\nSun Tzu, Art of War\nIn this chapter, we will attack the WLAN infrastructure's core! We will focus on\nhow we can penetrate into the authorized network using various new attack\nvectors and lure authorized clients to connect to us, as an attacker.\nThe WLAN infrastructure is what provides wireless services to all the WLAN clients in a\nsystem. In this chapter, we will take a look at the various attacks that can be conducted\nagainst the infrastructure:\n Default accounts and credentials on the access point\n Denial of service attacks\n Evil twin and access point MAC spoofing\n Rogue access points\nDefault accounts and credentials on the access point\nWLAN access points are the core building blocks of the infrastructure. Even though they play\nsuch an important role, they are sometimes the most neglected in terms of security. In this\nexercise, we will check whether the default passwords have been changed on the access\npoint or not. Then, we will go on to verify that, even if the passwords have been changed,\nthey are still easy to guess and crack using a dictionary-based attack.\n[ 91 ]\nwww.it-ebooks.info\nAttacks on the WLAN Infrastructure\nIt is important to note that, as we move on to more advanced chapters, it will be assumed\nthat you have gone through the previous chapters and are now familiar with the use of\nall the tools discussed there. This will allow us to build on that knowledge and try more\ncomplicated attacks!\nTime for action – cracking default accounts on the access\npoints\nFollow these instructions to get started:\n1. Let's first connect to our access point Wireless Lab and attempt to navigate to\nthe HTTP management interface. We see that the access point model is TP-Link\nWR841N, as shown in the following screenshot:\n2. From the manufacturer's website, we find the default account credentials for\nadmin are admin. We try this on the login page and we succeed in logging in.\nThis shows how easy it is to break into accounts with default credentials. We highly\nencourage you to obtain the router's user manual online. This will allow you to\nunderstand what you are dealing with during the penetration test and gives you\nan insight into other configuration flaws you could check for:\n[ 92 ]\nwww.it-ebooks.info\nChapter 5\nWhat just happened?\nWe verified that the default credentials were never changed on this access point, and this\ncould lead to a full network compromise. Also, even if the default credentials are changed,\nthe result should not be something that is easy to guess or run a simple dictionary-based\nattack on.\nHave a go hero – cracking accounts using brute-force attacks\nIn the previous exercise, change the password to something that is hard to guess or find in\na dictionary and see whether you can crack it using a brute-force approach. Limit the length\nand characters in the password so that you can succeed at some point. One of the most\ncommon tools used to crack HTTP authentication is called Hydra and is available on Kali.\n[ 93 ]\nwww.it-ebooks.info\nAttacks on the WLAN Infrastructure\nDenial of service attacks\nWLANs are prone to Denial of Service (DoS) attacks using various techniques, including but\nnot limited to:\n deauthentication attack\n Disassociation attack\n CTS-RTS attack\n Signal interference or spectrum jamming attack\nIn the scope of this book, we will discuss deauthentication attacks on the Wireless LAN\ninfrastructure using the following experiment:\nTime for action – deauthentication DoS attacks\nFollow these instructions to get started:\n1. Let's configure the Wireless Lab network to use Open Authentication and no\nencryption. This will allow us to see the packets using Wireshark easily:\n[ 94 ]\nwww.it-ebooks.info\nChapter 5\n2. Let's connect a Windows client to the access point. We will see the connection in\nthe airodump-ng screen:\n[ 95 ]\nwww.it-ebooks.info\nAttacks on the WLAN Infrastructure\n3. Now, on the attacker machine, let's run a directed deauthentication attack\nagainst this:\n[ 96 ]\nwww.it-ebooks.info\nChapter 5\n4. Note how the client gets disconnected from the access point completely. We can\nverify this on the airodump-ng screen as well:\n[ 97 ]\nwww.it-ebooks.info\nAttacks on the WLAN Infrastructure\n5. If we use Wireshark to see the traffic, you will notice a lot of deauthentication\npackets over the air that we just sent:\n6. We can do the same attack by sending a Broadcast deauthentication packet on\nbehalf of the access point to the entire wireless network. This will have the effect\nof disconnecting all connected clients:\n[ 98 ]\nwww.it-ebooks.info\nChapter 5\nWhat just happened?\nWe successfully sent deauthentication frames to both the access point and the client. This\nresulted in them getting disconnected and a full loss of communication between them.\nWe also sent out Broadcast deauthentication packets, which will ensure that no client in\nthe vicinity can successfully connect to our access point.\nIt is important to note that, as soon as the client is disconnected, it will try to connect back\nonce again to the access point, and thus the deauthentication attack has to be carried out\nin a sustained way to have a full denial of service effect.\n[ 99 ]\nwww.it-ebooks.info\nAttacks on the WLAN Infrastructure\nThis is one of the easiest attacks to orchestrate but has the most devastating effect. This can\neasily be used in the real world to bring a wireless network down on its knees.\nHave a go hero – disassociation attacks\nTry to check how you can conduct Dis-Association attacks against the infrastructure using\ntools available on Kali. Can you do a broadcast disassociation attack?\nEvil twin and access point MAC spoofing\nOne of the most potent attacks on WLAN infrastructures is the evil twin. The idea is to\nbasically introduce an attacker-controlled access point in the vicinity of the WLAN network.\nThis access point will advertise the exact same SSID as the authorized WLAN network.\nMany wireless users may accidently connect to this malicious access point, thinking it is part\nof the authorized network. Once a connection is established, the attacker can orchestrate a\nman-in-the-middle attack and transparently relay traffic while eavesdropping on the entire\ncommunication. We will take a look at how a man-in-the-middle attack is done in a later\nchapter. In the real world, an attacker would ideally use this attack close to the authorized\nnetwork so that the user gets confused and accidently connects to the attacker's network.\nAn evil twin having the same MAC address as an authorized access point is even more\ndifficult to detect and deter. This is where access point MAC Spoofing comes in! In the next\nexperiment, we will take a look at how to create an evil twin, coupled with access point\nMAC spoofing.\n[ 100 ]\nwww.it-ebooks.info\nChapter 5\nTime for action – evil twins and MAC spoofing\nFollow these instructions to get started:\n1. Use airodump-ng to locate the access point's BSSID and ESSID, which we would\nlike to emulate in the evil twin:\n[ 101 ]\nwww.it-ebooks.info\nAttacks on the WLAN Infrastructure\n2. We connect a Wireless client to this access point:\n[ 102 ]\nwww.it-ebooks.info\nChapter 5\n3. Using this information, we create a new access point with the same ESSID but a\ndifferent BSSID and MAC address using the airbase-ng command. Minor errors\nmay occur with newer releases:\n[ 103 ]\nwww.it-ebooks.info\nAttacks on the WLAN Infrastructure\n4. This new access point also shows up in the airodump-ng screen.. It is important to\nnote that you will need to run airodump-ng in a new window with the following\ncommand:\nairodump-ng --channel 11 wlan0\nLet's see this new access point:\n[ 104 ]\nwww.it-ebooks.info\nChapter 5\n5. Now we send a deauthentication frame to the client, so it disconnects and\nimmediately tries to reconnect:\n6. As we are closer to this client, our signal strength is higher, and it connects to our\nevil twin access point.\n7. We can also spoof the BSSD and MAC address of the access point using the following\ncommand:\nairbase-ng –a <router mac> --essid \"Wireless Lab\" –c 11 mon0\n[ 105 ]\nwww.it-ebooks.info\nAttacks on the WLAN Infrastructure\n8. Now if we look at through airodump-ng, it is almost impossible to differentiate\nbetween both visually:\n9. Even airodump-ng is unable to discern that there are actually two different physical\naccess points on the same channel. This is the most potent form of the evil twin.\n[ 106 ]\nwww.it-ebooks.info\nChapter 5\nWhat just happened?\nWe created an evil twin for the authorized network and used a deauthentication attack\nto have the legitimate client connect back to us, instead of the authorized network\naccess point.\nIt is important to note that, in the case of the authorized access point using encryption such\nas WEP/WPA, it might be more difficult to conduct an attack in which traffic eavesdropping\nis possible. We will take a look at how to break the WEP key with just a client using the Caffe\nLatte attack in a later chapter.\nHave a go hero – evil twins and channel hopping\nIn the previous exercise, run the evil twin on different channels and observe how the client,\nonce disconnected, hops channels to connect to the access point. What is the deciding factor\nbased on which the client decides which access point to connect to? Is it signal strength?\nExperiment and validate.\nA rogue access point\nA rogue access point is an unauthorized access point connected to the authorized network.\nTypically, this access point can be used as a backdoor entry by an attacker, thus enabling him\nto bypass all security controls on the network. This would mean that the firewalls, intrusion\nprevention systems, and so on, which guard the border of a network, would be able to do\nlittle to stop him from accessing the network.\nIn the most common case, a rogue access point is set to Open Authentication and no\nencryption. The rogue access point can be created in the following two ways:\n Installing an actual physical device on the authorized network as a rogue\naccess point. (This is something I leave as an exercise to you.) Also, more than\nwireless security, this has to do with breaching the physical security of the\nauthorized network.\n Creating a rogue access point in software and bridging it with the local authorized\nnetwork Ethernet network. This will allow practically any laptop running on the\nauthorized network to function as a rogue access point. We will look at this in\nthe next experiment.\n[ 107 ]\nwww.it-ebooks.info\nAttacks on the WLAN Infrastructure\nTime for action – cracking WEP\nFollow these instructions to get started:\n1. Let's first bring up our rogue access point using airbase-ng and give it the\nESSID Rogue:\n[ 108 ]\nwww.it-ebooks.info\nChapter 5\n2. We now want to create a bridge between the Ethernet interface, which is part of the\nauthorized network, and our rogue access point interface. To do this, we will first\ninstall bridge-utils files, create a bridge interface, and name it Wifi-Bridge.\nThe following screenshot shows the required commands in action:\napt-get install bridge-utils\nbrctl addbr Wifi-Bridge\nLet's see the following output of the command:\n[ 109 ]\nwww.it-ebooks.info\nAttacks on the WLAN Infrastructure\n3. We will then add both the Ethernet and the At0 virtual interface created by Airbase-\nng to this bridge:\nbrctl addif Wifi-Bridge eth0\nbrctl addif Wifi-Bridge ath0\nThe screenshot of the command as follows:\n[ 110 ]\nwww.it-ebooks.info\nChapter 5\n4. We will then bring with these interfaces up to bring the bridge up with the\nfollowing commands:\nifconfig eth0 0.0.0.0 up\nifconfig ath0 0.0.0.0 up\nThe screenshot of the command as follows:\n[ 111 ]\nwww.it-ebooks.info\nAttacks on the WLAN Infrastructure\n5. We will then enable IP forwarding in the kernel to ensure that packets\nare forwarded:\necho 1 > /proc/sys/net/ipv4/ip_forward\nThe screenshot of the command as follows:\n[ 112 ]\nwww.it-ebooks.info\nChapter 5\n6. Brilliant! We are done. Now, any wireless client connecting to our rogue access\npoint will have full access to the authorized network using the wireless-to-wired\nWifi-Bridge we just built. We can verify this by connecting a client to the rogue\naccess point. Once connected, if you are using Vista, your screen might look like\nthe following:\n[ 113 ]\nwww.it-ebooks.info\nAttacks on the WLAN Infrastructure\n7. Notice that it receives an IP address from the DHCP daemon running on\nthe authorized LAN:\n8. We can now access any host on the wired network from this wireless client using\nthis rogue access point. Next, we will ping the gateway on the wired network:\n[ 114 ]\nwww.it-ebooks.info\nChapter 5\nWhat just happened?\nWe created a rogue access point and used it to bridge all the authorized network LAN traffic\nover the wireless network. As you can see, this is a really serious security threat as anyone\ncan break into the wired network using this bridge.\nHave a go hero – rogue access point challenge\nCheck whether you can create a rogue access point that uses WPA/WPA2-based encryption\nto look more legitimate on the wireless network.\nPop quiz – attacks on the WLAN infrastructure\nQ1. What encryption does a rogue access point use in most cases?\n1. None.\n2. WEP.\n3. WPA.\n4. WPA2.\nQ2. What is the advantage of having the same MAC address as the authorized access point\nin an evil twin?\n1. It makes detecting the evil twin more difficult.\n2. It forces the client to connect to it.\n3. It increases the signal strength of the network.\n4. None of the above.\nQ3. What do DoS attacks do?\n1. They bring down the overall throughput of the network.\n2. They do not target the clients.\n3. They can only be done if we know the network WEP/WPA/WPA2 credentials.\n4. All of the above.\nQ4. What do rogue access points do and how can they be created?\n1. They allow backdoor entry into the authorized network.\n2. They use WPA2 encryption only.\n3. They can be created as software-based access points or can be actual devices.\n4. Both 1 and 3.\n[ 115 ]\nwww.it-ebooks.info\nAttacks on the WLAN Infrastructure\nSummary\nIn this chapter, we explored different ways to compromise the security of the Wireless\nLAN infrastructure:\n Compromising default accounts and credentials on access points\n Denial of service attacks\n Evil twins and MAC Spoofing\n Rogue access points in the enterprise network\nIn the next chapter, we will take a look at different attacks on the wireless LAN client.\nInterestingly, most administrators feel that the client has no security problems to\nworry about. We will see how nothing could be furthers from the truth.\n[ 116 ]\nwww.it-ebooks.info"
  },
  {
    "input": "What types of attacks can be conducted on a wireless client, and how do they work?",
    "summary": "This chapter discusses various attacks targeting wireless clients, including Honeypot and Mis-Association attacks, the Caffe Latte attack for retrieving WEP keys, deauthentication and disassociation attacks for denial of service, the Hirte attack for WEP key recovery, and AP-less WPA-Personal cracking. These attacks show that wireless clients can be vulnerable even when the network infrastructure is secure. The key takeaway is that wireless clients can be exploited to gain access to authorized networks or to crack encryption keys without needing the actual access point.",
    "output": "6\nAttacking the Client\n\"Security is just as strong as the weakest link.\"\nFamous Quote in Information Security Domain\nMost penetration testers seem to give all their attention to the WLAN\ninfrastructure and don't give the wireless client even a fraction of that.\nHowever, it is interesting to note that a hacker can gain access to the\nauthorized network by compromising a wireless client as well.\nIn this chapter, we will shift our focus from the WLAN infrastructure to the\nwireless client. The client can be either a connected or isolated unassociated\nclient. We will take a look at the various attacks that can be used to target\nthe client.\nWe will cover the following topics:\n Honeypot and Mis-Association attacks\n The Caffe Latte attack\n Deauthentication and disassociation attacks\n The Hirte attack\n AP-less WPA-Personal cracking\n[ 117 ]\nwww.it-ebooks.info\nAttacking the Client\nHoneypot and Mis-Association attacks\nNormally, when a wireless client such as a laptop is turned on, it will probe for networks\nit has previously connected to. These networks are stored in a list called the Preferred\nNetwork List (PNL) on Windows-based systems. Also, along with this list, the wireless\nclient will display any networks available in its range.\nA hacker may do one or more of the following things:\n Silently monitor the probes and bring up a fake access point with the same ESSID\nthe client is searching for. This will cause the client to connect to the hacker\nmachine, thinking it is the legitimate network.\n Create fake access points with the same ESSID as neighboring ones to persuade the\nuser to connect to him. Such attacks are very easy to conduct in coffee shops and\nairports where a user might be looking to connect to a Wi-Fi connection.\n Use recorded information to learn about the victim's movements and habits,\nas we show in detail in a later chapter.\nThese attacks are called Honeypot attacks, because the hacker's access point is\nmis-associated with the legitimate one.\nIn the next exercise, we will carry out both these attacks in our lab.\nTime for action – orchestrating a Mis-Association attack\nFollow these instructions to get started:\n1. In the previous labs, we used a client that had connected to the Wireless Lab access\npoint. Let's switch on the client but not the actual Wireless Lab access point. Let's\nnow run airodump-ng mon0 and check the output. You will very soon find the\nclient to be in the not associated mode and probing for Wireless Lab and other\nSSIDs in its stored profile:\n[ 118 ]\nwww.it-ebooks.info\nChapter 6\n2. To understand what is happening, let's run Wireshark and start sniffing on the mon0\ninterface. As expected, you might see a lot of packets that are not relevant to our\nanalysis. Apply a Wireshark filter to only display Probe Request packets from the\nclient MAC you are using:\n[ 119 ]\nwww.it-ebooks.info\nAttacking the Client\n3. In my case, the filter would be wlan.fc.type_subtype == 0x04 && wlan.sa\n== <my mac>. You should now see Probe Request packets only from the client for\nthe previously identified SSIDs.\n4. Let's now start a fake access point for the network Wireless Lab on the hacker\nmachine using the following command:\nairbase-ng –c 3 –e \"Wireless Lab\" mon0\n5. Within a minute or so, the client should connect to us automatically. This shows\nhow easy it is to have un-associated clients:\n6. Now we will try it in competition with another router. We will create a fake access\npoint Wireless Lab in the presence of the legitimate one. Let's turn our access point\non to ensure that Wireless Lab is available to the client. For this experiment, we\nhave set the access point channel to 3. Let the client connect to the access point.\nWe can verify this from airodump-ng, as shown in the following screenshot:\n[ 120 ]\nwww.it-ebooks.info\nChapter 6\n7. Now let's bring up our fake access point with the SSID Wireless Lab:\n8. Notice that the client is still connected to Wireless Lab, the legitimate access point:\n[ 121 ]\nwww.it-ebooks.info\nAttacking the Client\n9. We will now send broadcast deauthentication messages to the client on behalf of\nthe legitimate access point to break their connection:\n10. Assuming the signal strength of our fake access point Wireless Lab is stronger than\nthe legitimate one to the client, it connects to our fake access point instead of the\nlegitimate access point:\n11. We can verify this by looking at the airodump-ng output to see the new\nassociation of the client with our fake access point:\n[ 122 ]\nwww.it-ebooks.info\nChapter 6\nWhat just happened?\nWe just created a Honeypot using the probed list from the client and also using the same\nESSID as that of neighboring access points. In the first case, the client automatically\nconnected to us, as it was searching for the network. In the latter case, as we were closer\nto the client than the real access point, our signal strength was higher, and the client\nconnected to us.\nHave a go hero – forcing a client to connect to the Honeypot\nIn the previous exercise, what do we do if the client does not automatically connect to us?\nWe would have to send a deauthentication packet to break the legitimate client-access point\nconnection and then, if our signal strength is higher, the client will connect to our spoofed\naccess point. Try this out by connecting a client to a legitimate access point, and then forcing\nit to connect to your Honeypot.\nThe Caffe Latte attack\nIn the Honeypot attack, we noticed that clients will continuously probe for SSIDs they\nhave connected to previously. If the client had connected to an access point using WEP,\noperating systems such as Windows cache and store the WEP key. The next time the\nclient connects to the same access point, the Windows wireless configuration manager\nautomatically uses the stored key.\nThe Caffe Latte attack was invented by Vivek, one of the authors of this book, and was\ndemonstrated in Toorcon 9, San Diego, USA. The Caffe Latte attack is a WEP attack that\nallows a hacker to retrieve the WEP key of the authorized network, using just the client.\nThe attack does not require the client to be anywhere close to the authorized WEP\nnetwork. It can crack the WEP key using just the isolated client.\nIn the next exercise, we will retrieve the WEP key of a network from a client using the\nCaffe Latte attack.\n[ 123 ]\nwww.it-ebooks.info\nAttacking the Client\nTime for action – conducting a Caffe Latte attack\nFollow these instructions to get started:\n1. Let's first set up our legitimate access point with WEP for the network Wireless Lab\nwith the ABCDEFABCDEFABCDEF12 key in Hex:\n[ 124 ]\nwww.it-ebooks.info\nChapter 6\n2. Let's connect our client to it and verify that the connection is successful using\nairodump-ng, as shown in the following screenshot:\n3. Let's unplug the access point and ensure that the client is in the un-associated stage\nand searches for the WEP network Wireless Lab.\n4. Now we use airbase-ng to bring up an access point with Wireless Lab as the SSID,\nwith the parameters as shown here:\n[ 125 ]\nwww.it-ebooks.info\nAttacking the Client\n5. As soon as the client connects to this access point, airbase-ng starts the\nCaffe Latte attack, as shown here:\n6. We now start airodump-ng to collect the data packets from this access point only, as\nwe did before in the WEP cracking scenario:\n7. We also start aircrack-ng as in the WEP-cracking exercise we did before to begin\nthe cracking process. The command line will be aircrack-ng filename, where\nthe filename is the name of the file created by airodump-ng.\n[ 126 ]\nwww.it-ebooks.info\nChapter 6\nWhat just happened?\nWe were successful in retrieving the WEP key from just the wireless client without requiring\nan actual access point to be used or present in the vicinity. This is the power of the Caffe\nLatte attack.\nIn basic terms, a WEP access point doesn't need to prove to a client that it knows the WEP\nkey in order to receive encrypted traffic. The first piece of traffic that will always be sent to\na router upon connecting to a new network will be an ARP request to ask for an IP.\nThe attack works by bit flipping and replaying ARP packets sent by the wireless client post\nassociation with the fake access point created by us. These bit flipped ARP Request packets\ncause more ARP response packets to be sent by the wireless client.\nBit-flipping takes an encrypted value and alters it to create a different encrypted value. In this\ncircumstance, we can take an encrypted ARP request and create an ARP response with a high\ndegree of accuracy. Once we send back a valid ARP response, we can replay this value over\nand over again to generate the traffic we need to decrypt the WEP key.\nNote that all these packets are encrypted using the WEP key stored on the client. Once we\nare able to gather a large number of these data packets, aircrack-NG is able to recover\nthe WEP key easily.\nHave a go hero – practise makes perfect!\nTry changing the WEP key and repeat the attack. This is a difficult attack and requires some\npractice to orchestrate successfully. It would also be a good idea to use Wireshark and\nexamine the traffic on the wireless network.\nDeauthentication and disassociation attacks\nWe have seen deauthentication attacks in previous chapters as well in the context of the\naccess point. In this chapter, we will explore this attack in the context of the client.\nIn the next lab, we will send deauthentication packets to just the client and break an\nestablished connection between the access point and the client.\n[ 127 ]\nwww.it-ebooks.info\nAttacking the Client\nTime for action – deauthenticating the client\nFollow these instructions to get started:\n1. Let's first bring our access point Wireless Lab online again. Let's keep it running\non WEP to prove that, even with encryption enabled, it is possible to attack the\naccess point and client connection. Let's verify that the access point is up using\nairodump-ng:\n2. Let's connect our client to this access point and verify it with airodump-ng:\n3. We will now run aireplay-ng to target the access point connection:\n[ 128 ]\nwww.it-ebooks.info\nChapter 6\n4. The client gets disconnected and tries to reconnect to the access point. We can\nverify this using Wireshark just as we did earlier:\n5. We have now seen that, even in the presence of WEP encryption, it is possible to\ndeauthenticate a client and disconnect it. The same is valid even in the presence\nof WPA/WPA2. Let's now set our access point to WPA encryption and verify it:\n[ 129 ]\nwww.it-ebooks.info\nAttacking the Client\n6. Let's connect our client to the access point and ensure that it is connected:\n7. Let's now run aireplay-ng to disconnect the client from the access point:\nWhat just happened?\nWe just learnt how to disconnect a wireless client selectively from an access point using\ndeauthentication frames even in the presence of encryption schemas such as WEP/WPA/\nWPA2. This was done by sending a deauthentication packet to just the access point—client\npair, instead of sending a broadcast deauthentication to the entire network.\nHave a go hero – disassociation attack on the client\nIn the previous exercise, we used a deauthentication attack to break the connection. Try\nusing a disassociation packet to break the established connection between a client and an\naccess point.\nThe Hirte attack\nWe've already seen how to conduct the Caffe Latte attack. The Hirte attack extends the Caffe\nLatte attack using fragmentation techniques and allows almost any packet to be used.\n[ 130 ]\nwww.it-ebooks.info\nChapter 6\nMore information on the Hirte attack is available on the Aircrack-ng website at http://\nwww.aircrack-ng.org/doku.php?id=hirte.\nWe will now use aircrack-ng to conduct a Hirte attack on the same client.\nTime for action – cracking WEP with the Hirte attack\nFollow these instructions to get started:\n1. Create a WEP access point exactly as in the Caffe Latte attack using the airbase-ng\ntool. The only additional option is the -N option instead of the -L option to launch\nthe Hirte attack:\n2. Start airodump-ng in a separate window to capture packets for the Wireless\nLab Honeypot:\n3. Now, airodump-ng will start monitoring this network and storing the packets in\nthe Hirte-01.cap file:\n[ 131 ]\nwww.it-ebooks.info\nAttacking the Client\n4. Once the roaming client connects to our Honeypot AP, the Hirte attack is\nautomatically launched by airbase-ng:\n5. We start aircrack-ng as in the case of the Caffe Latte attack and eventually,\nthe key will be cracked.\nWhat just happened?\nWe launched the Hirte attack against a WEP client that was isolated and away from the\nauthorized network. We cracked the key exactly the same way as in the Caffe Latte attack case.\nHave a go hero – practise, practise, practise\nWe recommend setting different WEP keys on the client and trying this exercise a couple of\ntimes to gain confidence. You may notice many times that you may have to reconnect the\nclient to get it to work.\nAP-less WPA-Personal cracking\nIn Chapter 4, we saw how to crack WPA/WPA2 PSK using aircrack-ng. The basic idea was\nto capture a four-way WPA handshake and then launch a dictionary attack.\nThe million dollar question is: Would it be possible to crack WPA-Personal with just the\nclient? No access point!\nLet's revisit the WPA cracking exercise to jog our memory:\n[ 132 ]\nwww.it-ebooks.info\nChapter 6\nTo crack WPA, we need the following four parameters from the four-way handshake—\nAuthenticator Nounce, Supplicant Nounce, Authenticator MAC, and Supplicant MAC. Now,\nthe interesting thing is that we do not need all of the four packets in the handshake to extract\nthis information. We can get this information with four packets; packets 1 and 2 or just packets\n2 and 3.\nIn order to crack WPA-PSK, we will bring up a WPA-PSK Honeypot and, when the client\nconnects to us, only Message 1 and Message 2 will come through. As we do not know the\npassphrase, we cannot send Message 3. However, Message 1 and Message 2 contain all\nthe information required to begin the key cracking process:\n[ 133 ]\nwww.it-ebooks.info\nAttacking the Client\nTime for action – AP-less WPA cracking\n1. We will set up a WPA-PSK Honeypot with the ESSID Wireless Lab. The -z 2 option\ncreates a WPA-PSK access point, which uses TKIP:\n2. Let's also start airodump-ng to capture packets from this network:\n3. Now when our roaming client connects to this access point, it starts the handshake\nbut fails to complete it after Message 2, as discussed previously; however, the data\nrequired to crack the handshake has been captured.\n4. We run the airodump-ng capture file through aircrack-ng with the same\ndictionary file as before; eventually, the passphrase is cracked as before.\nWhat just happened?\nWe were able to crack the WPA key with just the client. This was possible because, even with\njust the first two packets, we have all the information required to launch a dictionary attack\non the handshake.\nHave a go hero – AP-less WPA cracking\nWe recommend setting different WEP keys on the client and trying this exercise a couple of\ntimes to gain confidence. You may notice many times that you have to reconnect the client\nto get it to work.\nPop quiz – attacking the client\nQ1. What encryption key can the Caffe Latte attack recover?\n1. None\n2. WEP\n3. WPA\n4. WPA2\n[ 134 ]\nwww.it-ebooks.info\nChapter 6\nQ2. What would a Honeypot access point typically use?\n1. No Encryption, Open Authentication\n2. No Encryption, Shared Authentication\n3. WEP Encryption, Open Authentication\n4. None of the above\nQ3. Which one of the following is a DoS Attack?\n1. Mis-Association attacks\n2. Deauthentication attacks\n3. Disassociation attacks\n4. Both 2 and 3\nQ4. What does the Caffe Latte attack require?\n1. That the wireless client be in radio range of the access point\n2. That the client contains a cached and stored WEP key\n3. WEP encryption with at least 128 bit encryption\n4. Both 1 and 3\nSummary\nIn this chapter, we learned that even the wireless client is susceptible to attacks. These\ninclude the Honeypot and other Mis-Association attacks; Caffe Latte attack to retrieve the\nkey from the wireless client; deauthentication and disassociation attacks causing a Denial\nof service, Hirte attack as an alternative to retrieve the WEP key from a roaming client;\nand, finally, cracking the WPA-Personal passphrase with just the client.\nIn the next chapter, we will use what we've learned so far to conduct various advanced\nwireless attacks on both the client and infrastructure side. So, quickly flip the page to the\nnext chapter!\n[ 135 ]\nwww.it-ebooks.info\nwww.it-ebooks.info"
  },
  {
    "input": "In an advanced WLAN attack, what is the role of the man-in-the-middle (MITM) setup in enabling eavesdropping and session hijacking?",
    "summary": "This chapter explains advanced wireless attacks, focusing on man-in-the-middle (MITM) techniques. It details how to set up a fake access point, bridge it with a wired interface, and intercept traffic. The MITM setup allows for eavesdropping and session hijacking, such as DNS spoofing, to manipulate network communications. The chapter also covers how to detect and bait clients with different security configurations for the same SSID.",
    "output": "7\nAdvanced WLAN Attacks\n\"To know your enemy, you must become your enemy.\"\nSun Tzu, Art of War\nAs a penetration tester, it is important to know the advanced attacks a hacker\ncan do, even if you might not check or demonstrate them during a penetration\ntest. This chapter is dedicated to showing how a hacker can conduct advanced\nattacks using wireless access as the starting point.\nIn this chapter, we will take a look at how we can conduct advanced attacks using what\nwe have learned so far. We will primarily focus on the man-in-the-middle attack (MITM),\nwhich requires a certain amount of skill and practice to conduct successfully. Once we have\ndone this, we will use this MITM attack as a base from which to conduct more sophisticated\nattacks such as Eavesdropping and session hijacking.\nIn this chapter, we will cover the following topics:\n MITM attack\n Wireless Eavesdropping using MITM\n Session hijacking using MITM\n[ 137 ]\nwww.it-ebooks.info\nAdvanced WLAN Attacks\nA man-in-the-middle attack\nMITM attacks are probably one of the most potent attacks on a WLAN system. There\nare different configurations that can be used to conduct the attack. We will use the most\ncommon one—the attacker is connected to the Internet using a wired LAN and is creating\na fake access point on his client card. This access point broadcasts an SSID similar to a local\nhotspot in the vicinity. A user may accidently get connected to this fake access point (or can\nbe forced to via the higher signal strength theory we discussed in the previous chapters)\nand may continue to believe that he is connected to the legitimate access point.\nThe attacker can now transparently forward all the user's traffic over the Internet using\nthe bridge he has created between the wired and wireless interfaces.\nIn the following lab exercise, we will simulate this attack.\nTime for action – man-in-the-middle attack\nFollow these instructions to get started:\n1. To create the man-in-the-middle attack setup, we will first create a soft access\npoint called mitm on the hacker laptop using airbase-ng. We run the following\ncommand:\nairbase-ng --essid mitm –c 11 mon0\nThe output of the command is as follows:\n2. It is important to note that airbase-ng, when run, creates an interface at0 (a tap\ninterface). Think of this as the wired-side interface of our software-based access\npoint mitm:\n[ 138 ]\nwww.it-ebooks.info\nChapter 7\n3. Let's now create a bridge on the hacker's laptop, consisting of the wired (eth0) and\nwireless interface (at0). The succession of commands used for this is as follows:\n brctl addbr mitm-bridge\n brctl addif mitm-bridge eth0\n brctl addif mitm-bridge at0\n ifconfig eth0 0.0.0.0 up\n ifconfig at0 0.0.0.0 up\n4. We can assign an IP address to this bridge and check the connectivity with the\ngateway. Please note that we can do this using DHCP as well. We can assign\nan IP address to the bridge interface with the following command:\nifconfig mitm-bridge 192.168.0.199 up\nWe can then try pinging the gateway 192.168.0.1 to ensure that we are\nconnected to the rest of the network.\n5. Let's now turn on IP forwarding in the kernel, so that routing and packet\nforwarding can happen correctly, using the following command:\necho 1 > /proc/sys/net/ipv4/ip_forward\nThe output of the command is as follows:\n[ 139 ]\nwww.it-ebooks.info\nAdvanced WLAN Attacks\n6. Now let's connect a wireless client to our access point mitm. It will automatically\nget an IP address over DHCP (the server running on the wired-side gateway). The\nclient machine in this case receives the IP address 192.168.0.197. We can ping\nthe wired-side gateway 192.168.0.1 to verify connectivity:\n7. We can see that the host responds to the ping requests, as shown here:\n8. We can also verify that the client is connected by looking at the airbase-ng\nterminal on the hacker's machine:\n9. It is interesting to note here that, because all the traffic is being relayed from the\nwireless interface to the wired-side, we have full control over the traffic. We can\nverify this by starting Wireshark and sniffing on the at0 interface:\n[ 140 ]\nwww.it-ebooks.info\nChapter 7\n10. Let's now ping the gateway 192.168.0.1 from the client machine. We can see the\npackets in Wireshark (apply a display filter for ICMP), even though the packets are\nnot destined for us. This is the power of man-in-the-middle attacks:\n[ 141 ]\nwww.it-ebooks.info\nAdvanced WLAN Attacks\nWhat just happened?\nWe successfully created the setup for a wireless Man-in-the-Middle attack. We did this by\ncreating a fake access point and bridging it with our Ethernet interface. This ensured that\nany wireless client connecting to the fake access point will perceive that it is connected\nto the Internet via the wired LAN.\nHave a go hero – man-in-the-middle over pure wireless\nIn the previous exercise, we bridged the wireless interface with a wired one. As we noted\nearlier, this is one of the possible connection architectures for an MITM. There are other\ncombinations possible as well. An interesting one would be to have two wireless interfaces,\none that creates the fake access point and the other interface that is connected to the\nauthorized access point. Both these interfaces are bridged. So, when a wireless client\nconnects to our fake access point, it gets connected to the authorized access point\nthrough the attacker's machine.\nPlease note that this configuration would require the use of two wireless cards on the\nattacker's laptop.\nCheck whether you can conduct this attack using the in-built card on your laptop along\nwith the external one—bear in mind, you may not have the injection drives required for\nthis activity. This should be a good challenge!\nWireless Eavesdropping using MITM\nIn the previous lab, we learned how to create a setup for MITM. Now, we will take a look\nat how to do Wireless Eavesdropping with this setup.\nThe whole lab revolves around the principle that all the victim's traffic is now routed through\nthe attacker's computer. Thus, the attacker can eavesdrop on all the traffic sent to and from\nthe victim's machine wirelessly.\nTime for action – Wireless Eavesdropping\nFollow these instructions to get started:\n1. Replicate the entire setup as in the previous lab. Fire up Wireshark. Interestingly,\neven the MITM-bridge shows up. This interface would allow us to peer into the\nbridge traffic, if we wanted to:\n[ 142 ]\nwww.it-ebooks.info\nChapter 7\n2. Start sniffing on the at0 interface so that we can monitor all traffic sent and\nreceived by the wireless client:\n[ 143 ]\nwww.it-ebooks.info\nAdvanced WLAN Attacks\n3. On the wireless client, open up any web page. In my case, the wireless access\npoint is also connected to LAN and I will open it up by using the address\nhttp://192.168.0.1:\n4. Sign in with your password and enter the management interface.\n5. In Wireshark, we should be seeing a lot of activity:\n[ 144 ]\nwww.it-ebooks.info\nChapter 7\n6. Set a filter for http to see only the web traffic:\n[ 145 ]\nwww.it-ebooks.info\nAdvanced WLAN Attacks\n7. We can easily locate the HTTP post request that was used to send the password to\nthe wireless access point:\n8. Next is a magnified view of the preceding packet:\n[ 146 ]\nwww.it-ebooks.info\nChapter 7\n9. Expanding on the HTTP header, allows us to see that actually the password we entered\nin plain text was not sent as is; instead, a hash has been sent. If we take a look at the\npacket, labeled as number 64 in a screenshot on the previous page, we can see that a\nrequest was made for /md5.js, which makes us suspect that it is a md5 hash of the\npassword. It is interesting to note here that this technique may be prone to a replay\nattack if a cryptographic salt is not used on a per session basis in the creation of the\nhash. We leave it as an exercise for the user to find out the details, as this is not part\nof wireless security and hence beyond the scope of this book:\n10. This shows how easy it is to monitor and eavesdrop on traffic sent by the client\nduring a man-in-the-middle attack.\nWhat just happened?\nThe MITM setup we created now allows us to eavesdrop on the victim's wireless traffic\nwithout the victim knowing. This is possible because, in an MITM, all the traffic is relayed\nvia the attacker's machine. Thus, all of the victim's unencrypted traffic is available for\neavesdropping for the attacker.\nHave a go hero – finding Google searches\nIn today's world, all of us would like to keep what we search for on Google private.\nThe traffic on Google search is unfortunately over HTTP and plain text by default.\nCan you think of an intelligent display filter you could use with Wireshark to view all\nGoogle searches made by the victim?\nSession hijacking over wireless\nOne of the other interesting attacks we can build on top of MITM is application session\nhijacking. During an MITM attack, the victim's packets are sent to the attacker. It is now the\nattacker's responsibility to relay this to the legitimate destination and relay the responses\nfrom the destination to the victim. An interesting thing to note is that, during this process,\nthe attacker can modify the data in the packets (if unencrypted and unprotected from\ntampering). This means he can modify, mangle, and even silently drop packets.\nIn this next example, we will take a look at DNS hijacking over wireless using the MITM setup.\nThen, using DNS hijacking, we will hijack the browser session to https://www.google.com.\n[ 147 ]\nwww.it-ebooks.info\nAdvanced WLAN Attacks\nTime for action – session hijacking over wireless\n1. Set up the test exactly as in the man-in-the-middle attack lab. On the victim, let's\nfire up the browser and type in https://www.google.com. Let's use Wireshark\nto monitor this traffic. Your screen should resemble the following:\n2. Apply a Wireshark filter for DNS and, as we can see, the victim is making DNS\nrequests for https://www.google.com:\n[ 148 ]\nwww.it-ebooks.info\nChapter 7\n3. In order to hijack the browser session, we will need to send fake DNS responses that\nwill resolve the IP address of https://www.google.com to the hacker machine's\nIP address 192.168.0.199. The tool that we will use for this is called dnsspoof\nand the syntax is as follows:\ndnspoof –i mitm-bridge\nThe output of the command is as follows:\n4. Refresh the browser windows and now, as we can see through Wireshark, as soon\nas the victim makes a DNS request for any host (including google.com), Dnsspoof\nreplies back:\n[ 149 ]\nwww.it-ebooks.info\nAdvanced WLAN Attacks\n5. On the victim's machine, we see an error that says Unable to connect. This is\nbecause we made the IP address for google.com as 192.168.0.199, which is\nthe hacker machine's IP, but there is no service listening on port 80:\n6. Let's run Apache on Kali using the following command:\napachet2ctl start\nThe output of the command is as follows:\n7. Now, once we refresh the browser on the victim, we are greeted with the It Works!\ndefault page of Apache:\n[ 150 ]\nwww.it-ebooks.info\nChapter 7\n8. This demonstration shows how it is possible to intercept data and send spoofed\nresponses to hijack sessions on the victim.\nWhat just happened?\nWe did an application hijacking attack using a Wireless MITM as the base. So what happened\nbehind the scenes? The MITM setup ensured that we were able to see all the packets sent\nby the victim. As soon as we saw a DNS request packet coming from the victim, the Dnsspoof\nprogram running on the attacker's laptop sent a DNS response to the victim with the attacker\nmachine's IP address that of google.com. The victim's laptop accepted this response and\nthe browser sent an HTTP request to the attacker's IP address on port 80.\nIn the first part of the experiment, there was no listening process on port 80 of the attacker's\nmachine and thus, Firefox responded with an error. Then, once we started the Apache server\non the attacker's machine on port 80 (the default port), the browser's requested received a\nresponse from the attacker's machine with the default It Works! page.\nThis lab shows us that, once we have full control of the lower layers (Layer 2 in this case), it is\neasy to hijack applications running on higher layers such as DNS clients and web browsers.\nHave a go hero – application hijacking challenge\nThe next step in session hijacking using a wireless MITM will be to modify the data being\ntransmitted by the client. Explore software available on Kali called Ettercap. This will help\nyou create search and replace filters for network traffic.\nIn this challenge, write a simple filter to replace all occurrences of security in the network\ntraffic to insecurity. Try searching Google for security and check whether the results show\nup for insecurity instead.\nFinding security configurations on the client\nIn previous chapters, we have seen how to create Honeypots for open access points,\nWEP-protected and WPA, but, when we are in the field and see Probe Requests from the\nclient, how do we know which network the probed SSID belong to?\nThough this seems tricky at first, the solution to this problem is simple. We need to\ncreate access points advertising the same SSID but with different security configurations\nsimultaneously. When a roaming client searches for a network, it will automatically\nconnect to one of these access points based on the network configuration stored on it.\nSo, let the games begin!\n[ 151 ]\nwww.it-ebooks.info\nAdvanced WLAN Attacks\nTime for action – deauthentication attacks on the client\n1. We will assume that the wireless client has a network Wireless Lab configured on\nit, and it actively sends Probe Requests for this network, when it is not connected\nto any access point. In order to find the security configuration of this network, we\nwill need to create multiple access points. For our discussion, we will assume that\nthe client profile is an open network, WEP protected, WPA-PSK, or WPA2-PSK. This\nmeans we will have to create four access points. To do this, we will first create four\nvirtual interfaces—mon0 to mon3, using the airmon-ng start wlan0 command\nmultiple times:\n2. You can view all these newly created interfaces using the ifconfig –a command:\n[ 152 ]\nwww.it-ebooks.info\nChapter 7\n3. Now we will create the open AP on mon0:\n4. Let's create the WEP protected AP on mon1:\n5. The WPA-PSK AP will be on mon2:\n6. WPA2-PSK AP will be on mon3:\n7. We can run airodump-ng on the same channel to ensure that all four access\npoints are up and running, as shown in the following screenshot:\n[ 153 ]\nwww.it-ebooks.info\nAdvanced WLAN Attacks\n8. Now let's switch the Wi-Fi on on the roaming client. Depending on which Wireless\nLab network you connected it to previously, it will connect to that security\nconfiguration. In my case, it connects to the WPA-PSK network, as shown in the\nfollowing screenshot:\nWhat just happened?\nWe created multiple Honeypots with the same SSID but different security configurations.\nDepending on which configuration the client had stored for the \"Wireless Lab\" network,\nit connected to the appropriate one.\nThis technique can come in handy as, if you are doing a penetration test, you won't know\nwhich security configurations the client has on its laptop. This allows you to find the\nappropriate one by setting a bait for the client. This technique is also called WiFishing.\nHave a go hero – baiting clients\nCreate different security configurations on the client for the same SSID, and check whether\nyour set of Honeypots is able to detect them.\nIt is important to note that many Wi-Fi clients might not actively probe for networks they\nhave stored in their profile. It might not be possible to detect these networks using the\ntechnique we discussed here.\nPop quiz – advanced WLAN attacks\nQ1. In an MITM attack, who is in the middle?\n1. The access point.\n2. The attacker.\n3. The victim.\n4. None of the above.\n[ 154 ]\nwww.it-ebooks.info\nChapter 7\nQ2. Dnsspoof:\n1. Spoofs DNS requests.\n2. Spoofs DNS responses.\n3. Needs to run on the DNS server.\n4. Needs to run on the access point.\nQ3. A wireless MITM attack can be orchestrated:\n1. On all wireless clients at the same time.\n2. Only one channel at a time.\n3. On any SSID.\n4. Both 3 and 4.\nQ4. Which is the interface closest to the victim in our MITM setup?\n1. At0.\n2. Eth0.\n3. Br0.\n4. En0.\nSummary\nIn this chapter, we learned how to conduct advanced attacks using wireless as the base.\nWe created a setup for a MITM attack over wireless and then used it to eavesdrop on the\nvictim's traffic. We then used the same setup to hijack the application layer of the victim\n(web traffic, to be specific) using a DNS poisoning attack.\nIn the next chapter, we will learn how to conduct a wireless penetration test right from the\nplanning, discovery, and attack to the reporting stage. We will also touch upon the best\npractices to secure WLANs.\n[ 155 ]\nwww.it-ebooks.info\nwww.it-ebooks.info"
  },
  {
    "input": "What is the process for setting up a RADIUS server for attacking WPA-Enterprise using FreeRADIUS-WPE on Kali?",
    "summary": "This chapter discusses how to attack WPA-Enterprise and RADIUS systems, focusing on setting up FreeRADIUS-WPE and exploiting vulnerabilities in PEAP. It explains how misconfigurations, such as turning off certificate validation, can be used to crack passwords using tools like asleap. The chapter also provides security best practices for enterprises, recommending WPA2-Enterprise with EAP-TLS for stronger protection.",
    "output": "8\nAttacking WPA-Enterprise\nand RADIUS\n\"The bigger they are, the harder they Fall.\"\nPopular Saying\nWPA-Enterprise has always had an aura of unbreakable ability around it.\nMost network administrators think of it as a panacea for all their wireless\nsecurity problems. In this chapter, we will see that nothing could be further\nfrom the truth.\nIn this chapter, we will learn how to attack WPA-Enterprise using different tools and\ntechniques available on Kali.\nIn this chapter, we will cover the following topics:\n Setting up FreeRADIUS-WPE\n Attacking PEAP on Windows clients\n Security best practices for Enterprises\nSetting up FreeRADIUS-WPE\nWe will need a RADIUS server for orchestrating WPA-Enterprise attacks. The most widely\nused open source RADIUS server is FreeRADIUS. However, setting it up is difficult and\nconfiguring it for each attack can be tedious.\n[ 157 ]\nwww.it-ebooks.info\nAttacking WPA-Enterprise and RADIUS\nJoshua Wright, a well-known security researcher, created a patch for FreeRADIUS that makes\nit easier to set up and conduct attacks. This patch was released as the FreeRADIUS-WPE\n(Wireless Pwnage Edition). Kali doesn't naturally come with FreeRADIUS-WPE, so you\nneed to perform the following steps to set up FreeRADIUS-WPE:\n1. Navigate to https://github.com/brad-anton/freeradius-wpe and\nyou will find the downloaded link at https://github.com/brad-anton/\nfreeradius-wpe/raw/master/freeradius-server-wpe_2.1.12-1_i386.\ndeb:\nOnce it is downloaded, install it with dpkg –i freeradius-server-wpe_2.1.12-1_\ni386.deb followed by ldconfig:\nLet's now quickly set up the RADIUS server on Kali.\nTime for action – setting up the AP with FreeRADIUS-WPE\nFollow these instructions to get started:\n1. Connect one of the LAN ports of the access point to the Ethernet port on your\nmachine running Kali. In our case, the interface is eth0. Bring up the interface\nand get an IP address by running DHCP, as shown in the following screenshot:\n[ 158 ]\nwww.it-ebooks.info\nChapter 8\n2. Login to the access point and set the security mode to WPA/WPA2-Enterprise,\nset Version to WPA2, Encryption to AES. Then, under the EAP (802.1x) section,\nenter the Radius Server IP address as your Kali build's IP address. The Radius\nPassword will be test, as shown in the following screenshot:\n3. Let's now open a new terminal and go to the directory /usr/local/etc/raddb.\nThis is where all the FreeRADIUS-WPE configuration files are:\n[ 159 ]\nwww.it-ebooks.info\nAttacking WPA-Enterprise and RADIUS\n4. Let's open eap.conf. You will find that the default_eap_type command is\nset to MD5. Let's change this to peap:\n5. Let's open clients.conf. This is where we define the allowed list of clients that\ncan connect to our Radius server. Interestingly, if you browse right to the bottom,\nignoring the example settings, the secret for clients in the range 192.168.0.0/16\ndefaults to test. This is exactly what we used in step 2:\n6. We are now all set to start the RADIUS server with the radiusd –s –X command:\n7. Once you run this, you will see a lot of debug messages on the screen, but\neventually the server will settle down to listen for requests. Awesome! We are\nall set now to start our lab sessions in this chapter:\n[ 160 ]\nwww.it-ebooks.info\nChapter 8\nWhat just happened?\nWe have successfully set up FreeRADIUS-WPE. We will use this in the rest of the experiments\nthat we will do in this chapter.\nHave a go hero – playing with RADIUS\nFreeRADIUS-WPE has tons of options. It may be a good idea to familiarize yourself with\nthem. Most importantly, take time to check out the different configuration files and how\nthey all work together.\nAttacking PEAP\nProtected Extensible Authentication Protocol (PEAP) is the most popular version of EAP\nin use. This is the EAP mechanism shipped natively with Windows.\nPEAP has two versions:\n PEAPv0 with EAP-MSCHAPv2 (the most popular as this has native support\non Windows)\n PEAPv1 with EAP-GTC\n[ 161 ]\nwww.it-ebooks.info\nAttacking WPA-Enterprise and RADIUS\nPEAP uses server-side certificates for validation of the RADIUS server. Almost all attacks on\nPEAP leverage misconfigurations in certificate validation.\nIn the next lab, we will take look at how to crack PEAP when certificate validation is turned\noff on the client.\nTime for action – cracking PEAP\nFollow the given instructions to get started:\n1. We double-check the eap.conf file to ensure that PEAP is enabled:\n2. We then restart the RADIUS server with radiusd –s –X:\n[ 162 ]\nwww.it-ebooks.info\nChapter 8\n3. We monitor the log file created by FreeRADIUS-WPE:\n4. Windows has native support for PEAP. Let's ensure that certificate verification has\nbeen turned off:\n[ 163 ]\nwww.it-ebooks.info\nAttacking WPA-Enterprise and RADIUS\n5. We need to click on the Configure tab that is next to Secured password and tell\nWindows not to automatically use our Windows logon name and password:\n6. We will also have to force it to select User authentication in the Advanced\nSettings dialog box:\n[ 164 ]\nwww.it-ebooks.info\nChapter 8\n7. Once the client connects to the access point, the client is prompted for a user\nname and password. We use Monster as the user name and abcdefghi as\nthe password:\n8. As soon as we do this, we are able to see the MSCHAP-v2 challenge response\nappear in the log file:\n9. We now use asleap to crack this using a password list file that contains the password\nabcdefghi, and we are able to crack the password! (For the purposes of this\ndemonstration, we simply created a one-line file called list with the password in it):\n[ 165 ]\nwww.it-ebooks.info\nAttacking WPA-Enterprise and RADIUS\nWhat just happened?\nWe set up our Honeypot using FreeRADIUS-WPE. The enterprise client is misconfigured to\nnot use certificate validation with PEAP. This allows us to present our own fake certificate to\nthe client, which it gladly accepts. Once this happens, MSCHAP-v2, the inner authentication\nprotocol, kicks in. As the client uses our fake certificate to encrypt the data, we are easily\nable to recover the username, challenge, and response tuples.\nMSCHAP-v2 is prone to dictionary attacks. We use asleap to crack the challenge and\nresponse pair, as it seems to be based on a dictionary word.\nHave a go hero – attack variations on PEAP\nPEAP can be misconfigured in multiple ways. Even with certificate validation enabled, if\nthe administrator does not mention the authentic servers in connect to these servers list,\nthe attacker can obtain a real certificate for another domain from any of the listed certifying\nauthorities. This will still be accepted by the client. Other variations of this attack are possible\nas well.\nWe will encourage you to explore the different possibilities in this section.\nEAP-TTLS\nWe encourage you to try attacks similar to those we have suggested for PEAP against\nEAP-TTLS.\nSecurity best practices for Enterprises\nWe have seen a ton of attacks against WPA/WPA2, both Personal and Enterprise. Based on\nour experience, we recommend the following:\n For SOHOs and medium-sized businesses, use WPA2-PSK with a strong passphrase.\nYou have up to 63 characters at your disposal. Make use of them.\n For large enterprises, use WPA2-Enterprise with EAP-TLS. This uses both the\nclient- and server-side certificates for authentication, and currently is unbreakable.\n If you have to use PEAP or EAP-TTLS with WPA2-Enterprise, then ensure that\ncertificate validation is turned on, the right certifying authorities are chosen, RADIUS\nservers that are authorized are used, and finally, that any setting that allows users\nto accept new RADIUS servers, certificates, or certifying authorities is turned off.\n[ 166 ]\nwww.it-ebooks.info"
  },
  {
    "input": "What are the key phases involved in a wireless penetration testing methodology?",
    "summary": "This chapter discusses methods to attack WPA-Enterprise networks using PEAP or EAP-TTLS, highlighting potential security vulnerabilities. It also introduces the methodology for conducting a wireless penetration test, which includes planning, discovery, attack, and reporting phases. The next chapter will explore how to apply these techniques in a real penetration test scenario.",
    "output": "Chapter 8\nPop quiz – attacking WPA-Enterprise and RADIUS\nQ1. Which of the following is FreeRADIUS-WPE?\n1. A RADIUS server written from scratch.\n2. A patch to the FreeRADIUS server.\n3. Ships by default on all Linuxes.\n4. None of the above.\nQ2. Which of the following can be used to attack PEAP?\n1. Fake credentials.\n2. Fake certificates.\n3. Using WPA-PSK.\n4. All of the above.\nQ3. What does EAP-TLS use?\n1. Client-side Certificates.\n2. Server-side certificates.\n3. Either 1 or 2.\n4. Both 1 and 2.\nQ4. What does EAP-TTLS use?\n1. Client-side certificates only.\n2. Server-side certificates.\n3. Password-based authentication.\n4. LEAP.\nSummary\nIn this chapter, we saw how we could compromise the security of a WPA-Enterprise\nnetwork running PEAP or EAP-TTLS, the two most common authentication mechanisms\nused in Enterprises.\nIn the next chapter, we will take a look at how to put all that we have learned into use\nduring an actual penetration test.\n[ 167 ]\nwww.it-ebooks.info\nwww.it-ebooks.info\n9\nWLAN Penetration Testing\nMethodology\n\"The proof is in the pudding.\"\nPopular saying\nThis chapter will lay out the steps that go in to taking the techniques taught in\nthe previous chapters and turning them into a full wireless penetration test.\nWireless penetration testing\nTo perform a wireless penetration test, it is important to follow a defined methodology.\nSimply firing up the airbase or airodump command and hoping for the best will not satisfy\nthe goals of a test. When working as a penetration tester, you must ensure that you adhere\nto the standards of the organization you're working for, and if they don't have any, then you\nshould hold yourself to the highest standards.\nBroadly, we can break up a wireless penetration testing exercise into the following phases:\n1. Planning phase.\n2. Discovery phase.\n3. Attack phase.\n4. Reporting phase.\nWe will now look at each of these phases separately.\n[ 169 ]\nwww.it-ebooks.info"
  },
  {
    "input": "What are the key steps and considerations in the WLAN penetration testing methodology?",
    "summary": "WLAN penetration testing begins with planning, where the scope, effort, and legality are defined. The discovery phase involves identifying wireless networks and devices, mapping their reach, and gathering information about connections and encryption. The attack phase focuses on cracking encryption, attacking the network infrastructure, and compromising wireless clients, with specific methods depending on the type of security protocol used. Finally, a detailed report is prepared to communicate findings and recommendations to the client.",
    "output": "WLAN Penetration Testing Methodology\nPlanning\nIn this phase, we must understand the following:\n Scope of the assessment: The penetration tester should work with the client to define\na scope that is achievable and will also provide the greatest amount of insight into the\nsecurity of a network. Typically, the following information is gathered:\nLocation of the penetration test\n\nTotal coverage area of the premises\n\nApproximate number of access points and wireless clients deployed\n\nWhich wireless networks are included in the assessment?\n\nIs exploitation in scope?\n\nAre attacks against users in scope?\n\nIs denial of service in scope?\n\n Effort estimation: Based on the scope defined, the tester will then have to estimate\nhow much time is required. Bear in mind that rescoping may occur following this\nestimate, as organizations may have limited resources available in terms of both\ntime and money.\n Legality: Prior to performing a test, the client must give consent. This should explain\nthe testing to be covered and clearly define the level of indemnity, insurance,\nand the limitations of the scope. If you are unsure, you will need to speak to a\nprofessional in these areas. Most organizations will have their own versions that\nwill likely also incorporate an Non-Disclosure Agreement (NDA).\nOnce all of the preceding requirements are in place, we are ready to go!\nDiscovery\nIn this phase, the aim is to identify and apply characteristics to the wireless devices and\nwireless networks within the scope.\nAll the techniques to perform these have been laid out in the previous chapters but, in brief,\nthe aim is to:\n Enumerate visible and hidden wireless networks in the area\n Enumerate devices in the area, along with those connected to the targeted networks\n Map the range of the networks, where they are reachable from and whether there\nare places a malicious individual could operate from to perform an attack, for\nexample, a cafe.\n[ 170 ]\nwww.it-ebooks.info\nChapter 9\nAll of this information should be recorded. If the test is limited to the performance of\nreconnaissance only, the test will end here, and the tester will attempt to draw conclusions\nbased on this information. Some statements that would be useful to a client are be\nas follows:\n The number of devices that have associations with open networks and the\ncorporate network\n The number of devices that have networks that can be linked to locations\nthrough solutions such as WiGLE\n The existence of weak encryption\n The networks set up are too strong\nAttack\nOnce reconnaissance has been performed, exploitation must be performed for proof of\nconcept. If the attack is being performed as part of a red team or wider assessment, then\nexploitation should be performed to gain access to the network as surreptitiously as possible.\nIn our attacking phase, we will explore the following:\n Cracking the encryption\n Attacking the infrastructure\n Compromising clients\n Finding vulnerable clients\n Finding unauthorized clients\nCracking the encryption\nThe first step is to retrieve the keys for any vulnerable networks identified. If networks\nwith WEP exist, perform the WEP-cracking methods explained in Chapter 4, WLAN\nEncryption Flaws. If WPA2-secured systems are present, you have two choices. If aiming\nto be stealthy, arrive on-site at times when individuals are likely to be authenticating\nor re-authenticating. These times are likely to be:\n Start of the day\n Lunch time\n End of the day\nAt this time, set up your WPA key retrieval setup as shown in Chapter 4, WLAN Encryption\nFlaws. Alternatively, perform the deauthentication attack, as shown in Chapter 6, Attacking\nthe Client.\n[ 171 ]\nwww.it-ebooks.info\nWLAN Penetration Testing Methodology\nThis is noisier and more likely to be detected in a mature organization.\nIf WPA-Enterprise is in place, bear in mind you will have to use the information gathered from\nthe reconnaissance to target the correct network and set up your dummy Enterprise setup as\nshown in the Attacking PEAP section in Chapter 8, Attacking WPA-Enterprise and RADIUS.\nYou can attempt to break all passphrases but bear in mind that some will be unbreakable.\nFollowing the performance of the test, check with the wireless administrator for the\npassphrase in use. Check to see whether it is a secure passphrase and that you, as a tester,\ndid not experience a tool failure or were merely unlucky.\nAttacking infrastructure\nIf network access is gained through cracking the encryption, perform a standard network\npenetration test if allowed in scope. The following should be performed as a minimum:\n A port scan\n Identifying which services are running\n Enumerating any open services, such as unauthenticated FTP, SMB, or HTTP\n Exploiting any vulnerable services identified\nCompromising clients\nAfter enumerating and testing all wireless systems, there are various types of engagements\nthat would suit performing attacks against clients.\nIf necessary, after establishing which clients are vulnerable to Karma attacks, create a Honeypot\nto force them to connect with the methods laid out in the Attacking PEAP section in Chapter 8,\nAttacking WPA-Enterprise and RADIUS. There are various useful pieces of information that can\nbe gathered through this method, but ensure that the collected data serves a purpose and\nis stored, transmitted, and used in an ethical and safe manner.\nReporting\nFinally, at the end of testing, it is necessary to report your findings to the client. It's\nimportant to ensure that the report matches the quality of your testing. As the client\nwill only see the report, you have to give it as much love and attention as you do to\nyour testing. The following is a guideline to the layout of the report:\n1. Management summary.\n2. Technical summary.\n[ 172 ]\nwww.it-ebooks.info"
  },
  {
    "input": "What are the key vulnerabilities related to WPS and probe monitoring, and how can they be exploited using tools like Wash and Reaver?",
    "summary": "This chapter discusses new wireless testing techniques, including WPS attacks and probe monitoring, which were not covered in the initial book publication. It explains how vulnerabilities in the WPS protocol can be exploited due to predictable pin components and reduced complexity. The chapter also provides step-by-step instructions on using tools like Wash and Reaver to identify and attack vulnerable WPS setups.",
    "output": "Chapter 9\n3. Findings:\nVulnerability description\n\nSeverity\n\nAffected devices\n\nVulnerability type—software/hardware/configuration\n\nRemediation\n\n4. Appendices.\nThe management summary should be aimed at talking to a senior nontechnical audience\nwith a focus on the effects and mitigations required at a high level. Avoid language that is\ntoo technical and ensure that the root causes are covered.\nThe technical summary should be a midpoint between the management summary and\nfindings list. It should be aimed at a developer or a technical lead with a focus on how to\nfix the issues and broad solutions that could be implemented.\nThe findings list should describe each vulnerability at a low level, explaining the methods\nto identify, and replicate, and vulnerabilities.\nAppendices should contain any extra information that would be too long to describe in\na short description. This is where any screenshots, proof-of-concept code, or stolen data\nshould be presented.\nSummary\nIn this chapter, we discussed a methodology for performing a range of wireless tests and\nreferred to the relevant chapters for each step. We also listed methods for reporting\nvulnerabilities and techniques for making technical data presentable. In the next and final\nchapter, we will cover new techniques developed since the initial publication of this book,\nWPS, and probe monitoring for surveillance.\n[ 173 ]\nwww.it-ebooks.info\nwww.it-ebooks.info\n10\nWPS and Probes\n\"Nothing is new under the sun.\"\nPopular Saying\nThis chapter incorporates the new techniques related to attacking WPS and\nprobe monitoring and also covers the pineapple tool that makes much of\nwireless testing a lot easier. These attacks and tools have appeared since\nthe publication of the original book, and we'll be making sure we're being\nas holistic as possible.\nWPS attacks\nWireless Protected Setup (WPS) was introduced in 2006 to help users without wireless\nknowledge to have secure networks. The idea was that their Wi-Fi device would have a single\nhidden hardcoded value that would allow access with key memorization. New devices would\nbe authenticated through a button press on the Wi-Fi router. Individuals outside the house\nwithout access to the device would not be able to have access, thus reducing the issues\nsurrounding remembering WPA keys or setting short ones.\nIn late 2011, a security vulnerability was disclosed enabling brute force attacks on the WPS\nauthentication system. The traffic required to negotiate a WPS exchange was spoofable,\nand the WPS pin itself is only eight characters between 0-9. To start with, this provides\nonly 100,000,000 possibilities in comparison with an eight character azAZ09 password\nhaving 218,340,105,584,896 combinations.\n[ 175 ]\nwww.it-ebooks.info\nWPS and Probes\nHowever, there are further vulnerabilities:\n Of the eight characters of the WPS pin, the last character is a checksum of the\nprevious seven and therefore predictable, leaving a maximum of 10,000,000 options\n In addition, the first four and the following three of the remaining characters are\nchecked separately, which means that there are 104 + 103 options or 11,000\nThrough the two decisions made in the authentication mechanism, we have gone from\n100,000,000 possible combinations to 11,000. This equates to a six-hours difference when\nbrute-forcing the algorithm. It is these decisions that make attacks against WPS viable.\nIn the next lab exercise, we will go through identifying and attacking vulnerable WPS\nsetups with Wash and Reaver.\nTime for action – WPS attack\nFollow the given instructions to get started:\n1. Before we attack a WPS-enabled access point, we need to create one. The\nTP-Link we use has this feature turned on by default, which is worrying but handy.\nTo double-check this, we can log onto our router and click on WPS. It should look\nlike the following:\n2. Now we've confirmed that it's ready. We need to set up our target. We need to set\nup our testing environment. We're going to use the Wash tool, and Wash requires a\nmonitoring interface to function. As we have done many times before, we need to\nset up one with the following command:\nairmon-ng start wlan0\n[ 176 ]\nwww.it-ebooks.info\nChapter 10\nThe output will be as follows:\n3. We have a monitoring interface set up as mon0, and we can call Wash with the\nfollowing command:\nwash --ignore-fcs -i mon0\nThe ignore fcs option is due to an issue with an expected format for requests\nthat wash causes:\n4. Wash will display all the nearby devices that support WPS as well as whether they\nhave WPS active or unlocked and what version is running:\n[ 177 ]\nwww.it-ebooks.info\nWPS and Probes\n5. We can see the Wireless Lab network supports WPS. It uses Version 1 and it's\nnot locked. Fantastic. We take note of the MAC address, which in my case is\nE8:94:F6:62:1E:8E, as this will be used to target our next tool: reaver.\n6. Reaver attempts to brute-force the WPS pin for a given MAC address. The syntax\nfor starting this is as follows:\nreaver -i mon0 -b <mac> -vv\nThe output will be as follows:\n7. Once it is started, the tool runs through all the possible combinations for the WPS\nand attempts to authenticate. Once it does this, it will return the WPS code and the\npassword, as shown in the following screenshot:\n8. With WPA-PSK in hand, we can authenticate normally now. I left my device\nwith the default WPA-PSK that matches the WPS pin. If, however, you want\nto authenticate with the WPS pin, you can do this by specifying the pin in\nreaver with the following command:\nreaver -i mon0 -b <mac> -vv -p 88404148\nReplace my pin with your own.\n[ 178 ]\nwww.it-ebooks.info"
  },
  {
    "input": "What is the purpose of the Python script described in the text and how can it be used in conjunction with other tools or services?",
    "summary": "In this chapter, we explored attacks on WPS and discussed how to monitor wireless probe requests. We used tools like Reaver to recover WPA keys and WPS pins, and tshark with Python to collect and analyze probe request data. We also provided steps for securing WPS and suggested ways to extend the functionality of our monitoring tools.",
    "output": "Chapter 10\nWhat just happened?\nWe successfully identified a wireless network with a vulnerable instance of WPS active with\nWash. We then used Reaver to recover the WPA key and the WPS pin. With this information,\nwe could then authenticate with the network and continue a network penetration test.\nHave a go hero – rate limiting\nIn the previous exercise, we attacked an entirely unprotected WPS installation.\nThere are multiple methods that can be used to further secure installations without\nremoving WPS altogether.\nMake an attempt to set the WPS pin to an arbitrary value and try again, to see whether\nReaver is as effective at cracking it.\nAcquire a wireless router that allows you to rate-limit the WPS attempts. Try and configure\nyour attack to avoid triggering lockouts.\nProbe sniffing\nWe have spoken about probes previously, and how they can be used to identify hidden\nnetworks and perform effective rogue access point attacks. They can also be used to\nidentify individuals as targets or track them on a mass scale with minimal equipment.\nWhen a device wishes to connect to a network, it sends a probe request that contains its\nown MAC address and the name of the network it wishes to connect to. We can use tools\nsuch as airodump-ng to track these. However, if we wish to identify whether an individual\nwas present at a specific location at a specific time or look for trends in Wi-Fi usage, we will\nneed to use a different approach.\nIn this section, we will utilize tshark and Python to collect data. You will receive the code\nand an explanation of what is being done.\nTime for action – collecting data\nFollow the given instructions to get started:\n1. First of all, we need a device that's looking for multiple networks. Generally, a\nnormal smartphone such as an Android device or iPhone will do the trick. Desktops\ndon't generally make good targets as they tend to remain in one location. Newer\niPhones and Android devices may have probe requests disabled or obfuscated,\nso do check before you give up.\n[ 179 ]\nwww.it-ebooks.info\nWPS and Probes\n2. Once you have your device, make sure the Wi-Fi is turned on.\n3. Then set up your monitoring interface as we have done many times before:\n4. The next thing to be done is to look for probe requests with tshark via the\nfollowing command:\ntshark -n -i mon0 subtype probereq\nThe screenshot of the following command is as follows:\n5. Your output at this point is a little rough, as the default output from tshark is not\ndesigned to be readable, just to have as much information in it as possible. It should\nlook like the following:\n[ 180 ]\nwww.it-ebooks.info\nChapter 10\n6. You can clearly see the MAC address and SSID of the probe request; however,\nthis output can be improved. We can use the following command to make it\nmore readable:\ntshark –n –i mon0 subtype probereq –T fields –e separator= -e\nwlan.sa –e wlan_mgt.ssid\nThe screenshot of the following command is as follows:\n7. The output here is much more readable:\n8. So, now we have the output in a readable format, what next? What we do is create\na Python script that will run the command and record the output for later analysis.\nBefore running the code, you will need to ensure that you have your monitoring\ninterface ready and that a file called results.txt is created in the directory you\nare in. The Python script is as follows:\nimport subprocess\nimport datetime\nresults = open(\"results.txt\", \"a\")\nwhile 1:\nblah = subprocess.check_output([\"tshark –n –i mon0 subtype\nprobereq –T fields –e separator= -e wlan.sa –e wlan_mgt.ssid –c\n100\"], shell=True)\nsplitblah = blah.split(\"\\n\")\nfor value in splitblah[:-1]:\nsplitvalue = value.split(\"\\t\")\nMAC = str(splitvalue[1])\nSSID = str(splitvalue[2])\ntime = str(datetime.datetime.now())\nResults.write(MAC+\" \"+SSID+\" \"+time+\"\\r\\n\")\nLet's get briefed on the python script:\n import subprocess library and datetime library: This allow us to refer\nto the subprocess and datetime libraries. The subprocess library allows\nus to monitor the interface from the Linux command line, and datetime\nallows us to get the accurate time and date readings.\n while 1: This line means run until stopped.\n[ 181 ]\nwww.it-ebooks.info\nWPS and Probes\n results = open(\"results.txt\", \"a\"): This opens a file with the\nappend rights and assigns it to results. The append rights only allow the\nscript to add to the contents of the file. This stops the file from constantly\nbeing overwritten.\n blah = subprocess.check_output([\"tshark –n –I mon0\nsubtype probereq –T fields –e separator= -e wlan.sa –e\nwlan_mgt.ssid –c 100\"], shell=True): This opens a shell to perform\nour previously tested tshark command. The only difference this time is—c\n100. What this flag does is it limit the command to 100 queries. This allows us\nto return the results to ourselves without having to stop the program. Since\nwe said run forever after writing the results, the script will restart again.\n\nThis line takes the output from the shell and assigns it to the variable blah.\n splitblah = blah.split(\"\\n\"): This takes the variable blah and\nsplits it by line.\n for value in splitblah[:-1]: This repeats the following action\nfor each line in the output, ignoring the first line that contains headers.\n splitvalue = value.split(\"\\t\"): This breaks each line into\nfurther smaller chunks using the tab character as the delimiter.\nThe following three lines take each chunk of text and assign it to a variable.\n\nMAC = str(splitvalue[1])\nSSID = str(splitvalue[2])\ntime = str(datetime.datetime.now())\n results.write(MAC+\" \"+SSID+\" \"+time+\"\\r\\n\"): This takes all\nthe values, writes them to a file separated by spaces, and ends with a\nreturn and a new line for neatness.\nThe output will be neat lines of text written to the file.\nWhat just happened?\nWe took the input from probe requests and output them to a file using Python.\nYou may ask yourself what the purpose of this is. This can be achieved by simply performing\nthe original tshark command and adding a >> results.txt command to the end.\nYou would be correct; however, what we have created is a framework for integration\nwith other tools, visualization platforms, databases, and services.\nFor example, using the WiGLE database that maps SSIDs to locations, you can add a few\nlines of code to take the SSID variable and query the WiGLE database.\n[ 182 ]\nwww.it-ebooks.info\nChapter 10\nAlternatively, you could set up a MySQL database and output the results there to perform\nthe SQL commands on it.\nThis section has provided you with the first steps to create your own probe-monitoring tools.\nThrough experimentation and using this simple code as the first step, a multitude of useful\ntools can be created.\nHave a go hero – extension ideas\nResearch which tools are available that allow visualization or data analytics and are easily\nintegrated with Python. Tools such as Maltego have free versions that can be used to\nplot information.\nSet yourself up a MySQL database to record the data and reconfigure the preceding Python\nscript to output the results to the database. Then, build another script (or do it in the same\none) to retrieve the data and output it to Maltego.\nReconfigure the script to query WiGLE, and collect geolocation data for probe requests.\nOutput this data through Maltego.\nMake an attempt to set up a web-based frontend through Flask, Django, or PHP to\ndisplay your results. Investigate currently existing solutions for presenting the data\nand attempting to emulate or improve them through a discussion with their creators.\nSummary\nIn this chapter, we discussed the attacks against WPS that have come about since the release\nof the original book and also performed an initial foray into integrating wireless tools with\nPython. Alas, we have come to end of the book, I hope it's been informative and interesting.\nSee you in another seven years for the third edition.\n[ 183 ]\nwww.it-ebooks.info\nwww.it-ebooks.info\nPop Quiz Answers\nChapter 1, Wireless Lab Setup\nPop quiz – understanding the basics\nQ1 Run the command ifconfig wlan0. In the output, you\nshould see a flag \"UP\", this indicates that the card is\nfunctional.\nQ2 You will only need a hard drive if you would like to store\nanything across reboots like configuration settings or\nscripts.\nQ3 It shows the ARP table on the local machine.\nQ4 We would use WPA_Supplicant.\nChapter 2, WLAN and its Inherent Insecurities\nPop quiz – understanding the basics\nQ1 3\nQ2 3\nQ3 1\n[ 185 ]\nwww.it-ebooks.info\nPop Quiz Answers\nChapter 3, Bypassing WLAN Authentication\nPop quiz – WLAN authentication\nQ1 4\nQ2 2\nQ3 1\nChapter 4, WLAN Encryption Flaws\nPop quiz – WLAN encryption flaws\nQ1 3\nQ2 1\nQ3 2\nChapter 5, Attacks on the WLAN Infrastructure\nPop quiz – attacks on the WLAN infrastructure\nQ1 1\nQ2 1\nQ3 1\nQ4 4\nChapter 6, Attacking the Client\nPop quiz – Attacking the Client\nQ1 1\nQ2 1\nQ3 2\nQ4 4\n[ 186 ]\nwww.it-ebooks.info"
  },
  {
    "input": "What are the key topics covered in the advanced WLAN attacks and WPA-Enterprise and RADIUS chapters of the text?",
    "summary": "The text covers advanced WLAN attacks in Chapter 7, including a pop quiz with questions of varying difficulty levels. Chapter 8 focuses on attacking WPA-Enterprise and RADIUS systems, also featuring a pop quiz with different question types. Both chapters provide insights into various methods and challenges associated with wireless network security.",
    "output": "Appendix\nChapter 7, Advanced WLAN Attacks\nPop quiz – advanced WLAN attacks\nQ1 2\nQ2 2\nQ3 4\nQ4 1\nChapter 8, Attacking WPA-Enterprise and RADIUS\nPop quiz – attacking WPA-Enterprise and RADIUS\nQ1 2\nQ2 2\nQ3 4\nQ4 2\n[ 187 ]\nwww.it-ebooks.info\nwww.it-ebooks.info"
  },
  {
    "input": "What are the key methods and tools used in wireless penetration testing with Kali Linux?",
    "summary": "This text is a table of contents for a book on wireless penetration testing using Kali Linux. It outlines various topics such as configuring wireless networks, cracking WEP and WPA encryption, conducting denial of service attacks, and using tools like airodump-ng and hydra. The book also covers wireless eavesdropping, man-in-the-middle attacks, and setting up a wireless lab for testing purposes.",
    "output": "Index\nA C\naccess point Caffe Latte attack\nconfiguring 5-7 about 123\nconfiguring, to use WEP 8 conducting 124-127\nconfiguring, to use WPA 8 client\nconnecting to 9 baiting 154\nconnecting to, wireless card used 9-11 deauthenticating 128-130\ndefault accounts, cracking on 91-93 deauthentication attack 152-154\nsetting up 5 security configurations, finding 151\ntables, filling 54 control frames\naccounts about 15\ncracking, Brute-force attacks used 93 viewing 22-25\nadapter 29-31 Cowpatty\naircrack-NG suite used, for cracking WPA-PSK 81\nURL 44\nairodump-NG utility D\nURL 47\nAP data\nsetting up, FreeRADIUS-WPE (Wireless Pwnage collecting 179-182\nEdition) used 158-161 data frames\nAP-less WPA cracking 134 about 15\nAP-less WPA-Personal cracking 132, 133 viewing 22-25\napplication hijacking data packets\nchallenge 151 analyzing 28\ninjecting 28\nB sniffing, for network 26, 27\ndeauthentication attack\nBrute-force attacks about 127\nused, for cracking accounts 93 on client 152-154\ndefault accounts\ncracking, on access points 91, 92\n[ 189 ]\nwww.it-ebooks.info\nDenial of Service (DoS) attacks M\nabout 54, 94\ndeauthentication attack 94-99 MAC filters\ndisassociation attack 100 about 44\ndisassociation attack instructions 44-47\nabout 127 management frames\non client 130 about 15\ndiscovery phase, wireless penetration viewing 22-25\ntesting 170, 171 man-in-the-middle attack (MITM)\nabout 138-142\nE over pure wireless 142\nused, for Wireless Eavesdropping 142-147\nEAP-TTLS 166 Message Integrity Check (MIC) 74\nEnterprises Mis-Association attack\nsecurity, best practices 166 orchestrating 118-123\nEttercap 151 monitor mode interface\nevil twin creating 16-18\nabout 100 multiple monitor mode interfaces, creating 19\nand access point MAC spoofing 100 MSCHAP-v2 166\nand channel hopping 107\nand MAC spoofing 101-106 O\nF Open Authentication\nabout 47\nfilters bypassing 47, 48\nworking with 26\nFreeRADIUS-WPE (Wireless Pwnage Edition) P\nRADIUS, working with 161\nsetting up 157 Pairwise Master Key (PMK) 82\nURL 158 Pairwise Transient Key (PTK) 73\nused, for setting up AP 158-161 Password-Based Key Derivation\nFunction (PBKDF2) 73\nH PEAP (Protected Extensible\nAuthentication Protocol)\nhacker attacking 161, 162\ntasks 118 attack, variations 166\nHirte attack cracking 162-166\nURL 131 EAP-TTLS 166\nWEP, cracking with 131, 132 versions 161\nHoneypot attacks 118-123 planning phase, wireless penetration\nHydra 93 testing 170\nPreferred Network List (PNL) 118\nK\nPre-Shared key (PSK) 72\nprobe\nKali\ndata, collecting 179-183\ninstalling 3-5\nrate, limiting 183\ninstalling, on VirtualBox 5, 29\nsniffing 179\nURL 2\npromiscous mode 15\n[ 190 ]\nwww.it-ebooks.info\nR network, connecting to 87-90\npackets, decrypting 84-87\nRadio Frequency (RF) 7 Wi-Fi Protection Access v2 (WPAv2) 58\nRADIUS WiFishing 154\nreceiving 167 wireless card\nregulatory domains configuring 8, 9\nadapter, experimenting with 31-34 setting up 8\nexploring 35 used, for access point connection 9-11\nrole 31 Wireless Eavesdropping\nreporting phase, wireless penetration MITM used 142-147\ntesting 172 wireless lab\nrogue access point hardware, requisites 2\nabout 107 software, requisites 2\nchallenge 115 wireless packets\nWEP, cracking 108-115 sniffing 19-21\nwireless penetration testing\nS\nabout 169\nattacking phase 171, 172\nsession hijacking\ndiscovery phase 170, 171\nover wireless 147-151\nplanning phase 170\nShared Key Authentication\nreporting phase 172\nabout 48, 49\nwireless penetration testing, attacking phase\nbypassing 49-54\nclients, compromising 172\nSSIDs\nencryption, cracking 171\ndeauthentication, selecting 44\ninfrastructure, cracking 172\nhidden SSIDs, uncovering 38-43\nWireshark traces 22\nWLAN\nV\naccess points 91\nattacks 154\nVirtualBox\nauthentication 54\nKali, installing on 5\nencryption, flaws 90\nW encryption 58\nWLAN frames\nWEP (Wired Equivalent Privacy) about 14\ncracking 59-72, 108-115 control frames 15\ncracking, with fake authentication 72 data frames 15\ncracking, with Hirte attack 131, 132 management frames 15\nprotocol 58 WLAN Packet Sniffing\nWEP configuration and Injection 35\nconnection 11 WLAN Sniffing 29\nWEP network WPA2 72\nconnecting to 87, 88 WPA-Enterprise\nWEP packets receiving 167\ndecrypting 84-87 WPA-PSK\nWi-Fi Protected Access (WPA) cracking, Cowpatty used 81\nabout 72 weak passphrase, cracking 75-80\n[ 191 ]\nwww.it-ebooks.info\nWPA/WPA2 PSK\ncracking, speeding up 81-84\nWPS (Wireless Protected Setup)\nattacks 175-178\nrate, limiting 179\n[ 192 ]\nwww.it-ebooks.info\nThank you for buying\nKali Linux Wireless Penetration Testing Beginner's Guide\nAbout Packt Publishing\nPackt, pronounced 'packed', published its first book, Mastering phpMyAdmin for Effective\nMySQL Management, in April 2004, and subsequently continued to specialize in publishing\nhighly focused books on specific technologies and solutions.\nOur books and publications share the experiences of your fellow IT professionals in adapting\nand customizing today's systems, applications, and frameworks. Our solution-based books\ngive you the knowledge and power to customize the software and technologies you're\nusing to get the job done. Packt books are more specific and less general than the IT books\nyou have seen in the past. Our unique business model allows us to bring you more focused\ninformation, giving you more of what you need to know, and less of what you don't.\nPackt is a modern yet unique publishing company that focuses on producing quality,\ncutting-edge books for communities of developers, administrators, and newbies alike.\nFor more information, please visit our website at www.packtpub.com.\nAbout Packt Open Source\nIn 2010, Packt launched two new brands, Packt Open Source and Packt Enterprise, in order\nto continue its focus on specialization. This book is part of the Packt Open Source brand,\nhome to books published on software built around open source licenses, and offering\ninformation to anybody from advanced developers to budding web designers. The Open\nSource brand also runs Packt's Open Source Royalty Scheme, by which Packt gives a royalty\nto each open source project about whose software a book is sold.\nWriting for Packt\nWe welcome all inquiries from people who are interested in authoring. Book proposals\nshould be sent to author@packtpub.com. If your book idea is still at an early stage and\nyou would like to discuss it first before writing a formal book proposal, then please contact\nus; one of our commissioning editors will get in touch with you.\nWe're not just looking for published authors; if you have strong technical skills but no\nwriting experience, our experienced editors can help you develop a writing career, or\nsimply get some additional reward for your expertise.\nwww.it-ebooks.info\nMastering Kali Linux for Advanced Penetration\nTesting\nISBN: 978-1-78216-312-1 Paperback: 356 pages\nA practical guide to testing your network's security\nwith Kali Linux, the preferred choice of penetration\ntesters and hackers\n1. Conduct realistic and effective security tests on\nyour network.\n2. Demonstrate how key data systems are stealthily\nexploited, and learn how to identify attacks against\nyour own systems.\n3. Use hands-on techniques to take advantage of Kali\nLinux, the open source framework of security tools.\nKali Linux – Assuring Security by Penetration\nTesting\nISBN: 978-1-84951-948-9 Paperback: 454 pages\nMaster the art of penetration testing with Kali Linux\n1. Learn penetration testing techniques with an\nin-depth coverage of Kali Linux distribution.\n2. Explore the insights and importance of testing\nyour corporate network systems before the\nhackers strike.\n3. Understand the practical spectrum of security\ntools by their exemplary usage, configuration,\nand benefits.\nPlease check www.PacktPub.com for information on our titles\nwww.it-ebooks.info\nKali Linux Cookbook\nISBN: 978-1-78328-959-2 Paperback: 260 pages\nOver 70 recipes to help you master Kali Linux for\neffective penetration security testing\n1. Recipes designed to educate you extensively on the\npenetration testing principles and Kali Linux tools.\n2. Learning to use Kali Linux tools, such as Metasploit,\nWire Shark, and many more through in-depth and\nstructured instructions.\n3. Teaching you in an easy-to-follow style, full of\nexamples, illustrations, and tips that will suit\nexperts and novices alike.\nKali Linux CTF Blueprints\nISBN: 978-1-78398-598-2 Paperback: 190 pages\nBuild, test, and customize your own Capture the Flag\nchallenges across multiple platforms designed to be\nattacked with Kali Linux\n1. Put the skills of the experts to the test with these\ntough and customisable pentesting projects.\n2. Develop each challenge to suit your specific\ntraining, testing, or client engagement needs.\n3. Hone your skills, from wireless attacks to\nsocial engineering, without the need to access\nlive systems.\nPlease check www.PacktPub.com for information on our titles\nwww.it-ebooks.info"
  }
]