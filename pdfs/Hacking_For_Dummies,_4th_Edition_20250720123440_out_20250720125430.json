[
  {
    "input": "What is the purpose and nature of ethical hacking as described in the text?",
    "summary": "\"Hacking For Dummies, 4th Edition\" is a guide to ethical hacking, explaining how to legally assess computer systems for security vulnerabilities. It covers the mindset of hackers, hacking methodologies, and techniques for testing networks, operating systems, and applications. The book emphasizes the importance of ethical hacking in identifying and fixing security weaknesses before malicious actors can exploit them.",
    "output": "Hacking\nFOR\nDUMmIES‰\n4\nTH EDITION\nby Kevin Beaver, CISSP\nHacking For Dummies®, 4th Edition\nPublished by\nJohn Wiley & Sons, Inc.\n111 River Street\nHoboken, NJ 07030-5774\nwww.wiley.com\nCopyright © 2013 by John Wiley & Sons, Inc., Hoboken, New Jersey\nPublished by John Wiley & Sons, Inc., Hoboken, New Jersey\nPublished simultaneously in Canada\nNo part of this publication may be reproduced, stored in a retrieval system or transmitted in any form or\nby any means, electronic, mechanical, photocopying, recording, scanning or otherwise, except as permit-\nted under Sections 107 or 108 of the 1976 United States Copyright Act, without either the prior written\npermission of the Publisher, or authorization through payment of the appropriate per-copy fee to the\nCopyright Clearance Center, 222 Rosewood Drive, Danvers, MA 01923, (978) 750-8400, fax (978) 646-8600.\nRequests to the Publisher for permission should be addressed to the Permissions Department, John Wiley\n& Sons, Inc., 111 River Street, Hoboken, NJ 07030, (201) 748-6011, fax (201) 748-6008, or online at http://\nwww.wiley.com/go/permissions.\nTrademarks: Wiley, the Wiley logo, For Dummies, the Dummies Man logo, A Reference for the Rest of Us!,\nThe Dummies Way, Dummies Daily, The Fun and Easy Way, Dummies.com, Making Everything Easier, and\nrelated trade dress are trademarks or registered trademarks of John Wiley & Sons, Inc. and/or its afili-\nates in the United States and other countries, and may not be used without written permission. All other\ntrademarks are the property of their respective owners. John Wiley & Sons, Inc. is not associated with any\nproduct or vendor mentioned in this book.\nLIMIT OF LIABILITY/DISCLAIMER OF WARRANTY: THE PUBLISHER AND THE AUTHOR MAKE NO\nREPRESENTATIONS OR WARRANTIES WITH RESPECT TO THE ACCURACY OR COMPLETENESS OF\nTHE CONTENTS OF THIS WORK AND SPECIFICALLY DISCLAIM ALL WARRANTIES, INCLUDING WITH-\nOUT LIMITATION WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE. NO WARRANTY MAY BE\nCREATED OR EXTENDED BY SALES OR PROMOTIONAL MATERIALS. THE ADVICE AND STRATEGIES\nCONTAINED HEREIN MAY NOT BE SUITABLE FOR EVERY SITUATION. THIS WORK IS SOLD WITH THE\nUNDERSTANDING THAT THE PUBLISHER IS NOT ENGAGED IN RENDERING LEGAL, ACCOUNTING, OR\nOTHER PROFESSIONAL SERVICES. IF PROFESSIONAL ASSISTANCE IS REQUIRED, THE SERVICES OF\nA COMPETENT PROFESSIONAL PERSON SHOULD BE SOUGHT. NEITHER THE PUBLISHER NOR THE\nAUTHOR SHALL BE LIABLE FOR DAMAGES ARISING HEREFROM. THE FACT THAT AN ORGANIZA-\nTION OR WEBSITE IS REFERRED TO IN THIS WORK AS A CITATION AND/OR A POTENTIAL SOURCE\nOF FURTHER INFORMATION DOES NOT MEAN THAT THE AUTHOR OR THE PUBLISHER ENDORSES\nTHE INFORMATION THE ORGANIZATION OR WEBSITE MAY PROVIDE OR RECOMMENDATIONS IT\nMAY MAKE. FURTHER, READERS SHOULD BE AWARE THAT INTERNET WEBSITES LISTED IN THIS\nWORK MAY HAVE CHANGED OR DISAPPEARED BETWEEN WHEN THIS WORK WAS WRITTEN AND\nWHEN IT IS READ.\nFor general information on our other products and services, please contact our Customer Care\nDepartment within the U.S. at 877-762-2974, outside the U.S. at 317-572-3993, or fax 317-572-4002.\nFor technical support, please visit www.wiley.com/techsupport.\nWiley publishes in a variety of print and electronic formats and by print-on-demand. Some material\nincluded with standard print versions of this book may not be included in e-books or in print-on-demand.\nIf this book refers to media such as a CD or DVD that is not included in the version you purchased, you\nmay download this material at http://booksupport.wiley.com. For more information about Wiley\nproducts, visit www.wiley.com.\nLibrary of Congress Control Number: 2012955723\nISBN 978-1-118-38093-2 (pbk); ISBN 978-1-118-38094-9 (ebk); ISBN 978-1-118-38095-6 (ebk);\nISBN 978-1-118-38096-3 (ebk)\nManufactured in the United States of America\n10 9 8 7 6 5 4 3 2 1\nAbout the Author\nKevin Beaver is an independent information security consultant, expert\nwitness, professional speaker, and author with Atlanta-based Principle\nLogic, LLC. He has two and a half decades of experience and specializes in\nperforming information security assessments for corporations, security\nproduct vendors, independent software developers, universities, government\nagencies, and nonproit organizations. Before starting his information\nsecurity consulting practice in 2001, Kevin served in various information\ntechnology and security roles for several healthcare, e-commerce, inancial,\nand educational institutions.\nKevin has appeared on CNN television as an information security expert\nand has been quoted in The Wall Street Journal, Entrepreneur, Fortune Small\nBusiness, Women’s Health, and Inc. magazine’s technology site IncTechnology.\ncom. Kevin’s work has also been referenced by the PCI Council in their Data\nSecurity Standard Wireless Guidelines. Kevin has been a top-rated speaker,\ngiving hundreds of presentations and panel discussions for IT and security\nseminars, conferences, and webcasts over the past decade.\nKevin has authored/coauthored 10 information security books, including\nHacking Wireless Networks For Dummies, Implementation Strategies for\nFulilling and Maintaining IT Compliance (Realtimepublihers.com), and The\nPractical Guide to HIPAA Privacy and Security Compliance (Auerbach). Kevin\nhas written more than 30 whitepapers and 600 articles and is a regular\ncontributor to SearchCompliance.com, SearchEnterpriseDesktop.com, and\nSecurity Technology Executive magazine. Kevin is the creator and producer\nof the Security On Wheels audiobooks, which provide security learning for\nIT professionals on the go (securityonwheels.com), and the Security On\nWheels blog (securityonwheels.com/blog). He also covers information\nsecurity and related matters on Twitter (@kevinbeaver) and YouTube\n(PrincipleLogic). Kevin earned his bachelor’s degree in Computer\nEngineering Technology from Southern College of Technology and his\nmaster’s degree in Management of Technology from Georgia Tech. He has\nobtained his CISSP certiication in 2001 and also holds MCSE, Master CNE,\nand IT Project+ certiications.\nKevin can be reached through his website, www.principlelogic.com,\nand you can connect to him via LinkedIn at www.linkedin.com/in/\nkevinbeaver.\nDedication\nThis one’s for my country, the United States of America. You’re under\nattack and have been dealt another blow — kicked while you were down.\nI know without a doubt I wouldn’t be where I’m at both personally and\nprofessionally without the opportunities your Founding Fathers and brave\nsoldiers ighting for freedom have afforded me. I’m going to continue to ight,\nalong with my fellow independent thinkers, to preserve America in the spirit\nof which it was intended. We shall prevail.\nAuthor’s Acknowledgments\nFirst, I want to thank Amy, Garrett, and Mary Lin for being here for me yet\nagain and putting up with my intermittent crankiness while working on this\nedition. I love you all 100 percent!\nI’d also like to thank Melody Layne, my original acquisitions editor at Wiley,\nfor contacting me long ago with this book idea and providing me this great\nopportunity. I’d also like to thank my current acquisitions editor, Amy\nFandrei, for continuing this project and presenting me the opportunity to\nshape this book into something I’m very proud of.\nI’d like to thank my project editor, Becky Huehls. You’ve been extraordinarily\npatient and a real gem to work with! I hope I have a chance to work with you\nagain. I’d also like to thank Virginia Sanders, my copy editor, for helping me\nkeep my focus and really ine-tuning the wording. Also, many thanks to my\ntechnical editor, business colleague, friend, and coauthor of Hacking Wireless\nNetworks For Dummies, Peter T. Davis. Again, I’m honored to be working with\nyou and very much appreciate your valuable feedback and additions. Your\nkeen eye has kept me in check, yet again.\nMuch gratitude to Robert Abela with Acunetix; HD Moore, Jill McInnis,\nand Chris Kirsch with Rapid7; Vladimir Katalov and Olga Koksharova with\nElcomsoft; Charlene Sciberras with GFI Software; Maty Siman and Asaph\nSchulman with Checkmarx; Dmitry Sumin with Passware; Brian Miller with\nHP’s Application Security Center; Kirk Thomas with Northwest Performance\nSoftware; David Vest with Mythicsoft; Justin Warren and Dan Kuykendall with\nNT Objectives; Michael Berg with TamoSoft; Terry Ingoldsby with Amenaza\nTechnologies; Oleg Fedorov with Oxygen Software Company; Todd Feinman\nand Chris Arold with Identity Finder for responding to all my requests.\nThanks to Dave Coe for your help in keeping me current on the latest security\ntools and hacks. Much gratitude to all the others I forgot to mention as well!\nMega thanks to Queensrÿche, Rush, Incubus, Black Country Communion,\nand Dream Theater for your energizing sounds and inspirational words. Your\nmusic truly helped me stayed motivated during the long hours spent getting\nthis new edition out!\nSerious thanks to Neal Boortz for going against the grain and educating me\nabout what’s happening in our country and the world we live in. You have\nkept me motivated as an entrepreneur, small business owner, and libertarian\nfor a couple of decades. You speak the truth and I’m saddened that you’re\nretiring. Enjoy it though; you’ve earned it!\nThanks to Brian Tracy, John Maxwell, and the late Richard Carlson for your\nimmeasurable insight and guidance on what it takes to be a better person.\nEach of your contributions have helped me in so many ways that I couldn’t\npossibly pay you back.\nFinally, I want to send out a sincere thanks and humble appreciation to my\nclients for hiring me, a “no-name-brand” consultant, and keeping me around\nfor the long term. I wouldn’t be here without your willingness to break out\nof the “must hire big company” mindset and your continued support. Thank\nyou very much.\nPublisher’s Acknowledgments\nWe’re proud of this book; please send us your comments at http://dummies.custhelp.com.\nFor other comments, please contact our Customer Care Department within the U.S. at 877-762-2974,\noutside the U.S. at 317-572-3993, or fax 317-572-4002.\nSome of the people who helped bring this book to market include the following:\nAcquisitions and Editorial Composition Services\nSr. Project Editor: Rebecca Huehls Project Coordinator: Sheree Montgomery\nAcquisitions Editor: Amy Fandrei Layout and Graphics: Jennifer Creasey\nCopy Editor: Virginia Sanders Proofreaders: Cynthia Fields, Jessica Kramer\nTechnical Editor: Peter T. Davis Indexer: Potomac Indexing, LLC\nSr. Editorial Manager: Leah Michael\nEditorial Assistant: Annie Sullivan\nSr. Editorial Assistant: Cherie Case\nCover Photo: © Nicolas Loran / iStockphoto\n(computer image); © rionm / iStockphoto\n(background image)\nCartoons: Rich Tennant (www.the5thwave.com)\nPublishing and Editorial for Technology Dummies\nRichard Swadley, Vice President and Executive Group Publisher\nAndy Cummings, Vice President and Publisher\nMary Bednarek, Executive Acquisitions Director\nMary C. Corder, Editorial Director\nPublishing for Consumer Dummies\nKathleen Nebenhaus, Vice President and Executive Publisher\nComposition Services\nDebbie Stailey, Director of Composition Services\nContents at a Glance\nIntroduction ................................................................ 1\nPart I: Building the Foundation for Ethical Hacking ....... 7\nChapter 1: Introduction to Ethical Hacking ....................................................................9\nChapter 2: Cracking the Hacker Mindset ......................................................................25\nChapter 3: Developing Your Ethical Hacking Plan .......................................................35\nChapter 4: Hacking Methodology ..................................................................................47\nPart II: Putting Ethical Hacking in Motion .................. 63\nChapter 5: Social Engineering ........................................................................................65\nChapter 6: Physical Security ..........................................................................................81\nChapter 7: Passwords ......................................................................................................93\nPart III: Hacking Network Hosts ............................... 121\nChapter 8: Network Infrastructure ..............................................................................123\nChapter 9: Wireless LANs .............................................................................................157\nChapter 10: Mobile Devices ..........................................................................................185\nPart IV: Hacking Operating Systems ......................... 197\nChapter 11: Windows ....................................................................................................199\nChapter 12: Linux ...........................................................................................................227\nPart V: Hacking Applications ................................... 249\nChapter 13: Communication and Messaging Systems ..............................................251\nChapter 14: Websites and Applications ......................................................................277\nChapter 15: Databases and Storage Systems .............................................................305\nPart VI: Ethical Hacking Aftermath .......................... 317\nChapter 16: Reporting Your Results ............................................................................319\nChapter 17: Plugging Security Holes ...........................................................................325\nChapter 18: Managing Security Processes .................................................................331\nPart VII: The Part of Tens ......................................... 339\nChapter 19: Ten Tips for Getting Upper Management Buy-In ..................................341\nChapter 20: Ten Reasons Hacking Is the Only Effective Way to Test .....................347\nChapter 21: Ten Deadly Mistakes ................................................................................351\nAppendix: Tools and Resources .................................. 355\nIndex ...................................................................... 373\nTable of Contents\nIntroduction ................................................................. 1\nWho Should Read This Book? ........................................................................1\nAbout This Book ..............................................................................................2\nHow to Use This Book .....................................................................................2\nWhat You Don’t Need to Read .......................................................................3\nFoolish Assumptions .......................................................................................3\nHow This Book Is Organized ..........................................................................3\nPart I: Building the Foundation for Ethical Hacking ..........................4\nPart II: Putting Ethical Hacking in Motion ...........................................4\nPart III: Hacking Network Hosts ...........................................................4\nPart IV: Hacking Operating Systems ....................................................4\nPart V: Hacking Applications ................................................................5\nPart VI: Ethical Hacking Aftermath ......................................................5\nPart VII: The Part of Tens ......................................................................5\nIcons Used in This Book .................................................................................6\nWhere to Go from Here ...................................................................................6\nPart I: Building the Foundation for Ethical Hacking ........ 7\nChapter 1: Introduction to Ethical Hacking........................9\nStraightening Out the Terminology ...............................................................9\nDeining hacker ....................................................................................10\nDeining malicious user .......................................................................11\nRecognizing How Malicious Attackers Beget Ethical Hackers .................11\nEthical hacking versus auditing .........................................................12\nPolicy considerations ..........................................................................12\nCompliance and regulatory concerns ...............................................13\nUnderstanding the Need to Hack Your Own Systems ..............................13\nUnderstanding the Dangers Your Systems Face .......................................14\nNontechnical attacks ...........................................................................15\nNetwork infrastructure attacks ..........................................................15\nOperating system attacks ...................................................................16\nApplication and other specialized attacks .......................................16\nObeying the Ethical Hacking Commandments ..........................................17\nWorking ethically .................................................................................17\nRespecting privacy ..............................................................................17\nNot crashing your systems .................................................................18\nx\nHacking For Dummies, 4th Edition\nUsing the Ethical Hacking Process ..............................................................18\nFormulating your plan .........................................................................19\nSelecting tools ......................................................................................20\nExecuting the plan ...............................................................................22\nEvaluating results ................................................................................23\nMoving on .............................................................................................23\nChapter 2: Cracking the Hacker Mindset.........................25\nWhat You’re Up Against ................................................................................25\nWho Breaks into Computer Systems ..........................................................27\nWhy They Do It ..............................................................................................29\nPlanning and Performing Attacks ................................................................32\nMaintaining Anonymity .................................................................................34\nChapter 3: Developing Your Ethical Hacking Plan.................35\nEstablishing Your Goals ................................................................................36\nDetermining Which Systems to Hack ..........................................................38\nCreating Testing Standards ..........................................................................40\nTiming....................................................................................................41\nRunning speciic tests .........................................................................41\nBlind versus knowledge assessments ...............................................42\nPicking your location ...........................................................................43\nResponding to vulnerabilities you ind .............................................43\nMaking silly assumptions ....................................................................44\nSelecting Security Assessment Tools ..........................................................44\nChapter 4: Hacking Methodology ...............................47\nSetting the Stage for Testing ........................................................................47\nSeeing What Others See ................................................................................49\nGathering public information .............................................................49\nMapping the network ..........................................................................52\nScanning Systems ..........................................................................................54\nHosts ......................................................................................................55\nOpen ports ............................................................................................55\nDetermining What’s Running on Open Ports .............................................56\nAssessing Vulnerabilities ..............................................................................58\nPenetrating the System .................................................................................61\nPart II: Putting Ethical Hacking in Motion ................... 63\nChapter 5: Social Engineering..................................65\nIntroducing Social Engineering ....................................................................65\nStarting Your First Social Engineering Tests ..............................................66\nWhy Attackers Use Social Engineering .......................................................68\nUnderstanding the Implications ..................................................................69\nxi\nTable of Contents\nPerforming Social Engineering Attacks .......................................................70\nSeeking information .............................................................................70\nBuilding trust ........................................................................................73\nExploiting the relationship .................................................................74\nSocial Engineering Countermeasures .........................................................77\nPolicies ..................................................................................................77\nUser awareness and training ..............................................................78\nChapter 6: Physical Security ...................................81\nIdentifying Basic Physical Security Vulnerabilities ...................................81\nPinpointing Physical Vulnerabilities in Your Ofice ..................................84\nBuilding infrastructure ........................................................................84\nUtilities ..................................................................................................85\nOfice layout and usage .......................................................................86\nNetwork components and computers ...............................................88\nChapter 7: Passwords .........................................93\nUnderstanding Password Vulnerabilities ...................................................94\nOrganizational password vulnerabilities ..........................................94\nTechnical password vulnerabilities ..................................................96\nCracking Passwords ......................................................................................97\nCracking passwords the old-fashioned way .....................................97\nCracking passwords with high-tech tools.......................................100\nCracking password-protected iles ..................................................108\nUnderstanding other ways to crack passwords ............................109\nGeneral Password-Cracking Countermeasures .......................................114\nStoring passwords .............................................................................115\nCreating password policies ..............................................................115\nTaking other countermeasures ........................................................116\nSecuring Operating Systems ......................................................................118\nWindows..............................................................................................118\nLinux and UNIX ...................................................................................119\nPart III: Hacking Network Hosts ................................ 121\nChapter 8: Network Infrastructure .............................123\nUnderstanding Network Infrastructure Vulnerabilities ..........................125\nChoosing Tools ............................................................................................126\nScanners and analyzers.....................................................................126\nVulnerability assessment ..................................................................127\nScanning, Poking, and Prodding the Network ..........................................127\nScanning ports....................................................................................128\nScanning SNMP ..................................................................................133\nGrabbing banners ..............................................................................135\nTesting irewall rules .........................................................................137\nAnalyzing network data.....................................................................139\nxii\nHacking For Dummies, 4th Edition\nThe MAC-daddy attack ......................................................................146\nTesting denial of service attacks .....................................................150\nDetecting Common Router, Switch, and Firewall Weaknesses ..............154\nFinding unsecured interfaces ...........................................................154\nExploiting IKE weaknesses................................................................154\nPutting Up General Network Defenses ......................................................155\nChapter 9: Wireless LANs.....................................157\nUnderstanding the Implications of Wireless Network Vulnerabilities ....157\nChoosing Your Tools ...................................................................................158\nDiscovering Wireless LANs ........................................................................161\nChecking for worldwide recognition ...............................................161\nScanning your local airwaves ...........................................................162\nDiscovering Wireless Network Attacks and Taking Countermeasures ...163\nEncrypted trafic ................................................................................165\nCountermeasures against encrypted trafic attacks .....................170\nWi-Fi Protected Setup ........................................................................170\nCountermeasures against the WPS PIN law ..................................172\nRogue wireless devices .....................................................................172\nCountermeasures against rogue wireless devices ........................176\nMAC spooing .....................................................................................177\nCountermeasures against MAC spooing ........................................181\nPhysical security problems ..............................................................182\nCountermeasures against physical security problems.................182\nVulnerable wireless workstations ...................................................182\nCountermeasures against vulnerable wireless workstations ......183\nDefault coniguration settings ..........................................................183\nCountermeasures against default\nconiguration settings exploits .....................................................184\nChapter 10: Mobile Devices...................................185\nSizing Up Mobile Vulnerabilities ................................................................185\nCracking Laptop Passwords .......................................................................186\nChoosing your tools ..........................................................................186\nCountermeasures ...............................................................................190\nCracking Phones and Tablets ....................................................................191\nCracking iOS Passwords ...................................................................192\nCountermeasures against password cracking ...............................195\nPart IV: Hacking Operating Systems .......................... 197\nChapter 11: Windows.........................................199\nIntroducing Windows Vulnerabilities .......................................................200\nChoosing Tools ............................................................................................201\nFree Microsoft tools ..........................................................................201\nAll-in-one assessment tools ..............................................................202\nTask-speciic tools .............................................................................202\nxiii\nTable of Contents\nGathering Information about Your Windows Vulnerabilities ................203\nSystem scanning ................................................................................203\nNetBIOS ...............................................................................................206\nDetecting Null Sessions ...............................................................................208\nMapping ..............................................................................................209\nGleaning information .........................................................................210\nCountermeasures against null session hacks ................................212\nChecking Share Permissions ......................................................................214\nWindows defaults...............................................................................214\nTesting .................................................................................................215\nExploiting Missing Patches .........................................................................216\nUsing Metasploit ................................................................................217\nCountermeasures against missing patch vulnerability exploits ....224\nRunning Authenticated Scans ....................................................................225\nChapter 12: Linux ............................................227\nUnderstanding Linux Vulnerabilities ........................................................228\nChoosing Tools ............................................................................................228\nGathering Information about Your Linux Vulnerabilities .......................229\nSystem scanning ................................................................................229\nCountermeasures against system scanning ...................................233\nFinding Unneeded and Unsecured Services .............................................234\nSearches ..............................................................................................234\nCountermeasures against attacks on unneeded services ............236\nSecuring the .rhosts and hosts.equiv Files ..............................................238\nHacks using the .rhosts and hosts.equiv iles ................................239\nCountermeasures against .rhosts and hosts.equiv ile attacks ...240\nAssessing the Security of NFS ....................................................................241\nNFS hacks ............................................................................................241\nCountermeasures against NFS attacks ............................................242\nChecking File Permissions ..........................................................................242\nFile permission hacks ........................................................................242\nCountermeasures against ile permission attacks .........................242\nFinding Buffer Overlow Vulnerabilities ...................................................243\nAttacks.................................................................................................244\nCountermeasures against buffer-overlow attacks ........................244\nChecking Physical Security ........................................................................244\nPhysical security hacks .....................................................................245\nCountermeasures against physical security attacks .....................245\nPerforming General Security Tests ...........................................................246\nPatching Linux .............................................................................................247\nDistribution updates..........................................................................247\nMulti-platform update managers .....................................................248\nxiv\nHacking For Dummies, 4th Edition\nPart V: Hacking Applications .................................... 249\nChapter 13: Communication and Messaging Systems ............251\nIntroducing Messaging System Vulnerabilities ........................................251\nRecognizing and Countering E-Mail Attacks ............................................252\nE-mail bombs ......................................................................................253\nBanners ...............................................................................................256\nSMTP attacks ......................................................................................257\nGeneral best practices for minimizing e-mail security risks ........267\nUnderstanding Voice over IP .....................................................................268\nVoIP vulnerabilities ...........................................................................269\nCountermeasures against VoIP vulnerabilities ..............................276\nChapter 14: Websites and Applications.........................277\nChoosing Your Web Application Tools ....................................................278\nSeeking Web Vulnerabilities .......................................................................280\nDirectory traversal ............................................................................280\nCountermeasures against directory traversals .............................283\nInput-iltering attacks ........................................................................283\nCountermeasures against input attacks .........................................292\nDefault script attacks ........................................................................294\nCountermeasures against default script attacks ...........................294\nUnsecured login mechanisms ..........................................................295\nCountermeasures against unsecured login systems .....................298\nPerforming general security scans for\nweb application vulnerabilities ....................................................300\nMinimizing Web Security Risks ..................................................................300\nPracticing security by obscurity ......................................................300\nPutting up irewalls ............................................................................301\nAnalyzing source code ......................................................................302\nChapter 15: Databases and Storage Systems ....................305\nDiving into Databases .................................................................................305\nChoosing tools....................................................................................305\nFinding databases on the network...................................................306\nCracking database passwords..........................................................308\nScanning databases for vulnerabilities ...........................................309\nFollowing Best Practices for Minimizing Database Security Risks ........310\nOpening Up about Storage Systems ..........................................................311\nChoosing tools....................................................................................311\nFinding storage systems on the network ........................................312\nRooting out sensitive text in network iles .....................................312\nFollowing Best Practices for Minimizing Storage Security Risks ...........315\nxv\nTable of Contents\nPart VI: Ethical Hacking Aftermath ........................... 317\nChapter 16: Reporting Your Results ............................319\nPulling the Results Together ......................................................................319\nPrioritizing Vulnerabilities .........................................................................320\nCreating Reports ..........................................................................................322\nChapter 17: Plugging Security Holes ...........................325\nTurning Your Reports into Action .............................................................325\nPatching for Perfection ...............................................................................326\nPatch management ............................................................................327\nPatch automation ...............................................................................327\nHardening Your Systems ............................................................................328\nAssessing Your Security Infrastructure ....................................................329\nChapter 18: Managing Security Processes......................331\nAutomating the Ethical-Hacking Process .................................................331\nMonitoring Malicious Use ...........................................................................332\nOutsourcing Ethical Hacking ......................................................................334\nInstilling a Security-Aware Mindset ...........................................................336\nKeeping Up with Other Security Efforts ...................................................337\nPart VII: The Part of Tens .......................................... 339\nChapter 19: Ten Tips for Getting Upper Management Buy-In ......341\nCultivate an Ally and a Sponsor .................................................................341\nDon’t Be a FUDdy Duddy ............................................................................341\nDemonstrate How the Organization Can’t Afford to Be Hacked ............342\nOutline the General Beneits of Ethical Hacking ......................................343\nShow How Ethical Hacking Speciically Helps the Organization ...........343\nGet Involved in the Business ......................................................................344\nEstablish Your Credibility ..........................................................................344\nSpeak on Management’s Level ...................................................................344\nShow Value in Your Efforts .........................................................................345\nBe Flexible and Adaptable ..........................................................................345\nChapter 20: Ten Reasons Hacking Is the\nOnly Effective Way to Test ....................................347\nThe Bad Guys Think Bad Thoughts, Use Good\nTools, and Develop New Methods .........................................................347\nIT Governance and Compliance Are More\nThan High-Level Checklist Audits ..........................................................347\nxvi\nHacking For Dummies, 4th Edition\nEthical Hacking Complements Audits and Security Evaluations ..........348\nClients and Partners Will Ask, “How Secure Are Your Systems?” .........348\nThe Law of Averages Works against Businesses .....................................348\nEthical Hacking Improves Understanding of Business Threats ............349\nIf a Breach Occurs, You Have Something to Fall Back On ......................349\nEthical Hacking Brings Out the Worst in Your Systems .........................349\nEthical Hacking Combines the Best of Penetration Testing and\nVulnerability Assessments .....................................................................350\nEthical Hacking Can Uncover Weaknesses That Might Go\nOverlooked for Years ..............................................................................350\nChapter 21: Ten Deadly Mistakes ..............................351\nNot Getting Prior Approval ........................................................................351\nAssuming That You Can Find All Vulnerabilities during Your Tests ....351\nAssuming That You Can Eliminate All Security Vulnerabilities ............352\nPerforming Tests Only Once ......................................................................352\nThinking That You Know It All ...................................................................353\nRunning Your Tests without Looking at\nThings from a Hacker’s Viewpoint .........................................................353\nNot Testing the Right Systems ...................................................................353\nNot Using the Right Tools ...........................................................................354\nPounding Production Systems at the Wrong Time .................................354\nOutsourcing Testing and Not Staying Involved .......................................354\nAppendix: Tools and Resources .................................. 355\nIndex ....................................................................... 373\nIntroduction\nW\nelcome to Hacking For Dummies, 4th Edition. This book outlines —\nin plain English — computer hacker tricks and techniques that you\ncan use to assess the security of your information systems, find the security\nvulnerabilities that matter, and fix the weaknesses before criminal hackers\nand malicious users take advantage of them. This hacking is the professional,\naboveboard, and legal type of security testing — which I call ethical hacking\nthroughout the book.\nComputer and network security is a complex subject and an ever-moving\ntarget. You must stay on top of it to ensure that your information is pro-\ntected from the bad guys. That’s where the tools and techniques outlined in\nthis book can help.\nYou can implement all the security technologies and other best practices\npossible, and your information systems might be secure — as far as you\nknow. However, until you understand how malicious attackers think, apply\nthat knowledge, and use the right tools to assess your systems from their\npoint of view, you can’t get a true sense of how secure your information\nreally is.\nEthical hacking — which encompasses formal and methodical penetration\ntesting, white hat hacking, and vulnerability testing — is necessary to find secu-\nrity flaws and to help validate that your information systems are truly secure\non an ongoing basis. This book provides you with the knowledge to imple-\nment an ethical hacking program successfully, perform ethical hacking tests,\nand put the proper countermeasures in place to keep external hackers and\nmalicious users in check.\nWho Should Read This Book?\nDisclaimer: If you choose to use the information in this book to hack or break\ninto computer systems maliciously and without authorization, you’re on your\nown. Neither I (the author) nor anyone else associated with this book shall\nbe liable or responsible for any unethical or criminal choices that you might\nmake and execute using the methodologies and tools that I describe. This\nbook is intended solely for IT and information security professionals to test\ninformation security — either on your own systems or on a client’s systems —\nin an authorized fashion."
  },
  {
    "input": "What is the purpose and scope of \"Hacking For Dummies, 4th Edition\"?",
    "summary": "Hacking For Dummies, 4th Edition is a guide for ethical hacking that helps improve security and reduce business risks. It covers various hacking techniques, countermeasures, and case studies for different systems and applications. The book is organized into seven parts, each focusing on a different aspect of ethical hacking, from planning to executing and managing security tests.",
    "output": "2\nHacking For Dummies, 4th Edition\nOkay, now that that’s out of the way, it’s time for the good stuff! This book\nis for you if you’re a network administrator, information security manager,\nsecurity consultant, security auditor, compliance manager, or interested in\nfinding out more about legally and ethically testing computer systems and IT\noperations to make things more secure.\nAs the ethical hacker performing well-intended information security assess-\nments, you can detect and point out security holes that might otherwise be\noverlooked. If you’re performing these tests on your systems, the information\nyou uncover in your tests can help you win over management and prove that\ninformation security really is a business issue to be taken seriously. Likewise,\nif you’re performing these tests for your clients, you can help find security\nholes that can be plugged before the bad guys have a chance to exploit them.\nThe information in this book helps you stay on top of the security game and\nenjoy the fame and glory of helping your organization and clients prevent\nbad things from happening to their information.\nAbout This Book\nHacking For Dummies, 4th Edition, is a reference guide on hacking your sys-\ntems to improve security and help minimize business risks. The ethical hack-\ning techniques are based on written and unwritten rules of computer system\npenetration testing, vulnerability testing, and information security best prac-\ntices. This book covers everything from establishing your hacking plan to\ntesting your systems to plugging the holes and managing an ongoing ethical\nhacking program. Realistically, for many networks, operating systems, and\napplications, thousands of possible hacks exist. I cover the major ones on\nvarious platforms and systems. Whether you need to assess security vulner-\nabilities on a small home office network, a medium-sized corporate network,\nor across large enterprise systems, Hacking For Dummies, 4th Edition, pro-\nvides the information you need.\nHow to Use This Book\nThis book includes the following features:\n✓ Various technical and nontechnical hack attacks and their detailed\nmethodologies\n✓ Information security testing case studies from well-known information\nsecurity experts\n✓ Specific countermeasures to protect against hack attacks\n3\nIntroduction\nBefore you start hacking your systems, familiarize yourself with the informa-\ntion in Part I so you’re prepared for the tasks at hand. The adage “if you fail to\nplan, you plan to fail” rings true for the ethical hacking process. You must get\npermission and have a solid game plan in place if you’re going to be successful.\nThis material is not intended to be used for unethical or illegal hacking pur-\nposes to propel you from script kiddie to megahacker. Rather, it is designed\nto provide you with the knowledge you need to hack your own or your cli-\nents’ systems — ethically and legally — to enhance the security of the infor-\nmation involved.\nWhat You Don’t Need to Read\nDepending on your computer and network configurations, you may be able to\nskip chapters. For example, if you aren’t running Linux or wireless networks,\nyou can skip those chapters. Just be careful. You may think you’re not running\ncertain systems, but they could very well be on your network somewhere.\nFoolish Assumptions\nI make a few assumptions about you, the aspiring information security\nprofessional:\n✓ You’re familiar with basic computer-, network-, and information-security–\nrelated concepts and terms.\n✓ You have a basic understanding of what hackers and malicious users do.\n✓ You have access to a computer and a network on which to use these\ntechniques.\n✓ You have access to the Internet to obtain the various tools used in the\nethical hacking process.\n✓ You have permission to perform the hacking techniques described in\nthis book.\nHow This Book Is Organized\nThis book is organized into seven modular parts, so you can jump around\nfrom one part to another as needed. Each chapter provides practical meth-\nodologies and practices you can use as part of your ethical hacking efforts,\nincluding checklists and references to specific tools you can use, as well as\nresources on the Internet.\n4\nHacking For Dummies, 4th Edition\nPart I: Building the Foundation\nfor Ethical Hacking\nThis part covers the fundamental aspects of ethical hacking. It starts with an\noverview of the value of ethical hacking and what you should and shouldn’t\ndo during the process. You get inside the malicious mindset and discover\nhow to plan your ethical hacking efforts. This part covers the steps involved\nin the ethical hacking process, including how to choose the proper tools.\nPart II: Putting Ethical Hacking in Motion\nThis part gets you rolling with the ethical hacking process. It covers several\nwell-known and widely used hack attacks, including social engineering and\ncracking passwords, to get your feet wet. This part covers the human and\nphysical elements of security, which tend to be the weakest links in any\ninformation security program. After you plunge into these topics, you’ll know\nthe tips and tricks required to perform common general hack attacks against\nyour systems, as well as specific countermeasures to keep your information\nsystems secure.\nPart III: Hacking Network Hosts\nStarting with the larger network in mind, this part covers methods to test\nyour systems for various well-known network infrastructure vulnerabilities.\nFrom weaknesses in the TCP/IP protocol suite to wireless network insecuri-\nties, you find out how networks are compromised by using specific methods\nof flawed network communications, along with various countermeasures that\nyou can implement to avoid becoming a victim. I then delve down into mobile\ndevices and show how phones, tablets, and the like can be exploited. This\npart also includes case studies on some of the network hack attacks that are\npresented.\nPart IV: Hacking Operating Systems\nPractically all operating systems have well-known vulnerabilities that hack-\ners often exploit. This part jumps into hacking the widely used operating\nsystems: Windows and Linux. The hacking methods include scanning your\noperating systems for vulnerabilities and enumerating the specific hosts to\ngain detailed information. This part also includes information on exploiting\n5\nIntroduction\nwell-known vulnerabilities in these operating systems, taking over operating\nsystems remotely, and specific countermeasures that you can implement to\nmake your operating systems more secure. This part includes case studies\non operating system hack attacks.\nPart V: Hacking Applications\nApplication security is gaining more visibility in the information security\narena these days. An increasing number of attacks — which are often able to\nbypass firewalls, intrusion detection systems, and antivirus software — are\naimed directly at various applications. This part discusses hacking specific\nbusiness applications, including coverage of e-mail systems, Voice over\nInternet Protocol (VoIP), web applications, databases, and storage systems,\nalong with practical countermeasures that you can put in place to make your\nsystems more secure.\nPart VI: Ethical Hacking Aftermath\nAfter you perform your ethical hack attacks, what do you do with the infor-\nmation you gather? Shelve it? Show it off? How do you move forward? This\npart answers these questions and more. From developing reports for upper\nmanagement to remediating the security flaws that you discover to establish-\ning procedures for your ongoing ethical hacking efforts, this part brings the\nethical hacking process full circle. This information not only ensures that\nyour effort and time are well spent, but also is evidence that information\nsecurity is an essential element for success in any business that depends on\ncomputers and information technology.\nPart VII: The Part of Tens\nThis part contains tips to help ensure the success of your ethical hacking\nprogram. You find out how to get upper management to buy into your ethi-\ncal hacking program so you can get going and start protecting your systems.\nThis part also includes the top ten ethical hacking mistakes you absolutely\nmust avoid.\nThis part also includes an Appendix that provides a one-stop reference list-\ning of ethical hacking tools and resources. You can find all the links in the\nAppendix on the Hacking For Dummies online Cheat Sheet at www.dummies.\ncom/cheatsheet/hacking.\n6\nHacking For Dummies, 4th Edition\nIcons Used in This Book\nThis icon points out information that is worth committing to memory.\nThis icon points out information that could have a negative impact on your\nethical hacking efforts — so please read it!\nThis icon refers to advice that can help highlight or clarify an important point.\nThis icon points out technical information that is interesting but not vital to\nyour understanding of the topic being discussed.\nWhere to Go from Here\nThe more you know about how external hackers and rogue insiders work\nand how your systems should be tested, the better you’re able to secure\nyour computer systems. This book provides the foundation that you need to\ndevelop and maintain a successful ethical hacking program in order to mini-\nmize business risks.\nKeep in mind that the high-level concepts of ethical hacking won’t change as\noften as the specific information security vulnerabilities you protect against.\nEthical hacking will always remain both an art and a science in a field that’s\never-changing. You must keep up with the latest hardware and software tech-\nnologies, along with the various vulnerabilities that come about month after\nmonth and year after year. When I do have important updates to this book,\nyou can find them at www.dummies.com/go/hackingfdupdates.\nYou won’t find a single best way to hack your systems, so tweak this informa-\ntion to your heart’s content. Happy (ethical) hacking!"
  },
  {
    "input": "What is the difference between ethical hackers and malicious attackers, and what are the key responsibilities and considerations of an ethical hacker?",
    "summary": "This text introduces ethical hacking as a method to identify and fix security vulnerabilities in your systems before malicious attackers do. It explains the difference between ethical hackers, malicious users, and crackers, emphasizing the importance of working with permission and maintaining professionalism. The book also covers the need for proper planning, using the right tools, and following ethical guidelines to ensure security testing is effective and responsible.",
    "output": "Part I\nBuilding the\nFoundation for\nEthical Hacking\nIn this part . . .\nY\nour mission — should you choose to accept it — is\nto find the holes in your network before the bad guys\ndo. This mission will be fun, educational, and most likely\nentertaining. It will certainly be an eye-opening experience.\nThe cool part is that you can emerge as the hero, knowing\nthat your organization will be better protected against\nmalicious hackers and insider attacks and less likely to\nexperience a breach and have its name smeared across\nthe headlines.\nIf you’re new to ethical hacking, this is the place to begin.\nThe chapters in this part get you started with information\non what to do and how to do it when you’re hacking your\nown systems. Oh, and you find out what not to do as well.\nThis information will guide you through building the\nfoundation for your ethical hacking program. This foundation\nwill keep you on the right path and off any one-way\ndead-end streets. This mission is indeed possible — you\njust have to get your ducks in a row first.\nChapter 1\nIntroduction to Ethical Hacking\nIn This Chapter\n▶ Differentiating between ethical hackers and malicious attackers\n▶ Understanding hackers’ and malicious users’ objectives\n▶ Examining how the ethical hacking process came about\n▶ Understanding the dangers that your computer systems face\n▶ Starting to use the ethical hacking process\nT\nhis book is about hacking ethically — the methodology of testing your\ncomputers and networks for security vulnerabilities and plugging the\nholes you find before the bad guys get a chance to exploit them.\nAlthough ethical is an often overused and misunderstood word, Webster’s\nNew World Dictionary defines ethical perfectly for the context of this book\nand the professional security testing techniques that I cover — that is, “con-\nforming to the standards of conduct of a given profession or group.” IT and\ninformation security practitioners are obligated to perform the tests covered\nin this book aboveboard and only after permission has been obtained by the\nowner(s) of the systems. That’s why, in this book’s Introduction, you find a\ndisclaimer. Use your power of choice wisely.\nStraightening Out the Terminology\nMost people have heard of hackers and malicious users. Many have even\nsuffered the consequences of hackers’ criminal actions. So who are these\npeople? And why do you need to know about them? The next few sections\ngive you the lowdown on these attackers.\nIn this book, I use the following terminology:\n10\nPart I: Building the Foundation for Ethical Hacking\n✓ Hackers (or external attackers) try to compromise computers and sen-\nsitive information for ill-gotten gains — usually from the outside — as\nunauthorized users. Hackers go for almost any system they think they\ncan compromise. Some prefer prestigious, well-protected systems, but\nhacking into anyone’s system increases an attacker’s status in hacker\ncircles.\n✓ Malicious users (or internal attackers) try to compromise computers\nand sensitive information from the inside as authorized and “trusted”\nusers. Malicious users go for systems they believe they can compromise\nfor ill-gotten gains or revenge.\nMalicious attackers are, generally speaking, both hackers and malicious\nusers. For the sake of simplicity, I refer to both as hackers and specify\nhacker or malicious user only when I need to drill down further into their\ntools, techniques, and ways of thinking.\n✓ Ethical hackers (or good guys) hack systems to discover vulnerabilities\nto protect against unauthorized access, abuse, and misuse. Information\nsecurity “researchers” typically fall into this category.\nDefining hacker\nHacker has two meanings:\n✓ Traditionally, hackers like to tinker with software or electronic sys-\ntems. Hackers enjoy exploring and learning how computer systems\noperate. They love discovering new ways to work — both mechanically\nand electronically.\n✓ In recent years, hacker has taken on a new meaning — someone who\nmaliciously breaks into systems for personal gain. Technically, these\ncriminals are crackers (criminal hackers). Crackers break into, or crack,\nsystems with malicious intent. The personal gain they seek could be\nfame, profit, and even revenge. They modify, delete, and steal critical\ninformation, often making other people miserable.\nThe good-guy (white hat) hackers don’t like being lumped in the same cat-\negory as the bad-guy (black hat) hackers. (In case you’re curious, the white\nhat and black hat terms come from old Western TV shows in which the good\nguys wore white cowboy hats and the bad guys wore black cowboy hats.)\nGray hat hackers are a little bit of both. Whatever the case, most people have\na negative connotation for the word hacker.\nMany malicious hackers claim that they don’t cause damage but instead help\nothers for the greater good of society. Yeah, right. Malicious hackers are elec-\ntronic miscreants and deserve the consequences of their actions. However,\nbe careful not to confuse criminal hackers with security researchers.\n11\nChapter 1: Introduction to Ethical Hacking\nResearchers not only hack aboveboard and develop the amazing tools that\nyou get to use in your work, but they also take responsible steps to disclose\ntheir findings and publish their code.\nDefining malicious user\nA malicious user — meaning a rogue employee, contractor, intern, or other\nuser who abuses his or her privileges — is a common term in security circles\nand in headlines about information breaches. A long-standing statistic states\nthat insiders carry out 80 percent of all security breaches. Whether this\nnumber is accurate is still questionable, but based on what I’ve seen and\nnumerous annual surveys, undoubtedly an insider problem makes up a large\npart of security breaches.\nThe issue isn’t necessarily users hacking internal systems, but rather users\nwho abuse the computer access privileges they’ve been given. Users ferret\nthrough critical database systems to glean sensitive information, e-mail confi-\ndential client information to the competition or other third parties, or delete\nsensitive files from servers that they probably didn’t need to have access to\nin the first place. There’s also the occasional ignorant insider whose intent\nis not malicious but who still causes security problems by moving, deleting,\nor corrupting sensitive information. Even an innocent “fat-finger” on the key-\nboard can have dire consequences in the business world.\nMalicious users are often the worst enemies of IT and information security\nprofessionals because they know exactly where to go to get the goods and\ndon’t need to be computer savvy to compromise sensitive information. These\nusers have the access they need and the management trusts them — often\nwithout question.\nRecognizing How Malicious Attackers\nBeget Ethical Hackers\nYou need protection from hacker shenanigans; you need (or need to become)\nan ethical hacker. An ethical hacker possesses the skills, mindset, and tools\nof a hacker but is also trustworthy. Ethical hackers perform the hacks as\nsecurity tests for their systems based on how hackers might work.\nEthical hacking — which encompasses formal and methodical penetration\ntesting, white hat hacking, and vulnerability testing — involves the same tools,\ntricks, and techniques that criminal hackers use, but with one major differ-\nence: Ethical hacking is performed with the target’s permission in a profes-\nsional setting. The intent of ethical hacking is to discover vulnerabilities from\n12\nPart I: Building the Foundation for Ethical Hacking\na malicious attacker’s viewpoint to better secure systems. Ethical hacking is\npart of an overall information risk management program that allows for ongo-\ning security improvements. Ethical hacking can also ensure that vendors’\nclaims about the security of their products are legitimate.\nIf you perform ethical hacking tests and want to add another certification to\nyour credentials, you might want to consider becoming a Certified Ethical\nHacker (C|EH), through a certification program sponsored by EC-Council. See\nwww.eccouncil.org for more information. Like the Certified Information\nSystems Security Professional (CISSP), the C|EH certification has become a\nwell-known and respected certification in the industry. It’s even accredited by\nthe American National Standards Institute (ANSI 17024).\nEthical hacking versus auditing\nMany people confuse ethical hacking with security auditing, but there are\nbig differences. Security auditing involves comparing a company’s security\npolicies (or compliance requirements) to what’s actually taking place. The\nintent of security auditing is to validate that security controls exist — typi-\ncally using a risk-based approach. Auditing often involves reviewing business\nprocesses and, in many cases, might not be very technical. I often refer to\nsecurity audits as security checklists because they’re usually based on (you\nguessed it) checklists. Not all audits are this high-level, but the majority of\nthe ones I’ve seen are quite simplistic.\nConversely, ethical hacking focuses on vulnerabilities that can be exploited.\nIt validates that security controls do not exist or are ineffectual at best.\nEthical hacking can be both highly technical and nontechnical, and although\nyou do use a formal methodology, it tends to be a bit less structured than\nformal auditing. If auditing continues to take place in your organization, you\nmight consider integrating the ethical hacking techniques I outline in this\nbook into your IT audit program. They complement one another really well.\nPolicy considerations\nIf you choose to make ethical hacking an important part of your business’s\nrisk management program, you really need to have a documented security\ntesting policy. Such a policy outlines the type of ethical hacking that is done,\nwhich systems (such as servers, web applications, laptops, and so on) are\ntested, and how often the testing is performed. Specific procedures for car-\nrying out your security tests could outline the ethical hacking methodology\nI cover in this book. You might also consider creating a security standards\ndocument that outlines the specific security testing tools that are used and\n13\nChapter 1: Introduction to Ethical Hacking\nspecific dates your systems are tested each year. You might list standard\ntesting dates, such as once per quarter for external systems and biannual\ntests for internal systems — whatever works for your business.\nCompliance and regulatory concerns\nYour own internal policies might dictate how management views secu-\nrity testing, but you also need to consider the state, federal, and global\nlaws and regulations that affect your business. Many of the federal laws\nand regulations in the U.S. — such as the Health Insurance Portability and\nAccountability Act (HIPAA), Health Information Technology for Economic\nand Clinical Health (HITECH) Act, Gramm-Leach-Bliley Act (GLBA), North\nAmerican Electric Reliability Corporation (NERC) CIP requirements, and\nPayment Card Industry Data Security Standard (PCI DSS) — require strong\nsecurity controls and consistent security evaluations. Related international\nlaws such as the Canadian Personal Information Protection and Electronic\nDocuments Act (PIPEDA), the European Union Data Protection Directive,\nand Japan’s Personal Information Protection Act (JPIPA) are no different.\nIncorporating your ethical hacking tests into these compliance requirements\nis a great way to meet the state and federal regulations and beef up your\noverall privacy and security program.\nUnderstanding the Need to\nHack Your Own Systems\nTo catch a thief, you must think like a thief. That’s the basis for ethical hack-\ning. Knowing your enemy is absolutely critical. See Chapter 2 for details\nabout how malicious attackers work.\nThe law of averages works against security. With the increased number of\nhackers and their expanding knowledge, and the growing number of system\nvulnerabilities and other unknowns, eventually, all computer systems and\napplications will be hacked or compromised in some way. Protecting your\nsystems from the bad guys — and not just the generic vulnerabilities that\neveryone knows about — is absolutely critical. When you know hacker tricks,\nyou find out how vulnerable your systems really are.\nHacking preys on weak security practices and undisclosed vulnerabilities.\nFirewalls, encryption, and passwords can create a false feeling of safety.\nThese security systems often focus on high-level vulnerabilities, such as\nbasic access control, without affecting how the bad guys work. Attacking\n14\nPart I: Building the Foundation for Ethical Hacking\nyour own systems to discover vulnerabilities helps make them more secure.\nEthical hacking is a proven method of greatly hardening your systems from\nattack. If you don’t identify weaknesses, it’s only a matter of time before the\nvulnerabilities are exploited.\nAs hackers expand their knowledge, so should you. You must think like them\nand work like them to protect your systems from them. As the ethical hacker,\nyou must know the activities that hackers carry out and how to stop their\nefforts. Knowing what to look for and how to use that information helps you\nto thwart hackers’ efforts.\nYou don’t have to protect your systems from everything. You can’t. The only\nprotection against everything is to unplug your computer systems and lock\nthem away so no one can touch them — not even you. But doing so is not the\nbest approach to information security, and it’s certainly not good for busi-\nness. What’s important is to protect your systems from known vulnerabilities\nand common attacks, which happen to be some of the most overlooked weak-\nnesses in many organizations.\nAnticipating all the possible vulnerabilities you’ll have in your systems and\nbusiness processes is impossible. You certainly can’t plan for all possible\nattacks — especially the unknown ones. However, the more combinations\nyou try and the more you test whole systems instead of individual units, the\nbetter your chances are of discovering vulnerabilities that affect your infor-\nmation systems in their entirety.\nDon’t take ethical hacking too far, though; hardening your systems from\nunlikely attacks makes little sense. For instance, if you don’t have a lot of foot\ntraffic in your office and no internal web server running, you might not have\nas much to worry about as an Internet- hosting provider might have.\nYour overall goals as an ethical hacker are to\n✓ Prioritize your systems so you can focus your efforts on what matters.\n✓ Hack your systems in a nondestructive fashion.\n✓ Enumerate vulnerabilities and, if necessary, prove to management that\nvulnerabilities exist and can be exploited.\n✓ Apply results to remove the vulnerabilities and better secure your systems.\nUnderstanding the Dangers\nYour Systems Face\nIt’s one thing to know generally that your systems are under fire from hack-\ners around the world and malicious users around the office; it’s another to\n15\nChapter 1: Introduction to Ethical Hacking\nunderstand the specific attacks against your systems that are possible. This\nsection offers some well-known attacks but is by no means a comprehensive\nlisting.\nMany information security vulnerabilities aren’t critical by themselves.\nHowever, exploiting several vulnerabilities at the same time can take its toll\non a system. For example, a default Windows OS configuration, a weak SQL\nServer administrator password, or a server hosted on a wireless network\nmight not be major security concerns separately — but a hacker exploit-\ning all three of these vulnerabilities at the same time could lead to sensitive\ninformation disclosure and more.\nComplexity is the enemy of security.\nThe possible vulnerabilities and attacks have grown enormously in recent\nyears because of social media and cloud computing. These two things alone\nhave added immeasurable complexity to your IT environment.\nNontechnical attacks\nExploits that involve manipulating people — end users and even yourself —\nare the greatest vulnerability within any computer or network infrastructure.\nHumans are trusting by nature, which can lead to social engineering exploits.\nSocial engineering is the exploitation of the trusting nature of human beings to\ngain information for malicious purposes. Check out Chapter 5 for more infor-\nmation about social engineering and how to guard your systems against it.\nOther common and effective attacks against information systems are physi-\ncal. Hackers break into buildings, computer rooms, or other areas contain-\ning critical information or property to steal computers, servers, and other\nvaluable equipment. Physical attacks can also include dumpster diving —\nrummaging through trash cans and dumpsters for intellectual property, pass-\nwords, network diagrams, and other information.\nNetwork infrastructure attacks\nHacker attacks against network infrastructures can be easy to accomplish\nbecause many networks can be reached from anywhere in the world via the\nInternet. Some examples of network infrastructure attacks include the following:\n✓ Connecting to a network through an unsecured wireless access point\nattached behind a firewall\n✓ Exploiting weaknesses in network protocols, such as TCP/IP and NetBIOS\n16\nPart I: Building the Foundation for Ethical Hacking\n✓ Flooding a network with too many requests, creating a denial of service\n(DoS) for legitimate requests\n✓ Installing a network analyzer on a network segment and capturing every\npacket that travels across it, revealing confidential information in clear\ntext\nOperating system attacks\nHacking an operating system (OS) is a preferred method of the bad guys. OS\nattacks make up a large portion of hacker attacks simply because every com-\nputer has an operating system and OSes are susceptible to many well-known\nexploits.\nOccasionally, some operating systems that tend to be more secure out of the\nbox — such as the old-but-still-out-there Novell NetWare and OpenBSD —\nare attacked, and vulnerabilities turn up. But hackers often prefer attacking\nWindows and Linux because they’re widely used and better known for their\nweaknesses.\nHere are some examples of attacks on operating systems:\n✓ Exploiting missing patches\n✓ Attacking built-in authentication systems\n✓ Breaking file system security\n✓ Cracking passwords and weak encryption implementations\nApplication and other specialized attacks\nApplications take a lot of hits by hackers. Programs (such as e-mail server\nsoftware and web applications) are often beaten down:\n✓ Hypertext Transfer Protocol (HTTP) and Simple Mail Transfer Protocol\n(SMTP) applications are frequently attacked because most firewalls and\nother security mechanisms are configured to allow full access to these\nservices to and from the Internet.\n✓ Voice over Internet Protocol (VoIP) faces increasing attacks as it finds\nits way into more and more businesses.\n✓ Unsecured files containing sensitive information are scattered through-\nout workstation and server shares. Database systems also contain\nnumerous vulnerabilities that malicious users can exploit.\n17\nChapter 1: Introduction to Ethical Hacking\nObeying the Ethical Hacking\nCommandments\nEthical hackers carry out the same attacks against computer systems, physi-\ncal controls, and people that malicious hackers do. (I introduce those attacks\nin the preceding section.) An ethical hacker’s intent, however, is to highlight\nany associated weaknesses. Parts II through V of this book cover how ethical\nhackers might proceed with these attacks in detail, along with specific coun-\ntermeasures you can implement against attacks against your business.\nTo ensure his or her hacking is truly ethical, every ethical hacker must abide\nby a few basic commandments. The following sections introduce the com-\nmandments you need to follow.\nIf you don’t heed the following commandments, bad things can happen. I’ve\nseen these commandments ignored or forgotten when planning or executing\nethical hacking tests. The results weren’t positive — trust me.\nWorking ethically\nThe word ethical in this context means working with high professional morals\nand principles. Whether you’re performing ethical hacking tests against your\nown systems or for someone who has hired you, everything you do as an\nethical hacker must be aboveboard and must support the company’s goals.\nNo hidden agendas allowed! This also includes reporting all your findings\nregardless of whether or not it will create politic backlash.\nTrustworthiness is the ultimate tenet. The misuse of information is absolutely\nforbidden. That’s what the bad guys do. Let them receive a fine or go to\nprison because of their poor choices.\nRespecting privacy\nTreat the information you gather with the utmost respect. All information\nyou obtain during your testing — from web application flaws to clear text\ne-mail passwords to personally identifiable information and beyond — must\nbe kept private. Don’t snoop into confidential corporate information or\nemployees’ private lives. Nothing good can come of it.\nInvolve others in your process. Employ a watch-the-watcher system that can\nhelp build trust and support for your ethical hacking projects.\n18\nPart I: Building the Foundation for Ethical Hacking\nNot crashing your systems\nOne of the biggest mistakes I’ve seen people make when trying to hack their\nown systems is inadvertently crashing the systems they’re trying to keep\nrunning. Poor planning is the main cause of this mistake. These testers often\nmisunderstand the use and power of the security tools and techniques at\ntheir disposal.\nAlthough it’s not likely, you can create DoS conditions on your systems when\ntesting. Running too many tests too quickly can cause system lockups, data\ncorruption, reboots, and more. This is especially true when testing websites\nand applications. I should know: I’ve done it! Don’t rush and assume that a\nnetwork or specific host can handle the beating that network tools and vul-\nnerability scanners can dish out.\nYou can even accidentally create an account lockout or a system lockout\ncondition by using vulnerability scanners or by socially engineering someone\ninto changing a password, not realizing the consequences of your actions.\nProceed with caution and common sense. It’s still better that you discover\nDoS weaknesses than someone else!\nMany vulnerability scanners can control how many tests are performed on a\nsystem at the same time. These settings are especially handy when you need\nto run the tests on production systems during regular business hours. Don’t\nbe afraid to throttle back your scans. It will take longer to complete your test-\ning, but it can save you a lot of grief.\nUsing the Ethical Hacking Process\nLike practically any IT or security project, you need to plan your ethical hack-\ning. It’s been said that action without planning is at the root of every failure.\nStrategic and tactical issues in the ethical hacking process need to be deter-\nmined and agreed upon. To ensure the success of your efforts, spend time\nup front planning for any amount of testing — from a simple OS password-\ncracking test to an all-out vulnerability assessment of a web application.\nIf you choose to hire a “reformed” hacker to work with you during your testing\nor to obtain an independent perspective, be careful. I cover the pros and cons,\nand the do’s and don’ts associated with hiring trusted and no-so-trusted ethi-\ncal hacking resources in Chapter 18.\n19\nChapter 1: Introduction to Ethical Hacking\nFormulating your plan\nGetting approval for ethical hacking is essential. Make sure that what you’re\ndoing is known and visible — at least to the decision makers. Obtaining spon-\nsorship of the project is the first step. Sponsorship could come from your\nmanager, an executive, your client, or even yourself if you’re the boss. You\nneed someone to back you up and sign off on your plan. Otherwise, your test-\ning might be called off unexpectedly if someone claims you were never autho-\nrized to perform the tests.\nThe authorization can be as simple as an internal memo or an e-mail from\nyour boss when you perform these tests on your own systems. If you’re test-\ning for a client, have a signed contract stating the client’s support and autho-\nrization. Get written approval on this sponsorship as soon as possible to\nensure that none of your time or effort is wasted. This documentation is your\nGet Out of Jail Free card if anyone such as your Internet Service Provider\n(ISP), cloud service provider, or related vendor questions what you’re doing,\nor worse, if the authorities come calling. Don’t laugh — it wouldn’t be the\nfirst time it happened.\nOne slip can crash your systems — not necessarily what anyone wants. You\nneed a detailed plan, but that doesn’t mean you need volumes of testing pro-\ncedures to make things overly complex. A well-defined scope includes the\nfollowing information:\n✓ Specific systems to be tested: When selecting systems to test, start with\nthe most critical systems and processes or the ones you suspect are the\nmost vulnerable. For instance, you can test server OS passwords, test\nan Internet-facing web application, or attempt social engineering attacks\nbefore drilling down into all your systems.\n✓ Risks involved: Have a contingency plan for your ethical hacking pro-\ncess in case something goes awry. What if you’re assessing your firewall\nor web application and you take it down? This can cause system unavail-\nability, which can reduce system performance or employee productivity.\nEven worse, it might cause loss of data integrity, loss of data itself, and\neven bad publicity. It’ll most certainly tick off a person or two and make\nyou look bad.\nHandle social engineering and DoS attacks carefully. Determine how\nthey affect the people and systems you test.\n✓ Dates the tests will be performed and your overall timeline: Determining\nwhen the tests are performed is something that you must think long and\n20\nPart I: Building the Foundation for Ethical Hacking\nhard about. Do you perform tests during normal business hours? How\nabout late at night or early in the morning so that production systems\naren’t affected? Involve others to make sure they approve of your timing.\nYou may get pushback and suffer DoS-related consequences, but the\nbest approach is an unlimited attack, where any type of test is possible\nat any time of day. The bad guys aren’t breaking into your systems\nwithin a limited scope, so why should you? Some exceptions to this\napproach are performing DoS attacks, social engineering, and physical\nsecurity tests.\n✓ Whether or not you intend to be detected: One of your goals might be\nto perform the tests without being detected. For example, you might\nperform your tests on remote systems or on a remote office, and you\nmight not want the users to be aware of what you’re doing. Otherwise,\nthe users might catch on to you and be on their best behavior — instead\nof their normal behavior.\n✓ Knowledge of the systems you have before you start testing: You don’t\nneed extensive knowledge of the systems you’re testing — just a basic\nunderstanding. This basic understanding helps protect you and the\ntested systems.\nUnderstanding the systems you’re testing shouldn’t be difficult if you’re\nhacking your own in-house systems. If you’re testing a client’s systems,\nyou may have to dig deeper. In fact, I’ve only had one or two clients ask\nfor a fully blind assessment. Most IT managers and others responsible\nfor security are scared of these assessments — and they can take more\ntime, cost more, and be less effective. Base the type of test you perform\non your organization’s or client’s needs.\n✓ Actions you will take when a major vulnerability is discovered: Don’t\nstop after you find one or two security holes. Keep going to see what\nelse you can discover. I’m not saying to keep hacking until the end of\ntime or until you crash all your systems; simply pursue the path you’re\ngoing down until you just can’t hack it any longer (pun intended). If\nyou haven’t found any vulnerabilities, you haven’t looked hard enough.\nThey’re there. If you uncover something big, you need to share that\ninformation with the key players (developers, DBAs, IT managers, and so\non) as soon as possible to plug the hole before it’s exploited.\n✓ The specific deliverables: This includes vulnerability scanner reports\nand your own distilled report outlining the important vulnerabilities to\naddress, along with countermeasures to implement.\nSelecting tools\nAs with any project, if you don’t have the right tools for ethical hacking, you\nmight have difficulty accomplishing the task effectively. Having said that, just\n21\nChapter 1: Introduction to Ethical Hacking\nbecause you use the right tools doesn’t mean that you’ll discover all the right\nvulnerabilities. Experience counts.\nKnow the personal and technical limitations. Many vulnerability scanners\ngenerate false positives and negatives (incorrectly identifying vulnerabilities).\nOthers just skip right over vulnerabilities altogether. In certain situations, like\nwhen testing web applications, you might need to run multiple vulnerability\nscanners to find the most vulnerabilities.\nMany tools focus on specific tests, and no tool can test for everything. For\nthe same reason that you wouldn’t drive a nail with a screwdriver, don’t\nuse a port scanner to uncover specific network vulnerabilities. This is why\nyou need a set of specific tools for the task. The more (and better) tools you\nhave, the easier your ethical hacking efforts are.\nMake sure you’re using the right tool for the task:\n✓ To crack passwords, you need cracking tools, such as ophcrack and\nProactive Password Auditor.\n✓ For an in-depth analysis of a web application, a web vulnerability scan-\nner (such as Acunetix Web Vulnerability Scanner or NTOSpider) is more\nappropriate than a network analyzer (such as Wireshark).\nWhen selecting the right security tool for the task, ask around. Get advice\nfrom your colleagues and from other people online via Google, LinkedIn (www.\nlinkedin.com), and Twitter (http://twitter.com). Hundreds, if not thou-\nsands, of tools can be used for ethical hacking. The following list runs down\nsome of my favorite commercial, freeware, and open source security tools:\n✓ Cain & Abel\n✓ OmniPeek\n✓ QualysGuard\n✓ WebInspect\n✓ ophcrack\n✓ Metasploit\n✓ GFI LanGuard\n✓ CommView for WiFi\nI discuss these tools and many others in Parts II through V when I go into the\nspecific hack attacks. The Appendix contains a more comprehensive listing\nof these tools for your reference.\n22\nPart I: Building the Foundation for Ethical Hacking\nThe capabilities of many security and hacking tools are often misunderstood.\nThis misunderstanding has cast a negative light on otherwise excellent and\nlegitimate tools. Part of this misunderstanding is due to the complexity of\nmany security testing tools. Whichever tools you use, familiarize yourself\nwith them before you start using them. That way, you’re prepared to use the\ntools in the ways they’re intended to be used. Here are ways to do that:\n✓ Read the readme and/or online Help files and FAQs.\n✓ Study the user guides.\n✓ Use the tools in a lab or test environment.\n✓ Consider formal classroom training from the security tool vendor or\nanother third-party training provider, if available.\nLook for these characteristics in tools for ethical hacking:\n✓ Adequate documentation\n✓ Detailed reports on the discovered vulnerabilities, including how they\nmight be exploited and fixed\n✓ General industry acceptance\n✓ Availability of updates and support\n✓ High-level reports that can be presented to managers or nontechnical\ntypes (This is especially important in today’s audit- and compliance-\ndriven world!)\nThese features can save you a ton of time and effort when you’re performing\nyour tests and writing your final reports.\nExecuting the plan\nGood ethical hacking takes persistence. Time and patience are important.\nAlso, be careful when you’re performing your ethical hacking tests. A crimi-\nnal on your network or a seemingly benign employee looking over your\nshoulder might watch what’s going on and use this information against you\nor your business.\nMaking sure that no hackers are on your systems before you start isn’t prac-\ntical. Be sure you keep everything as quiet and private as possible. This is\nespecially critical when transmitting and storing your test results. If pos-\nsible, encrypt any e-mails and files containing sensitive test information with\nPretty Good Privacy (PGP) (www.symantec.com/products-solutions/\nfamilies/?fid=encryption), an encrypted Zip file, or a similar technology.\n23\nChapter 1: Introduction to Ethical Hacking\nYou’re now on a reconnaissance mission. Harness as much information as\npossible about your organization and systems, much like malicious hackers\ndo. Start with a broad view and narrow your focus:\n1. Search the Internet for your organization’s name, your computer and\nnetwork system names, and your IP addresses.\nGoogle is a great place to start.\n2. Narrow your scope, targeting the specific systems you’re testing.\nWhether you’re assessing physical security structures or web applica-\ntions, a casual assessment can turn up a lot of information about your\nsystems.\n3. Further narrow your focus with a more critical eye. Perform actual scans\nand other detailed tests to uncover vulnerabilities on your systems.\n4. Perform the attacks and exploit any vulnerabilities you find if that’s\nwhat you choose to do.\nCheck out Chapter 4 to find out more information and tips on using this process.\nEvaluating results\nAssess your results to see what you’ve uncovered, assuming that the vulner-\nabilities haven’t been made obvious before now. This is where knowledge\ncounts. Your skill at evaluating the results and correlating the specific vulner-\nabilities discovered will get better with practice. You’ll end up knowing your\nsystems much better than anyone else. This makes the evaluation process\nmuch simpler moving forward.\nSubmit a formal report to management or to your client, outlining your results\nand any recommendations you want to share. Keep these parties in the loop\nto show that your efforts and their money are well spent. Chapter 16 describes\nthe ethical hacking reporting process.\nMoving on\nWhen you finish your ethical hacking tests, you (or your client) still need\nto implement your recommendations to make sure the systems are secure.\nOtherwise, all the time, money, and effort spent on ethical hacking goes to\nwaste. Sadly, I see this very scenario fairly often.\n24\nPart I: Building the Foundation for Ethical Hacking\nNew security vulnerabilities continually appear. Information systems con-\nstantly change and become more complex. New hacker exploits and security\nvulnerabilities are regularly uncovered. Vulnerability scanners get better and\nbetter. You’ll probably even discover new ones yourself! Security tests are a\nsnapshot of the security posture of your systems. At any time, everything can\nchange, especially after upgrading software, adding computer systems, or\napplying patches. Plan to test regularly and consistently (for example, once a\nmonth, once a quarter, or biannually). Chapter 18 covers managing security\nchanges."
  },
  {
    "input": "What are the different types of hackers and their motivations, and how does understanding these help in preparing for ethical hacking tests?",
    "summary": "This chapter explores the mindset of hackers and malicious users, highlighting their motivations, methods, and the challenges they pose to information security. It explains that hackers can range from script kiddies to advanced individuals with criminal intent, and that understanding their behavior is crucial for ethical hacking. The text also emphasizes that hackers often operate with a sense of curiosity and individualism, and that their actions can be difficult to detect due to their ability to exploit weaknesses and maintain anonymity.",
    "output": "Chapter 2\nCracking the Hacker Mindset\nIn This Chapter\n▶ Understanding the enemy\n▶ Profiling hackers and malicious users\n▶ Understanding why attackers do what they do\n▶ Examining how attackers go about their business\nB\nefore you start assessing the security of your systems, you may want to\nknow something about the people you’re up against. Many information\nsecurity product vendors and other professionals claim that you should pro-\ntect your systems from the bad guys — both internal and external. But what\ndoes this mean? How do you know how these people think and work?\nKnowing what hackers and malicious users want helps you understand how\nthey work. Understanding how they work helps you to look at your informa-\ntion systems in a whole new way. In this chapter, I describe the challenges\nyou face from hackers, the people actually doing the misdeeds, and their\nmotivations and methods. This understanding better prepares you for your\nethical hacking tests.\nWhat You’re Up Against\nThanks to sensationalism in the media, public perception of hacker has trans-\nformed from harmless tinkerer to malicious criminal. Nevertheless, hackers\noften state that the public misunderstands them, which is mostly true. It’s\neasy to prejudge what you don’t understand. Unfortunately, many hacker\nstereotypes are based on misunderstanding rather than fact, and that misun-\nderstanding fuels a constant debate.\nHackers can be classified by both their abilities and their underlying moti-\nvations. Some are skilled, and their motivations are benign; they’re merely\nseeking more knowledge. At the other end of the spectrum, hackers with\nmalicious intent seek some form of personal gain. Unfortunately, the negative\naspects of hacking usually overshadow the positive aspects and promote the\nnegative stereotypes.\n26\nPart I: Building the Foundation for Ethical Hacking\nHistorically, hackers hacked for the pursuit of knowledge and the thrill of the\nchallenge. Script kiddies (hacker wannabes with limited skills) aside, hackers\nare adventurous and innovative thinkers and are always devising new ways\nto exploit computer vulnerabilities. (For more on script kiddies, see the sec-\ntion, “Who Breaks into Computer Systems,” later in this chapter.) Hackers\nsee what others often overlook. They wonder what would happen if a cable\nwas unplugged, a switch was flipped, or lines of code were changed in a pro-\ngram. These old-school hackers are like Tim “The Toolman” Taylor — Tim\nAllen’s character on the classic sitcom Home Improvement — thinking they\ncan improve electronic and mechanical devices by “rewiring them.” More\nrecent evidence shows that many hackers may also hack for political, social,\ncompetitive, and even financial purposes, so times are changing.\nWhen they were growing up, hackers’ rivals were monsters and villains on\nvideo game screens. Now hackers see their electronic foes as only that —\nelectronic. Hackers who perform malicious acts don’t really think about the\nfact that human beings are behind the firewalls, wireless networks, and web\napplications they’re attacking. They ignore that their actions often affect\nthose human beings in negative ways, such as jeopardizing their job security\nand putting their personal safety at risk.\nOn the flip side, odds are good that you have at least a handful of employees,\ncontractors, interns, or consultants who intend to compromise sensitive\ninformation on your network for malicious purposes. These people don’t\nhack in the way people normally suppose. Instead, they root around in files\non server shares; delve into databases they know they shouldn’t be in; and\nsometimes steal, modify, and delete sensitive information to which they have\naccess. This behavior is often very hard to detect — especially given the\nwidespread belief by management that users can and should be trusted to do\nthe right things. This activity is perpetuated if these users passed their crimi-\nnal background and credit checks before they were hired. Past behavior is\noften the best predictor of future behavior, but just because someone has a\nclean record and authorization to access sensitive systems doesn’t mean he\nor she won’t do anything bad. Criminals have to start somewhere!\nAs negative as breaking into computer systems often can be, hackers and\nmalicious users play key roles in the advancement of technology. In a world\nwithout hackers, odds are good that the latest intrusion prevention technol-\nogy, data leakage protection, or vulnerability scanning tools would not exist.\nSuch a world may not be bad, but technology does keep security profession-\nals employed and keep the field moving forward. Unfortunately, the technical\nsecurity solutions can’t ward off all malicious attacks and unauthorized use\nbecause hackers and (sometimes) malicious users are usually a few steps\nahead of the technology designed to protect against their wayward actions.\nHowever you view the stereotypical hacker or malicious user, one thing is cer-\ntain: Somebody will always try to take down your computer systems and com-\npromise information by poking and prodding where he or she shouldn’t, through\ndenial of service attacks or by creating and launching malware. You must take\nthe appropriate steps to protect your systems against this kind of intrusion.\n27\nChapter 2: Cracking the Hacker Mindset\nThinking like the bad guys\nMalicious attackers often think and work just ✓ Using unauthorized software that would\nlike thieves, kidnappers, and other organized otherwise be blocked at the firewall by\ncriminals you hear about in the news every changing the default TCP port that it runs on\nday. The smart ones constantly devise ways to\n✓ Setting up a wireless “evil twin” near a\nfly under the radar and exploit even the small-\nlocal Wi-Fi hotspot to entice unsuspect-\nest weaknesses that lead them to their target.\ning Internet surfers onto a rogue network\nThe following are examples of how hackers\nwhere their information can be captured\nand malicious users think and work. This list\nand easily manipulated\nisn’t intended to highlight specific exploits that I\ncover in this book or tests that I recommend you ✓ Using an overly trusting colleague’s user\ncarry out, but rather to demonstrate the context ID and password to gain access to sensi-\nand approach of a malicious mindset: tive information that would otherwise be\nhighly improbable to obtain\n✓ Evading an intrusion prevention system by\nchanging their MAC address or IP address ✓ Unplugging the power cord or Ethernet\nevery few minutes to get further into a net- connection to a networked security\nwork without being completely blocked camera that monitors access to the com-\nputer room or other sensitive areas and\n✓ Exploiting a physical security weakness\nsubsequently gaining unmonitored access\nby being aware of offices that have already\nbeen cleaned by the cleaning crew and are ✓ Performing SQL injection or password\nunoccupied (and thus easy to access with cracking against a website via a neigh-\nlittle chance of getting caught), which might bor’s unprotected wireless network in order\nbe made obvious by, for instance, the fact to hide the malicious user’s own identity\nthat the office blinds are opened and the\nMalicious hackers operate in countless ways,\ncurtains are pulled shut in the early morning\nand this list presents only a small number of\n✓ Bypassing web access controls by chang- the techniques hackers may use. Information\ning a malicious site’s URL to its dotted security professionals need to think and work\ndecimal IP address equivalent and then this way in order to really dig in and find secu-\nconverting it to hexadecimal for use in the rity vulnerabilities that may not otherwise be\nweb browser uncovered.\nWho Breaks into Computer Systems\nComputer hackers have been around for decades. Since the Internet became\nwidely used in the 1990s, the mainstream public has started to hear more and\nmore about hacking. Only a few hackers, such as John Draper (also known\nas Captain Crunch) and Kevin Mitnick, are really well known. Many more\nunknown hackers are looking to make a name for themselves. They’re the\nones you have to look out for.\nIn a world of black and white, describing the typical hacker is easy. A gen-\neral stereotype of a hacker is an antisocial, pimply faced, teenage boy. But\n28\nPart I: Building the Foundation for Ethical Hacking\nthe world has many shades of gray and many types of hackers. Hackers are\nunique individuals, so an exact profile is hard to outline. The best broad\ndescription of hackers is that all hackers aren’t equal. Each hacker has his\nor her own unique motives, methods, and skills. Hacker skill levels fall into\nthree general categories:\n✓ Script kiddies: These are computer novices who take advantage of the\nhacker tools, vulnerability scanners, and documentation available free\non the Internet but who don’t have any real knowledge of what’s really\ngoing on behind the scenes. They know just enough to cause you head-\naches but typically are very sloppy in their actions, leaving all sorts of\ndigital fingerprints behind. Even though these guys are the stereotypical\nhackers that you hear about in the news media, they often need only\nminimal skills to carry out their attacks.\n✓ Criminal hackers: These are skilled criminal experts and nation states\nwho write some of the hacking tools, including the scripts and other pro-\ngrams that the script kiddies and ethical hackers use. These folks also\nwrite such malware as viruses and worms. They can break into systems\nand cover their tracks. They can even make it look like someone else\nhacked their victims’ systems.\nAdvanced hackers are often members of collectives that prefer to\nremain nameless. These hackers are very secretive and share informa-\ntion with their subordinates (lower-ranked hackers in the collectives)\nonly when they are deemed worthy. Typically, for lower-ranked hackers\nto be considered worthy, they must possess some unique information or\nprove themselves through a high-profile hack. These hackers are argu-\nably some of your worst enemies in information security. (Okay, maybe\nthey’re not as bad as untrained and careless users, but close.)\n✓ Security researchers: These uber-hackers are highly technical and pub-\nlicly known IT professionals who not only monitor and track computer,\nnetwork, and application vulnerabilities but also write the tools and\nother code to exploit them. If these guys didn’t exist, ethical hackers\nwouldn’t have much in the way of open source and even certain com-\nmercial security-testing tools. I follow many of these security research-\ners on a weekly basis via their blogs, Twitter, and articles, and you\nshould, too. Following the progress of these security researchers helps\nyou stay up-to-date on both vulnerabilities and the latest and greatest\nsecurity tools. I list the tools and related resources from various secu-\nrity researchers in Appendix A and throughout the book.\nThere are good-guy (white hat) and bad-guy (black hat) hackers. Gray hat\nhackers are a little bit of both. There are also blue-hat hackers who are invited\nby software vendors to find security flaws in their systems.\nA recent study at the Black Hat security conference found that everyday IT\nprofessionals even engage in malicious and criminal activity against others.\n29\nChapter 2: Cracking the Hacker Mindset\nAnd people wonder why IT doesn’t get the respect it deserves! Perhaps this\ngroup will evolve into a fourth general category of hackers in the coming\nyears.\nRegardless of age and complexion, hackers possess curiosity, bravado, and\noften very sharp minds.\nPerhaps more important than a hacker’s skill level is his or her motivation:\n✓ Hacktivists try to disseminate political or social messages through their\nwork. A hacktivist wants to raise public awareness of an issue. In many\nsituations, criminal hackers will try to take you down if you express a\nview that’s contrary to theirs. Examples of hacktivism are the websites\nthat were defaced with the Free Kevin messages that promoted freeing\nKevin Mitnick from prison for his famous hacking escapades. Others\ncases of hacktivism include messages about legalizing drugs, protests\nagainst the war in Iraq, protests centered around wealth envy and big\ncorporations, and just about any other social and political issue you can\nthink of.\n✓ Cyberterrorists (both organized and unorganized) attack government\ncomputers or public utility infrastructures, such as power grids and\nair-traffic control towers. They crash critical systems or steal classified\ngovernment information. Countries take the threats these cyberterror-\nists pose so seriously that many mandate information security controls\nin crucial industries, such as the power industry, to protect essential\nsystems against these attacks.\n✓ Hackers for hire are part of organized crime on the Internet. Many of\nthese hackers hire out themselves or their botnets for money — and lots\nof it!\nThese criminal hackers are in the minority, so don’t think that you’re up\nagainst millions of these villains. Like the spam kings of the world, many of the\nnefarious acts from members of collectives that prefer to remain nameless are\ncarried out by a small number of criminals. Many other hackers just love to\ntinker and only seek knowledge of how computer systems work. One of your\ngreatest threats works inside your building and has an access badge to the\nbuilding and a valid network account, so don’t discount the insider threat.\nWhy They Do It\nHackers hack because they can. Period. Okay, it goes a little deeper than that.\nHacking is a casual hobby for some hackers — they hack just to see what\nthey can and can’t break into, usually testing only their own systems. These\naren’t the folks I write about in this book. I focus on those hackers who are\n30\nPart I: Building the Foundation for Ethical Hacking\nobsessive about gaining notoriety or defeating computer systems, and those\nwho have criminal intentions.\nMany hackers get a kick out of outsmarting corporate and government IT and\nsecurity administrators. They thrive on making headlines and being notori-\nous cyberoutlaws. Defeating an entity or possessing knowledge that few\nother people have makes them feel better about themselves. Many of these\nhackers feed off the instant gratification of exploiting a computer system.\nThey become obsessed with this feeling. Some hackers can’t resist the adren-\naline rush they get from breaking into someone else’s systems. Often, the\nmore difficult the job is, the greater the thrill is for hackers.\nHackers often promote individualism — or at least the decentralization of\ninformation — because many believe that all information should be free.\nThey think cyberattacks are different from attacks in the real world. Hackers\nmay easily ignore or misunderstand their victims and the consequences of\nhacking. They don’t think long-term about the choices they’re making today.\nMany hackers say they don’t intend to harm or profit through their bad\ndeeds, a belief that helps them justify their work. Many don’t look for tangible\npayoffs. Just proving a point is often a sufficient reward for them.\nThe knowledge that malicious attackers gain and the self-esteem boost that\ncomes from successful hacking might become an addiction and a way of life.\nSome attackers want to make your life miserable, and others simply want to\nbe seen or heard. Some common motives are revenge, basic bragging rights,\ncuriosity, boredom, challenge, vandalism, theft for financial gain, sabotage,\nblackmail, extortion, corporate espionage, and just generally speaking out\nagainst “the man.” Hackers regularly cite these motives to explain their\nbehavior, but these motivations tend to be cited more commonly during dif-\nficult economic conditions.\nMalicious users inside your network may be looking to gain information to\nhelp them with personal financial problems, to give them a leg up over a\ncompetitor, to seek revenge on their employers, to satisfy their curiosity, or\nto relieve boredom.\nMany business owners and managers — even some network and security\nadministrators — believe that they don’t have anything that a hacker wants or\nthat hackers can’t do much damage if they break in. They’re sorely mistaken.\nThis dismissive kind of thinking helps support the bad guys and promote\ntheir objectives. Hackers can compromise a seemingly unimportant system to\naccess the network and use it as a launching pad for attacks on other systems,\nand many people would be none the wiser because they don’t have the proper\ncontrols to prevent and detect malicious use.\nRemember that hackers often hack just because they can. Some hackers go\nfor high-profile systems, but hacking into anyone’s system helps them fit into\nhacker circles. Hackers exploit many people’s false sense of security and go for\nalmost any system they think they can compromise. Electronic information can\n31\nChapter 2: Cracking the Hacker Mindset\nbe in more than one place at the same time, so if hackers merely copy informa-\ntion from the systems they break into, it’s tough to prove that hackers possess\nthat information.\nSimilarly, hackers know that a simple defaced web page — however easily\nattacked — is not good for someone else’s business. Hacked sites can often\npersuade management and other nonbelievers to address information threats\nand vulnerabilities.\nMany recent studies have revealed that most security flaws are very basic\nin nature. That’s exactly what I see in my information security assessments.\nI call these basic flaws the low-hanging fruit of the network just waiting to be\nexploited. Computer breaches continue to get easier to execute yet harder to\nprevent for several reasons:\n✓ Widespread use of networks and Internet connectivity\n✓ Anonymity provided by computer systems working over the Internet\nand often on the internal network (because, effectively, logging and\nespecially log monitoring rarely takes place)\n✓ Greater number and availability of hacking tools\n✓ Large number of open wireless networks that help hackers cover their\ntracks\n✓ Greater complexity and size of the codebase in the applications and\ndatabases being developed today\n✓ Computer-savvy children\n✓ Unlikelihood that attackers will be investigated or prosecuted if caught\nA malicious hacker only needs to find one security hole whereas IT profession-\nals and business owners must find and block them all.\nAlthough many attacks go unnoticed or unreported, criminals who are\ndiscovered are often not pursued or prosecuted. When they’re caught,\nhackers often rationalize their services as being altruistic and a benefit to\nsociety: They’re merely pointing out vulnerabilities before someone else\ndoes. Regardless, if hackers are caught and prosecuted, the “fame and glory”\nreward system that hackers thrive on is threatened.\nThe same goes for malicious users. Typically, their shenanigans go unno-\nticed, but if they’re caught, the security breach may be kept hush-hush in the\nname of shareholder value or not wanting to ruffle any customer or business\npartner feathers. However, recent information security and privacy laws and\nregulations are changing this because in most situations breach notification\nis required. Sometimes, the person is fired or asked to resign. Although public\ncases of internal breaches are becoming more common, these cases don’t give\na full picture of what’s really taking place in the average organization.\n32\nPart I: Building the Foundation for Ethical Hacking\nHacking in the name of liberty?\nMany hackers exhibit behaviors that contradict own rights back from anyone who threatens\ntheir stated purposes — that is, they fight for them. It’s live and let live gone awry.\ncivil liberties and want to be left alone, while\nThe case involving copyrighted materials and\nat the same time, they love prying into the busi-\nthe Recording Industry Association of America\nness of others and controlling them in any way\n(RIAA) is a classic example. Hackers have gone\npossible. Many hackers call themselves civil\nto great lengths to prove a point, from defac-\nlibertarians and claim to support the principles\ning the websites of organizations that support\nof personal privacy and freedom. However,\ncopyrights to illegally sharing music by using\nthey contradict their words by intruding on the\notherwise legal mediums like Kazaa, Gnutella,\nprivacy and property of others. They often steal\nand Morpheus. Go figure.\nthe property and violate the rights of others, but\nare willing to go to great lengths to get their\nWhether or not they want to, most executives now have to deal with all\nthe state, federal, and international laws and regulations that require noti-\nfications of breaches or suspected breaches of sensitive information. This\napplies to external hacks, internal breaches, and even something as seem-\ningly benign as a lost mobile device or backup tapes. Appendix A contains\nURLs to the sites giving information security and privacy laws and regula-\ntions that may affect your business.\nPlanning and Performing Attacks\nAttack styles vary widely:\n✓ Some hackers prepare far in advance of an attack. They gather small\nbits of information and methodically carry out their hacks, as I outline in\nChapter 4. These hackers are the most difficult to track.\n✓ Other hackers — usually the inexperienced script kiddies — act before\nthey think through the consequences. Such hackers may try, for example,\nto telnet directly into an organization’s router without hiding their identi-\nties. Other hackers may try to launch a DoS attack against a Microsoft\nExchange server without first determining the version of Exchange or the\npatches that are installed. These hackers usually are caught.\n✓ Malicious users are all over the map. Some can be quite savvy based\non their knowledge of the network and of how IT operates inside the\norganization. Others go poking and prodding around into systems they\nshouldn’t be in — or shouldn’t have had access to in the first place —\nand often do stupid things that lead security or network administrators\nback to them.\n33\nChapter 2: Cracking the Hacker Mindset\nAlthough the hacker underground is a community, many of the hackers —\nespecially advanced hackers — don’t share information with the crowd. Most\nhackers do much of their work independently in order to remain anonymous.\nHackers who network with one another use private message boards, anony-\nmous e-mail addresses, hacker websites, and Internet Relay Chat (IRC). You\ncan log in to many of these sites to see what hackers are doing.\nWhatever approach they take, most malicious attackers prey on ignorance.\nThey know the following aspects of real-world security:\n✓ The majority of computer systems aren’t managed properly. The\ncomputer systems aren’t properly patched, hardened, or monitored.\nAttackers can often fly below the radar of the average firewall, an intru-\nsion prevention system (IPS), or an access control system. This is espe-\ncially true for malicious users whose actions are often not monitored at\nall while, at the same time, they have full access to the very environment\nthey can exploit.\n✓ Most network and security administrators simply can’t keep up with\nthe deluge of new vulnerabilities and attack methods. These people\noften have too many tasks to stay on top of and too many other fires to\nput out. Network and security administrators may also fail to notice or\nrespond to security events because of poor time management and goal\nsetting, but that’s for another discussion.\n✓ Information systems grow more complex every year. This is yet\nanother reason why overburdened administrators find it difficult to\nknow what’s happening across the wire and on the hard drives of all\ntheir systems. Mobile devices such as laptops, tablets, and phones are\nmaking things exponentially worse.\nTime is an attacker’s friend — and it’s almost always on his or her side. By\nattacking through computers rather than in person, hackers have more con-\ntrol over the timing for their attacks:\n✓ Attacks can be carried out slowly, making them hard to detect.\n✓ Attacks are frequently carried out after typical business hours, often\nin the middle of the night, and from home, in the case of malicious users.\nDefenses are often weaker after hours — with less physical security and\nless intrusion monitoring — when the typical network administrator (or\nsecurity guard) is sleeping.\nIf you want detailed information on how some hackers work or want to keep\nup with the latest hacker methods, several magazines are worth checking out:\n✓ 2600 — The Hacker Quarterly magazine (www.2600.com)\n✓ (IN)SECURE Magazine (www.net-security.org/insecuremag.php)\n34\nPart I: Building the Foundation for Ethical Hacking\n✓ Hackin9 (http://hakin9.org)\n✓ PHRACK (www.phrack.org/archives/)\nMalicious attackers usually learn from their mistakes. Every mistake moves\nthem one step closer to breaking into someone’s system. They use this\nknowledge when carrying out future attacks. You, as an ethical hacker, need\nto do the same.\nMaintaining Anonymity\nSmart attackers want to remain as low-key as possible. Covering their tracks\nis a priority, and many times their success depends on them remaining\nunnoticed. They want to avoid raising suspicion so they can come back and\naccess the systems in the future. Hackers often remain anonymous by using\none of the following resources:\n✓ Borrowed or stolen remote desktop and VPN accounts from friends or\nprevious employers\n✓ Public computers at libraries, schools, or kiosks at the local mall\n✓ Open wireless networks\n✓ Internet proxy servers or anonymizer services\n✓ Anonymous or disposable e-mail accounts from free e-mail services\n✓ Open e-mail relays\n✓ Infected computers — also called zombies or bots — at other organizations\n✓ Workstations or servers on the victim’s own network\nIf hackers use enough stepping stones for their attacks, they are hard to\ntrace. Luckily, one of your biggest concerns — the malicious user — generally\nisn’t quite as savvy. That is, unless the user is an actual network or security\nadministrator."
  },
  {
    "input": "What are the key steps and considerations in developing a comprehensive ethical hacking plan?",
    "summary": "Ethical hacking requires a clear, structured plan to ensure effectiveness and professionalism. This includes setting goals, defining testing scope, establishing standards, and selecting appropriate tools. Approval from management or clients is essential before starting. Additionally, ethical hackers should consider the type of assessment (blind or knowledge-based) and how to notify stakeholders to maintain a positive approach. The methodology involves gathering information, scanning networks, identifying vulnerabilities, and testing systems to find weaknesses that could be exploited by malicious actors. Tools like Netcraft and QualysGuard can help in this process, but it's important to validate findings and understand the tools' configurations to avoid unintended consequences.",
    "output": "Chapter 3\nDeveloping Your Ethical\nHacking Plan\nIn This Chapter\n▶ Setting ethical hacking goals\n▶ Selecting which systems to test\n▶ Developing your ethical hacking testing standards\n▶ Examining hacking tools\nA\ns an information security professional, you must plan your ethical hack-\ning efforts before you start. A detailed plan doesn’t mean that your test-\ning must be elaborate. It just means that you’re clear and concise about what\nto do. Given the seriousness of ethical hacking, you should make this process\nas structured as possible.\nEven if you test only a single web application or workgroup of computers,\nbe sure to take the critical steps of establishing your goals, defining and\ndocumenting the scope of what you’ll be testing, determining your testing\nstandards, and gathering and familiarizing yourself with the proper tools for\nthe task. This chapter covers these steps to help you create a positive ethical\nhacking environment so you can set up for success.\nAlways make sure you have approval from management, executives, or your\nclients before you start implementing your ethical hacking plan.\n36\nPart I: Building the Foundation for Ethical Hacking\nDo you need insurance?\nIf you’re an independent consultant or have a insurance coverage. This kind of insurance can\nbusiness with a team of ethical hackers, con- be expensive but will be well worth the expense\nsider getting professional liability insurance if something goes awry and you need protec-\n(also known as errors and omissions insurance) tion. Many customers even require the insur-\nfrom an agent who specializes in business ance before they’ll hire you to do the work.\nEstablishing Your Goals\nYou can’t hit a target you can’t see. Your ethical hacking plan needs goals.\nThe main goal of ethical hacking is to find vulnerabilities in your systems so\nyou can make them more secure. You can then take this a step further:\n✓ Define more specific goals. Align these goals with your business objec-\ntives. What are you and the management trying to get from this process?\nWhat performance criteria will you use to ensure you’re getting the most\nout of your testing?\n✓ Create a specific schedule with start and end dates as well as the times\nyour testing is to take place. These dates and times are critical compo-\nnents of your overall plan.\nBefore you begin any ethical hacking, you absolutely, positively need every-\nthing in writing and approved. Document everything and involve management\nin this process. Your best ally in your ethical hacking efforts is a manager who\nsupports what you’re doing.\nThe following questions can start the ball rolling when you define the goals\nfor your ethical hacking plan:\n✓ Does ethical hacking support the mission of the business and its IT\nand security departments?\n✓ What business goals are met by performing ethical hacking? These\ngoals may include the following:\n• Prepping for the internationally accepted security standard of ISO/\nIEC 27002:2005\n• Working through Statement on Standards for Attestation\nEngagements (SSAE) 16 audits\n• Meeting federal regulations such as HIPAA, SOX, or PCI DSS\n• Meeting contractual requirements of clients or business partners\n• Maintaining the company’s image\n37\nChapter 3: Developing Your Ethical Hacking Plan\n✓ How will ethical hacking improve security, IT, and the general business?\n✓ What information are you protecting? This could be personal health\ninformation, intellectual property, confidential client information, or\nemployees’ private information.\n✓ How much money, time, and effort are you and your organization\nwilling to spend on ethical hacking?\n✓ What specific deliverables will there be? Deliverables can include any-\nthing from high-level executive reports to detailed technical reports and\nwrite-ups on what you tested, along with the outcomes of your tests.\nYou can deliver specific information that is gleaned during your testing,\nsuch as passwords and other confidential information.\n✓ What specific outcomes do you want? Desired outcomes include the\njustification for hiring or outsourcing security personnel, increasing\nyour security budget, meeting compliance requirements, or enhancing\nsecurity systems.\nAfter you know your goals, document the steps to get there. For example, if\none goal is to develop a competitive advantage to keep existing customers\nand attract new ones, determine the answers to these questions:\n✓ When will you start your ethical hacking?\n✓ Will your ethical hacking be blind, in which you know nothing about the\nsystems you’re testing, or knowledge-based, in which you’re given spe-\ncific information about the systems you’re testing, such as IP addresses,\nhostnames, and even usernames and passwords? I recommend the\nlatter.\n✓ Will this testing be technical in nature, involve physical security assess-\nments, or even use social engineering?\n✓ Will you be part of a larger ethical hacking team, sometimes called a\ntiger team or red team?\n✓ Will you notify the affected parties of what you’re doing and when you’re\ndoing it? If so, how?\nCustomer notification is a critical issue. Many customers appreciate that\nyou’re taking steps to protect their information. Approach the testing in\na positive way. Don’t say, “We’re breaking into our own systems to see\nwhat information is vulnerable to hackers,” even if that’s what you’re\ndoing. Instead, say that you’re assessing the overall security of your\ncomputer systems so the information will be as secure as possible.\n✓ How will you know whether customers even care about what you’re doing?\n✓ How will you notify customers that the organization is taking steps to\nenhance the security of their information?\n✓ What measurements can ensure that these efforts are paying off?\n38\nPart I: Building the Foundation for Ethical Hacking\nEstablishing your goals takes time, but you won’t regret it. These goals are\nyour road map. If you have any concerns, refer to these goals to make sure\nthat you stay on track.\nDetermining Which Systems to Hack\nYou probably don’t want — or need — to assess the security of all your sys-\ntems at the same time. Assessing security of all your systems could be quite\nan undertaking and might lead to problems. I’m not recommending that you\ndon’t eventually assess every computer and application you have. I’m just\nsuggesting that whenever possible, you should break your ethical hacking\nprojects into smaller chunks to make them more manageable. You might\ndecide which systems to test based on a high-level risk analysis, answering\nquestions such as\n✓ What are your most critical systems? Which systems, if accessed with-\nout authorization, would cause the most trouble or suffer the greatest\nlosses?\n✓ Which systems appear most vulnerable to attack?\n✓ Which systems crash the most?\n✓ Which systems are not documented, are rarely administered, or are the\nones you know the least about?\nAfter you’ve established your overall goals, decide which systems to test.\nThis step helps you define a scope for your ethical hacking so that you\nestablish everyone’s expectations up front and better estimate the time and\nresources for the job.\nThe following list includes devices, systems, and applications that you may\nconsider performing your hacking tests on:\n✓ Routers and switches\n✓ Firewalls\n✓ Wireless access points\n✓ Web, application, and database servers\n✓ E-mail and file servers\n✓ Mobile devices (such as phones and tablets) that store confidential\ninformation\n✓ Workstation and server operating systems\n39\nChapter 3: Developing Your Ethical Hacking Plan\nAttack tree analysis\nAttack tree analysis is the process of creating The only drawback is that attack trees can take\na flowchart-type mapping of how malicious considerable time to draw out and require a\nattackers would attack a system. Attack trees fair amount of expertise. Why sweat it, though,\nare typically used in higher-level information when you can use a computer to do a lot of\nrisk analyses and by security-savvy develop- the work for you? A commercial tool called\nment teams when planning out a new software SecurITree, by Amenaza Technologies Limited\nproject. If you really want to take your ethical (www.amenaza.com), specializes in attack\nhacking to the next level by thoroughly planning tree analysis, and you may consider adding it\nyour attacks, working very methodically, and to your toolbox. The following figure shows a\nbeing more professional to boot, then attack sample SecurITree attack tree analysis.\ntree analysis is just the tool you need.\nWhat specific systems you should test depends on several factors. If you\nhave a small network, you can test everything. Consider testing just public-\nfacing hosts such as e-mail and web servers and their associated applica-\ntions. The ethical hacking process is flexible. Base these decisions on what\nmakes the most business sense.\n40\nPart I: Building the Foundation for Ethical Hacking\nStart with the most vulnerable systems and consider these factors:\n✓ Where the computer or application resides on the network\n✓ Which operating system and application(s) the system runs\n✓ The amount or type of critical information stored on the system\nA previous security risk assessment, vulnerability test, or business impact\nanalysis may already have generated answers to the preceding questions. If\nso, that documentation can help identify systems for further testing. Failure\nModes and Effects Analysis (FMEA) is another option.\nEthical hacking goes a few steps deeper than higher-level information risk\nassessments and vulnerability assessments. As an ethical hacker, you often\nstart by gleaning information on all systems — including the organization as a\nwhole — and then further assessing the most vulnerable systems. But again,\nthis process is flexible. I discuss the ethical hacking methodology in Chapter 4.\nAnother factor that will help you decide where to start is to assess the sys-\ntems that have the greatest visibility. For example, focusing on a database\nor file server that stores client or other critical information may make more\nsense — at least initially — than concentrating on a firewall or web server\nthat hosts marketing information about the company.\nCreating Testing Standards\nOne miscommunication or slip-up can send the systems crashing during your\nethical hacking tests. No one wants that to happen. To prevent mishaps,\ndevelop and document testing standards. These standards should include\n✓ When the tests are performed, along with the overall timeline\n✓ Which tests are performed\n✓ How much knowledge of the systems you acquire in advance\n✓ How the tests are performed and from what source IP addresses (if per-\nformed across the Internet)\n✓ What you do when a major vulnerability is discovered\nThis is a list of general best practices — you can apply more standards for\nyour situation. The following sections describe these general best practices\nin more detail.\n41\nChapter 3: Developing Your Ethical Hacking Plan\nTiming\nThey say that it’s “all in the timing.” This is especially true when performing\nethical hacking tests. Make sure that the tests you perform minimize disrup-\ntion to business processes, information systems, and people. You want to\navoid harmful situations such as miscommunicating the timing of tests and\ncausing a DoS attack against a high-traffic e-commerce site in the middle of\nthe day or performing password-cracking tests in the middle of the night.\nIt’s amazing what a 12-hour time difference (2 p.m. during major production\nversus 2 a.m. during down time) can make when testing your systems! Even\nhaving people in different time zones can create issues. Everyone on the\nproject needs to agree on a detailed timeline before you begin. Having the\nteam members’ agreement puts everyone on the same page and sets correct\nexpectations.\nIf possible and practical, notify your Internet service providers (ISPs) or host-\ning collocation (colo) providers. These providers have firewalls or intrusion\ndetection systems (IDS) or intrusion prevention systems (IPS) in place to\ndetect malicious behavior. If your provider knows you’re conducting tests, it’s\nless likely to block your traffic.\nYour testing timeline should include specific short-term dates and times of\neach test, the start and end dates, and any specific milestones in between.\nYou can develop and enter your timeline into a simple spreadsheet or Gantt\nchart, or you can include the timeline as part of your initial client proposal\nand contract. Your timeline may also be work breakdown structures in a\nlarger project plan. A timeline such as the following keeps things simple and\nprovides a reference during testing:\nTest Performed Tester Start Time Projected End Time\nWeb application Tommy Tinker July 1, 06:00 July 1, 10:00\nvulnerability\nscanning\nOS vulnerability Amy Trusty July 2, 12:00 July 2, 17:00\nexploitation\nRunning specific tests\nYou might have been charged with performing a general penetration test, or\nyou may want to perform specific tests, such as cracking passwords or trying\nto gain access to a web application. Or you might be performing a social engi-\nneering test or assessing Windows on the network. However you test, you\nmight not want to reveal the specifics of the testing. Even when your manager\n42\nPart I: Building the Foundation for Ethical Hacking\nor client doesn’t require detailed records of your tests, document what you’re\ndoing at a high level. Documenting your testing can help eliminate any poten-\ntial miscommunication and keep you out of hot water.\nEnabling logging on the systems you test along with the tools you use pro-\nvides evidence of what and when you test and more. It may be overkill, but\nyou could even record screen actions using a tool such as TechSmith’s\nCamtasia Studio (www.techsmith.com/camtasia.html).\nSometimes, you might know the general tests that you perform, but if you use\nautomated tools, it may be next to impossible to understand every test you\nperform completely. This is especially true when the software you’re using\nreceives real-time vulnerability updates and patches from the vendor each\ntime you run it. The potential for frequent updates underscores the impor-\ntance of reading the documentation and readme files that come with the\ntools you use.\nAn updated program once bit me. I was performing an automated assess-\nment on a client’s website — the same test I performed the previous week.\nThe client and I had scheduled the test date and time in advance. But I didn’t\nknow that the software vendor made some changes to its web form submis-\nsion tests, and I accidentally flooded the client’s web application, creating a\nDoS condition.\nLuckily, this DoS condition occurred after business hours and didn’t affect\nthe client’s operations. However, the client’s web application was coded\nto generate an alert e-mail for every form submission and there was no\nCAPTCHA on the page to limit successive submissions. The application\ndeveloper and company’s president received 4,000 e-mails in their inboxes\nwithin about 10 minutes — ouch! My experience is a perfect example of not\nknowing how my tool was configured by default and what it would do in that\nsituation. I was lucky that the president was tech-savvy and understood the\nsituation. Remember to have a contingency plan in case a situation like mine\noccurs. Just as important, set people’s expectations that trouble can occur —\neven when you’ve taken all the right steps to ensure everything’s in check.\nBlind versus knowledge assessments\nHaving some knowledge of the systems you’re testing might be a good idea,\nbut it’s not required. But, a basic understanding of the systems you hack can\nprotect you and others. Obtaining this knowledge shouldn’t be difficult if\nyou’re hacking your own in-house systems. If you hack a client’s systems, you\nmight have to dig a little deeper into how the systems work so you’re familiar\nwith them. Doing so has always been my practice and I’ve only had a small\nnumber of clients ask for a full blind assessment because most people are\nscared of them. This doesn’t mean that blind assessments aren’t valuable,\nbut the type of assessment you carry out depends on your specific needs.\n43\nChapter 3: Developing Your Ethical Hacking Plan\nThe best approach is to plan on unlimited attacks, wherein any test is pos-\nsible, possibly even including DoS testing. The bad guys aren’t poking around\non your systems within a limited scope, so why should you?\nConsider whether the tests should be performed so that they’re undetected\nby network administrators and any managed security service providers.\nThough not required, this practice should be considered, especially for social\nengineering and physical security tests. I outline specific tests for those sub-\njects in Chapters 5 and 6.\nIf too many insiders know about your testing, they might create a false sense\nof vigilance by improving their habits, which can end up negating the hard\nwork you put into the testing. This doesn’t mean you shouldn’t tell anyone.\nAlways have a main point of contact — preferably someone with decision-\nmaking authority.\nPicking your location\nThe tests you perform dictate where you must run them from. Your goal\nis to test your systems from locations accessible by malicious hackers or\nemployees. You can’t predict whether you’ll be attacked by someone inside\nor outside your network, so cover all your bases. Combine external (public\nInternet) tests and internal (private network) tests.\nYou can perform some tests, such as password cracking and network-infra-\nstructure assessments, from your office. For external hacks that require net-\nwork connectivity, you might have to go off-site (a good excuse to work from\nhome) or use an external proxy server. Some security vendors’ vulnerability\nscanners (such as QualysGuard) are run from the cloud, so that would work\nas well. Better yet, if you can assign an available public IP address to your\ncomputer, simply plug in to the network on the outside of the firewall for a\nhacker’s-eye view of your systems. Internal tests are easy because you need\nonly physical access to the building and the network. You might be able to\nuse a DSL line or cable modem already in place for visitors and similar users.\nResponding to vulnerabilities you find\nDetermine ahead of time whether you’ll stop or keep going when you find\na critical security hole. You don’t need to keep hacking forever or until you\ncrash all the systems. Just follow the path you’re on until you just can’t hack\nit any longer (pardon the pun). When in doubt, the best thing to do is to have\na specific goal in mind and then stop when that goal has been met.\nIf you don’t have goals, how are you going to know when you arrive at your\nsecurity-testing destination?\n44\nPart I: Building the Foundation for Ethical Hacking\nHaving said this, if you discover a major hole, I recommend contacting the\nright people as soon as possible so that they can begin fixing the issue right\naway. The right people may be software developers, product or project man-\nagers, or even CIOs. If you wait a few days or weeks, someone might exploit\nthe vulnerability and cause damage that could’ve been prevented.\nMaking silly assumptions\nYou’ve heard about what you make of yourself when you assume things. Even\nso, you make assumptions when you hack a system. Here are some examples\nof those assumptions:\n✓ Computers, networks, and people are available when you’re testing.\n✓ You have all the proper testing tools.\n✓ The testing tools you use will minimize the chances of crashing the sys-\ntems you test.\n✓ You understand the likelihood that existing vulnerabilities were not\nfound or that you used your testing tools improperly.\n✓ You know the risks of your tests.\nDocument all assumptions and have management or your client sign off on\nthem as part of your overall approval process.\nSelecting Security Assessment Tools\nWhich security assessment tools you need depend on the tests you’re going\nto run. You can perform some ethical hacking tests with a pair of sneakers, a\ntelephone, and a basic workstation on the network, but comprehensive test-\ning is easier with hacking tools.\nThe tools in this book are not malware. The tools and even their websites\nmay be flagged as such by certain anti-malware and web-filtering software\nbut they’re not. The tools I cover are legitimate tools that can be used for\nlegitimate purposes. If you experience trouble downloading, installing, or run-\nning the tools I cover in this book, you may consider configuring your system\nto allow them through or otherwise trust their execution. Keep in mind that\nI can’t make any promises. Use checksums where possible by comparing\nthe original MD5 or SHA checksum with the one you get using a tool such as\nCheckSum Tool (http://sourceforge.net/projects/checksumtool).\nA criminal could always inject malicious code into the actual tools, so there’s\nno guarantee of security. You knew that anyway, right?\n45\nChapter 3: Developing Your Ethical Hacking Plan\nIf you’re not sure what tools to use, fear not. Throughout this book, I intro-\nduce a wide variety of tools — both free and commercial — that you can use\nto accomplish your tasks. Chapter 1 provides a list of commercial, freeware,\nand open source tools. The Appendix contains a comprehensive listing of\ntools for your reference.\nIt’s important to know what each tool can and can’t do and how to use each\none. I suggest reading the manual and other Help files. Unfortunately, some\ntools have limited documentation, which can be frustrating. You can search\nforums and post a message if you’re having trouble with a tool.\nHacking tools can be hazardous to your network’s health. Be careful when\nyou use them. Always make sure that you understand what every option does\nbefore you use it. Try your tools on test systems if you’re not sure how to use\nthem. These precautions help prevent DoS conditions and loss of data on your\nproduction systems.\nYou may despise some freeware and open source hacking tools. There are\nplenty that have wasted hours of my life that I’ll never get back. If these tools\nend up causing you more headaches than they’re worth or don’t do what you\nneed them to do, consider purchasing commercial alternatives. They’re often\neasier to use and typically generate better high-level executive reports. Some\ncommercial tools are expensive to acquire, but their ease of use and function-\nality often justify the initial and ongoing costs. In most situations with ethical\nhacking, you get what you pay for.\n46\nPart I: Building the Foundation for Ethical Hacking\nChapter 4\nHacking Methodology\nIn This Chapter\n▶ Examining steps for successful ethical hacking\n▶ Gleaning information about your organization from the Internet\n▶ Scanning your network\n▶ Looking for vulnerabilities\nB\nefore you dive in head first with your ethical hacking, it’s critical\nto have at least a basic methodology to work from. Ethical hacking\ninvolves more than just poking and prodding a system or network. Proven\ntechniques can help guide you along the hacking highway and ensure that\nyou end up at the right destination. Using a methodology that supports your\nethical hacking goals separates you from the amateurs. A methodology also\nhelps ensure that you make the most of your time and effort.\nSetting the Stage for Testing\nIn the past, a lot of ethical hacking involved manual processes. Now, certain\nvulnerability scanners can automate various tasks, from testing to reporting\nto remediation validation (the process of determining whether a vulnerability\nwas fixed). These tools allow you to focus on performing the tests and less on\nthe specific steps involved. However, following a general methodology and\nunderstanding what’s going on behind the scenes will help you.\nEthical hacking is similar to beta testing software. Think logically — like a\nprogrammer, a radiologist, or a home inspector — to dissect and interact\nwith all the system components to see how they work. You gather informa-\ntion, often in many small pieces, and assemble the pieces of the puzzle. You\nstart at point A with several goals in mind, run your tests (repeating many\nsteps along the way), and move closer until you discover security vulnerabili-\nties at point B.\n48\nPart I: Building the Foundation for Ethical Hacking\nThe process used for ethical hacking is basically the same as the one a mali-\ncious attacker would use. The primary differences lie in the goals and how\nyou achieve them. Today’s attacks can come from any angle against any\nsystem, not just from the perimeter of your network and the Internet as you\nmight have been taught in the past. Test every possible entry point, includ-\ning partner, vendor, and customer networks, as well as home users, wireless\nLANs, and mobile devices. Any human being, computer system, or physical\ncomponent that protects your computer systems — both inside and outside\nyour buildings — is fair game for attack.\nWhen you start rolling with your ethical hacking, keep a log of the tests you\nperform, the tools you use, the systems you test, and your results. This infor-\nmation can help you do the following:\n✓ Track what worked in previous tests and why.\n✓ Help prove what you did.\n✓ Correlate your testing with intrusion detection systems (IDSs) and other\nlog files if trouble or questions arise.\n✓ Document your findings.\nIn addition to taking general notes, taking screen captures (using Snagit or a\nsimilar tool) of your results whenever possible is very helpful. These shots\ncome in handy later should you need to show proof of what occurred, and\nthey also will be useful as you generate your final report. Also, depending on\nthe tools you use, these screen captures might be your only evidence of vul-\nnerabilities or exploits when it comes time to write your final report. Chapter 3\nlists the general steps involved in creating and documenting an ethical hack-\ning plan.\nYour main task is to simulate the information gathering and system com-\npromises carried out by someone with malicious intent. This task can be a\npartial attack on one computer, or it can constitute a comprehensive attack\nagainst the entire network. Generally, you look for weaknesses that mali-\ncious users and external attackers might exploit. You want to assess inter-\nnal systems (processes and procedures that involve computers, networks,\npeople, and physical infrastructures). Look for vulnerabilities; check how all\nyour systems interconnect and how private systems and information are (or\naren’t) protected from untrusted elements.\nThese steps don’t include specific information on the methods that you use\nfor social engineering and assessing physical security, but the techniques are\nbasically the same. I cover social engineering and physical security in more\ndetail in Chapters 5 and 6.\nIf you’re performing ethical hacking for a client, you may go the blind assess-\nment route, which means you basically start with just the company name and\n49\nChapter 4: Hacking Methodology\nno other information. This blind assessment approach allows you to start\nfrom the ground up and gives you a better sense of the information and sys-\ntems that malicious attackers can access publicly. Whether you choose to\nassess blindly or overtly, keep in mind that the blind way of testing can take\nlonger, and you may have an increased chance of missing some security vul-\nnerabilities. It’s not my preferred testing method, but some people may insist\non it.\nAs an ethical hacker, you might not have to worry about covering your tracks\nor evading intrusion detection systems (IDSs), intrusion prevention systems\n(IPSs), or unified threat management (UTM) systems because everything you\ndo is legitimate. But you might want to test systems stealthily. In this book,\nI discuss techniques that hackers use to conceal their actions and outline\nsome countermeasures for concealment techniques.\nSeeing What Others See\nGetting an outside look can turn up a ton of information about your organiza-\ntion and systems that others can see, and you do so through a process often\ncalled footprinting. Here’s how to gather the information:\n✓ Use a web browser to search for information about your organization.\nSearch engines, such as Google and Bing, are great places to start.\n✓ Run network scans, probe open ports, and seek out vulnerabilities to\ndetermine specific information about your systems. As an insider, you\ncan use port scanners and Windows share-finder tools, such as GFI\nLanGuard, to see what’s accessible.\nWhether you search generally or probe more technically, limit the amount of\ninformation you gather based on what’s reasonable for you. You might spend\nan hour, a day, or a week gathering this information. How much time you\nspend depends on the size of the organization and the complexity of its infor-\nmation systems.\nGathering public information\nThe amount of information you can gather about an organization’s business\nand information systems is staggering and widely available on the Internet.\nYour job is to find out what’s out there. This information allows malicious\nattackers and employees to target specific areas of the organization, includ-\ning departments and key individuals.\n50\nPart I: Building the Foundation for Ethical Hacking\nThe following techniques can be used to gather information about your\norganization.\nSocial media\nSocial media sites are the new means for businesses interacting online.\nPerusing the following sites can provide untold details on any given business\nand its people:\n✓ Facebook (www.facebook.com)\n✓ LinkedIn (www.linkedin.com)\n✓ Pinterest (www.pinterest.com)\n✓ Twitter (https://twitter.com)\n✓ YouTube (www.youtube.com)\nWeb search\nPerforming a web search or simply browsing your organization’s website can\nturn up the following information:\n✓ Employee names and contact info\n✓ Important company dates\n✓ Incorporation filings\n✓ SEC filings (for public companies)\n✓ Press releases about physical moves, organizational changes, and new\nproducts\n✓ Mergers and acquisitions\n✓ Patents and trademarks\n✓ Presentations, articles, webcasts, or webinars\nBing (www.bing.com) and Google (www.google.com) ferret out information —\nfrom word processing documents to graphics files — on any publicly accessible\ncomputer. And they’re free. Google is my favorite. Entire books have been written\nabout using Google, so expect any hacker (ethical or otherwise) to be very well-\nversed on this useful tool. (See Chapter 14 for more about Google hacking.)\nWith Google, you can search the Internet in several ways:\n✓ By typing keywords: This kind of search often reveals hundreds and\nsometimes millions of pages of information — such as files, phone num-\nbers, and addresses — that you never guessed were available.\n51\nChapter 4: Hacking Methodology\n✓ By performing advanced web searches: Google’s advanced search\noptions can find sites that link back to your company’s website. This\ntype of search often reveals a lot of information about partners, vendors,\nclients, and other affiliations.\n✓ By using switches to dig deeper into a website: For example, if you\nwant to find a certain word or file on your website, simply enter a line\nlike one of the following into Google:\nsite:www.your_domain.com keyword\nsite:www.your_domain.com filename\nYou can even do a generic filetype search across the entire Internet to see\nwhat turns up, such as this:\nfiletype:swf company_name\nUse the preceding search to find Flash .swf files, which can be downloaded\nand decompiled to reveal sensitive information that can be used against your\nbusiness, as I cover in detail in Chapter 14.\nUse the following search to hunt for PDF documents that might contain sensi-\ntive information that can be used against your business:\nfiletype:pdf company_name confidential\nWeb crawling\nWeb-crawling utilities, such as HTTrack Website Copier (www.httrack.\ncom), can mirror your website by downloading every publicly accessible file\nfrom it. You can then inspect that copy of the website offline, digging into the\nfollowing:\n✓ The website layout and configuration\n✓ Directories and files that might not otherwise be obvious or readily\naccessible\n✓ The HTML and script source code of web pages\n✓ Comment fields\nComment fields often contain useful information such as names and e-mail\naddresses of the developers and internal IT personnel, server names, soft-\nware versions, internal IP addressing schemes, and general comments about\nhow the code works.\nContact information for developers and IT personnel is great for social engi-\nneering attacks. I cover social engineering in Chapter 5.\n52\nPart I: Building the Foundation for Ethical Hacking\nWebsites\nThe following websites may provide specific information about an organiza-\ntion and its employees:\n✓ Government and business websites:\n• www.hoovers.com and http://finance.yahoo.com give\ndetailed information about public companies.\n• www.sec.gov/edgar.shtml shows SEC filings of public companies.\n• www.uspto.gov offers patent and trademark registrations.\n• The website for your state’s Secretary of State or similar organiza-\ntion can offer incorporation and corporate officer information.\n✓ Background checks and other personal information:\n• LexisNexis.com (www.lexisnexis.com)\n• ZabaSearch (www.zabasearch.com)\nMapping the network\nWhen you map your network, you can search public databases and resources\nto see what other people know about your network.\nWhois\nThe best starting point is to perform a Whois lookup by using any one of the\nWhois tools available on the Internet. You may have used Whois to check\nwhether a particular Internet domain name is available.\nFor ethical hacking, Whois provides the following information that can give a\nhacker a leg up to start a social engineering attack or to scan a network:\n✓ Internet domain name registration information, such as contact names,\nphone numbers, and mailing addresses\n✓ DNS servers responsible for your domain\nYou can look up Whois information at one of the following places:\n✓ Whois.net (www.whois.net)\n✓ A domain registrar’s site, such as www.godaddy.com\n✓ Your ISP’s tech support site\n53\nChapter 4: Hacking Methodology\nOne of my favorite Whois tools is DNSstuff.com (www.dnsstuff.com).\nAlthough this tool is no longer free and is used to sell many services, it’s still\na good resource. Another good website is www.mxtoolbox.com.\nYou can run DNS queries directly from www.mxtoolbox.com to\n✓ Display general domain-registration information\n✓ Show which host handles e-mail (the Mail Exchanger or MX record) for a\ndomain\n✓ Map the location of specific hosts\n✓ Determine whether the host is listed on certain spam blacklists\nA free site you can use for more basic Internet domain queries is http://\ndnstools.com.\nThe following list shows various lookup sites for other categories:\n✓ Government: https://www.dotgov.gov/portal/web/dotgov/\nwhois\n✓ Military: www.nic.mil (although your results may be limited due to\nsecurity restrictions on this information)\n✓ AFRINIC: www.afrinic.net (Regional Internet Registry for Africa)\n✓ APNIC: www.apnic.net/apnic-info/whois_search (Regional\nInternet Registry for the Asia Pacific Region)\n✓ ARIN: http://whois.arin.net/ui (Regional Internet Registry for\nNorth America, a portion of the Caribbean, and subequatorial Africa)\n✓ LACNIC: www.lacnic.net/en (Latin American and Caribbean Internet\nAddresses Registry)\n✓ RIPE Network Coordination Centre: https://apps.db.ripe.net/\nsearch/query.html (Europe, Central Asia, African countries north of\nthe equator, and the Middle East)\nIf you’re not sure where to look for a specific country, https://www.arin.\nnet/knowledge/rirs/countries.html has a reference guide.\nGoogle Groups\nGoogle Groups (http://groups.google.com) can reveal surprising public\nnetwork information. Search for such information as your fully qualified\ndomain names (FQDNs), IP addresses, and usernames. You can search mil-\nlions of Usenet posts that date back to 1981 for public and often very private\ninformation.\n54\nPart I: Building the Foundation for Ethical Hacking\nYou might find some information that you didn’t realize was made public,\nsuch as the following:\n✓ A tech-support or message board post that divulges too much informa-\ntion about your systems. Many people who post messages like these\ndon’t realize that their messages are shared with the world or how long\nthey are kept.\n✓ Confidential company information posted by disgruntled employees or\nclients.\nIf you discover that confidential information about your company is posted\nonline, you may be able to get it removed. Check out the Google Groups help\npage at http://support.google.com/groups for details.\nPrivacy policies\nCheck your website’s privacy policy. A good practice is to let your site’s\nusers know what information is collected and how it’s being protected, but\nnothing more. I’ve seen many privacy policies that divulge a lot of technical\ndetails that should not be made public.\nMake sure that the people who write your privacy policies (often nontechni-\ncal lawyers or marketing managers) don’t divulge details about your informa-\ntion security infrastructure. Be careful to avoid the example of an Internet\nstart-up businessman who once contacted me about a business opportunity.\nDuring the conversation, he bragged about his company’s security systems\nthat ensured the privacy of client information (or so he thought). I went to his\nwebsite to check out his privacy policy. He had posted the brand and model\nof firewall he was using, along with other technical information about his\nnetwork and system architecture. This type of information could certainly be\nused against him by the bad guys. Not a good idea.\nScanning Systems\nActive information gathering produces more details about your network and\nhelps you see your systems from an attacker’s perspective. For instance, you can\n✓ Use the information provided by your Whois searches to test other\nclosely related IP addresses and hostnames. When you map out and\ngather information about a network, you see how its systems are laid\nout. This information includes determining IP addresses, hostnames\n(typically external but occasionally internal), running protocols, open\nports, available shares, and running services and applications.\n✓ Scan internal hosts when and where they are within the scope of your\ntesting. (Hint: They really ought to be.) These hosts might not be visible\nto outsiders (at least you hope they’re not), but you absolutely need to\n55\nChapter 4: Hacking Methodology\ntest them to see what rogue (or even curious or misguided) employees\nand other insiders can access. A worst-case situation is that the hacker\nhas set up shop on the inside. Just to be safe, examine your internal sys-\ntems for weaknesses.\nIf you’re not completely comfortable scanning your systems, consider first\nusing a lab with test systems or a system running virtual machine software,\nsuch as the following:\n✓ VMware Workstation (www.vmware.com/products/workstation/\noverview.html)\n✓ VMware Player (www.vmware.com/products/player)\n✓ Windows Virtual PC (www.microsoft.com/windows/virtual-pc/\ndefault.aspx)\n✓ VirtualBox, the open source alternative that I’m growing to love (www.\nvirtualbox.org)\nHosts\nScan and document specific hosts that are accessible from the Internet\nand your internal network. Start by pinging either specific hostnames or IP\naddresses with one of these tools:\n✓ The basic ping utility that’s built in to your operating system\n✓ A third-party utility that allows you to ping multiple addresses at the\nsame time, such as NetScanTools Pro (www.netscantools.com) for\nWindows and fping (http://fping.sourceforge.net) for UNIX\nThe site www.whatismyip.com shows how your gateway IP address appears\non the Internet. Just browse to that site, and your public IP address (your\nfirewall or router — preferably not your local computer) appears. This infor-\nmation gives you an idea of the outermost IP address that the world sees.\nOpen ports\nScan for open ports by using network scanning tools:\n✓ Scan network ports with NetScanTools Pro or Nmap (http://nmap.\norg). See Chapter 8 for details.\n✓ Listen to network traffic with a network analyzer, such as OmniPeek\n(www.wildpackets.com) or Wireshark (www.wireshark.com). I\ncover this topic in various chapters throughout this book.\n56\nPart I: Building the Foundation for Ethical Hacking\nScanning internally is easy. Simply connect your PC to the network, load the\nsoftware, and fire away. Just be aware of network segmentation and internal\nintrusion prevention systems (IPSs) that may impede your work. Scanning\nfrom outside your network takes a few more steps, but it can be done. The\neasiest way to connect and get an outside-in perspective is to assign your\ncomputer a public IP address and plug that workstation into a switch or hub\non the public side of your firewall or router. Physically, the computer isn’t\non the Internet looking in, but this type of connection works just the same as\nlong as it’s outside your firewall and router. You can also do this outside-in\nscan from home or from a remote office location.\nDetermining What’s Running\non Open Ports\nAs an ethical hacker, you should glean as much information as possible after\nscanning your systems. You can often identify the following information:\n✓ Protocols in use, such as IP, IPX, and NetBIOS\n✓ Services running on the hosts, such as e-mail, web servers, and database\napplications\n✓ Available remote access services, such as Remote Desktop Protocol\n(RDP), Virtual Network Computing (VNC), and Secure Shell (SSH)\n✓ Virtual Private Network (VPN) services, such as PPTP, SSL, and IPsec\n✓ Required authentication for network shares\nYou can look for the following sampling of open ports (your network-\nscanning program reports these as accessible or open):\n✓ Ping (ICMP echo) replies, showing that ICMP traffic is allowed to and\nfrom the host\n✓ TCP port 21, showing that FTP is running\n✓ TCP port 23, showing that telnet is running\n✓ TCP ports 25 or 465 (SMTP and SMPTS), 110 or 995 (POP3 and POP3S), or\n143 or 993 (IMAP and IMAPS), showing that an e-mail server is running\n✓ TCP/UDP port 53, showing that a DNS server is running\n✓ TCP ports 80, 443, and 8080, showing that a web server or web proxy\nserver is running\n✓ TCP/UDP ports 135, 137, 138, 139 and, especially, 445, showing that an\nunprotected Windows host is running\n57\nChapter 4: Hacking Methodology\nThousands of ports can be open — 65,534 each for both TCP and UDP, to be\nexact. I cover many popular port numbers when describing hacks throughout\nthis book. A continually updated listing of all well-known port numbers (ports\n0–1023) and registered port numbers (ports 1024–49151), with their associated\nprotocols and services, is located at www.iana.org/assignments/service-\nnames-port-numbers/service-names-port-numbers.txt. You can also\nperform a port-number lookup at www.cotse.com/cgi-bin/port.cgi.\nIf a service doesn’t respond on a TCP or UDP port, that doesn’t mean it’s not\nrunning. You may have to dig further to find out.\nIf you detect a web server running on the system that you test, you can check\nthe software version by using one of the following methods:\n✓ Type the site’s name followed by a page that you know doesn’t exist,\nsuch as www.your_domain.com/1234.html. Many web servers return\nan error page showing detailed version information.\n✓ Use Netcraft’s What’s that site running? search utility (www.netcraft.\ncom), which connects to your server from the Internet and displays the\nweb server version and operating system, as shown in Figure 4-1.\nFigure 4-1:\nNetcraft’s\nweb server\nversion\nutility.\n58\nPart I: Building the Foundation for Ethical Hacking\nYou can dig deeper for more specific information on your hosts:\n✓ NMapWin (http://sourceforge.net/projects/nmapwin) can\ndetermine the system OS version.\n✓ An enumeration utility (such as DumpSec at www.systemtools.com/\nsomarsoft/?somarsoft.com) can extract users, groups, and file and\nshare permissions directly from Windows.\n✓ Many systems return useful banner information when you connect to a\nservice or application running on a port. For example, if you telnet to an\ne-mail server on port 25 by entering telnet mail.your_domain.com 25 at\na command prompt, you may see something like this:\n220 mail.your_domain.com ESMTP all_the_version_info_\nyou_need_to_hack Ready\nMost e-mail servers return detailed information, such as the version and\nthe current service pack installed. After you have this information, you\n(and the bad guys) can determine the vulnerabilities of the system from\nsome of the websites listed in the next section.\n✓ A share-finder tool, such as the one built in to GFI LanGuard, can find\nopen Windows shares.\n✓ An e-mail to an invalid address might return with detailed e-mail header\ninformation. A bounced message often discloses information that can be\nused against you, including internal IP addresses and software versions.\nOn certain Windows systems, you can use this information to establish\nunauthenticated connections and sometimes even map drives. I cover\nthese issues in Chapter 13.\nAssessing Vulnerabilities\nAfter finding potential security holes, the next step is to confirm whether\nthey’re vulnerabilities in your system or network. Before you test, perform\nsome manual searching. You can research hacker message boards, websites,\nand vulnerability databases, such as these:\n✓ Common Vulnerabilities and Exposures (http://cve.mitre.org/cve)\n✓ US-CERT Vulnerability Notes Database (www.kb.cert.org/vuls)\n✓ NIST National Vulnerability Database (http://nvd.nist.gov)\nThese sites list known vulnerabilities — at least the formally classified ones.\nAs I explain in this book, you see that many other vulnerabilities are more\ngeneric in nature and can’t easily be classified. If you can’t find a vulnerability\n59\nChapter 4: Hacking Methodology\ndocumented on one of these sites, search the vendor’s site. You can also find\na list of commonly exploited vulnerabilities at www.sans.org/top20. This\nsite contains the SANS Top 20 Vulnerabilities consensus list, which is com-\npiled and updated by the SANS organization.\nIf you don’t want to research your potential vulnerabilities and can jump\nright into testing, you have a couple of options:\n✓ Manual assessment: You can assess the potential vulnerabilities by\nconnecting to the ports that are exposing the service or application\nand poking around in these ports. You should manually assess certain\nsystems (such as web applications). The vulnerability reports in the pre-\nceding databases often disclose how to do this — at least generally. If\nyou have a lot of free time, performing these tests manually might work\nfor you.\n✓ Automated assessment: Manual assessments are a great way to learn,\nbut people usually don’t have the time for most manual steps. If you’re\nlike me, you scan for vulnerabilities automatically when you can.\nMany great vulnerability assessment tools test for flaws on specific platforms\n(such as Windows and UNIX) and types of networks (either wired or wire-\nless). They test for specific system vulnerabilities and some focus specifi-\ncally on the SANS Top 20 list and the Open Web Application Security Project\n(www.owasp.org). Versions of these tools can map the business logic within\na web application; others can help software developers test for code flaws.\nThe drawback to these tools is that they find only individual vulnerabilities;\nthey often don’t correlate vulnerabilities across an entire network. However,\nthe advent of security information and event management (SIEM) and vulner-\nability management systems is allowing these tools to correlate these vulner-\nabilities.\nOne of my favorite ethical hacking tools is a vulnerability scanner called\nQualysGuard by Qualys (www.qualys.com). It’s both a port scanner and vul-\nnerability assessment tool, and it offers a great deal of help for vulnerability\nmanagement. QualysGuard is a cloud-based tool (formerly known as Software\nas a Service) so you simply browse to the Qualys website, log in to your\naccount, and enter the IP address of the systems you want to test. Qualys also\nhas an appliance that you can install on your network that allows you to scan\ninternal systems. You simply schedule the assessment, and then the system\nruns tests and generates excellent reports, such as these:\n✓ An executive report containing general information from the results of\nthe scan, as shown in Figure 4-2.\n✓ A technical report of detailed explanations of the vulnerabilities and spe-\ncific countermeasures.\n60\nPart I: Building the Foundation for Ethical Hacking\nFigure 4-2:\nExecutive\nsummary\ndata in a\nQualys-\nGuard\nvulner-\nability\nassessment\nreport.\nAs with most good security tools, you pay for QualysGuard. It isn’t the least\nexpensive tool, but you get what you pay for, especially when it comes to\nothers taking you seriously if PCI DSS compliance is required of your busi-\nness. With QualysGuard, you buy a block of scans based on the number of\nscans you run. An alternative to QualysGuard that many people swear by is\nRapid7’s Nexpose (www.rapid7.com/vulnerability-scanner.jsp),\nwhich happens to have a free version (Community Edition) for scanning up\nto 32 hosts.\nAssessing vulnerabilities with a tool like QualysGuard requires follow-up\nexpertise. You can’t rely on the scan results alone. You must validate the vul-\nnerabilities it reports. Study the reports to base your recommendations on the\ncontext and criticality of the tested systems.\n61\nChapter 4: Hacking Methodology\nPenetrating the System\nYou can use identified critical security holes to do the following:\n✓ Gain further information about the host and its data.\n✓ Obtain a remote command prompt.\n✓ Start or stop certain services or applications.\n✓ Access other systems.\n✓ Disable logging or other security controls.\n✓ Capture screen shots.\n✓ Access sensitive files.\n✓ Send an e-mail as the administrator.\n✓ Perform SQL injection attacks.\n✓ Launch another type of DoS attack.\n✓ Upload a file proving your penetration.\nMetasploit (www.metasploit.com and www.rapid7.com) is great for\nexploiting many of the vulnerabilities you find and allows you to obtain\ncomplete system penetration. Ideally, you’ve already made your decision on\nwhether to fully exploit the vulnerabilities you find. You might want to leave\nwell enough alone by just demonstrating the existence of the vulnerabilities\nand not actually exploiting them.\nIf you want to delve into the ethical hacking methodology even further, I\nrecommend you check out the Open Source Security Testing Methodology\nManual (www.isecom.org/research/osstmm.html) for more information.\n62\nPart I: Building the Foundation for Ethical Hacking\nPart II\nPutting Ethical\nHacking in Motion\nIn this part . . .\nL\net the games begin! You’ve waited long enough —\nnow’s the time to start testing your systems. But\nwhere do you start? How about with your three Ps — your\npeople, your physical systems, and your passwords?\nThese are, after all, three of the most easily and commonly\nattacked targets in your organization.\nThis part starts with a discussion of hacking people (as\nopposed to hacking up people; this is social engineering,\nnot The Texas Chainsaw Massacre). It then goes on to look\nat physical security vulnerabilities. Of course, I’d be\nremiss in a part about people if I skipped passwords, so I\ncover the technical details of testing those as well. This is\na great way to get the ball rolling to warm you up for the\nmore specific hacks later in the book."
  },
  {
    "input": "What is the primary focus of the section on social engineering, and how does it differ",
    "summary": "Social engineering exploits human trust to gain unauthorized access, making it the weakest link in information security. It's challenging to detect and prevent because it relies on people rather than technical measures. This chapter discusses how to identify, test, and counteract social engineering attacks. Physical security is also crucial, as it protects against vulnerabilities like unsecured doors, accessible trash, and unmonitored areas. Weak passwords are a common entry point for attackers, and they can be cracked using various tools and techniques. Effective countermeasures include strong password policies, encryption, and user awareness.",
    "output": "Chapter 5\nSocial Engineering\nIn This Chapter\n▶ Discovering social engineering\n▶ Examining the ramifications of social engineering\n▶ Understanding and using social engineering techniques\n▶ Protecting your organization against social engineering\nS\nocial engineering takes advantage of the weakest link in any organiza-\ntion’s information security defenses: people. Social engineering is\n“people hacking” and involves maliciously exploiting the trusting nature of\nhuman beings to obtain information that can be used for personal gain.\nSocial engineering is one of the toughest hacks to perpetrate because it takes\nbravado and skill to come across as trustworthy to a stranger. It’s also by\nfar the toughest hack to protect against because people are involved. In this\nchapter, I explore the ramifications of social engineering, techniques for your\nown ethical hacking efforts, and specific countermeasures to defend against\nsocial engineering.\nIntroducing Social Engineering\nTypically, malicious attackers pose as someone else to gain information they\ncouldn’t access otherwise. They then take the information they obtain from\ntheir victims and wreak havoc on network resources, steal or delete files, and\neven commit industrial espionage or some other form of fraud against the\norganization they attack. Social engineering is different from physical security\nexploits, such as shoulder surfing and dumpster diving, but the two types of\nhacking are related and often are used in tandem.\n66\nPart II: Putting Ethical Hacking in Motion\nHere are some examples of social engineering:\n✓ False support personnel claim that they need to install a patch or new\nversion of software on a user’s computer, talk the user into downloading\nthe software, and obtain remote control of the system.\n✓ False vendors claim to need to update the organization’s accounting\npackage or phone system, ask for the administrator password, and\nobtain full access.\n✓ Phishing e-mails sent by external attackers gather user IDs and pass-\nwords of unsuspecting recipients. These attacks can be generic in nature\nor more targeted — something called spearphishing attacks. The bad guys\nthen use those passwords to gain access to bank accounts and more.\n✓ False employees notify the security desk that they have lost their keys\nto the computer room, receive a set of keys from security, and obtain\nunauthorized access to physical and electronic information.\nSometimes, social engineers act as confident and knowledgeable employees,\nsuch as managers or executives. At other times they might play the roles of\nextremely uninformed or naïve employees. They also might pose as outsid-\ners, such as IT consultants or maintenance people. Social engineers often\nswitch from one mode to the other, depending on the people they speak to.\nEffective information security — especially the security required for fighting\nsocial engineering — begins and ends with your users. Other chapters in this\nbook provide great technical advice, but never forget that basic human com-\nmunications and interaction also affect the level of security. The candy-security\nadage is “Hard, crunchy outside; soft, chewy inside.” The hard, crunchy outside\nis the layer of mechanisms — such as firewalls, intrusion prevention systems,\nand encryption — that organizations rely on to secure their information. The\nsoft, chewy inside is the people and the processes inside the organization.\nIf the bad guys can get past the thick outer layer, they can compromise the\n(mostly) defenseless inner layer.\nStarting Your First Social Engineering Tests\nI approach the ethical hacking methodologies in this chapter differently than\nin subsequent chapters. Social engineering is an art and a science. Social\nengineering takes great skill to perform as an ethical hacker and depends\nupon your personality and overall knowledge of the organization you test.\nIf social engineering isn’t natural for you, consider using the information in\nthis chapter for educational purposes — at least at first — until you have\nmore time to study the subject. Don’t hesitate to hire a third party to perform\nthis testing if that makes the best business sense for now.\n67\nChapter 5: Social Engineering\nA case study in social engineering with Ira Winkler\nIn this case study, Ira Winkler, a professional server, load the user administration tool, add a\nsocial engineer, graciously shared an interest- new user to the domain, and make the user a\ning study in social engineering. member of the administrators’ group. Then they\nquickly left.\nThe Situation\nThe two men had access to the entire corporate\nMr. Winkler’s client wanted a general gauge\nnetwork with administrative rights within two\nof the organization’s security awareness level.\nhours. They also used the badges to perform\nIra and his accomplice went for the pot of gold\nafter-hours walkthroughs of the building. While\nand tested the organization’s susceptibility to\ndoing so, they found the key to the CEO’s office\nsocial engineering. To start, they scoped out\nand planted a mock bug there.\nthe main entrance of the client’s building and\nfound that the reception area and security desk The Outcome\nwere in the middle of a large lobby and were\nNobody outside the team knew what the two\nstaffed by a receptionist. The next day, the two\nmen had done until they were told after the fact.\nmen walked into the building during the morn-\nAfter the employees were informed, the guard\ning rush while pretending to talk on cellphones.\nsupervisor called Mr. Winkler and wanted to\nThey stayed at least 15 feet from the attendant\nknow who issued the badges. Mr. Winkler\nand simply ignored her as they walked by.\ninformed him that the fact that the security\nAfter they were inside the facility, they found office didn’t know who issued the badges was\na conference room to set up shop in. They sat a problem in and of itself, and that he does not\ndown to plan the rest of the day and decided disclose that information.\na facility badge would be a great start. Mr.\nHow This Could Have Been Prevented\nWinkler called the main information number\nand asked for the office that makes the badges. According to Mr. Winkler, the security desk\nHe was forwarded to the reception/security should be located closer to the entrance, and\ndesk. Ira then pretended to be the CIO and told the company should have a formal process for\nthe person on the other end of the line that he issuing badges. Access to special areas like the\nwanted badges for a couple of subcontractors. computer room should require approval from a\nThe person responded, “Send the subcontrac- known entity, as well. After access is granted,\ntors down to the main lobby.” a confirmation should be sent to the approver.\nAlso, the server screen should be locked, and\nWhen Mr. Winkler and his accomplice arrived,\nthe Windows account should not be logged on\na uniformed guard asked what they were work-\nunattended. Any addition of an administrator-\ning on, and they mentioned computers. The\nlevel account should be audited, and appropri-\nguard then asked them if they needed access\nate parties should be alerted.\nto the computer room! Of course, they said,\n“That would help.” Within minutes, they both Ira Winkler, CISSP, CISM, is founder and presi-\nhad badges with access to all office areas and dent of the Internet Security Advisors Group.\nthe computer operations center. They went to You can find more of his case studies in his\nthe basement and used their badges to open book Spies Among Us: How to Stop the Spies,\nthe main computer room door. They walked Terrorists, Hackers, and Criminals You Don’t\nright in and were able to access a Windows Even Know You Encounter Every Day (Wiley).\n68\nPart II: Putting Ethical Hacking in Motion\nYou can use the information in this chapter to perform specific tests or improve\ninformation security awareness in your organization. Social engineering can\nharm people’s jobs and reputations, and confidential information could be\nleaked. Proceed with caution, and think before you act.\nYou can perform social engineering attacks in millions of ways. From walking\nthrough the front door purporting to be someone you’re not to launching an\nall-out phishing campaign using a tool such as the Simple Phishing Toolkit\n(www.sptoolkit.com), the world is your oyster. For this reason, and\nbecause training specific behaviors in a single chapter is next to impossible, I\ndon’t provide how-to instructions for carrying out social engineering attacks.\nInstead, I describe specific social engineering scenarios that have worked for\nother hackers — both ethical and unethical. You can tailor these same tricks\nand techniques to your specific situation.\nAn outsider to the organization might perform these social engineering tech-\nniques best. If you perform these tests against your organization, acting as\nan outsider might be difficult if everyone knows you. This risk of recognition\nmight not be a problem in larger organizations, but if you have a small, close-\nknit company, people might catch on to your antics.\nYou can outsource social engineering testing to a trusted consulting firm or\neven have a trusted colleague perform the tests for you. The key word here\nis trusted. If you involve someone else, you must get references, perform\nbackground checks, and have the testing approved by management in writing\nbeforehand. I cover the topic of outsourcing security and ethical hacking in\nChapter 18.\nWhy Attackers Use Social Engineering\nMany bad guys use social engineering to break into systems because it’s often\nthe simplest way for them to get what they’re looking for. They want someone\nto open the door to the organization so that they don’t have to break in and\nrisk being caught. Security technologies such as firewalls, access controls, and\nauthentication devices won’t stop a determined social engineer.\nMost social engineers perform their attacks slowly to avoid suspicion. Social\nengineers gather bits of information over time and use the information to create\na broader picture of the organization they’re trying to manipulate. Alternatively,\nsome social engineering attacks can be performed with a quick phone call or\ne-mail. The methods used depend on the attacker’s style and abilities.\nSocial engineers know that many organizations don’t have formal data classi-\nfication programs, access control systems, incident response plans, or secu-\nrity awareness programs, and they take advantage of these weaknesses.\n69\nChapter 5: Social Engineering\nSocial engineers often know a little about a lot of things — both inside and\noutside their target organizations — because this knowledge helps them in\ntheir efforts. The more information social engineers gain about organizations,\nthe easier it is for them to pose as employees or other trusted insiders. Social\nengineers’ knowledge and determination give them the upper hand over aver-\nage employees who don’t recognize the value of the information that social\nengineers seek.\nUnderstanding the Implications\nMany organizations have enemies who want to cause trouble through social\nengineering. These enemies might be current or former employees seeking\nrevenge, competitors wanting a leg up, or hackers trying to prove their skills.\nRegardless of who causes the trouble, every organization is at risk — especially\nwith the web, which can help facilitate hacking and information gathering. Larger\ncompanies spread across several locations are often more vulnerable given their\ncomplexity, but smaller companies can also be attacked. Everyone, from recep-\ntionists to security guards to IT personnel, is a potential victim of social engi-\nneering. Help desk and call center employees are especially vulnerable because\nthey are trained to be helpful and forthcoming with information. Even the aver\nage, untrained employee is susceptible to attack.\nSocial engineering has serious consequences. Because the objective of\nsocial engineering is to coerce someone for information to lead to ill-gotten\ngain, anything is possible. Effective social engineers can obtain the follow-\ning information:\n✓ User or administrator passwords\n✓ Security badges or keys to the building and even to the computer room\n✓ Intellectual property such as design specifications, source code, or\nother research and development documentation\n✓ Confidential financial reports\n✓ Private and confidential employee information\n✓ Customer lists and sales prospects\nIf any of the preceding information is leaked, financial losses, lower employee\nmorale, decreased customer loyalty, and even legal and regulatory compli-\nance issues could result. The possibilities are endless.\nSocial engineering attacks are difficult to protect against for various reasons.\nFor one thing, they aren’t well documented. For another, social engineers are\nlimited only by their imaginations. Also, because so many possible methods\n70\nPart II: Putting Ethical Hacking in Motion\nexist, recovery and protection are difficult after the attack. Furthermore, the\nhard, crunchy outside of firewalls and intrusion prevention systems often cre-\nates a false sense of security, making the problem even worse.\nWith social engineering, you never know the next method of attack. The best\nthings you can do are to remain vigilant, understand the social engineer’s\nmethodology, and protect against the most common attacks through ongoing\nsecurity awareness in your organization. I discuss how you can do this in the\nrest of this chapter.\nPerforming Social Engineering Attacks\nThe process of social engineering is actually pretty basic. Generally, social\nengineers discover the details of organizational processes and information\nsystems to perform their attacks. With this information, they know what to\npursue. Hackers typically perform social engineering attacks in four simple\nsteps:\n1. Perform research.\n2. Build trust.\n3. Exploit relationships for information through words, actions, or technology.\n4. Use the information gathered for malicious purposes.\nThese steps can include numerous substeps and techniques, depending on\nthe attack being performed.\nBefore social engineers perform their attacks, they need a goal. This is the\nfirst step in these attackers’ processes for social engineering, and this goal is\nmost likely already implanted in their minds. What do they want to accom-\nplish? What are the social engineers trying to hack? Why? Do they want\nintellectual property, server passwords, or access to control badges, or do\nthey simply want to prove that the company’s defenses can be penetrated?\nIn your efforts as an ethical hacker performing social engineering, determine\nthis overall goal before you move forward.\nSeeking information\nAfter social engineers have a goal in mind, they typically start the attack by\ngathering public information about their victim(s). Many social engineers\nacquire information slowly over time so they don’t raise suspicion. Obvious\ninformation gathering is a tip-off when defending against social engineering. I\nmention other warning signs to be aware of throughout the rest of this chapter.\n71\nChapter 5: Social Engineering\nRegardless of the initial research method, all a hacker might need to pen-\netrate an organization is an employee list, a few key internal phone numbers,\nthe latest news from a social media website, or a company calendar.\nUsing the Internet\nToday’s basic research medium is the Internet. A few minutes searching on\nGoogle or other search engines, using simple keywords, such as the company\nname or specific employees’ names, often produces a lot of information. You\ncan find even more information in SEC filings at www.sec.gov and at such\nsites as www.hoovers.com and http://finance.yahoo.com. (Many orga-\nnizations — especially their management — would be dismayed to discover\nthe organizational information that’s available online.) By using this search-\nengine information and browsing the company’s website, the attacker often\nhas enough information to start a social engineering attack.\nThe bad guys can pay just a few dollars for a comprehensive online back-\nground check on individuals. These searches can turn up practically any\npublic — and sometimes private — information about a person in minutes.\nDumpster diving\nDumpster diving is a little more risky — and it’s certainly messy. But, it’s a\nhighly effective method of obtaining information. This method involves liter-\nally rummaging through trash cans for information about a company.\nDumpster diving can turn up even the most confidential information because\nmany employees assume that their information is safe after it goes into the\ntrash. Most people don’t think about the potential value of the paper they\nthrow away. And I’m not just talking about the recycle value! These docu-\nments often contain a wealth of information that can tip off the social engi-\nneer with information needed to penetrate the organization further. The\nastute social engineer looks for the following printed documents:\n✓ Internal phone lists\n✓ Organizational charts\n✓ Employee handbooks, which often contain security policies\n✓ Network diagrams\n✓ Password lists\n✓ Meeting notes\n✓ Spreadsheets and reports\n✓ Printouts of e-mails that contain confidential information\n72\nPart II: Putting Ethical Hacking in Motion\nShredding documents is effective only if the paper is cross-shredded into tiny\npieces of confetti. Inexpensive shredders that shred documents only in long\nstrips are basically worthless against a determined social engineer. With a\nlittle time and tape, a social engineer can piece a document back together if\nthat’s what he’s determined to do.\nHackers often gather confidential personal and business information from\nothers by listening in on conversations held in restaurants, coffee shops, and\nairports. People who speak loudly when talking on their cellphones are also a\ngreat source of sensitive information for social engineers. (Poetic justice, per-\nhaps?) While I’m out and about in public places, I hear others divulge amazing\ninformation even if I’m not actively trying to listen.\nThe bad guys also look in the trash for CD-ROMs and DVDs, old computer\ncases (especially those with hard drives still intact), and backup tapes.\nSee Chapter 6 for more on trash and other physical security issues, including\ncountermeasures for protecting against dumpster divers.\nPhone systems\nAttackers can obtain information by using the dial-by-name feature built in to\nmost voicemail systems. To access this feature, you usually just press 0 after\ncalling the company’s main number or after you enter someone’s voice mail-\nbox. This trick works best after hours to ensure no one answers.\nAttackers can protect their identities if they can hide where they call from.\nHere are some ways they can hide their locations:\n✓ Residential phones sometimes can hide their numbers from caller ID by\ndialing *67 before the phone number.\nThis feature isn’t effective when calling toll-free numbers (800, 888, 877,\n866) or 911.\n✓ Business phones in an office using a phone switch are more difficult\nto spoof. However, all the attacker usually needs is the user guide and\nadministrator password for the phone switch software. In many switches,\nthe attacker can enter the source number — including a falsified number,\nsuch as the victim’s home phone number. Voice over Internet Protocol\n(VoIP) phone systems are making this a non-issue, however.\n✓ VoIP Servers such as the open source Asterisk (www.asterisk.org)\ncan be used and configured to send any number they want.\nPhishing e-mails\nThe latest criminal hacking craze is phishing — criminals sending bogus\ne-mails to potential victims in an attempt to get them to divulge sensitive\ninformation or click malicious links. Phishing has actually been around for\n73\nChapter 5: Social Engineering\nyears, but it has recently gained greater visibility given some high-profile\nexploits against seemingly impenetrable organizations. Phishing’s effective-\nness is amazing, and the consequences are often ugly. A few well-placed\ne-mails are all it takes for criminals to glean passwords, steal sensitive infor-\nmation, or inject malware into targeted computers.\nYou can perform your own phishing exercise. A rudimentary method is to set\nup a bogus e-mail account requesting information or linking to a malicious\nsite, send e-mails to employees or other users you want to test, and see what\nhappens. It’s really as simple as that. You’d be amazed at just how suscep-\ntible your users really are to this trick. In the phishing tests I’ve performed, I\nalways have a 10–15 percent success rate. (Here, I define success as people\nclicking on the e-mails and divulging information.) I’ve seen it as high as 80\npercent. Those rates are not good for security or for business!\nA more formal means for executing your phishing tests is to use a tool made\nspecifically for the job. There are commercial options (via the cloud), but I\nhaven’t had much luck on that end. Even if you do have a good experience\nwith commercial vendors, you need to think long and hard about giving up\npotentially sensitive information that could be directly or inadvertently sent\noffsite, never to be controlled again. If you go down this path, make sure you\nfully understand what’s being divulged to these third–party phishing vendors\njust as you would with any cloud service provider. Trust but verify.\nAn open source alternative to commercial phishing tools is the Simple\nPhishing Toolkit, also known as spt (www.sptoolkit.com). Setting up an\nspt project environment isn’t necessarily simple, but after you have it in\nplace, it can do amazing things for your phishing initiatives. You’ll have pre-\ninstalled e-mail templates, the ability to scrape (copy page from) live websites\nso you can customize your own campaign, and various reporting capabilities\nso you can track which e-mail users are taking the bait and failing your tests.\nSocial engineers can find interesting bits of information, at times, such as\nwhen their victims are out of town, just by listening to voicemail messages.\nThey can even study victims’ voices by listening to their voicemail messages,\npodcasts, or webcasts so they can learn to impersonate those people.\nBuilding trust\nTrust — so hard to gain, yet so easy to lose. Trust is the essence of social\nengineering. Most people trust others until a situation forces them not to.\nPeople want to help one another, especially if trust can be built and the\nrequest for help seems reasonable. Most people want to be team players in\nthe workplace and don’t realize what can happen if they divulge too much\ninformation to a trusted source who shouldn’t be trusted. This trust allows\nsocial engineers to accomplish their goals. Of course, building deep trust\n74\nPart II: Putting Ethical Hacking in Motion\noften takes time. Crafty social engineers can gain it within minutes or hours.\nHow do they do it?\n✓ Likability: Who can’t relate to a nice person? Everyone loves courtesy.\nThe friendlier social engineers are — without going overboard — the\nbetter their chances of getting what they want. Social engineers often\nbegin to build a relationship by establishing common interests. They\noften use the information they gain in the research phase to determine\nwhat the victim likes and to pretend that they like those things, too.\nThey can phone victims or meet them in person and, based on informa-\ntion the social engineers have discovered about the person, start talking\nabout local sports teams or how wonderful it is to be single again. A few\nlow-key and well-articulated comments can be the start of a nice new\nrelationship. Of course, good looks don’t hurt either.\n✓ Believability: Believability is based in part on the knowledge that\nsocial engineers have and how likable they are. Social engineers also\nuse impersonation — perhaps by posing as new employees or fellow\nemployees that the victim hasn’t met. They may even pose as vendors\nwho do business with the organization. They often modestly claim\nauthority to influence people. The most common social engineering trick\nis to do something nice so that the victim feels obligated to be nice in\nreturn or to be a team player for the organization.\nExploiting the relationship\nAfter social engineers obtain the trust of their unsuspecting victims, they coax\nthe victims into divulging more information than they should. Whammo — the\nsocial engineer can go in for the kill. Social engineers do this through face-to-\nface or electronic communication that victims feel comfortable with, or they\nuse technology to get victims to divulge information.\nDeceit through words and actions\nWily social engineers can get inside information from their victims in many\nways. They are often articulate and focus on keeping their conversations\nmoving without giving their victims much time to think about what they’re\nsaying. However, if they’re careless or overly anxious during their social engi-\nneering attacks, the following tip-offs might give them away:\n✓ Acting overly friendly or eager\n✓ Mentioning names of prominent people within the organization\n✓ Bragging about authority within the organization\n75\nChapter 5: Social Engineering\n✓ Threatening reprimands if requests aren’t honored\n✓ Acting nervous when questioned (pursing the lips and fidgeting —\nespecially the hands and feet because controlling body parts that are\nfarther from the face requires more conscious effort)\n✓ Overemphasizing details\n✓ Experiencing physiological changes, such as dilated pupils or changes in\nvoice pitch\n✓ Appearing rushed\n✓ Refusing to give information\n✓ Volunteering information and answering unasked questions\n✓ Knowing information that an outsider should not have\n✓ Using insider speech or slang as a known outsider\n✓ Asking strange questions\n✓ Misspelling words in written communications\nA good social engineer isn’t obvious with the preceding actions, but these are\nsome of the signs that malicious behavior is in the works. Of course, if the\nperson is a sociopath or psychopath, your experience may vary. Psychology\nFor Dummies by Adam Cash is a good resource for such complexities of the\nhuman mind.\nSocial engineers often do a favor for someone and then turn around and ask\nthat person if he or she would mind helping them. This common social engi-\nneering trick works pretty well. Social engineers also often use what’s called\nreverse social engineering. This is where they offer help if a specific problem\narises; some time passes, the problem occurs (often by their doing), and then\nthey help fix the problem. They may come across as heroes, which can fur-\nther their cause. Social engineers might ask an unsuspecting employee for a\nfavor. Yes — they just outright ask for a favor. Many people fall for this trap.\nImpersonating an employee is easy. Social engineers can wear a similar-\nlooking uniform, make a fake ID badge, or simply dress like the real employees.\nPeople think, “Hey — he looks and acts like me, so he must be one of us.”\nSocial engineers also pretend to be employees calling from an outside phone\nline. This trick is an especially popular way of exploiting help desk and call\ncenter personnel. Social engineers know that these employees fall into a rut\neasily because their tasks are repetitive, such as saying, “Hello, can I get your\ncustomer number, please?”\n76\nPart II: Putting Ethical Hacking in Motion\nEven professionals can be socially engineered\nHere’s how I fell prey to a social engineer me what it was. After I hung up, I thought,\nbecause I didn’t think before I spoke. One day, I “What just happened? I think just got social\nwas having trouble with my high-speed Internet engineered!” It may not have been intentional\nconnection. I contacted my ISP and told the on his part. His question could’ve just been\ntech-support guy that I couldn’t remember my part of their procedures for resetting accounts.\npassword. This sounds like the beginning of a Either way, it was a dumb mistake on my part.\nsocial engineering stunt that I could’ve pulled I changed all the passwords that I divulged\noff, but I got taken instead. The slick tech-sup- related to my Internet account in case he used\nport guy paused for a minute, as if he were pull- that information against me. Lesson learned:\ning up my account info, and then asked, “What Never, under any circumstances, divulge\npassword did you try?” your password to someone else — another\nemployee, your boss, a support technician,\nStupid me, I proceeded to repeat all the pass-\nwhomever — even if they ask for it. The conse-\nwords it could’ve been. The phone went quiet\nquences just aren’t worth the perceived benefit.\nfor a moment. He reset my password and told\nDeceit through technology\nTechnology can make things easier — and more fun — for the social engi-\nneer. Often, a malicious request for information comes from a computer or\nother electronic entity that the victims think they can identify. But spoofing\na computer name, an e-mail address, a fax number, or a network address is\neasy. Fortunately, you can take a few countermeasures against this type of\nattack, as described in the next section.\nHackers can deceive through technology by sending e-mail that asks victims\nfor critical information. Such an e-mail usually provides a link that directs\nvictims to a professional- and legitimate-looking website that “updates” such\naccount information as user IDs, passwords, and Social Security numbers.\nThey might also do this on social networking sites, such as Facebook and\nMyspace.\nMany spam and phishing messages also use this trick. Most users are inun-\ndated with so much spam and other unwanted e-mail that they often let their\nguard down and open e-mails and attachments they shouldn’t. These e-mails\nusually look professional and believable. They often dupe people into disclos-\ning information they should never give in exchange for a gift. These social\nengineering tricks also occur when a hacker who has already broken into the\nnetwork sends messages or creates fake Internet pop-up windows. The same\ntricks have occurred through instant messaging and cellphone messaging.\n77\nChapter 5: Social Engineering\nIn some well-publicized incidents, hackers e-mailed their victims a patch pur-\nporting to come from Microsoft or another well-known vendor. Users think it\nlooks like a duck and it quacks like a duck — but it’s not the right duck! The\nmessage is actually from a hacker wanting the user to install the “patch,”\nwhich installs a Trojan-horse keylogger or creates a backdoor into computers\nand networks. Hackers use these backdoors to hack into the organization’s\nsystems or use the victims’ computers (known as zombies) as launching pads\nto attack another system. Even viruses and worms can use social engineer-\ning. For instance, the LoveBug worm told users they had a secret admirer.\nWhen the victims opened the e-mail, it was too late. Their computers were\ninfected (and perhaps worse, they didn’t have a secret admirer).\nThe Nigerian 419 e-mail fraud scheme attempts to access unsuspecting\npeople’s bank accounts and money. These social engineers — I mean scam-\nsters — offer to transfer millions of dollars to the victim to repatriate a\ndeceased client’s funds to the United States. All the victim must provide is\npersonal bank-account information and a little money up front to cover the\ntransfer expenses. Victims then have their bank accounts emptied. This\ntrap has been around for a while, and it’s a shame that people still fall for it.\nMany computerized social engineering tactics can be performed anony-\nmously through Internet proxy servers, anonymizers, remailers, and basic\nSMTP servers that have an open relay. When people fall for requests for con-\nfidential personal or corporate information, the sources of these social engi-\nneering attacks are often impossible to track.\nSocial Engineering Countermeasures\nYou have only a few good lines of defense against social engineering. Even with\nstrong security systems, a naïve or untrained user can let the social engineer\ninto the network. Never underestimate the power of social engineers.\nPolicies\nSpecific policies help ward off social engineering in the long term in the fol-\nlowing areas:\n✓ Classifying information so that users don’t have access to certain levels\nof information they don’t need\n✓ Setting up user IDs when hiring employees or contractors\n✓ Establishing acceptable computer usage\n78\nPart II: Putting Ethical Hacking in Motion\n✓ Removing user IDs for employees, contractors, and consultants who no\nlonger work for the organization\n✓ Setting and resetting passwords\n✓ Responding to security incidents, such as suspicious behavior\n✓ Properly handling proprietary and confidential information\n✓ Escorting guests\nThese policies must be enforceable and enforced for everyone within the\norganization. Keep them up-to-date and tell your end users about them.\nUser awareness and training\nThe best line of defense against social engineering is training employees to\nidentify and respond to social engineering attacks. User awareness begins\nwith initial training for everyone and follows with security awareness initia-\ntives to keep social engineering defenses fresh in everyone’s mind. Align\ntraining and awareness with specific security policies — you may also want\nto have a dedicated security training and awareness policy.\nConsider outsourcing security training to a seasoned security trainer.\nEmployees often take training more seriously if it comes from an outsider.\nOutsourcing security training is worth the investment.\nWhile you approach ongoing user training and awareness in your organization,\nthe following tips can help you combat social engineering in the long term:\n✓ Treat security awareness and training as a business investment.\n✓ Train users on an ongoing basis to keep security fresh in their minds.\n✓ Include information privacy and security tasks and responsibilities in\neveryone’s job descriptions.\n✓ Tailor your content to your audience whenever possible.\n✓ Create a social engineering awareness program for your business func-\ntions and user roles.\n✓ Keep your messages as nontechnical as possible.\n✓ Develop incentive programs for preventing and reporting incidents.\n✓ Lead by example.\nShare these tips with your users to help prevent social engineering attacks:\n✓ Never divulge any information unless you can validate that the people\nrequesting the information need it and are who they say they are. If a\n79\nChapter 5: Social Engineering\nrequest is made over the telephone, verify the caller’s identity and call\nback.\n✓ Never click an e-mail link that supposedly loads a page with informa-\ntion that needs updating. This is especially true for unsolicited e-mails.\nMouse-over links can be just as dangerous as cross-site scripting, and\nrelated exploits can be carried out by a user innocently placing his or\nher mouse over a hyperlink. Mouse-over vulnerabilities can be handled\nby antimalware software at the network perimeter or computer level as\nwell as within the application itself.\n✓ Be careful when sharing personal information on social networking\nsites, such as Facebook or LinkedIn. Also, be on the lookout for people\nclaiming to know you or wanting to be your friend. Their intentions\nmight be malicious.\n✓ Escort all guests within a building.\n✓ Never open e-mail attachments or other files from strangers.\n✓ Never give out passwords.\nA few other general suggestions can ward off social engineering:\n✓ Never let a stranger connect to one of your network jacks or wireless\nnetworks — even for a few seconds. A hacker can place a network\nanalyzer, Trojan-horse program, or other malware directly onto your\nnetwork.\n✓ Classify your information assets, both hard copy and electronic. Train\nall employees how to handle each asset type.\n✓ Develop and enforce computer media and document destruction poli-\ncies that help ensure data is handled carefully and stays where it should\nbe. A good resource for information on destruction policies is www.\npdaconsulting.com/datadp.htm.\n✓ Use cross-shredding paper shredders. Better still, hire a\ndocument-shredding company that specializes in confidential document\ndestruction.\nThese techniques can reinforce the content of formal training:\n✓ New employee orientation, training lunches, e-mails, and newsletters\n✓ Social engineering survival brochure with tips and FAQs\n✓ Trinkets, such as screen savers, mouse pads, sticky notes, pens, and\noffice posters that bear messages that reinforce security principles\nThe Appendix lists my favorite security awareness trinkets and tool vendors\nto improve security awareness and education in your organization.\n80\nPart II: Putting Ethical Hacking in Motion\nChapter 6\nPhysical Security\nIn This Chapter\n▶ Understanding the importance of physical security\n▶ Looking for physical security vulnerabilities\n▶ Implementing countermeasures for physical security attacks\nI\nstrongly believe that information security is more dependent on nontech-\nnical policies, procedures, and business processes than on the technical\nhardware and software solutions that many people and vendors swear by.\nPhysical security, which is the protection of physical property, encompasses\nboth technical and nontechnical components.\nPhysical security is an often-overlooked but critical aspect of an information\nsecurity program. Your ability to secure your information depends on your\nability to secure your site physically. In this chapter, I cover some common\nphysical security weaknesses as they relate to computers and information\nsecurity — you should look out for these weaknesses in your systems. I also\noutline free and low-cost countermeasures you can implement to minimize\nyour business’s physical vulnerabilities.\nI don’t recommend breaking and entering, which would be necessary to test cer-\ntain physical security vulnerabilities fully. Instead, approach those areas to see\nhow far you can get. Take a fresh look — from an outsider’s perspective — at\nthe physical vulnerabilities covered in this chapter. You might discover holes in\nyour physical security infrastructure that you had previously overlooked.\nIdentifying Basic Physical\nSecurity Vulnerabilities\nWhatever your computer- and network-security technology, practically any\nhack is possible if an attacker is in your building or data center. That’s why\nlooking for physical security vulnerabilities and fixing them before they’re\nexploited is important.\n82\nPart II: Putting Ethical Hacking in Motion\nIn small companies, some physical security issues might not be a problem.\nMany physical security vulnerabilities depend on such factors as\n✓ Size of the building\n✓ Number of buildings or sites\n✓ Number of employees\n✓ Location and number of building entrance and exit points\n✓ Placement of the data centers and other confidential information\nLiterally thousands of possible physical security vulnerabilities exist. The\nbad guys are always on the lookout for them — so you should look for these\nvulnerabilities first. Here are some examples of physical security vulnerabili-\nties I’ve found when assessing security for my clients:\n✓ No receptionist in a building to monitor who’s coming and going\n✓ No visitor sign-in or escort required for building access\n✓ Employees trusting visitors because they wear vendor uniforms or say\nthey’re in the building to work on the copier or computers\n✓ No access controls on doors or the use of traditional keys that can be\nduplicated with no accountability\n✓ Doors propped open\n✓ IP-based video, access control, and data center management systems\naccessible via the network with the default user ID and password\n✓ Publicly accessible computer rooms\n✓ Software and backup media lying around\n✓ Unsecured computer hardware, especially laptops, phones, and tablets\n✓ Sensitive information being thrown away in trash cans rather than being\nshredded or placed in a shred container\n✓ CDs and DVDs with confidential information in trash cans\nWhen these physical security vulnerabilities are exploited, bad things can\nhappen. All it takes to exploit these weaknesses is an unauthorized individual\nentering your building.\n83\nChapter 6: Physical Security\nA Q&A on physical security with Jack Wiles\nIn this Q&A session, Jack Wiles, an information then looked for other entrances to that same\nsecurity pioneer with over 30 years of experi- building. If we found an outside smoking area\nence, answers several questions on physical at a different door, we attempted tailgating\nsecurity and how a lack of it often leads to infor- and simply walked in behind other employees\nmation insecurity. who were reentering the building after finish-\ning their breaks. Tailgating also worked at most\nHow important do you think physical security\nentrances that required card access. In my\nis in relation to technical-security issues?\ncareer as a red-team leader, we were never\nJW: I’ve been asked that question many times in stopped and questioned. We simply said “thank\nthe past, and from decades of experience with you” as we walked in and compromised the\nboth physical and technical security, I have a entire building.\nstandard answer. Without question, many of the\nWhat kinds of things would you bring out of a\nmost expensive technical-security countermea-\nbuilding?\nsures and tools often become worthless when\nphysical security is weak. If I can get my team JW: It was always easy to get enough important\ninto your building(s) and walk up to someone’s documentation to prove that we were there. In\ndesk and log in as that person, I have bypassed many cases, the documentation was sitting in a\nall your technical-security systems. In past secu- recycle box next to someone’s desk (especially\nrity assessments, after my team and I entered a if that person was someone important). To us,\nbuilding, we always found that people simply that really said, “Steal me first!” We found it\nthought that we belonged there — that we were interesting that many companies just let their\nemployees. We were always friendly and helpful recycle boxes fill up before emptying them.\nwhen we came in contact with real employees. We would also look for a room where strip-cut\nThey would often return the kindness by helping shredders were used. The documents that were\nus with whatever we asked for. shredded were usually stored in clear plastic\nbags. We loaded these bags into our cars and\nHow were you able to get into most of the\nhad many of the shredded documents put back\nbuildings when you conducted “red team”\ntogether in a few hours. We found that if we\npenetration tests for companies?\npasted the strips from any page on cardboard\nJW: In many cases, we just boldly walked into with as much as an inch of space between the\nthe building and went up the elevator in mul- strips, the final document was still readable.\ntistory buildings. If we were challenged, we\nJack Wiles is president of TheTrainingCo.\nalways had a story ready. Our typical story was\n(www.thetrainingco.com) and promotes\nthat we thought that this was the HR depart-\nthe annual information security conference\nment, and we were there to apply for a job. If\nTechno Security.\nwe were stopped at the door and told which\nbuilding to go to for HR, we simply left and\n84\nPart II: Putting Ethical Hacking in Motion\nPinpointing Physical Vulnerabilities\nin Your Office\nMany potential physical security exploits seem unlikely, but they can occur\nto organizations that don’t take physical security seriously. The bad guys\ncan exploit many physical security vulnerabilities, including weaknesses in a\nbuilding’s infrastructure, office layout, computer-room access, and design. In\naddition to these factors, consider the facility’s proximity to local emergency\nassistance (police, fire, and ambulance) and the area’s crime statistics (bur-\nglary, breaking and entering, and so on) so you can better understand what\nyou’re up against.\nLook for the vulnerabilities discussed in the following sections when assess-\ning your organization’s physical security. This won’t take a lot of technical\nsavvy or expensive equipment. Depending on the size of your facilities,\nthese tests shouldn’t take much time either. The bottom line is to determine\nwhether the physical security controls are adequate given what’s at stake.\nAbove all, be practical and use common sense.\nBuilding infrastructure\nDoors, windows, and walls are critical components of a building — especially\nfor a computer room or an area where confidential information is stored.\nAttack points\nHackers can exploit a handful of building infrastructure vulnerabilities.\nConsider the following commonly overlooked attack points:\n✓ Are doors propped open? If so, why?\n✓ Can gaps at the bottom of critical doors allow someone using a balloon\nor other device to trip a sensor on the inside of a “secure” room?\n✓ Would it be easy to force doors open? A simple kick near the doorknob\nis usually enough for standard doors.\n✓ What is the building or data center made of (steel, wood, concrete), and\nhow sturdy are the walls and entryways? How resilient is the material to\nearthquakes, tornadoes, strong winds, heavy rains, and vehicles driving\ninto the building? Would these disasters leave the building exposed so\nthat looters and others with malicious intent could gain access to the\ncomputer room or other critical areas?\n✓ Are any doors or windows made of glass? Is this glass clear? Is the glass\nshatterproof or bulletproof?\n85\nChapter 6: Physical Security\n✓ Do door hinges on the outside make it easy for intruders to unhook them?\n✓ Are doors, windows, and other entry points wired to an alarm system?\n✓ Are there drop ceilings with tiles that can be pushed up? Are the walls\nslab-to-slab? If not, someone could easily scale walls, bypassing any\ndoor or window access controls.\nCountermeasures\nMany physical security countermeasures for building vulnerabilities might\nrequire other maintenance, construction, or operations experts. If build-\ning infrastructure is not your forte, you can hire outside experts during the\ndesign, assessment, and retrofitting stages to ensure that you have adequate\ncontrols. Here are some of the best ways to solidify building security:\n✓ Strong doors and locks\n✓ Windowless walls around data centers\n✓ A continuously monitored alarm system with network-based cameras\nlocated at all access points\n✓ Lighting (especially around entry and exit points)\n✓ Mantraps and sallyports that allow only one person at a time to pass\nthrough a door\n✓ Fences (with barbed wire or razor wire)\nUtilities\nYou must consider building and data center utilities, such as power, water,\ngenerators, and fire suppression, when assessing physical security. These\nutilities can help fight off such incidents as fire and keep other access con-\ntrols running during a power loss. They can also be used against you if an\nintruder enters the building.\nAttack points\nIntruders often exploit utility-related vulnerabilities. Consider the following\nattack points, which are commonly overlooked:\n✓ Is power-protection equipment (surge protectors, UPSs, and generators)\nin place? How easily accessible are the on/off switches on these devices?\nCan an intruder walk in and flip a switch? Can an intruder simply scale a\nwood fence or cut off a simple lock and access critical equipment?\n✓ When the power fails, what happens to physical security mechanisms?\nDo they fail open, allowing anyone through, or fail closed, keeping every-\none in or out until the power is restored?\n86\nPart II: Putting Ethical Hacking in Motion\n✓ Where are fire-detection and -suppression devices — including alarm\nsensors, extinguishers, and sprinkler systems — located? Determine\nhow a malicious intruder can abuse them. Are they accessible via a wire-\nless or local network with default login credentials? Are these devices\nplaced where they can harm electronic equipment during a false alarm?\n✓ Where are water and gas shutoff valves located? Can you access them,\nor would you have to call maintenance personnel when an incident\narises?\n✓ Are local telecom wires (both copper and fiber) that run outside of the\nbuilding located aboveground, where someone can tap into them with\ntelecom tools? Can digging in the area cut them easily? Are they located\non telephone poles that are vulnerable to traffic accidents or weather-\nrelated incidents?\nCountermeasures\nYou might need to involve other experts during the design, assessment, or\nretrofitting stages. The key is placement:\n✓ Ensure that major utility controls are placed behind closed and lockable\ndoors or fenced areas out of sight to people passing through or nearby.\n✓ Ensure that someone walking through or near the building cannot\naccess the controls to turn them on and off.\nSecurity covers for on/off switches and thermostat controls and locks for\nserver power buttons, USB ports, and PCI expansion slots can be effective\ndefenses. Just don’t depend on them fully, because someone with a hammer\ncan easily crack them open.\nI once assessed the physical security of an Internet colocation facility for a\nvery large computer company. I made it past the front guard and tailgated\nthrough all the controlled doors to reach the data center. After I was inside,\nI walked by equipment that was owned by very large companies, such as\nservers, routers, firewalls, UPSs, and power cords. All this equipment was\ncompletely exposed to anyone walking in that area. A quick flip of a switch or\nan accidental trip over a network cable dangling to the floor could bring an\nentire shelf — and a global e-commerce system — to the ground.\nOffice layout and usage\nOffice design and usage can either help or hinder physical security.\nAttack points\nHackers might exploit some office vulnerabilities. Consider these attack points:\n87\nChapter 6: Physical Security\n✓ Does a receptionist or security guard monitor traffic in and out of the\nmain doors of the building?\n✓ Do employees have confidential information on their desks? What about\nmail and other packages — do they lie around outside someone’s door\nor, even worse, outside the building, waiting for pickup?\n✓ Where are trash cans and dumpsters located? Are they easily accessible\nby anyone? Are recycling bins or shredders used?\nOpen recycling bins and other careless handling of trash are invitations\nfor dumpster diving. Hackers search for confidential company informa-\ntion, such as phone lists and memos, in the trash. Dumpster diving can\nlead to many security exposures.\n✓ How secure are the mail and copy rooms? If intruders can access these\nrooms, they can steal mail or company letterhead to use against you.\nThey can also use and abuse your fax machine(s).\n✓ Are closed-circuit television (CCTV) or IP-based network cameras used\nand monitored in real time?\n✓ Have your network cameras and digital video recorders (DVRs) been\nhardened from attack — or at least have the default login credentials\nbeen changed? This is a security flaw that you can predict with near\n100-percent certainty.\n✓ What access controls are on doors? Are regular keys, card keys, combi-\nnation locks, or biometrics used? Who can access these keys, and where\nare they stored?\nKeys and programmable keypad combinations are often shared among\nusers, making accountability difficult to determine. Find out how many\npeople share these combinations and keys.\nI came across a situation for a client where the front lobby entrance was\nunmonitored. It also happened to have a Voice over IP (VoIP) phone available\nfor anyone to use. But the client did not consider that anyone could enter the\nlobby, disconnect the VoIP phone (or use the phone’s data port), and plug\na laptop computer into the connection and have full access to the network\nwith minimal chance that the intruder would ever be questioned about what\nhe or she was doing. This could have been prevented had a network connec-\ntion not been made available in an unmonitored area, if separate data and\nvoice ports were used, or if the voice and data traffic had been separated at\nthe network level.\nCountermeasures\nWhat’s challenging about physical security is the fact that security controls\nare often reactive. Some controls are preventive (that is, they deter, detect,\nor delay), but they’re not foolproof. Putting simple measures, such as the fol-\nlowing, in place can help reduce your exposure to building and office-related\nvulnerabilities:\n88\nPart II: Putting Ethical Hacking in Motion\n✓ A receptionist or a security guard who monitors people coming and\ngoing. This is the most critical countermeasure. This person can ensure\nthat every visitor signs in and that all new or untrusted visitors are\nalways escorted.\nMake it policy and procedure for all employees to question strangers\nand report strange behavior in the building.\nEmployees Only or Authorized Personnel Only signs show the bad guys\nwhere they should go instead of deterring them from entering. It’s secu-\nrity by obscurity, but not calling attention to the critical areas may be\nthe best approach.\n✓ Single entry and exit points to a data center.\n✓ Secure areas for dumpsters.\n✓ CCTV or IP-based video cameras for monitoring critical areas, including\ndumpsters.\n✓ Cross-cut shredders or secure recycling bins for hard-copy documents.\n✓ Limited numbers of keys and passcode combinations.\nMake keys and passcodes unique for each person whenever possible\nor, better yet, don’t use them at all. Use electronic badges that can be\nbetter controlled and monitored instead.\n✓ Biometrics identification systems can be very effective, but they can\nalso be expensive and difficult to manage.\nNetwork components and computers\nAfter hackers obtain physical access to a building, they look for the computer\nroom and other easily accessible computer and network devices.\nAttack points\nThe keys to the kingdom are often as close as someone’s desktop computer\nand not much farther than an unsecured computer room or wiring closet.\nMalicious intruders can do the following:\n✓ Obtain network access and send malicious e-mails as a logged-in user.\n✓ Crack and obtain passwords directly from the computer by booting it\nwith a tool such as the ophcrack LiveCD (http://ophcrack.source\nforge.net). I cover this tool and more password hacks in Chapter 7.\n✓ Place penetration drop boxes such as those made by Pwnie Express\n(http://pwnieexpress.com) in a standard power outlet. These\ndevices allow a malicious intruder to connect back into the system via\n89\nChapter 6: Physical Security\ncellular connection to perform their dirty deeds. This is a really sneaky\n(spy-like) means for intrusion that you have to check out.\n✓ Steal files from the computer by copying them to a removable storage\ndevice (such as a phone, MP3 player, or USB drive) or by e-mailing them\nto an external address.\n✓ Enter unlocked computer rooms and mess around with servers, fire-\nwalls, and routers.\n✓ Walk out with network diagrams, contact lists, and business-continuity\nand incident-response plans.\n✓ Obtain phone numbers from analog lines and circuit IDs from T1, Metro\nEthernet, and other telecom equipment for future attacks.\nPractically every bit of unencrypted information that traverses the network\ncan be recorded for future analysis through one of the following methods:\n✓ Connecting a computer running network analyzer software to a hub or\nmonitor, or a mirrored port on a switch on your network.\n✓ Installing network analyzer software on an existing computer.\nA network analyzer is very hard to spot. I cover network analyzers in\nmore detail in Chapter 8.\nHow would hackers access this information in the future?\n✓ The easiest attack method is to install remote-administration software\non the computer, such as VNC (www.realvnc.com).\n✓ A crafty hacker with enough time can bind a public IP address to the\ncomputer if the computer is outside the firewall. Hackers or malicious\ninsiders with enough network knowledge (and time) can configure new\nfirewall rules to do this.\nAlso, consider these other physical vulnerabilities:\n✓ How easily can someone’s computer be accessed during regular busi-\nness hours? During lunchtime? After hours?\n✓ Are computers — especially laptops — secured to desks with locks? Are\ntheir hard drives encrypted in the event one is lost or stolen?\n✓ Do employees typically leave their phones and tablets lying around\nunsecured? What about when they’re traveling or working from home\n(and the coffee shop)?\n✓ Are passwords stored on sticky notes on computer screens, keyboards,\nor desks?\n✓ Are backup media lying around the office or data center susceptible to\ntheft?\n90\nPart II: Putting Ethical Hacking in Motion\n✓ Are safes used to protect backup media? Are they specifically rated for\nmedia to keep backups from melting during a fire? Who can access the\nsafe?\nSafes are often at great risk because of their size and value. Also, they\nare typically unprotected by the organization’s regular security controls.\nAre specific policies and technologies in place to help protect them? Are\nlocking laptop bags required? What about power-on passwords? Also,\nconsider encryption in case these devices get into a hacker’s hands.\n✓ How easily can someone connect to a wireless access point (AP) signal\nor the AP itself to join the network? Rogue access points are also some-\nthing to consider. I cover wireless networks in more detail in Chapter 9.\n✓ Are network firewalls, routers, switches, and hubs (basically, anything\nwith an Ethernet connection) easily accessible, which would enable a\nhacker to plug in to the network easily?\n✓ Are all cables patched through on the patch panel in the wiring closet so\nall network drops are live as in the case of the unmonitored lobby area I\nmention earlier?\nThis set-up is very common but a bad idea because it allows anyone to\nplug in to the network anywhere and gain access.\nCountermeasures\nNetwork and computer security countermeasures are some of the simplest\nto implement yet the most difficult to enforce because they involve everyday\nactions. Here’s a rundown of these countermeasures:\n✓ Make your users aware of what to look out for so you have extra sets\nof eyes and ears helping you out.\n✓ Require users to lock their screens — which usually takes a few clicks\nor keystrokes in Windows or UNIX — when they leave their computers.\n✓ Ensure that strong passwords are used. I cover this topic in Chapter 7.\n✓ Require laptop users to lock their systems to their desks with a lock-\ning cable. This is especially important for remote workers and travel-\ners as well as in larger companies or locations that receive a lot of foot\ntraffic.\n✓ Require all laptops to use whole disk encryption technologies, such as\na PGP Whole Disk Encryption product (www.symantec.com/whole-\ndisk-encryption) and WinMagic SecureDoc Full Disk Encryption (www.\nwinmagic.com/products/securedoc-full-disk-encryption).\n✓ Keep computer rooms and wiring closets locked and monitor those\nareas for wrongdoings.\n91\nChapter 6: Physical Security\n✓ Keep a current inventory of hardware and software within the orga-\nnization so it’s easy to determine when extra equipment appears or\nwhen equipment is missing. This is especially important in computer\nrooms.\n✓ Properly secure computer media when stored and during transport.\n✓ Scan for rogue wireless access points.\n✓ Use cable traps and locks that prevent intruders from unplugging net-\nwork cables from patch panels or computers and using those connec-\ntions for their own computers.\n✓ Use a bulk eraser on magnetic media before they’re discarded.\n92\nPart II: Putting Ethical Hacking in Motion\nChapter 7\nPasswords\nIn This Chapter\n▶ Identifying password vulnerabilities\n▶ Examining password-hacking tools and techniques\n▶ Hacking operating system passwords\n▶ Hacking password-protected files\n▶ Protecting your systems from password hacking\nP\nassword hacking is one of the easiest and most common ways attack-\ners obtain unauthorized network, computer, or application access. You\noften hear about it in the headlines, and study after study such as the Verizon\nData Breach Investigations Report reaffirms that weak passwords are at the\nroot of many security problems. I have trouble wrapping my head around the\nfact that I’m still talking about (and suffering from) weak passwords, but it’s\na reality — and, as an information security testing professional, you can cer-\ntainly do your part to minimize the risks.\nAlthough strong passwords — ideally, longer and stronger passphrases that\nare difficult to crack (or guess) — are easy to create and maintain, network\nadministrators and users often neglect this. Therefore, passwords are one\nof the weakest links in the information security chain. Passwords rely on\nsecrecy. After a password is compromised, its original owner isn’t the only\nperson who can access the system with it. That’s when accountability goes\nout the window and bad things start happening.\nExternal attackers and malicious insiders have many ways to obtain pass-\nwords. They can glean passwords simply by asking for them or by looking\nover the shoulders of users (shoulder surfing) while they type their pass-\nwords. Hackers can also obtain passwords from local computers by using\npassword-cracking software. To obtain passwords from across a network,\nattackers can use remote cracking utilities, keyloggers, or network analyzers.\nThis chapter demonstrates how easily the bad guys can gather password\ninformation from your network and computer systems. I outline common\npassword vulnerabilities and describe countermeasures to help prevent\nthese vulnerabilities from being exploited on your systems. If you perform\nthe tests and implement the countermeasures outlined in this chapter, you’ll\nbe well on your way to securing your systems’ passwords.\n94\nPart II: Putting Ethical Hacking in Motion\nUnderstanding Password Vulnerabilities\nWhen you balance the cost of security and the value of the protected\ninformation, the combination of a user ID and a secret password is usually\nadequate. However, passwords give a false sense of security. The bad guys\nknow this and attempt to crack passwords as a step toward breaking into\ncomputer systems.\nOne big problem with relying solely on passwords for information security\nis that more than one person can know them. Sometimes, this is intentional;\noften, it’s not. The tough part is that there’s no way of knowing who, besides\nthe password’s owner, knows a password.\nRemember that knowing a password doesn’t make someone an authorized user.\nHere are the two general classifications of password vulnerabilities:\n✓ Organizational or user vulnerabilities: This includes lack of password\npolicies that are enforced within the organization and lack of security\nawareness on the part of users.\n✓ Technical vulnerabilities: This includes weak encryption methods and\nunsecure storage of passwords on computer systems.\nI explore each of these classifications in more detail in the following sections.\nBefore computer networks and the Internet, the user’s physical environment\nwas an additional layer of password security that actually worked pretty well.\nNow that most computers have network connectivity, that protection is gone.\nRefer to Chapter 6 for details on managing physical security in this age of net-\nworked computers and mobile devices.\nOrganizational password vulnerabilities\nIt’s human nature to want convenience, especially when it comes to remem-\nbering five, ten, and often dozens of passwords for work and daily life. This\ndesire for convenience makes passwords one of the easiest barriers for an\nattacker to overcome. Almost 3 trillion (yes, trillion with a t and 12 zeros)\neight-character password combinations are possible by using the 26 letters\nof the alphabet and the numerals 0 through 9. The keys to strong passwords\nare: 1) easy to remember and 2) difficult to crack. However, most people just\nfocus on the easy-to-remember part. Users like to use such passwords as\npassword, their login name, abc123, or no password at all! Don’t laugh; I’ve\nseen these blatant weaknesses and guarantee they’re on any given network\nthis very moment.\n95\nChapter 7: Passwords\nA case study in Windows password vulnerabilities\nwith Dr. Philippe Oechslin\nIn this case study, Dr. Philippe Oechslin, a are hashed. This is true for both the LM hash\nresearcher and independent information secu- and the NTLM hash built in to Windows. As a\nrity consultant, shared with me his recent result, the same password produces the same\nresearch findings on Windows password hash on any Windows machine. Although it is\nvulnerabilities. known that Windows hashes have no random\nelement, no one has used a technique like\nThe Situation\nthe one that Dr. Oechslin discovered to crack\nIn 2003, Dr. Oechslin discovered a new method Windows passwords.\nfor cracking Windows passwords — now\nDr. Oechslin and his team originally placed an\ncommonly referred to as rainbow cracking.\ninteractive tool on their website (http://\nWhile testing a brute-force password-cracking\nlasecwww.epfl.ch) that enabled visitors\ntool, Dr. Oechslin thought that everyone using\nto submit hashes and have them cracked. Over\nthe same tool to generate the same hashes\na six-day period, the tool cracked 1,845 pass-\n(cryptographic representations of passwords)\nwords in an average of 7.7 seconds! You can\nrepeatedly was a waste of time. He believed\ntry out the demo for yourself at www.object\nthat generating a huge dictionary of all possible\nif-securite.ch/en/products.php.\nhashes would make it easier to crack Windows\npasswords but then quickly realized that a dic- The Outcome\ntionary of the LAN Manager (LM) hashes of\nSo what’s the big deal, you say? This pass-\nall possible alphanumerical passwords would\nword-cracking method can crack practically\nrequire over a terabyte of storage.\nany alphanumeric password in a few seconds,\nDuring his research, Dr. Oechslin discovered whereas current brute-force tools can take\na technique called time-memory trade-offs, several hours. Dr. Oechslin and his research\nwhere hashes are computed in advance, but team have generated a table with which they\nonly a small fraction are stored (approximately can crack any password made of letters, num-\none in a thousand). Dr. Oechslin discovered that bers, and 16 other characters in less than a\nhow the LM hashes are organized allows you to minute, demonstrating that passwords made up\nfind any password if you spend some time recal- of letters and numbers aren’t good enough (and\nculating some of the hashes. This technique thus should not exist in your environment). Dr.\nsaves memory but takes a lot of time. Studying Oechslin also stated that this method is useful\nthis method, Dr. Oechslin found a way to make for ethical hackers who have only limited time\nthe process more efficient, making it possible to to perform their testing. Unfortunately, mali-\nfind any of the 80 billion unique hashes by using cious hackers have the same benefit and can\na table of 250 million entries (1GB worth of data) perform their attacks before anyone detects\nand performing only 4 million hash calculations. them!\nThis process is much faster than a brute-force\nPhilippe Oechslin, PhD, CISSP, is a lecturer and\nattack, which must generate 50 percent of the\nsenior research assistant at the Swiss Federal\nhashes (40 billion) on average.\nInstitute of Technology in Lausanne and is\nThis research is based on the absence of a founder and CEO of Objectif Sécurité (www.\nrandom element when Windows passwords objectif-securite.ch/en).\n96\nPart II: Putting Ethical Hacking in Motion\nUnless users are educated and reminded about using strong passwords, their\npasswords usually are\n✓ Easy to guess.\n✓ Seldom changed.\n✓ Reused for many security points. When bad guys crack one password,\nthey can often access other systems with that same password and\nusername.\nUsing the same password across multiple systems and websites is noth-\ning but a breach waiting to happen. Everyone is guilty of it, but that\ndoesn’t make it right. Do what you can to protect your own credentials\nand spread the word to your users about how this practice can get you\ninto a real bind.\n✓ Written down in unsecure places. The more complex a password is, the\nmore difficult it is to crack. However, when users create complex pass-\nwords, they’re more likely to write them down. External attackers and\nmalicious insiders can find these passwords and use them against you\nand your business.\nTechnical password vulnerabilities\nYou can often find these serious technical vulnerabilities after exploiting\norganizational password vulnerabilities:\n✓ Weak password encryption schemes. Hackers can break weak pass-\nword storage mechanisms by using cracking methods that I outline in\nthis chapter. Many vendors and developers believe that passwords are\nsafe as long as they don’t publish the source code for their encryption\nalgorithms. Wrong! A persistent, patient attacker can usually crack this\nsecurity by obscurity (a security measure that’s hidden from plain view\nbut can be easily overcome) fairly quickly. After the code is cracked, it is\ndistributed across the Internet and becomes public knowledge.\nPassword-cracking utilities take advantage of weak password encryp-\ntion. These utilities do the grunt work and can crack any password,\ngiven enough time and computing power.\n✓ Programs that store their passwords in memory, unsecured files, and\neasily accessed databases.\n✓ Unencrypted databases that provide direct access to sensitive informa-\ntion to anyone with database access, regardless of whether they have\na business need to know.\n✓ User applications that display passwords on the screen while the user\nis typing.\n97\nChapter 7: Passwords\nThe National Vulnerability Database (an index of computer vulnerabilities\nmanaged by the National Institute of Standards and Technology) currently\nidentifies over 2,500 password-related vulnerabilities! You can search for\nthese issues at http://nvd.nist.gov to find out how vulnerable some of\nyour systems are from a technical perspective.\nCracking Passwords\nPassword cracking is one of the most enjoyable hacks for the bad guys. It\nfuels their sense of exploration and desire to figure out a problem. You might\nnot have a burning desire to explore everyone’s passwords, but it helps to\napproach password cracking with this mindset. So where should you start\nhacking the passwords on your systems? Generally, any user’s password\nworks. After you obtain one password, you can often obtain others — includ-\ning administrator or root passwords.\nAdministrator passwords are the pot of gold. With unauthorized adminis-\ntrative access, you (or a criminal hacker) can do virtually anything on the\nsystem. When looking for your organization’s password vulnerabilities, I\nrecommend first trying to obtain the highest level of access possible (such as\nadministrator) through the most discreet method possible. That’s often what\nthe bad guys do.\nYou can use low-tech ways and high-tech ways to exploit vulnerabilities to\nobtain passwords. For example, you can deceive users into divulging pass-\nwords over the telephone or simply observe what a user has written down\non a piece of paper. Or you can capture passwords directly from a computer,\nover a network, and via the Internet with the tools covered in the following\nsections.\nCracking passwords the old-fashioned way\nA hacker can use low-tech methods to crack passwords. These methods\ninclude using social engineering techniques, shoulder surfing, and simply\nguessing passwords from information that he knows about the user.\nSocial engineering\nThe most popular low-tech method for gathering passwords is social engi-\nneering, which I cover in detail in Chapter 5. Social engineering takes advan-\ntage of the trusting nature of human beings to gain information that later can\nbe used maliciously. A common social engineering technique is simply to con\npeople into divulging their passwords. It sounds ridiculous, but it happens all\nthe time.\n98\nPart II: Putting Ethical Hacking in Motion\nTechniques\nTo obtain a password through social engineering, you just ask for it. For\nexample, you can simply call a user and tell him that he has some important-\nlooking e-mails stuck in the mail queue, and you need his password to log in\nand free them up. This is often how hackers and rogue insiders try to get the\ninformation!\nIf a user gives you his password during your testing, make sure that he\nchanges it. You don’t want to be held accountable if something goes awry\nafter the password has been disclosed.\nA common weakness that can facilitate such social engineering is when\nstaff members’ names, phone numbers, and e-mail addresses are posted on\nyour company websites. Social media sites such as LinkedIn, Facebook, and\nTwitter can also be used against a company because these sites can reveal\nemployees’ names and contact information.\nCountermeasures\nUser awareness and consistent security training are great defenses against\nsocial engineering. Security tools are a good fail-safe if they monitor for such\ne-mails and web browsing at the host-level, network perimeter, or in the\ncloud. Train users to spot attacks (such as suspicious phone calls or deceit-\nful phishing e-mails) and respond effectively. Their best response is not to\ngive out any information and to alert the appropriate information security\nmanager in the organization to see whether the inquiry is legitimate and\nwhether a response is necessary. Oh, and take that staff directory off your\nwebsite or at least remove IT staff members’ information.\nShoulder surfing\nShoulder surfing (the act of looking over someone’s shoulder to see what the\nperson is typing) is an effective, low-tech password hack.\nTechniques\nTo mount this attack, the bad guys must be near their victims and not look\nobvious. They simply collect the password by watching either the user’s\nkeyboard or screen when the person logs in. An attacker with a good eye\nmight even watch whether the user is glancing around his desk for either\na reminder of the password or the password itself. Security cameras or a\nwebcam can even be used for such attacks. Coffee shops and airplanes pro-\nvide the ideal scenarios for shoulder surfing.\nYou can try shoulder surfing yourself. Simply walk around the office and\nperform random spot checks. Go to users’ desks and ask them to log in to\ntheir computers, the network, or even their e-mail applications. Just don’t\ntell them what you’re doing beforehand, or they might attempt to hide what\nthey’re typing or where they’re looking for their password — two things that\n99\nChapter 7: Passwords\nthey should’ve been doing all along! Just be careful doing this and respect\nother people’s privacy.\nCountermeasures\nEncourage users to be aware of their surroundings and not to enter their\npasswords when they suspect that someone is looking over their shoulders.\nInstruct users that if they suspect someone is looking over their shoulders\nwhile they’re logging in, they should politely ask the person to look away or,\nwhen necessary, hurl an appropriate epithet to show the offender that the\nuser is serious. It’s often easiest to just lean into the shoulder surfer’s line\nof sight to keep them from seeing any typing and/or the computer screen.\n3M Privacy Filters (www.shop3m.com/3m-privacy-filters.html) work\ngreat as well yet, surprisingly, I rarely see them being used.\nInference\nInference is simply guessing passwords from information you know about\nusers — such as their date of birth, favorite television show, or phone num-\nbers. It sounds silly, but criminals often determine their victims’ passwords\nsimply by guessing them!\nThe best defense against an inference attack is to educate users about creat-\ning secure passwords that don’t include information that can be associated\nwith them. Outside of certain password complexity filters, it’s often not easy\nto enforce this practice with technical controls. So, you need a sound secu-\nrity policy and ongoing security awareness and training to remind users of\nthe importance of secure password creation.\nWeak authentication\nExternal attackers and malicious insiders can obtain — or simply avoid\nhaving to use — passwords by taking advantage of older or unsecured oper-\nating systems that don’t require passwords to log in. The same goes for a\nphone or tablet that isn’t configured to use passwords.\nBypassing authentication\nOn older operating systems (such as Windows 9x) that prompt for a pass-\nword, you can press Esc on the keyboard to get right in. Okay, it’s hard to\nfind any Windows 9x systems these days, but the same goes for any operat-\ning system — old or new — that’s configured to bypass the login screen.\nAfter you’re in, you can find other passwords stored in such places as dialup\nand VPN connections and screen savers. Such passwords can be cracked\nvery easily using Elcomsoft’s Proactive System Password Recovery tool\n(www.elcomsoft.com/pspr.html) and Cain & Abel (www.oxid.it/\ncain.html). These weak systems can serve as trusted machines — meaning\nthat people assume they’re secure — and provide good launching pads for\nnetwork-based password attacks as well.\n100\nPart II: Putting Ethical Hacking in Motion\nCountermeasures\nThe only true defense against weak authentication is to ensure your operat-\ning systems require a password upon boot. To eliminate this vulnerability, at\nleast upgrade to Windows 7 or 8 or use the most recent versions of Linux or\none of the various flavors of UNIX, including Mac OS X.\nMore modern authentication systems, such as Kerberos (which is used in\nnewer versions of Windows) and directory services (such as Microsoft’s\nActive Directory), encrypt user passwords or don’t communicate the pass-\nwords across the network at all, which creates an extra layer of security.\nCracking passwords with high-tech tools\nHigh-tech password cracking involves using a program that tries to guess a\npassword by determining all possible password combinations. These high-\ntech methods are mostly automated after you access the computer and pass-\nword database files.\nThe main password-cracking methods are dictionary attacks, brute-force\nattacks, and rainbow attacks. You find out how each of these work in the fol-\nlowing sections.\nPassword-cracking software\nYou can try to crack your organization’s operating system and application\npasswords with various password-cracking tools:\n✓ Brutus (www.hoobie.net/brutus) cracks logons for HTTP, FTP,\ntelnet, and more.\n✓ Cain & Abel (www.oxid.it/cain.html) cracks LM and NT\nLanManager (NTLM) hashes, Windows RDP passwords, Cisco IOS and\nPIX hashes, VNC passwords, RADIUS hashes, and lots more. (Hashes are\ncryptographic representations of passwords.)\n✓ Elcomsoft Distributed Password Recovery (www.elcomsoft.com/\nedpr.html) cracks Windows, Microsoft Office, PGP, Adobe, iTunes, and\nnumerous other passwords in a distributed fashion using up to 10,000\nnetworked computers at one time. Plus, this tool uses the same graph-\nics processing unit (GPU) video acceleration as the Elcomsoft Wireless\nAuditor tool, which allows for cracking speeds up to 50 times faster. (I\ntalk about the Elcomsoft Wireless Auditor tool in Chapter 9.)\n✓ Elcomsoft System Recovery (www.elcomsoft.com/esr.html) cracks\nor resets Windows user passwords, sets administrative rights, and\nresets password expirations all from a bootable CD.\n101\nChapter 7: Passwords\n✓ John the Ripper (www.openwall.com/john) cracks hashed Linux/\nUNIX and Windows passwords.\n✓ ophcrack (http://ophcrack.sourceforge.net) cracks Windows\nuser passwords using rainbow tables from a bootable CD. Rainbow tables\nare pre-calculated password hashes that can help speed up the cracking\nprocess. See the nearby sidebar “A case study in Windows password vul-\nnerabilities with Dr. Philippe Oechslin” for more information.\n✓ Proactive Password Auditor (www.elcomsoft.com/ppa.html) runs\nbrute-force, dictionary, and rainbow cracks against extracted LM and\nNTLM password hashes.\n✓ Proactive System Password Recovery (www.elcomsoft.com/pspr.\nhtml) recovers practically any locally stored Windows password, such\nas logon passwords, WEP/WPA passphrases, SYSKEY passwords, and\nRAS/dialup/VPN passwords.\n✓ pwdump3 (www.openwall.com/passwords/microsoft-windows-\nnt-2000-xp-2003-vista-7#pwdump) extracts Windows password\nhashes from the SAM (Security Accounts Manager) database.\n✓ RainbowCrack (http://project-rainbowcrack.com) cracks\nLanManager (LM) and MD5 hashes very quickly by using rainbow tables.\n✓ THC-Hydra (www.thc.org/thc-hydra) cracks logons for HTTP, FTP,\nIMAP, SMTP, VNC and many more.\nSome of these tools require physical access to the systems you’re testing. You\nmight be wondering what value that adds to password cracking. If a hacker\ncan obtain physical access to your systems and password files, you have more\nthan just basic information security problems to worry about, right? True,\nbut this kind of access is entirely possible! What about a summer intern, a\ndisgruntled employee, or an outside auditor with malicious intent? The mere\nrisk of an unencrypted laptop being lost or stolen and falling into the hands of\nsomeone with ill intent should be reason enough.\nTo understand how the preceding password-cracking programs generally\nwork, you first need to understand how passwords are encrypted. Passwords\nare typically encrypted when they’re stored on a computer, using an encryp-\ntion or one-way hash algorithm, such as DES or MD5. Hashed passwords are\nthen represented as fixed-length encrypted strings that always represent the\nsame passwords with exactly the same strings. These hashes are irreversible\nfor all practical purposes, so, in theory, passwords can never be decrypted.\nFurthermore, certain passwords, such as those in Linux, have a random value\ncalled a salt added to them to create a degree of randomness. This prevents\nthe same password used by two people from having the same hash value.\nPassword-cracking utilities take a set of known passwords and run them\nthrough a password-hashing algorithm. The resulting encrypted hashes are\n102\nPart II: Putting Ethical Hacking in Motion\nthen compared at lightning speed to the password hashes extracted from\nthe original password database. When a match is found between the newly\ngenerated hash and the hash in the original database, the password has been\ncracked. It’s that simple.\nOther password-cracking programs simply attempt to log on using a pre-\ndefined set of user IDs and passwords. This is how many dictionary-based\ncracking tools work, such as Brutus (www.hoobie.net/brutus) and\nSQLPing3 (www.sqlsecurity.com/downloads). I cover cracking web\napplication and database passwords in Chapters 14 and 15.\nPasswords that are subjected to cracking tools eventually lose. You have\naccess to the same tools as the bad guys. These tools can be used for both\nlegitimate security assessments and malicious attacks. You want to find pass-\nword weaknesses before the bad guys do, and in this section, I show you some\nof my favorite methods for assessing Windows and Linux/UNIX passwords.\nWhen trying to crack passwords, the associated user accounts might be\nlocked out, which could interrupt your users. Be careful if intruder lockout is\nenabled in your operating systems, databases, or applications. If lockout is\nenabled, you might lock out some or all computer/network accounts, resulting\nin a denial of service situation for your users.\nPassword storage locations vary by operating system:\n✓ Windows usually stores passwords in these locations:\n• Security Accounts Manager (SAM) database (c:\\winnt\\\nsystem32\\config) or (c:\\windows\\system32\\config)\n• Active Directory database file that’s stored locally or spread\nacross domain controllers (ntds.dit)\nWindows may also store passwords in a backup of the SAM file in the\nc:\\winnt\\repair or c:\\windows\\repair directory.\nSome Windows applications store passwords in the Registry or as plain-\ntext files on the hard drive! A simple registry or file-system search for\n“password” may uncover just what you’re looking for.\n✓ Linux and other UNIX variants typically store passwords in these files:\n• /etc/passwd (readable by everyone)\n• /etc/shadow (accessible by the system and the root account only)\n• /etc/security/passwd (accessible by the system and the root\naccount only)\n• /.secure/etc/passwd (accessible by the system and the root\naccount only)\n103\nChapter 7: Passwords\nDictionary attacks\nDictionary attacks quickly compare a set of known dictionary-type words —\nincluding many common passwords — against a password database. This\ndatabase is a text file with hundreds if not thousands of dictionary words\ntypically listed in alphabetical order. For instance, suppose that you have a\ndictionary file that you downloaded from one of the sites in the following list.\nThe English dictionary file at the Purdue site contains one word per line start-\ning with 10th, 1st . . . all the way to zygote.\nMany password-cracking utilities can use a separate dictionary that you\ncreate or download from the Internet. Here are some popular sites that house\ndictionary files and other miscellaneous word lists:\n✓ ftp://ftp.cerias.purdue.edu/pub/dict\n✓ www.outpost9.com/files/WordLists.html\nDon’t forget to use other language files as well, such as Spanish and Klingon.\nDictionary attacks are only as good as the dictionary files you supply to your\npassword-cracking program. You can easily spend days, even weeks, trying\nto crack passwords with a dictionary attack. If you don’t set a time limit or\nsimilar expectation going in, you’ll likely find that dictionary cracking is often\na mere exercise in futility. Most dictionary attacks are good for weak (easily\nguessed) passwords. However, some special dictionaries have common mis-\nspellings or alternative spellings of words, such as pa$$w0rd (password)\nand 5ecur1ty (security). Additionally, special dictionaries can contain non-\nEnglish words and thematic words from religions, politics, or Star Trek.\nBrute-force attacks\nBrute-force attacks can crack practically any password, given sufficient\ntime. Brute-force attacks try every combination of numbers, letters, and\nspecial characters until the password is discovered. Many password-\ncracking utilities let you specify such testing criteria as the character sets,\npassword length to try, and known characters (for a “mask” attack). Sample\nProactive Password Auditor brute-force password-cracking options are\nshown in Figure 7-1.\nA brute-force test can take quite a while, depending on the number of\naccounts, their associated password complexities, and the speed of the com-\nputer that’s running the cracking software. As powerful as brute-force testing\ncan be, it literally can take forever to exhaust all possible password combina-\ntions, which in reality is not practical in every situation.\n104\nPart II: Putting Ethical Hacking in Motion\nFigure 7-1:\nBrute-force\npassword-\ncracking\noptions in\nProactive\nPassword\nAuditor.\nSmart hackers attempt logins slowly or at random times so the failed login\nattempts aren’t as predictable or obvious in the system log files. Some mali-\ncious users might even call the IT help desk to attempt a reset of the account\nthey just locked out. This social engineering technique could be a major issue,\nespecially if the organization has no (or minimal) mechanisms in place to\nverify that locked-out users are who they say they are.\nCan an expiring password deter a hacker’s attack and render password-\ncracking software useless? Yes. After the password is changed, the cracking\nmust start again if the hacker wants to test all the possible combinations.\nThis is one reason why it’s a good idea to change passwords periodically.\nShortening the change interval can reduce the risk of passwords being cracked\nbut can also be politically unfavorable in your business. You have to strike a\nbalance between security and convenience/usability. Refer to the United States\nDepartment of Defense’s Password Management Guideline document (www.\nitl.nist.gov/fipspubs/app-e.htm) for more information on this topic.\nExhaustive password-cracking attempts usually aren’t necessary. Most pass-\nwords are fairly weak. Even minimum password requirements, such as a\npassword length, can help you in your testing. You might be able to discover\nsecurity policy information by using other tools or via your web browser. (See\nPart IV for tools and techniques for testing the security of operating systems.\nSee Chapter 14 for information on testing websites/applications.) If you find\n105\nChapter 7: Passwords\nthis password policy information, you can configure your cracking programs\nwith more well-defined cracking parameters, which often generate faster\nresults.\nRainbow attacks\nA rainbow password attack uses rainbow cracking (see the earlier sidebar, “A\ncase study in Windows password vulnerabilities with Dr. Philippe Oechslin”)\nto crack various password hashes for LM, NTLM, Cisco PIX, and MD5 much\nmore quickly and with extremely high success rates (near 100 percent).\nPassword-cracking speed is increased in a rainbow attack because the\nhashes are precalculated and thus don’t have to be generated individually on\nthe fly as they are with dictionary and brute-force cracking methods.\nUnlike dictionary and brute-force attacks, rainbow attacks cannot be used to\ncrack password hashes of unlimited length. The current maximum length for\nMicrosoft LM hashes is 14 characters, and the maximum is up to 16 charac-\nters (dictionary-based) for Windows Vista and 7 hashes (also known as NT\nhashes). The rainbow tables are available for purchase and download via the\nophcrack site at http://ophcrack.sourceforge.net. There’s a length\nlimitation because it takes significant time to generate these rainbow tables.\nGiven enough time, a sufficient number of tables will be created. Of course, by\nthen, computers and applications likely have different authentication mecha-\nnisms and hashing standards — including a new set of vulnerabilities — to\ncontend with. Job security for ethical hacking never ceases to grow.\nIf you have a good set of rainbow tables, such as those offered via the oph-\ncrack site and Project RainbowCrack (http://project-rainbowcrack.\ncom), you can crack passwords in seconds, minutes, or hours versus the\ndays, weeks, or even years required by dictionary and brute-force methods.\nCracking Windows passwords with pwdump3 and John the Ripper\nThe following steps use two of my favorite utilities to test the security of cur-\nrent passwords on Windows systems:\n✓ pwdump3 (to extract password hashes from the Windows SAM database)\n✓ John the Ripper (to crack the hashes of Windows and Linux/UNIX\npasswords)\nThe following test requires administrative access to either your Windows\nstandalone workstation or the server:\n1. Create a new directory called passwords from the root of your\nWindows C: drive.\n2. Download and install a decompression tool if you don’t already have\none.\n106\nPart II: Putting Ethical Hacking in Motion\nWinZip (www.winzip.com) is a good commercial tool I use and 7-Zip\n(www.7-zip.org) is a free decompression tool. Windows XP, Windows\nVista, and Windows 7 also include built-in Zip file handling.\n3. Download, extract, and install the following software into the pass-\nwords directory you created, if you don’t already have it on your\nsystem:\n• pwdump3: Download the file from www.openwall.com/passwords/\nmicrosoft-windows-nt-2000-xp-2003-vista-7#pwdump\n• John the Ripper: Download the file from www.openwall.com/john\n4. Enter the following command to run pwdump3 and redirect its output\nto a file called cracked.txt:\nc:\\passwords\\pwdump3 > cracked.txt\nThis file captures the Windows SAM password hashes that are cracked\nwith John the Ripper. Figure 7-2 shows the contents of the cracked.\ntxt file that contains the local Windows SAM database password\nhashes.\nFigure 7-2:\nOutput from\npwdump3.\n5. Enter the following command to run John the Ripper against the\nWindows SAM password hashes to display the cracked passwords:\nc:\\passwords\\john cracked.txt\nThis process — shown in Figure 7-3 — can take seconds or days,\ndepending on the number of users and the complexity of their associ-\nated passwords. My Windows example took only five seconds to crack\nfive weak passwords.\nFigure 7-3:\nCracked\npassword\nfile hashes\nusing John\nthe Ripper.\n107\nChapter 7: Passwords\nCracking UNIX/Linux passwords with John the Ripper\nJohn the Ripper can also crack UNIX/Linux passwords. You need root access\nto your system and to the password (/etc/passwd) and shadow password\n(/etc/shadow) files. Perform the following steps for cracking UNIX/Linux\npasswords:\n1. Download the UNIX source files from www.openwall.com/john.\n2. Extract the program by entering the following command:\n[root@localhost kbeaver]#tar -zxf john-1.7.9.tar.gz\nor whatever the current filename is.\nYou can also crack UNIX or Linux passwords on a Windows system by\nusing the Windows/DOS version of John the Ripper.\n3. Change to the /src directory that was created when you extracted the\nprogram and enter the following command:\nmake generic\n4. Change to the /run directory and enter the following command to use\nthe unshadow program to combine the passwd and shadow files and\ncopy them to the file cracked.txt:\n./unshadow /etc/passwd /etc/shadow > cracked.txt\nThe unshadow process won’t work with all UNIX variants.\n5. Enter the following command to start the cracking process:\n./john cracked.txt\nWhen John the Ripper is complete (and this could take some time), the\noutput is similar to the results of the preceding Windows process. (Refer\nto Figure 7-3.)\nAfter completing the preceding Windows or UNIX steps, you can either force\nusers to change passwords that don’t meet specific password policy require-\nments, you can create a new password policy, or you can use the information\nto update your security awareness program. Just do something.\nBe careful handling the results of your password cracking. You create an\naccountability issue because more than one person now knows the pass-\nwords. Always treat the password information of others as strictly confi-\ndential. If you end up storing them on your test system, make sure it’s extra\nsecure. If it’s a laptop, encrypting the hard drive is the best defense.\n108\nPart II: Putting Ethical Hacking in Motion\nPasswords by the numbers\nOne hundred twenty-eight different ASCII char- combination of 95 or so ASCII letters, numbers,\nacters are used in typical computer passwords. and standard punctuation characters, such a\n(Technically, only 126 characters are used file would still fill thousands of terabytes of stor-\nbecause you can’t use the NULL and the car- age space. These storage requirements force\nriage return characters.) A truly random eight- dictionary and brute-force password-cracking\ncharacter password that uses 126 different programs to form the password combinations on\ncharacters can have 63,527,879,748,485,376 dif- the fly, instead of reading all possible combina-\nferent combinations. Taking that a step further, tions from a text file. That’s why rainbow attacks\nif it were possible (and it is in Linux and UNIX) to are more effective at cracking passwords than\nuse all 256 ASCII characters (254, without NULL dictionary and brute-force attacks.\nand carriage return characters) in a password,\nGiven the effectiveness of rainbow password\n17,324,859,965,700,833,536 different combina-\nattacks, it’s realistic to think that eventually,\ntions would be available. This is approximately\nanyone will be able to crack all possible pass-\n2.7 billion times more combinations than there\nword combinations, given the current technol-\nare people on earth!\nogy and average lifespan. It probably won’t\nA text file containing all the possible passwords happen; however, many thought in the 1980s\nwould require millions of terabytes of storage that 640K of RAM and a 10MB hard drive in a\nspace. Even if you include only the more realistic PC were all that would ever be needed!\nCracking password-protected files\nDo you wonder how vulnerable password-protected word-processing,\nspreadsheet, and Zip files are when users send them into the wild blue\nyonder? Wonder no more. Some great utilities can show how easily pass-\nwords are cracked.\nCracking files\nMost password-protected files can be cracked in seconds or minutes. You\ncan demonstrate this “wow factor” security vulnerability to users and man-\nagement. Here’s a hypothetical scenario that could occur in the real world:\n1. Your CFO wants to send some confidential financial information in an\nExcel spreadsheet to a company board member.\n2. She protects the spreadsheet by assigning it a password during the file-\nsave process in Excel.\n3. For good measure, she uses WinZip to compress the file and adds\nanother password to make it really secure.\n4. The CFO sends the spreadsheet as an e-mail attachment, assuming that\nthe e-mail will reach its destination.\n109\nChapter 7: Passwords\nThe financial advisor’s network has content filtering, which monitors\nincoming e-mails for keywords and file attachments. Unfortunately, the\nfinancial advisory firm’s network administrator is looking in the content-\nfiltering system to see what’s coming in.\n5. This rogue network administrator finds the e-mail with the confidential\nattachment, saves the attachment, and realizes that it’s password protected.\n6. The network administrator remembers a great password-cracking tool\navailable from Elcomsoft called Advanced Archive Password Recovery\n(www.elcomsoft.com/archpr.html) that can help him out so he pro-\nceeds to use it to crack the password.\nCracking password-protected files is as simple as that! Now all that the rogue\nnetwork administrator must do is forward the confidential spreadsheet to his\nbuddies or to the company’s competitors.\nIf you carefully select the right options in Advanced Archive Password\nRecovery, you can drastically shorten your testing time. For example, if you\nknow that a password is not over five characters long or is lowercase letters\nonly, you can cut the cracking time in half.\nI recommend performing these file-password-cracking tests on files that you\ncapture with a content filtering or network analysis tool. This is a good way\nto determine whether your users are adhering to policy and using adequate\npasswords to protect sensitive information they’re sending.\nCountermeasures\nThe best defense against weak file password protection is to require your\nusers to use a stronger form of file protection, such as PGP, or the AES\nencryption that’s built in to WinZip, when necessary. Ideally, you don’t want\nto rely on users to make decisions about what they should use to secure\nsensitive information, but it’s better than nothing. Stress that a file encryp-\ntion mechanism, such as a password-protected Zip file, is secure only if users\nkeep their passwords confidential and never transmit or store them in unse-\ncure cleartext (such as in a separate e-mail).\nIf you’re concerned about unsecure transmissions through e-mail, consider\nusing a content-filtering system or a data leak–prevention system to block all\noutbound e-mail attachments that aren’t protected on your e-mail server.\nUnderstanding other ways\nto crack passwords\nOver the years, I’ve found other ways to crack (or capture) passwords techni-\ncally and through social engineering.\n110\nPart II: Putting Ethical Hacking in Motion\nKeystroke logging\nOne of the best techniques for capturing passwords is remote keystroke\nlogging — the use of software or hardware to record keystrokes as they’re\ntyped into the computer.\nBe careful with keystroke logging. Even with good intentions, monitoring\nemployees raises various legal issues if it’s not done correctly. Discuss\nwith your legal counsel what you’ll be doing, ask for their guidance, and get\napproval from upper management.\nLogging tools\nWith keystroke-logging tools, you can assess the log files of your application\nto see what passwords people are using:\n✓ Keystroke-logging applications can be installed on the monitored com-\nputer. I recommend that you check out eBlaster and Spector Pro by\nSpectorSoft (www.spectorsoft.com). Another popular tool is Invisible\nKeyLogger Stealth, available at www.amecisco.com/iks.htm. Dozens\nof other such tools are available on the Internet.\n✓ Hardware-based tools, such as KeyGhost (www.keyghost.com), fit\nbetween the keyboard and the computer or replace the keyboard\naltogether.\nA keystroke-logging tool installed on a shared computer can capture the pass-\nwords of every user who logs in.\nCountermeasures\nThe best defense against the installation of keystroke-logging software on\nyour systems is to use an anti-malware program or similar endpoint protec-\ntion software that monitors the local host. It’s not foolproof but can help. As\nfor physical keyloggers, you’ll need to visually inspect each system.\nThe potential for hackers to install keystroke-logging software is another\nreason to ensure that your users aren’t downloading and installing random\nshareware or opening attachments in unsolicited e-mails. Consider locking\ndown your desktops by setting the appropriate user rights through local or\ngroup security policy in Windows. Alternatively, you could use a commer-\ncial lockdown program, such as Fortres 101 (www.fortresgrand.com) for\nWindows or Deep Freeze Enterprise (www.faronics.com/products/deep-\nfreeze/enterprise) for Windows, Linux, and Mac OS X.\nWeak password storage\nMany legacy and standalone applications, such as e-mail, dial-up network\nconnections, and accounting software, store passwords locally, making them\nvulnerable to password hacking. By performing a basic text search, I’ve found\npasswords stored in cleartext on the local hard drives of machines. You can\nautomate the process even further by using a program called Identity Finder\n111\nChapter 7: Passwords\n(www.identityfinder.com/us/Business). I cover these file and related\nstorage vulnerabilities in Chapter 15.\nSearching\nYou can try using your favorite text-searching utility — such as the Windows\nsearch function, findstr, or grep — to search for password or passwd on\nyour computer’s drives. You might be shocked to find what’s on your systems.\nSome programs even write passwords to disk or leave them stored in memory.\nWeak password storage is a criminal hacker’s dream. Head it off if you can.\nCountermeasures\nThe only reliable way to eliminate weak password storage is to use only\napplications that store passwords securely. This might not be practical, but\nit’s your only guarantee that your passwords are secure. Another option is to\ninstruct users not to store their passwords when prompted.\nBefore upgrading applications, contact your software vendor to see how they\nmanage passwords, or search for a third-party solution.\nNetwork analyzer\nA network analyzer sniffs the packets traversing the network. This is what\nthe bad guys do if they can gain control of a computer, tap into your wireless\nnetwork, or gain physical network access to set up their network analyzer.\nIf they gain physical access, they can look for a network jack on the wall and\nplug right in!\nTesting\nFigure 7-4 shows how crystal-clear passwords can be through the eyes of\na network analyzer. This figure shows how Cain & Abel (www.oxid.it/\ncain.html) can glean thousands of passwords going across the network in\na matter of a couple of hours. As you can see in the left pane, these cleartext\npassword vulnerabilities can apply to FTP, web, telnet, and more. (The actual\nusernames and passwords are blurred out to protect them.)\nIf traffic is not tunneled through a VPN, SSH, SSL, or some other form of\nencrypted link, it’s vulnerable to attack.\nCain & Abel is a password-cracking tool that also has network analysis capa-\nbilities. You can also use a regular network analyzer, such as the commercial\nproducts OmniPeek (www.wildpackets.com/products/omnipeek_\nnetwork_analyzer) and CommView (www.tamos.com/products/\ncommview) as well as the free open source program, Wireshark (www.wire\nshark.org). With a network analyzer, you can search for password traffic in\nvarious ways. For example, to capture POP3 password traffic, you can set up\na filter and a trigger to search for the PASS command. When the network ana-\nlyzer sees the PASS command in the packet, it captures that specific data.\n112\nPart II: Putting Ethical Hacking in Motion\nFigure 7-4:\nUsing Cain\n& Abel to\ncapture\npasswords\ngoing\nacross the\nnetwork.\nNetwork analyzers require you to capture data on a hub segment of your net-\nwork or via a monitor/mirror/span port on a switch. Otherwise, you can’t see\nanyone else’s data traversing the network — just yours. Check your switch’s\nuser guide for whether it has a monitor or mirror port and instructions on\nhow to configure it. You can connect your network analyzer to a hub on the\npublic side of your firewall. You’ll capture only those packets that are enter-\ning or leaving your network — not internal traffic. I cover this type of network\ninfrastructure hacking in detail in Chapter 8.\nCountermeasures\nHere are some good defenses against network analyzer attacks:\n✓ Use switches on your network, not hubs. If you must use hubs on net-\nwork segments, a program like sniffdet (http://sniffdet.source\nforge.net) for UNIX-based systems and PromiscDetect (http://nt\nsecurity.nu/toolbox/promiscdetect) for Windows can detect\nnetwork cards in promiscuous mode (accepting all packets, whether\ndestined for the local machine or not). A network card in promiscuous\nmode signifies that a network analyzer is running on the network.\n✓ Make sure that unsupervised areas, such as an unoccupied lobby or\ntraining room, don’t have live network connections.\n✓ Don’t let anyone without a business need gain physical access to your\nswitches or to the network connection on the public side of your fire-\nwall. With physical access, a hacker can connect to a switch monitor\nport or tap into the unswitched network segment outside the firewall\nand capture packets.\nSwitches don’t provide complete security because they’re vulnerable to ARP\npoisoning attacks, which I cover in Chapter 8.\n113\nChapter 7: Passwords\nWeak BIOS passwords\nMost computer BIOS (basic input/output system) settings allow power-on\npasswords and/or setup passwords to protect the computer’s hardware set-\ntings that are stored in the CMOS chip. Here are some ways around these\npasswords:\n✓ You can usually reset these passwords either by unplugging the CMOS\nbattery or by changing a jumper on the motherboard.\n✓ Password-cracking utilities for BIOS passwords are available on the\nInternet and from computer manufacturers.\n✓ If gaining access to the hard drive is your ultimate goal, you can simply\nremove the hard drive from the computer and install it in another one and\nyou’re good to go. This is a great way to prove that BIOS/power-on pass-\nwords are not an effective countermeasure for lost or stolen laptops.\nFor a good list of default system passwords for various vendor equipment,\ncheck www.cirt.net/passwords.\nThere are tons of variables for hacking and hacking countermeasures\ndepending on your hardware setup. If you plan to hack your own BIOS\npasswords, check for information in your user manual or refer to the BIOS\npassword-hacking guide I wrote at http://searchenterprisedesktop.\ntechtarget.com/tutorial/BIOS-password-hacking. If protecting the\ninformation on your hard drives is your ultimate goal, then full (sometimes\nreferred to as whole) disk is the best way to go. I cover mobile-related pass-\nword cracking in-depth in Chapter 10.\nWeak passwords in limbo\nBad guys often exploit user accounts that have just been created or reset\nby a network administrator or help desk. New accounts might need to be\ncreated for new employees or even for your own ethical hacking purposes.\nAccounts might need to be reset if users forget their passwords or if the\naccounts have been locked out because of failed attempts.\nWeaknesses\nHere are some reasons why user accounts can be vulnerable:\n✓ When user accounts are reset, they often are assigned an easily cracked\npassword (such as the user’s name or the word password). The time\nbetween resetting the user account and changing the password is a\nprime opportunity for a break-in.\n✓ Many systems have either default accounts or unused accounts with\nweak passwords or no passwords at all. These are prime targets.\n114\nPart II: Putting Ethical Hacking in Motion\nCountermeasures\nThe best defenses against attacks on passwords in limbo are solid help desk\npolicies and procedures that prevent weak passwords from being available\nat any given time during the new account generation and password reset pro-\ncesses. Perhaps the best ways to overcome this vulnerability are as follows:\n✓ Require users to be on the phone with the help desk, or have a help\ndesk member perform the reset at the user’s desk.\n✓ Require that the user immediately log in and change the password.\n✓ If you need the ultimate in security, implement stronger authentication\nmethods, such as challenge/response questions, smart cards, or digital\ncertificates.\n✓ Automate password reset functionality via self-service tools on your\nnetwork so users can manage most of their password problems without\nhelp from others.\nI cover mobile-related password cracking in Chapter 10 and website/applica-\ntion password cracking in Chapter 14.\nGeneral Password-Cracking\nCountermeasures\nA password for one system usually equals passwords for many other systems\nbecause many people use the same (or at least similar) passwords on every\nsystem they use. For this reason, you might want to consider instructing\nusers to create different passwords for different systems, especially on the\nsystems that protect information that’s more sensitive. The only downside to\nthis is that users have to keep multiple passwords and, therefore, might be\ntempted to write them down, which can negate any benefits.\nStrong passwords are important, but you need to balance security and\nconvenience:\n✓ You can’t expect users to memorize passwords that are insanely com-\nplex and must be changed every few weeks.\n✓ You can’t afford weak passwords or no passwords at all, so come up\nwith a strong password policy and accompanying standard — preferably\none that requires long and strong passphrases (combinations of words\nthat are easily remembered yet next to impossible to crack) that have to\nbe changed only once or twice a year.\n115\nChapter 7: Passwords\nStoring passwords\nIf you have to choose between weak passwords that your users can memorize\nand strong passwords that your users must write down, I recommend having\nreaders write down passwords and store the information securely. Train users\nto store their written passwords in a secure place — not on keyboards or in\neasily cracked password-protected computer files (such as spreadsheets).\nUsers should store a written password in either of these locations:\n✓ A locked file cabinet or office safe\n✓ Full (whole) disk encryption which can prevent an intruder from ever\naccessing the OS and passwords stored on the system. Just know it’s\nnot foolproof, as I outline in Chapter 10.\n✓ A secure password management tool such as\n• LastPass (http://lastpass.com)\n• Password Safe, an open source software originally developed by\nCounterpane (http://passwordsafe.sourceforge.net)\nNo passwords on sticky notes! People joke about it, but it still happens a lot,\nand it’s not good for business!\nCreating password policies\nAs an ethical hacker, you should show users the importance of securing their\npasswords. Here are some tips on how to do that:\n✓ Demonstrate how to create secure passwords. Refer to them as\npassphrases because people tend to take passwords literally and use only\nwords, which can be less secure.\n✓ Show what can happen when weak passwords are used or passwords\nare shared.\n✓ Diligently build user awareness of social engineering attacks.\nEnforce (or at least encourage the use of) a strong password-creation policy\nthat includes the following criteria:\n✓ Use upper- and lowercase letters, special characters, and numbers.\nNever use only numbers. Such passwords can be cracked quickly.\n✓ Misspell words or create acronyms from a quote or a sentence. For\nexample, ASCII is an acronym for American Standard Code for Information\nInterchange that can also be used as part of a password.\n116\nPart II: Putting Ethical Hacking in Motion\n✓ Use punctuation characters to separate words or acronyms.\n✓ Change passwords every 6 to 12 months or immediately if they’re sus-\npected of being compromised. Anything more frequent introduces an\ninconvenience that serves only to create more vulnerabilities.\n✓ Use different passwords for each system. This is especially important\nfor network infrastructure hosts, such as servers, firewalls, and routers.\nIt’s okay to use similar passwords — just make them slightly different\nfor each type of system, such as SummerInTheSouth-Win7 for Windows\nsystems and Linux+SummerInTheSouth for Linux systems.\n✓ Use variable-length passwords. This trick can throw off attackers\nbecause they won’t know the required minimum or maximum length of\npasswords and must try all password length combinations.\n✓ Don’t use common slang words or words that are in a dictionary.\n✓ Don’t rely completely on similar-looking characters, such as 3 instead\nof E, 5 instead of S, or ! instead of 1. Password-cracking programs can\ncheck for this.\n✓ Don’t reuse the same password within at least four to five password\nchanges.\n✓ Use password-protected screen savers. Unlocked screens are a great\nway for systems to be compromised even if their hard drives are\nencrypted.\n✓ Don’t share passwords. To each his or her own!\n✓ Avoid storing user passwords in an unsecured central location, such\nas an unprotected spreadsheet on a hard drive. This is an invitation for\ndisaster. Use Password Safe or a similar program to store user passwords.\nTaking other countermeasures\nHere are some other password-hacking countermeasures that I recommend:\n✓ Enable security auditing to help monitor and track password attacks.\n✓ Test your applications to make sure they aren’t storing passwords\nindefinitely in memory or writing them to disk. A good tool for this is\nWinHex (www.winhex.com/winhex/index-m.html). I’ve used this\ntool to search a computer’s memory for password, pass=, login, and so\non and have come up with some passwords that the developers thought\nwere cleared from memory.\nSome password-cracking Trojan-horse applications are transmitted\nthrough worms or simple e-mail attachments. Such malware can be\nlethal to your password-protection mechanisms if they’re installed on\n117\nChapter 7: Passwords\nyour systems. The best defense is malware protection or whitelisting\nsoftware, from Symantec, McAfee, or Bit9.\n✓ Keep your systems patched. Passwords are reset or compromised\nduring buffer overflows or other denial of service (DoS) conditions.\n✓ Know your user IDs. If an account has never been used, delete or\ndisable the account until it’s needed. You can determine unused\naccounts by manual inspection or by using a tool such as DumpSec\n(www.systemtools.com/somarsoft/?somarsoft.com), a tool\nthat can enumerate the Windows operating system and gather user\nIDs and other information.\nAs the security administrator in your organization, you can enable account\nlockout to prevent password-cracking attempts. Account lockout is the ability\nto lock user accounts for a certain time after a certain number of failed login\nattempts has occurred. Most operating systems (and some applications)\nhave this capability. Don’t set it too low (fewer than five failed logins), and\ndon’t set it too high to give a malicious user a greater chance of breaking in.\nSomewhere between 5 and 50 might work for you. I usually recommend a\nsetting of around 10 or 15. Consider the following when configuring account\nlockout on your systems:\n✓ To use account lockout to prevent any possibilities of a user DoS condi-\ntion, require two different passwords, and don’t set a lockout time for\nthe first one if that feature is available in your operating system.\n✓ If you permit autoreset of the account after a certain period — often\nreferred to as intruder lockout — don’t set a short time period. Thirty\nminutes often works well.\nA failed login counter can increase password security and minimize the\noverall effects of account lockout if the account experiences an automated\nattack. A login counter can force a password change after a number of failed\nattempts. If the number of failed login attempts is high and occurred over\na short period, the account has likely experienced an automated password\nattack.\nOther password-protection countermeasures include\n✓ Stronger authentication methods. Examples of these are challenge/\nresponse, smart cards, tokens, biometrics, or digital certificates.\n✓ Automated password reset. This functionality lets users manage most of\ntheir password problems without getting others involved. Otherwise, this\nsupport issue becomes expensive, especially for larger organizations.\n✓ Password-protect the system BIOS. This is especially important on serv-\ners and laptops that are susceptible to physical security threats and\nvulnerabilities.\n118\nPart II: Putting Ethical Hacking in Motion\nSecuring Operating Systems\nYou can implement various operating system security measures to ensure\nthat passwords are protected.\nRegularly perform these low-tech and high-tech password-cracking tests to\nmake sure that your systems are as secure as possible — perhaps as part of a\nmonthly, quarterly, or biannual audit.\nWindows\nThe following countermeasures can help prevent password hacks on\nWindows systems:\n✓ Some Windows passwords can be gleaned by simply reading the clear-\ntext or crackable ciphertext from the Windows Registry. Secure your\nregistries by doing the following:\n• Allow only administrator access.\n• Harden the operating system by using well-known hardening\nbest practices, such as those from SANS (www.sans.or), NIST\n(http://csrc.nist.gov), the Center for Internet Security\nBenchmarks/Scoring Tools (www.cisecurity.org), and the ones\noutlined in Network Security For Dummies by Chey Cobb.\n✓ Keep all SAM database backup copies secure.\n✓ Disable the storage of LM hashes in Windows for passwords that are\nshorter than 15 characters.\nFor example, you can create and set the NoLMHash registry key to a value\nof 1 under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\\nControl\\Lsa.\n✓ Use local or group security policies to help eliminate weak passwords\non Windows systems before they’re created.\n✓ Disable null sessions in your Windows version.\n✓ In Windows XP and later versions, enable the Do Not Allow Anonymous\nEnumeration of SAM Accounts and Shares option in the local security\npolicy.\nChapter 11 covers Windows hacks you need to understand and test in more\ndetail.\n119\nChapter 7: Passwords\nLinux and UNIX\nThe following countermeasures can help prevent password cracks on Linux\nand UNIX systems:\n✓ Ensure that your system is using shadowed MD5 passwords.\n✓ Help prevent the creation of weak passwords. You can use either the\nbuilt-in operating system password filtering (such as cracklib in Linux)\nor a password-auditing program (such as npasswd or passwd+).\n✓ Check your /etc/passwd file for duplicate root UID entries. Hackers\ncan exploit such entries to gain backdoor access.\nChapter 12 explains the Linux hacks and how to test Linux systems for\nvulnerabilities.\n120\nPart II: Putting Ethical Hacking in Motion"
  },
  {
    "input": "",
    "summary": "",
    "output": "Part III\nHacking Network\nHosts\nIn this part . . .\nN\now that you’re off and running with your ethical\nhacking tests, it’s time to take things to a new level.\nThe tests in the previous part — at least the social engi-\nneering and physical security tests — start at a high level\nand are not that technical. Times, they are a-changin’! You\nnow need to look at network security. This is where things\nstart getting more involved.\nThis part starts by looking at the network from the inside\nand the outside for perimeter security holes, network\ndevice exploits, DoS vulnerabilities, and more. This part\nthen looks at how to assess the security of wireless LANs\nthat introduce some serious security vulnerabilities into\nnetworks these days. Finally, this part delves into the\never-growing number of mobile devices that employees\nuse to connect to the network as they please.\nChapter 8\nNetwork Infrastructure\nIn This Chapter\n▶ Selecting tools\n▶ Scanning network hosts\n▶ Assessing security with a network analyzer\n▶ Preventing denial-of-service and infrastructure vulnerabilities\nT\no have secure operating systems and applications, you need a secure\nnetwork. Devices such as routers, firewalls, and even generic hosts\n(including servers and workstations) must be assessed as part of the ethical\nhacking process.\nThere are thousands of possible network vulnerabilities, equally as many\ntools, and even more testing techniques. You probably don’t have the time or\nresources available to test your network infrastructure systems for all pos-\nsible vulnerabilities, using every tool and method imaginable. Instead, you\nneed to focus on tests that will produce a good overall assessment of your\nnetwork — and the tests I describe in this chapter produce exactly that.\nYou can eliminate many well-known, network-related vulnerabilities by simply\npatching your network hosts with the latest vendor software and firmware\nupdates. Because most network infrastructure systems aren’t publicly acces-\nsible, odds are good that your network hosts will not be attacked from the out-\nside. Even when they are, the results aren’t likely to be detrimental. You can\neliminate many other vulnerabilities by following some solid security practices\non your network, as described in this chapter. The tests, tools, and techniques\noutlined in this chapter offer the most bang for your ethical hacking buck.\nThe better you understand network protocols, the easier network vulnerabil-\nity testing is because network protocols are the foundation for most informa-\ntion security concepts. If you’re a little fuzzy on how networks work, I highly\nencourage you to read TCP/IP For Dummies, 6th Edition, by Candace Leiden\nand Marshall Wilensky. TCP/IP For Dummies is one of the original books that\nhelped me develop my foundation of networking concepts early on. The\nRequest for Comments (RFCs) list on the Official Internet Protocol Standards\npage, www.rfc-editor.org/rfcxx00.html, is a good reference as well.\n124\nPart III: Hacking Network Hosts\nA case study in hacking network infrastructures\nwith Laura Chappell\nLaura Chappell — one of the world’s fore- wanted to investigate them further without the\nmost authorities on network protocols and users’ knowledge.\nanalysis — shared with me an interesting\nMs. Chappell decided to use her own Kazaa\nexperience she had when assessing a cus-\nand Gnutella clients to look through the shared\ntomer’s network.\nfolders of the systems. By becoming a peer\nThe Situation member with the other hosts on the network,\nMs. Chappell could perform searches through\nA customer called Ms. Chappell with a rou-\nother shared folders, which indicated some of\ntine “the network is slow” problem. Upon Ms.\nthe users had shared their network directories.\nChappell’s arrival onsite, the customer men-\nThrough these shared folders, Ms. Chappell\ntioned sporadic outages and poor performance\nobtained the corporate personnel roster,\nwhen connecting to the Internet. First, Ms.\nincluding home phone numbers and addresses,\nChappell examined individual flows between\naccounting records, and several confidential\nvarious clients and servers. Localized commu-\nmemos that provided timelines for projects at\nnications appeared normal, but any communi-\nthe company.\ncation that flowed through the firewall to the\nInternet or other branch offices was severely Many users said they shared these folders to\ndelayed. Ms. Chappell sniffed the traffic going regain access to the P2P network because they\nthrough the firewall to see whether she could had been labeled freeloaders — their shares\nisolate the cause of the delay. contained only a few files. They were under\nthe delusion that because no one outside the\nThe Outcome\ncompany knew the filenames contained in the\nA quick review of the traffic crossing the fire- network directories, a search wouldn’t come\nwall indicated that the outside links were satu- up with matching values, and no one would\nrated, so Ms. Chappell needed to review and download those files. Although this onsite visit\nclassify the traffic. Using the network analyzer, started with a standard performance and com-\nMs. Chappell plugged in to examine the proto- munication review, it ended with the detection\ncol distribution. She saw that almost 45 percent of some huge security breaches in the com-\nof the traffic was listed as “others” and was pany. Anyone could have used these P2P tools\nunrecognizable. Laura captured some data to get onto the network and grab the files in\nand found several references to pornographic the shared folders — with no authorization or\nimages. Further examination of the packets led authentication required.\nher to two specific port numbers that appeared\nLaura Chappell is Senior Protocol Analyst at the\nconsistently in the trace files — ports 1214\nProtocol Analysis Institute, LLC (www.packet-\n(Kazaa) and 6346 (Gnutella), two peer-to-peer\nlevel.com). A best-selling author and lecturer,\n(P2P) file-sharing applications. Ms. Chappell\nMs. Chappell has trained thousands of network\ndid a complete port scan of the network to see\nadministrators, security technicians, and law\nwhat was running and found more than 30 sys-\nenforcement personnel on packet-level security,\ntems running either Kazaa or Gnutella. Their file\ntroubleshooting, and optimization techniques. I\ntransfer processes were eating up the band-\nhighly recommend that you check out her website\nwidth and dragging down all communications.\nfor some excellent technical content that can help\nShutting down these systems and removing the\nyou become a better ethical hacker.\napplications would have been simple, but Laura\n125\nChapter 8: Network Infrastructure\nUnderstanding Network Infrastructure\nVulnerabilities\nNetwork infrastructure vulnerabilities are the foundation for most technical\nsecurity issues in your information systems. These lower-level vulnerabilities\naffect practically everything running on your network. That’s why you need\nto test for them and eliminate them whenever possible.\nYour focus for ethical hacking tests on your network infrastructure should be\nto find weaknesses that others can see in your network so you can quantify\nyour network’s level of exposure.\nMany issues are related to the security of your network infrastructure. Some\nissues are more technical and require you to use various tools to assess them\nproperly. You can assess others with a good pair of eyes and some logical\nthinking. Some issues are easy to see from outside the network, and others are\neasier to detect from inside your network.\nWhen you assess your company’s network infrastructure security, you need\nto look at the following:\n✓ Where devices, such as a firewall or an IPS, are placed on the network\nand how they’re configured\n✓ What external attackers see when they perform port scans and how they\ncan exploit vulnerabilities in your network hosts\n✓ Network design, such as Internet connections, remote access capabili-\nties, layered defenses, and placement of hosts on the network\n✓ Interaction of installed security devices, such as firewalls, intrusion pre-\nvention systems (IPSs), antivirus, and so on\n✓ What protocols are in use\n✓ Commonly attacked ports that are unprotected\n✓ Network host configurations\n✓ Network monitoring and maintenance\nIf someone exploits a vulnerability in one of the items in the preceding list or\nanywhere in your network’s security, bad things can happen:\n✓ A hacker can launch a denial of service (DoS) attack, which can take\ndown your Internet connection — or your entire network.\n✓ A malicious employee using a network analyzer can steal confidential\ninformation in e-mails and files sent over the network.\n126\nPart III: Hacking Network Hosts\n✓ A hacker can set up back-door access into your network.\n✓ A hacker can attack specific hosts by exploiting local vulnerabilities\nacross the network.\nBefore assessing your network infrastructure security, remember to do the\nfollowing:\n✓ Test your systems from the outside in, the inside out, and the inside in\n(that is, on and between internal network segments and demilitarized\nzones [DMZs]).\n✓ Obtain permission from partner networks to check for vulnerabilities\non their systems that can affect your network’s security, such as open\nports, lack of a firewall, or a misconfigured router.\nChoosing Tools\nAs with all ethical hacking, your network security tests require the right\ntools — you need port scanners, protocol analyzers, and vulnerability assess-\nment tools. Great commercial, shareware, and freeware tools are available. I\ndescribe a few of my favorite tools in the following sections. Just keep in mind\nthat you need more than one tool because no tool does everything you need.\nIf you’re looking for easy-to-use security tools with all-in-one packaging, you\nget what you pay for most of the time — especially for the Windows platform.\nTons of security professionals swear by many free security tools, especially\nthose that run on Linux and other UNIX-based operating systems. Many of\nthese tools offer a lot of value — if you have the time, patience, and willing-\nness to learn their ins and outs. It’d behoove you to compare the results of\nthe free tools with that of their commercial counterparts. I’ve definitely found\nsome discrepancies.\nScanners and analyzers\nThese scanners provide practically all the port scanning and network testing\nyou need:\n✓ Cain & Abel (www.oxid.it/cain.html) for network analysis and ARP\npoisoning\n✓ Essential NetTools (www.tamos.com/products/nettools) for a wide\nvariety of network scanning functionality\n✓ NetScanTools Pro (www.netscantools.com) for dozens of network\nsecurity assessment functions, including ping sweeps, port scanning,\nand SMTP relay testing\n127\nChapter 8: Network Infrastructure\n✓ Getif (www.wtcs.org/snmp4tpc/getif.htm) for SNMP enumeration\n✓ Nmap (http://nmap.org) — or NMapWin (http://sourceforge.\nnet/projects/nmapwin), the happy-clicky-GUI front end to Nmap —\nfor host-port probing and operating system fingerprinting\n✓ WildPackets’ OmniPeek (www.wildpackets.com/products/\nomnipeek_network_analyzer) for network analysis\n✓ Wireshark (www.wireshark.org) for network analysis\nVulnerability assessment\nThese vulnerability assessment tools allow you to test your network hosts\nfor various known vulnerabilities as well as potential configuration issues\nthat could lead to security exploits:\n✓ GFI LANguard (www.gfi.com/lannetscan) for port scanning and vul-\nnerability testing\n✓ Nexpose (www.rapid7.com/vulnerability-scanner.jsp), an all-\nin-one tool for in-depth vulnerability testing\n✓ QualysGuard (www.qualys.com), a great all-in-one tool for in-depth\nvulnerability testing\nScanning, Poking, and\nProdding the Network\nPerforming the ethical hacks described in the following sections on your net-\nwork infrastructure involves following basic hacking steps:\n1. Gather information and map your network.\n2. Scan your systems to see which ones are available.\n3. Determine what’s running on the systems discovered.\n4. Attempt to penetrate the systems discovered if you choose to.\nEvery network card driver and implementation of TCP/IP in most operating\nsystems, including Windows and Linux, and even in your firewalls and routers,\nhas quirks that result in different behaviors when scanning, poking, and prod-\nding your systems. This can result in different responses from your various\nsystems, including everything from false-positive findings to denial of service\n(DoS) conditions. Refer to your administrator guides or vendor websites for\n128\nPart III: Hacking Network Hosts\ndetails on any known issues and possible patches that are available to fix\nthose issues. If you patched all your systems, you shouldn’t have any issues —\njust know that anything’s possible.\nScanning ports\nA port scanner shows you what’s what on your network by scanning the\nnetwork to see what’s alive and working. Port scanners provide basic views\nof how the network is laid out. They can help identify unauthorized hosts or\napplications and network host configuration errors that can cause serious\nsecurity vulnerabilities.\nThe big-picture view from port scanners often uncovers security issues that\nmight otherwise go unnoticed. Port scanners are easy to use and can test\nnetwork hosts regardless of what operating systems and applications they’re\nrunning. The tests are usually performed relatively quickly without having to\ntouch individual network hosts, which would be a real pain otherwise.\nThe trick to assessing your overall network security is interpreting the\nresults you get from a port scan. You can get false positives on open ports,\nand you might have to dig deeper. For example, User Datagram Protocol\n(UDP) scans — like the protocol itself — are less reliable than Transmission\nControl Protocol (TCP) scans and often produce false positives because\nmany applications don’t know how to respond to random incoming UDP\nrequests.\nA feature-rich scanner such as QualysGuard often can identify ports and see\nwhat’s running in one step.\nPort scans can take a good bit of time. The length of time depends on the\nnumber of hosts you have, the number of ports you scan, the tools you use,\nthe processing power of your test system, and the speed of your network\nlinks.\nAn important tenet to remember is that you need to scan more than just the\nimportant hosts. Leave no stone unturned — if not at first, then eventually.\nThese other systems often bite you if you ignore them. Also, perform the same\ntests with different utilities to see whether you get different results. Not all\ntools find the same open ports and vulnerabilities. This is unfortunate, but it’s\na reality of ethical hacking tests.\nIf your results don’t match after you run the tests using different tools, you\nmight want to explore the issue further. If something doesn’t look right —\nsuch as a strange set of open ports — it probably isn’t. Test again; if you’re in\ndoubt, use another tool for a different perspective.\n129\nChapter 8: Network Infrastructure\nIf possible, you should scan all 65,534 TCP ports on each network host that your\nscanner finds. If you find questionable ports, look for documentation that the\napplication is known and authorized. It’s not a bad idea to scan all 65,534 UDP\nports as well. Just know this can add a considerable amount of time to your scans.\nFor speed and simplicity, you can scan the commonly hacked ports, listed in\nTable 8-1.\nTable 8-1 Commonly Hacked Ports\nPort Number Service Protocol(s)\n7 Echo TCP, UDP\n19 Chargen TCP, UDP\n20 FTP data (File Transfer Protocol) TCP\n21 FTP control TCP\n22 SSH TCP\n23 Telnet TCP\n25 SMTP (Simple Mail Transfer Protocol) TCP\n37 Daytime TCP, UDP\n53 DNS (Domain Name System) UDP\n69 TFTP (Trivial File Transfer Protocol) UDP\n79 Finger TCP, UDP\n80 HTTP (Hypertext Transfer Protocol) TCP\n110 POP3 (Post Office Protocol version 3) TCP\n111 SUN RPC (remote procedure calls) TCP, UDP\n135 RPC/DCE (end point mapper) for Microsoft TCP, UDP\nnetworks\n137, 138, 139, NetBIOS over TCP/IP TCP, UDP\n445\n161 SNMP (Simple Network Management TCP, UDP\nProtocol)\n443 HTTPS (HTTP over SSL) TCP\n512, 513, 514 Berkeley r-services and r-commands (such TCP\nas rsh, rexec, and rlogin)\n1433 Microsoft SQL Server (ms-sql-s) TCP, UDP\n1434 Microsoft SQL Monitor (ms-sql-m) TCP, UDP\n1723 Microsoft PPTP VPN TCP\n3389 Windows Terminal Server TCP\n8080 HTTP proxy TCP\n130\nPart III: Hacking Network Hosts\nPing sweeping\nA ping sweep of all your network subnets and hosts is a good way to find out\nwhich hosts are alive and kicking on the network. A ping sweep is when you\nping a range of addresses using Internet Control Message Protocol (ICMP)\npackets. Figure 8-1 shows the command and the results of using Nmap to per-\nform a ping sweep of a class C subnet range.\nFigure 8-1:\nPerforming\na ping\nsweep of an\nentire class\nC network\nwith Nmap.\nDozens of Nmap command line options exist, which can be overwhelming\nwhen you want only a basic scan. Nonetheless, you can enter nmap on the\ncommand line to see all the options available.\nThe following command line options can be used for an Nmap ping sweep:\n✓ -sP tells Nmap to perform a ping scan.\n✓ -n tells Nmap not to perform name resolution.\nYou can omit the -n option if you want to resolve hostnames to see\nwhich systems are responding. Name resolution might take slightly\nlonger, though.\n✓ -T 4 tells Nmap to perform an aggressive (faster) scan.\n✓ 192.168.1.1-254 tells Nmap to scan the entire 192.168.1.x subnet.\nUsing port scanning tools\nMost port scanners operate in three steps:\n1. The port scanner sends TCP SYN requests to the host or range of hosts\nyou set it to scan.\nSome port scanners perform ping sweeps to determine which hosts are\navailable before starting the TCP port scans.\nMost port scanners by default scan only TCP ports. Don’t forget about\nUDP ports. You can scan UDP ports with a UDP port scanner, such as\nNmap.\n2. The port scanner waits for replies from the available hosts.\n131\nChapter 8: Network Infrastructure\n3. The port scanner probes these available hosts for up to 65,534 possible\nTCP and UDP ports — based on which ports you tell it to scan — to see\nwhich ones have available services on them.\nThe port scans provide the following information about the live hosts on\nyour network:\n✓ Hosts that are active and reachable through the network\n✓ Network addresses of the hosts found\n✓ Services or applications that the hosts may be running\nAfter performing a generic sweep of the network, you can dig deeper into\nspecific hosts you find.\nNmap\nAfter you have a general idea of what hosts are available and what ports are\nopen, you can perform fancier scans to verify that the ports are actually open\nand not returning a false positive. Nmap allows you to run the following addi-\ntional scans:\n✓ Connect: This basic TCP scan looks for any open TCP ports on the host.\nYou can use this scan to see what’s running and determine whether\nintrusion prevention systems (IPSs), firewalls, or other logging devices\nlog the connections.\n✓ UDP scan: This basic UDP scan looks for any open UDP ports on the\nhost. You can use this scan to see what’s running and determine\nwhether IPSs, firewalls, or other logging devices log the connections.\n✓ SYN Stealth: This scan creates a half-open TCP connection with the\nhost, possibly evading IPS systems and logging. This is a good scan for\ntesting IPSs, firewalls, and other logging devices.\n✓ FIN Stealth, Xmas Tree, and Null: These scans let you mix things up a\nbit by sending strangely formed packets to your network hosts so you\ncan see how they respond. These scans change around the flags in the\nTCP headers of each packet, which allows you to test how each host\nhandles them to point out weak TCP/IP implementations as well as\npatches that might need to be applied.\nBe careful when performing these scans. You can create your own DoS attack\nand potentially crash applications or entire systems. Unfortunately, if you\nhave a host with a weak TCP/IP stack (the software that controls TCP/IP com-\nmunications on your hosts), there’s no good way to prevent your scan from\ncreating a DoS attack. A good way to help reduce the chance of this occurring\nis to use the slow Nmap timing options — Paranoid, Sneaky, or Polite — when\nrunning your scans.\n132\nPart III: Hacking Network Hosts\nFigure 8-2 shows the NMapWin Scan tab, where you can select the Scan Mode\noptions (Connect, UDP Scan, and so on). If you’re a command line fan, you\nsee the command line parameters displayed in the lower-left corner of the\nNMapWin screen. This helps when you know what you want to do and the\ncommand line help isn’t enough.\nFigure 8-2:\nIn-depth\nport-\nscanning\noptions in\nNMapWin.\nIf you connect to a single port (as opposed to several all at one time) without\nmaking too much noise, you might be able to evade your firewall or IPS. This\nis a good test of your network security controls, so look at your logs to see\nwhat they saw during this process.\nNetScanTools Pro\nNetScanTools Pro (www.netscantools.com) is a very nice all-in-one com-\nmercial tool for gathering general network information, such as the number\nof unique IP addresses, NetBIOS names, and MAC addresses. It also has a\nneat feature that allows you to fingerprint the operating systems of vari-\nous hosts. Figure 8-3 shows the OS Fingerprinting results while scanning a\nLinksys router/firewall.\nCountermeasures against ping sweeping and port scanning\nEnable only the traffic you need to access internal hosts — preferably as far\nas possible from the hosts you’re trying to protect — and deny everything\nelse. This goes for standard ports, such as TCP 80 for HTTP and ICMP for\nping requests.\n133\nChapter 8: Network Infrastructure\nFigure 8-3:\nNetScan-\nTools Pro\nOS Finger-\nprinting tool.\nConfigure firewalls to look for potentially malicious behavior over time (such\nas the number of packets received in a certain period of time) and have rules\nin place to cut off attacks if a certain threshold is reached, such as 10 port\nscans in one minute or 100 consecutive ping (ICMP) requests.\nMost firewalls and IPSs can detect such scanning and cut it off in real time.\nYou can break applications on your network when restricting network traffic,\nso make sure that you analyze what’s going on and understand how applica-\ntions and protocols are working before you disable any type of network traffic.\nScanning SNMP\nSimple Network Management Protocol (SNMP) is built in to virtually every\nnetwork device. Network management programs (such as HP OpenView and\nLANDesk) use SNMP for remote network host management. Unfortunately,\nSNMP also presents security vulnerabilities.\nVulnerabilities\nThe problem is that most network hosts run SNMP enabled with the default\nread/write community strings of public/private. The majority of network\ndevices I come across have SNMP enabled and don’t even need it.\n134\nPart III: Hacking Network Hosts\nIf SNMP is compromised, a hacker may be able to gather such network infor-\nmation as ARP tables, usernames, and TCP connections to attack your sys-\ntems further. If SNMP shows up in port scans, you can bet that a malicious\nattacker will try to compromise the system.\nHere are some utilities for SNMP enumeration:\n✓ The commercial tools NetScanTools Pro and Essential NetTools\n✓ Free Windows GUI-based Getif\n✓ Free Windows text-based SNMPUTIL (www.wtcs.org/snmp4tpc/\nFILES/Tools/SNMPUTIL/SNMPUTIL.zip)\nYou can use Getif to enumerate systems with SNMP enabled, as shown in\nFigure 8-4.\nFigure 8-4:\nGeneral\nSNMP\ninformation\ngathered by\nGetif.\nIn this test, I was able to glean a lot of information from a wireless access point,\nincluding model number, firmware revision, and system uptime. All this could\nbe used against the host if an attacker wanted to exploit a known vulnerability\nin this particular system. By digging in further, I was able to discover several\nmanagement interface usernames on this access point, as shown in Figure 8-5.\nYou certainly don’t want to show the world this information.\nFor a list of vendors and products affected by the well-known SNMP vulner-\nabilities, refer to www.cert.org/advisories/CA-2002-03.html.\n135\nChapter 8: Network Infrastructure\nFigure 8-5:\nManage-\nment\ninterface\nuser IDs\ngleaned\nvia Getif’s\nSNMP\nbrowsing\nfunction.\nCountermeasures against SNMP attacks\nPreventing SNMP attacks can be as simple as A-B-C:\n✓ Always disable SNMP on hosts if you’re not using it — period.\n✓ Block the SNMP ports (UDP ports 161 and 162) at the network perimeter.\n✓ Change the default SNMP community read string from public and the\ndefault community write string from private to another long and com-\nplex value that’s virtually impossible to guess.\nThere’s technically a “U” that’s part of the solution: upgrade. Upgrading your\nsystems (at least the ones you can) to SNMP version 3 can resolve many of\nthe well-known SNMP security weaknesses.\nGrabbing banners\nBanners are the welcome screens that divulge software version numbers and\nother system information on network hosts. This banner information might\nidentify the operating system, the version number, and the specific service\npacks to give the bad guys a leg up on attacking the network. You can grab\nbanners by using either good old telnet or some of the tools I mention, such\nas Nmap and SuperScan.\n136\nPart III: Hacking Network Hosts\ntelnet\nYou can telnet to hosts on the default telnet port (TCP port 23) to see\nwhether you’re presented with a login prompt or any other information. Just\nenter the following line at the command prompt in Windows or UNIX:\ntelnet ip_address\nYou can telnet to other commonly used ports with these commands:\n✓ SMTP: telnet ip_address 25\n✓ HTTP: telnet ip_address 80\n✓ POP3: telnet ip_address 110\nFigure 8-6 shows specific version information about an Exchange 2003 server\nwhen telnetting to it on port 25. For help with telnet, simply enter telnet /?\nor telnet help for specific guidance on using the program.\nFigure 8-6:\nInformation\ngathered\nabout\nExchange\n2003 via\ntelnet.\nCountermeasures against banner-grabbing attacks\nThe following steps can reduce the chance of banner-grabbing attacks:\n✓ If there isn’t a business need for services that offer banner information,\ndisable those unused services on the network host.\n✓ If there isn’t a business need for the default banners, or if you can cus-\ntomize the banners, configure the network host’s application or operat-\ning system to either disable the banners or remove information from the\nbanners that could give an attacker a leg up. Check with your specific\nvendor for information on how to do this.\nIf you can customize your banners, check with your lawyer about adding a\nwarning banner. It won’t stop banner grabbing but will show would-be intrud-\ners that the system is private and monitored (assuming it truly is). A warning\nbanner may also help reduce your business liability in the event of a security\nbreach. Here’s an example:\n137\nChapter 8: Network Infrastructure\nWarning! This is a private system. All use is monitored and recorded. Any\nunauthorized use of this system may result in civil and/or criminal prosecu-\ntion to the fullest extent of the law.\nTesting firewall rules\nAs part of your ethical hacking, you can test your firewall rules to make sure\nthey’re working as they’re supposed to.\nTesting\nA few tests can verify that your firewall actually does what it says it’s doing.\nYou can connect through the firewall on the ports that are open, but what\nabout the ports that can be open but shouldn’t be?\nNetcat\nNetcat (http://netcat.sourceforge.net) can test certain firewall rules\nwithout having to test a production system directly. For example, you can\ncheck whether the firewall allows port 23 (telnet) through. Follow these steps\nto see whether a connection can be made through port 23:\n1. Load Netcat on a client machine inside the network.\nThis sets up the outbound connection.\n2. Load Netcat on a testing computer outside the firewall.\nThis allows you to test from the outside in.\n3. Enter the Netcat listener command on the client (internal) machine\nwith the port number you’re testing.\nFor example, if you’re testing port 23, enter this command:\nnc –l –p 23 cmd.exe\n4. Enter the Netcat command to initiate an inbound session on the test-\ning (external) machine. You must include the following information:\n• The IP address of the internal machine you’re testing\n• The port number you’re testing\nFor example, if the IP address of the internal (client) machine is\n10.11.12.2 and the port is 23, enter this command:\nnc –v 10.11.12.2 23\n138\nPart III: Hacking Network Hosts\nIf Netcat presents you with a new command prompt (that’s what the cmd.\nexe is for in Step 3) on the external machine, you’ve connected and can\nexecute commands on the internal machine! This can serve several purposes,\nincluding testing firewall rules, network address translation (NAT), port for-\nwarding and — well, uhhhmmm — executing commands on a remote system!\nAlgoSec Firewall Analyzer\nA commercial tool I’ve been using with great results is AlgoSec’s Firewall\nAnalyzer (www.algosec.com) as shown in Figure 8-7.\nAlgoSec Firewall Analyzer, and similar ones such as Athena Firewall Grader\n(www.athenasecurity.net/firewall-grader.html), allows you to per-\nform an in-depth analysis of firewall rulebases from all the major vendors and\nfind security flaws and inefficiencies you’d never uncover otherwise. Firewall\nrulebase analysis is a lot like software source code analysis — it finds flaws\nat the source that humans would likely never see even when performing\nin-depth ethical hacking tests from the Internet and the internal network. If\nyou’ve never performed a firewall rulebase analysis, it’s a must!\nFigure 8-7:\nUsing\nAlgoSec\nFirewall\nAnalyzer\nto uncover\nsecurity\ngaffes in\na firewall\nrulebase.\n139\nChapter 8: Network Infrastructure\nCountermeasures against firewall rulebase vulnerabilities\nThe following countermeasures can prevent a hacker from testing your firewall:\n✓ Perform a firewall rulebase audit. I’m always saying that you cannot\nsecure what you don’t acknowledge. There’s no better example of this\nthan your firewall rulebases. No matter how seemingly simplistic your\nrulebase is, it never hurts to verify your work using an automated tool.\n✓ Limit traffic to what’s needed.\nSet rules on your firewall (and router, if needed) that passes only traffic\nthat absolutely must pass. For example, have rules in place that allow\nHTTP inbound traffic to an internal web server, SMTP inbound traffic to\nan e-mail server, and HTTP outbound traffic for external web access.\nThis is the best defense against someone poking at your firewall.\n✓ Block ICMP to help prevent an external attacker from poking and\nprodding your network to see which hosts are alive.\n✓ Enable stateful packet inspection on the firewall to block unsolicited\nrequests.\nAnalyzing network data\nA network analyzer is a tool that allows you to look into a network and ana-\nlyze data going across the wire for network optimization, security, and/or\ntroubleshooting purposes. Like a microscope for a lab scientist, a network\nanalyzer is a must-have tool for any security professional.\nNetwork analyzers are often generically referred to as sniffers, though\nthat’s actually the name and trademark of a specific product from Network\nAssociates’ original Sniffer network analysis tool.\nA network analyzer is handy for sniffing packets on the wire. A network ana-\nlyzer is simply software running on a computer with a network card. It works\nby placing the network card in promiscuous mode, which enables the card to\nsee all the traffic on the network, even traffic not destined for the network\nanalyzer’s host. The network analyzer performs the following functions:\n✓ Captures all network traffic\n✓ Interprets or decodes what is found into a human-readable format\n✓ Displays the content in chronological order (or however you choose to\nsee it)\n140\nPart III: Hacking Network Hosts\nWhen assessing security and responding to security incidents, a network ana-\nlyzer can help you\n✓ View anomalous network traffic and even track down an intruder.\n✓ Develop a baseline of network activity and performance, such as proto-\ncols in use, usage trends, and MAC addresses, before a security incident\noccurs.\nWhen your network behaves erratically, a network analyzer can help you\n✓ Track and isolate malicious network usage\n✓ Detect malicious Trojan horse applications\n✓ Monitor and track down DoS attacks\nNetwork analyzer programs\nYou can use one of the following programs for network analysis:\n✓ WildPackets’ OmniPeek (www.wildpackets.com/products/\nomnipeek_network_analyzer) is my favorite network analyzer. It\ndoes everything I need and more and is very simple to use. OmniPeek is\navailable for Windows operating systems.\n✓ TamoSoft’s CommView (www.tamos.com/products/commview) is a\nlow-cost, Windows-based alternative.\n✓ Cain & Abel (www.oxid.it/cain.html) is a free multifunctional pass-\nword recovery tool for performing ARP poisoning, capturing packets,\ncracking passwords, and more.\n✓ Wireshark (www.wireshark.org), formerly known as Ethereal, is a\nfree alternative. I download and use this tool if I need a quick fix and\ndon’t have my laptop nearby. It’s not as user-friendly as most of the\ncommercial products, but it is very powerful if you’re willing to learn its\nins and outs. Wireshark is available for both Windows and OS X.\n✓ ettercap (http://ettercap.sourceforge.net) is another power-\nful (and free) utility for performing network analysis and much more on\nWindows, Linux, and other operating systems.\nHere are a few caveats for using a network analyzer:\n✓ To capture all traffic, you must connect the analyzer to one of the following:\n• A hub on the network\n• A monitor/span/mirror port on a switch\n• A switch that you’ve performed an ARP poisoning attack on\n141\nChapter 8: Network Infrastructure\n✓ If you want to see traffic similar to what a network-based IPS sees, you\nshould connect the network analyzer to a hub or switch monitor port — or\neven a network tap — on the outside of the firewall, as shown in Figure 8-8.\nThis way, your testing enables you to view\n• What’s entering your network before the firewall filters eliminate\nthe junk traffic.\n• What’s leaving your network after the traffic passes through the\nfirewall.\nFigure 8-8:\nConnecting\na network\nanalyzer\noutside the\nfirewall.\nWhether you connect your network analyzer inside or outside your firewall,\nyou see immediate results. It can be an overwhelming amount of information,\nbut you can look for these issues first:\n✓ Odd traffic, such as:\n• An unusual amount of ICMP packets\n• Excessive amounts of multicast or broadcast traffic\n• Protocols that aren’t permitted by policy or shouldn’t exist given\nyour current network configuration\n✓ Internet usage habits, which can help point out malicious behavior of a\nrogue insider or system that has been compromised, such as:\n• Web surfing and social media\n• E-mail\n• Instant messaging and other P2P software\n142\nPart III: Hacking Network Hosts\n✓ Questionable usage, such as:\n• Many lost or oversized packets, indicating hacking tools or mal-\nware are present\n• High bandwidth consumption that might point to a web or FTP\nserver that doesn’t belong\n✓ Reconnaissance probes and system profiling from port scanners and\nvulnerability assessment tools, such as a significant amount of inbound\ntraffic from unknown hosts — especially over ports that aren’t used very\nmuch, such as FTP or telnet.\n✓ Hacking in progress, such as tons of inbound UDP or ICMP echo\nrequests, SYN floods, or excessive broadcasts.\n✓ Nonstandard hostnames on your network. For example, if your sys-\ntems are named Computer1, Computer2, and so on, a computer named\nGEEKz4evUR should raise a red flag.\n✓ Hidden servers (especially web, SMTP, FTP, DNS, and DHCP) that might\nbe eating network bandwidth, serving illegal software, or accessing our\nnetwork hosts.\n✓ Attacks on specific applications that show such commands as /bin/\nrm, /bin/ls, echo, and cmd.exe as well as SQL queries and JavaScript\ninjection, which I cover in Chapter 14.\nYou might need to let your network analyzer run for quite a while — several\nhours to several days, depending on what you’re looking for. Before getting\nstarted, configure your network analyzer to capture and store the most rel-\nevant data:\n✓ If your network analyzer permits it, configure it to use a first-in, first-\nout buffer.\nThis configuration overwrites the oldest data when the buffer fills up,\nbut it might be your only option if memory and hard drive space are lim-\nited on your network analysis computer.\n✓ If your network analyzer permits it, record all the traffic into a cap-\nture file and save it to the hard drive. This is the ideal scenario — espe-\ncially if you have a large hard drive, such as 500GB or more.\nYou can easily fill several hundred gigabytes’ worth of hard drive space\nin a short period. I highly recommend running your network analyzer\nin what OmniPeek calls monitor mode. This allows the analyzer to keep\ntrack of what’s going on but not capture and store every single packet.\nMonitor mode — if supported by your analyzer — is very beneficial and\nis often all you need.\n143\nChapter 8: Network Infrastructure\n✓ When network traffic doesn’t look right in a network analyzer, it prob-\nably isn’t. It’s better to be safe than sorry.\nRun a baseline when your network is working normally. When you\nhave a baseline, you can see any obvious abnormalities when an attack\noccurs.\nOne thing I like to check for is the top talkers (network hosts sending/receiv-\ning the most traffic) on the network. If someone is doing something malicious\non the network, such as hosting an FTP server or running Internet file-sharing\nsoftware, using a network analyzer is often the only way you’ll find out about\nit. A network analyzer is also a good tool for detecting systems infected with\nmalware, such as a virus or Trojan horse. Figure 8-9 shows what it looks like\nto have a suspect protocol or application running on your network.\nFigure 8-9:\nOmniPeek\ncan help\nuncover\nsomeone\nrunning an\nillicit sys-\ntem, such\nas an FTP\nserver.\nLooking at your network statistics, such as bytes per second, network utiliza-\ntion, and inbound/outbound packet counts, is also a good way to determine\nwhether something fishy is going on. Figure 8-10 contains network statistics\nas seen through the powerful CommView network analyzer.\nTamoSoft — the maker of CommView — has another product called\nNetResident (www.tamos.com/products/netresident) that can track\nthe usage of well-known protocols, such as HTTP, e-mail, FTP, and VoIP. As\nshown in Figure 8-11, you can use NetResident to monitor web sessions and\nplay them back.\n144\nPart III: Hacking Network Hosts\nFigure 8-10:\nComm-\nView’s\ninterface\nfor viewing\nnetwork\nstatistics.\nFigure 8-11:\nNetResident\ncan track\nInternet\nusage and\nensure\nsecurity\npolicies are\nenforced.\n145\nChapter 8: Network Infrastructure\nNetResident also has the capability to perform ARP poisoning, which\nallows NetResident to see everything on the local network segment. I cover\nARP poisoning in the section “The MAC-daddy attack,” later in this chapter.\nCountermeasures against network protocol vulnerabilities\nA network analyzer can be used for good or evil. The good is to help ensure\nyour security policies are being followed. The evil is when someone uses\na network analyzer against you. A few countermeasures can help prevent\nsomeone from using an unauthorized network analyzer, although there’s no\nway to prevent it completely.\nIf an external attacker or malicious user can connect to your network (physi-\ncally or wirelessly), he can capture packets on the network, even if you’re\nusing an Ethernet switch.\nPhysical security\nEnsure that adequate physical security is in place to prevent someone from\nplugging into your network:\n✓ Keep the bad guys out of your server room and wiring closet.\nEnsure that the web, telnet, and SSH management interfaces on your\nEthernet switches are especially secure to keep someone from changing\nthe switch port configuration and seeing everything going across the wire.\n✓ Make sure that unsupervised areas, such as an unoccupied lobby or\ntraining room, don’t have live network connections.\nFor details about physical security, see Chapter 6.\nNetwork analyzer detection\nYou can use a network- or host-based utility to determine whether someone\nis running an unauthorized network analyzer on your network:\n✓ Sniffdet (http://sniffdet.sourceforge.net) for UNIX-based\nsystems\n✓ PromiscDetect (http://ntsecurity.nu/toolbox/promiscdetect)\nfor Windows\nCertain IPSs can also detect whether a network analyzer is running on your\nnetwork. These tools enable you to monitor the network for Ethernet cards\nthat are running in promiscuous mode. You simply load the programs on\nyour computer, and the programs alert you if they see promiscuous behav-\niors on the network (Sniffdet) or local system (PromiscDetect).\n146\nPart III: Hacking Network Hosts\nThe MAC-daddy attack\nAttackers can use ARP (Address Resolution Protocol) running on your net-\nwork to make their systems appear as your system or another authorized\nhost on your network.\nARP spoofing\nAn excessive number of ARP requests can be a sign of an ARP spoofing attack\n(also called ARP poisoning) on your network.\nA client running a program, such as dsniff (www.monkey.org/~dugsong/\ndsniff) or Cain & Abel (www.oxid.it/cain.html), can change the ARP\ntables — the tables that store IP addresses to media access control (MAC)\naddress mappings — on network hosts. This causes the victim computers to\nthink they need to send traffic to the attacker’s computer rather than to the\ntrue destination computer when communicating on the network. ARP spoof-\ning is used during man-in-the-middle (MITM) attacks.\nSpoofed ARP replies can be sent to a switch, which reverts the switch to\nbroadcast mode and essentially turns it into a hub. When this occurs, an\nattacker can sniff every packet going through the switch and capture any-\nthing and everything from the network.\nThis security vulnerability is inherent in how TCP/IP communications are\nhandled.\nHere’s a typical ARP spoofing attack with a hacker’s computer (Hacky) and\ntwo legitimate network users’ computers (Joe and Bob):\n1. Hacky poisons the ARP caches of victims Joe and Bob by using dsniff,\nettercap, or a utility he wrote.\n2. Joe associates Hacky’s MAC address with Bob’s IP address.\n3. Bob associates Hacky’s MAC address with Joe’s IP address.\n4. Joe’s traffic and Bob’s traffic are sent to Hacky’s IP address first.\n5. Hacky’s network analyzer captures Joe’s and Bob’s traffic.\nIf Hacky is configured to act like a router and forward packets, it for-\nwards the traffic to its original destination. The original sender and\nreceiver never know the difference!\nUsing Cain & Abel for ARP poisoning\nYou can perform ARP poisoning on your switched Ethernet network to test\nyour IPS or to see how easy it is to turn a switch into a hub and capture any-\nthing and everything with a network analyzer.\n147\nChapter 8: Network Infrastructure\nARP poisoning can be hazardous to your network’s hardware and health,\ncausing downtime and more. So be careful!\nPerform the following steps to use Cain & Abel for ARP poisoning:\n1. Load Cain & Abel and then click the Sniffer tab to enter the network\nanalyzer mode.\nThe Hosts page opens by default.\n2. Click the Start/Stop APR icon (the yellow and black circle).\nThe ARP poison routing (how Cain & Abel refers to ARP poisoning) pro-\ncess starts and enables the built-in sniffer.\n3. If prompted, select the network adapter in the window that appears\nand then click OK.\n4. Click the blue + icon to add hosts to perform ARP poisoning on.\n5. In the MAC Address Scanner window that appears, ensure the All\nHosts in My Subnet option is selected and then click OK.\n6. Click the APR tab (the one with the yellow-and-black circle icon) to\nload the APR page.\n7. Click the white space under the uppermost Status column heading\n(just under the Sniffer tab).\nThis re-enables the blue + icon.\n8. Click the blue + icon and the New ARP Poison Routing window shows\nthe hosts discovered in Step 3.\n9. Select your default route (in my case, 10.11.12.1).\nThe right-hand column fills with all the remaining hosts, as shown in\nFigure 8-12.\nFigure 8-12:\nSelecting\nyour victim\nhosts for\nARP poison-\ning in Cain &\nAbel.\n148\nPart III: Hacking Network Hosts\n10. Ctrl+click all the hosts in the right column that you want to poison.\n11. Click OK and the ARP poisoning process starts.\nThis process can take anywhere from a few seconds to a few minutes\ndepending on your network hardware and each hosts’ local TCP/IP\nstack. The results of ARP poisoning on my test network are shown in\nFigure 8-13.\nFigure 8-13:\nARP poison-\ning results\nin Cain &\nAbel.\n12. You can use Cain & Abel’s built-in passwords feature to capture pass-\nwords traversing the network to and from various hosts simply by\nclicking the Passwords tab.\nThe preceding steps show how easy it is to exploit a vulnerability and prove\nthat Ethernet switches aren’t all they’re cracked up to be from a security\nperspective.\nMAC address spoofing\nMAC address spoofing tricks the switch into thinking your computer is some-\nthing else. You simply change your computer’s MAC address and masquer-\nade as another user.\nYou can use this trick to test access control systems, such as your IPS/fire-\nwall, and even your operating system login controls that check for specific\nMAC addresses.\n149\nChapter 8: Network Infrastructure\nUNIX-based systems\nIn UNIX and Linux, you can spoof MAC addresses with the ifconfig utility.\nFollow these steps:\n1. While logged in as root, use ifconfig to enter a command that disables\nthe network interface.\nInsert the network interface number that you want to disable (usually,\neth0) into the command, like this:\n[root@localhost root]# ifconfig eth0 down\n2. Enter a command for the MAC address you want to use.\nInsert the fake MAC address and the network interface number (eth0)\ninto the command again, like this:\n[root@localhost root]# ifconfig eth0 hw ether\nnew_mac_address\nYou can use a more feature-rich utility called GNU MAC Changer (www.\nalobbs.com/macchanger) for Linux systems.\nWindows\nYou can use regedit to edit the Windows Registry, but I like using a neat\nWindows utility called SMAC (www.klcconsulting.net/smac), which\nmakes MAC spoofing a simple process. Follow these steps to use SMAC:\n1. Load the program.\n2. Select the adapter for which you want to change the MAC address.\n3. Enter the new MAC address in the New Spoofed MAC Address fields\nand click the Update MAC button.\n4. Stop and restart the network card with these steps:\na. Right-click the network card in Network and Dialup Connections and\nthen choose Disable.\nb. Right-click again and then choose Enable for the change to take effect.\nYou might have to reboot for this to work properly.\n5. Click the Refresh button in the SMAC interface.\nTo reverse Registry changes with SMAC, follow these steps:\n1. Select the adapter for which you want to change the MAC address.\n2. Click the Remove MAC button.\n150\nPart III: Hacking Network Hosts\n3. Stop and restart the network card with these steps:\na. Right-click the network card in Network and Dialup Connections and\nthen choose Disable.\nb. Right-click again and then choose Enable for the change to take effect.\nYou might have to reboot for this to work properly.\n4. Click the Refresh button in the SMAC interface.\nYou should see your original MAC address again.\nCountermeasures against ARP poisoning\nand MAC address spoofing attacks\nA few countermeasures on your network can minimize the effects of an attack\nagainst ARP and MAC addresses:\n✓ Prevention: You can prevent MAC address spoofing if your switches can\nenable port security to prevent automatic changes to the MAC address\ntables.\nNo realistic countermeasures for ARP poisoning exist. The only way\nto prevent ARP poisoning is to create and maintain static ARP entries\nin your switches for every host on the network. This is something that\nhardly any network administrator has time to do in today’s rat race.\n✓ Detection: You can detect these two types of hacks through an IPS or a\nstandalone MAC address–monitoring utility.\nArpwatch (http://linux.maruhn.com/sec/arpwatch.html) is a\nLinux-based program that alerts you via e-mail when it detects changes\nin MAC addresses associated with specific IP addresses on the network.\nTesting denial of service attacks\nDenial of service (DoS) attacks are among the most common hacker attacks.\nA hacker initiates so many invalid requests to a network host that the host\nuses all its resources responding to the invalid requests and ignores the\nlegitimate requests.\nDoS attacks\nDoS attacks against your network and hosts can cause systems to crash, data\nto be lost, and every user to jump on your case wondering when Internet\naccess will be restored.\n151\nChapter 8: Network Infrastructure\nWhat you need to know about advanced malware\nAdvanced malware (also known as advanced prevent. The obvious solution to prevent such\npersistent threat or APT) has been all the rage attacks is to keep users from clicking mali-\nlately. Such targeted attacks are highly sophis- cious links and preventing malware from being\nticated and extremely difficult to detect — that “dropped” onto the system. That’s tough, if not\nis, unless you have the proper controls and the impossible, to prevent. The next best thing is to\nnetwork and/or host layers. I once worked on use technology to your advantage. Advanced\na project where a large enterprise was tar- malware monitoring and threat protection tools\ngeted by a Nation State (presumably because such as Damballa Failsafe (www.damballa.\nof the line of work the enterprise was in) and com/solutions/damballa_fail\nended up having over 10,000 Windows serv- safe.php), Next-Generation IPSs such as\ners and workstations infected by malware. The what’s offered by Sourcefire (www.source\nenterprise’s big box antivirus software was fire.com/security-technologies/\nnone the wiser. The project turned out to be network-security/next-generation-\nan extensive exercise in incident response and intrusion-prevention-system),\nforensics. The infection was traced back to a and whitelisting technologies such as Bit9’s\nphishing attack that subsequently spread to all Parity Suite (www.bit9.com/products/\nthe systems while, at the same time, installing bit9-parity-suite.php) that helps\npassword-cracking tools to attempt to crack protect the host are a great way to fight this\nthe local SAM file on each Windows machine. threat.\nThis advanced malware infection is just one of The bottom line: Don’t underestimate the risk\ncountless examples of new advanced malware and power of targeted malware attacks.\nthat most organizations are not prepared to\nHere are some common DoS attacks that target an individual computer or\nnetwork device:\n✓ SYN floods: The attacker floods a host with TCP SYN packets.\n✓ Ping of Death: The attacker sends IP packets that exceed the maximum\nlength of 65,535 bytes, which can ultimately crash the TCP/IP stack on\nmany operating systems.\n✓ WinNuke: This attack can disable networking on older Windows 95 and\nWindows NT computers.\nDistributed DoS (DDoS) attacks have an exponentially greater impact on their\nvictims. One of the most famous was the DDoS attack against eBay, Yahoo!,\nCNN, and dozens of other websites by a hacker known as MafiaBoy. While\nupdating this book to the third edition, there was a highly publicized DDoS\nattack against Twitter, Facebook, and other social media sites. The attack\nwas apparently aimed at one user from Georgia (the former Soviet coun-\ntry, not the state where I live), but it affected everyone using these sites. I\ncouldn’t tweet, and many of my friends and family members couldn’t see\n152\nPart III: Hacking Network Hosts\nwhat everyone was blabbing about on Facebook (oh, the humanity!). Think\nabout this: When hundreds of millions of people can be taken offline by one\ntargeted DDoS attack, you can see why understanding the dangers of denial\nof service against your business’s systems and applications is important.\nDoS and DDoS attacks can be carried out with tools that the attacker either\nwrites or downloads from the Internet. These are good tools to test your net-\nwork’s IPS and firewalls for denial of service weaknesses. You can find pro-\ngrams that allow actual attacks. Some programs, such as idappcom’s Traffic\nIQ Professional (www.idappcom.com), also let you send controlled attacks.\nTesting\nDenial of service testing is one of the most difficult security checks you can\nrun. There just aren’t enough of you and your computers to go around. Don’t\nfret. You can run a few tests to see where you’re weak. Your first test should\nbe a search for DoS vulnerabilities from a vulnerability-scanning perspective.\nUsing vulnerability scanners, such as QualysGuard (www.qualys.com) and\nWebInspect (www.hpenterprisesecurity.com/products/hp-fortify-\nsoftware-security-center/hp-webinspect), you can find missing\npatches and configuration weaknesses that can lead to denial of service.\nDuring a recent security assessment project, QualysGuard found a vulnerabil-\nity in an older version OpenSSL running on a web server. As with most DoS\nfindings, I didn’t actually exploit the vulnerability because I didn’t want to\ntake down the production system. Instead, I listed it as a “medium priority”\nvulnerability — an issue that had the potential to be exploited. My client\npushed back and said OpenSSL wasn’t on the system. With permission, I\ndownloaded the exploit code available on the Internet, compiled it, and ran\nit against my client’s server. Sure enough, it took the server offline.\nAt first, my client thought it was a fluke, but after taking the server offline\nagain, he bought into the vulnerability. It ended up that he was using an\nOpenSSL derivative, hence the vulnerability. Had my client not fixed the\nproblem, there could have been any number of attackers around the world\ntaking — and keeping — this production system offline, which could have\nbeen both tricky and time consuming to troubleshoot. Not good for business!\nDon’t test for DoS unless you have test systems or can perform controlled\ntests with the proper tools. Poorly planned DoS testing is a job search in the\nmaking. It’s like trying to delete data from a network share and hoping that the\naccess controls in place are going to prevent it.\nOther DoS testing tools worth checking out are UDPFlood (www.mcafee.com/\nus/downloads/free-tools/udpflood.aspx), Blast (www.mcafee.com/\nus/downloads/free-tools/blast.aspx), NetScanTools Pro, and\nCommView.\n153\nChapter 8: Network Infrastructure\nCountermeasures against DoS attacks\nMost DoS attacks are difficult to predict, but they can be easy to prevent:\n✓ Test and apply security patches (including service packs and firmware\nupdates) as soon as possible for network hosts, such as routers and fire-\nwalls, as well as for server and workstation operating systems.\n✓ Use an IPS to monitor regularly for DoS attacks.\nYou can run a network analyzer in continuous capture mode if you can’t\njustify the cost of an all-out IPS solution and use it to monitor for DoS\nattacks.\n✓ Configure firewalls and routers to block malformed traffic. You can\ndo this only if your systems support it, so refer to your administrator’s\nguide for details.\n✓ Minimize IP spoofing by filtering out external packets that appear to\ncome from an internal address, the local host (127.0.0.1), or any other\nprivate and non-routable address, such as 10.x.x.x, 172.16.x.x–172.31.x.x,\nor 192.168.x.x.\n✓ Block all ICMP traffic inbound to your network unless you specifically\nneed it. Even then, you should allow it to come in only to specific hosts.\n✓ Disable all unneeded TCP/UDP small services, such as echo and chargen.\nEstablish a baseline of your network protocols and traffic patterns before\na DoS attack occurs. That way, you know what to look for. And periodically\nscan for such potential DoS vulnerabilities as rogue DoS software installed on\nnetwork hosts.\nWork with a minimum necessary mentality (not to be confused with having too\nmany beers) when configuring your network devices, such as firewalls and\nrouters:\n✓ Identify traffic that is necessary for approved network usage.\n✓ Allow the traffic that’s needed.\n✓ Deny all other traffic.\nIf worse comes to worst, you’ll need to work with your ISP and see whether\nthey can block DoS attacks on their end.\n154\nPart III: Hacking Network Hosts\nDetecting Common Router, Switch,\nand Firewall Weaknesses\nIn addition to the more technical exploits that I cover in this chapter, some\nhigh-level security vulnerabilities commonly found on network devices can\ncreate many problems.\nFinding unsecured interfaces\nYou want to ensure that HTTP and telnet interfaces to your routers, switches,\nand firewall aren’t configured with a blank, default, or otherwise easy-to-\nguess password. This advice sounds like a no-brainer, but it’s for one of the\nmost common weaknesses. When a malicious insider or other attacker gains\naccess to your network devices, he owns the network. He can then lock out\nadministrative access, set up back-door user accounts, reconfigure ports,\nand even bring down the entire network without you ever knowing.\nI once found a simple password that a systems integrator had configured on a\nCisco ASA firewall and was able to log in to the firewall with full administrative\nrights. Just imagine what could happen in this situation if someone with mali-\ncious intent came across this password. Lesson learned: It’s the little things\nthat can get you. Know what your vendors are doing and keep an eye on them!\nAnother weakness is related to HTTP and telnet being enabled and used on\nmany network devices. Care to guess why this is a problem? Well, anyone\nwith some free tools and a few minutes of time can sniff the network and cap-\nture login credentials for these systems when they’re being sent in cleartext.\nWhen that happens, anything goes.\nExploiting IKE weaknesses\nBusinesses running a VPN on a router or firewall are common. If you fall into\nthis category, chances are good that your VPN is running the Internet Key\nExchange (IKE) protocol, which has a couple of well-known exploitable\nweaknesses:\n✓ It’s possible to crack IKE “aggressive mode” pre-shared keys using Cain\n& Abel and the IKECrack tool (http://ikecrack.sourceforge.net).\n✓ Some IKE configurations, such as those in certain Cisco PIX firewalls,\ncan be taken offline. All the attacker has to do is send 10 packets per\nsecond at 122 bytes each and you have a DoS attack on your hands.\n155\nChapter 8: Network Infrastructure\nYou can manually poke around to see whether your router, switches, and\nfirewalls are vulnerable to these issues, but the best way to find this informa-\ntion is to use a well-known vulnerability scanner, such as QualysGuard. After\nyou find which vulnerabilities exist, you can take things a step further by\nusing the Cisco Global Exploiter tool (available via the BackTrack Linux tool-\nset). To run Cisco Global Exploiter, follow these steps:\n1. Download and burn the BackTrack Linux ISO image to CD or boot the\nimage directly through VMWare or VirtualBox.\n2. After you enter the BackTrack Linux GUI (log in using the creden-\ntials root/toor and enter the command startx), click Applications,\nBacktrack, Exploitation Tools, Network Exploitation Tools, Cisco\nAttacks, and then Cisco Global Exploiter.\n3. Enter the command perl cge.pl ip_address exploit_number, as shown in\nFigure 8-14.\nGood scanners and exploitation tools will save you a ton of time and effort that\nyou can spend on other, more important things, such as Facebook and Twitter.\nFigure 8-14:\nCisco Global\nExploiter\ntool for\nexploiting\nwell-known\nCisco weak-\nnesses.\nPutting Up General Network Defenses\nRegardless of the specific attacks against your system, a few good practices\ncan help prevent many network problems:\n156\nPart III: Hacking Network Hosts\n✓ Use stateful inspection rules that monitor traffic sessions for firewalls.\nThis can help ensure that all traffic traversing the firewall is legitimate\nand can prevent DoS attacks and other spoofing attacks.\n✓ Implement rules to perform packet filtering based on traffic type, TCP/\nUDP ports, IP addresses, and even specific interfaces on your routers\nbefore the traffic is allowed to enter your network.\n✓ Use proxy filtering and Network Address Translation (NAT) or Port\nAddress Translation (PAT).\n✓ Find and eliminate fragmented packets entering your network (from\nFraggle or another type of attack) via an IPS.\n✓ Include your network devices in your vulnerability scans.\n✓ Ensure your network devices have the latest vendor firmware and\npatches applied.\n✓ Set strong passwords — better yet, passphrases — on all network sys-\ntems. I cover passwords in more detail in Chapter 7.\n✓ Don’t use IKE aggressive mode pre-shared keys for your VPN. If you\nmust, ensure the passphrase is strong and changed periodically (such\nas every 6–12 months).\n✓ Always use SSL (HTTPS) or SSH when connecting to network devices.\nBetter yet, don’t even allow access to key devices from the outside.\n✓ Segment the network and use a firewall on the following:\n• The DMZ\n• The internal network\n• Critical subnetworks broken down by business function or depart-\nment, such as accounting, finance, HR, and research\nChapter 9\nWireless LANs\nIn This Chapter\n▶ Understanding risks of wireless LANs\n▶ Selecting wireless LAN hacking tools\n▶ Cracking wireless encryption\n▶ Minimizing wireless LAN risks\nW\nireless local area networks (WLANs, also called Wi-Fi) — specifically,\nthe ones based on the IEEE 802.11 standard — are increasingly being\ndeployed into both business and home networks. WLANs have been the\nposter child for weak security and network hack attacks since the inception\nof 802.11 over a decade ago. The stigma of unsecure WLANs is starting to\nwane, but this isn’t the time to lower your defenses.\nWLANs offer a ton of business value, from convenience to reduced network\ndeployment time. Whether or not your organization allows wireless network\naccess, you probably have it, so testing for WLAN security vulnerabilities is\ncritical. In this chapter, I cover some common wireless network security vul-\nnerabilities that you should test for, and I discuss some cheap and easy coun-\ntermeasures that you can implement to help ensure that WLANs aren’t more\nof a risk to your organization than they’re worth.\nUnderstanding the Implications of\nWireless Network Vulnerabilities\nWLANs are very susceptible to attack — even more so than wired networks\n(discussed in Chapter 8). Wireless networks have vulnerabilities that can\nallow an attacker to bring your network to its knees or allow your sensitive\ninformation to be extracted right out of thin air. If your WLAN is compro-\nmised, you can experience the following problems:\n158\nPart III: Hacking Network Hosts\n✓ Loss of network access, including e-mail, web, and other services that\ncan cause business downtime\n✓ Loss of sensitive information, including passwords, customer data,\nintellectual property, and more\n✓ Regulatory consequences and legal liabilities associated with unauthor-\nized users gaining access to your business systems\nMost of the wireless vulnerabilities are in the 802.11 standard and how it works.\nWireless access points (APs) and client systems have some vulnerabilities\nas well.\nVarious fixes have come along in recent years to address these vulnerabili-\nties, yet still many of these fixes haven’t been properly applied or aren’t\nenabled by default. Your employees might also install rogue WLAN equip-\nment on your network without your knowledge. Then there’s “free” Wi-Fi\npractically everywhere your mobile workforce goes. These free Internet con-\nnections are one of the most serious threats to your overall information secu-\nrity and a pretty difficult one to fight. Even when WLANs are hardened and all\nthe latest patches have been applied, you still might have security problems,\nsuch as DoS, man-in-the-middle attacks, and encryption key weaknesses (like\nyou have on wired networks — see Chapter 8), that will likely be around for a\nwhile.\nChoosing Your Tools\nSeveral great WLAN security tools are available for both the Windows and\nUNIX platforms. The UNIX tools — which run mostly on Linux and BSD —\nwere notoriously a bear to configure and run properly, but that problem\nhas changed in recent years in programs such as Kismet (www.kismet\nwireless.net) and Wellenreiter (http://sourceforge.net/projects/\nwellenreiter).\nIf you want the power of the security tools that run on Linux, but you’re\nnot interested in installing and learning much about Linux or don’t have\nthe time to download and set up many of its popular security tools, I highly\nrecommend you check out BackTrack (www.backtrack-linux.org). The\nbootable Debian-based Linux CD “automagically” detects your hardware set-\ntings and comes with a slew of security tools that are relatively easy to use.\nAlternative bootable (or live) CDs include the Fedora Linux-based Network\nSecurity Toolkit (www.networksecuritytoolkit.org). A complete listing\nof live bootable Linux toolkits is available at www.livecdlist.com.\n159\nChapter 9: Wireless LANs\nA case study with Joshua Wright\non hacking wireless networks\nJoshua Wright shared with me an interesting aggressively attempting to exploit the network,\nstory about wireless penetration testing and Mr. Wright started watching network activity on\nwhy the little things always seem to get you. the guest network with tcpdump, thinking that\nperhaps he’d find an employee system that was\nThe Situation\nmisconfigured and on the wrong network.\nMr. Wright was onsite for a wireless penetra-\nAfter starting tcpdump, Mr. Wright started\ntion test for a customer who needed validation\nseeing broadcast and multicast traffic from\non his network design and implementation. The\nsource IP addresses that didn’t belong in the\ncustomer had carefully designed the network\nDHCP pool for the guest network. The sources\nto provide access to three groups of users:\nMr. Wright was seeing were not from guest\nemployees, legacy handheld wireless scan-\nsystems at all, but rather belonged to devices\nners, and guests. Employees were granted\non the employee and legacy device networks.\naccess to internal systems and applications\nWhile still connected to the guest network, Mr.\nbut were required to first authenticate to the\nWright manually configured his adapter with an\nwireless network using two-factor devices. The\nunused IP address from the employee network,\nlegacy handheld wireless scanners were only\nwhich granted him unrestricted access to inter-\nallowed to access a limited number of needed\nnal systems, including an unpatched Windows\nresources using WPA with pre-shared key\n2003 server that was vulnerable to the RPC\nauthentication. The guest users were restricted\nDCOM interface overflow exploit.\nto Internet access only over an open wireless\nnetwork. Mr. Wright’s job was to break in to the Later discussion with the customer revealed\nnetwork and to demonstrate the weaknesses to that the company WAN connection was\nthe customer. deemed too slow for downloading large patch\nupdates, so administrators would temporarily\nThe Outcome\nconnect internal systems to the guest network\nThe employee and legacy wireless networks to download the patches and disconnect. One\nwere both using AES-CCMP encryption, so forgotten system was configured to bridge mul-\nthere was little chance of getting in that way. tiple interfaces, granting access to the internal\nMr. Wright attempted to compromise the pre- networks from the guest network. By simply\nshared key used on the legacy network but was listening to what the network was trying to tell\nunsuccessful after exhausting a dictionary list him, Mr. Wright was able to bypass the well-\nof common passwords. The employee wire- planned intentions for security.\nless clients were configured to reject networks\nJoshua Wright is a senior security analyst for\nwithout the proper SSID and authentication\nInGuardians, Inc., a computer security consult-\nsettings, defeating his attempts to impersonate\ning services organization, and a senior instruc-\na legitimate AP. A traceroute on the guest net-\ntor for the SANS Institute. Joshua specializes\nwork revealed that it was physically separate\nin attacking wireless systems, and he has pub-\nfrom the company WAN.\nlished books, papers, and countless tools on his\nMr. Wright was starting to run out of options website, www.willhackforsushi.com.\nwhen he remembered the teaching of spiritual When he’s not hacking wireless networks,\nguru Ram Dass who once said, “The quieter Joshua seeks any opportunity to void the war-\nyou become the more you can hear.” Instead of ranty on electronic devices.\n160\nPart III: Hacking Network Hosts\nMost of the tests I outline in this chapter require only Windows-based utilities.\nMy favorite tools for assessing wireless networks in Windows are as follows:\n✓ Aircrack-ng (http://aircrack-ng.org)\n✓ CommView for WiFi (www.tamos.com/products/commwifi)\n✓ Elcomsoft Wireless Security Auditor (www.elcomsoft.com/ewsa.html)\n✓ OmniPeek (www.wildpackets.com/products/omnipeek_network_\nanalyzer)\nYou can also use a handheld wireless security testing device, such as the\nhandy Digital Hotspotter by Canary Wireless (www.canarywireless.com)\nand even your Android-based phone or tablet with apps such as WiEye or WiFi\nScanner. Apple, in its never-ending quest to protect itself from us and us from\nourselves, no longer permits wireless scanning using iOS-based devices.\nAn external antenna is also something to consider as part of your arsenal. I\nhave had good luck running tests without an antenna, but your mileage may\nvary. If you’re performing a walkthrough of your facilities to test for wireless\nsignals, for example, using an additional antenna increases your odds of find-\ning both legitimate and (more important) unauthorized wireless systems.\nYou can choose among three types of wireless antennas:\n✓ Omnidirectional: Transmits and receives wireless signals in 360 degrees\nover shorter distances, such as in boardrooms or reception areas. These\nantennas, also known as dipoles, typically come installed on APs from\nthe factory.\n✓ Semidirectional: Transmits and receives directionally focused wireless\nsignals over medium distances, such as down corridors and across one\nside of an office or building.\n✓ Directional: Transmits and receives highly focused wireless signals over\nlong distances, such as between buildings. This antenna, also known as\na high-gain antenna, is the antenna of choice for wireless hackers driving\naround cities looking for vulnerable APs — an act known as wardriving.\nAs an alternative to the antennas described in the preceding list, you can use\na nifty can design — called a cantenna — made from a Pringles, coffee, or\npork-and-beans can. If you’re interested in trying this, check out the article at\nwww.turnpoint.net/wireless/has.html for details. A simple Internet\nsearch turns up a lot of information on this subject, if you’re interested. One\nsite in particular (www.cantenna.com) sells the Super Cantenna kit which\nhas worked well for me.\n161\nChapter 9: Wireless LANs\nDiscovering Wireless LANs\nAfter you have a wireless card and wireless testing software, you’re ready to\nroll. The first tests you should perform gather information about your WLAN,\nas described in the following sections.\nChecking for worldwide recognition\nThe first test requires only the MAC address of your AP and access to the\nInternet. (You can find out more about MAC addresses later in this chapter,\nin the “Mac spoofing” section.) You’re testing to see whether someone has\ndiscovered your WLAN and posted information about it for the world to see.\nHere’s how the test works:\n1. Find your AP’s MAC address.\nIf you’re not sure what your AP’s MAC address is, you should be able to\nview it by using the arp -a command at a Windows command prompt.\nYou might have to ping the access point’s IP address first so the MAC\naddress is loaded into your ARP cache. Figure 9-1 shows what this can\nlook like.\nFigure 9-1:\nFinding\nthe MAC\naddress of\nan AP by\nusing arp.\n2. After you have the AP’s MAC address, browse to the WiGLE database\nof WLANs (www.wigle.net).\n3. Register with the site so you can perform a database query. It’s worth it.\n4. Select the Query link and log in.\nYou see a screen similar to Figure 9-2.\n5. To see whether your AP is listed, you can enter such AP information\nas geographical coordinates, but the simplest thing to do is enter your\nMAC address in the format shown in the example for the BSSID or\nMAC text box.\n162\nPart III: Hacking Network Hosts\nFigure 9-2:\nSearching\nfor your\nwireless\nAPs using\nthe WiGLE\ndatabase.\nIf your AP is listed, someone has discovered it — most likely via ward-\nriving — and has posted the information for others to see. You need to\nstart implementing the security countermeasures listed in this chapter\nas soon as possible to keep others from using this information against\nyou! There are numerous Wi-Fi “locator” apps for mobile devices as well.\nScanning your local airwaves\nMonitor the airwaves around your building to see what authorized and unau-\nthorized APs you can find. You’re looking for the SSID (service set identifier),\nwhich is your wireless network name. If you have multiple and separate wire-\nless networks, each one may or may not have a unique SSID associated with it.\nHere’s where the freebie tool NetStumbler (www.netstumbler.com/\ndownloads) comes into play. NetStumbler can discover SSIDs and other\ndetailed information about wireless APs, including the following:\n✓ MAC address\n✓ Name\n✓ Radio channel in use\n163\nChapter 9: Wireless LANs\n✓ Vendor name\n✓ Whether encryption is on or off\n✓ RF signal strength (signal-to-noise ratio)\nFigure 9-3 shows an example of what you might see when running NetStumbler\nin your environment. The information that you see here is what others can\nsee as long as they’re in range of your AP’s radio signals. NetStumbler and\nmost other tools work by sending a probe-request signal from the client. Any\nAPs within signal range must respond to the request with their SSIDs — that\nis, if they’re configured to broadcast their SSIDs upon request.\nFigure 9-3:\nNetStumbler\ndisplays\ndetailed\ndata on APs.\nWhen you’re using certain wireless security assessment tools, including\nNetStumbler and CommView for WiFi, your adapter might enter passive moni-\ntoring mode. This means you can no longer communicate with other wireless\nhosts or APs while the program is loaded.\nDiscovering Wireless Network Attacks\nand Taking Countermeasures\nVarious malicious hacks — including DoS attacks — can be carried out\nagainst your WLAN. This includes forcing APs to reveal their SSIDs during the\nprocess of being disassociated from the network and rejoining. In addition,\nhackers can literally jam the RF signal of an AP — especially in 802.11b and\n802.11g systems — and force the wireless clients to re-associate to a rogue\nAP masquerading as the victim AP.\nHackers can create man-in-the-middle attacks by maliciously using such tools\nas ESSID-jack and monkey-jack and can flood your network with thousands\nof packets per second by using the raw packet-generation tools Nping or\nNetScanTools Pro — enough to bring the network to its knees. Even more so\nthan with wired networks, this type of DoS attack is very difficult to prevent\non WLANs.\n164\nPart III: Hacking Network Hosts\nYou can carry out several attacks against your WLAN. The associated coun-\ntermeasures help protect your network from these vulnerabilities as well as\nfrom the malicious attacks previously mentioned. When testing your WLAN\nsecurity, look out for the following weaknesses:\n✓ Unencrypted wireless traffic\n✓ Weak WEP and WPA pre-shared keys\n✓ Crackable Wi-Fi Protected Setup (WPS) PINs\n✓ Unauthorized APs\n✓ Easily circumvented MAC address controls\n✓ Wireless equipment that’s physically accessible\n✓ Default configuration settings\nA good starting point for testing is to attempt to attach to your WLAN as an\noutsider and run a general vulnerability assessment tool, such as LanGuard\nor QualysGuard. This test enables you to see what others can see on your\nnetwork, including information on the OS version, open ports on your AP,\nand even network shares on wireless clients. Figure 9-4 shows the type of\ninformation that can be revealed about an AP on your network, including a\nmissing administrator password, an outdated operating system, and open\nports and shares that can be exploited.\nFigure 9-4:\nA LanGuard\nscan of a\nlive AP.\n165\nChapter 9: Wireless LANs\nDon’t overlook Bluetooth\nYou undoubtedly have various Bluetooth- ✓ BlueScanner (http://sourceforge.\nenabled wireless devices, such as laptops and net/projects/bluescanner)\nsmartphones, running within your organization.\n✓ Bluesnarfer (www.alighieri.org/\nAlthough vulnerabilities are not as prevalent as\ntools/bluesnarfer.tar.gz)\nthey are in 802.11-based Wi-Fi networks, they\nstill exist (currently, over 60 Bluetooth-related ✓ BlueSniper rifle (www.tomsguide.\nweaknesses are listed at http://nvd. com/us/how-to-bluesniper-\nnist.gov), and quite a few hacking tools take pt1,review-408.html)\nadvantage of them. You can even overcome the\n✓ Car Whisperer (http://trifinite.\npersonal area network distance limitation of\norg/trifinite_stuff_car\nBluetooth’s signal (typically just a few meters)\nwhisperer.html)\nand attack Bluetooth devices remotely by build-\ning and using a BlueSniper rifle. (See the fol- ✓ Detailed presentation on the various\nlowing list for the website.) Various resources Bluetooth attacks (http://trifinite.\nand tools for testing Bluetooth authentication/ org/Downloads/21c3_Bluetooth_\npairing and data transfer weaknesses include Hacking.pdf)\n✓ Blooover (http://trifinite.org/\ntrifinite_stuff_blooover.\nhtml)\nEncrypted traffic\nWireless traffic can be captured directly out of the airwaves, making this\ncommunications medium susceptible to eavesdropping. Unless the traffic\nis encrypted, it’s sent and received in cleartext just as on a standard wired\nnetwork. On top of that, the 802.11 encryption protocols, Wired Equivalent\nPrivacy (WEP) and Wi-Fi Protected Access (WPA), have their own weakness\nthat allows attackers to crack the encryption keys and decrypt the captured\ntraffic. This vulnerability has really helped put WLANs on the map — so to\nspeak.\nWEP, in a certain sense, actually lives up to its name: It provides privacy\nequivalent to that of a wired network, and then some. However, it wasn’t\nintended to be cracked so easily. WEP uses a fairly strong symmetric (shared-\nkey) encryption algorithm called RC4. Hackers can observe encrypted\nwireless traffic and recover the WEP key because of a flaw in how the RC4\ninitialization vector (IV) is implemented in the protocol. This weakness is\nbecause the IV is only 24 bits long, which causes it to repeat every 16.7 mil-\nlion packets — even sooner in many cases, based on the number of wireless\nclients entering and leaving the network.\n166\nPart III: Hacking Network Hosts\nMost WEP implementations initialize WLAN hardware with an IV of 0 and\nincrement it by 1 for each packet sent. This can lead to the IVs reinitializing —\nstarting over at 0 — approximately every five hours. Given this behavior,\nWLANs that have a small number of clients transmitting a relatively small rate\nof wireless packets are normally more secure than large WLANs that transmit\na lot of wireless data because there’s simply not enough wireless traffic being\ngenerated.\nUsing WEPCrack (http://sourceforge.net/projects/wepcrack), or\nAircrack-ng (http://aircrack-ng.org), hackers need to collect only a\nfew hours’ up to a few days’ (depending on how much wireless traffic is\non the network) worth of packets to break the WEP key. Figure 9-5 shows\nairodump (which is part of the Aircrack-ng suite) capturing WEP initialization\nvectors, and Figure 9-6 shows aircrack’s airodump at work cracking the WEP\nkey of my test network.\nFigure 9-5:\nUsing\nairodump\nto capture\nWEP ini-\ntialization\nvectors.\nFigure 9-6:\nUsing air-\ncrack to\ncrack WEP.\n167\nChapter 9: Wireless LANs\nAirodump and aircrack are very simple to run in Windows. You simply down-\nload and extract the aircrack programs, the cygwin Linux simulation environ-\nment, and the supporting peek files from http://aircrack-ng.org and\nyou’re ready to capture packets and crack away!\nA longer key length, such as 128 bits or 192 bits, doesn’t make WEP exponen-\ntially more difficult to crack. This is because WEP’s static key scheduling algo-\nrithm requires that only about 20,000 or so additional packets be captured to\ncrack a key for every extra bit in the key length.\nThe wireless industry came up with a solution to the WEP problem called\nWi-Fi Protected Access (WPA). WPA uses the Temporal Key Integrity Protocol\n(TKIP) encryption system, which fixes all the known WEP issues. WPA2,\nwhich replaced the original WPA, uses an even stronger encryption method\ncalled Counter Mode with Cipher Block Chaining Message Authentication\nCode Protocol (say that fast three times), or CCMP for short, based on the\nAdvanced Encryption Standard (AES). WPA and WPA2 running in “enterprise\nmode” require an 802.1x authentication server, such as a RADIUS server,\nto manage user accounts for the WLAN. Check with your vendor for WPA\nupdates.\nFor non-enterprise wireless APs (and there are plenty out there in business),\nthere’s no good reason to not be running WPA2.\nYou can also use aircrack to crack WPA and WPA2 pre-shared keys (PSKs).\nTo crack WPA-PSK encryption, you have to wait for a wireless client to\nauthenticate with its access point. A quick (and dirty) way to force the re-\nauthentication process is to send a de-authenticate packet to the broadcast\naddress. This is something my co-author, Peter T. Davis, and I cover in detail\nin our book, Hacking Wireless Networks For Dummies.\nYou can use airodump to capture packets and then start aircrack (you can\nalso run them simultaneously) to initiate cracking the pre-shared key by\nusing the following command-line options:\n#aircrack-ng -a2 -w path_to_wordlist <capture file(s)>\nCommView for WiFi is my tool of choice for WEP/WPA cracking. It’s simple\nto use and works well. Cracking WEP or WPA is simply a matter of 1) loading\nCommView for WiFi, 2) starting a packet capture on the wireless channel you\nwant test, and 3) clicking the Tools menu and selecting either the WEP or\nWPA Key Recovery option. A recovered WEP key is shown in Figure 9-7.\n168\nPart III: Hacking Network Hosts\nFigure 9-7:\nCommView\nfor WiFi’s\nKey\nRecovery\nto crack a\nWEP key.\nWPA key recovery is dependent on a good dictionary. The dictionary files\navailable at www.outpost9.com/files/WordLists.html are a good start-\ning point. Even with a great dictionary chock-full of potential passwords, I’ve\noften found that dictionary attacks against WPA are futile. Know your limits.\nAnother commercial alternative for cracking WPA and WPA2 keys is\nElcomsoft Wireless Security Auditor (EWSA). To use EWSA, you simply cap-\nture wireless packets in the tcpdump format (every WLAN analyzer supports\nthis format), load the capture file into the program, and shortly thereafter\nyou have the PSK. EWSA is a little different because it can crack WPA and\nWPA2 PSKs in a fraction of the time it would normally take, but there’s a\ncaveat. You must have a computer with a supported NVIDIA or ATI video\ncard. Yep, EWSA doesn’t just use the processing power of your CPU — it also\nharnesses the power and mammoth acceleration capabilities of the video\ncard’s graphics processing unit (GPU). Now that’s innovation!\nThe main EWSA interface is shown in Figure 9-8.\nUsing EWSA, you can try to crack your WPA/WPA2 PSKs at a rate of up to\n50,000 WPA/WPA2 pre-shared keys per second. Compare that to the lowly few\nhundred keys per second using just the CPU and you can see the value in a\ntool like this. I always say you get what you pay for.\nIf you need to use your WLAN analyzer to view traffic as part of your security\nassessment, you won’t see any traffic if WEP or WPA/WPA2 are enabled unless\nyou know the keys associated with each network. You can enter each key into\nyour analyzer, but just remember that hackers can do the same thing if they’re\nable to crack your WEP or WPA pre-shared keys by using one of the tools I\nmention earlier.\nFigure 9-9 shows an example of how you can view protocols on your WLAN\nby entering the WPA key into OmniPeek via the Capture Options window\nbefore you start your packet capture.\n169\nChapter 9: Wireless LANs\nFigure 9-8:\nUsing\nElcomsoft\nWireless\nSecurity\nAuditor to\ncrack WPA\npre-shared\nkeys.\nFigure 9-9:\nUsing\nOmniPeek\nto view\nencrypted\nwireless\ntraffic.\n170\nPart III: Hacking Network Hosts\nCountermeasures against\nencrypted traffic attacks\nThe simplest solution to the WEP problem is to migrate to WPA, or ideally,\nWPA2, for all wireless communications. You can also use a VPN in a Windows\nenvironment — free — by enabling Point-to-Point Tunneling Protocol (PPTP)\nfor client communications. You can also use the IPSec support built into\nWindows, as well as Secure Shell (SSH), Secure Sockets Layer/Transport\nLayer Security (SSL/TLS), and other proprietary vendor solutions, to keep\nyour traffic secure. Just keep in mind that there are cracking programs for\nPPTP, IPSec, and other VPN protocols as well, but overall, you’re pretty safe.\nNewer 802.11-based solutions exist as well. If you can configure your wireless\nhosts to regenerate a new key dynamically after a certain number of pack-\nets have been sent, the WEP vulnerability can’t be exploited. Many AP ven-\ndors have already implemented this fix as a separate configuration option,\nso check for the latest firmware with features to manage key rotation. For\ninstance, the proprietary Cisco LEAP protocol uses per-user WEP keys that\noffer a layer of protection if you’re running Cisco hardware. Again, be careful\nbecause cracking programs exist for LEAP, such as asleap (http://source\nforge.net/projects/asleap).\nThe 802.11i standard from the IEEE (also called WPA2) integrates the WPA\nfixes and more. This standard is an improvement over WPA but is not com-\npatible with older 802.11b hardware because of its implementation of the\nAdvanced Encryption Standard (AES) for encryption.\nIf you’re using WPA with a pre-shared key (which is more than enough for\nsmall WLANs), ensure that the key contains at least 20 random characters so\nit isn’t susceptible to the offline dictionary attacks available in such tools as\nAircrack-ng and Elcomsoft Wireless Security Auditor.\nKeep in mind that although WEP and weak WPA pre-shared keys are crack-\nable, it’s still much better than no encryption at all. Similar to the effect that\nhome security system signs have on would-be home intruders, a wireless\nLAN running WEP or weak WPA pre-shared keys is not nearly as attractive to\na criminal hacker as one without it. Many intruders are likely to move on to\neasier targets unless they really, really want to get into yours.\nWi-Fi Protected Setup\nWi-Fi Protected Setup (WPS) is a wireless standard that enables simple con-\nnectivity to “secure” wireless APs. The problem with WPS is that its implemen-\ntation of registrar PINs make it easy to connect to wireless and can facilitate\nattacks on the very WPA/WPA2 pre-shared keys used to lock down the overall\nsystem. As I’ve learned over the years with security, everything’s a tradeoff.\n171\nChapter 9: Wireless LANs\nWPS is intended for consumer use in home wireless networks. If your wireless\nenvironment is like most others that I see, it probably contains consumer-\ngrade wireless APs (routers) that are vulnerable to this attack.\nThe WPS attack is relatively straightforward using an open source tool called\nReaver (http://code.google.com/p/reaver-wps). Reaver works by\nexecuting a brute-force attack against the WPS PIN. I’ve been using the com-\nmercial version, Reaver Pro (http://hakshop.myshopify.com/products/\nreaver-pro), which comes with a bootable USB thumb drive and wireless\nadapter to streamline the process. Reaver’s interface, as shown in Figure\n9-10, is pretty straightforward.\nFigure 9-10:\nThe Reaver\nstartup\nwindow.\nRunning Reaver is easy. You simply follow these steps:\n1. Load Reaver and click the Play button in the middle of the window.\n2. Click the Play button in the attack column next to the AP you want to\ncrack.\n3. Let Reaver run and do its thing.\nThis process is shown in Figure 9-11.\nIt can take anywhere from a few minutes to a few hours, but if successful,\nReaver will return the WPA pre-shared key. You can pause and resume the\ncracking at any time.\n172\nPart III: Hacking Network Hosts\nFigure 9-11:\nUsing\nReaver\nto crack\na Wi-Fi\nProtected\nSetup PIN.\nI’ve had mixed results with Reaver depending on the computer you’re run-\nning it on and the wireless AP that you’re testing. It’s still a worthy attack you\nshould pursue if you’re looking to find and fix the wireless flaws that matter.\nCountermeasures against the WPS PIN flaw\nIt’s rare to come across a security fix as straightforward as this one: Disable\nWPS. If you need to leave WPS enabled, at least set up MAC address controls\non your AP(s). It’s not foolproof, but it’s better than nothing!\nRogue wireless devices\nWatch out for unauthorized APs and wireless clients that are attached to\nyour network and running in ad-hoc mode.\nAlso, be sure to educate your users on safe Wi-Fi usage when they’re outside\nof your office. Communicate to them the dangers of connecting to unknown\nWLANs and remind them on a periodic and consistent basis. Otherwise, their\nsystems can be hacked or become infected with malware, and guess whose\nproblem it is as soon as they connect back onto your network.\nBy using NetStumbler or your client manager software, you can test for APs\nand ad-hoc (or peer-to-peer) devices that don’t belong on your network. You\ncan also use the network monitoring features in a WLAN analyzer, such as\nOmniPeek and CommView for WiFi.\n173\nChapter 9: Wireless LANs\nLook for the following rogue AP characteristics:\n✓ Odd SSIDs, including the popular default ones such as linksys and free wifi.\n✓ Odd AP system names — that is, the name of the AP if your hardware\nsupports this feature. Not to be confused with the SSID.\n✓ MAC addresses that don’t belong on your network. Look at the first\nthree bytes of the MAC address (the first six numbers), which specify\nthe vendor name. You can perform a MAC-address vendor lookup at\nhttp://standards.ieee.org/develop/regauth/oui/public.\nhtml to find information on APs you’re unsure of.\n✓ Weak radio signals, which can indicate that an AP has been hidden away\nor is adjacent to or even outside of your building.\n✓ Communications across a different radio channel(s) than what your net-\nwork communicates on.\n✓ Degradation in network throughput for any WLAN client.\nIn Figure 9-12, NetStumbler has found two potentially unauthorized APs.\nThe ones that stand out are the two with SSIDs of BI and LarsWorld. Notice\nhow they’re running on two different channels, two different speeds, and are\nmade by two different hardware vendors. If you know what’s supposed to\nbe running on your wireless network (you do, don’t you?), unauthorized sys-\ntems can really stand out.\nFigure 9-12:\nNetStumbler\nshowing\npotentially\nunauthor-\nized APs.\nNetStumbler does have one limitation: It won’t find APs that have probe\nresponse (SSID broadcast) packets disabled. Commercial wireless network\nanalyzers such as CommView for WiFi as well as the open source Kismet look\nnot only for probe responses from APs like NetStumbler does, but also for\nother 802.11 management packets, such as association responses and beacons.\nThis allows Kismet to detect the presence of hidden WLANs.\nIf the UNIX platform is not your cup of tea, and you’re still looking for a quick\nand dirty way to root out hidden APs, you can create a client-to-AP reconnec-\ntion scenario that forces the broadcasting of SSIDs using de-authentication\npackets. You can find detailed instructions in the book I wrote with Peter T.\nDavis, Hacking Wireless Networks For Dummies.\n174\nPart III: Hacking Network Hosts\nThe safest way to root out hidden APs is to simply search for 802.11 manage-\nment packets. You can configure OmniPeek to search for 802.11 management\npackets to root out hidden APs by enabling a capture filter on 802.11 manage-\nment packets, as shown in OmniPeek’s options in Figure 9-13.\nFigure 9-13:\nYou can\nconfigure\nOmniPeek to\ndetect APs\nthat don’t\nbroadcast\ntheir SSIDs.\nFigure 9-14 shows how you can use CommView for WiFi to spot an odd net-\nwork host; for instance, the Hon Hai and Netgear systems if you know you\nonly use Cisco and Netopia hardware on your network.\nMy test network for this example is small compared to what you might see,\nbut you get the idea of how an odd system can stand out.\nFigure 9-14:\nUsing\nCommView\nfor WiFi\nto spot\nwireless\nsystems\nthat don’t\nbelong.\n175\nChapter 9: Wireless LANs\nWLANs set up in ad-hoc (or peer-to-peer) mode allow wireless clients to com-\nmunicate directly with one another without having to pass through an AP.\nThese types of WLANs operate outside the normal wireless security controls\nand can cause serious security issues beyond the normal 802.11 vulnerabilities.\nYou can use just about any WLAN analyzer to find unauthorized ad-hoc\ndevices on your network. If you come across quite a few ad-hoc systems,\nsuch as those devices listed as STA (short for station) in CommView for\nWiFi’s Type column, as shown in Figure 9-15, this could be a good indication\nthat one (or several) people are running unprotected wireless systems or\nat least have ad-hoc wireless enabled. These systems are often printers and\nother seemingly benign network systems, but they can be workstations and\nmobile devices. Either way, they’re potentially putting your network and\ninformation at risk, so they’re worth checking out.\nYou can also use the handheld Digital Hotspotter I mention earlier in this\nchapter (see “Choosing Your Tools”) to search for ad-hoc–enabled systems\nor even a wireless intrusion prevention system (WIPS) to search for beacon\npackets in which the ESS field is not equal to 1.\nFigure 9-15:\nCommView\nfor Wifi\nshowing\nseveral\nunauthor-\nized ad-hoc\nclients.\n176\nPart III: Hacking Network Hosts\nWalk around your building or campus (warwalk, if you will) to perform this\ntest to see what you can find. Physically look for devices that don’t belong\nand keep in mind that a well-placed AP or WLAN client that’s turned off won’t\nshow up in your network analysis tools. Search near the outskirts of the build-\ning or near any publicly accessible areas. Scope out boardrooms and the\noffices of upper-level managers for any unauthorized devices. These places\nmay be off-limits, but that’s all the more reason to check them for rogue APs.\nWhen searching for unauthorized wireless devices on your network, keep\nin mind that you might be picking up signals from nearby offices or homes.\nTherefore, if you find something, don’t immediately assume it’s a rogue\ndevice. One way to figure out whether a device is in a nearby office or home\nis by the strength of the signal you detect. Devices outside your office should\nhave a weaker signal than those inside. Using a WLAN analyzer in this way\nhelps narrow the location and prevent false alarms in case you detect legiti-\nmate neighboring wireless devices.\nIt’s pays to know your network environment. Knowing what your surround-\nings should look like makes it easier to spot potential problems.\nA good way to determine whether an AP you discover is attached to your\nwired network is to perform reverse ARPs (RARPs) to map IP addresses to\nMAC addresses. You can do this at a command prompt by using the arp -a\ncommand and simply comparing IP addresses with the corresponding MAC\naddress to see whether you have a match.\nAlso, keep in mind that WLANs authenticate the wireless devices, not the\nusers. Criminal hackers can use this to their advantage by gaining access\nto a wireless client via remote-access software, such as telnet or SSH, or by\nexploiting a known application or OS vulnerability. After they do that, they\npotentially have full access to your network and you could be none the wiser.\nCountermeasures against\nrogue wireless devices\nThe only way to detect rogue APs and wireless hosts on your network is to\nmonitor your WLAN proactively (say weekly, even daily), looking for indica-\ntors that wireless clients or rogue APs might exist. A WIPS is perfect for such\nmonitoring. But if rogue APs or clients don’t show up, that doesn’t mean\nyou’re off the hook. You might also need to break out the wireless network\nanalyzer, wireless IPS, or other network management application.\nDepending on your AP, a couple of configuration changes might keep hackers\nfrom carrying out these hacks against you:\n177\nChapter 9: Wireless LANs\n✓ If possible, increase your wireless beacon broadcast interval to the max-\nimum setting, which is around 65,535 milliseconds (roughly 66 seconds).\nThis can help hide the AP from hackers who are wardriving or walking\nby your building quickly. Be sure to test this first, though, because it\nmight create other unintended consequences, such as legitimate wire-\nless clients not being able to connect to your network. For more specific\ndetails on wireless protocols, check out Wireless Networks For Dummies\nby Peter T. Davis and Barry Lewis.\n✓ Disable probe responses to prevent your AP from responding to such\nrequests.\nUse personal firewall software, such as Windows Firewall, on all wireless hosts\nto prevent unauthorized remote access into your hosts, and subsequently,\nyour network.\nFinally, don’t forget about user education. It’s not foolproof, but it can help\nserve as an additional layer or defense. Ensure that security is always on the\ntop of everyone’s mind. Chapter 18 contains additional information about\nuser awareness and training.\nMAC spoofing\nA very common defense for wireless networks is Media Access Control (MAC)\naddress controls. This is where you configure your APs to allow only wireless\nclients with known MAC addresses to connect to the network. Consequently,\na very common hack against wireless networks is MAC address spoofing.\nThe bad guys can easily spoof MAC addresses in UNIX, by using the ifconfig\ncommand, and in Windows, by using the SMAC utility, as I describe in\nChapter 8. However, like WEP and WPA, MAC-address-based access controls\nare another layer of protection and better than nothing at all. If someone spoofs\none of your MAC addresses, the only way to detect malicious behavior is\nthrough contextual awareness by spotting the same MAC address being used\nin two or more places on the WLAN, which can be tricky.\nOne simple way to determine whether an AP is using MAC address controls is\nto try to associate with it and obtain an IP address via DHCP. If you can get an\nIP address, the AP doesn’t have MAC address controls enabled.\nThe following steps outline how you can test your MAC address controls and\ndemonstrate just how easy they are to circumvent:\n1. Find an AP to attach to.\nYou can do this simply by loading NetStumbler, as shown in Figure 9-16.\n178\nPart III: Hacking Network Hosts\nFigure 9-16:\nFinding an\naccessible\nAP via Net-\nStumbler.\nIn this test network, the AP with the SSID of doh! is the one I want to test.\nNote the MAC address of this AP as well. This will help you make sure\nyou’re looking at the right packets in the steps that follow. Although I’ve\nhidden most of the MAC address of this AP for the sake of privacy, let’s\njust say its MAC address is 00:40:96:FF:FF:FF. Also, notice in Figure 9-16\nthat NetStumbler was able to determine the IP address of the AP. Getting\nan IP address will help you confirm that you’re on the right wireless\nnetwork.\n2. Using a WLAN analyzer, look for a wireless client sending a probe\nrequest packet to the broadcast address or the AP replying with a\nprobe response.\nYou can set up a filter in your analyzer to look for such frames, or you\ncan simply capture packets and just browse through looking for the AP’s\nMAC address, which you noted in Step 1. Figure 9-17 shows what the\nProbe Request and Probe Response packets look like.\nNote that the wireless client (again for privacy, suppose its full MAC\naddress is 00:09:5B:FF:FF:FF) first sends out a probe request to the\nbroadcast address (FF:FF:FF:FF:FF:FF) in packet number 98. The AP\nwith the MAC address I’m looking for replies with a Probe Response to\n00:09:5B:FF:FF:FF, confirming that this is indeed a wireless client on the\nnetwork for which I’ll be testing MAC address controls.\n179\nChapter 9: Wireless LANs\nFigure 9-17:\nLooking for\nthe MAC\naddress of\na wireless\nclient on\nthe net-\nwork being\ntested.\n3. Change your test computer’s MAC address to that of the wireless client’s\nMAC address you found in Step 2.\nIn UNIX and Linux, you can change your MAC address very easily by\nusing the ifconfig command as follows:\na. Log in as root and then disable the network interface.\nInsert the network interface number that you want to disable (typi-\ncally wlan0 or ath0) into the command, like this:\n[root@localhost root]# ifconfig wlan0 down\nb. Enter the new MAC address you want to use.\nInsert the fake MAC address and the network interface number like\nthis:\n[root@localhost root]# ifconfig wlan0 hw ether\n01:23:45:67:89:ab\nThe following command also works in Linux:\n[root@localhost root]# ip link set wlan0 address\n01:23:45:67:89:ab\nc. Bring the interface back up with this command:\n[root@localhost root]# ifconfig wlan0 up\n180\nPart III: Hacking Network Hosts\nIf you change your Linux MAC addresses often, you can use a more fea-\nture-rich utility called GNU MAC Changer (www.alobbs.com/\nmacchanger).\nIn Windows, you might be able to change your MAC addresses in your\nwireless NIC properties via Control Panel. However, if you don’t like\ntweaking the OS in this manner or prefer to have an automated tool, you\ncan use a neat and inexpensive tool created by KLC Consulting called\nSMAC (available at www.klcconsulting.net/smac). To change your\nMAC address, you can use the steps I outline in Chapter 8.\nWhen you’re done, SMAC shows something similar to the screen capture\nin Figure 9-18.\nFigure 9-18:\nSMAC\nshowing\na spoofed\nMAC\naddress.\nTo reverse any of the preceding MAC address changes, simply reverse\nthe steps performed and then delete any data you created.\nNote that APs, routers, switches, and the like might detect when more\nthan one system is using the same MAC address on the network (that is,\nyours and the host that you’re spoofing). You might have to wait until\nthat system is no longer on the network; however, I rarely see any issues\nspoofing MAC addresses in this way, so you probably won’t have to do\nanything.\n4. Ensure that your wireless NIC is configured for the appropriate SSID.\nFor this example, I used the Netgear Smart Wizard utility to set the SSID\nto doh!, as shown in Figure 9-19.\n181\nChapter 9: Wireless LANs\nFigure 9-19:\nEnsure that\nyour SSID\nis correctly\nset.\nEven if your network is running WEP or WPA, you can still test your MAC\naddress controls. You just need to enter your encryption key(s) before\nyou can connect.\n5. Obtain an IP address on the network.\nYou can do this by rebooting or disabling/enabling your wireless NIC.\nHowever, you can do it manually by running ipconfig /renew at a\nWindows command prompt or by manually entering a known IP address\nin your wireless network card’s network properties.\n6. Confirm that you’re on the network by pinging another host or brows-\ning the Internet.\nIn this example, I could ping the AP (10.11.12.154) or simply load my\nfavorite web browser to see whether I can access the Internet.\nThat’s all there is to it! You’ve circumvented your wireless network’s MAC\naddress controls in six simple steps. Piece of cake!\nCountermeasures against MAC spoofing\nThe easiest way to prevent the circumvention of MAC address controls and\nsubsequent unauthorized attachment to your wireless network is to enable\nWPA or ideally WPA2. Another way to control MAC spoofing is by using a\nwireless IPS. This second option is certainly more costly, but it could be well\nworth the money when you consider the other proactive monitoring and\nblocking benefits such a system would provide.\n182\nPart III: Hacking Network Hosts\nPhysical security problems\nVarious physical security vulnerabilities can result in physical theft, the\nreconfiguration of wireless devices, and the capturing of confidential informa-\ntion. You should look for the following security vulnerabilities when testing\nyour systems:\n✓ APs mounted on the outside of a building and accessible to the public.\n✓ Poorly mounted antennas — or the wrong types of antennas — that\nbroadcast too strong a signal and that are accessible to the public. You\ncan view the signal strength in NetStumbler, your wireless client manager,\nor one of the commercial tools I mention earlier in this chapter.\nThese issues are often overlooked because of rushed installations, improper\nplanning, and lack of technical knowledge, but they can come back to haunt\nyou. The book Wireless Networks For Dummies provides more details.\nCountermeasures against physical\nsecurity problems\nEnsure that APs, antennas, and other wireless and network infrastructure\nequipment are locked away in secure closets, ceilings, or other places that\nare difficult for a would-be intruder to access physically. Terminate your APs\noutside any firewall or other network perimeter security devices — or at\nleast in a DMZ — whenever possible. If you place unsecured wireless equip-\nment inside your secure network, it can negate any benefits you would get\nfrom your perimeter security devices, such as your firewall.\nIf wireless signals are propagating outside your building where they don’t\nbelong, either\n✓ Turn down the transmit power setting of your AP.\n✓ Use a smaller or different antenna (semidirectional or directional) to\ndecrease the signal.\nSome basic planning helps prevent these vulnerabilities.\nVulnerable wireless workstations\nWireless workstations have tons of security vulnerabilities — from weak\npasswords to unpatched security holes to the storage of WEP and WPA\n183\nChapter 9: Wireless LANs\nencryption keys locally. Most of the well-known wireless client vulnerabilities\nhave been patched by their respective vendors, but you never know whether\nall your wireless systems are running the latest (and usually safest) versions\nof operating systems, wireless client software, and other software applications.\nIn addition to using the wireless client, stumbling, and network analysis soft-\nware I mention earlier in this chapter, you should also search for wireless\nclient vulnerabilities by using various vulnerability testing tools, such as GFI\nLanGuard, QualysGuard, and Acunetix Web Vulnerability Scanner.\nThese programs aren’t wireless-specific, but they might turn up vulner-\nabilities in your wireless computers that you might not have discovered or\nthought about testing otherwise. I cover operating system and application\nvulnerabilities as well as using the tools in the preceding list in Parts IV and V\nof this book.\nCountermeasures against vulnerable\nwireless workstations\nYou can implement the following countermeasures to keep your workstations\nfrom being used as entry points into your WLAN:\n✓ Regularly perform vulnerability assessments on your wireless work-\nstations, in addition to other network hosts.\n✓ Apply the latest vendor security patches and enforce strong user pass-\nwords.\n✓ Use personal firewalls and endpoint security software on all wireless\nsystems where possible, including smartphones and tablets, to keep\nmalicious intruders off those systems and out of your network.\n✓ Install anti-malware software.\nDefault configuration settings\nSimilar to wireless workstations, wireless APs have many known vulnerabilities.\nThe most common ones are default SSIDs and admin passwords. The more\nspecific ones occur only on certain hardware and software versions that are\nposted in vulnerability databases and vendor websites. Many wireless systems\nstill have WEP and WPA disabled by default as well.\n184\nPart III: Hacking Network Hosts\nCountermeasures against default\nconfiguration settings exploits\nYou can implement some of the simplest and most effective security counter-\nmeasures for WLANs — and they’re all free:\n✓ Make sure that you change default admin passwords and SSIDs.\n✓ At a minimum, enable WPA. Ideally, you should use WPA2 with very\nstrong pre-shared keys (PSKs) consisting of at least 20 random charac-\nters or use WPA/WPA2 in enterprise mode with a RADIUS server for host\nauthentication.\n✓ Disable SSID broadcasting if you don’t need this feature.\n✓ Apply the latest firmware patches for your APs and WLAN cards. This\ncountermeasure helps to prevent various vulnerabilities to minimize the\nexploitation of publicly known holes related to management interfaces\non APs and client-management software on the clients.\nChapter 10\nMobile Devices\nIn This Chapter\n▶ Seeking out the common weaknesses in laptops, phones, and tablets\n▶ Executing security tests to uncover crucial mobile flaws\n▶ Minimizing mobile security risks\nM\nobile computing is the new frontier for business — and for hacking.\nIt seems that everyone has a mobile device of some sort for either\npersonal or business use; often both. If not properly secured, mobile devices\nconnected to the enterprise network represent thousands upon thousands of\nunprotected islands of information floating about, out of your control.\nBecause of all the phones, tablets, and laptops running numerous operating\nsystem platforms chock-full of apps, an infinite number of risks are associ-\nated with mobile computing. Rather than delving into all the variables, this\nchapter explores some of the biggest, most common mobile security flaws\nthat could impact you and your business.\nSizing Up Mobile Vulnerabilities\nIt pays to find and fix the low-hanging fruit on your network. That’s where\nyou get the most bang for your buck. The following mobile laptop, phone,\nand tablet weaknesses should be front and center on your priority list:\n✓ No encryption\n✓ Poorly implemented encryption\n✓ No power-on passwords\n✓ Easily guessed (or cracked) power-on passwords\n186\nPart III: Hacking Network Hosts\nFor other technologies and systems (web applications, operating systems,\nand so on), you can usually find just the testing tool you need. However, for\nfinding mobile-related flaws, relatively few security testing tools are available.\nNot surprisingly, the more expensive tools enable you to uncover the big\nflaws with the least amount of pain and hassle.\nCracking Laptop Passwords\nArguably the greatest threat to any business’s security is unencrypted lap-\ntops. Given all the headlines and awareness about this effectively inexcusable\nsecurity vulnerability, I can’t believe it’s still so prevalent in business. This\nsection explores tools you can use to crack laptop passwords on Windows,\nLinux, or UNIX systems. You then find out about the basic countermeasures\nto prevent this vulnerability.\nChoosing your tools\nMy favorite tool to demonstrate the risks associated with unencrypted lap-\ntops is Elcomsoft System Recovery (www.elcomsoft.com/esr.html).\nYou simply burn this tool to a CD and use it to boot the system you want to\nrecover (or reset) the password from, as shown in Figure 10-1.\nFigure 10-1:\nElcomsoft\nSystem\nRecovery\nis great\nfor crack-\ning and\nresetting\nWindows\npasswords\non unpro-\ntected\nlaptops.\n187\nChapter 10: Mobile Devices\nYou have the option to reset the local administrator (or other) password or\nhave it crack all passwords. It’s really that simple, and it’s highly successful,\neven on the latest operating systems, such as Windows 8. The most difficult\nand time-consuming thing about Elcomsoft System Recovery is downloading\nand burning it to CD.\nYou can also use another proven tool for Windows called NTAccess (www.\nmirider.com/ntaccess.html) for resetting local Windows accounts.\nThis program isn’t pretty or fancy, but it does the job. As with ophcrack\n(discussed a little later in this section), Elcomsoft and NTAccess provide\nan excellent way to demonstrate that you need to encrypt your laptop hard\ndrives.\nPeople will tell you they don’t have anything important or sensitive on their\nlaptops. They do. Even seemingly benign laptops used for training or sales\ncan have tons of sensitive information that can be used against your business.\nThis includes spreadsheets that users have copied from the network to work\non locally, VPN connections with stored login credentials, web browsers that\ncache browsing history, and, even worse, website passwords that users have\nchosen to save.\nAfter you reset or crack the local administrator (or other) account, you\ncan log in to Windows and have full access to the system. By simply poking\naround, you can find sensitive information, remote network connections,\nand cached web connections to demonstrate the business risk. If you\nwant dig even deeper, you can use additional tools from Elcomsoft (www.\nelcomsoft.com/products.html), such as Elcomsoft Internet Password\nBreaker, Proactive System Password Recovery, and Advanced EFS Data\nRecovery for uncovering additional information from Windows systems.\nPassware (www.lostpassword.com) offers similar commercial tools as well.\nIf you want to perform similar checks on a UNIX or Linux-based laptop, you\nshould be able to boot from a Knoppix (www.knoppix.net) or similar “live”\nLinux distribution and edit the local passwd file (/etc/shadow) to reset or\nchange it. Remove the encrypted code between the first and second colons\nfor the “root” (or whatever user) entry or copy the password from the entry of\nanother user and paste it into that area.\nIf you’re budget-strapped and need a free option for cracking Windows pass-\nwords, you can use ophcrack as a standalone program in Windows by follow-\ning these steps:\n1. Download the source file from http://ophcrack.sourceforge.net.\n2. Extract and install the program by entering the following command:\nophcrack-win32-installer-3.4.0.exe (or whatever the current\nfilename is)\n188\nPart III: Hacking Network Hosts\n3. Load the program by selecting the ophcrack icon from your Start\nmenu.\n4. Click the Load button and select the type of test you want to run.\nIn this example, shown in Figure 10-2, I’m connecting to a remote server\ncalled test1. This way, ophcrack will authenticate to the remote server\nusing my locally logged-in username and run pwdump code to extract\nthe password hashes from the server’s SAM database. You can also load\nhashes from the local machine or from hashes extracted during a previ-\nous pwdump session.\nThe extracted password hash usernames will look similar to those\nshown in Figure 10-3.\nFigure 10-2:\nLoading\npassword\nhashes from\na remote\nSAM data-\nbase in\nophcrack.\n5. Click the Launch icon to begin the rainbow crack process.\nThe process can take a little while depending on your computer’s speed.\nThree of the long, random passwords I created for my test accounts\nwere cracked in just a couple of minutes, as shown in Figure 10-4. The\nonly reason the fourth wasn’t cracked is because it had an exclamation\npoint on the end and I was using ophcrack’s smaller “10k” alphanumeric\ncharacter set that doesn’t test for extended characters. ophcrack has\nother options that test for extended characters, so even the more cre-\native passwords can be cracked.\n189\nChapter 10: Mobile Devices\nFigure 10-3:\nUsernames\nextracted\nvia\nophcrack.\nFigure 10-4:\nCracked\nhashes\nusing\nophcrack.\nThere’s also a bootable Linux-based version of ophcrack (available at\nhttp://ophcrack.sourceforge.net/download.php?type=livecd)\nthat allows you to boot a system and start cracking passwords without\nhaving to log in or install any software.\n190\nPart III: Hacking Network Hosts\nThe fallacy of full disk encryption\nIt seems simple enough to just encrypt your ✓ Screen locking: This third potentially fatal\nlaptop hard drives and be done with laptop flaw with full disk encryption occurs when\nsecurity. In a perfect world, that would be the users refuse to ensure their screens are\ncase, but as long as people are involved, I locked whenever they step away from\nsuspect this mobile weakness will continue to their encrypted laptops. All it takes is a few\nexist. seconds for a criminal to swipe a laptop to\ngain — and maintain — full access to a\nSeveral problems with disk encryption create a\nlaptop that’s “fully protected” with full disk\nfalse sense of security:\nencryption.\n✓ Password selection: Your disk encryp-\nOne final note, and this is important: Before\ntion is only as good as the password (or\nyou jump on the BitLocker bandwagon, know\npassphrase) that was used to enable the\nthat BitLocker encryption can be fully negated\nencryption.\nby a program from Passware called Passware\n✓ Key management: If your users don’t have a Kit Forensic (www.lostpassword.com/\nway to get into their systems if they forget or kit-forensic.htm). The same holds\nlose their passwords, they’ll get burned once true for the other free encryption program\nand do whatever it takes not to encrypt their TrueCrypt (www.truecrypt.org). I cover\ndrives moving forward. Also, certain disk this flaw and other enterprise security con-\nencryption software such as Microsoft’s cerns involving BitLocker in my whitepapers\nBitLocker may provide the option for (or even available at www.principlelogic.com/\nrequire) users to carry around their decryp- bitlocker.html. Another option for crack-\ntion key on a thumb drive or similar storage ing encrypted disks is Elcomsoft Forensic Disk\ndevice. Imagine losing a laptop with the key Decryptor (www.elcomsoft.com/efdd.\nto the kingdom stored right inside the laptop html).\nbag! It happens.\nI highly recommend you use ophcrack’s LiveCD on a sample laptop computer\nor two to demonstrate just how simple it is to recover passwords and, subse-\nquently, sensitive information from laptops that don’t have encrypted hard\ndrives. It’s amazingly simple, yet people still refuse to invest money in full disk\nencryption software.\nCountermeasures\nThe best safeguard against a hacker using a password reset program against\nyour systems is to encrypt your hard drives by using Symantec Encryption\n(www.symantec.com/products-solutions/families/?fid=encryption)\nor WinMagic SecureDoc (www.winmagic.com/products).\n191\nChapter 10: Mobile Devices\nPower-on passwords set in the BIOS can be helpful as well, but they’re often\na mere bump in the road. All a criminal has to do is reset the BIOS password\nor, better yet, simply remove the hard drive from your lost system and access\nit from another machine. You also need to ensure that people can’t gain\nunauthorized physical access to your computers. When a hacker has physical\naccess and your drives are not encrypted, all bets are off. That said, full disk\nencryption is not foolproof — see the nearby sidebar, “The fallacy of full\ndisk encryption.”\nCracking Phones and Tablets\nI don’t envy IT administrators and information security managers for many\nreasons but especially when it comes to the bring your own device (BYOD)\nmovement taking place in business today. With BYOD, you have to trust that\nyour users are making good decisions about security, and you have to figure\nout how to manage each and every device, platform, and app. This manage-\nment task is arguably the greatest challenge IT professionals have faced to\nthis point. Further complicating matters, you have criminal hackers, thieves,\nand other hooligans doing their best to exploit the complexity of it all, and it’s\ncreating some serious business risks. The reality is that very few businesses —\nand individuals — have their phones and tablets properly secured.\nPlenty of vendors claim that their mobile device management (MDM) solutions\nare the answer to phone and tablet woes. They’re right . . . to an extent. MDM\ncontrols that separate personal information from business information and\nensure the proper security controls are enabled at all times can help you\nmake a big leap toward locking down the mobile enterprise.\nOne of the greatest things you can do to protect phones and tablets from\nunauthorized use is to implement a tool that dates back to the beginning of\ncomputers: passwords. Yep, your phone and tablet users should employ\ngood old-fashioned passwords (technically passphrases) that are easy to\nremember yet hard to guess. Passwords are one of the best controls you can\nhave. Yet there are plenty of mobile devices with no passwords or passwords\nthat are easily cracked.\nIn the following section, I demonstrate by using a commercial forensics tool.\nKeep in mind that such tools are typically restricted to law enforcement\npersonnel and security professionals, but they could certainly end up in the\nhands of the bad guys. Using such tools for your own information security\ntesting can be a great way to demonstrate the business risk and make the\ncase for better mobile controls.\n192\nPart III: Hacking Network Hosts\nMobile apps can introduce a slew of security vulnerabilities into your environ-\nment, especially certain apps available for Android via Google Play that aren’t\nproperly vetted. In recent source code analysis using Checkmarx’s\nCxDeveloper (see Chapter 14), I’ve found these apps to have the same flaws as\ntraditional software, such as SQL injection, hard-coded encryption keys, and\nbuffer overflows that can put sensitive information at risk. The threat of mal-\nware is just as great. Apps are yet another reason to get your mobile environ-\nment under control using MDM and, if resources permit, your own app store.\nCracking iOS Passwords\nI’d venture to guess that many phone and tablet passwords (really, they’re\njust 4-digit PINs) can be guessed outright. A mobile device gets lost or stolen\nand all the person recovering it has to do is try some basic number combina-\ntions such as 1234, 1212, or 0000. Soon, voilà! — the system is unlocked.\nMany phones and tablets running iOS, Android, and Blackberry OS are con-\nfigured to wipe the device if the incorrect password is entered X number of\ntimes (often 10 failed attempts). A reasonable security control indeed. But\nwhat else can be done? Some commercial tools can be used to crack simple\npasswords/PINs and recover information from lost or stolen devices or\ndevices undergoing a forensics investigation.\nElcomsoft’s iOS Forensic Toolkit (http://ios.elcomsoft.com) provides\na means for demonstrating just how easily passwords/PINs on iOS-based\nphones and tablets can be cracked. Here’s how:\n1. Plug your iPhone/iPod/iPad into your test computer and place it into\nDevice Firmware Upgrade (DFU) mode.\nTo enter DFU mode, simply power the device off, hold down the Home\nbutton (bottom center) and sleep button (upper corner) at the same\ntime for 10 seconds, and continue holding down the Home button for\nanother 10 seconds. The mobile device screen goes blank.\n2. Load the iOS Forensic Toolkit by inserting your USB license dongle\ninto your test computer and running Tookit.cmd.\nYou see the screen shown in Figure 10-5.\n193\nChapter 10: Mobile Devices\nFigure 10-5:\niOS Forensic\nToolkit’s\nmain page.\n3. Load the iOS Forensic Toolkit Ramdisk onto the mobile device by\nselecting option 2 LOAD RAMDISK.\nLoading the RAMDISK code allows your test computer to communicate\nwith the mobile device and run the tools needed for cracking the pass-\nword (among other things).\n4. Select the iOS device that’s connected, as shown in Figure 10-6.\nI selected option 14 because I have an iPhone 4 with GSM.\nFigure 10-6:\nSelect the\nappropriate\niOS device\nfrom the list.\nYou now see the toolkit connect to the device and confirm a successful\nload, as shown in Figure 10-7. You should see the Elcomsoft logo in the\nmiddle of your mobile device’s screen as well.\n194\nPart III: Hacking Network Hosts\nFigure 10-7:\niOS Forensic\nToolkit\nRamdisk\nloading\nsuccessfully.\n5. To crack the devices password/PIN, simply select option 6 GET\nPASSCODE on the main menu.\niOS Forensic Toolkit will prompt you to save the passcode to a file. You\ncan press Enter to accept the default of passcode.txt. The cracking\nprocess will commence and, with any luck, the passcode will be found\nand displayed as shown in Figure 10-8.\nFigure 10-8:\nCracking\na 4-digit\nPIN on an\niPhone.\n195\nChapter 10: Mobile Devices\nSo, having no password for phones and tablets is bad, and a 4-digit PIN\nsuch as this is not much better. User beware!\nYou can also use iOS Forensic Toolkit to copy files and even crack the\nkeychains to uncover the password that protects the device’s backups\nin iTunes (option 5 GET KEYS).\nIf anything, you need to be thinking about how your business informa-\ntion, which undoubtedly is present on phones and tablets, is going to\nbe handled in the event one of your employee’s devices is seized by law\nenforcement personnel. Sure, they’ll follow their chain-of-custody pro-\ncedures, but overall, they’ll have very little incentive to ensure the infor-\nmation stays protected long-term.\nBe careful with how you sync your mobile devices and, especially, where the\nfile backups are stored. They may be off in the wild blue yonder (the cloud),\nwhich means you have no real way to gauge how secure the personal and\nbusiness information truly is. On the other hand, when synched files and\nbackups are stored without a password, with a weak password, or on an unen-\ncrypted laptop, everything is still at risk given the tools available to crack the\nencryption used to protect this information. For instance, Elcomsoft’s Phone\nPassword Breaker (http://www.elcomsoft.com/eppb.html) can be\nused to unlock backups from BlackBerry and Apple devices as well as recover\nonline backups made to iCloud.\nOxygen Forensic Suite (www.oxygen-forensic.com) is an alternative com-\nmercial tool that can be used for cracking iOS-based passwords as well as\nadditional recovery functionality for Android-based systems.com.\nCountermeasures against\npassword cracking\nThe most realistic way to prevent such password cracking is to require —\nand continually enforce — strong passwords such as multidigit PINs consist-\ning of 5 or more numbers or, better yet, complex passphrases that are very\neasy to remember yet practically impossible to crack such as I_love_my_\nj0b_in_IT!. MDM controls can help you enforce such a policy. You’ll likely\nget pushback from employees and management, but it’s the only sure bet to\nhelp prevent this attack. I cover getting buy-in for your security initiatives in\nChapter 19. Good luck!\n196\nPart III: Hacking Network Hosts"
  },
  {
    "input": "What are the key vulnerabilities and security measures related to hacking Windows and Linux operating systems?",
    "summary": "This chapter focuses on Windows vulnerabilities, including port scanning, information gathering, and exploiting weaknesses to gain remote access. It also covers tools like Metasploit and countermeasures to secure Windows systems. Linux, while often seen as more secure, also has vulnerabilities that can be exploited, and many of the same tools used for Windows can apply to Linux and UNIX systems. The chapter provides information on common Linux vulnerabilities, such as unsecured services and file permissions, along with methods to detect and mitigate them.",
    "output": "Part IV\nHacking Operating\nSystems\nIn this part . . .\nN\now that you’re past the network level, it’s time to\nget down to the nitty-gritty — those fun operating\nsystems you use on a daily basis and have come to both\nlove and hate. I definitely don’t have enough room in this\nbook to cover every operating system version or even\nevery operating system vulnerability, but I certainly hit\nthe important parts — especially the ones that aren’t\neasily fixed with patches.\nThis part starts by looking at the most widely used (and\npicked on) operating system — Microsoft Windows. From\nWindows NT to Windows 8 and Server 2012, I show you\nsome of the best ways to attack these operating systems\nand secure them from the bad guys. This part then looks\nat Linux and its less publicized (yet still major) security\nflaws. Many of the hacks and countermeasures I cover can\napply to many other flavors of UNIX as well.\nChapter 11\nWindows\nIn This Chapter\n▶ Port scanning Windows systems\n▶ Gleaning Windows information without logging in\n▶ Catching the Windows 8 security flaws you don’t want to overlook\n▶ Exploiting Windows vulnerabilities\n▶ Minimizing Windows security risks\nM\nicrosoft Windows (with such versions as Windows XP; Windows\nServer 2012; Windows 7; and the newest flavor that many have yet to\nwarm up to, Windows 8) is the most widely used operating system (OS) in\nthe world. It’s also the most widely abused. Is this because Microsoft doesn’t\ncare as much about security as other OS vendors? The short answer is “no.”\nSure, numerous security flaws were overlooked — especially in the Windows\nNT days — but Microsoft products are so pervasive throughout today’s net-\nworks that Microsoft is the easiest vendor to pick on; therefore Microsoft\nproducts often end up in the bad guys’ crosshairs. The one positive about\nhackers is that they’re driving the requirement for better security!\nMany of the security flaws in the headlines aren’t new. They’re variants of\nvulnerabilities that have been around for a long time in UNIX and Linux, such\nas the remote procedure call (RPC) vulnerabilities that the Blaster worm\nexploited. You’ve heard the saying, “The more things change, the more they\nstay the same.” That applies here, too. Most Windows attacks are prevent-\nable if the patches are properly applied. Thus, poor security management is\noften the real reason Windows attacks are successful, yet Microsoft takes the\nblame and must carry the burden.\nIn addition to the password attacks I cover in Chapter 7, many other attacks\nare possible against a Windows-based system. Tons of information can be\nextracted from Windows by simply connecting to the system across a net-\nwork and using tools to pull out the information. Many of these tests don’t\neven require you to be authenticated to the remote system. All someone with\nmalicious intent needs to find on your network is a vulnerable Windows com-\nputer with a default configuration that’s not protected by such measures as a\npersonal firewall and the latest security patches.\n200\nPart IV: Hacking Operating Systems\nWhen you start poking around on your network, you might be surprised at\nhow many of your Windows-based computers have security vulnerabilities.\nFurthermore, you’ll be even more surprised at just how easy it is to exploit\nvulnerabilities to gain complete remote control of Windows by using a tool\nsuch as Metasploit. After you connect to a Windows system and have a valid\nusername and password (by knowing it or deriving it by using the password-\ncracking techniques in Chapter 7 or other techniques outlined in this chap-\nter), you can dig deeper and exploit other aspects of Windows.\nThis chapter shows you how to test for some of the most critical attacks\nagainst the Windows OS and outlines countermeasures to make sure your\nsystems are secure.\nIntroducing Windows Vulnerabilities\nGiven Windows’ ease of use, its enterprise-ready Active Directory service,\nand the feature-rich .NET development platform, many organizations have\nmoved to the Microsoft platform for their networking and computing needs.\nMany businesses — especially the small- to medium-sized ones — depend\nsolely on the Windows OS for network usage. Many large organizations run\ncritical servers, such as web servers and database servers, on the Windows\nplatform as well. If security vulnerabilities aren’t addressed and managed\nproperly, they can bring a network or an entire organization to its knees.\nWhen Windows and other Microsoft software are attacked — especially by a\nwidespread Internet-based worm or virus — hundreds of thousands of orga-\nnizations and millions of computers are affected. Many well-known attacks\nagainst Windows can lead to the following problems:\n✓ Leakage of sensitive information, including files containing healthcare\ninformation and credit card numbers\n✓ Passwords being cracked and used to carry out other attacks\n✓ Systems taken completely offline by denial of service (DoS) attacks\n✓ Full remote control being obtained\n✓ Entire databases being corrupted or deleted\nWhen unsecured Windows-based systems are attacked, serious things can\nhappen to a tremendous number of computers around the world.\n201\nChapter 11: Windows\nChoosing Tools\nLiterally hundreds of Windows hacking and testing tools are available. The\nkey is to find a set of tools that can do what you need and that you’re com-\nfortable using.\nMany security tools — including some of the tools in this chapter — work\nwith only certain versions of Windows. The most recent version of each tool\nin this chapter is compatible with Windows XP and Windows 7, but your\nmileage may vary.\nThe more security tools and other power-user applications you install in\nWindows — especially programs that tie into the network drivers and TCP/\nIP stack — the more unstable Windows becomes. I’m talking about slow per-\nformance, blue screens of death, and general instability issues. Unfortunately,\noften the only fix is to reinstall Windows and all your applications. After\nrebuilding my laptop every few months, I finally wised up and bought a copy\nof VMware Workstation and a dedicated computer that I can junk up with test-\ning tools without worrying about it affecting my ability to get my other work\ndone. (Ah, the memories of those DOS and Windows 3.x days when things\nwere much simpler!)\nFree Microsoft tools\nYou can use the following free Microsoft tools to test your systems for vari-\nous security weaknesses:\n✓ Built-in Windows programs for NetBIOS and TCP/UDP service enumera-\ntion, such as these three:\n• nbtstat for gathering NetBIOS name table information\n• netstat for displaying open ports on the local Windows system\n• net for running various network-based commands, including view-\ning shares on remote Windows systems and adding user accounts\nafter you gain a remote command prompt via Metasploit\n✓ Microsoft Baseline Security Analyzer (MBSA) (www.microsoft.com/\ntechnet/security/tools/mbsahome.mspx) to test for missing\npatches and basic Windows security settings\n✓ Sysinternals (http://technet.microsoft.com/en-us/sys\ninternals/default.aspx) to poke, prod, and monitor Windows\nservices, processes, and resources both locally and over the network\n202\nPart IV: Hacking Operating Systems\nAll-in-one assessment tools\nAll-in-one tools perform a wide variety of security tests, including the following:\n✓ Port scanning\n✓ OS fingerprinting\n✓ Basic password cracking\n✓ Detailed vulnerability mappings of the various security weaknesses\nthat the tools find on your Windows systems\nI use these tools in my work with very good results:\n✓ GFI LanGuard (www.gfi.com/network-security-vulnerability-\nscanner)\n✓ QualysGuard (www.qualys.com)\nQualys’s cloud application service provider/software as a service (whatever\nterm you want to use these days) is very easy to use. Simply log in to the inter-\nface, give it the IP addresses to scan, and tell it to go. The service has very\ndetailed and accurate vulnerability testing — it’s my all-time favorite for net-\nwork/OS vulnerability testing. Another scanner I’ve heard good things about is\nRapid7’s Nexpose (www.rapid7.com/vulnerability-scanner.jsp).\nTask-specific tools\nThe following tools perform one or two specific tasks. These tools provide\ndetailed security assessments of your Windows systems and insight that you\nmight not otherwise get from all-in-one assessment tools:\n✓ Metasploit (www.metasploit.com) for exploiting vulnerabilities that\nsuch tools as QualysGuard and Nexpose discover to obtain remote\ncommand prompts, add users, and much more\n✓ NetScanTools Pro (www.netscantools.com) for TCP port scanning,\nping sweeps, and share enumeration\n✓ ShareEnum (http://technet.microsoft.com/en-us/sys\ninternals/bb897442.aspx) for share enumeration\n✓ TCPView (http://technet.microsoft.com/en-us/sysinternals/\nbb897437.aspx) to view TCP and UDP session information\n✓ Winfo (www.ntsecurity.nu/toolbox/winfo) for null session enu-\nmeration to gather such configuration information as security policies,\nlocal user accounts, and shares\n203\nChapter 11: Windows\nWindows XP SP2 and later versions, as well as Windows Server 2003 SP1 and\nlater versions, have a new “undocumented feature” that can (and will)\nseverely limit your network scanning speeds: Only ten half-open TCP connec-\ntions can be made at a time. If you think your system might be affected by this,\ncheck out the Event ID 4226 Patcher tool (www.lvllord.de) for a hack to run\non the Windows TCP/IP stack that will allow you to adjust the TCP half-open\nconnections setting to a more realistic number. The default is to change it to\n50, which seems to work well.\nBe forewarned that Microsoft doesn’t support this hack. Having said that, I\nhaven’t had any trouble with this hack at all. Disabling the Windows Firewall\n(or other third-party firewall) can help speed things up, too. If possible, test\non a dedicated system or virtual machine, because doing so minimizes any\nimpact your test results may have on the other work you do on your computer.\nGathering Information about Your\nWindows Vulnerabilities\nWhen you assess Windows vulnerabilities, start by scanning your computers\nto see what the bad guys can see.\nThe exploits in this chapter were run against Windows from inside a firewall.\nUnless I point out otherwise, all the tests in this chapter can be run against all\nversions of the Windows OS. The attacks in this chapter are significant enough\nto warrant testing for, regardless of your current setup. Your results might\nvary from mine depending on the specific version of Windows, patch levels,\nand other system hardening you’ve done.\nSystem scanning\nA few straightforward processes can identify weaknesses in Windows systems.\nTesting\nStart gathering information about your Windows systems by running an initial\nport scan:\n1. Run basic scans to find which ports are open on each Windows system:\nScan for TCP ports with a port scanning tool, such as NetScanTools Pro.\nThe NetScanTools Pro results in Figure 11-1 show several potentially\nvulnerable ports open on a Windows 7 system, including those for DNS\n(UDP port 53); the ever-popular — and easily hacked — NetBIOS (port\n139); and SQL Server (UDP 1434).\n204\nPart IV: Hacking Operating Systems\nFigure 11-1:\nPort scan-\nning a\nWindows 7\nsystem with\nNetScan\nTools Pro.\n2. Perform OS enumeration (such as scanning for shares and specific OS\nversions) by using an all-in-one assessment tool, such as LanGuard.\nFigure 11-2 shows a LanGuard scan that reveals the server version,\nvulnerabilities, open ports, and more.\nIf you need to quickly identify the specific version of Windows that’s\nrunning, you can use Nmap (http://nmap.org/download.html) with\nthe -O option, as shown in Figure 11-3.\nOther OS fingerprinting tools are available, but I’ve found Nmap to be\none of the most accurate.\n3. Determine potential security vulnerabilities.\nThis is subjective and might vary from system to system, but what you\nwant to look for are interesting services and applications and proceed\nfrom there.\n205\nChapter 11: Windows\nFigure 11-2:\nGathering\ndetailed\nvulner-\nabilities of\na Windows\n2000\nServer with\nLanGuard.\nFigure 11-3:\nUsing Nmap\nto deter-\nmine the\nWindows\nversion.\nCountermeasures against system scanning\nYou can prevent an external attacker or malicious internal user from gather-\ning certain information about your Windows systems by implementing the\nproper security settings on your network and on the Windows hosts. You\nhave the following options:\n✓ Use a network firewall or web application firewall (WAF).\n✓ Use the Windows Firewall or other personal firewall software on each\nsystem. You want to block the Windows networking ports for RPC (port\n135) and NetBIOS (ports 137–139 and 445).\n✓ Disable unnecessary services so that they don’t appear when a connec-\ntion is made.\n206\nPart IV: Hacking Operating Systems\nNetBIOS\nYou can gather Windows information by poking around with NetBIOS\n(Network Basic Input/Output System) functions and programs. NetBIOS\nallows applications to make networking calls and communicate with other\nhosts within a LAN.\nThese Windows NetBIOS ports can be compromised if they aren’t properly\nsecured:\n✓ UDP ports for network browsing:\n• Port 137 (NetBIOS name services)\n• Port 138 (NetBIOS datagram services)\n✓ TCP ports for Server Message Block (SMB):\n• Port 139 (NetBIOS session services)\n• Port 445 (runs SMB over TCP/IP without NetBIOS)\nHacks\nThe hacks described in the following two sections can be carried out on\nunprotected systems running NetBIOS.\nUnauthenticated enumeration\nWhen you’re performing your unauthenticated enumeration tests, you can\ngather configuration information about the local or remote systems two ways:\n✓ Using all-in-one scanners, such as LanGuard or QualysGuard\n✓ Using the nbtstat program that’s built in to Windows (nbtstat stands for\nNetBIOS over TCP/IP Statistics)\nFigure 11-4 shows information that you can gather from a Windows 7 system\nwith a simple nbtstat query.\nFigure 11-4:\nUsing\nnbtstat to\ngather infor-\nmation on a\nWindows 7\nsystem.\n207\nChapter 11: Windows\nnbtstat shows the remote computer’s NetBIOS name table, which you gather\nby using the nbtstat -A command. This displays the following information:\n✓ Computer name\n✓ Domain name\n✓ Computer’s MAC address\nWhen running nbtstat against an older Windows 2000 server, you might even\nbe able glean the ID of the user who’s currently logged in.\nAn advanced program such as LanGuard isn’t necessary to gather this basic\ninformation from a Windows system. However, the graphical interface offered\nby commercial software such as this presents its findings in a prettier fashion\nand is often much easier to use. Additionally, you have the benefit of gathering\nthe information you need with one tool.\nShares\nWindows uses network shares to share certain folders or drives on the\nsystem so other users can access them across the network. Shares are easy\nto set up and work very well. However, they’re often misconfigured, allowing\nhackers and other unauthorized users to access information they shouldn’t\nbe able to get to. You can search for Windows network shares by using the\nShare Finder tool built in to LanGuard. This tool scans an entire range of IP\naddresses, looking for Windows shares, as shown in Figure 11-5.\nFigure 11-5:\nUsing\nLanGuard to\nscan your\nnetwork for\nWindows\nshares.\n208\nPart IV: Hacking Operating Systems\nThe shares displayed in Figure 11-5 are just what malicious insiders are look-\ning for because the share names give a hint of what type of files might be\naccessible if they connect to the shares. After the bad guys discover these\nshares, they’re likely to dig a little further to see whether they can browse\nthe files within the shares. I cover shares and rooting out sensitive informa-\ntion on network shares and other storage devices in Chapter 15.\nCountermeasures against NetBIOS attacks\nYou can implement the following security countermeasures to minimize\nNetBIOS and NetBIOS over TCP/IP attacks on your Windows systems:\n✓ Use a network firewall.\n✓ Use Windows Firewall or some other personal firewall software on each\nsystem.\n✓ Disable NetBIOS — or at least Windows File and Printer Sharing.\nDisabling NetBIOS might not be practical in a network where users and\napplications depend on file sharing or in a mixed environment where\nolder Windows 2000 and NT systems rely on NetBIOS for file and printer\nsharing.\n✓ Educate your users on the dangers of enabling file shares for everyone\nto access. I cover these risks in detail in Chapter 15.\nHidden shares — those with a dollar sign ($) appended to the end of the share\nname — don’t really help hide the share name. Any of the tools I’ve mentioned\ncan see right through this form of security by obscurity. In fact, if you come\nacross such shares, you’ll want to look at them more closely, as a user may be\ntrying to hide something.\nDetecting Null Sessions\nA well-known vulnerability within Windows can map an anonymous connec-\ntion (or null session) to a hidden share called IPC$ (which stands for interpro-\ncess communication). This attack method can be used to\n✓ Gather Windows host configuration information, such as user IDs and\nshare names.\n✓ Edit parts of the remote computer’s registry.\nAlthough Windows Server 2008, Windows XP, Windows 7, and Windows 8 don’t\nallow null session connections by default, Windows 2000 Server does — and\n(sadly) plenty of those systems are still around to cause problems on most\nnetworks.\n209\nChapter 11: Windows\nAlthough later versions of Windows are much more secure than their prede-\ncessors, don’t assume that all’s well in Windows-land. I can’t tell you how\nmany times I see supposedly secure Windows installations “tweaked” to\naccommodate an application or other business need that happens to facilitate\nexploitation.\nMapping\nFollow these steps for each Windows computer to which you want to map a\nnull session:\n1. Format the basic net command, like this:\nnet use \\\\host_name_or_IP_address\\ipc$ “” “/user:”\nThe net command to map null sessions requires these parameters:\n• net (the built-in Windows network command) followed by the use\ncommand\n• The IP address or hostname of the system to which you want to\nmap a null connection\n• A blank password and username\nThe blanks are why it’s called a null connection.\n2. Press Enter to make the connection.\nFigure 11-6 shows an example of the complete command when mapping\na null session. After you map the null session, you should see the mes-\nsage The command completed successfully.\nFigure 11-6:\nMapping\na null ses-\nsion to a\nvulnerable\nWindows\nsystem.\nTo confirm that the sessions are mapped, enter this command at the command\nprompt:\nnet use\nAs shown in Figure 11-6, you should see the mappings to the IPC$ share on\neach computer to which you’re connected.\n210\nPart IV: Hacking Operating Systems\nGleaning information\nWith a null session connection, you can use other utilities to gather critical\nWindows information remotely. Dozens of tools can gather this type of\ninformation.\nYou — like a hacker — can take the output of these enumeration programs\nand attempt (as an unauthorized user) to\n✓ Crack the passwords of the users found. (See Chapter 7 for more on\npassword cracking.)\n✓ Map drives to the network shares.\nYou can use the following applications for system enumeration against server\nversions of Windows prior to Server 2003 as well as Windows XP.\nnet view\nThe net view command (see Figure 11-7) shows shares that the Windows\nhost has available. You can use the output of this program to see informa-\ntion that the server is advertising to the world and what can be done with it,\nincluding the following:\n✓ Share information that a hacker can use to attack your systems, such as\nmapping drives and cracking share passwords.\n✓ Share permissions that might need to be removed, such as the permis-\nsion for the Everyone group, to at least see the share on older Windows\n2000–based systems.\nFigure 11-7:\nnet view\ndisplays\ndrive shares\non a remote\nWindows\nhost.\nConfiguration and user information\nWinfo (www.ntsecurity.nu/toolbox/winfo) and DumpSec (www.system\ntools.com/somarsoft/index.html) can gather useful information about\nusers and configurations, such as\n✓ Windows domain to which the system belongs\n✓ Security policy settings\n211\nChapter 11: Windows\n✓ Local usernames\n✓ Drive shares\nYour preference might depend on whether you like graphical interfaces or a\ncommand line:\n✓ Winfo is a command-line tool.\nBecause Winfo is a command-line tool, you can create batch (script) files\nthat automate the enumeration process. The following is an abbreviated\nversion of Winfo’s output of a Windows NT server, but you can collect\nthe same information from other Windows systems:\nWinfo 2.0 - copyright (c) 1999-2003, Arne Vidstrom\n- http://www.ntsecurity.nu/toolbox/winfo/\nSYSTEM INFORMATION:\n- OS version: 4.0\nPASSWORD POLICY:\n- Time between end of logon time and forced logoff: No forced logoff\n- Maximum password age: 42 days\n- Minimum password age: 0 days\n- Password history length: 0 passwords\n- Minimum password length: 0 characters\nUSER ACCOUNTS:\n* Administrator\n(This account is the built-in administrator account)\n* doctorx\n* Guest\n(This account is the built-in guest account)\n* IUSR_WINNT\n* kbeaver\n* nikki\nSHARES:\n* ADMIN$\n- Type: Special share reserved for IPC or administrative share\n* IPC$\n- Type: Unknown\n* Here2Bhacked\n- Type: Disk drive\n* C$\n- Type: Special share reserved for IPC or administrative share\n* Finance\n- Type: Disk drive\n* HR\n- Type: Disk drive\nThis information cannot be gleaned from a default installation of\nWindows Server 2003, Windows XP, Windows 7, or Windows 8.\n212\nPart IV: Hacking Operating Systems\nYou can peruse the output of such tools for user IDs that don’t belong\non your system, such as\n• Ex-employee accounts that haven’t been disabled\n• Potential backdoor accounts that a hacker might have created\nIf attackers get this information, they can attempt to exploit potentially\nweak passwords and log in as those users.\nNetUsers\nThe NetUsers tool (www.systemtools.com/free.htm) can show who has\nlogged in to a remote Windows computer. You can see such information as\n✓ Abused account privileges\n✓ Users currently logged into the system\nFigure 11-8 shows the history of local logins of a remote Windows workstation.\nFigure 11-8:\nThe\nNetUsers\ntool.\nThis information can help you track, for auditing purposes, who’s logging in\nto a system. Unfortunately, this information can be useful for hackers when\nthey’re trying to figure out what user IDs are available to crack. They might\neven determine the system’s daily use if the user IDs are descriptive, such as\nbackup (for a backup server) or devuser (for a development user).\nCountermeasures against null session hacks\nIf it makes good business sense and the timing is right, upgrade to the more\nsecure Windows Server 2012 or Windows 7. They don’t have the vulnerabili-\nties described in the following list.\nYou can easily prevent null session connection hacks by implementing one or\nmore of the following security measures:\n✓ Block NetBIOS on your Windows server by preventing these TCP ports\nfrom passing through your network firewall or personal firewall:\n• 139 (NetBIOS sessions services)\n• 445 (runs SMB over TCP/IP without NetBIOS)\n213\nChapter 11: Windows\n✓ Disable File and Printer Sharing for Microsoft Networks in the Properties\ntab of the machine’s network connection for those systems that don’t\nneed it.\n✓ Restrict anonymous connections to the system. For Windows NT and\nWindows 2000 systems, you can set HKEY_LOCAL_MACHINE\\SYSTEM\\\nCurrentControlSet\\Control\\LSA\\RestrictAnonymous to a\nDWORD value as follows:\n• None: This is the default setting.\n• Rely on Default Permissions (Setting 0): This setting allows the\ndefault null session connections.\n• Do Not Allow Enumeration of SAM Accounts and Shares (Setting 1):\nThis is the medium security level setting. This setting still allows\nnull sessions to be mapped to IPC$, enabling such tools as Walksam\nto garner information from the system.\n• No Access without Explicit Anonymous Permissions (Setting 2): This\nhigh security setting prevents null session connections and system\nenumeration.\nHigh security creates problems for domain controller communication\nand network browsing, so be careful!\nMicrosoft Knowledge Base Article 246261 covers the caveats of using the high\nsecurity setting for RestrictAnonymous. It’s available on the web at http://\nsupport.microsoft.com/default.aspx?scid=KB;en-us;246261.\nFor later versions of Windows, such as Windows Server 2008 R2 and\nWindows 7, ensure that the Network Access anonymous components of the\nlocal or group security policy are set as shown in Figure 11-9.\nFigure 11-9:\nDefault local\nsecurity\npolicy set-\ntings in\nWindows 7\nthat restrict\nnull session\nconnections.\n214\nPart IV: Hacking Operating Systems\nChecking Share Permissions\nWindows shares are the available network drives that show up when users\nbrowse the network in My Network Places. Windows shares are often miscon-\nfigured, allowing more people to have access to them than they should. The\ncasual browser can exploit this security vulnerability, but a malicious insider\ngaining unauthorized access to a Windows system can result in serious secu-\nrity and compliance consequences, including the leakage of sensitive infor-\nmation and even the corruption or deletion of critical files.\nWindows defaults\nThe default share permission depends on the Windows system version.\nWindows 2000/NT\nWhen creating shares in Windows NT and Windows 2000, the group Everyone\nis given Full Control access in the share by default for all files to\n✓ Browse files\n✓ Read files\n✓ Write files\nAnyone who maps to the IPC$ connection with a null session (as described\nin the previous section, “Null Sessions”) is automatically made part of the\nEveryone group. This means that remote hackers can automatically gain\nBrowse, Read, and Write access to a Windows NT or Windows 2000 server\nafter establishing a null session.\nWindows XP and newer\nIn Windows XP and newer (Windows Server 2008 R2, Windows 7, and so on),\nthe Everyone group is given only Read access to shares. This is definitely an\nimprovement over the defaults in Windows 2000 and Windows NT. However,\nyou still might have situations in which you don’t want the Everyone group to\nhave Read access to a share.\nShare permissions are different from file permissions. When creating shares,\nyou have to set both. In current versions of Windows, this helps create hoops\nfor casual users to jump through and discourage share creation, but it’s not\nfoolproof. Unless you have your Windows desktops completely locked down,\nusers can still share at will.\n215\nChapter 11: Windows\nTesting\nAssessing your share permissions is a good way to get an overall view of who\ncan access what. This testing shows how vulnerable your network shares —\nand sensitive information — can be. You can find shares with default permis-\nsions and unnecessary access rights enabled. Trust me; they’re everywhere!\nThe best way to test for share weaknesses is to log in to the Windows system\nvia a standard local or domain user with no special privileges and run an enu-\nmeration program so you can see who has access to what.\nLanGuard has a built-in share finder tool for uncovering unprotected shares,\nas shown in Figure 11-10.\nThe Everyone group has full share and file access to the LifeandHealth share\non the THINKPAD host. I see situations like this all the time where someone\nshares their local drive so others can access it. The problem is they often\nforget to remove the permissions and leave a gaping hole for a security\nbreach. I outline how to uncover sensitive information in unstructured files\non shares and other storage systems in Chapter 15.\nFigure 11-10:\nUsing\nLanGuard’s\nshare finder\nto seek out\nWindows\nshares.\n216\nPart IV: Hacking Operating Systems\nWindows 8 security\nWith all the vulnerabilities in Windows, you may ✓ Lots of privacy enhancements and security\nbe inclined to jump ship and move to Linux. But updates in Internet Explorer 10\nnot so fast. Microsoft has made great strides\nFinally, Windows 8 allows you to perform an OS\nwith security in Windows 7. Although Windows\nreload without losing any of your data. The OS\nVista, like Windows Me, took a bunch of abuse\nis faster too. These are both great features for\nand left an ugly scar on Microsoft, Vista did lay\nfolks who use the OS for security testing. It’s\nthe groundwork for what’s now the much more\nabout time, Microsoft!\nsecure Windows 8.\nHaving run various scans and attacks against\nWindows 7 has proven itself to be pretty resilient,\nWindows 8 systems, I’ve found that it’s a darn\nand Microsoft has made even more improve-\nsecure default installation. So, does all this mean\nments in Windows 8, including the following:\nthat Windows 8 is immune to attack and abuse?\n✓ Integration of secure boot via the Unified Of course not. As long as the human element is\nExtensible Firmware Interface (UEFI) to pro- involved in the software development, network\ntect the OS from low-level malware infections administration, and end-user functions, people\nwill continue to make mistakes that leave windows\n✓ Stronger controls in Internet Explorer, such\nopen (pun intended) for the bad guys to sneak\nas AppContainer, that effectively sandbox\nthrough and carry out their attacks. Furthermore,\nweb applications\nif your mobile Windows 7 systems are ever lost or\n✓ New password mechanisms via Picture stolen, they’re just as vulnerable to the password\nPassword and PIN to, presumably, create attacks that I cover in Chapter 7 and Chapter 10 as\na more robust yet user-friendly authentica- any other version of Windows. The key is to make\ntion mechanism sure you never let your guard down!\nExploiting Missing Patches\nIt’s one thing to poke and prod Windows to find vulnerabilities that might\neventually lead to some good information — maybe system access. However,\nit’s quite another to stumble across a vulnerability that will provide you with\nfull and complete system access — all within 10 minutes. Well, it’s no longer\nan empty threat that “arbitrary code” can be run on a system that may lead\nto a vulnerability exploitation. Now, with such tools as Metasploit, all it takes\nis one missing patch on one system to gain access and demonstrate how the\nentire network can be compromised. A missing patch like this is the ethical\nhacker’s pot of gold.\nEven with all the strict policies and fancy patch management tools, on every\nnetwork I come across, a handful of Windows systems don’t have all the\npatches applied. Even if you think all your systems have the latest patches\ninstalled, you have to be sure. It’s what ethical hacking is all about: Trust but\nverify.\n217\nChapter 11: Windows\nBefore you go ’sploitin’ vulnerabilities with Metasploit, it’s very important to\nknow that you’re venturing into sensitive territory. Not only can you gain full,\nunauthorized access to sensitive systems, but you can also put the systems\nbeing tested into a state where they can hang or reboot. So, read each\nexploit’s documentation and proceed with caution.\nBefore you can exploit a missing patch or related vulnerability, you have to\nfind out what’s available for exploitation. The best way to go about doing this\nis to use a tool such as QualysGuard or LanGuard to find them. I’ve found\nQualysGuard to be very good at rooting out such vulnerabilities even as an\nunauthenticated user on the network. Figure 11-11 shows QualysGuard scan\nresults of a Windows server system that has the nasty Windows Plug and\nPlay Remote Code Execution vulnerability that I still see quite often.\nUsing Metasploit\nAfter you find a vulnerability, the next step is to exploit it. In this example, I\nuse Metasploit (an open source tool owned by Rapid7) and obtain a remote\ncommand prompt on the vulnerable server. Here’s how:\nFigure 11-11:\nExploitable\nvulnerability\nfound by\nQualys-\nGuard.\n218\nPart IV: Hacking Operating Systems\n1. Download and install Metasploit (currently at version 4.4) from\nwww.metasploit.com/download.\nI use the Windows version; all you have to do is download and run the\nexecutable.\n2. After the installation is complete, run the Metasploit GUI (now\nreferred to as MSFGUI), which is Metasploit’s main console.\nThere’s also a web-based version of Metasploit that you can access\nthrough your browser (Metasploit Web), but I prefer the GUI interface.\nYou see a screen similar to the one shown in Figure 11-12.\n3. Expand the Exploits option to see what exploits are available to run,\nas shown in Figure 11-13.\nIf you know the specific vulnerability (say, Microsoft’s MS08-067), you\ncan simply enter part or all of the search term (such as ms08) in the\nsearch field at the top and then click Find.\n4. After you find the exploit you want to run against your target system,\nsimply double-click the exploit and then follow the steps starting with\nselecting the target operating system, as shown in Figure 11-14; click\nthe Forward button.\nSelect Automatic Targeting if it’s available; otherwise, make your\nbest guess of which version of Windows is running and then click the\nForward button.\nFigure 11-12:\nThe main\nMetasploit\nconsole.\n219\nChapter 11: Windows\nFigure 11-13:\nBrowsing\nthe available\nexploits.\nFigure 11-14:\nSelect\nthe target\noperating\nsystem.\n5. Select the payload (the specific hack) you want to send to the target\nand then click the Forward button.\nI typically choose windows/shell/reverse_tcp, as shown in Figure 11-15.\n220\nPart IV: Hacking Operating Systems\n6. Enter the IP address of the target system in the RHOST field and con-\nfirm that the IP address shown in the LHOST field is the address of your\ntesting system, as shown in Figure 11-16. Click the Forward button.\nFigure 11-15:\nLoad a\nspecific\npayload to\nsend to the\nexploited\nsystem.\nFigure 11-16:\nEntering\nrequired\nremote and\nIP address.\n221\nChapter 11: Windows\n7. Confirm your settings on the final screen, as shown in Figure 11-17,\nand click the Apply button.\nThe job executes, and you see the shell session in the Sessions section\nin the lower-right quadrant of the Metasploit GUI.\n8. Double-click the session and a new window opens with a command\nprompt on the target system, as shown in Figure 11-18.\nI now “own” the system and can do whatever I want.\nFor example, one thing I commonly do is add a user account to the exploited\nsystem. You can actually do this within Metasploit (via the adduser pay-\nloads), but I prefer to do it on my own so I can get screenshots of my actions.\nTo add a user, simply enter net user username password /add at the\nMetasploit command prompt.\nNext, I add the user to the local administrators group by entering net local-\ngroup administrators username /add at the Metasploit command prompt.\nYou can then log in to the remote system by mapping a drive to the C$ share\nor by connecting via Remote Desktop.\nFigure 11-17:\nChecking\nfinal param-\neters before\ncarrying out\nthe exploit.\n222\nPart IV: Hacking Operating Systems\nFigure 11-18:\nRemote\ncommand\nprompt\non target\nsystem\nobtained by\nexploiting\na missing\npatch\nvulnerability.\nIf you choose to add a user account during this phase, be sure to remove\nit when you finish. Otherwise, you can create another vulnerability on the\nsystem — especially if the account has a weak password. Chapter 3 covers\nrelated issues, such as the need for a contract when performing your testing.\nYou want to make sure you’ve covered yourself.\nAll in all, this is ethical hacking at its finest!\nThree unique versions of Metasploit are available from Rapid7. The free edi-\ntion outlined in the preceding steps is called Metasploit Community. It may\nbe all you need if an occasional screenshot of remote access or similar is suf-\nficient for your testing purposes. There’s also Metasploit Express which adds\nfeatures such as password auditing and evidence collection. Finally, there’s a\nfull-blown commercial version called Metasploit Pro for the serious security\nprofessional. Metasploit Pro adds features for social engineering, web appli-\ncation scanning, and detailed reporting.\nMetasploit Pro’s Overview screen is shown in Figure 11-19. Note the workflow\nfeatures in the tabs across the top including Analysis, Sessions, Campaigns,\nWeb Apps, and Reports. It’s a well-thought-out interface that takes the pain\nout of traditional security scanning, exploitation, and reporting, which is\nespecially useful for the less technical IT professional.\n223\nChapter 11: Windows\nFigure 11-19:\nMetasploit\nPro’s\ngraphical\ninterface\nprovides\nbroad secu-\nrity testing\ncapabilities.\nMetasploit Pro provides you with the ability to import scanner findings (typi-\ncally XML files) from third-party vulnerability scanners such as Acunetix Web\nVulnerability Scanner, Nmap, and QualysGuard. Simply click the Analysis tab\nand select Import. After the scan data is imported, you can click Vulnerabilities\n(under Analysis) and see all the original vulnerability scanner findings. To\nexploit one of the vulnerabilities (it’ll have to be a supported exploit), simply\nclick the finding under the Name column and you’ll be presented with a new\npage that allows you to exploit the flaw, as shown in Figure 11-20.\nKeep in mind that I’ve demonstrated only a fraction of what Metasploit can\ndo. I highly recommend you download it and familiarize yourself with it.\nNumerous resources are available at www.metasploit.com/help. The\npower of Metasploit is unbelievable all by itself. Combine it with the exploit\ncode that’s continually updated at Offensive Security’s Exploits Database\n(www.exploit-db.com), and you have practically everything you need if\nyou choose to drill down to that level of exploitation.\n224\nPart IV: Hacking Operating Systems\nFigure 11-20:\nStarting\nthe exploit\nprocess in\nMetasploit\nPro is as\nsimple as\nimporting\nyour scan-\nner findings\nand clicking\nExploit.\nCountermeasures against missing\npatch vulnerability exploits\nPatch your systems — both the Windows OS and any Microsoft or third-party\napplications running on them. Seriously, that’s all there is to it. Combine that\nwith the other hardening recommendations I provide in this chapter, and you\nhave a pretty darned secure Windows environment.\nTo get your arms around the patching process, you have to automate it\nwherever you can. You can use Windows Update — or better yet — Windows\nServer Update Services (WSUS) for Microsoft-centric patches, which can\nbe found at http://technet.microsoft.com/en-us/wsus/default.\naspx. I can’t stress enough how you need to get your third-party patches\nfor Adobe, Java, and so on under control. If you’re looking for a commercial\nalternative, check out GFI LanGuard’s patch management features (www.gfi.\ncom/network-security-vulnerability-scanner) and Lumension Patch\nand Remediation (www.lumension.com/vulnerability-management/\npatch-management-software.aspx). I cover patching more in-depth in\nChapter 17.\n225\nChapter 11: Windows\nRunning Authenticated Scans\nAnother test you can run against your Windows systems is an “authenti-\ncated” scan — essentially looking for vulnerabilities as a trusted user. I find\nthese types of tests to be very beneficial because they often highlight system\nproblems and even operational security weaknesses (such as poor change\nmanagement processes, weak patch management, and lack of information\nclassification) that would never be discovered otherwise.\nA trusted insider who has physical access to your network and the right tools\ncan exploit vulnerabilities even more easily. This is especially true if no inter-\nnal access control lists or IPS is in place and/or a malware infection occurs.\nA way to look for Windows weaknesses while you’re logged in (that is,\nthrough the eyes of a malicious insider) is by using some of the general vul-\nnerability scanning tools I’ve mentioned, such as LanGuard and QualysGuard.\nFigure 11-21 shows confirmed and potential security issues found on a\nWindows 7 system.\nFigure 11-21:\nRunning\nan authen-\nticated\nscan with\nLanGuard\nto see what\nrogue insid-\ners can\nexploit.\n226\nPart IV: Hacking Operating Systems\nI recommend running authenticated scans as a regular local or domain user\nand as an administrator or any other user type you might have. This will\nshow you who has access to what in the event that a vulnerability is pres-\nent. You’ll likely be surprised to find out that a large portion of vulnerabili-\nties, such as those listed in Figure 11-21, are accessible via a standard user\naccount. You don’t necessarily need to run authenticated scans every time\nyou test for security flaws, but doing so at least once or twice per year is not\na bad idea.\nYou can also use Microsoft Baseline Security Analyzer (MBSA) to check for\nbasic vulnerabilities and missing patches. MBSA is a free utility from Microsoft\nthat you can download at www.microsoft.com/technet/security/tools/\nmbsahome.mspx. MBSA checks all Windows 2000 and later (Windows 8 is not\nyet supported) operating systems for missing patches. It also tests Windows,\nSQL Server, and IIS for basic security settings, such as weak passwords. You\ncan use these tests to identify security weaknesses in your systems.\nWith MBSA, you can scan either the local system you’re logged in to or\ncomputers across the network. One caveat: MBSA requires an administrator\naccount on the local machines you’re scanning.\nChapter 12\nLinux\nIn This Chapter\n▶ Examining Linux hacking tools\n▶ Port scanning Linux hosts\n▶ Gleaning Linux information without logging in\n▶ Exploiting common vulnerabilities when logged in to Linux\n▶ Minimizing Linux security risks\nL\ninux hasn’t made inroads into businesses the way that Windows has, but\nLinux is present in some capacity in practically every network nonethe-\nless. A common misconception is that Linux is more secure than Windows.\nHowever, more and more frequently, Linux and its sister variants of UNIX are\nprone to some of the same types of security vulnerabilities, so you can’t let\nyour guard down.\nHackers are attacking Linux in droves because of its popularity and growing\nusage in today’s network environment. Because some versions of Linux are\nfree — in the sense that you don’t have to pay for the base operating system —\nmany organizations are installing Linux for their web servers and e-mail serv-\ners in hopes of saving money and having a more secure system. Linux has\ngrown in popularity for other reasons as well, including the following:\n✓ Abundant resources are available, including books, websites, and\ndeveloper and consultant expertise.\n✓ There’s a lower risk that Linux will be hit with as much malware as\nWindows and its applications have to deal with. Linux excels when it\ncomes to security, but it probably won’t stay that way.\n✓ There has been increased buy-in from other UNIX vendors, including\nIBM and Oracle.\n✓ UNIX and Linux have become increasingly easier to use.\nBased on what I see in my work, Linux is less vulnerable to common security\nflaws than Windows. When comparing any current distribution of Linux, such\nas Ubuntu and Red Hat/Fedora, with Windows XP or Windows 7, I tend to find\nmore weaknesses in the Windows systems. Chalk it up to widespread use,\n228\nPart IV: Hacking Operating Systems\nmore features, or uneducated users, but there seems to be a lot more that\ncan happen in a Windows environment. That said, Linux is certainly not flaw-\nless. In addition to the password attacks I cover in Chapter 7, certain remote\nand local attacks are possible against Linux-based systems. In this chapter,\nI show you some security issues in the Linux operating system and outline\nsome countermeasures to plug the holes so you can keep the bad guys out.\nDon’t let the title of this chapter fool you — a lot of this information applies\nto all flavors of UNIX.\nUnderstanding Linux Vulnerabilities\nVulnerabilities and attacks against Linux are creating business risks in a\ngrowing number of organizations — especially e-commerce companies, net-\nwork and security product vendors, and ISPs that rely on Linux for many\nof their systems. When Linux systems are hacked, the victim organizations\ncan experience the same side effects as their Windows-using counterparts,\nincluding:\n✓ Leakage of sensitive information\n✓ Cracked passwords\n✓ Corrupted or deleted databases\n✓ Systems taken completely offline\nChoosing Tools\nYou can use many UNIX-based security tools to test your Linux systems.\nSome are much better than others. I often find that my Windows-based com-\nmercial tools do as good a job as any. My favorites are as follows:\n✓ BackTrack Linux (www.backtrack-linux.org) toolset on a bootable\nCD or .iso image file\n✓ LanGuard (www.gfi.com/network-security-vulnerability-\nscanner) for port scanning, OS enumeration, and vulnerability testing\n✓ NetScanTools Pro (www.netscantools.com) for port scanning, OS\nenumeration, and much more\n✓ Nmap (http://nmap.org) for OS fingerprinting and detailed port\nscanning\n✓ QualysGuard (www.qualys.com) for OS fingerprinting, port scanning,\nand very detailed and accurate vulnerability testing\n229\nChapter 12: Linux\nA tool such as QualysGuard can perform the majority of the security\ntesting needed to find flaws in Linux. Another popular commercial alter-\nnative is Rapid7’s Nexpose (www.rapid7.com/vulnerability-\nscanner.jsp).\n✓ Nessus (www.nessus.org) for OS fingerprinting, port scanning, and vul-\nnerability testing\n✓ THC-Amap (www.thc.org/thc-amap) for application version mapping\nHundreds if not thousands of other Linux hacking and testing tools are avail-\nable on such sites as SourceForge.net (http://sourceforge.net) and\nfreecode.com (http://freecode.com). The key is to find a set of tools —\npreferably as few as possible — that can do the job that you need to do and\nthat you feel comfortable working with.\nGathering Information about\nYour Linux Vulnerabilities\nYou can scan your Linux-based systems and gather information from both\noutside (if the system is a publicly-accessible host) and inside your network.\nThat way, you can see what the bad guys see from both directions.\nSystem scanning\nLinux services — called daemons — are the programs that run on a system\nand serve up various services and applications for users.\n✓ Internet services, such as the Apache web server (httpd), telnet (telnetd),\nand FTP (ftpd), often give away too much information about the system,\nincluding software versions, internal IP addresses, and usernames.\nThis information can allow hackers to exploit a known weakness in the\nsystem.\n✓ TCP and UDP small services, such as echo, daytime, and chargen, are\noften enabled by default and don’t need to be.\nThe vulnerabilities inherent in your Linux systems depend on what services\nare running. You can perform basic port scans to glean information about\nwhat’s running.\nThe NetScanTools Pro results in Figure 12-1 show many potentially vulnerable\nservices on this Linux system, including the confirmed services of SSH, HTTP,\nand HTTPS.\n230\nPart IV: Hacking Operating Systems\nFigure 12-1:\nPort scan-\nning a Linux\nhost with\nNetScan\nTools Pro.\nIn addition to NetScanTools Pro, you can run another scanner, such as\nLanGuard, against the system to try to gather more information, including the\nfollowing:\n✓ A vulnerable version of OpenSSH (the open source version of SSH)\nreturned by Nessus, as shown in Figure 12-2\n✓ The finger service information returned by LanGuard Network Security\nScanner, as shown in Figure 12-3\nFigure 12-2:\nUsing\nNessus to\ndiscover\na vulner-\nability with\nOpenSSH.\n231\nChapter 12: Linux\nFigure 12-3:\nLanGuard\nrevealing\nuser infor-\nmation via\nthe finger\nservice.\nLanGuard also determined that the server is running rlogin and rexec, the\nBerkeley Software Distribution (BSD) r-services. Figure 12-3 also shows that\nLanGuard confirmed the remote operating system is Red Hat Linux. This\ninformation can be handy when you come across unfamiliar open ports.\nFigure 12-4 shows various r-services and other daemons that network admin-\nistrators are notorious for leaving running unnecessarily on UNIX-based\noperating systems. Notice that LanGuard points out specific vulnerabilities\nassociated with some of these services, along with a recommendation to use\nSSH as an alternative.\n232\nPart IV: Hacking Operating Systems\nFigure 12-4:\nPotentially\nvulnerable\nr-services\nfound by\nLanGuard.\nYou can go a step further and find out the exact distribution and kernel version\nby running an OS fingerprint scan with the Nmap command nmap –sV –O, as\nshown in Figure 12-5.\nFigure 12-5:\nUsing Nmap\nto determine\nthe OS ker-\nnel version\nof a Linux\nserver.\nThe Windows-based NetScanTools Pro also has the capability to determine\nthe version of Linux that’s running, as shown in Figure 12-6.\n233\nChapter 12: Linux\nFigure 12-6:\nUsing\nNetScan\nTools Pro to\ndetermine\nthat\nSlackware\nLinux is\nrunning.\nCountermeasures against system scanning\nAlthough you can’t completely prevent system scanning, you can still imple-\nment the following countermeasures to keep the bad guys from gleaning too\nmuch information about your systems:\n✓ Protect the systems with either\n• A firewall, such as iptables that’s built into the OS\n• A host-based intrusion-prevention application, such as PortSentry\n(http://sourceforge.net/projects/sentrytools) and\nSNARE (www.intersectalliance.com/projects/Snare)\n✓ Disable the services you don’t need, including RPC, HTTP, FTP, telnet,\nand the small UDP and TCP services — anything for which you don’t\nhave a true business need. This keeps the services from showing up in\na port scan, which gives an attacker less information — and presumably\nless incentive — to break in to your system.\n✓ Make sure the latest software and patches are loaded to reduce the\nchance of exploitation if an attacker determines what services you’re\nrunning.\n234\nPart IV: Hacking Operating Systems\nFinding Unneeded and\nUnsecured Services\nWhen you know which daemons and applications are running — such as FTP,\ntelnet, and a web server — it’s nice to know exactly which versions are run-\nning so you can look up their associated vulnerabilities and decide whether\nto turn them off. The National Vulnerability Database site (http://nvd.\nnist.gov) is a good resource for determining vulnerabilities.\nSearches\nSeveral security tools can help determine vulnerabilities. These types of utili-\nties might not identify all applications down to the exact version number, but\nthey’re a very powerful way of collecting system information.\nVulnerabilities\nBe especially mindful of these known security weaknesses in a system:\n✓ Anonymous FTP — especially if it isn’t properly configured — can pro-\nvide a way for an attacker to download and access files on your system.\n✓ Telnet and FTP are vulnerable to network analyzer captures of the\ncleartext user ID and password the applications use. Their logins can\nalso be brute-force attacked.\n✓ Old versions of sendmail have many security issues.\n✓ R-services, such as rlogin, rdist, rexecd, rsh, and rcp, are especially vul-\nnerable to attacks.\nMany web servers run on Linux, so you can’t overlook the importance of\nchecking for weaknesses in Apache, Tomcat, and your specific applications.\nFor example, a common Linux vulnerability is that usernames can be deter-\nmined via Apache when it doesn’t have the UserDir directive disabled in\nits httpd.conf file. You can exploit this weakness manually by browsing\nto well-known user folders, such as http://www.your~site.com/user_\nname or, better yet, by using a vulnerability scanner, such as WebInspect or\nQualysGuard, to automatically enumerate the system. Either way, you may\nbe able to find out which Linux users exist and then launch a web password-\ncracking attack. There are also numerous ways to access system files (includ-\ning /etc/passwd) via vulnerable CGI code. I cover hacking web applications\nin Chapter 14.\nLikewise, FTP is often running unsecured on Linux systems. I’ve found Linux\nsystems with anonymous FTP enabled that were sharing sensitive healthcare\nand financial information to everyone on the local network. Talk about a lack\n235\nChapter 12: Linux\nof accountability! So, don’t forget to look for the simple stuff. When hacking\nLinux, you can dig down deep into the kernel and do this and that to exploit\nthe system, but it’s usually the little things that get you.\nAnonymous FTP is one of the most common vulnerabilities I find in Linux. If you\nmust run an anonymous FTP server, make sure it’s not sharing out sensitive\ninformation to all of your internal network users, or worse, the entire world.\nTools\nThe following tools can perform more in-depth information gathering beyond\nport scanning to enumerate your Linux systems and see what hackers see:\n✓ Nmap can check for specific versions of the services loaded, as shown in\nFigure 12-7. Simply run Nmap with the -sV command-line switch.\n✓ Amap is similar to Nmap, but it has a couple of advantages:\n• Amap is much faster for these types of scans.\n• Amap can detect applications that are configured to run on non-\nstandard ports, such as Apache running on port 6789 instead of its\ndefault 80.\nThe output of an Amap scan of the local host (hence, the 127.0.0.1\naddress) is shown in Figure 12-8. Amap was run with the following\noptions to enumerate some commonly hacked ports:\n• -1 makes the scan run faster.\n• -b prints the responses in ASCII characters.\n• -q skips reporting of closed ports.\n• 21 probes the FTP control port.\n• 22 probes the SSH port.\n• 23 probes the telnet port.\n• 80 probes the HTTP port.\nFigure 12-7:\nUsing Nmap\nto check\napplication\nversions.\n236\nPart IV: Hacking Operating Systems\nFigure 12-8:\nUsing Amap\nto check\napplication\nversions.\n✓ netstat shows the services running on a local machine. Enter this\ncommand while logged in:\nnetstat –anp\n✓ List Open Files (lsof) displays processes that are listening and files\nthat are open on the system.\nTo run lsof, log in and enter this command at a Linux command\nprompt: lsof –i +M. The lsof command can come in handy when\nyou suspect that malware has found its way onto the system.\nCountermeasures against attacks\non unneeded services\nYou can and should disable the unneeded services on your Linux systems.\nThis is one of the best ways to keep your Linux system secure. Like reducing\nthe number of entry points (such as open doors and windows) in your house,\nthe more entry points you eliminate, the fewer places an intruder can break in.\nDisabling unneeded services\nThe best method of disabling unneeded services depends on how the\ndaemon is loaded in the first place. You have several places to disable ser-\nvices, depending on the version of Linux you’re running.\nIf you don’t need to run a particular service, take the safe route: Turn it off!\nJust give people on the network ample warning that it’s going to happen in the\nevent someone needs the service for their work.\ninetd.conf (or xinetd.conf)\nIf it makes good business sense — that is, if you don’t need them — disable\nunneeded services by commenting out the loading of daemons you don’t use.\nFollow these steps:\n237\nChapter 12: Linux\n1. Enter the following command at the Linux prompt:\nps -aux\nThe process ID (PID) for each daemon, including inetd, is listed on the\nscreen. In Figure 12-9, the PID for the sshd (Secure Shell daemon) is 646.\n2. Make note of the PID for inetd.\n3. Open /etc/inetd.conf in the Linux text editor vi by entering the\nfollowing command:\nvi /etc/inetd.conf\nOr\n/etc/xinetd.conf\n4. When you have the file loaded in vi, enable the insert (edit) mode by\npressing I.\n5. Move the cursor to the beginning of the line of the daemon that you\nwant to disable, such as httpd (web server daemon), and type # at the\nbeginning of the line.\nThis step comments out the line and prevents it from loading when you\nreboot the server or restart inetd. It’s also good for record keeping and\nchange management.\n6. To exit vi and save your changes, press Esc to exit the insert mode,\ntype :wq, and then press Enter.\nThis tells vi that you want to write your changes and quit.\n7. Restart inetd by entering this command with the inetd PID:\nkill –HUP PID\nFigure 12-9:\nViewing the\nprocess IDs\nfor running\ndaemons\nby using\nps -aux.\n238\nPart IV: Hacking Operating Systems\nchkconfig\nIf you don’t have an inetd.conf file (or it’s empty), your version of Linux is\nprobably running the xinetd program (www.xinetd.org) — a more secure\nreplacement for inetd — to listen for incoming network application requests.\nYou can edit the /etc/xinetd.conf file if this is the case. For more infor-\nmation on the usage of xinetd and xinetd.conf, enter man xinetd or man\nxinetd.conf at a Linux command prompt. If you’re running Red Hat 7.0 or\nlater, you can run the /sbin/chkconfig program to turn off the daemons\nyou don’t want to load.\nYou can also enter chkconfig --list at a command prompt to see what ser-\nvices are enabled in the xinetd.conf file.\nIf you want to disable a specific service, say snmp, enter the following:\nchkconfig --del snmpd\nYou can use the chkconfig program to disable other services, such as FTP,\ntelnet, and web server.\nAccess control\nTCP Wrappers can control access to critical services that you run, such as\nFTP or HTTP. This program controls access for TCP services and logs their\nusage, helping you control access via hostname or IP address and track mali-\ncious activities.\nYou can find more information about TCP Wrappers from http://protect.\niu.edu/cybersecurity/tcp-wrappers.\nAlways make sure that your operating system and the applications running\non it are not open to the world (or your internal network) by ensuring that\nreasonable password requirements are in place. Don’t forget to disable anony-\nmous FTP unless you absolutely need it. Even if you do, limit system access to\nonly those with a business need to access sensitive information.\nSecuring the .rhosts and hosts.equiv Files\nLinux — and all the flavors of UNIX — are file-based operating systems.\nPractically everything that’s done on the system involves the manipulation of\nfiles. This is why so many attacks against Linux are at the file level.\n239\nChapter 12: Linux\nHacks using the .rhosts and hosts.equiv files\nIf hackers can capture a user ID and password by using a network analyzer or\ncan crash an application and gain root access via a buffer overflow, one thing\nthey look for is what users are trusted by the local system. That’s why it’s\ncritical to assess these files yourself. The /etc/hosts.equiv and .rhosts\nfiles list this information.\n.rhosts\nThe $home/.rhosts files in Linux specify which remote users can access\nthe Berkeley Software Distribution (BSD) r-commands (such as rsh, rcp, and\nrlogin) on the local system without a password. This file is in a specific user’s\n(including root) home directory, such as /home/jsmith. An .rhosts file\nmay look like this:\ntribe scott\ntribe eddie\nThis file allows users Scott and Eddie on the remote-system tribe to log in\nto the local host with the same privileges as the local user. If a plus sign (+)\nis entered in the remote-host and user fields, any user from any host could\nlog in to the local system. The hacker can add entries into this file by using\neither of these tricks:\n✓ Manually manipulating the file\n✓ Running a script that exploits an unsecured Common Gateway Interface\n(CGI) script on a web-server application that’s running on the system\nThis configuration file is a prime target for a malicious attack. On most Linux\nsystems I’ve tested, these files aren’t enabled by default. However, a user\ncan create one in his or her home directory on the system — intentionally or\naccidentally — which can create a major security hole on the system.\nhosts.equiv\nThe /etc/hosts.equiv file won’t give away root access information, but it\ndoes specify which accounts on the system can access services on the local\nhost. For example, if tribe were listed in this file, all users on the tribe system\nwould be allowed access. As with the .rhosts file, external hackers can read\nthis file and then spoof their IP address and hostname to gain unauthorized\naccess to the local system. Hackers can also use the names located in the\n.rhosts and hosts.equiv files to look for names of other computers to\nattack.\n240\nPart IV: Hacking Operating Systems\nCountermeasures against .rhosts\nand hosts.equiv file attacks\nUse both of the following countermeasures to prevent hacker attacks against\nthe .rhosts and hosts.equiv files in your Linux system.\nDisabling commands\nA good way to prevent abuse of these files is to disable the BSD r-commands.\nThis can be done in two ways:\n✓ Comment out the lines starting with shell, login, and exec in inetd.\nconf.\n✓ Edit the rexec, rlogin, and rsh files located in the /etc/xinetd.d\ndirectory. Open each file in a text editor and change disable=no to\ndisable=yes, as shown in Figure 12-10.\nFigure 12-10:\nThe rexec\nfile showing\nthe disable\noption.\nIn Red Hat Enterprise Linux, you can disable the BSD r-commands with the\nsetup program:\n1. Enter setup at a command prompt.\n2. Choose System Services from the menu.\n3. Remove the asterisks next to each of the r-services.\nBlocking access\nA couple of countermeasures can block rogue access of the .rhosts and\nhosts.equiv files:\n241\nChapter 12: Linux\n✓ Block spoofed addresses at the firewall, as I outline in Chapter 8.\n✓ Set the read permissions for each file’s owner only.\n• .rhosts: Enter this command in each user’s home directory:\nchmod 600 .rhosts\n• hosts.equiv: Enter this command in the /etc directory:\nchmod 600 hosts.equiv\nYou can also use Tripwire (http://sourceforge.net/projects/\ntripwire) to monitor these files and alert you when access is obtained or\nchanges are made.\nAssessing the Security of NFS\nThe Network File System (NFS) is used to mount remote file systems (simi-\nlar to shares in Windows) from the local machine. Given the remote access\nnature of NFS, it certainly has its fair share of hacks. I cover additional stor-\nage vulnerabilities and hacks in Chapter 15.\nNFS hacks\nIf NFS was set up improperly or its configuration has been tampered with —\nnamely, the /etc/exports file containing a setting that allows the world\nto read the entire file system — remote hackers can easily obtain remote\naccess and do anything they want on the system. Assuming no access control\nlist (ACL) is in place, all it takes is a line, such as the following, in the /etc/\nexports file:\n/ rw\nThis line says that anyone can remotely mount the root partition in a read-\nwrite fashion. Of course, the following conditions must also be true:\n✓ The NFS daemon (nfsd) must be loaded, along with the portmap daemon\nthat would map NFS to RPC.\n✓ The firewall must allow the NFS traffic through.\n✓ The remote systems that are allowed into the server running the NFS\ndaemon must be placed into the /etc/hosts.allow file.\nThis remote-mounting capability is easy to misconfigure. It’s often related to\na Linux administrator’s misunderstanding of what it takes to share out the\nNFS mounts and resorting to the easiest way possible to get it working. After\nhackers gain remote access, the system is theirs.\n242\nPart IV: Hacking Operating Systems\nCountermeasures against NFS attacks\nThe best defense against NFS hacking depends on whether you actually need\nthe service running.\n✓ If you don’t need NFS, disable it.\n✓ If you need NFS, implement the following countermeasures:\n• Filter NFS traffic at the firewall — typically, TCP port 111 (the port-\nmapper port) if you want to filter all RPC traffic.\n• Add network ACLs to limit access to specific hosts.\n• Make sure that your /etc/exports and /etc/hosts.allow files\nare configured properly to keep the world outside your network.\nChecking File Permissions\nIn Linux, special file types allow programs to run with the file owner’s rights:\n✓ SetUID (for user IDs)\n✓ SetGID (for group IDs)\nSetUID and SetGID are required when a user runs a program that needs full\naccess to the system to perform its tasks. For example, when a user invokes\nthe passwd program to change his or her password, the program is actually\nloaded and run without root or any other user’s privileges. This is done so\nthat the user can run the program and the program can update the password\ndatabase without the root account being involved in the process.\nFile permission hacks\nBy default, rogue programs that run with root privileges can be easily hidden.\nAn external attacker or malicious insider might do this to hide hacking files,\nsuch as rootkits, on the system. This can be done with SetUID and SetGID\ncoding in their hacking programs.\nCountermeasures against\nfile permission attacks\nYou can test for rogue programs by using both manual and automated testing\nmethods.\n243\nChapter 12: Linux\nManual testing\nThe following commands can identify and print to the screen SetUID and\nSetGID programs:\n✓ Programs that are configured for SetUID:\nfind / -perm -4000 –print\n✓ Programs that are configured for SetGID:\nfind / -perm -2000 –print\n✓ Files that are readable by anyone in the world:\nfind / -perm -2 -type f –print\n✓ Hidden files:\nfind / -name “.*”\nYou probably have hundreds of files in each of these categories, so don’t be\nalarmed. When you discover files with these attributes set, you need to make\nsure that they are actually supposed to have those attributes by researching\nin your documentation or on the Internet, or by comparing them to a known\nsecure system or data backup.\nKeep an eye on your systems to detect any new SetUID or SetGID files that\nsuddenly appear.\nAutomatic testing\nYou can use an automated file-modification auditing program to alert you\nwhen these types of changes are made. This is what I recommend — it’s a lot\neasier on an ongoing basis:\n✓ A change-detection application, such as Tripwire, can help you keep\ntrack of what changed and when.\n✓ A file-monitoring program, such as COPS (point your web browser to\nftp://ftp.cerias.purdue.edu/pub/tools/unix/scanners/\ncops), finds files that have changed in status (such as a new SetUID or\nremoved SetGID).\nFinding Buffer Overflow Vulnerabilities\nRPC and other vulnerable daemons are common targets for buffer-overflow\nattacks. Buffer-overflow attacks are often how the hacker can get in to modify\nsystem files, read database files, and more.\n244\nPart IV: Hacking Operating Systems\nAttacks\nIn a buffer-overflow attack, the attacker either manually sends strings of\ninformation to the victim Linux machine or writes a script to do so. These\nstrings contain the following:\n✓ Instructions to the processor to basically do nothing.\n✓ Malicious code to replace the attacked process. For example, exec\n(“/bin/sh”) creates a shell command prompt.\n✓ A pointer to the start of the malicious code in the memory buffer.\nIf an attacked application (such as FTP or RPC) is running as root (certain pro-\ngrams do), this situation can give attackers root permissions in their remote\nshells. Specific examples of vulnerable software running on Linux are Samba,\nMySQL, and Firefox. Depending on the version, this software can be exploited\nusing commercial or free tools such as Metasploit (www.metasploit.com) to\nobtain remote command prompts, add backdoor user accounts, change owner-\nship of files, and more. I cover Metasploit in Chapter 10.\nCountermeasures against\nbuffer-overflow attacks\nThree main countermeasures can help prevent buffer-overflow attacks:\n✓ Disable unneeded services.\n✓ Protect your Linux systems with either a firewall or a host-based intru-\nsion prevention system (IPS).\n✓ Enable another access control mechanism, such as TCP Wrappers, that\nauthenticates users with a password.\nDon’t just enable access controls via an IP address or hostname. That\ncan easily be spoofed.\nAs always, make sure that your systems have been updated with the latest\nkernel and security patches.\nChecking Physical Security\nSome Linux vulnerabilities involve the bad guy actually being at the system\nconsole — something that’s entirely possible given the insider threats that\nevery organization faces.\n245\nChapter 12: Linux\nPhysical security hacks\nWhen a hacker is at the system console, anything goes, including rebooting\nthe system (even if no one is logged in) by pressing Ctrl+Alt+Delete. After the\nsystem is rebooted, the hacker can start it in single-user mode, which allows\nthe hacker to zero out the root password or possibly even read the entire\nshadow password file. I cover password cracking in Chapter 7.\nCountermeasures against\nphysical security attacks\nEdit your /etc/inittab file and comment out (place a # sign in front of) the\nline that reads ca::ctrlaltdel:/sbin/shutdown -t3 -r now, shown\nin the last line of Figure 12-11. These changes will prevent someone from\nrebooting the system by pressing Ctrl+Alt+Delete. Be forewarned that this\nwill also prevent you from legitimately using Ctrl+Alt+Delete.\nFor Linux-based laptops, use disk encryption software, such as TrueCrypt\n(www.truecrypt.org), or the commercial offerings from WinMagic (www.\nwinmagic.com) and Symantec (www.symantec.com). If you don’t, when\na laptop is lost or stolen, you could very well have a data breach on your\nhands and all the state, federal, compliance, and disclosure law requirements\nthat go along with it. Not good!\nFigure 12-11:\n/etc/inittab\nshowing\nthe line that\nallows a\nCtrl+Alt+\nDelete\nshutdown.\n246\nPart IV: Hacking Operating Systems\nIf you believe that someone has recently gained access to your system, either\nphysically or by exploiting a vulnerability, such as a weak password or buffer\noverflow, you can use last, the program, to view the last few logins into the\nsystem to check for strange login IDs or login times. This program peruses the\n/var/log/wtmp file and displays the users who logged in last. You can enter\nlast | head to view the first part of the file (the first ten lines) if you want to\nsee the most recent logins.\nPerforming General Security Tests\nYou can assess critical, and often overlooked, security issues on your Linux\nsystems, such as the following:\n✓ Misconfigurations or unauthorized entries in the shadow password files,\nwhich could provide covert system access\n✓ Password complexity requirements\n✓ Users equivalent to root\n✓ Suspicious automated tasks configured in cron, the script scheduler\nprogram\n✓ Signature checks on system binary files\n✓ Checks for rootkits\n✓ Network configuration, including measures to prevent packet spoofing\nand other denial of service (DoS) attacks\n✓ Permissions on system log files\nYou can do all these assessments manually — or better yet, use an automated\ntool to do it for you! Figure 12-12 shows the initiation of the Tiger security-\nauditing tool (www.nongnu.org/tiger), and Figure 12-13 shows a portion of\nthe audit results. Talk about some great bang for no buck with this tool!\nFigure 12-12:\nRunning the\nTiger secu-\nrity-auditing\ntool.\n247\nChapter 12: Linux\nFigure 12-13:\nPartial out-\nput of the\nTiger tool.\nAlternatives to Tiger include Linux Security Auditing Tool (LSAT; http://\nusat.sourceforge.net) as well as Bastille UNIX (http://bastille-\nlinux.sourceforge.net).\nPatching Linux\nOngoing patching is perhaps the best thing you can do to enhance the secu-\nrity of your Linux systems. Regardless of the Linux distribution you use,\nusing a tool to assist in your patching efforts makes your job a lot easier.\nI often find Linux is completely out of the patch management loop. With the\nfocus on patching Windows, many network administrators forget about the\nLinux systems they have on their network. Don’t fall into this trap.\nDistribution updates\nThe distribution process is different on every distribution of Linux. You can\nuse the following tools, based on your specific distribution:\n✓ Red Hat: The following tools update Red Hat/Fedora Linux systems:\n• Red Hat Package Manager (RPM), which is the GUI-based applica-\ntion that runs in the Red Hat GUI desktop. It manages files with an\n.rpm extension that Red Hat and other freeware and open source\ndevelopers use to package their programs.\n• up2date, a command-line, text-based tool that’s included in Red\nHat/Fedora.\n✓ Debian: You can use the Debian Package System (dpkg) included with\nthe operating system to update Debian Linux systems.\n✓ Slackware: You can use the Slackware Package Tool (pkgtool) included\nwith the operating system to update Slackware Linux systems.\n✓ SUSE: SUSE Linux includes YaST2 Software Management.\n248\nPart IV: Hacking Operating Systems\nIn addition to Linux kernel and general operating system updates, make sure\nyou pay attention to Apache, OpenSSL, OpenSSH, MySQL, and other software\non your systems. They have weaknesses that you probably don’t want to\noverlook.\nMulti-platform update managers\nThe open source option for multiple Linux platforms called RPM Package\nManager (www.rpm.org) is worth checking out. Commercial tools have\nadditional features, such as correlating patches with vulnerabilities and\nautomatically deploying appropriate patches. Commercial tools that can\nhelp with Linux patch management include Kaseya Patch Management (www.\nkaseya.com/features/patch-management.aspx) and Lumension Patch\nand Remediation (www.lumension.com/vulnerability-management/\npatch-management-software.aspx).\nPart V\nHacking\nApplications\nIn this part . . .\nW\nell, this book has covered everything from\nnontechnical hacks to network and mobile hacks\nto operating system hacks. What I haven’t yet covered\nare the applications that run on top of all this, database\nservers, and the storage systems that ensure the data is\navailable when we need it.\nThe first chapter in this part covers various messaging\nhacks and countermeasures affecting e-mail and Voice\nover IP (VoIP) systems. Next, this part looks at web\nexploits, along with some countermeasures to secure\nwebsites and applications from the elements. Finally, this\npart covers attacks against database servers and storage\nsystems. It covers both structured data found in various\ndatabase systems and unstructured data, otherwise\nknown as network files."
  },
  {
    "input": "What are the common vulnerabilities in communication and messaging systems like e-mail and Voice over IP (VoIP) and what are the key countermeasures to prevent these attacks?",
    "summary": "Communication systems like email and VoIP are vulnerable due to outdated protocols and lack of security focus. These systems can be attacked in various ways, including e-mail bombs, attachment-overload, and SMTP relay attacks, which can lead to serious harm. To counter these threats, it's important to implement security measures such as limiting attachment sizes, disabling unnecessary services, and using email firewalls and antivirus software. Additionally, VoIP systems are also prone to vulnerabilities, especially in their communication protocols, and should be tested and secured using tools like SiVuS and Cain & Abel.",
    "output": "Chapter 13\nCommunication and\nMessaging Systems\nIn This Chapter\n▶ Attacking e-mail systems\n▶ Assailing instant messaging\n▶ Assaulting Voice over IP applications\nC\nommunication systems such as e-mail and Voice over IP (VoIP) often\ncreate vulnerabilities that people overlook. Why? Well, from my experi-\nence, messaging software — both at the server and client level — is vulnera-\nble because network administrators often believe that firewalls and antivirus\nsoftware are all that’s needed to keep trouble away, or they simply forget\nabout securing these systems altogether.\nIn this chapter, I show you how to test for common e-mail and VoIP issues. I\nalso outline key countermeasures to help prevent these hacks against your\nsystems.\nIntroducing Messaging System\nVulnerabilities\nPractically all messaging applications are hacking targets on your network.\nGiven the proliferation and business dependence on e-mail, just about any-\nthing is fair game. Ditto with VoIP. It’s downright scary what people with ill\nintent can do with it.\nWith messaging systems, one underlying weaknesses is that many of the sup-\nporting protocols weren’t designed with security in mind — especially those\ndeveloped several decades ago when security wasn’t nearly the issue it is\ntoday. The funny thing is that even modern-day messaging protocols — or at\n252\nPart V: Hacking Applications\nleast the implementation of the protocols — are still susceptible to serious\nsecurity problems. Furthermore, convenience and usability often outweigh\nthe need for security.\nMany attacks against messaging systems are just minor nuisances; others can\ninflict serious harm on your information and your organization’s reputation.\nMalicious attacks against messaging systems include the following:\n✓ Transmitting malware\n✓ Crashing servers\n✓ Obtaining remote control of workstations\n✓ Capturing information while it travels across the network\n✓ Perusing e-mails stored on servers and workstations\n✓ Gathering messaging-trend information via log files or a network analyzer\nthat can tip off the attacker about conversations between people and\norganizations (often called traffic analysis or social network analysis)\n✓ Capturing and replaying phone conversations\n✓ Gathering internal network configuration information, such as hostnames\nand IP addresses\nThese attacks can lead to such problems as unauthorized — and potentially\nillegal — disclosure of sensitive information, as well as loss of information\naltogether.\nRecognizing and Countering\nE-Mail Attacks\nThe following attacks exploit the most common e-mail security vulnerabilities\nI’ve seen. The good news is that you can eliminate or minimize most of them\nto the point where your information is not at risk. You’ll want to be careful\nrunning these attacks against your e-mail system — especially during peak\ntraffic times — so proceed with caution!\nSome of these attacks require the basic hacking methodologies: gathering\npublic information, scanning and enumerating your systems, and finding and\nexploiting the vulnerabilities. Others can be carried out by sending e-mails or\ncapturing network traffic.\n253\nChapter 13: Communication and Messaging Systems\nE-mail bombs\nE-mail bombs attack by creating denial of service (DoS) conditions against\nyour e-mail software and even your network and Internet connection by\ntaking up a large amount of bandwidth and, sometimes, requiring large\namounts of storage space. E-mail bombs can crash a server and provide\nunauthorized administrator access.\nAttachments\nAn attacker can create an attachment-overload attack by sending hundreds\nor thousands of e-mails with very large attachments to one or more recipi-\nents on your network.\nAttacks using e-mail attachments\nAttachment attacks have a couple of goals:\n✓ The whole e-mail server might be targeted for a complete interruption\nof service with these failures:\n• Storage overload: Multiple large messages can quickly fill the total\nstorage capacity of an e-mail server. If the messages aren’t auto-\nmatically deleted by the server or manually deleted by individual\nuser accounts, the server will be unable to receive new messages.\nThis can create a serious DoS problem for your e-mail system,\neither crashing it or requiring you to take your system offline to\nclean up the junk that has accumulated. A 100MB file attachment\nsent ten times to 100 users can take 100GB of storage space. Yikes!\n• Bandwidth blocking: An attacker can crash your e-mail service or\nbring it to a crawl by filling the incoming Internet connection with\njunk. Even if your system automatically identifies and discards\nobvious attachment attacks, the bogus messages eat resources\nand delay processing of valid messages.\n✓ An attack on a single e-mail address can have serious consequences if\nthe address is for an important user or group.\nCountermeasures against e-mail attachment attacks\nThese countermeasures can help prevent attachment-overload attacks:\n✓ Limit the size of either e-mails or e-mail attachments. Check for this\noption in your e-mail server’s configuration settings (such as those pro-\nvided in Novell GroupWise and Microsoft Exchange), your e-mail content\nfiltering system, and even at the e-mail client level.\n254\nPart V: Hacking Applications\n✓ Limit each user’s space on the server. This denies large attachments\nfrom being written to disk. Limit message sizes for inbound and even\noutbound messages should you want to prevent a user from launching\nthis attack from inside your network. I find a few gigabytes is a good\nlimit, but it all depends on your network size, storage availability, busi-\nness culture, and so on, so think through this one carefully before put-\nting anything in place.\nConsider using SFTP or HTTP instead of e-mail for large file transfers.\nThere are numerous cloud-based file transfer services available. You can\nalso encourage your users to use departmental shares or public folders.\nBy doing so, you can store one copy of the file on a server and have the\nrecipient download the file on his or her own workstation.\nContrary to popular belief and use, the e-mail system should not be an informa-\ntion repository, but that’s exactly what e-mail has evolved into. An e-mail server\nused for this purpose can create unnecessary legal and regulatory risks and can\nturn into an absolute nightmare if your business receives an e-discovery request\nrelated to a lawsuit. An important part of your information security program\nis to develop an information classification and retention program to help with\nrecords management. But don’t go it alone. Get others such as your lawyer, HR\nmanager, and CIO involved. This helps spread the accountability around and\nensures your business doesn’t get into trouble for holding too many — or too\nfew — electronic records in the event of a lawsuit or investigation.\nConnections\nA hacker can send a huge number of e-mails simultaneously to addresses on\nyour network. These connection attacks can cause the server to give up on\nservicing any inbound or outbound TCP requests. This situation can lead to a\ncomplete server lockup or a crash, often resulting in a condition in which the\nattacker is allowed administrator or root access to the system.\nAttacks using floods of e-mails\nAn attack using a flood of e-mails is often carried out in spam attacks and\nother denial of service attempts.\nCountermeasures against connection attacks\nPrevent e-mail attacks as far out on your network perimeter as you can. The\nmore traffic or malicious behavior you keep off your e-mail servers and cli-\nents, the better.\nMany e-mail servers allow you to limit the number of resources used for\ninbound connections, as shown in the Number of SMTP Receive Threads option\nfor Novell GroupWise in Figure 13-1. This setting is called different things for\ndifferent e-mail servers and e-mail firewalls, so check your documentation.\nCompletely stopping an unlimited number of inbound requests is impossible.\nHowever, you can minimize the impact of the attack. This setting limits the\namount of server processor time, which can help during a DoS attack.\n255\nChapter 13: Communication and Messaging Systems\nFigure 13-1:\nLimiting the\nnumber of\nresources\nthat handle\ninbound\nmessages.\nEven in large companies, there’s no reason that thousands of inbound e-mail\ndeliveries should be necessary within a short time period.\nSome e-mail servers, especially UNIX-based servers, can be programmed to\ndeliver e-mails to a daemon or service for automated functions, such as create\nthis order on the fly when a message from this person is received. If DoS protec-\ntion isn’t built in to the system, a hacker can crash both the server and the\napplication that receives these messages and potentially create e-commerce\nliabilities and losses. This can happen more easily on e-commerce websites\nwhen CAPTCHA (short for Completely Automated Public Turing test to tell\nComputers and Humans Apart) is not used on forms. I cover web application\nsecurity in Chapter 14.\nAutomated e-mail security controls\nYou can implement the following countermeasures as an additional layer of\nsecurity for your e-mail systems:\n✓ Tarpitting: Tarpitting detects inbound messages destined for unknown\nusers. If your e-mail server supports tarpitting, it can help prevent spam or\nDoS attacks against your server. If a predefined threshold is exceeded —\nsay, more than ten messages — the tarpitting function effectively shuns\ntraffic from the sending IP address for a period of time.\n✓ E-mail firewalls: E-mail firewalls and content-filtering applications from\nvendors such as Symantec and Barracuda Networks can go a long way\ntowards preventing various e-mail attacks. These tools protect practically\nevery aspect of an e-mail system.\n✓ Perimeter protection: Although not e-mail-specific, many firewall and IPS\nsystems can detect various e-mail attacks and shut off the attacker in\nreal time. This can come in handy during an attack.\n256\nPart V: Hacking Applications\n✓ CAPTCHA: Using CAPTCHA on web-based e-mail forms can help mini-\nmize the impact of automated attacks and lessen your chances of e-mail\nflooding and denial of service. These benefits come in handy when scan-\nning your websites and applications, as I discuss in Chapter 14.\nBanners\nWhen hacking an e-mail server, a hacker’s first order of business is perform-\ning a basic banner grab to see whether he can discover what e-mail server\nsoftware is running. This is one of the most critical tests to find out what the\nworld knows about your SMTP, POP3, and IMAP servers.\nGathering information\nFigure 13-2 shows the banner displayed on an e-mail server when a basic\ntelnet connection is made on port 25 (SMTP). To do this, at a command\nprompt, simply enter telnet ip or_hostname_of_your_server 25. This opens\na telnet session on TCP port 25.\nFigure 13-2:\nAn SMTP\nbanner\nshowing\nserver-version\ninformation.\nThe e-mail software type and server version are often very obvious and give\nhackers some ideas about possible attacks, especially if they search a vulner-\nability database for known vulnerabilities of that software version. Figure\n13-3 shows the same e-mail server with its SMTP banner changed from the\ndefault (okay, the previous one was, too) to disguise such information as the\ne-mail server’s version number.\nFigure 13-3:\nAn SMTP\nbanner that\ndisguises\nthe version\ninformation.\n257\nChapter 13: Communication and Messaging Systems\nYou can gather information on POP3 and IMAP e-mail services by telnetting to\nport 110 (POP3) or port 143 (IMAP).\nIf you change your default SMTP banner, don’t think that no one can figure out\nthe version. General vulnerability scanners can often detect the version of your\ne-mail server. One Linux-based tool called smtpscan (www.freshports.org/\nsecurity/smtpscan/) determines e-mail server version information based\non how the server responds to malformed SMTP requests. Figure 13-4 shows\nthe results from smtpscan against the same server shown in Figure 13-3. The\nsmtpscan tool detected the product and version number of the e-mail server.\nFigure 13-4:\nsmtpscan\ngathers\nversion info\neven when\nthe SMTP\nbanner is\ndisguised.\nCountermeasures against banner attacks\nThere isn’t a 100 percent secure way of disguising banner information. I sug-\ngest these banner security tips for your SMTP, POP3, and IMAP servers:\n✓ Change your default banners to cover up the information.\n✓ Make sure that you’re always running the latest software patches.\n✓ Harden your server as much as possible by using well-known best\npractices from such resources as the Center for Internet Security (www.\ncisecurity.org), NIST (http://csrc.nist.gov), and Network\nSecurity For Dummies by Chey Cobb.\nSMTP attacks\nSome attacks exploit weaknesses in the Simple Mail Transfer Protocol (SMTP).\nThis e-mail communication protocol — which is over three decades old — was\ndesigned for functionality, not security.\n258\nPart V: Hacking Applications\nAccount enumeration\nA clever way that attackers can verify whether e-mail accounts exist on a\nserver is simply to telnet to the server on port 25 and run the VRFY com-\nmand. The VRFY — short for verify — command makes a server check\nwhether a specific user ID exists. Spammers often automate this method to\nperform a directory harvest attack (DHA), which is a way of gleaning valid\ne-mail addresses from a server or domain so hackers know whom to send\nspam, phishing, or malware-infected messages to.\nAttacks using account enumeration\nFigure 13-5 shows how easy it is to verify an e-mail address on a server with\nthe VRFY command enabled. Scripting this attack can test thousands of\ne-mail address combinations.\nFigure 13-5:\nUsing VRFY\nto verify that\nan e-mail\naddress\nexists.\nThe SMTP command EXPN — short for expand — might allow attackers to\nverify what mailing lists exist on a server. You can simply telnet to your e-mail\nserver on port 25 and try EXPN on your system if you know of any mailing lists\nthat might exist. Figure 13-6 shows how the result might look. Scripting this\nattack and testing thousands of mailing list combinations is simple.\nFigure 13-6:\nUsing EXPN\nto verify that\na mailing list\nexists.\n259\nChapter 13: Communication and Messaging Systems\nYou might get bogus information from your server when performing these two\ntests. Some SMTP servers (such as Microsoft Exchange) don’t support the\nVRFY and EXPN commands, and some e-mail firewalls simply ignore them or\nreturn false information.\nAnother way to somewhat automate the process is to use the EmailVerify\nprogram in TamoSoft’s Essential NetTools (www.tamos.com/htmlhelp/\nnettools/emailverify.htm). As shown in Figure 13-7, you simply enter\nan e-mail address, click Start, and EmailVerify connects to the server and\npretends to send an e-mail.\nFigure 13-7:\nUsing\nEmailVerify\nto verify\nan e-mail\naddress.\nYet another way to capture valid e-mail addresses is to use theHarvester\n(http://code.google.com/p/theharvester/) to glean addresses via\nGoogle and other search engines. As I outline in Chapter 8, you can download\nBackTrack Linux from www.backtrack-linux.org to burn the ISO image to\nCD or boot the image directly through VMWare or VirtualBox. In the BackTrack\nGUI, simply choose Backtrack➪Information Gathering➪SMTP➪Goog Mail\nEnum and enter ./goog-mail.py –d <your_domain_name> -l 500 –b google, as\nshown in Figure 13-8.\n260\nPart V: Hacking Applications\nFigure 13-8:\nUsing Goog\nMail Enum\nfor glean-\ning e-mail\naddresses\nvia Google.\nCountermeasures against account enumeration\nIf you’re running Exchange, account enumeration won’t be an issue. If you’re\nnot running Exchange, the best solution for preventing this type of e-mail\naccount enumeration depends on whether you need to enable the VRFY and\nEXPN commands:\n✓ Disable VRFY and EXPN unless you need your remote systems to gather\nuser and mailing list information from your server.\n✓ If you need VRFY and EXPN functionality, check your e-mail server or\ne-mail firewall documentation for the ability to limit these commands to\nspecific hosts on your network or the Internet.\n261\nChapter 13: Communication and Messaging Systems\nFinally, work with your marketing team and web developers to ensure that\ncompany e-mail addresses are not posted on the web. Also, educate your\nusers about not doing this.\nRelay\nSMTP relay lets users send e-mails through external servers. Open e-mail\nrelays aren’t the problem they used to be, but you still need to check for\nthem. Spammers and hackers can use an e-mail server to send spam or mal-\nware through e-mail under the guise of the unsuspecting open-relay owner.\nBe sure to test for open relay from outside your network. If you test from\ninside, you might get a false positive because outbound e-mail relaying might\nbe configured and necessary for your internal e-mail clients to send mes-\nsages to the outside world. However, if a client system is compromised, that\nissue could be just what the bad guys need to launch a spamming or malware\nattack.\nAutomatic testing\nHere are a couple of easy ways to test your server for SMTP relay:\n✓ Free online tools: One of my favorite online tools is located at www.\nabuse.net/relay.html.\n✓ Windows-based tools: One example is NetScanTools Pro (www.\nnetscantools.com). You can run an SMTP Relay check on your e-mail\nserver with NetScanTools Pro, as shown in Figure 13-9.\nAlthough some SMTP servers accept inbound relay connections and\nmake it look like relaying works, this isn’t always the case because the\ninitial connection might be allowed, but the filtering actually takes place\nbehind the scenes. Check whether the e-mail actually made it through\nby checking the account you sent the test relay message to.\nIn NetScanTools Pro, you simply enter values for the SMTP mail server\nname, Your Sending Domain Name. Inside Test Message Settings, enter the\nRecipient Email Address and Sender’s Email Address.\nWhen the test is complete, simply click View Relay Test Results. Depending\non which option you’ve selected, you’ll see the results of your tests, as\nshown in Figure 13-10.\n262\nPart V: Hacking Applications\nFigure 13-9:\nSMTP relay\ncheck tool\nin NetScan\nTools Pro for\nWindows.\nFigure 13-10:\nSMTP\nrelay check\nresults.\n263\nChapter 13: Communication and Messaging Systems\nManual testing\nYou can manually test your server for SMTP relay by telnetting to the e-mail\nserver on port 25. Follow these steps:\n1. Telnet to your server on port 25.\nYou can do this in two ways:\n• Use your favorite graphical telnet application, such as HyperTerminal\n(which comes with Windows) or SecureCRT (www.vandyke.com/\nproducts/securecrt/index.html).\n• Enter the following command at a Windows or UNIX command\nprompt:\ntelnet mailserver_address 25\nYou should see the SMTP welcome banner when the connection is made.\n2. Enter a command to tell the server, “Hi, I’m connecting from this\ndomain.”\nAfter each command in these steps, you should receive a different-\nnumbered message, such as 999 OK. You can ignore these messages.\n3. Enter a command to tell the server your e-mail address.\nFor example:\nmail from:yourname@yourdomain.com\nYou can use any e-mail address in place of yourname@yourdomain.com.\n4. Enter a command to tell the server who to send the e-mail to.\nFor example:\nrcpt to:yourname@yourdomain.com\nAgain, any e-mail address will suffice.\n5. Enter a command to tell the server that the message body is to follow.\nFor example:\ndata\n6. Enter the following text as the body of the message:\nA relay test!\n7. End the command with a period on a line by itself.\nYou can enter ? or help at the first telnet prompt to see a list of all the\nsupported commands and, depending on the server, get help on the use\nof the commands.\n264\nPart V: Hacking Applications\nThe final period marks the end of the message. After you enter this final\nperiod, your message will be sent if relaying is allowed.\n8. Check for relaying on your server:\n• Look for a message similar to Relay not allowed coming back\nfrom the server.\nIf you get a message similar to this, SMTP relaying is either not\nallowed on your server or is being filtered because many servers\nblock messages that appear to originate from the outside yet come\nfrom the inside.\nYou might get this message after you enter the rcpt to: command.\n• If you don’t receive a message from your server, check your Inbox\nfor the relayed e-mail.\nIf you receive the test e-mail you sent, SMTP relaying is enabled on\nyour server and probably needs to be disabled. The last thing you\nwant is to let spammers or other attackers make it look like you’re\nsending tons of spam, or worse, to be blacklisted by one or more\nof the blacklist providers. Ending up on a blacklist can disrupt\ne-mail sending and receiving — not good for business!\nCountermeasures against SMTP relay attacks\nYou can implement the following countermeasures on your e-mail server to\ndisable or at least control SMTP relaying:\n✓ Disable SMTP relay on your e-mail server. If you don’t know whether\nyou need SMTP relay, you probably don’t. You can enable SMTP relay\nfor specific hosts on the server or within your firewall configuration.\n✓ Enforce authentication if your e-mail server allows it. You might be\nable to require password authentication on an e-mail address that\nmatches the e-mail server’s domain. Check your e-mail server and client\ndocumentation for details on setting up this type of authentication.\nE-mail header disclosures\nIf your e-mail client and server are configured with typical defaults, a mali-\ncious attacker might find critical pieces of information:\n✓ Internal IP address of your e-mail client machine (which can lead to the\nenumeration of your internal network)\n✓ Software versions of your client and e-mail server along with their\nvulnerabilities\n✓ Hostnames that can divulge your network naming conventions\n265\nChapter 13: Communication and Messaging Systems\nTesting\nFigure 13-11 shows the header information revealed in a test e-mail I sent to\nmy free web account. As you can see, it shows off quite a bit of information\nabout my e-mail system:\n✓ The third Received line discloses my system’s hostname, IP address,\nserver name, and e-mail client software version.\n✓ The X-Mailer line displays the Microsoft Outlook version I used to send\nthis message.\nFigure 13-11:\nCritical\ninformation\nrevealed in\ne-mail\nheaders.\nCountermeasures against header disclosures\nThe best countermeasure to prevent information disclosures in e-mail head-\ners is to configure your e-mail server or e-mail firewall to rewrite your head-\ners, by either changing the information shown or removing it. Check your\ne-mail server or firewall documentation to see whether this is an option.\nIf header rewriting is not available (or even allowed by your ISP), you still\nmight prevent the sending of some critical information, such as server soft-\nware version numbers and internal IP addresses.\nCapturing traffic\nE-mail traffic, including usernames and passwords, can be captured with a\nnetwork analyzer or an e-mail packet sniffer and reconstructor.\nMailsnarf is an e-mail packet sniffer and reconstructor that’s part of the dsniff\npackage (www.monkey.org/~dugsong/dsniff/). There’s a great commer-\ncial (yet low-cost) program called NetResident (www.tamos.com/products/\nnetresident/), too. You can also use Cain & Abel (www.oxid.it/cain.\nhtml) to highlight e-mail-in-transit weaknesses. I cover password cracking\nusing this tool and others in Chapter 7.\n266\nPart V: Hacking Applications\nIf traffic is captured, a hacker or malicious insider can compromise one host\nand potentially have full access to another adjacent host, such as your e-mail\nserver.\nMalware\nE-mail systems are regularly attacked by such malware as viruses and worms.\nOne of the most important tests you can run for malware vulnerability is to\nverify that your antivirus software is actually working.\nBefore you begin testing your antivirus software, make sure that you have the\nlatest virus software engine and signatures loaded.\nEICAR offers a safe option for checking the effectiveness of your antivirus\nsoftware. Although EICAR is by no means a comprehensive method of testing\nfor malware vulnerabilities, it serves as a good, safe start.\nEICAR is a European-based malware think tank that has worked in conjunc-\ntion with anti-malware vendors to provide this basic system test. The EICAR\ntest string transmits in the body of an e-mail or as a file attachment so that\nyou can see how your server and workstations respond. You basically access\n(load) this file — which contains the following 68-character string — on your\ncomputer to see whether your antivirus or other malware software detects it:\nX5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR STANDARD-ANTIVIRUS-TEST-FILE!$H+H*\nYou can download a text file with this string from www.eicar.org/anti_\nvirus_test_file.htm. Several versions of the file are available on this site.\nI recommend testing with the Zip file to make sure that your antivirus software\ncan detect malware within compressed files.\nWhen you run this test, you may see results from your antivirus software\nsimilar to Figure 13-12.\nFigure 13-12:\nUsing the\nEICAR test\nstring to test\nantivirus\nsoftware.\n267\nChapter 13: Communication and Messaging Systems\nIn addition to testing your antivirus software, you can attack e-mail systems\nusing other tools I cover in this book. Metasploit (www.metasploit.com)\nenables you to discover missing patches in Exchange and other servers that\nhackers could exploit. Brutus (www.hoobie.net/brutus/) enables you to\ntest the cracking of web and POP3/IMAP passwords.\nGeneral best practices for minimizing\ne-mail security risks\nThe following countermeasures help keep messages as secure as possible.\nSoftware solutions\nThe right software can neutralize many threats:\n✓ Use malware-protection software on the e-mail server — better, the\ne-mail gateway — to prevent malware from reaching e-mail clients. Using\nmalware protection on your clients is a given.\n✓ Apply the latest operating system and e-mail application security\npatches consistently and after any security alerts are released.\n✓ Encrypt (where’s it reasonable). You can use S/MIME or PGP to encrypt\nsensitive messages or use e-mail encryption at the desktop level or\nthe server or e-mail gateway. You can also use SSL/TLS via the POP3S,\nIMAPS, and SMTPS protocols. A better option may be to use an e-mail\nsecurity appliance or cloud service that supports the sending and\nreceiving of encrypted e-mails via a web browser over HTTPS.\nDon’t depend on your users to encrypt messages. Use an enterprise\nsolution to encrypt messages automatically instead.\nMake sure that encrypted files and e-mails can be protected against\nmalware.\n• Encryption doesn’t keep malware out of files or e-mails. You just\nhave encrypted malware within the files or e-mails.\n• Encryption keeps your server or gateway antivirus from detecting\nthe malware until it reaches the desktop.\n✓ Make it policy for users not to open unsolicited e-mails or any attach-\nments, especially those from unknown senders, and create ongoing\nawareness sessions and other reminders.\n✓ Plan for users who ignore or forget about the policy of leaving unso-\nlicited e-mails and attachments unopened. It will happen!\n268\nPart V: Hacking Applications\nOperating guidelines\nSome simple operating rules can keep your walls high and the attackers out\nof your e-mail systems:\n✓ Put your e-mail server behind a firewall on a different network segment\nfrom the Internet and from your internal LAN — ideally in a demilita-\nrized zone (DMZ).\n✓ Harden by disabling unused protocols and services on your e-mail\nserver.\n✓ Run your e-mail server and malware scanning on dedicated servers if\npossible (potentially even separating inbound and outbound messages).\nDoing so can keep malicious attacks out of other servers and informa-\ntion in the event the e-mail server is hacked.\n✓ Log all transactions with the server in case you need to investigate mali-\ncious use. Be sure to monitor these logs as well! If you cannot justify\nmonitoring, consider outsourcing this function to a managed security\nservices provider.\n✓ If your server doesn’t need certain e-mail services running (SMTP, POP3,\nand IMAP), disable them — immediately.\n✓ For web-based e-mail, such as Microsoft’s Outlook Web Access (OWA),\nproperly test and secure your web server application and operating\nsystem by using the testing techniques and hardening resources I men-\ntion throughout this book.\n✓ Require strong passwords. Be it standalone accounts or domain-level\nExchange or similar accounts, any password weaknesses on the net-\nwork will trickle over to e-mail and surely be exploited by someone via\nOutlook Web Access or POP3. I cover password hacking in Chapter 7.\n✓ If you’re running sendmail — especially an older version — consider\nrunning a secure alternative, such as Postfix (www.postfix.org) or\nqmail (www.qmail.org).\nUnderstanding Voice over IP\nOne of the hottest technologies blowing through town these days is undoubt-\nedly Voice over IP (VoIP). Whether it’s in-house VoIP systems or systems\nfor remote users, VoIP servers, soft phones, and other related components\nhave a slew of vulnerabilities. Like most things security-related, many people\n269\nChapter 13: Communication and Messaging Systems\nhaven’t thought about the security issues surrounding voice conversations\ntraversing their networks or the Internet — but it certainly needs to be on\nyour radar. Don’t fret — it’s not too late to make things right, especially since\nVoIP is still relatively young. Just remember, though, that even if protective\nmeasures are in place, VoIP systems need to be included as part of your over-\nall ethical hacking strategy on a continuous basis.\nVoIP vulnerabilities\nAs with any technology or set of network protocols, the bad guys are always\ngoing to figure out how to break in. VoIP is certainly no different. In fact,\ngiven what’s at stake (phone conversations and phone system availability),\nthere’s certainly a lot to lose.\nVoIP-related systems are no more (or less) secure than other common\ncomputer systems. Why? It’s simple. VoIP systems have their own operat-\ning system, they have IP addresses, and they’re accessible on the network.\nCompounding the issue is the fact that many VoIP systems house more intel-\nligence — a fancy word for “more stuff that can go wrong” — which makes\nVoIP networks even more hackable.\nIf you want to find out more about how VoIP operates, which will undoubtedly\nhelp you root out vulnerabilities, check out VoIP For Dummies by Timothy V.\nKelly.\nOn one hand, VoIP systems have vulnerabilities very similar to other systems\nI cover in this book, including\n✓ Default settings\n✓ Missing patches\n✓ Weak passwords\nThat’s why using the standard vulnerability scanning tools I cover is impor-\ntant. Figure 13-13 shows various vulnerabilities associated with the authenti-\ncation mechanism in the web interface of a VoIP adapter.\n270\nPart V: Hacking Applications\nFigure 13-13:\nA\nWebInspect\nscan of\na VoIP\nnetwork\nadapter\nshowing\nseveral\nweaknesses.\nLooking at these results, apparently this device is just a basic web server.\nThat’s exactly my point — VoIP systems are nothing more than networked\ncomputer systems that have vulnerabilities that can be exploited.\nOn the other hand, two major security weaknesses are tied specifically to\nVoIP. The first is that of phone service disruption. Yep, VoIP is susceptible to\ndenial of service just like any other system or application. VoIP is as vulner-\nable as the most timing-sensitive applications out there, given the low toler-\nance folks have for choppy and dropped phone conversations (cellphones\naside, of course). The other big weakness with VoIP is that voice conversa-\ntions are not encrypted and thus can be intercepted and recorded. Imagine\nthe fun a bad guy could have recording conversations and blackmailing his\nvictims. This is very easy on unsecured wireless networks, but as I show in\nthe upcoming “Capturing and recording voice traffic” section, it’s also pretty\nsimple to carry out on wired networks.\n271\nChapter 13: Communication and Messaging Systems\nIf a VoIP network is not protected via network segmentation, such as a virtual\nlocal area network (VLAN), then the voice network is especially susceptible to\neavesdropping, denial of service, and other attacks. But the VLAN barrier can\nbe overcome in Cisco and Avaya environments by using a tool called VoIP\nHopper (http://voiphopper.sourceforge.net). Just when you think\nyour voice systems are secure, a tool like VoIP Hopper comes along. Gotta\nlove innovation!\nUnlike typical computer security vulnerabilities, these issues with VoIP\naren’t easily fixed with simple software patches. These vulnerabilities are\nembedded into the Session Initiation Protocol (SIP) and Real-time Transport\nProtocol (RTP) that VoIP uses for its communications. The following are two\nVoIP-centric tests you should use to assess the security of your voice systems.\nIt’s important to note that although SIP is the most widely used VoIP protocol,\nthere is H.323. So, don’t spin your wheels testing for SIP flaws if H.323 is the\nprotocol in use. Refer to www.packetizer.com/ipmc/h323_vs_sip for\nadditional details on H.323 versus SIP.\nScanning for vulnerabilities\nOutside the basic network, OS, and web application vulnerabilities, you can\nuncover other VoIP issues if you use the right tools. A neat Windows-based\ntool that’s dedicated to finding vulnerabilities in VoIP networks is SiVuS.\nSiVuS allows you to perform the basic ethical hacking steps of scanning, enu-\nmerating, and rooting out vulnerabilities. You can start by downloading and\nrunning the SiVuS installation executable. (As of publication it’s available at\nwww.voip-security.net/index.php/component/jdownloads/view.\ndownload/30/299.)\nAfter SiVuS is installed, load the program and you’re ready to get started.\nFigure 13-14 shows my results of the first SiVuS step — Component Discovery.\nYou can use Component Discovery to search for one or two specific VoIP\nhosts, or you can scan your entire network. I recommend the latter because\nI find looking for one specific host is a little quirky — and you never know\nwhat other VoIP systems are out there that you could overlook.\n272\nPart V: Hacking Applications\nFigure 13-14:\nUsing SiVuS\nComponent\nDiscovery\nto find live\nVoIP sys-\ntems on the\nnetwork.\nAfter you find a few hosts, you can use SiVuS to dig deeper and root out DoS,\nbuffer overflow, weak authentication, and other vulnerabilities related to\nVoIP. You can test each of your VoIP hosts for these vulnerabilities by using\nthe following steps:\n1. Click the SIP Scanner tab and then click the Scanner Configuration tab.\n2. In the Target(s) field in the upper-left corner, enter the system(s) you\nwant to scan, and leave all other options at their defaults.\nAt this point, you can save the current configuration by clicking Save\nConfiguration in the lower-right corner of the window. This action cre-\nates a template you can use for your other hosts so that you don’t have\nto change your settings each time.\n3. Click the Scanner Control Panel tab and either leave the default\nconfiguration or select your custom configuration in the Current\nConfiguration drop-down list.\n4. Click the green Scan button to start your scan.\n5. When SiVuS finishes its tests, you hear a busy signal (assuming you\nhave a sound card) signifying that testing is complete.\nYour results might look similar to the SiVuS output shown in Figure 13-15.\n273\nChapter 13: Communication and Messaging Systems\nFigure 13-15:\nSiVuS\ndiscovered\nseveral\nVoIP-centric\nvulner-\nabilities.\nWhether SiVuS’s results and recommendations are an issue in your environ-\nment, I encourage you to sift through each one to determine what can and\nshould be fixed. Remember, odds are good that the bad guys both inside and\noutside your network can see these vulnerabilities just as easily as you can.\nYou can also use SiVuS to generate SIP messages, which come in handy if you\nwant to test any built-in VoIP authentication mechanisms on your VoIP hosts.\nSiVuS’s documentation outlines the specifics.\nOther free tools for analyzing SIP traffic are PROTOS (www.ee.oulu.fi/\nresearch/ouspg/protos/testing/c07/sip/index.html), and sipsak\n(http://sipsak.org). A good website that lists all sorts of VoIP tools is\nwww.voipsa.org/Resources/tools.php.\nCapturing and recording voice traffic\nIf you have access to the wired or wireless network, you can capture VoIP\nconversations easily. This is a great way to prove that the network and the\nVoIP installation are vulnerable. There are many legal issues associated with\ntapping into phone conversations, so make sure you have permission and are\ncareful not to abuse your test results.\n274\nPart V: Hacking Applications\nYou can use Cain & Abel (technically just Cain for the features I demonstrate\nhere) to tap into VoIP conversations. You can download Cain & Abel free at\nwww.oxid.it/cain.html. Using Cain’s ARP poison routing feature, you can\nplug in to the network and have it capture VoIP traffic:\n1. Load Cain & Abel and then click the Sniffer tab to enter the network\nanalyzer mode.\nThe Hosts page opens by default.\n2. Click the Start/Stop APR icon (which looks like the nuclear waste\nsymbol).\nThe ARP poison routing process starts and enables the built-in sniffer.\n3. Click the blue + icon to add hosts to perform ARP poisoning on.\n4. In the MAC Address Scanner window that appears, ensure that All\nHosts in My Subnet is selected and then click OK.\n5. Click the APR tab (the one with the yellow-and-black circle icon) to\nload the APR page.\n6. Click the white space under the uppermost Status column heading\n(just under the Sniffer tab).\nThis step re-enables the blue + icon.\n7. Click the blue + icon and the New ARP Poison Routing window shows\nthe hosts discovered in Step 3.\n8. Select your default route or other host that you want to capture pack-\nets traveling to and from.\nI just select my default route, but you might consider selecting your SIP\nmanagement system or other central VoIP system. The right column fills\nwith all the remaining hosts.\n9. In the right column, Ctrl+click the system you want to poison to cap-\nture its voice traffic.\nIn my case, I select my VoIP network adapter, but you might consider\nselecting all your VoIP phones.\n10. Click OK to start the ARP poisoning process.\nThis process can take anywhere from a few seconds to a few minutes\ndepending on your network hardware and each host’s local TCP/IP\nstack.\n11. Click the VoIP tab and all voice conversations are “automagically”\nrecorded.\n275\nChapter 13: Communication and Messaging Systems\nHere’s the interesting part — the conversations are saved in .wav audio\nfile format, so you simply right-click the recorded conversation you want\nto test and choose Play, as shown in Figure 13-16. Note that conversa-\ntions being recorded show Recording . . . in the Status column.\nThe voice quality with Cain and other tools depends on the codec your VoIP\ndevices use. With my equipment, I find the quality is marginal at best. That’s\nnot really a big deal, though, because your goal is to prove there’s a vulner-\nability — not to listen in on other people’s conversations.\nThere’s also a Linux-based tool called vomit (http://vomit.xtdnet.nl) —\nshort for voice over misconfigured Internet telephones — that you can use\nto convert VoIP conversations into .wav files. You first need to capture the\nactual conversation by using tcpdump, but if Linux is your preference, this\nsolution offers basically the same results as Cain, outlined in the preceding\nsteps.\nIf you’re going to work a lot with VoIP, I highly recommend you invest in a\ngood VoIP network analyzer. Check out WildPackets’ OmniPeek — a great all-\nin-one wired and wireless analyzer (www.wildpackets.com/products/\nomnipeek_network_analyzer/) — and TamoSoft’s CommView (www.\ntamos.com/products/commview/), which is a great low-priced alternative.\nThese VoIP vulnerabilities are only the tip of the iceberg. New systems, soft-\nware, and related protocols continue to emerge, so it pays to remain vigilant,\nhelping to ensure your conversations are locked down from those with mali-\ncious intent.\nFigure 13-16:\nUsing Cain\n& Abel to\ncapture,\nrecord, and\nplayback\nVoIP con-\nversations.\n276\nPart V: Hacking Applications\nCountermeasures against VoIP\nvulnerabilities\nLocking down VoIP can be tricky. You can get off to a good start, though, by\nsegmenting your voice network into its own VLAN — or even a dedicated\nphysical network if that fits into your budget. You should also make sure that\nall VoIP-related systems are hardened according to vendor recommendations\nand widely accepted best practices (such as NIST’s SP800-58 document at\nhttp://csrc.nist.gov/publications/nistpubs/800-58/SP800-\n58-final.pdf) and that software and firmware are fully patched."
  },
  {
    "input": "What are the common web vulnerabilities that can be tested and how can they be mitigated?",
    "summary": "Websites and web applications are common targets for hacking due to their accessibility and the sensitive information they often store. This chapter covers various testing methods, including using Google, automated scanners, and manual analysis to identify vulnerabilities like SQL injection, cross-site scripting, and unsecured login mechanisms. It also provides countermeasures to protect against these threats, emphasizing the importance of secure coding practices and regular security assessments.",
    "output": "Chapter 14\nWebsites and Applications\nIn This Chapter\n▶ Testing websites and web applications\n▶ Hacking with Google\n▶ Protecting against SQL injection and cross-site scripting\n▶ Preventing login weaknesses\n▶ Countering web abuse\n▶ Analyzing the source code\nW\nebsites and web applications are common targets for attack because\nthey’re everywhere and often open for anyone to poke and prod.\nBasic websites used for marketing, contact information, document down-\nloads, and so on are especially easy for the bad guys to play around with.\nHowever, for criminal hackers, websites that provide a front end to complex\napplications and databases that store valuable information, such as credit\ncard and Social Security numbers, are especially attractive. This is where the\nmoney is, both literally and figuratively.\nWhy are websites and applications so vulnerable? The consensus is that they’re\nvulnerable because of poor software development and testing practices. Sound\nfamiliar? It should; this same problem affects operating systems and practically\nall aspects of computer systems. This is the side effect of relying on software\ncompilers to perform error checking, waning user demand for higher-quality\nsoftware, and emphasizing time-to-market instead of security and quality.\nThis chapter presents website and application tests to run on your systems.\nGiven all the custom software configuration possibilities, you can test for literally\nthousands of web vulnerabilities. In this chapter, I focus on the ones I see most\noften using both automated scanners and manual analysis. I also outline coun-\ntermeasures to help minimize the chances that someone with ill intent can carry\nout these attacks against what are likely considered your most critical systems.\nI want to point out that this chapter merely skims the surface of all possible\nweb security flaws and ways to test for them. Additional sources for building\nyour web security testing skills are the tools and standards (such as the Top\n10 Web Application Security Risks) provided by the Open Web Application\nSecurity Project (www.owasp.org).\n278\nPart V: Hacking Applications\nChoosing Your Web Application Tools\nGood web vulnerability scanners and related tools can help ensure that you\nget the most from your scans. As with many things in life, I find that you get\nwhat you pay for when it comes to testing for web security holes. This is why\nI mostly use commercial tools in my work when testing websites and web\napplications for vulnerabilities.\nThese are my favorite web security testing tools:\n✓ Acunetix Web Vulnerability Scanner (www.acunetix.com) for all-in-\none security testing, including a port scanner, an HTTP sniffer, and an\nautomated SQL injection tool\n✓ Firefox Web Developer (http://chrispederick.com/work/web-\ndeveloper) for manual analysis and manipulation of web pages\nYes, you must do manual analysis. You definitely want to use a scanner,\nbecause scanners find around half of the issues. For the other half,\nyou need to do much more than just run automated scanning tools.\nRemember that you have to pick up where scanners leave off to truly\nassess the overall security of your websites and applications. You have\nto do some manual work not because web vulnerability scanners are\nfaulty, but because poking and prodding web systems simply require\ngood old-fashioned hacker trickery and your favorite web browser.\n✓ HTTrack Website Copier (www.httrack.com) for mirroring a site for\noffline inspection\nMirroring is a method of crawling through (also called spidering) a web-\nsite’s every nook and cranny and downloading publicly accessible pages\nto your local system.\n✓ WebInspect (www.hpenterprisesecurity.com/products/hp-\nfortify-software-security-center/hp-webinspect) for all-\nin-one security testing, including an excellent HTTP proxy and HTTP\neditor and an automated SQL injection tool\nYou can also use general vulnerability scanners, such as QualysGuard and\nLanGuard, as well as exploit tools, such as Metasploit, when testing web\nservers and applications. You can use these tools to find (and exploit) weak-\nnesses that you might not otherwise find with standard web-scanning tools\nand manual analysis. Google can be beneficial for rooting through web appli-\ncations and looking for sensitive information as well. Although these non–\napplication-specific tools can be beneficial, it’s important to know that they\nwon’t drill down as deep as the tools I mention in the preceding list.\n279\nChapter 14: Websites and Applications\nCase study in hacking web applications\nwith Caleb Sima\nIn this case study, Caleb Sima, a well-known Mr. Sima continued to manipulate the URL from\napplication security expert, shared an experience the application by adding & characters within\nof performing a web-application security test. the statement to control the custom script.\nThis technique allowed him to capture all\nThe Situation\nsource code files. Mr. Sima noted some inter-\nMr. Sima was hired to perform a web application esting filenames, including VerifyLogin.\npenetration test to assess the security of a well- htm, ApplicationDetail.\nknown financial website. Equipped with nothing htm, CreditReport.htm, and\nmore than the URL of the main financial site, Mr. ChangePassword.htm. Then Mr. Sima\nSima set out to find what other sites existed for tried to connect to each file by issuing a spe-\nthe organization and began by using Google to cially formatted URL to the server. The server\nsearch for possibilities. Mr. Sima initially ran an returned a User not logged in message\nautomated scan against the main servers to dis- for each request and stated that the connection\ncover any low-hanging fruit. This scan provided must be made from the intranet.\ninformation on the web server version and some\nThe Outcome\nother basic information but nothing that proved\nuseful without further research. While Mr. Sima Mr. Sima knew where the files were located\nperformed the scan, neither the IDS nor the fire- and was able to sniff the connection and deter-\nwall noticed any of his activity. Then Mr. Sima mine that the ApplicationDetail.htm\nissued a request to the server on the initial web file set a cookie string. With little manipulation\npage, which returned some interesting informa- of the URL, Mr. Sima hit the jackpot. This file\ntion. The web application appeared to be accept- returned client information and credit cards\ning many parameters, but as Mr. Sima continued when a new customer application was being\nto browse the site, he noticed that the param- processed. CreditReport.htm allowed\neters in the URL stayed the same. Mr. Sima Mr. Sima to view customer credit report status,\ndecided to delete all the parameters within the fraud information, declined-application status,\nURL to see what information the server would and a multitude of other sensitive information.\nreturn when queried. The server responded with The lesson: Hackers can utilize many types of\nan error message describing the type of applica- information to break through web applications.\ntion environment. The individual exploits in this case study were\nminor, but when combined, they resulted in\nNext, Mr. Sima performed a Google search on the\nsevere vulnerabilities.\napplication that resulted in some detailed docu-\nmentation. Mr. Sima found several articles and Caleb Sima was a charter member of the\ntech notes within this information that showed X-Force team at Internet Security Systems and\nhim how the application worked and what default was the first member of the penetration test-\nfiles might exist. In fact, the server had several of ing team. Mr. Sima went on to co-found SPI\nthese default files. Mr. Sima used this information Dynamics (later acquired by HP) and become\nto probe the application further. He quickly dis- its CTO, as well as director of SPI Labs, the\ncovered internal IP addresses and what services application-security research and development\nthe application was offering. As soon as Mr. Sima group within SPI Dynamics.\nknew exactly what version the admin was run-\nning, he wanted to see what else he could find.\n280\nPart V: Hacking Applications\nSeeking Web Vulnerabilities\nAttacks against unsecured websites and applications via Hypertext Transfer\nProtocol (HTTP) make up the majority of all Internet-related attacks. Most\nof these attacks can be carried out even if the HTTP traffic is encrypted\n(via HTTPS or via HTTP over SSL) because the communications medium\nhas nothing to do with these attacks. The security vulnerabilities actually\nlie within the websites and applications themselves or the web server and\nbrowser software that the systems run on and communicate with.\nMany attacks against websites and applications are just minor nuisances and\nmight not affect sensitive information or system availability. However, some\nattacks can wreak havoc on your systems, putting sensitive information at\nrisk and even placing your organization out of compliance with state, federal,\nand international information privacy and security laws and regulations.\nDirectory traversal\nI start you out with a simple directory traversal attack. Directory traversal is a\nreally basic weakness, but it can turn up interesting — sometimes sensitive —\ninformation about a web system. This attack involves browsing a site and\nlooking for clues about the server’s directory structure and sensitive files\nthat might have been loaded intentionally or unintentionally.\nPerform the following tests to determine information about your website’s\ndirectory structure.\nCrawlers\nA spider program, such as the free HTTrack Website Copier, can crawl your\nsite to look for every publicly accessible file. To use HTTrack, simply load it,\ngive your project a name, tell HTTrack which website(s) to mirror, and after\na few minutes, possibly hours (depending on the size and complexity of the\nsite), you’ll have everything that’s publicly accessible on the site stored on\nyour local drive in c:\\My Web Sites. Figure 14-1 shows the crawl output of\na basic website.\nComplicated sites often reveal more information that should not be there,\nincluding old data files and even application scripts and source code.\n281\nChapter 14: Websites and Applications\nFigure 14-1:\nUsing\nHTTrack\nto crawl a\nwebsite.\nInevitably, when performing web security assessments, I stumble across\n.zip or .rar files on web servers. Sometimes they contain junk, but often-\ntimes they hold sensitive information that shouldn’t be there for the public\nto access. One project in particular stands out. When I ran across a .zip file\nand tried to open it, WinZip asked me for a password. Using my handy dandy\n.zip file password-cracking tool from Elcomsoft (see Chapter 7 for details on\npassword cracking), I had the password in mere milliseconds. Inside the .zip\nfile was an Excel spreadsheet containing sensitive patient healthcare infor-\nmation (names, addresses, Social Security numbers, and more) that anyone\nand everyone in the world could access. In situations like this, your business\nmight be required to notify everyone involved that their information was inad-\nequately protected and possibly compromised. It pays to know the laws and\nregulations affecting your business. Better yet, make sure users aren’t posting\nimproperly secured sensitive information on your web servers in the first place!\nLook at the output of your crawling program to see what files are available.\nRegular HTML and PDF files are probably okay because they’re most likely\nneeded for normal web usage. But it wouldn’t hurt to open each file to make\nsure it belongs there and doesn’t contain sensitive information you don’t\nwant to share with the world.\nGoogle\nGoogle, the search engine company that many love to hate, can also be used\nfor directory traversal. In fact, Google’s advanced queries are so powerful\nthat you can use them to root out sensitive information, critical web server\n282\nPart V: Hacking Applications\nfiles and directories, credit card numbers, webcams — basically anything\nthat Google has discovered on your site — without having to mirror your site\nand sift through everything manually. It’s already sitting there in Google’s\ncache waiting to be viewed.\nThe following are a couple of advanced Google queries that you can enter\ndirectly into the Google search field:\n✓ site:hostname keywords — This query searches for any keyword you\nlist, such as SSN, confidential, credit card, and so on. An example would be:\nsite:www.principlelogic.com speaker\n✓ filetype:file-extension site:hostname — This query searches for specific\nfile types on a specific website, such as doc, pdf, db, dbf, zip, and\nmore. These file types might contain sensitive information. An example\nwould be:\nfiletype:pdf site:www.principlelogic.com\nOther advanced Google operators include the following:\n✓ allintitle searches for keywords in the title of a web page.\n✓ inurl searches for keywords in the URL of a web page.\n✓ related finds pages similar to this web page.\n✓ link shows other sites that link to this web page.\nSpecific definitions and more can be found at www.googleguide.com/\nadvanced_operators.html. Also, an excellent resource for Google hack-\ning is Johnny Long’s Google Hacking Database (GHDB) site http://johnny.\nihackstuff.com/ghdb. Additional hacking-related Google queries can be\nfound at http://artkast.yak.net/81.\nWhen sifting through your site with Google, be sure to look for sensitive\ninformation about your servers, network, and organization in Google Groups\n(http://groups.google.com), which is the Usenet archive. I have found\nemployee postings in newsgroups that reveal too much about the internal\nnetwork and business systems — the sky is the limit. If you find something\nthat doesn’t need to be there, you can work with Google to have it edited or\nremoved. For more information, refer to Google’s Contact us page at www.\ngoogle.com/intl/en/contact.\nLooking at the big picture of web security, Google hacking is pretty limited,\nbut if you’re really into it, check out Johnny Long’s book, Google Hacking for\nPenetration Testers (Syngress).\n283\nChapter 14: Websites and Applications\nCountermeasures against\ndirectory traversals\nYou can employ three main countermeasures against having files compro-\nmised via malicious directory traversals:\n✓ Don’t store old, sensitive, or otherwise nonpublic files on your web\nserver. The only files that should be in your /htdocs or DocumentRoot\nfolder are those that are needed for the site to function properly. These\nfiles should not contain confidential information that you don’t want the\nworld to see.\n✓ Configure your robots.txt file to prevent search engines, such as\nGoogle, from crawling the more sensitive areas of your site.\n✓ Ensure that your web server is properly configured to allow public\naccess to only those directories that are needed for the site to func-\ntion. Minimum privileges are key here, so provide access to only the\nfiles and directories needed for the web application to perform properly.\nCheck your web server’s documentation for instructions on controlling\npublic access. Depending on your web server version, these access\ncontrols are set in\n• The httpd.conf file and the .htaccess files for Apache (See\nhttp://httpd.apache.org/docs/configuring.html for\nmore information.)\n• Internet Information Services Manager for IIS\nThe latest versions of these web servers have good directory security by\ndefault so, if possible, make sure you’re running the latest versions.\nFinally, consider using a search engine honeypot, such as the Google Hack\nHoneypot (http://ghh.sourceforge.net). A honeypot draws in mali-\ncious users so you can see how the bad guys are working against your site.\nThen, you can use the knowledge you gain to keep them at bay.\nInput-filtering attacks\nWebsites and applications are notorious for taking practically any type of\ninput, mistakenly assuming that it’s valid, and processing it further. Not vali-\ndating input is one of the greatest mistakes that web developers can make.\n284\nPart V: Hacking Applications\nSeveral attacks that insert malformed data — often, too much at one time —\ncan be run against a website or application, which can confuse the system\nand make it divulge too much information to the attacker. Input attacks can\nalso make it easy for the bad guys to glean sensitive information from the\nweb browsers of unsuspecting users.\nBuffer overflows\nOne of the most serious input attacks is a buffer overflow that specifically\ntargets input fields in web applications.\nFor instance, a credit-reporting application might authenticate users before\nthey’re allowed to submit data or pull reports. The login form uses the follow-\ning code to grab user IDs with a maximum input of 12 characters, as denoted\nby the maxsize variable:\n<form name=”Webauthenticate” action=”www.your_web_app.com/\nlogin.cgi” method=”POST”>\n...\n<input type=”text” name=”inputname” maxsize=”12”>\n...\nA typical login session would involve a valid login name of 12 characters or\nfewer. However, the maxsize variable can be changed to something huge,\nsuch as 100 or even 1,000. Then an attacker can enter bogus data in the login\nfield. What happens next is anyone’s call — the application might hang, over-\nwrite other data in memory, or crash the server.\nA simple way to manipulate such a variable is to step through the page\nsubmission by using a web proxy, such as those built in to the commer-\ncial web vulnerability scanners I mention or the free Paros Proxy (www.\nparosproxy.org).\nWeb proxies sit between your web browser and the server you’re testing and\nallow you to manipulate information sent to the server. To begin, you must\nconfigure your web browser to use the local proxy of 127.0.0.1 on port 8080.\nIn Firefox, this is accessible by choosing Tools➪Options; click Advanced,\nclick the Network tab, click the Connection Settings button, and then select\nthe Manual Proxy Configuration radio button. In Internet Explorer, choose\nTools➪Internet Options; click the Connections tab, click the LAN Settings\nbutton, and then select the Use a Proxy Server for Your LAN check box.\nAll you have to do is change the field length of the variable before your\nbrowser submits the page, and it will be submitted using whatever length you\ngive. You can also use the Firefox Web Developer to remove maximum form\nlengths defined in web forms, as shown in Figure 14-2.\n285\nChapter 14: Websites and Applications\nFigure 14-2:\nUsing\nFirefox Web\nDeveloper\nto reset\nform field\nlengths.\nURL manipulation\nAn automated input attack manipulates a URL and sends it back to the\nserver, telling the web application to do various things, such as redirect to\nthird-party sites, load sensitive files off the server, and so on. Local file inclu-\nsion is one such vulnerability. This is when the web application accepts URL-\nbased input and returns the specified file’s contents to the user. For example,\nin one situation, WebInspect sent something similar to the following request\nand returned the Linux server’s passwd file:\nhttps://www.your_web_app.com/onlineserv/Checkout.\ncgi?state=\ndetail&language=english&imageSet=/../..//../..//../..//../\n..///etc/passwd\nThe following links demonstrate another example of URL trickery called URL\nredirection:\nhttp://www.your_web_app.com/error.aspx?PURL=http://www.\nbad~site.com&ERROR=Path+’OPTIONS’+is+forbidden.\nhttp://www.your_web_app.com/exit.asp?URL=http://www.\nbad~site.com\n286\nPart V: Hacking Applications\nIn both situations, an attacker can exploit this vulnerability by sending the\nlink to unsuspecting users via e-mail or by posting it on a website. When\nusers click the link, they can be redirected to a malicious third-party site con-\ntaining malware or inappropriate material.\nIf you have nothing but time on your hands, you might uncover these types\nof vulnerabilities manually. However, in the interest of sanity (and accuracy),\nthese attacks are best carried out by running a web vulnerability scanner\nbecause they can detect the weakness by sending hundreds and hundreds of\nURL iterations to the web system very quickly.\nHidden field manipulation\nSome websites and applications embed hidden fields within web pages to\npass state information between the web server and the browser. Hidden\nfields are represented in a web form as <input type=”hidden”>. Because\nof poor coding practices, hidden fields often contain confidential information\n(such as product prices on an e-commerce site) that should be stored only in\na back-end database. Users shouldn’t see hidden fields — hence the name —\nbut the curious attacker can discover and exploit them with these steps:\n1. View the HTML source code.\nTo see the source code in Internet Explorer, choose Page➪View Source.\nIn Firefox, choose View➪Page Source.\n2. Change the information stored in these fields.\nFor example, a malicious user might change the price from $100 to $10.\n3. Repost the page back to the server.\nThis step allows the attacker to obtain ill-gotten gains, such as a lower\nprice on a web purchase.\nUsing hidden fields for authentication (login) mechanisms can be especially\ndangerous. I once came across a multifactor authentication intruder lockout\nprocess that relied on a hidden field to track the number of times the user\nattempted to log in. This variable could be reset to zero for each login attempt\nand thus facilitate a scripted dictionary or brute-force login attack. It was\nsomewhat ironic that the security control to prevent intruder attacks was vul-\nnerable to an intruder attack.\nSeveral tools, such as Web Proxy (which comes with WebInspect) or Paros\nProxy, can easily manipulate hidden fields. Figure 14-3 shows SPI Proxy’s\ninterface and a web page’s hidden field.\n287\nChapter 14: Websites and Applications\nFigure 14-3:\nUsing SPI\nProxy to find\nand manipu-\nlate hidden\nfields.\nIf you come across hidden fields, you can try to manipulate them to see what\ncan be done. It’s as simple as that.\nCode injection and SQL injection\nSimilar to URL manipulation attacks, code-injection attacks manipulate spe-\ncific system variables. Here’s an example:\nhttp://www.your_web_app.com/script.php?info_variable=X\nAttackers who see this variable can start entering different data into the\ninfo_variable field, changing X to something like one of the following lines:\nhttp://www.your_web_app.com/script.php?info_variable=Y\nhttp://www.your_web_app.com/script.php?info_\nvariable=123XYZ\n288\nPart V: Hacking Applications\nThe web application might respond in a way that gives attackers more infor-\nmation than they want, such as detailed errors or access into data fields\nthey’re not authorized to access. The invalid input might also cause the\napplication or the server to hang. Similar to the case study earlier in the\nchapter, hackers can use this information to determine more about the web\napplication and its inner workings, which can ultimately lead to a serious\nsystem compromise.\nIf HTTP variables are passed in the URL and are easily accessible, it’s only a\nmatter of time before someone exploits your web application.\nI once used a web application to manage some personal information that did\njust this. Because a “name” parameter was part of the URL, anyone could\ngain access to other people’s personal information by changing the “name”\nvalue. For example, if the URL included “name=kbeaver”, a simple change\nto “name=jsmith” would bring up J. Smith’s home address, Social Security\nnumber, and so on. Ouch. I alerted the system administrator to this vulner-\nability. After a few minutes of denial, he agreed that it was indeed a problem\nand proceeded to work with the developers to fix it.\nCode injection can also be carried out against back-end SQL databases — an\nattack known as SQL injection. Malicious attackers insert SQL statements,\nsuch as CONNECT, SELECT, and UNION, into URL requests to attempt to con-\nnect and extract information from the SQL database that the web application\ninteracts with. SQL injection is made possible by applications not properly\nvalidating input combined with informative errors returned from database\nservers and web servers.\nTwo general types of SQL injection are standard (also called error-based)\nand blind. Error-based SQL injection is exploited based on error messages\nreturned from the application when invalid information is input into the\nsystem. Blind SQL injection happens when error messages are disabled,\nrequiring the hacker or automated tool to guess what the database is return-\ning and how it’s responding to injection attacks.\nThere’s a quick, fairly reliable way to determine whether your web applica-\ntion is vulnerable to SQL injection. Simply enter a single apostrophe (’) in\nyour web form fields or at the end of the URL. If a SQL error is returned, odds\nare good that SQL injection is present. You’re definitely going to get what you\npay for when it comes to scanning for and uncovering SQL injection with a\nweb vulnerability scanner. As with URL manipulation, you’re much better off\nrunning a web vulnerability scanner to check for SQL injection. Figure 14-4\nshows numerous SQL injection vulnerabilities discovered by the WebInspect\nvulnerability scanner.\n289\nChapter 14: Websites and Applications\nFigure 14-4:\nWebInspect\ndiscov-\nered SQL\ninjection vul-\nnerabilities.\nWhen you discover SQL injection vulnerabilities, you might be inclined to\nstop there. That’s fine. However, I prefer to see how far I can get into the\ndatabase system. An excellent — and amazingly simple — tool to use for this\nis SQL Injector, which comes with WebInspect. You simply provide the tool\nwith the suspect URL that your scanner discovered, and the SQL injection\nprocess begins, as shown in Figure 14-5.\nYou can click the Get Data or Pump Data buttons in SQL Injector to start\ndumping information, as shown in Figure 14-6, leading you to the ultimate\nethical hacking goal.\nAcunetix Web Vulnerability Scanner has a similar SQL injection tool built in\nas well.\n290\nPart V: Hacking Applications\nFigure 14-5:\nUsing the\nSQL Injector\ntool to auto-\nmate SQL\ninjection.\nFigure 14-6:\nUsing SQL\nInjector’s\nData Pump\nto extract\ncolumn\nnames.\n291\nChapter 14: Websites and Applications\nIf your budget is limited, you may consider using a free SQL injection tool such\nas SQL Power Injector (www.sqlpowerinjector.com) or the Firefox Add-\non, SQL Inject Me (https://addons.mozilla.org/en-us/firefox/\naddon/sql-inject-me).\nI cover database security in depth in Chapter 15.\nCross-site scripting\nCross-site scripting (XSS) is perhaps the most well-known web vulnerability\nthat occurs when a web page displays user input — typically via JavaScript—\nthat isn’t properly validated. A criminal hacker can take advantage of the\nabsence of input filtering and cause a web page to execute malicious code on\nany user’s computer that views the page.\nFor example, an XSS attack can display the user ID and password login page\nfrom another rogue website. If users unknowingly enter their user IDs and\npasswords in the login page, the user IDs and passwords are entered into the\nhacker’s web server log file. Other malicious code can be sent to a victim’s\ncomputer and run with the same security privileges as the web browser or\ne-mail application that’s viewing it on the system; the malicious code could\nprovide a hacker with full Read/Write access to browser cookies, browser\nhistory files, or even permit the download/installation of malware.\nA simple test shows whether your web application is vulnerable to XSS. Look\nfor any fields in the application that accept user input (such as on a login or\nsearch form), and enter the following JavaScript statement:\n<script>alert(‘XSS’)</script>\nIf a window pops up that reads XSS, as shown in Figure 14-7, the application\nis vulnerable.\nFigure 14-7:\nScript code\nreflected to\nthe browser.\nThere are many more iterations for exploiting XSS, such as those requiring\nuser interaction via the JavaScript onmouseover function. As with SQL injec-\ntion, you really need to use an automated scanner to check for XSS. Both\nWebInspect and Acunetix Web Vulnerability Scanner do a great job of finding\nXSS. However, they often tend to find different XSS issues, a detail that high-\nlights the importance of using multiple scanners when you can. Figure 14-8\nshows some sample XSS findings in Acunetix Web Vulnerability Scanner.\n292\nPart V: Hacking Applications\nFigure 14-8:\nUsing\nAcunetix\nWeb\nVulnerability\nScanner\nto find\ncross-site\nscripting in\na web\napplication.\nAnother web vulnerability scanner that’s very good at uncovering XSS that\nmany other scanners won’t find is NTOSpider from NT Objectives (www.\nntobjectives.com). In my experience, NTOSpider works better than other\nscanners at performing authenticated scans against applications that use\nmulti-factor authentication systems. NTOSpider should definitely be on your\nradar as a potential primary or secondary scanner. Remember: When it comes\nto web vulnerabilities, the more scanners the better!\nCountermeasures against input attacks\nWebsites and applications must filter incoming data. It’s as simple as that.\nThe sites and applications must check and ensure that the data entered fits\nwithin the parameters of what the application is expecting. If the data doesn’t\nmatch, the application should generate an error or return to the previous\npage. Under no circumstances should the application accept the junk data,\nprocess it, and reflect it back to the user.\n293\nChapter 14: Websites and Applications\nSensitive information stored locally\nQuite often as part of my ethical hacking, I standalone programs that require authentication.\nuse a hex editor to see how an application is You just might be surprised at the outcome.\nstoring sensitive information, such as pass- Outside of obfuscating or encoding the login\nwords, in memory. When I’m using Firefox and credentials, there’s unfortunately not a great\nInternet Explorer, I can use a hex editor, such fix because this “feature” is part of the web\nas WinHex (www.x-ways.net/winhex), browser that developers can’t really control.\nto search the active memory in these programs\nA similar security feature occurs on the client\nand frequently find user ID and password\nside when HTTP GET requests rather than\ncombinations.\nHTTP POST requests are used to process sen-\nI’ve found that with Internet Explorer this infor- sitive information. The following is an example\nmation is kept in memory even after browsing of a vulnerable GET request:\nto several other websites or logging out of the\nhttps://www.your_web_app.com/\napplication. This memory usage feature poses\naccess.php?username=kbeaver&\na security risk on the local system if another password=WhAteVur!&login=SoOn\nuser accesses the computer or if the system\nis infected with malware that can search GET requests are often stored in the user’s web\nsystem memory for sensitive information. The browser history file, web server log files, and\nway browsers store sensitive information in proxy log files. GET requests can be transmit-\nmemory is also bad news if an application error ted to third-party sites via the HTTP Referer\nor system memory dump occurs and the user field when the user browses to a third-party\nends up sending the information to Microsoft site. All of the above can lead to exposure of\n(or another browser vendor) for QA purposes. login credentials and unauthorized web appli-\nIt’s also bad news if the information is written to cation access. The lesson: Don’t use HTTP GET\na dump file on the local hard drive and sits there requests. If anything, consider these vulnera-\nfor someone to find. bilities to be a good reason to encrypt the hard\ndrives of your laptops and other computers that\nTry searching for sensitive information stored are not physically secure.\nin memory related on your web application(s) or on\nSecure software coding practices can eliminate all these issues if they’re\nmade a critical part of the development process. Developers should know\nand implement these best practices:\n✓ Never present static values that the web browser and the user don’t need\nto see. Instead, this data should be implemented within the web applica-\ntion on the server side and retrieved from a database only when needed.\n✓ Filter out <script> tags from input fields.\n✓ Disable detailed web server and database-related error messages if\npossible.\n294\nPart V: Hacking Applications\nDefault script attacks\nPoorly written web programs, such as Hypertext Preprocessor (PHP) and\nActive Server Pages (ASP) scripts, can allow hackers to view and manipulate\nfiles on a web server and do other things they’re not authorized to do. These\nflaws are also common in content management systems (CMSs) that are used\nby developers, IT staff, and marketing professionals to maintain a website’s\ncontent. Default script attacks are common because so much poorly written\ncode is freely accessible on websites. Hackers can also take advantage of\nvarious sample scripts that install on web servers, especially older versions\nof Microsoft’s IIS web server.\nMany web developers and webmasters use these scripts without understand-\ning how they really work or without testing them, which can introduce serious\nsecurity vulnerabilities.\nTo test for script vulnerabilities, you can peruse scripts manually or use a\ntext search tool (such as the search function built in to the Windows Start\nmenu or the Find program in Linux) to find any hard-coded usernames, pass-\nwords, and other sensitive information. Search for admin, root, user, ID, login,\nsignon, password, pass, pwd, and so on. Sensitive information embedded in\nscripts like this is rarely necessary and is often the result of poor coding\npractices that give precedence to convenience over security.\nCountermeasures against\ndefault script attacks\nYou can help prevent attacks against default web scripts as follows:\n✓ Know how scripts work before deploying them within a web environment.\n✓ Make sure that all default or sample scripts are removed from the web\nserver before using them.\nDon’t use publicly accessible scripts that contain hard-coded confiden-\ntial information. They’re a security incident in the making.\n✓ Set file permissions on sensitive areas of your site/application to prevent\npublic access.\n295\nChapter 14: Websites and Applications\nUnsecured login mechanisms\nMany websites require users to log in before they can do anything with the\napplication. These login mechanisms often don’t handle incorrect user IDs\nor passwords gracefully. They often divulge too much information that an\nattacker can use to gather valid user IDs and passwords.\nTo test for unsecured login mechanisms, browse to your application and log in\n✓ Using an invalid user ID with a valid password\n✓ Using a valid user ID with an invalid password\n✓ Using an invalid user ID and invalid password\nAfter you enter this information, the web application will probably respond\nwith a message similar to Your user ID is invalid or Your password\nis invalid. The web application might return a generic error message,\nsuch as Your user ID and password combination is invalid and,\nat the same time, return different error codes in the URL for invalid user IDs\nand invalid passwords, as shown in Figures 14-9 and 14-10.\nFigure 14-9:\nURL returns\nan error\nwhen an\ninvalid\nuser ID is\nentered.\n296\nPart V: Hacking Applications\nIn either case, this is bad news because the application is telling you not only\nwhich parameter is invalid, but also which one is valid. This means that mali-\ncious attackers now know a good username or password — their workload\nhas been cut in half! If they know the username (which usually is easier to\nguess), they can simply write a script to automate the password-cracking\nprocess, and vice versa.\nYou should also take your login testing to the next level by using a web login\ncracking tool, such as Brutus (www.hoobie.net/brutus/index.html), as\nshown in Figure 14-11. Brutus is a very simple tool that can be used to crack\nboth HTTP and form-based authentication mechanisms by using both dic-\ntionary and brute-force attacks.\nAs with any type of password testing, this can be a long and arduous task, and\nyou stand the risk of locking out user accounts. Proceed with caution.\nAn alternative — and better maintained — tool for cracking web passwords\nis THC-Hydra (www.thc.org/thc-hydra)\nFigure 14-10:\nThe URL\nreturns a\ndifferent\nerror when\nan invalid\npassword is\nentered.\n297\nChapter 14: Websites and Applications\nFigure 14-11:\nThe Brutus\ntool for test-\ning for weak\nweb logins.\nMost commercial web vulnerability scanners have decent dictionary-based\nweb password crackers but none (that I’m aware of) can do true brute-force\ntesting like Brutus can. As I discuss in Chapter 7, your password-cracking\nsuccess is highly dependent on your dictionary lists. Here are some popular\nsites that house dictionary files and other miscellaneous word lists:\n✓ ftp://ftp.cerias.purdue.edu/pub/dict\n✓ http://packetstormsecurity.org/Crackers/wordlists\n✓ www.outpost9.com/files/WordLists.html\nAcunetix Web Vulnerability Scanner also tests for weak passwords during\nits scans. I’ve successfully used this scanner to uncover weak Outlook Web\nAccess (OWA) passwords that I wouldn’t have found otherwise. Such a finding\noften leads to further penetration of OWA and related systems.\nYou might not need a password-cracking tool at all because many front-end\nweb systems, such as storage management systems and IP video and physical\naccess control systems, simply have the passwords that came on them. These\ndefault passwords are usually “password,” “admin,” or nothing at all. Some\npasswords are even embedded right in the login page’s source code, such as\nthe network camera source code shown in lines 207 and 208 in Figure 14-12.\n298\nPart V: Hacking Applications\nFigure 14-12:\nA network\ncamera’s\nlogin cre-\ndentials\nembedded\ndirectly in\nits HTML\nsource\ncode.\nCountermeasures against\nunsecured login systems\nYou can implement the following countermeasures to prevent people from\nattacking weak login systems in your web applications:\n✓ Any login errors that are returned to the end user should be as generic\nas possible, saying something similar to Your user ID and password\ncombination is invalid.\n✓ The application should never return error codes in the URL that differ-\nentiate between an invalid user ID and an invalid password.\nIf a URL message must be returned, the application should keep it as\ngeneric as possible. Here’s an example:\nwww.your_web_app.com/login.cgi?success=false\nThis URL message might not be convenient to the user, but it helps hide\nthe mechanism and the behind-the-scenes actions from the attacker.\n299\nChapter 14: Websites and Applications\n✓ Use CAPTCHA (also reCAPTCHA) or web login forms to help prevent\npassword-cracking attempts.\n✓ Employ an intruder lockout mechanism on your web server or within\nyour web applications to lock user accounts after 10–15 failed login\nattempts. This chore can be handled via session tracking or via a third-\nparty web application firewall add-on like I discuss in the later section\n“Putting up firewalls.”\n✓ Check for and change any vendor default passwords to something that’s\neasy to remember yet difficult to crack.\nHacking Web 2.0\nWeb 2.0 is changing how the Internet is used. of them have to be analyzed manually. I’m sure\nFrom YouTube to Facebook to Twitter, new that will change as tool vendors improve things.\nserver and client-side technologies, such as\nIn the meantime, here are some valuable tools\nweb services, Ajax, and Flash, are being rolled\nyou can use to test for flaws in your Web 2.0\nout as if they’re going out of style. And these\napplications:\naren’t just consumer technologies. Businesses\nsee the value in them, and developers are ✓ Firefox Web Developer (http://\nexcited to utilize the latest and greatest tech- chrispederick.com/work/\nnologies in their environments. web-developer) for analyzing script\ncode and performing other manual checks.\nUnfortunately, the downside to Web 2.0 is\ncomplexity. These new rich Internet applica- ✓ SWFScan (http://bit.ly/ShyhVz)\ntions, as many call them, are so complex that for decompiling and analyzing Shockwave\ndevelopers, quality assurance analysts, and Flash (.swf) files.\nsecurity managers are struggling to keep up\n✓ WSDigger (www.mcafee.com/us/\nwith all their associated security issues. Don’t\ndownloads/free-tools/ws\nget me wrong, the vulnerabilities in Web 2.0\ndigger.aspx) for analyzing web services.\napplications are very similar to what show up\nwith legacy technologies, such as XSS, SQL ✓ WSFuzzer (www.owasp.org/index.\ninjection, parameter manipulation, and so on. php/Category:OWASP_WSFuzzer_\nThe problem is that automated web vulnerabil- Project) for analyzing web services.\nity scanners aren’t quite mature enough — at\nWeb 2.0 applications are here to stay, so try to get\nleast as of this writing — to find all the security\nyour arms around their security issues now before\nweaknesses that count. When assessing the\nthe technology grows even more complex.\nsecurity of Web 2.0 applications, I find that most\n300\nPart V: Hacking Applications\nPerforming general security scans for\nweb application vulnerabilities\nI want to reiterate that both automated and manual testing need to be per-\nformed against your web systems. You’re not going to see the whole picture\nby relying on just one of these methods. I highly recommend using an all-in-\none web application vulnerability scanner such as WebInspect, Acunetix Web\nVulnerability Scanner, or NTOSpider to help you root out web vulnerabilities\nthat would be unreasonable if not impossible to find otherwise. Combine\nthe scanner results with a malicious mindset and the hacking techniques I\ndescribe in this chapter, and you’re on your way to finding the web security\nflaws that matter.\nMinimizing Web Security Risks\nKeeping your web applications secure requires ongoing vigilance in your\nethical hacking efforts and on the part of your web developers and vendors.\nKeep up with the latest hacks, testing tools, and techniques and let your\ndevelopers and vendors know that security needs to be a top priority for\nyour organization. I discuss getting security buy-in in Chapter 19.\nYou can gain direct hands-on experience testing and hacking web applications\nby using the following resources:\n✓ OWASP WebGoat Project (www.owasp.org/index.php/\nCategory:OWASP_WebGoat_Project)\n✓ Foundstone’s Hacme Tools (www.mcafee.com/us/downloads/\nfree-tools/index.aspx)\nI highly recommended you check them out and get your hands dirty!\nPracticing security by obscurity\nThe following forms of security by obscurity — hiding something from obvi-\nous view using trivial methods — can help prevent automated attacks from\nworms or scripts that are hard-coded to attack specific script types or\ndefault HTTP ports:\n301\nChapter 14: Websites and Applications\n✓ To protect web applications and related databases, use different\nmachines to run each web server, application, and database server.\nThe operating systems on these individual machines should be tested\nfor security vulnerabilities and hardened based on best practices and\nthe countermeasures described in Chapters 11 and 12.\n✓ Use built-in web server security features to handle access controls and\nprocess isolation, such as the application-isolation feature in IIS. This\npractice helps ensure that if one web application is attacked, it won’t\nnecessarily put any other applications running on the same server at risk.\n✓ Use a tool for obscuring your web server’s identity — essentially anony-\nmizing your server. An example is Port 80 Software’s ServerMask (www.\nport80software.com/products/servermask).\n✓ If you’re concerned about platform-specific attacks being carried out\nagainst your web application, you can trick the attacker into thinking the\nweb server or operating system is something completely different. Here\nare a few examples:\n• If you’re running a Microsoft IIS server and applications, you might\nrename all your ASP scripts to have a .cgi extension.\n• If you’re running a Linux web server, use a program such as IP\nPersonality (http://ippersonality.sourceforge.net) to\nchange the OS fingerprint so the system looks like it’s running\nsomething else.\n✓ Change your web application to run on a nonstandard port. Change from\nthe default HTTP port 80 or HTTPS port 443 to a high port number, such\nas 8877, and, if possible, set the server to run as an unprivileged user —\nthat is, something other than system, administrator, root, and so on.\nNever ever rely on obscurity alone; it isn’t foolproof. A dedicated attacker\nmight determine that the system isn’t what it claims to be. Still, even with the\nnaysayers, it can be better than nothing.\nPutting up firewalls\nConsider using additional controls to protect your web systems, including\nthe following:\n✓ A network-based firewall or IPS that can detect and block attacks\nagainst web applications. This includes commercial firewalls and Next-\nGeneration IPSs available from such companies as SonicWall (www.\nsonicwall.com), Check Point (www.checkpoint.com), and Sourcefire\n302\nPart V: Hacking Applications\n(www.sourcefire.com/security-technologies/network-\nsecurity/next-generation-intrusion-prevention-system).\n✓ A host-based web application IPS, such as SecureIIS (www.eeye.com/\nproducts/secureiis-web-server-security) or ServerDefender\n(www.port80software.com/products/serverdefender).\nThese programs can detect web application and certain database attacks\nin real time and cut them off before they have a chance to do any harm.\nAnalyzing source code\nSoftware development is where security holes begin and should end but\nrarely do. If you feel confident in your ethical hacking efforts to this point,\nyou can dig deeper to find security flaws in your source code — things that\nmight never be discovered by traditional scanners and hacking techniques\nbut that are problems nonetheless. Fear not! It’s actually much simpler than\nit sounds. No, you won’t have to go through the code line by line to see\nwhat’s happening. You don’t even need development experience (although it\ndoes help).\nTo do this, you can use a static source code analysis tool, such as those offered\nby Veracode (www.veracode.com) and Checkmarx (www.checkmarx.com).\nCheckmarx’s CxSuite (more specifically CxDeveloper) is a standalone tool\nthat’s reasonably priced and very comprehensive in its testing of both web\napplications and mobile apps.\nAs shown in Figure 14-13, with CxDeveloper, you simply load the Enterprise\nClient, log in to the application (default credentials are admin@cx/admin),\nrun the Create Scan Wizard to point it to the source code and select your\nscan policy, click Next, click Run, and you’re off and running.\nWhen the scan completes, you can review the findings and recommended\nsolutions, as shown in Figure 14-14.\n303\nChapter 14: Websites and Applications\nFigure 14-13:\nUsing\nCxDeveloper\nto do an\nin-depth\nanalysis of\nASP.NET\nsource\ncode.\nFigure 14-14:\nReviewing\nthe results\nof a\nCxDeveloper\nsource code\nanalysis.\n304\nPart V: Hacking Applications\nCxDeveloper is pretty much all you need to analyze and report on vulner-\nabilities in your C#, Java, and mobile source code bundled into one simple\npackage. Checkmarx, like Veracode, also offers a cloud-based source code\nanalysis service. If you can get over any hurdles associated with uploading\nyour source code to a third party in the cloud, these can offer a more efficient\nand mostly hands-free option for source code analysis.\nSource code analysis will often uncover different flaws than traditional web\nsecurity testing. If you want the most comprehensive level of testing, do both.\nThe extra level of checks offered by source analysis is becoming more and\nmore important with mobile apps. These apps are often full of security holes\nthat many newer software developers didn’t learn about in school. I cover\nadditional mobile flaws in Chapter 10.\nThe bottom line with web security is that if you can show your developers\nand quality assurance analysts that security begins with them, you can really\nmake a difference in your organization’s overall information security."
  },
  {
    "input": "What are the key steps and tools for identifying and mitigating database and storage system vulnerabilities in an organization?",
    "summary": "This chapter discusses the importance of securing databases and storage systems, highlighting the risks associated with vulnerabilities in these areas. It covers testing methods, tools for identifying and exploiting weaknesses, and best practices to mitigate security threats. The chapter also emphasizes the need to check for sensitive information in both databases and storage systems, and to use appropriate tools and techniques to ensure data protection.",
    "output": "Chapter 15\nDatabases and Storage Systems\nIn This Chapter\n▶ Testing and exploiting database flaws\n▶ Finding storage weaknesses\n▶ Ferreting out sensitive information\n▶ Countering database and storage abuse\nA\nttacks against databases and storage systems can be very serious\nbecause that’s where “the goods” are located, and the bad guys are\nwell aware of that. These attacks can occur across the Internet or on the\ninternal network when external attackers and malicious insiders exploit any\nnumber of vulnerabilities. These attacks can also occur via the web applica-\ntion through SQL injection.\nDiving into Databases\nDatabase systems, such as Microsoft SQL Server, MySQL, and Oracle, have\nlurked behind the scenes, but their value and their vulnerabilities have finally\ncome to the forefront. Yes, even the mighty Oracle that was once claimed\nto be unhackable is susceptible to similar exploits as its competition. With\nthe slew of regulatory requirements governing database security, hardly any\nbusiness can hide from the risks that lie within because practically every\nbusiness (large and small) uses some sort of database.\nChoosing tools\nAs with wireless, operating systems, and so on, you need good tools if you’re\ngoing to find the database security issues that count. The following are my\nfavorite tools for testing database security:\n✓ Advanced SQL Password Recovery (www.elcomsoft.com/asqlpr.\nhtml) for cracking Microsoft SQL Server passwords\n306\nPart V: Hacking Applications\n✓ Cain & Abel (www.oxid.it/cain.html) for cracking database pass-\nword hashes\n✓ QualysGuard (www.qualys.com) for performing in-depth vulnerability\nscans\n✓ SQLPing3 (www.sqlsecurity.com/downloads) for locating Microsoft\nSQL Servers on the network, checking for blank sa (the default SQL Server\nsystem administrator account) passwords, and performing dictionary\npassword-cracking attacks\nYou can also use exploit tools, such as Metasploit, for your database testing.\nFinding databases on the network\nThe first step in discovering database vulnerabilities is to figure out where\nthey’re located on your network. It sounds funny, but many network admins\nI’ve met aren’t even aware of various databases running in their environ-\nments. This is especially true for the free SQL Server Express database soft-\nware that anyone can download and run on a workstation or test system.\nI can’t tell you how often I find sensitive production data, such as credit card\nand Social Security numbers, being used in test databases that are completely\nwide open to abuse by curious insiders. Using sensitive data in the uncon-\ntrolled areas of development and quality assurance (QA) is a data breach wait-\ning to happen.\nThe best tool I’ve found to discover Microsoft SQL Server systems is\nSQLPing3, shown in Figure 15-1.\nFigure 15-1:\nSQLPing3\ncan find\nSQL Server\nsystems\nand check\nfor missing\nsa account\npasswords.\n307\nChapter 15: Databases and Storage Systems\nA case study in hacking databases\nwith Chip Andrews\nThe Situation application to the database, he could see\nwhether it was an exploitable condition. A\nDuring a routine penetration test, Mr. Andrews\ncommon test that works with Microsoft SQL\nperformed the obligatory Google searches,\nServer databases is to inject a command, such\ndomain name research, operating system fin-\nas WAITFOR DELAY ’00:00:10’, which\ngerprinting, and port scans, but this particular\ncauses the database server to stall for 10 sec-\nwebsite was locked down tight. Moving on\nonds. In an application that normally returns\nto the web-based application running on the\na page in one second or less, a consistent\nsystem, he was immediately confronted with a\n10-second delay is a good indicator that you\nlogin page using SSL-encrypted forms authen-\ncan inject commands into the SQL stream.\ntication. By checking the source of the web\npage, he noticed that a hidden App_Name field Next, Mr. Andrews attempted to use the\nwas being passed to the application whenever Data Thief tool to attack the login page. This\na user attempted to log in to the site. Could it be tool attempts to force the database to use an\nthat the developers might have failed to perform OPENROWSET command to copy data from\nproper input validation on this innocent-looking the target database to Mr. Andrews’s database\nparameter? The hunt was on. located on the Internet. This is usually a very\nefficient way to siphon large amounts of data\nThe Outcome\nfrom vulnerable databases, but in this case, his\nFirst, it was time to assemble the toolkit. At attack was foiled! The database administrator\nthe time of this penetration test, Mr. Andrews at the target had disabled the OPENROWSET\npreferred to use the following: Paros Proxy, functionality by properly configuring the Disable\nAbsinthe, Cain & Abel, Data Thief, and the Adhoc Distributed Queries option.\nMicrosoft SQL Server Management Studio/SQL\nWith diligence as his watchword, Mr. Andrews\nServer (Express Edition), all of which are avail-\npersisted with the next tool — Absinthe. This\nable free. For starters, he used Paros Proxy to\ntool uses a technique called blind SQL injec-\nallow for more control and visibility to the web\ntion to make determinations about data using\nrequests made to the web server. After spider-\nsimple yes or no questions of the database.\ning the site for available pages and performing\nFor example, the tool might ask the database\na quick vulnerability check for SQL injection, it\nwhether the first letter of a table is less than\nwas confirmed that the App_Name parameter\n“L.” If yes, the application might do nothing, but\nappeared to cause the application to throw\nif no, the application might throw an exception.\nan Error 500 exception, indicating an applica-\nUsing this simple binary logic, it is possible to\ntion failure. Penetration tests are one of the\nuse this technique to reveal the entire database\nrare occasions when an application failure is a\nstructure and even the data stored inside —\ndesirable outcome.\nalbeit very slowly. Using the tool, he identified\nBecause the application failure indicated that a table of sensitive customer information and\nMr. Andrews could inject unintended char- downloaded several hundred records to show\nacters into the SQL code being sent from the the client.\n(continued)\n308\nPart V: Hacking Applications\n(continued)\nFinally, it was time to attempt one last act of Would this hacked account use the same pass-\ndatabase dastardliness. First, Mr. Andrews word as the admin account of the web appli-\nloaded the tool called Cain & Abel and set it to cation? Would this password be the same as\nenter sniffing mode. Then, using Paros Proxy the local administrator account on the host?\nand the already identified vulnerable parame- Those were questions for another day. It was\nter, he used the xp_dirtree extended stored time to assemble all the collected data, prepare\nprocedure, which is available to all SQL Server a report for the client, and put the tools away for\ndatabase users, to attempt to show a directory another day.\non his Internet-connected machine using a\nChip Andrews is a co-founder of security\nUniversal Naming Convention (UNC) path. This\nconsulting firm Special Ops Security, Inc.\nforced the target database to actually attempt\nand owner of SQLSecurity.com (www.sql\nto authenticate itself against Mr. Andrews’s\nsecurity.com), which has multiple\nmachine. Because Cain & Abel was listening on\nresources about Microsoft SQL Server security,\nthe wire, it obtained the hash of the challenge\nincluding the SQLPing3 tool. A co-author for\nused to authenticate the exposed file share. By\nseveral books on SQL Server security (Hacking\npassing this hash to the password cracker built\nExposed: Windows Server 2003 and SQL\nin to Cain & Abel, Mr. Andrews would have the\nServer Security, both published by McGraw-\nusername and password of the account under\nHill Osborne) and a Black Hat presenter, Mr.\nwhich the vulnerable SQL Server was running\nAndrews has been promoting SQL Server and\nin just a matter of time (assuming it wasn’t a\napplication security since 1999.\nlocal system account).\nSQLPing3 can discover instances of SQL Server hidden behind personal fire-\nwalls and more — a feature formerly only available in SQLPing2’s sister appli-\ncation SQLRecon.\nIf you have Oracle in your environment, Pete Finnigan has a great list of\nOracle-centric security tools at www.petefinnigan.com/tools.htm that\ncan perform functions similar to SQLPing3.\nCracking database passwords\nSQLPing3 also serves as a nice dictionary-based SQL Server password-\ncracking program. As you can see in Figure 15-1, it checks for blank sa\npasswords by default. Another free tool for cracking SQL Server, MySQL,\nand Oracle password hashes is Cain & Abel, shown in Figure 15-2.\nThe commercial product Elcomsoft Distributed Password Recovery (www.\nelcomsoft.com/edpr.html) can also crack Oracle password hashes.\n309\nChapter 15: Databases and Storage Systems\nFigure 15-2:\nUsing Cain\n& Abel\nto crack\nOracle\npassword\nhashes.\nIf you have access to SQL Server master.mdf files, you can use Elcomsoft’s\nAdvanced SQL Password Recovery (www.elcomsoft.com/asqlpr.html)\nto recover database passwords immediately.\nYou might stumble across some legacy Microsoft Access database files\nthat are password protected as well. No worries: The tool Advanced Office\nPassword Recovery (www.elcomsoft.com/acpr.html) can get you right in.\nAs you can imagine, these password-cracking tools are a great way to dem-\nonstrate the most basic of weaknesses in your database security. One of the\nbest ways to go about proving that there’s a problem is to use Microsoft SQL\nServer 2008 Management Studio Express (www.microsoft.com/en-us/\ndownload/details.aspx?id=7593) to connect to the database systems\nyou now have the passwords for and set up backdoor accounts or browse\naround to see what’s available. In practically every unprotected SQL Server\nsystem I come across, there’s sensitive personal financial or healthcare infor-\nmation available for the taking.\nScanning databases for vulnerabilities\nAs with operating systems and web applications, some database-specific vul-\nnerabilities can be rooted out only by using the right tools. I use QualysGuard\nto find such issues as\n✓ Buffer overflows\n✓ Privilege escalations\n310\nPart V: Hacking Applications\n✓ Password hashes accessible through default/unprotected accounts\n✓ Weak authentication methods enabled\n✓ Database listener log files that can be renamed without authentication\nA great all-in-one commercial database vulnerability scanner for performing\nin-depth database checks — including user rights audits on SQL Server,\nOracle, and so on — is AppDetectivePro (www.appsecinc.com/products/\nappdetective/). AppDetectivePro can be a good addition to your security\ntesting tool arsenal if you can justify the investment.\nMany vulnerabilities can be tested from both an unauthenticated outsider’s\nperspective as well as a trusted insider’s perspective. For example, you can\nuse the SYSTEM account for Oracle to log in, enumerate, and scan the system\n(something that QualysGuard supports). My fingers are crossed that Qualys\nwill eventually support authenticated scans for SQL Server.\nFollowing Best Practices for Minimizing\nDatabase Security Risks\nKeeping your databases secure is actually pretty simple if you do the\nfollowing:\n✓ Run your databases on different machines.\n✓ Check the underlying operating systems for security vulnerabilities. I\ncover operating system exploits for Windows and Linux in Chapters 11\nand 12, respectively.\n✓ Ensure that your databases fall within the scope of patching and system\nhardening.\n✓ Require strong passwords on every database system.\n✓ Use appropriate file and share permissions to keep prying eyes away.\n✓ De-indentify any sensitive production data before it’s used in development\nor QA.\n✓ Check your web applications for SQL injection and related input valida-\ntion vulnerabilities.\n✓ Use a network firewall, such as those available from Fortinet (www.\nfortinet.com) or SonicWALL (www.sonicwall.com), and database-\nspecific controls, such as those available from Pyn Logic (www.pynlogic.\ncom) and Idera (www.idera.com).\n311\nChapter 15: Databases and Storage Systems\n✓ Perform related database hardening and management using a tool such\nas Microsoft Security Compliance Manager (http://technet.\nmicrosoft.com/en-us/library/cc677002.aspx).\n✓ Run the latest version of database server software — especially if your\nbusiness uses Microsoft. The new security features in SQL Server 2008\nR2 and SQL Server 2012 are great advancements toward better database\nsecurity.\nOpening Up about Storage Systems\nAttackers are carrying out a growing number of storage-related hacks.\nHackers use various attack vectors and tools to break into the storage envi-\nronment. (Surely you know what I’m going to say next.) Therefore, you need\nto get to know the techniques and tools yourself and use them to test your\nown storage environment.\nThere are a lot of misconceptions and myths related to the security of such\nstorage systems as Fibre Channel and iSCSI Storage Area Networks (SANs),\nCIFS and NFS-based Network Attached Storage (NAS) systems, and so on.\nMany network and storage administrators believe that “Encryption or RAID\nequals storage security,” “An external attacker can’t reach our storage envi-\nronment,” or “Security is handled elsewhere.” These are all very dangerous\nbeliefs, and I’m confident that more attacks will target critical storage systems.\nAs with databases, practically every business has some sort of network stor-\nage housing sensitive information that it can’t afford to lose. That’s why it’s\nvery important to include both network storage (SAN and NAS systems) and\ntraditional file shares in the scope of your ethical hacking.\nChoosing tools\nThese are my favorite tools for testing storage security:\n✓ FileLocator Pro (www.mythicsoft.com) and Identity Finder (www.\nidentityfinder.com) for seeking sensitive information in unstruc-\ntured files\n✓ LanGuard (www.gfi.com/network-security-vulnerability-\nscanner/) for finding open and unprotected shares\n✓ QualysGuard (www.qualys.com) for performing in-depth vulnerability\nscans\n✓ nmap (http://nmap.org) for port scanning to find live storage hosts\n312\nPart V: Hacking Applications\nFinding storage systems on the network\nTo seek out storage-related vulnerabilities, you have to figure out what infor-\nmation is where. The best way to get rolling is to use a port scanner and, ide-\nally, an all-in-one vulnerability scanner, such as QualysGuard or LanGuard.\nAlso, given that many storage servers have web servers built in, you can\nuse such tools as Acunetix Web Vulnerability Scanner and WebInspect to\nuncover web-based flaws. You can use these vulnerability scanners to gain\ngood insight into areas that need further inspection, such as weak authentica-\ntion, DNS server name pollution, unpatched operating systems, unprotected\nweb servers, and so on.\nA commonly overlooked storage vulnerability is that many storage systems\ncan be accessed from both the de-militarized zone (DMZ) segment and the\ninternal network segment(s). This vulnerability poses risks to both sides of\nthe network. Be sure to manually assess whether you can reach the DMZ from\nthe internal network and vice versa.\nYou can also perform basic file permission and share scans (as outlined in\nChapter 11) in conjunction with a text search tool to uncover sensitive infor-\nmation that everyone on the network should not have access to.\nRooting out sensitive text in network files\nAn important authenticated test to run on your storage systems is to scan\nfor sensitive information stored in readily accessible text files. It’s as simple\nas using a text search utility, such as FileLocator Pro or Effective File Search\n(www.sowsoft.com/search.htm). Alternatively, you can use Windows\nExplorer to scan for sensitive information, but it’s just too slow and cumber-\nsome for my liking.\nYou’ll be amazed at what you come across stored insecurely on users’\nWindows desktops, server shares, and more, such as\n✓ Employee health records\n✓ Customer credit card numbers\n✓ Corporate financial reports\nSuch sensitive information should not only be protected by good business\npractices, but is also governed by state, federal, and international regulations.\nDo your searches for sensitive text while you’re logged in to the local system\nor domain as a regular user — not as an administrator. This will give you a\nbetter view of regular users who have unauthorized access to sensitive files\nand shares that you thought were otherwise secure. When using a basic text\nsearch tool, such as FileLocator Pro, look for the following text strings:\n313\nChapter 15: Databases and Storage Systems\n✓ DOB (for dates of birth)\n✓ SSN (for Social Security numbers)\n✓ License (for driver’s license information)\n✓ Credit or CCV (for credit card numbers)\nDon’t forget about your mobile devices when seeking sensitive, unprotected\ninformation. Everything from laptops to USB drives to external hard drives is\nfair game to the bad guys. A misplaced or stolen system is all it takes to create\na costly data breach.\nThe possibilities for information exposure are endless; just start with the\nbasics and only peek into nonbinary files that you know will have text in\nthem. Limiting your search to these text-based files will save you a ton of\ntime!\n✓ .txt\n✓ .doc and .docx\n✓ .dbf\n✓ .db\n✓ .rtf\n✓ .xls and .xlsx\nAn example of a basic text search using FileLocator Pro is shown in Figure 15-3.\nNote the files found in different locations on the server.\nFigure 15-3:\nUsing\nFileLocator\nPro to\nsearch for\nsensitive\ntext on\nunprotected\nshares.\n314\nPart V: Hacking Applications\nTo speed the process, you can use Identity Finder, a really neat tool designed\nfor the very purpose of scanning storage devices for sensitive, personally\nidentifiable information. It can also search inside binary files such as PDFs.\nFigure 15-4 shows what such a tool can find in just a matter of minutes.\nIdentity Finder has an Enterprise edition that you can use to search network\nsystems and even databases for sensitive information.\nFor a second round of testing, you could perform your searches logged in\nas an administrator. You’re likely to find a lot of sensitive information scat-\ntered about. It seems worthless at first; however, this can highlight sensitive\ninformation stored in places it shouldn’t be or that the network administrator\nshouldn’t have access to.\nTesting is highly dependent on timing, searching for the right keywords, and\nlooking at the right systems on the network. You likely won’t root out every\nsingle bit of sensitive information, but this effort will show you where certain\nproblems are, which will help you to justify the need for stronger access con-\ntrols and better IT and security management processes.\nFigure 15-4:\nUsing\nIdentity\nFinder to\nuncover\nhundreds\nof sensitive\nrecords\non an\nunprotected\nstorage\ndevice.\n315\nChapter 15: Databases and Storage Systems\nFollowing Best Practices for Minimizing\nStorage Security Risks\nLike database security, storage security is not brain surgery. Keeping your\nstorage systems secure is also simple if you do the following:\n✓ Check the underlying operating systems for security vulnerabilities. I\ncover operating system exploits for Windows and Linux in Chapters 11\nand 12.\n✓ Ensure that your network storage (SAN and NAS systems) falls within\nthe scope of patching and system hardening.\n✓ Require strong passwords on every storage management interface.\n✓ Use appropriate file and share permissions to keep prying eyes away.\n✓ Educate your users on where to store sensitive information and the risks\nof mishandling it.\n✓ De-identify any sensitive production data before it’s used in development\nor QA. There are tools made for this specific purpose.\n✓ Use a network firewall, such as those available from Fortinet (www.\nfortinet.com) or SonicWALL (www.sonicwall.com) to ensure only\nthe people and systems that need to access your storage environment\ncan do so and nothing more.\n316\nPart V: Hacking Applications\nPart VI\nEthical Hacking\nAftermath\nIn this part . . .\nN\now that the hard — or at least technical — stuff is\nover with, it’s time to pull everything together, fix\nwhat’s broken, and establish good information security\npractices to help you move forward.\nFirst, this part covers reporting the security\nvulnerabilities you discover to help get management\nbuy-in and hopefully more money in your budget to make\nthings right. This part then covers good practices for\nplugging the security holes within your systems. Finally,\nthis part covers what it takes to manage change within\nyour information systems for long-term success, including\noutsourcing ethical hacking to help ease the burden of\nyour massive to-do list! That’s what working in IT is all\nabout anyway, right?"
  },
  {
    "input": "What are the key factors to consider when prioritizing and documenting security vulnerabilities found during ethical hacking?",
    "summary": "The reporting phase of ethical hacking is crucial as it involves analyzing and documenting security vulnerabilities found during testing. It's important to prioritize vulnerabilities based on their likelihood of exploitation and potential impact on the business. Reports should include key findings, recommendations, and action items to ensure the organization can address the most critical issues effectively. Additionally, the report must be kept secure to prevent unauthorized access by competitors or malicious insiders.",
    "output": "Chapter 16\nReporting Your Results\nIn This Chapter\n▶ Bringing your test data together\n▶ Categorizing vulnerabilities you discover\n▶ Documenting and presenting the results\nI\nf you’re wishing for a break after testing, now isn’t the time to rest on your\nlaurels. The reporting phase of your ethical hacking is one of the most\ncritical pieces. The last thing you want to do is to run your tests, find security\nproblems, and leave it at that. Put your time and effort to good use by thor-\noughly analyzing and documenting what you find to ensure that security vul-\nnerabilities are eliminated and your information is more secure as a result.\nReporting is an essential element of the ongoing vigilance that information\nsecurity and risk management requires.\nEthical hacking reporting includes sifting through all your findings to deter-\nmine which vulnerabilities need to be addressed and which ones don’t really\nmatter. Reporting also includes briefing management or your client on the\nvarious security issues you find, as well as giving specific recommendations\nfor making improvements. You share the information you’ve gathered and\ngive the other parties guidance on where to go from there. Reporting also\nshows that the time, effort, and money invested in the ethical hacking tests\nwere put to good use.\nPulling the Results Together\nWhen you have gobs of test data — from screenshots and manual observa-\ntions you documented to detailed reports generated by the various vulner-\nability scanners you used — what do you do with it all? You need to go\nthrough your documentation with a fine-toothed comb and highlight all the\nareas that stand out. Base your decisions on the following:\n320\nPart VI: Ethical Hacking Aftermath\n✓ Vulnerability rankings from your assessment tools\n✓ Your knowledge as an IT/security professional\n✓ The context of the vulnerability and how it impacts the business\nSo that you can find out more information about the vulnerability, many\nfeature-rich security tools assign each vulnerability a ranking (based on\noverall risk), explain the vulnerability, give possible solutions, and include\nrelevant links to the following: vendor sites, the Common Vulnerabilities\nand Exposures website at http://cve.mitre.org, and the National\nVulnerabilities Database at http://nvd.nist.gov. For further research,\nyou might also need to reference your vendor’s site, other support sites, and\nonline forums to see whether the vulnerability affects your particular system\nand situation. Overall business risk is your main focus.\nIn your final report document, you might want to organize the vulnerabilities\nas shown in the following list:\n✓ Nontechnical findings\n• Social engineering vulnerabilities\n• Physical security vulnerabilities\n• Operational vulnerabilities\n• Other\n✓ Technical findings\n• Network infrastructure\n• Operating systems\n• Firewall rulebases\n• Web systems\n• Database management systems (DBMSs)\n• Mobile devices\nFor further clarity, you can create separate sections in your report for inter-\nnal and external security vulnerabilities.\nPrioritizing Vulnerabilities\nPrioritizing the security vulnerabilities you find is critical because many\nissues might not be fixable, and others might not be worth fixing. You might\nnot be able to eliminate some vulnerabilities because of various technical\n321\nChapter 16: Reporting Your Results\nreasons, and you might not be able to afford to eliminate others. Or, simply\nenough, your business may have a certain level of risk tolerance. Every situ-\nation is different. You need to factor whether the benefit is worth the effort\nand cost. For instance, if you determine that it will cost $30,000 to encrypt\na sales leads database worth $20,000 to the organization, encryption might\nnot make sense. On the other hand, spending a few weeks worth of develop-\nment time to fix cross-site scripting and SQL injection vulnerabilities could\nbe worth a lot of money. The same goes for mobile devices that everyone\nswears contain no sensitive information. You need to study each vulner-\nability carefully, determine the business risk, and weigh whether the issue is\nworth fixing.\nIt’s impossible — or at least not worth trying — to fix every vulnerability that\nyou find. Analyze each vulnerability carefully and determine your worst-case\nscenarios. So you have cross-site request forgery (CSRF) on your printer’s web\ninterface? What’s the business risk? For many security flaws, you’ll likely find\nthe risk is just not there.\nHere’s a quick method to use when prioritizing your vulnerabilities. You can\ntweak this method to accommodate your needs. You need to consider two\nmajor factors for each of the vulnerabilities you discover:\n✓ Likelihood of exploitation: How likely is it that the specific vulnerabil-\nity you’re analyzing will be taken advantage of by a hacker, a malicious\nuser, malware, or some other threat?\n✓ Impact if exploited: How detrimental would it be if the vulnerability\nyou’re analyzing were exploited?\nRefer to The Open Group’s Risk Taxonomy (www.opengroup.org) for more\ninformation on this subject.\nMany people often skip these considerations and assume that every vulner-\nability discovered has to be resolved. Big mistake. Just because a vulnerability\nis discovered doesn’t mean it applies to your particular situation and\nenvironment. If you go in with the mindset that every vulnerability will be\naddressed regardless of circumstances, you’ll waste a lot of unnecessary\ntime, effort, and money, and you can set up your ethical hacking program for\nfailure in the long term. However, be careful not to swing too far in the other\ndirection! Many vulnerabilities don’t appear too serious on the surface but\ncould very well get your organization into hot water if they’re exploited. Dig\nin deep and use some common sense.\nRank each vulnerability, using criteria such as High, Medium, and Low or a\n1-through-5 rating (where 1 is the lowest priority and 5 is the highest) for each\nof the two considerations. Table 16-1 shows a sample table and a representa-\ntive vulnerability for each category.\n322\nPart VI: Ethical Hacking Aftermath\nTable 16-1 Prioritizing Vulnerabilities\nHigh Likelihood Medium Likelihood Low Likelihood\nHigh Sensitive infor- Tape backups taken No admin pass-\nImpact mation stored on offsite that are not word on a SQL\nan unencrypted encrypted and/or Server system\nlaptop password protected\nMedium Unencrypted Missing Windows patch No passwords\nImpact e-mails contain- on internal server that required on sev-\ning sensitive can be exploited using eral Windows\ninformation Metasploit administrator\nbeing sent accounts\nLow Outdated virus Cleaning crew person- Weak SSL\nImpact signatures on a nel gaining unauthor- encryption being\nstandalone PC ized network access exploited on\ndedicated to e-commerce site\nInternet browsing\nThe vulnerability prioritization shown in Table 16-1 is based on the qualita-\ntive method of assessing security risks. In other words, it’s subjective, based\non your knowledge of the systems and vulnerabilities. You can also consider\nany risk ratings you get from your security tools — just don’t rely solely on\nthem, because a vendor can’t provide ultimate rankings of vulnerabilities.\nCreating Reports\nYou may need to organize your vulnerability information into a formal docu-\nment for management or for your client. This is not always the case, but it’s\noften the professional thing to do and shows that you take your work seriously.\nFerret out the critical findings and document them so that other parties can\nunderstand them.\nGraphs and charts are a plus. Screen captures of your findings — especially\nwhen it’s difficult to save the data to a file — can add a nice touch to your\nreports and show tangible evidence that the problem exists.\nDocument the vulnerabilities in a concise, nontechnical manner. Every report\nshould contain the following information:\n✓ Date(s) the testing was performed\n✓ Tests that were performed\n323\nChapter 16: Reporting Your Results\n✓ Summary of the vulnerabilities discovered\n✓ Prioritized list of vulnerabilities that need to be addressed\n✓ Recommendations and specific steps on how to plug the security holes\nfound\nIf it will add value to management or your client (and it often does), you can\nadd a list of general observations around weak business processes, manage-\nment’s support of IT and security, and so on along with recommendations for\naddressing each issue.\nMost people want the final report to include a summary of the findings — not\neverything. The last thing most people want to do is sift through a 5-inch-thick\nstack of papers containing technical jargon that means very little to them.\nMany consulting firms have been known to charge an arm and a leg for this\nvery type of report, but that doesn’t make it the right way to report.\nMany managers and clients like receiving raw data reports from the security\ntools. That way, they can reference the data later if they want but aren’t mired\nin hundreds of hard-copy pages of technical gobbledygook. Just make sure\nyou include the raw data in the Appendix of your report or elsewhere and\nrefer the reader to it.\nYour list of action items in your report might include the following:\n✓ Enable Windows security auditing on all servers — especially for logons\nand logoffs.\n✓ Put a secure lock on the server room’s door.\n✓ Harden operating systems based on strong security practices from the\nNational Vulnerabilities Database (http://nvd.nist.gov), the Center\nfor Internet Security Benchmarks/Scoring Tools (www.cisecurity.\norg), and Network Security For Dummies.\n✓ Harden your wireless access points by using the techniques and recom-\nmendations presented in Hacking Wireless Networks For Dummies.\n✓ Use a cross-cut paper shredder for the destruction of confidential hard-\ncopy information.\n✓ Require strong PINs or passphrases on all mobile devices and force\nusers to change them periodically.\n✓ Install personal firewall/IPS software on all laptops.\n✓ Validate input in all web applications to eliminate cross-site scripting\nand SQL injection.\n✓ Apply the latest vendor patches to the database server.\n324\nPart VI: Ethical Hacking Aftermath\nAs part of the final report, you might want to document employee reactions\nthat you observe when carrying out your ethical hacking tests. For example,\nare employees completely oblivious or even belligerent when you carry out\nan obvious social engineering attack? Does the IT or security staff completely\nmiss technical tip-offs, such as the performance of the network degrading\nduring testing or various attacks appearing in system log files? You can also\ndocument other security issues you observe, such as how quickly IT staff or\nmanager services providers respond to your tests or whether they respond\nat all.\nGuard the final report to keep it secure from people who are not authorized to\nsee it. An ethical hacking report and the associated documentation and files in\nthe hands of a competitor, hacker, or malicious insider could spell trouble for\nthe organization. Here are some ways to prevent this from happening:\n✓ Deliver the report and associated documentation and files only to those\nwho have a business need to know.\n✓ When sending the final report, encrypt all attachments, such as documen-\ntation and test results, using PGP, encrypted Zip format, or secure cloud\nfile-sharing service. Of course, hand delivery is your most secure bet.\n✓ Leave the actual testing steps that a malicious person could abuse out of\nthe report. Answer any questions on that subject as needed."
  },
  {
    "input": "What is the key approach to prioritizing and addressing security vulnerabilities effectively?",
    "summary": "This chapter discusses the importance of addressing security vulnerabilities after testing, focusing on those that are both high impact and high likelihood. It emphasizes the need for proper patching and system hardening to ensure security, and provides recommendations for patch management tools, both commercial and free. Additionally, it highlights the necessity of a layered security approach and reviewing organizational security policies and culture to effectively manage and prevent security threats.",
    "output": "Chapter 17\nPlugging Security Holes\nIn This Chapter\n▶ Determining which vulnerabilities to address first\n▶ Patching your systems\n▶ Looking at security in a new light\nA\nfter you complete your tests, you want to head down the road to\ngreater security. However, you found some security vulnerabilities.\n(I hope not too many serious ones, though!) Plugging these security holes\nbefore a hacker exploits them is going to require a little elbow grease. You\nneed to come up with your game plan and decide which security vulner-\nabilities to address first. A few patches might be in order and possibly even\nsome system hardening. You might want to reevaluate your network design\nand security infrastructure as well. I touch on some of the critical areas in\nthis chapter. You might also want to refer to the fine book Network Security\nFor Dummies by Chey Cobb. Chey does a great job of covering each of these\ntopics in depth.\nTurning Your Reports into Action\nIt might seem that the security vulnerability to address first would be obvious,\nbut it’s often not black and white. When reviewing the vulnerabilities that\nyou find, consider the following variables:\n✓ Whether the vulnerability can be fixed\n✓ How easy the vulnerability is to fix\n✓ How critical the vulnerable system is\n✓ Whether you can take the system offline to fix the problem\n✓ Time, money, and effort involved in purchasing new hardware or software\nor retooling business processes to plug the holes\n326\nPart VI: Ethical Hacking Aftermath\nIn Chapter 16, I cover the basic issues of determining how important and\nhow urgent the security problem is. In fact, I provide real-world examples in\nTable 16-1. You should also look at security from a time-management per-\nspective and address the issues that are both important (high impact) and\nurgent (high likelihood). You don’t want to try to fix the vulnerabilities that\nare just high impact or just high likelihood. You might have some high-impact\nvulnerabilities that, likely, are never exploited. Likewise, you probably have\nsome vulnerabilities with a high likelihood of being exploited that, if they are\nexploited, won’t really make a big difference in your business or your job.\nThis type of human analysis and perspective will help you stand out from\nthe scan and run type assessments than many people perform and keep you\nemployed for some time to come!\nFocus on tasks with the highest payoff first — those that are both high impact\nand high likelihood. Ideally, this will be the minority of your vulnerabilities.\nAfter you plug the most critical security holes, you can go after the less\nimportant and less urgent tasks when time and money permit. For example,\nafter you plug such critical holes as SQL injection in web applications and\nmissing patches on important servers, you might want to reconfigure your\ntape backups with passwords, if not strong encryption, to keep prying eyes\naway in case your backups fall into the wrong hands.\nPatching for Perfection\nDo you ever feel like all you do is patch your systems to fix security vulner-\nabilities? If you answer yes to this question, good for you — at least you’re\ndoing it! If you constantly feel pressure to patch your systems the right way\nbut can’t seem to find time — at least it’s on your radar. Many IT profession-\nals and their managers don’t even think about proactively patching their sys-\ntems until after a breach occurs. If you’re reading this book, you’re obviously\nconcerned about security and are hopefully way past that.\nWhatever you do, whatever tool you choose, and whatever procedures work\nbest in your environment, keep your systems patched! This goes for operating\nsystems, web servers, databases, mobile apps and even firmware on your net-\nwork infrastructure systems.\nPatching is avoidable but inevitable. The only real solution to eliminating the\nneed for patches is developing secure software in the first place, but that’s\nnot going to happen any time soon. A large portion of security incidents can\nbe prevented with some good patching practices, so there’s simply no reason\nnot to have a solid patch management process in place.\n327\nChapter 17: Plugging Security Holes\nPatch management\nIf you can’t keep up with the deluge of security patches for all your systems,\ndon’t despair; you can still get a handle on the problem. Here are my basic\ntenets for applying patches to keep your systems secure:\n✓ Make sure all the people and departments that are involved in applying\npatches on your organization’s systems are on the same page and follow\nthe same procedures.\n✓ Have formal and documented procedures in place for these critical\nprocesses:\n• Obtaining patch alerts from your vendors, including third-party\npatches for Adobe, Java, and so on, which are often overlooked\n• Assessing which patches affect your systems\n• Determining when to apply patches\n✓ Make it policy and have a procedure in place for testing patches before\nyou apply them to your production workstations, and if possible, servers.\nTesting patches after you apply them isn’t as big of a deal on workstations,\nbut servers are a different story. Many patches have “undocumented\nfeatures” and subsequent unintended side effects — believe me, I’ve\nexperienced this before. An untested patch is an invitation for system\n(and job) termination!\nPatch automation\nThe following sections describe the various patch deployment tools you can\nuse to lower the burden of constantly having to keep up with patches.\nCommercial tools\nI recommend a robust patch-automation application, especially if you have\nthese factors involved:\n✓ A large network\n✓ A network with several different operating systems (Windows, Linux,\nand so on)\n✓ A lot of third-party software applications, such as Adobe and Java\n✓ More than a few dozen computers\n328\nPart VI: Ethical Hacking Aftermath\nBe sure to check out these patch-automation solutions:\n✓ IBM Tivoli Endpoint Manager (www.bigfix.com)\n✓ VMware vCenter Protect (www.vmware.com/products/datacenter-\nvirtualization/vcenter-protect/overview.html)\n✓ Ecora Patch Manager (www.ecora.com/ecora/products/patch\nmanager.asp)\n✓ Quest Patch Manager (formerly ScriptLogic Patch Authority Ultimate)\n(www.quest.com/patch-manager/)\n✓ Windows Server Update Services from Microsoft (http://technet.\nmicrosoft.com/en-us/windowsserver/bb332157.aspx)\nThe GFI LanGuard (www.gfi.com/network-security-vulnerability-\nscanner) product that I use in this book can check for patches to apply and\ndeploy.\nFree tools\nUse one of these free tools to help with automated patching:\n✓ Windows Server Update Services (WSUS), found at http://technet.\nmicrosoft.com/en-us/windowsserver/bb332157.aspx\n✓ Windows Update, which is built in to Microsoft Windows operating systems\n✓ Microsoft Baseline Security Analyzer (MBSA), found at www.microsoft.\ncom/technet/security/tools/mbsahome.mspx\n✓ The built-in patching tools for Linux-based systems\nHardening Your Systems\nAfter you patch your systems, you have to make sure your systems are\nhardened (locked down) from the other security vulnerabilities that patches\ncan’t fix. I’ve found that many people stop with patching, thinking their\nsystems are secure, but that’s just not possible. Throughout the years, I’ve\nseen network administrators ignore recommended hardening practices from\nsuch organizations as the National Institute of Standards and Technology\n(NIST) (http://csrc.nist.gov/publications/PubsSPs.html) and the\nCenter for Internet Security (www.cisecurity.org), leaving many security\nholes wide open. However, I’m a true believer that hardening systems from\nmalicious attack is not foolproof, either. Because every system and every\norganization’s needs are different, there is no one-size-fits-all solution, so you\nhave to strike a balance and not rely on any single option too much.\nChey Cobb’s Network Security For Dummies contains many great resources for\nhardening various systems on your network.\n329\nChapter 17: Plugging Security Holes\nPaying the piper\nI was once involved in an incident response After dozens of people spent many hours getting\nproject that involved over 10,000 Windows serv- to the root of the problem, it was determined that\ners and workstations being infected with tar- the IT department had not done what it should’ve\ngeted malware. An advanced persistent threat been doing in terms of patching and hardening its\n(APT) had taken a foothold. The business found systems from the get-go. On top of that, there was\nthe infection early on and thought the IT team a serious communication breakdown between\nhad cleaned it up. Time passed, and they real- IT and other departments, including security, the\nized a year or so later they had not cleaned up help desk, and business operations. It was a case\nthe entire mess. The malware had come back of too little too late that ended up getting a very\nwith a vengeance to the point where their entire large business into a very large bind. The lesson\nnetwork was essentially under surveillance by here is that improperly secured systems can\nforeign, state-sponsored, criminal hackers. create a tremendous burden on your business.\nThis book presents hardening countermeasures that you can implement for\nyour network, computers, and even physical systems and people. I find these\ncountermeasures work the best for the respective systems.\nImplementing at least the basic security practices is critical. Whether install-\ning a firewall on the network or requiring users to have strong passwords —\nyou must do the basics if you want any modicum of security. Beyond patch-\ning, if you follow the countermeasures I document, add the other well-known\nsecurity practices for network systems (routers, servers, workstations, and\nso on) that are freely available on the Internet, and perform ongoing ethical\nhacking tests, you can rest assured that you’re doing your best to keep your\norganization’s information secure.\nAssessing Your Security Infrastructure\nA review of your overall security infrastructure can add oomph to your systems:\n✓ Look at how your network and overall campus are designed. Consider\norganizational issues, such as whether policies are in place, maintained,\nor even taken seriously. Physical issues count as well. Do members of\nmanagement have buy-in on information security and compliance, or do\nthey simply shrug the measure off as an unnecessary expense or barrier\nto conducting business?\n✓ Map your network by using the information you gather from the ethi-\ncal hacking tests in this book. Updating existing documentation is a\nmajor necessity. Outline IP addresses, running services, and whatever\n330\nPart VI: Ethical Hacking Aftermath\nelse you discover. Draw your network diagram — network design and\noverall security issues are a whole lot easier to assess when you can work\nwith them visually. Although I prefer to use a technical drawing program,\nsuch as Visio or Cheops-ng (http://cheops-ng.sourceforge.net),\nto create network diagrams, such a tool isn’t necessary — you can sketch\nyour map on a napkin!\nBe sure to update your diagrams when your network changes.\n✓ Think about your approach to correcting vulnerabilities and increasing\nyour organization’s overall security. Are you focusing all your efforts\non the perimeter and not on a layered security approach? Think about\nhow most convenience stores and banks are protected. Security cam-\neras focus on the cash registers, teller computers, and surrounding\nareas — not just on the parking lot or entrances. Look at security from\na defense in-depth perspective. Make sure that several layers of security\nare in place in case one measure fails, so the malicious attacker must go\nthrough other barriers to carry out a successful hack attack.\n✓ Think about security policies and procedures at an organizational\nlevel. Document what security policies and procedures are in place and\nwhether they’re effective. Look at the overall security culture within\nyour organization and see what it looks like from an outsider’s perspec-\ntive. What would customers or business partners think about how your\norganization treats their sensitive information?\nLooking at your security from a high-level and nontechnical perspective gives\nyou a new outlook on security holes. It takes some time and effort at first,\nbut after you establish a baseline of security, it’s much easier to manage new\nthreats and vulnerabilities."
  },
  {
    "input": "What are the key considerations when outsourcing ethical hacking and managing security processes in an organization?",
    "summary": "Managing information security requires ongoing efforts beyond just applying patches and conducting periodic ethical hacking tests. Automation can help with many security tests, but certain tasks still need human involvement. Outsourcing security monitoring and testing to trusted third-party providers can be beneficial, but it's important to ensure they are reliable and aligned with your organization's needs. Establishing a security-aware culture through training and awareness programs is also crucial for long-term success.",
    "output": "Chapter 18\nManaging Security Processes\nIn This Chapter\n▶ Automating tasks\n▶ Watching for misbehavior\n▶ Outsourcing testing\n▶ Keeping security on everyone’s mind\nI\nnformation security is an ongoing process that you must manage effec-\ntively to be successful. This management goes beyond periodically applying\npatches and hardening systems. Performing your ethical hacking tests\nrepeatedly is critical; information security threats and vulnerabilities emerge\nconstantly. To put it another way, ethical hacking tests are just a snapshot of\nyour overall information security, so you have to perform your tests continu-\nally to keep up with the latest security issues. Ongoing vigilance is required\nnot only for compliance with various laws and regulations but also for mini-\nmizing business risks related to your information systems.\nAutomating the Ethical-Hacking Process\nYou can run a large portion of the following ethical hacking tests in this book\nautomatically:\n✓ Ping sweeps and port scans to show what systems are available and\nwhat’s running\n✓ Password-cracking tests to attempt access to external web applications,\nremote access servers, and so on\n✓ Vulnerability scans to check for missing patches, misconfigurations, and\nexploitable holes\n✓ Exploitation of vulnerabilities (to an extent, at least)\n332\nPart VI: Ethical Hacking Aftermath\nYou must have the right tools to automate the following tests:\n✓ Some commercial tools can set up periodic assessments and create nice\nreports for you without any hands-on intervention — just a little setup and\nscheduling time up front. This is why I like many of the commercial —\nand mostly automated — security testing tools, such as QualysGuard\nand WebInspect. The automation you get from these tools often helps\njustify the price, especially because you don’t have to be up at 2:00 a.m.\nor on call 24 hours a day to monitor the testing.\n✓ Standalone security tools, such as Nmap, John the Ripper, and\nNetstumbler, aren’t enough. You can use the Windows Task Scheduler\nand AT commands on Windows systems and cron jobs on Linux-based\nsystems, but manual steps and human intellect are still required.\nLinks to these tools are located in the Appendix.\nCertain tests and phases, such as enumeration of new systems, various web\napplication tests, social engineering, and physical security walkthroughs, can’t\nbe set on autopilot. You have to be involved.\nEven the smartest computer “expert system” can’t accomplish some security\ntests. Good security requires both technical expertise, experience, and good\nold-fashioned common sense.\nMonitoring Malicious Use\nMonitoring security-related events is essential for ongoing security efforts.\nThis can be as basic and mundane as monitoring log files on routers, fire-\nwalls, and critical servers every day. Advanced monitoring might include\nimplementing a correlation security incident management system to monitor\nevery little thing that’s happening in your environment. A common method\nis to deploy an intrusion prevention system (IPS) or data leakage prevention\n(DLP) system and monitor for malicious behavior.\nThe problem with monitoring security-related events is that humans find it\nvery boring and very difficult to do effectively. Each day, you could dedicate\na time — such as first thing in the morning — to checking your critical log\nfiles from the previous night or weekend to ferret out intrusions and other\ncomputer and network security problems. However, do you really want to\nsubject yourself or someone else to that kind of torture?\nHowever, manually sifting through log files probably isn’t the best way to\nmonitor the system. Consider the following drawbacks:\n333\nChapter 18: Managing Security Processes\n✓ Finding critical security events in system log files is difficult, if not\nimpossible. It’s just too tedious a task for the average human to accom-\nplish effectively.\n✓ Depending on the type of logging and security equipment you use, you\nmight not even detect some security events, such as intrusion detection\nsystem (IDS) evasion techniques and hacks coming into allowed ports\non the network.\nInstead of panning through all your log files for hard-to-find intrusions, here’s\nwhat I recommend:\n✓ Enable system logging where it’s reasonable and possible. You don’t\nnecessarily need to capture all computer and network events, but you\nshould definitely look for certain obvious ones, such as login failures,\nmalformed packets, and unauthorized file access.\n✓ Log security events using syslog or another central server on your net-\nwork. Do not keep logs on the local host, if possible, to help prevent the\nbad guys from tampering with log files to cover their tracks.\nThe following are a couple of good solutions to the security-monitoring dilemma:\n✓ Purchase an event-logging system. A few low-priced yet effective\nsolutions are available, such as GFI EventsManager (www.gfi.com/\neventsmanager). Typically, lower-priced event-logging systems usually\nsupport only one OS platform — Microsoft Windows is the most common.\nHigher-end solutions, such as HP ArcSight Logger (www.hpenterprise\nsecurity.com/products/hp-arcsight-security-intelligence/\nhp-arcsight-logger), offer both log management across various plat-\nforms and event correlation to help track down the source of security\nproblems and the various systems affected during an incident.\n✓ Outsource security monitoring to a third-party managed security\nservices provider (MSSP) in the cloud. Dozens of MSSPs were around\nduring the Internet boom, but only a few strong ones remain, such as\nBT’s Assure managed service (www.globalservices.bt.com/uk/\nen/solutions/monitor_my_network_security), Dell SecureWorks\n(www.secureworks.com) and Alert Logic (www.alertlogic.com).\nNow considered cloud service providers, the value in outsourcing security\nmonitoring is that these companies often have facilities and tools that\nyou would likely not be able to afford and maintain. They also have ana-\nlysts working around the clock and have the security experiences and\nknowledge they gain from other customers to share with you.\nWhen these cloud service providers discover a security vulnerability or\nintrusion, they can usually address the issue immediately, often without\nyour involvement. I recommend at least checking whether third-party\n334\nPart VI: Ethical Hacking Aftermath\nfirms and their services can free some of your time and resources so\nthat you can focus on other things. Just don’t depend solely on their\nmonitoring efforts; a cloud service provider may have trouble catching\ninsider abuse, social engineering attacks, and web application hacks\nover Secure Sockets Layer (SSL). You still need to be involved.\nOutsourcing Ethical Hacking\nOutsourcing ethical hacking is very popular and a great way for organiza-\ntions to get an unbiased third-party perspective of their information security.\nOutsourcing allows you to have a checks-and-balances system that clients,\nbusiness partners, auditors, and regulators like to see.\nOutsourcing ethical hacking can be expensive. Many organizations spend\nthousands of dollars — often tens of thousands — depending on the testing\nneeded. However, doing all this yourself isn’t cheap — and quite possibly it\nisn’t as effective, either!\nA lot of confidential information is at stake, so you must trust your outside\nconsultants and vendors. Consider the following questions when looking for\nan independent expert or vendor to partner with:\n✓ Is your ethical-hacking provider on your side or a third-party vendor’s\nside? Is the provider trying to sell you products, or is the provider\nvendor neutral? Many providers might try to make a few more dollars\noff the deal, which might not be necessary for your needs. Just make\nsure that these potential conflicts of interest aren’t bad for your budget\nand your business.\n✓ What other IT or security services does the provider offer? Does the\nprovider focus solely on security? Having an information security spe-\ncialist do this testing for you is often better than working with an IT gen-\neralist organization. After all, would you hire a general corporate lawyer\nto help you with a patent, a general family practitioner to perform sur-\ngery, or a computer technician to rewire your house?\n✓ What are your provider’s hiring and termination policies? Look for\nmeasures the provider takes to minimize the chances that an employee\nwill walk off with your sensitive information.\n✓ Does the provider understand your business needs? Have the provider\nrepeat the list of your needs and put them in writing to make sure you’re\nboth on the same page.\n✓ How well does the provider communicate? Do you trust the provider\nto keep you informed and follow up with you in a timely manner?\n335\nChapter 18: Managing Security Processes\n✓ Do you know exactly who will perform the tests? Will one person do\nthe testing, or will subject-matter experts focus on the different areas?\n(This isn’t a deal breaker but is nice to know.)\n✓ Does the provider have the experience to recommend practical and\neffective countermeasures to the vulnerabilities found? The provider\nshouldn’t just hand you a think report and say, “Good luck with all that!”\nYou need realistic solutions.\n✓ What are the provider’s motives? Do you get the impression that the\nprovider is in business to make a quick buck off the services, with mini-\nmal effort and value added, or is the provider in business to build loyalty\nwith you and establish a long-term relationship?\nFinding a good organization to work with long term will make your ongoing\nefforts much simpler. Ask for several references and sample sanitized deliver-\nables (that is, reports that don’t contain sensitive information) from potential\nproviders. If the organization can’t produce these without difficulty, look for\nanother provider.\nYour provider should have its own service agreement for you that includes a\nmutual nondisclosure statement. Make sure you both sign this to help\nprotect your organization.\nThinking about hiring a reformed hacker?\nFormer hackers — I’m referring to the black-hat information your organization possesses. If\nhackers who have hacked into computer sys- this information gets into the wrong hands —\ntems in the past — can be very good at what even ten years down the road — it could\nthey do. Many people swear by hiring reformed be used against your organization. Some\nhackers to do ethical hacking. Others compare hackers and reformed criminals hang out\nthis to hiring the proverbial fox to guard the hen in tight social groups. You might not want\nhouse. If you’re thinking about bringing in a your information shared in their circles.\nformer unethical hacker to test your systems,\nThat said, everyone deserves a chance to\nconsider these issues:\nexplain what happened in the past. Zero toler-\n✓ Do you really want to reward malicious ance is senseless. Listen to his or her story and\nbehavior with your organization’s business? use common-sense discretion as to whether\nyou trust the person to help you. The supposed\n✓ Claiming to be reformed doesn’t mean he or\nblack-hat hacker actually might have been\nshe is. There could be deep-rooted psycho-\na gray-hat hacker or a misguided white-hat\nlogical issues or character flaws you’re going\nhacker who fits well in your organization.\nto have to contend with. Buyer beware!\n✓ Information gathered and accessed during\nethical hacking is some of the most sensitive\n336\nPart VI: Ethical Hacking Aftermath\nInstilling a Security-Aware Mindset\nYour network users are often your first and last line of defense. Make sure\nyour ethical hacking efforts and the money spent on your information secu-\nrity initiatives aren’t wasted because a simple employee slip-up gave a mali-\ncious attacker the keys to the kingdom.\nThe following elements can help establish a security-aware culture in your\norganization:\n✓ Make security awareness and training an active and ongoing process\namong all employees and users on your network, including manage-\nment and contractors. One-time training such as when employees are\ninitially hired is not enough. Awareness and training must be periodic\nand consistent to ensure your security messages are kept at the top of\npeople’s minds.\n✓ Treat awareness and training programs as a long-term business\ninvestment.\nSecurity awareness programs don’t have to be expensive. You can buy\nposters, mouse pads, screen savers, pens, and sticky notes to help\nkeep security on everyone’s mind. Some creative solutions vendors are\nGreenidea, Inc. (www.greenidea.com), Security Awareness, Inc. (www.\nsecurityawareness.com), and The Security Awareness Company\n(www.thesecurityawarenesscompany.com).\n✓ Get the word on security out to management! If you keep members of\nmanagement in the dark on what you’re doing, they’ll likely never be on\nyour side. I cover getting security buy-in in Chapter 19.\n✓ Align your security message with your audience and keep it as non-\ntechnical as possible. The last thing you want to do is unload a bunch\nof geek speak onto people who have no clue what you’re talking about.\nYou’ll end up with opposite the desired effort you’re going for. Put\nyour messages in terms of each group you’re speaking to: how security\nimpacts them and how they can help.\n✓ Lead by example. Show that you take security seriously and offer evi-\ndence that helps prove that everyone else should, too.\nIf you can get the ear of management and users and put forth enough effort to\nmake security a priority day after day, you can help shape your organization’s\nculture. This can provide security value beyond your wildest imagination.\nI’ve seen the difference it makes!\n337\nChapter 18: Managing Security Processes\nKeeping Up with Other Security Efforts\nEthical hacking isn’t the be-all and end-all solution to information security.\nIt will not guarantee security, but it’s certainly a great start. Ethical hacking\nmust be integrated as part of an overall information security program that\nincludes\n✓ Higher-level information risk assessments\n✓ Strong security policies and standards that are enforced and properly\nadhered to\n✓ Solid incident response and business continuity plans\n✓ Effective security awareness and training initiatives\nThese efforts might require hiring more staff or outsourcing more security\nhelp as well.\nDon’t forget about formal training for yourself and any colleagues who are\nhelping you. You have to educate yourself consistently to stay on top of the\nsecurity game.\n338\nPart VI: Ethical Hacking Aftermath\nPart VII\nThe Part of Tens\nIn this part . . .\nW\nell, here’s the end of the road, so to speak. In this\npart, I’ve compiled top-ten lists of what I believe\nare the absolute critical success factors to make ethical\nhacking — and information security in general — work in\nany organization. Bookmark, dog-ear, or do whatever you\nneed to do with these pages so you can refer to them over\nand over again. This is the meat of what you need to know\nabout information security, compliance, and managing\ninformation risks — even more so than the technical\nhacks and countermeasures I’ve covered thus far. Read it,\nstudy it, and make it happen. You can do it!\nIn addition, the Appendix contains a listing of my favorite\nethical hacking tools and resources that I’ve covered,\nbroken down into various categories for easy reference."
  },
  {
    "input": "What are the key strategies for effectively gaining upper management support for ethical hacking initiatives?",
    "summary": "To get upper management buy-in for ethical hacking, you should cultivate an ally and sponsor who understands the value of information security. Avoid spreading fear and uncertainty, instead focus on educating management with data and real-world examples to show the potential costs of being hacked. Highlight the benefits of ethical hacking, such as finding security vulnerabilities and meeting compliance requirements, and demonstrate how it can help the organization save money and protect its reputation. Be flexible and adaptable, start small, and focus on providing business value through your efforts.",
    "output": "Chapter 19\nTen Tips for Getting Upper\nManagement Buy-In\nD\nozens of key steps exist for obtaining the buy-in and sponsorship that\nyou need to support your ethical hacking efforts. In this chapter, I\ndescribe the ones that I find are the most effective.\nCultivate an Ally and a Sponsor\nSelling ethical hacking and information security to management isn’t something\nyou want to tackle alone. Get an ally — preferably your direct manager or\nsomeone at that level or higher in the organization. Choose someone who\nunderstands the value of ethical hacking as well as information security in\ngeneral. Although this person might not be able to speak for you directly,\nshe can be seen as an unbiased third-party sponsor and can give you more\ncredibility.\nDon’t Be a FUDdy Duddy\nSherlock Holmes said, “It is a capital mistake to theorize before one has\ndata.” To make a good case for information security and the need for ethical\nhacking, support your case with relevant data. However, don’t blow stuff out\nof proportion for the sake of stirring up fear, uncertainty, and doubt (FUD).\nManagers worth their salt can see right through that. Focus on educating\nmanagement with practical advice. Rational fears proportional to the threat\nare fine. Just don’t take the Chicken Little route, claiming that the sky is\nfalling with everything all the time.\n342\nPart VII: The Part of Tens\nDemonstrate How the Organization\nCan’t Afford to Be Hacked\nShow how dependent the organization is on its information systems. Create\nwhat-if scenarios — sort of a business impact assessment — to show what\ncan happen, how the organization’s reputation can be damaged, and how\nlong the organization can go without using the network, computers, and\ndata. Ask upper-level managers what they would do without their computer\nsystems and IT personnel — or what they’d do if sensitive business or client\ninformation was compromised. Show real-world anecdotal evidence of hacker\nattacks, including malware, physical security, and social engineering issues,\nbut be positive about it. Don’t approach management negatively with FUD.\nRather, keep them informed on serious security happenings. To help manage-\nment relate, find stories regarding similar businesses or industries. (A good\nresource is the Privacy Rights Clearinghouse listing, Chronology of Data\nBreaches, at www.privacyrights.org/data-breach.) Clip magazine\nand newspaper articles as well. Let the facts speak for themselves.\nGoogle is a great tool to find practically everything you need regarding\ninformation security breaches.\nShow management that the organization does have what a hacker wants. A\ncommon misconception among those ignorant about information security\nthreats and vulnerabilities is that their organization or network is not really\nat risk. Be sure to point out the potential costs from damage caused by\nhacking:\n✓ Missed opportunity costs\n✓ Exposure of intellectual property\n✓ Liability issues\n✓ Legal costs and judgments\n✓ Compliance-related fines\n✓ Lost productivity\n✓ Clean-up time and incident response costs\n✓ Replacement costs for lost, exposed, or damaged information or\nsystems\n✓ Costs of fixing a tarnished reputation\n343\nChapter 19: Ten Tips for Getting Upper Management Buy-In\nOutline the General Benefits\nof Ethical Hacking\nIn addition to the potential costs listed in the preceding section, talk about\nhow proactive testing can help find security vulnerabilities in information\nsystems that normally might be overlooked. Tell management that information\nsecurity testing in the context of ethical hacking is a way of thinking like the\nbad guys so that you can protect yourself from the bad guys — the “know\nyour enemy” mindset from Sun Tzu’s The Art of War.\nShow How Ethical Hacking Specifically\nHelps the Organization\nDocument benefits that support the overall business goals:\n✓ Demonstrate how security can be inexpensive and can save the\norganization money in the long run.\n• Security is much easier and cheaper to build up front than to add\non later.\n• Security doesn’t have to be inconvenient and can enable\nproductivity if it’s done properly.\n✓ Discuss how new products or services can be offered for a competitive\nadvantage if secure information systems are in place.\n• State and federal privacy and security regulations are met.\n• Business partner and customer requirements are satisfied.\n• Managers and the company come across as business worthy.\n• Ethical hacking and the appropriate remediation process show\nthat the organization is protecting sensitive customer and\nbusiness information.\n✓ Outline the compliance benefits of in-depth security testing.\n344\nPart VII: The Part of Tens\nGet Involved in the Business\nUnderstand the business — how it operates, who the key players are, and\nwhat politics are involved:\n✓ Go to meetings to see and be seen. This can help prove that you’re\nconcerned about the business.\n✓ Be a person of value who’s interested in contributing to the business.\n✓ Know your opposition. Again, use the “know your enemy” mentality —\nif you understand the people you’re dealing with, along with their\npotential objections, buy-in is much easier to get.\nEstablish Your Credibility\nFocus on these three characteristics:\n✓ Be positive about the organization and prove that you really mean\nbusiness. Your attitude is critical.\n✓ Empathize with managers and show them that you understand the\nbusiness side and what they’re up against.\n✓ To create any positive business relationship, you must be trustworthy.\nBuild that trust over time, and selling security will be much easier.\nSpeak on Management’s Level\nAs cool as it sounds, no one is really that impressed with techie talk. Talk in\nterms of the business. This key element of obtaining buy-in is actually part of\nestablishing your credibility, but deserves to be listed by itself.\nI’ve seen countless IT and security professionals lose upper-level managers as\nsoon as they start speaking. A megabyte here; stateful inspection there; packets,\npackets everywhere! Bad idea. Relate security issues to everyday business\nprocesses and job functions. Period.\n345\nChapter 19: Ten Tips for Getting Upper Management Buy-In\nShow Value in Your Efforts\nHere’s where the rubber meets the road. If you can demonstrate that what\nyou’re doing offers business value on an ongoing basis, you can maintain a\ngood pace and not have to constantly plead to keep your ethical hacking\nprogram going. Keep these points in mind:\n✓ Document your involvement in IT and information security, and\ncreate ongoing reports for management regarding the state of security\nin the organization. Give management examples of how the organization’s\nsystems will be secured from attacks.\n✓ Outline tangible results as a proof of concept. Show sample vulnerability\nassessment reports you’ve run on your systems or from the security\ntool vendors.\n✓ Treat doubts, concerns, and objections by upper management as\nrequests for more information. Find the answers and go back armed\nand ready to prove your ethical-hacking worthiness.\nBe Flexible and Adaptable\nPrepare yourself for skepticism and rejection at first. It happens a lot,\nespecially from upper-level managers such as CFOs and CEOs, who are often\ncompletely disconnected from IT and security in the organization. A middle\nmanagement structure that lives to create complexity is a party to the\nproblem as well.\nDon’t get defensive. Security is a long-term process, not a short-term product\nor single assessment. Start small — use a limited amount of resources, such\nas budget, tools, and time, and then build the program over time.\nStudies have found that new ideas presented casually and without pressure\nare considered and have a higher rate of acceptance than ideas that are\nforced on people under a deadline. Just as with a spouse or colleagues at\nwork, if you focus on and fine tune your approach — at least as much as you\nfocus on the content of what you’re going to say — you can often get people\non your side, and in return, get a lot more accomplished.\n346\nPart VII: The Part of Tens"
  },
  {
    "input": "Why is ethical hacking considered the most effective way to test an organization's security?",
    "summary": "Ethical hacking is the most effective way to identify real security vulnerabilities in an organization. It helps businesses stay ahead of attackers by using the latest tools and methods, ensuring compliance with regulations, and improving overall security understanding. Additionally, ethical hacking can uncover long-overlooked weaknesses in IT operations and provide a fallback in case of a breach.",
    "output": "Chapter 20\nTen Reasons Hacking Is the Only\nEffective Way to Test\nE\nthical hacking is not just for fun or show. For numerous business\nreasons, ethical hacking is the only effective way to find the security\nvulnerabilities that matter in your organization.\nThe Bad Guys Think Bad Thoughts, Use\nGood Tools, and Develop New Methods\nIf you’re going to keep up with external attackers and malicious insiders,\nyou have to stay current on the latest attack methods and tools that they’re\nusing. I cover some of the latest tricks, techniques, and tools in Chapter 10\n(mobile) and Chapter 14 (websites and applications).\nIT Governance and Compliance Are More\nThan High-Level Checklist Audits\nWith all the government laws and industry regulations in place, your business\nlikely doesn’t have a choice in the security matter. The problem is that being\ncompliant with these laws and regulations doesn’t automatically mean you’re\nsecure. PCI DSS comes to mind. You have to take off the checklist audit\nblinders. Using ethical hacking tools and techniques enables you to dig\ndeeper into your business’s true vulnerabilities.\n348\nPart VII: The Part of Tens\nEthical Hacking Complements Audits\nand Security Evaluations\nNo doubt, someone in your organization understands higher-level security\naudits better than this ethical hacking stuff. However, if you can sell that\nperson on ethical hacking and integrate it into existing security initiatives\n(such as internal audits and compliance spot checks), the auditing process\ncan go much deeper and improve your outcomes. Everyone wins.\nClients and Partners Will Ask, “How\nSecure Are Your Systems?”\nMany businesses now require in-depth security assessments of their business\npartners. The same goes for certain clients. The bigger companies might\nwant to know how secure their information is on your network. The only way\nto definitively know where things stand is to use the methods and tools I\ncover in this book.\nThe Law of Averages Works\nagainst Businesses\nInformation systems are becoming more complex by the day. Literally. It’s\njust a matter of time before these complexities work against you and in the\nbad guys’ favor. A criminal hacker needs to find only one flaw to be successful\nin his efforts. Security professionals have to find them all. If you’re going to\nstay informed and ensure that your critical business systems and the sensi-\ntive information they process and store stay secure, you have to look at\nthings with a malicious mindset.\n349\nChapter 20: Ten Reasons Hacking Is the Only Effective Way to Test\nEthical Hacking Improves Understanding\nof Business Threats\nYou can say passwords are weak or patches are missing, but actually\nexploiting such flaws and showing the outcome are quite different matters.\nThere’s no better way to prove there’s a problem and motivate management\nto do something about it than by showing the outcomes of ethical hacking.\nIf a Breach Occurs, You Have\nSomething to Fall Back On\nIn the event a malicious insider or external attacker still breaches your\nsecurity, your business is sued, or your business falls out of compliance with\nlaws or regulations, the management team can at least demonstrate that it\nwas performing due diligence to uncover security risks on a periodic and\nconsistent basis. A related area that can be problematic is knowing about a\nproblem and not fixing it. The last thing you need is a lawyer and his expert\nwitness pointing out how your business was lax in the area of information\nsecurity testing or follow-through.\nEthical Hacking Brings Out\nthe Worst in Your Systems\nSomeone walking around with a checklist can find security “best practices”\nyou’re missing, but he isn’t going to find most of the in-depth security flaws\nthat ethical hacking is going to uncover. You know, the ones that can get you\ninto the worst trouble. Ethical hacking brings out the warts and all.\n350\nPart VII: The Part of Tens\nEthical Hacking Combines the Best\nof Penetration Testing and\nVulnerability Assessments\nPenetration testing is rarely enough to find everything in your systems\nbecause the scope of traditional penetration testing is simply too limited. The\nsame goes for vulnerability assessments that mostly involve security scans.\nEthical hacking combines the best of both and gets you the most bang for\nyour buck.\nEthical Hacking Can Uncover\nWeaknesses That Might Go\nOverlooked for Years\nEthical hacking not only uncovers technical, physical, and human weaknesses,\nbut it can also reveal problems with IT and security operations, such as\npatch management, change management, and lack of awareness, which may\nnot be found otherwise."
  },
  {
    "input": "What are the ten deadly mistakes that can negatively impact ethical hacking outcomes and a professional's career?",
    "summary": "This chapter outlines ten deadly mistakes in ethical hacking that can negatively impact outcomes and career prospects. It emphasizes the importance of getting prior approval, staying realistic, and focusing on the most critical systems. Additionally, it highlights the need to use appropriate tools, avoid testing production systems at the wrong time, and remain involved when outsourcing security testing.",
    "output": "Chapter 21\nTen Deadly Mistakes\nS\neveral deadly mistakes can wreak havoc on your ethical hacking\noutcomes and even your career. In this chapter, I discuss the potential\npitfalls to be keenly aware of.\nNot Getting Prior Approval\nGetting documented approval in advance, such as an e-mail, an internal\nmemo, or a formal contract for your ethical hacking efforts — whether it’s\nfrom management or from your client — is an absolute must. It’s your Get\nOut of Jail Free card.\nAllow no exceptions here — especially when you’re doing work for clients:\nMake sure you get a signed copy of this document for your files and for your\nlawyer.\nAssuming That You Can Find All\nVulnerabilities during Your Tests\nSo many security vulnerabilities exist — known and unknown — that you\nwon’t find them all during your testing. Don’t make any guarantees that you’ll\nfind all the security vulnerabilities in a system. You’ll be starting something\nthat you can’t finish.\nIf you did well studying probability and statistics in high school or college,\nyou may consider putting together some confidence intervals to show what\nyou truly expect to find.\n352\nPart VII: The Part of Tens\nStick to the following tenets:\n✓ Be realistic.\n✓ Use good tools.\n✓ Get to know your systems and practice honing your techniques.\nI cover each of these in various depths in Chapters 5 through 15.\nAssuming That You Can Eliminate\nAll Security Vulnerabilities\nWhen it comes to computers, 100 percent, ironclad security is not attainable.\nYou can’t possibly prevent all security vulnerabilities, but you’ll do fine if you\nuncover the low-hanging fruit and accomplish these tasks:\n✓ Follow solid practices.\n✓ Patch and harden your systems.\n✓ Apply reasonable (cost-justified) security countermeasures.\nMany chapters, such as the operating system chapters in Part IV, cover these\nareas. It’s also important to remember that you’ll have unplanned costs.\nYou may find lots of security problems and will need the budget to plug the\nholes. Otherwise, you may have gotten over the due diligence hurdle but now\nhave a due care problem on your hands. This is why you need to approach\ninformation security from a risk perspective and have all the right people on\nboard.\nPerforming Tests Only Once\nEthical hacking is a snapshot of your overall state of security. New threats\nand vulnerabilities surface continually, so you must perform these tests\nperiodically and consistently to make sure you keep up with the latest security\ndefenses for your systems. Develop both short- and long-term plans for\ncarrying out your security tests over the next few months and next few years.\n353\nChapter 21: Ten Deadly Mistakes\nThinking That You Know It All\nEven though some in the field of IT would beg to differ, no one working with\ncomputers or information security knows it all. Keeping up with all the software\nversions, hardware models, and emerging technologies, not to mention the\nassociated security threats and vulnerabilities, is impossible. True information\nsecurity professionals know their limitations — that is, what they don’t know.\nHowever, they do know where to get answers. (Hint: Try finding it on Google\nor Bing.)\nRunning Your Tests without Looking at\nThings from a Hacker’s Viewpoint\nThink about how a malicious outsider or rogue insider can attack your\nnetwork and computers. Get a fresh perspective and try to think outside the\nproverbial box.\nStudy criminal and hacker behaviors and common hack attacks so you know\nwhat to test for. I’m continually blogging about this subject at http://\nsecurityonwheels.com/blog. Trade magazines such as Hackin9\n(http://hackin9.org) and 2600 (www.2600.com) are good resources\nas well.\nNot Testing the Right Systems\nFocus on the systems and operations that matter most. You can hack away\nall day at a standalone desktop running MS-DOS from a 51⁄-inch floppy\n4\ndisk with no network card and no hard drive, but does that do any good?\nProbably not. But you never know. Your biggest risks might be on the\nseemingly least critical system. Focus on what’s urgent and important.\n354\nPart VII: The Part of Tens\nNot Using the Right Tools\nWithout the right tools for the task, getting anything done without driving\nyourself nuts is impossible. Download the free tools I mention throughout\nthis book and in the Appendix. Buy commercial tools when you can —\nthey’re usually worth every penny. No security tool does it all, though.\nBuilding your toolbox and getting to know your tools well will save you gobs\nof effort, and you’ll impress others with your results.\nPounding Production Systems\nat the Wrong Time\nOne of the best ways to tick off your manager or lose your customer’s trust is\nto run hack attacks against production systems when everyone is using them.\nIf you try to test a system at the wrong time, expect that critical systems may\ngo down at the absolute worst moment. Make sure you know the best time\nto perform your testing. It might be in the middle of the night. (I never said\ninformation security testing was easy!) This might be reason to justify using\nsecurity tools and other supporting utilities that can help automate certain\nethical hacking tasks.\nOutsourcing Testing and\nNot Staying Involved\nOutsourcing is great, but you must stay involved throughout the entire process.\nDon’t hand over the reins of your security testing to a third-party individual\nor a cloud services provider without following up and staying on top of\nwhat’s taking place. You won’t be doing your manager or customers a favor\nby staying out of the third-party vendors’ hair. Get in their hair. (But not like\na piece of chewing gum — that just makes everything more difficult.) Ask for\nvulnerability scan reports, formal security assessment reports, and anything\nelse they’re doing that demonstrates that they take security seriously."
  },
  {
    "input": "What are the key tools, resources, and organizations recommended in this appendix for ethical hacking and cybersecurity professionals?",
    "summary": "This appendix provides a list of recommended tools, resources, and websites for ethical hacking, including malware analysis, Bluetooth tools, certifications, databases, password cracking, and more. It also covers various security methods, social engineering, system hardening, and wireless network analysis. Additionally, it includes links to online tools and resources mentioned in the book's Cheat Sheet.",
    "output": "Appendix\nTools and Resources\nT\no stay up-to-date with the latest and greatest ethical hacking tools and\nresources, you need to know where to turn. This appendix contains my\nfavorite security sites, tools, resources, and more that you can benefit from\nin your ongoing ethical hacking program.\nThis book’s online Cheat Sheet contains links to all the online tools and\nresources listed in this appendix. Check it out at www.dummies.com/\ncheatsheet/hacking.\nAdvanced Malware\nBit9 Parity Suite — https://www.bit9.com/products\nDamballa Failsafe — www.damballa.com/solutions/damballa_\nfailsafe.php\nSourcefire — www.sourcefire.com/security-technologies/network-\nsecurity/next-generation-intrusion-prevention-system\nBluetooth\nBlooover — http://trifinite.org/trifinite_stuff_blooover.html\nBluejacking Forums and Community site — www.bluejackq.com/\nbluejacking-forums.shtml\nBlueScanner — http://sourceforge.net/projects/bluescanner\nBluesnarfer — www.alighieri.org/tools/bluesnarfer.tar.gz\n356\nHacking For Dummies, 4th Edition\nBlueSniper rifle — www.tomsguide.com/us/how-to-bluesniper-pt1,\nreview-408.html\nBTScanner for XP — www.pentest.co.uk/src/btscanner_1_0_0.zip\nCar Whisperer — http://trifinite.org/trifinite_stuff_car\nwhisperer.html\nSmurf — www.gatefold.co.uk/smurf\nCertifications\nCertified Ethical Hacker — www.eccouncil.org/CEH.htm\nCertified Information Security Manager — www.isaca.org\nCertified Information Systems Security Professional — www.isc2.org/\ncissp/default.aspx\nCertified Wireless Security Professional — www.cwnp.com/certifications/\ncwsp/\nCompTIA Security+ — http://certification.comptia.org/get\nCertified/certifications/security.aspx\nSANS GIAC — www.giac.org\nDatabases\nAdvanced Access Password Recovery — www.elcomsoft.com/acpr.html\nAdvanced SQL Password Recovery — www.elcomsoft.com/asqlpr.html\nAppDetectivePro — www.appsecinc.com/products/appdetective\nElcomsoft Distributed Password Recovery — www.elcomsoft.com/edpr.\nhtml\nIdera — www.idera.com\n357\nAppendix: Tools and Resources\nMicrosoft SQL Server Management Studio Express — www.microsoft.com/\nen-us/download/details.aspx?id=7593\nNexpose — www.rapid7.com/vulnerability-scanner.jsp\nPete Finnigan’s listing of Oracle scanning tools — www.petefinnigan.com/\ntools.htm\nQualysGuard — www.qualys.com\nSQLPing3 — www.sqlsecurity.com/downloads\nExploits\nMetasploit — www.metasploit.com\nOffensive Security’s Exploit Database — www.exploit-db.com\nPwnie Express http://pwnieexpress.com\nGeneral Research Tools\nAFRINIC — www.afrinic.net\nAPNIC — www.apnic.net\nARIN — http://whois.arin.net/ui\nBing — www.bing.com\nDNSstuff — www.dnsstuff.com\nDNS Tools — www.dnstools.com\nThe File Extension Source — http://filext.com\nGoogle — www.google.com\nGoogle advanced operators — www.googleguide.com/advanced_\noperators.html\n358\nHacking For Dummies, 4th Edition\nGovernment domains — www.dotgov.gov/portal/web/dotgov/whois\nHoover’s business information — www.hoovers.com\nLACNIC — www.lacnic.net\nNetcraft’s What’s that site running? — http://news.netcraft.com\nRIPE Network Coordination Centre — https://apps.db.ripe.net/\nsearch/query.html\nSwitchboard.com — www.switchboard.com\ntheHarvester — http://code.google.com/p/theharvester\nUnited States Patent and Trademark Office — www.uspto.gov\nUS Search.com — www.ussearch.com\nU.S. Securities and Exchange Commission — www.sec.gov/edgar.shtml\nWotsit’s Format — www.wotsit.org\nWhois — www.whois.net\nWhatIsMyIP — www.whatismyip.com\nYahoo! Finance — http://finance.yahoo.com\nZabaSearch — www.zabasearch.com\nHacker Stuff\n2600 The Hacker Quarterly — www.2600.com\nComputer Underground Digest — http://cu-digest.org\nHacker T-shirts, equipment, and other trinkets — www.thinkgeek.com\nHackin9 — http://hakin9.org\nHoneypots: Tracking Hackers — www.tracking-hackers.com\nThe Jargon File — www.jargon.8hz.com\nPhrack — www.phrack.org\n359\nAppendix: Tools and Resources\nKeyloggers\nInvisible KeyLogger Stealth — www.amecisco.com/iks.htm\nKeyGhost — www.keyghost.com\nSpectorSoft — www.spectorsoft.com\nLaws and Regulations\nComputer Fraud and Abuse Act — www.fas.org/sgp/crs/misc/\nRS20830.pdf\nGramm-Leach-Bliley Act (GLBA) Safeguards Rule — www.ftc.gov/\nos/2002/05/67fr36585.pdf\nHealth Information Technology for Economic and Clinical Health (HITECH)\nAct — http://en.wikipedia.org/wiki/Health_Information_\nTechnology_for_Economic_and_Clinical_Health_Act\nHealth Insurance Portability and Accountability Act (HIPAA) Security Rule —\nwww.hhs.gov/ocr/privacy/hipaa/understanding/srsummary.html\nPayment Card Industry Data Security Standard (PCI DSS) — www.pci\nsecuritystandards.org/security_standards/index.php\nSarbanes-Oxley Act — www.sec.gov/about/laws.shtml#sox2002\nUnited States state breach notification laws — www.ncsl.org/programs/\nlis/cip/priv/breachlaws.htm\nLinux\nBackTrack Linux — www.backtrack-linux.org\nfreshmeat.net — http://freecode.com\nGFI LanGuard — www.gfi.com/network-security-vulnerability-\nscanner\nLinux Security Auditing Tool (LSAT) — http://usat.sourceforge.net\nNexpose — www.rapid7.com/vulnerability-scanner.jsp\n360\nHacking For Dummies, 4th Edition\nQualysGuard — www.qualys.com\nSourceForge — http://sourceforge.net\nTHC-Amap — www.thc.org/thc-amap\nTiger — www.nongnu.org/tiger\nLive Toolkits\nBackTrack Linux — www.backtrack-linux.org\nComprehensive listing of live bootable Linux toolkits — www.livecd\nlist.com/\nKnoppix — http://knoppix.net\nNetwork Security Toolkit — www.networksecuritytoolkit.org\nSecurity Tools Distribution — http://s-t-d.org\nLog Analysis\nArcSight Logger — www.hpenterprisesecurity.com/products/\nhp-arcsight-security-intelligence/hp-arcsight-logger/\nGFI EventsManager — www.gfi.com/eventsmanager\nMessaging\nAbuse.net SMTP relay checker — www.abuse.net/relay.html\nBrutus — www.hoobie.net/brutus\nCain & Abel — www.oxid.it/cain.html\nDNSstuff relay checker — www.dnsstuff.com\nEICAR Anti-Virus test file — www.eicar.org/anti_virus_test_file.htm\nGFI e-mail security test — www.gfi.com/pages/email-security.asp\n361\nAppendix: Tools and Resources\nmailsnarf — www.monkey.org/~dugsong/dsniff\nsmtpscan — www.freshports.org/security/smtpscan\nMiscellaneous\n3M Privacy Filters — www.shop3m.com/3m-privacy-filters.html\n7-Zip — www.7-zip.org\nWinZip — www.winzip.com\nMobile\nBitLocker whitepapers www.principlelogic.com/bitlocker.html\nCheckmarx CxDeveloper — www.checkmarx.com\nElcomsoft Forensic Disk Decryptor — www.elcomsoft.com/efdd.html\nElcomsoft’s Phone Password Breaker — www.elcomsoft.com/eppb.html\nElcomsoft System Recovery — www.elcomsoft.com/esr.html\niOS Forensic Toolkit — http://ios.elcomsoft.com\nOphcrack — http://ophcrack.sourceforge.net\nOxygen Forensic Suite — www.oxygen-forensic.com\nPassware Kit Forensic — www.lostpassword.com/kit-forensic.htm\nVeracode — www.veracode.com\nNetworks\nArpwatch — http://linux.maruhn.com/sec/arpwatch.html\nBlast — www.mcafee.com/us/downloads/free-tools/blast.aspx\nCain & Abel — www.oxid.it/cain.html\n362\nHacking For Dummies, 4th Edition\nCommView — www.tamos.com/products/commview\ndsniff — www.monkey.org/~dugsong/dsniff\nEssential NetTools — www.tamos.com/products/nettools\nEttercap — http://ettercap.sourceforge.net\nFortinet — www.fortinet.com\nGetif — www.wtcs.org/snmp4tpc/getif.htm\nGFI LanGuard — www.gfi.com/network-security-vulnerability-\nscanner\nGNU MAC Changer — www.alobbs.com/macchanger\nIETF RFCs — www.rfc-editor.org/rfcxx00.html\nIKECrack — http://ikecrack.sourceforge.net\nMAC address vendor lookup — http://standards.ieee.org/develop/\nregauth/oui/public.html\nNessus vulnerability scanner — www.tenable.com/products/nessus\nNetcat — http://netcat.sourceforge.net\nnetfilter/iptables — www.netfilter.org\nNetResident — www.tamos.com/products/netresident\nNetScanTools Pro — www.netscantools.com\nNexpose — www.rapid7.com/vulnerability-scanner.jsp\nNmap port scanner — http://nmap.org\nNMapWin — http://sourceforge.net/projects/nmapwin\nOmniPeek — www.wildpackets.com/products/omnipeek_network_\nanalyzer\nPort number listing — www.iana.org/assignments/port-numbers\nPort number lookup — www.cotse.com/cgi-bin/port.cgi\n363\nAppendix: Tools and Resources\nPortSentry — http://sourceforge.net/projects/sentrytools\nPromiscDetect — http://ntsecurity.nu/toolbox/promiscdetect\nQualysGuard vulnerability scanner — www.qualys.com\nSMAC MAC address changer — www.klcconsulting.net/smac\nSNARE — www.intersectalliance.com/projects/Snare\nsniffdet — http://sniffdet.sourceforge.net\nSNMPUTIL — www.wtcs.org/snmp4tpc/FILES/Tools/SNMPUTIL/\nSNMPUTIL.zip\nSonicWALL — www.sonicwall.com\nSourcefire — www.sourcefire.com/security-technologies/network-\nsecurity/next-generation-intrusion-prevention-system\nTCP Wrappers — http://protect.iu.edu/cybersecurity/tcp-\nwrappers\nTraffic IQ Professional — www.idappcom.com\nUDPFlood — www.mcafee.com/us/downloads/free-tools/udpflood.\naspx\nWhatIsMyIP — www.whatismyip.com\nWireshark — www.wireshark.org\nPassword Cracking\nAdvanced Archive Password Recovery — www.elcomsoft.com/archpr.\nhtml\nBIOS passwords — http://labmice.techtarget.com/articles/BIOS_\nhack.htm\nBitLocker security whitepapers — www.principlelogic.com/bitlocker.\nhtml\nBrutus — www.hoobie.net/brutus\n364\nHacking For Dummies, 4th Edition\nCain & Abel — www.oxid.it/cain.html\nCrack — ftp://coast.cs.purdue.edu/pub/tools/unix/pwdutils/\ncrack\nDefault vendor passwords — www.cirt.net/passwords\nDictionary files and word lists\nftp://ftp.cerias.purdue.edu/pub/dict\nhttp://packetstormsecurity.org/Crackers/wordlists/\nwww.outpost9.com/files/WordLists.html\neBlaster and Spector Pro — www.spectorsoft.com\nElcomsoft Distributed Password Recovery — www.elcomsoft.com/edpr.\nhtml\nElcomsoft Forensic Disk Decryptor — www.elcomsoft.com/efdd.html\nElcomsoft System Recovery — www.elcomsoft.com/esr.html\nInvisible KeyLogger Stealth — www.amecisco.com/iks.htm\nJohn the Ripper — www.openwall.com/john\nKeyGhost — www.keyghost.com\nLastPass — http://lastpass.com\nophcrack — http://ophcrack.sourceforge.net\nOxygen Forensic Suite — www.oxygen-forensic.com\nPandora — www.nmrc.org/project/pandora\nPassware Kit Forensic — www.lostpassword.com/kit-forensic.htm\nPassword Safe — http://passwordsafe.sourceforge.net\nProactive Password Auditor — www.elcomsoft.com/ppa.html\nProactive System Password Recovery — www.elcomsoft.com/pspr.html\n365\nAppendix: Tools and Resources\npwdump3 — www.openwall.com/passwords/microsoft-windows-nt-\n2000-xp-2003-vista-7#pwdump\nNetBIOS Auditing Tool — www.securityfocus.com/tools/543\nNIST Guide to Enterprise Password Management — http://csrc.nist.\ngov/publications/drafts/800-118/draft-sp800-118.pdf\nNTAccess — www.mirider.com/ntaccess.html\nRainbowCrack — http://project-rainbowcrack.com\nRainbow tables — http://rainbowtables.shmoo.com\nSQLPing3 — www.sqlsecurity.com/downloads\nTHC-Hydra — www.thc.org/thc-hydra\nWinHex — www.winhex.com\nPatch Management\nDebian Linux Security Alerts — www.debian.org/security\nEcora Patch Manager — www.ecora.com/ecora/products/patch\nmanager.asp\nGFI LanGuard — http://www.gfi.com/network-security-\nvulnerability-scanner\nKaseya Patch Management — www.kaseya.com/features/patch-\nmanagement.aspx\nLumension Patch and Remediation — www.lumension.com/\nvulnerability-management/patch-management-software.aspx\nMicrosoft TechNet Security Center — http://technet.microsoft.com/\nen-us/security/default.aspx\nRed Hat Linux Security Alerts — http://updates.redhat.com\nSlackware Linux Security Advisories — www.slackware.com/security\n366\nHacking For Dummies, 4th Edition\nSUSE Linux Security Alerts — http://en.opensuse.org/System_\nUpdates\nVMware vCenter Protect — www.vmware.com/products/datacenter-\nvirtualization/vcenter-protect/overview.html\nWindows Server Update Services from Microsoft — http://technet.\nmicrosoft.com/en-us/windowsserver/bb332157.aspx\nSecurity Education and\nLearning Resources\nKevin Beaver’s information security articles, whitepapers, webcasts, podcasts,\nand screencasts — www.principlelogic.com/resources.html\nKevin Beaver’s Security On Wheels information security audio programs —\nhttp://securityonwheels.com\nKevin Beaver’s Security On Wheels blog — http://securityonwheels.\ncom/blog\nKevin Beaver’s Twitter page — https://twitter.com/kevinbeaver\nSecurity Methods and Models\nOpen Source Security Testing Methodology Manual — www.isecom.org/\nresearch/osstmm.html\nOWASP — www.owasp.org\nSecurITree — www.amenaza.com\nThe Open Group’s Risk Taxonomy — www.opengroup.org\nSocial Engineering\nSimple Phishing Toolkit — www.sptoolkit.com\n367\nAppendix: Tools and Resources\nSource Code Analysis\nCheckmarx — www.checkmarx.com\nVeracode — www.veracode.com\nStorage\nEffective File Search — www.sowsoft.com/search.htm\nFileLocator Pro — www.mythicsoft.com\nGFI LanGuard — www.gfi.com/network-security-vulnerability-\nscanner\nGrabiQNs — www.isecpartners.com/SecuringStorage/GrabiQNs.zip\nIdentity Finder — www.identityfinder.com\nSystem Hardening\nBastille Linux Hardening Program — http://bastille-linux.source\nforge.net\nCenter for Internet Security Benchmarks — www.cisecurity.org\nDeep Freeze Enterprise — www.faronics.com/products/deep-freeze/\nenterprise\nFortres 101 — www.fortresgrand.com\nImperva — www.imperva.com/products/database-firewall.html\nLinux Administrator’s Security Guide — www.seifried.org/lasg\nMicrosoft Security Compliance Manager — http://technet.microsoft.\ncom/en-us/library/cc677002.aspx\nPyn Logic — www.pynlogic.com\n368\nHacking For Dummies, 4th Edition\nSecureIIS — www.eeye.com/products/secureiis-web-server-\nsecurity\nServerDefender — www.port80software.com/products/server\ndefender\nTrueCrypt — www.truecrypt.org\nSymantec PGP — www.symantec.com/products-solutions/\nfamilies/?fid=encryption\nWinMagic — www.winmagic.com\nUser Awareness and Training\nAwareity MOAT — www.awareity.com\nDogwood Management Partners Security Posters — www.security\nposters.net\nGreenidea Visible Statement — www.greenidea.com\nInterpact, Inc. Awareness Resources — www.thesecurityawareness\ncompany.com\nManaging an Information Security and Privacy Awareness and Training\nProgram by Rebecca Herold (Auerbach) — www.amazon.com/Managing-\nInformation-Security-Awareness-Training/dp/0849329639\nPeter Davis & Associates training services — www.pdaconsulting.com/\nservices.htm\nSecurity Awareness, Inc. — www.securityawareness.com\nVoice over IP\nCain & Abel — www.oxid.it/cain.html\nCommView — www.tamos.com/products/commview\nListing of various VoIP tools — www.voipsa.org/Resources/tools.php\n369\nAppendix: Tools and Resources\nNIST’s SP800-58 document — http://csrc.nist.gov/publications/\nnistpubs/800-58/SP800-58-final.pdf\nOmniPeek — www.wildpackets.com/products/distributed_\nnetwork_analysis/omnipeek_network_analyzer\nPROTOS — www.ee.oulu.fi/research/ouspg/Protos\nsipsak — http://sipsak.org\nSiVuS — www.voip-security.net/index.php/component/\njdownloads/view.download/30/299\nvomit — http://vomit.xtdnet.nl\nVoIP Hopper — http://voiphopper.sourceforge.net\nVulnerability Databases\nCommon Vulnerabilities and Exposures — http://cve.mitre.org\nCWE/SANS Top 25 Most Dangerous Programming Errors — www.sans.org/\ntop25-software-errors/\nNational Vulnerability Database — http://nvd.nist.gov\nPrivacy Rights Clearinghouse’s A Chronology of Data Breaches — www.\nprivacyrights.org/data-breach\nSANS Top 20 Internet Security Problems, Threats, and Risks — www.sans.\norg/top20\nUS-CERT Vulnerability Notes Database — www.kb.cert.org/vuls\nWireless Vulnerabilities and Exploits — www.wve.org\nWebsites and Applications\nAcunetix Web Vulnerability Scanner — www.acunetix.com\nBrutus — www.hoobie.net/brutus/index.html\n370\nHacking For Dummies, 4th Edition\nCheckmarx CxDeveloper — www.checkmarx.com\nDefaced websites — http://zone-h.org/archive\nHTTrack Website Copier — www.httrack.com\nFirefox Web Developer — http://chrispederick.com/work/web-\ndeveloper\nFoundstone’s Hacme Tools — www.mcafee.com/us/downloads/free-\ntools/index.aspx\nGoogle Hack Honeypot — http://ghh.sourceforge.net\nGoogle Hacking Database — http://johnny.ihackstuff.com/ghdb\nNTOSpider — www.ntobjectives.com\nParos Proxy — www.parosproxy.org\nPort 80 Software’s ServerMask — www.port80software.com/products/\nservermask\nSiteDigger — www.mcafee.com/us/downloads/free-tools/site\ndigger.aspx\nSQL Inject Me — https://addons.mozilla.org/en-us/firefox/\naddon/sql-inject-me\nSQL Power Injector — www.sqlpowerinjector.com\nSWFScan — http://bit.ly/ShyhVz\nTHC-Hydra — www.thc.org/thc-hydra\nVeracode — www.veracode.com\nWebInspect — www.hpenterprisesecurity.com/products/hp-\nfortify-software-security-center/hp-webinspect\nWebGoat — www.owasp.org/index.php/Category:OWASP_WebGoat_\nProject\nWSDigger — www.mcafee.com/us/downloads/free-tools/wsdigger.\naspx\nWSFuzzer — www.owasp.org/index.php/Category:OWASP_WSFuzzer_\nProject\n371\nAppendix: Tools and Resources\nWindows\nBitLocker security whitepapers — www.principlelogic.com/\nbitlocker.html\nDumpSec — www.systemtools.com/somarsoft/?somarsoft.com\nGFI LanGuard — www.gfi.com/network-security-vulnerability-\nscanner\nMicrosoft Baseline Security Analyzer — www.microsoft.com/technet/\nsecurity/tools/mbsahome.mspx\nNetwork Users — www.optimumx.com/download/netusers.zip\nNexpose — www.rapid7.com/vulnerability-scanner.jsp\nQualysGuard — www.qualys.com\nSysinternals — http://technet.microsoft.com/en-us/sys\ninternals/default.aspx\nWinfo — www.ntsecurity.nu/toolbox/winfo\nWireless Networks\nAircrack-ng — http://aircrack-ng.org\nAirMagnet WiFi Analyzer — www.airmagnet.com/products/wifi_\nanalyzer\nAsleap — http://sourceforge.net/projects/asleap\nCommView for Wi-Fi — www.tamos.com/products/commwifi\nDigital Hotspotter — www.canarywireless.com\nElcomsoft Wireless Security Auditor — www.elcomsoft.com/ewsa.html\nHomebrew WiFi antenna — www.turnpoint.net/wireless/has.html\nKisMAC — http://trac.kismac-ng.org\nKismet — www.kismetwireless.net\n372\nHacking For Dummies, 4th Edition\nNetStumbler — www.netstumbler.com\nOmniPeek — www.wildpackets.com/products/omnipeek_network_\nanalyzer\nReaver — http://code.google.com/p/reaver-wps\nReaver Pro — http://hakshop.myshopify.com/products/reaver-pro\nSeattleWireless Hardware Comparison page — www.seattlewireless.\nnet/index.cgi/HardwareComparison\nSuper Cantenna — www.cantenna.com\nWellenreiter — http://sourceforge.net/projects/wellenreiter\nWEPCrack — http://wepcrack.sourceforge.net\nWiGLE database of wireless networks — www.wigle.net\nWiFinder — www.boingo.com/boingo-apps/boingo-wifinder/pc/\nWinAirsnort — http://winairsnort.free.fr"
  }
]