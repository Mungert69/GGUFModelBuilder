[
  {
    "start": 1,
    "end": 4,
    "text": "FIPS 205\nFederal Information Processing Standards Publication\nStateless Hash-Based Digital Signature\nStandard\nCategory: Computer Security Subcategory: Cryptography\nInformation Technology Laboratory\nNational Institute of Standards and Technology\nGaithersburg, MD 20899-8900\nThis publication is available free of charge from:\nhttps://doi.org/10.6028/NIST.FIPS.205\nPublished: August 13, 2024\nU.S. Department of Commerce\nGina M. Raimondo, Secretary\nNational Institute of Standards and Technology\nLaurie E. Locascio, NIST Director and Under Secretary of Commerce for Standards and Technology\nForeword\nThe Federal Information Processing Standards Publication (FIPS) series of the National Institute of Standards\nand Technology (NIST) is the official series of publications relating to standards and guidelines developed\nunder 15 U.S.C. 278g-3, and issued by the Secretary of Commerce under 40 U.S.C. 11331.\nComments concerning this Federal Information Processing Standard publication are welcomed and should\nbe submitted using the contact information in the “Inquiries and comments” clause of the announcement\nsection.\nKevin M. Stine, Director\nInformation Technology Laboratory\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\nAbstract\nThis standard specifies the stateless hash-based digital signature algorithm (SLH-DSA). Digital\nsignatures are used to detect unauthorized modifications to data and to authenticate the identity\nof the signatory. In addition, the recipient of signed data can use a digital signature as evidence in\ndemonstrating to a third party that the signature was, in fact, generated by the claimed signatory.\nThis is known as non-repudiation since the signatory cannot easily repudiate the signature at a\nlater time. SLH-DSA is based on SPHINCS+ , which was selected for standardization as part of the\nNIST Post-Quantum Cryptography Standardization process.\nKeywords: computer security; cryptography; digital signatures; Federal Information Processing\nStandards; hash-based signatures; post-quantum; public-key cryptography.\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\nFederal Information Processing Standards Publication 205\nPublished: August 13, 2024\nEffective: August 13, 2024\nAnnouncing the\nStateless Hash-Based Digital Signature Standard\nFederal Information Processing Standards (FIPS) publications are developed by the National\nInstitute of Standards and Technology (NIST) under 15 U.S.C. 278g-3 and issued by the Secretary\nof Commerce under 40 U.S.C. 11331.\n1. Name of Standard. Stateless Hash-Based Digital Signature Standard (FIPS 205).\n2. Category of Standard. Computer Security. Subcategory. Cryptography.\n3. Explanation. This standard specifies a stateless hash-based digital signature scheme (SLH-\nDSA) for applications that require a digital signature rather than a written signature. Additional\ndigital signature schemes are specified and approved in other NIST Special Publications and\nFIPS publications (e.g., FIPS 186-5 [1]). A digital signature is represented in a computer as a\nstring of bits and computed using a set of rules and parameters that allow the identity of the\nsignatory and the integrity of the data to be verified. Digital signatures may be generated on\nboth stored and transmitted data.\nSignature generation uses a private key to generate a digital signature. Signature verification\nuses a public key that corresponds to but is not the same as the private key. Each signatory\npossesses a private and public key pair. Public keys may be known by the public, but private\nkeys must be kept secret. Anyone can verify the signature by employing the signatory’s public\nkey. Only the user who possesses the private key can perform signature generation.\nThe digital signature is provided to the intended verifier along with the signed data. The\nverifying entity verifies the signature by using the claimed signatory’s public key. Similar\nprocedures may be used to generate and verify signatures for both stored and transmitted\ndata.\nThis standard specifies several parameter sets for SLH-DSA that are approved for use. Addi-\ntional parameter sets may be specified and approved in future NIST Special Publications.\n4. Approving Authority. Secretary of Commerce.\n5. Maintenance Agency. Department of Commerce, National Institute of Standards and Tech-\nnology, Information Technology Laboratory (ITL).\n6. Applicability. This standard is applicable to all federal departments and agencies for the\nprotection of sensitive unclassified information that is not subject to section 2315 of Title 10,\nUnited States Code, or section 3502 (2) of Title 44, United States Code. Either this standard,\nFIPS 204, FIPS 186-5, or NIST Special Publication 800-208 shall be used in designing and\nimplementing public-key-based signature systems that federal departments and agencies op-\nerate or that are operated for them under contract. In the future, additional digital signature\ni\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\nschemes may be specified and approved in FIPS publications or NIST Special Publications.\nThe adoption and use of this standard are available to private and commercial organizations.\n7. Applications. A digital signature algorithm allows an entity to authenticate the integrity of\nsigned data and the identity of the signatory. The recipient of a signed message can use a\ndigital signature as evidence in demonstrating to a third party that the signature was, in fact,\ngenerated by the claimed signatory. This is known as non-repudiation since the signatory\ncannot easily repudiate the signature at a later time. A digital signature algorithm is intended\nfor use in electronic mail, electronic funds transfer, electronic data interchange, software\ndistribution, data storage, and other applications that require data integrity assurance and\ndata origin authentication.\n8. Implementations. A digital signature algorithm may be implemented in software, firmware,\nhardware, or any combination thereof. NIST will develop a validation program to test imple-\nmentations for conformance to the algorithms in this standard. For every computational\nprocedure that is specified in this standard, a conforming implementation may replace the\ngiven set of steps with any mathematically equivalent process. In other words, different\nprocedures that produce the correct output for every input are permitted. Information about\nvalidation programs is available at https://csrc.nist.gov/projects/cmvp. Examples for digital\nsignature algorithms are available at https://csrc.nist.gov/projects/cryptographic-standards-\nand-guidelines/example-values.\nAgencies are advised that digital signature key pairs shall not be used for other purposes.\n9. Other Approved Security Functions. Digital signature implementations that comply with this\nstandard shall employ cryptographic algorithms that have been approved for protecting Fed-\neral Government-sensitive information. Approved cryptographic algorithms and techniques\ninclude those that are either:\na. Specified in a Federal Information Processing Standard (FIPS) publication,\nb. Adopted in a FIPS or NIST recommendation, or\nc. Specified in the list of approved security functions in SP 800-140C.\n10. Export Control. Certain cryptographic devices and technical data regarding them are subject\nto federal export controls. Exports of cryptographic modules that implement this standard\nand technical data regarding them must comply with these federal regulations and be licensed\nby the Bureau of Industry and Security of the U.S. Department of Commerce. Information\nabout export regulations is available at https://www.bis.doc.gov.\n11. Patents. The algorithm in this standard may be covered by U.S. or foreign patents.\n12. Implementation Schedule. This standard becomes effective immediately upon final publica-\ntion.\n13. Specifications. Federal Information Processing Standard (FIPS) 205, Stateless Hash-Based\nDigital Signature Standard (affixed).\nii\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\n14. Qualifications. The security of a digital signature system depends on the secrecy of the\nsignatory’s private keys. Signatories shall, therefore, guard against the disclosure of their\nprivate keys. While it is the intent of this standard to specify general security requirements for\ngenerating digital signatures, conformance to this standard does not ensure that a particular\nimplementation is secure. It is the responsibility of an implementer to ensure that any module\nthat implements a digital signature capability is designed and built in a secure manner.\nSimilarly, the use of a product containing an implementation that conforms to this standard\ndoes not guarantee the security of the overall system in which the product is used. The re-\nsponsible authority in each agency or department shall ensure that an overall implementation\nprovides an acceptable level of security.\nSince a standard of this nature must be flexible enough to adapt to advancements and\ninnovations in science and technology, this standard will be reviewed every five years in order\nto assess its adequacy.\n15. Waiver Procedure. The Federal Information Security Management Act (FISMA) does not\nallow for waivers to Federal Information Processing Standards (FIPS) that are made mandatory\nby the Secretary of Commerce.\n16. Where to Obtain Copies of the Standard. This publication is available by accessing https:\n//csrc.nist.gov/publications. Other computer security publications are available at the same\nwebsite.\n17. How to Cite This Publication. NIST has assigned NIST FIPS 205 as the publication identifier\nfor this FIPS, per the NIST Technical Series Publication Identifier Syntax. NIST recommends\nthat it be cited as follows:\nNational Institute of Standards and Technology (2024) Stateless Hash-Based Dig-\nital Signature Standard. (Department of Commerce, Washington, D.C.), Fed-\neral Information Processing Standards Publication (FIPS) NIST FIPS 205. https:\n//doi.org/10.6028/NIST.FIPS.205\n18. Inquiries and Comments. Inquiries and comments about this FIPS may be submitted to\nfips-205-comments@nist.gov.\niii\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\nFederal Information Processing Standards Publication 205\nSpecification for the\nStateless Hash-Based Digital Signature Standard\nTable of Contents\n1 Introduction 1\n1.1 Purpose and Scope . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1\n1.2 Context . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1\n2 Glossary of Terms, Acronyms, and Symbols 2\n2.1 Terms and Definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2\n2.2 Acronyms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4\n2.3 Mathematical Symbols . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5\n3 Overview of the SLH-DSA Signature Scheme 7\n3.1 Additional Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9\n3.2 Implementation Considerations . . . . . . . . . . . . . . . . . . . . . . . . . 10\n4 Functions and Addressing 11\n4.1 Hash Functions and Pseudorandom Functions . . . . . . . . . . . . . . . . . 11\n4.2 Addresses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n4.3 Member Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n4.4 Arrays, Byte Strings, and Integers . . . . . . . . . . . . . . . . . . . . . . . . 15\n5 Winternitz One-Time Signature Plus Scheme 17\n5.1 WOTS+ Public-Key Generation . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n5.2 WOTS+ Signature Generation . . . . . . . . . . . . . . . . . . . . . . . . . . 19\n5.3 Computing a WOTS+ Public Key From a Signature . . . . . . . . . . . . . . . 21\n6 eXtended Merkle Signature Scheme (XMSS) 22\n6.1 Generating a Merkle Hash Tree . . . . . . . . . . . . . . . . . . . . . . . . . 22\n6.2 Generating an XMSS Signature . . . . . . . . . . . . . . . . . . . . . . . . . . 23\n6.3 Computing an XMSS Public Key From a Signature . . . . . . . . . . . . . . . . 25\n7 The SLH-DSA Hypertree 26\niv\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\n7.1 Hypertree Signature Generation . . . . . . . . . . . . . . . . . . . . . . . . . 26\n7.2 Hypertree Signature Verification . . . . . . . . . . . . . . . . . . . . . . . . . 28\n8 Forest of Random Subsets (FORS) 29\n8.1 Generating FORS Secret Values . . . . . . . . . . . . . . . . . . . . . . . . . . 29\n8.2 Generating a Merkle Hash Tree . . . . . . . . . . . . . . . . . . . . . . . . . 30\n8.3 Generating a FORS Signature . . . . . . . . . . . . . . . . . . . . . . . . . . . 30\n8.4 Computing a FORS Public Key From a Signature . . . . . . . . . . . . . . . . . 31\n9 SLH-DSA Internal Functions 33\n9.1 SLH-DSA Key Generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33\n9.2 SLH-DSA Signature Generation . . . . . . . . . . . . . . . . . . . . . . . . . . 34\n9.3 SLH-DSA Signature Verification . . . . . . . . . . . . . . . . . . . . . . . . . . 36\n10 SLH-DSA External Functions 37\n10.1 SLH-DSA Key Generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n10.2 SLH-DSA Signature Generation . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n10.2.1 Pure SLH-DSASignature Generation . . . . . . . . . . . . . . . . . . . 38\n10.2.2 HashSLH-DSASignature Generation . . . . . . . . . . . . . . . . . . . 39\n10.3 SLH-DSA Signature Verification . . . . . . . . . . . . . . . . . . . . . . . . . . 41\n11 Parameter Sets 43\n11.1 SLH-DSA Using SHAKE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44\n11.2 SLH-DSA Using SHA2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44\n11.2.1 SLH-DSAUsingSHA2for SecurityCategory1 . . . . . . . . . . . . . . . 45\n11.2.2 SLH-DSA Using SHA2 for Security Categories 3 and 5 . . . . . . . . . . 46\nReferences 47\nAppendix A — Differences From the SPHINCS+ Submission 51\nA.1 Changes From FIPS 205 Initial Public Draft . . . . . . . . . . . . . . . . . . . . 51\nv",
    "question": "What is the purpose and key concept of the FIPS 205 standard?",
    "summary": "FIPS 205 is a U.S. federal standard for a stateless hash-based digital signature algorithm called SLH-DSA. It is designed to provide secure digital signatures that authenticate data integrity and identity, and are resistant to quantum computing threats. The standard is part of NIST's post-quantum cryptography efforts and is applicable to federal agencies for protecting sensitive unclassified information."
  },
  {
    "start": 5,
    "end": 6,
    "text": "FIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\nList of Tables\nTable1 Memberfunctionsfor addresses . . . . . . . . . . . . . . . . . . . . . . 14\nTable2 SLH-DSAparameter sets . . . . . . . . . . . . . . . . . . . . . . . . . . 43\nTable 3 Member functions for compressed addresses . . . . . . . . . . . . . . . 45\nList of Figures\nFigure 1 AnSLH-DSAsignature . . . . . . . . . . . . . . . . . . . . . . . . . . . 8\nFigure 2 Address (ADRS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\nFigure 3 WOTS+ hashaddress . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\nFigure 4 WOTS+ public-key compressionaddress . . . . . . . . . . . . . . . . . 12\nFigure 5 Hashtree address . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\nFigure 6 FORStree address . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\nFigure 7 FORStree roots compressionaddress . . . . . . . . . . . . . . . . . . . 13\nFigure 8 WOTS+ keygenerationaddress . . . . . . . . . . . . . . . . . . . . . . 14\nFigure 9 FORSkeygenerationaddress . . . . . . . . . . . . . . . . . . . . . . . 14\nFigure 10 WOTS+ signature data format . . . . . . . . . . . . . . . . . . . . . . . 19\nFigure 11 XMSSsignature data format . . . . . . . . . . . . . . . . . . . . . . . . 22\nFigure 12 Merklehash tree . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24\nFigure 13 HTsignature data format . . . . . . . . . . . . . . . . . . . . . . . . . 26\nFigure 14 FORSsignature data format . . . . . . . . . . . . . . . . . . . . . . . . 29\nFigure 15 SLH-DSAprivate key . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33\nFigure 16 SLH-DSApublickey . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33\nFigure 17 SLH-DSAsignature data format . . . . . . . . . . . . . . . . . . . . . . 34\nFigure 18 Compressed address (ADRS 𝑐 ) . . . . . . . . . . . . . . . . . . . . . . 45\nList of Algorithms\nAlgorithm 1 gen_len (𝑛, 𝑙𝑔 ) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n2 𝑤\nAlgorithm 2 toInt(𝑋, 𝑛) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15\nAlgorithm 3 toByte(𝑥, 𝑛) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15\nAlgorithm 4 base_2b(𝑋, 𝑏, 𝑜𝑢𝑡_𝑙𝑒𝑛) . . . . . . . . . . . . . . . . . . . . . . . . 16\nAlgorithm 5 chain(𝑋, 𝑖, 𝑠, PK.seed, ADRS) . . . . . . . . . . . . . . . . . . . 18\nAlgorithm 6 wots_pkGen(SK.seed, PK.seed, ADRS) . . . . . . . . . . . . . . 18\nAlgorithm 7 wots_sign(𝑀, SK.seed, PK.seed, ADRS) . . . . . . . . . . . . . 20\nAlgorithm 8 wots_pkFromSig(𝑠𝑖𝑔, 𝑀, PK.seed, ADRS) . . . . . . . . . . . . . 21\nAlgorithm 9 xmss_node(SK.seed, 𝑖, 𝑧, PK.seed, ADRS) . . . . . . . . . . . . 23\nAlgorithm 10 xmss_sign(𝑀, SK.seed, 𝑖𝑑𝑥, PK.seed, ADRS) . . . . . . . . . . . 24\nAlgorithm 11 xmss_pkFromSig(𝑖𝑑𝑥, SIG , 𝑀, PK.seed, ADRS) . . . . . . . 25\n𝑋𝑀𝑆𝑆\nAlgorithm 12 ht_sign(𝑀, SK.seed, PK.seed, 𝑖𝑑𝑥 , 𝑖𝑑𝑥 ) . . . . . . . . . . 27\n𝑡𝑟𝑒𝑒 𝑙𝑒𝑎𝑓\nAlgorithm 13 ht_verify(𝑀, SIG , PK.seed, 𝑖𝑑𝑥 , 𝑖𝑑𝑥 , PK.root) . . . . . . 28\n𝐻𝑇 𝑡𝑟𝑒𝑒 𝑙𝑒𝑎𝑓\nAlgorithm 14 fors_skGen(SK.seed, PK.seed, ADRS, 𝑖𝑑𝑥) . . . . . . . . . . . . 29\nvi\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\nAlgorithm 15 fors_node(SK.seed, 𝑖, 𝑧, PK.seed, ADRS) . . . . . . . . . . . . . 30\nAlgorithm 16 fors_sign(𝑚𝑑, SK.seed, PK.seed, ADRS) . . . . . . . . . . . . . 31\nAlgorithm 17 fors_pkFromSig(SIG , 𝑚𝑑, PK.seed, ADRS) . . . . . . . . . . 32\n𝐹 𝑂𝑅𝑆\nAlgorithm 18 slh_keygen_internal(SK.seed, SK.prf, PK.seed) . . . . . . . . . . 34\nAlgorithm 19 slh_sign_internal(𝑀, SK, 𝑎𝑑𝑑𝑟𝑛𝑑) . . . . . . . . . . . . . . . . . . . 35\nAlgorithm 20 slh_verify_internal(𝑀,SIG,PK) . . . . . . . . . . . . . . . . . . . . 36\nAlgorithm 21 slh_keygen() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\nAlgorithm 22 slh_sign(𝑀, 𝑐𝑡𝑥,SK) . . . . . . . . . . . . . . . . . . . . . . . . . . 39\nAlgorithm 23 hash_slh_sign(𝑀, 𝑐𝑡𝑥,PH,SK) . . . . . . . . . . . . . . . . . . . . . 40\nAlgorithm 24 slh_verify(𝑀, SIG, 𝑐𝑡𝑥,PK) . . . . . . . . . . . . . . . . . . . . . . . 41\nAlgorithm 25 hash_slh_verify(𝑀, SIG, 𝑐𝑡𝑥,PH,PK) . . . . . . . . . . . . . . . . . 42\nvii\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\n1. Introduction\n1.1 Purpose and Scope\nThis standard defines a method for digital signature generation that can be used for the protection\nof binary data (commonly called a message) and for the verification and validation of those digital\nsignatures.1 The security of the stateless hash-based digital signature algorithm (SLH-DSA) relies\non the presumed difficulty of finding preimages for hash functions as well as several related\nproperties of the same hash functions. Unlike the algorithms specified in FIPS 186-5 [1], SLH-DSA\nis designed to provide resistance against attacks from a large-scale quantum computer.\nThis standard specifies the mathematical steps that need to be performed for key generation,\nsignature generation, and signature verification. Additional assurances are required for digital\nsignatures to be valid (e.g., the assurance of identity and private key possession). SP 800-89,\nRecommendation for Obtaining Assurances for Digital Signature Applications [3], specifies the\nrequired assurances and the methods for obtaining these assurances.\n1.2 Context\nOver the past several years, there has been steady progress toward building quantum computers.\nThe security of many commonly used public-key cryptosystems will be at risk if large-scale\nquantum computers are ever realized. This would include key-establishment schemes and digital\nsignatures that are based on integer factorization and discrete logarithms (both over finite fields\nand elliptic curves). As a result, in 2016, NIST initiated a public Post-Quantum Cryptography\n(PQC) Standardization process to select quantum-resistant public-key cryptographic algorithms\nfor standardization. A total of 82 candidate algorithms were submitted to NIST for consideration.\nAfter three rounds of evaluation and analysis, NIST selected the first four algorithms for stan-\ndardization. These algorithms are intended to protect sensitive U.S. Government information\nwell into the foreseeable future, including after the advent of cryptographically relevant quan-\ntum computers. This standard includes the specification for one of the algorithms selected:\nSPHINCS+ , a stateless hash-based digital signature scheme. This standard contains several minor\nmodifications compared to Version 3 [4], which was submitted at the beginning of round three\nof the NIST PQC Standardization process. The changes are described in Appendix A. Throughout\nthis standard, SPHINCS+ will be referred to as SLH-DSA for stateless hash-based digital signature\nalgorithm.\n1NIST Special Publication (SP) 800-175B [2], Guideline for Using Cryptographic Standards in the Federal Government:\nCryptographic Mechanisms, includes a general discussion of digital signatures.\n1",
    "question": "What is the purpose of the FIPS 205 standard and how does it address the security concerns related to quantum computing?",
    "summary": "The FIPS 205 standard outlines a stateless hash-based digital signature method called SLH-DSA, which is designed to be quantum-resistant. It details the mathematical steps for key generation, signature creation, and verification. The standard specifies SPHINCS+ as the algorithm, which includes minor modifications from its previous version."
  },
  {
    "start": 7,
    "end": 12,
    "text": "FIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\n2. Glossary of Terms, Acronyms, and Symbols\n2.1 Terms and Definitions\napproved FIPS-approved and/or NIST-recommended. An algorithm or tech-\nnique that is either 1) specified in a FIPS or NIST recommendation, 2)\nadopted in a FIPS or NIST recommendation, or 3) specified in a list of\nNIST-approved security functions. [1]\nbig-endian The property of a byte string having its bytes positioned in order of\ndecreasing significance. In particular, the leftmost (first) byte is the\nmost significant, and the rightmost (last) byte is the least significant.\nThe term “big-endian” may also be applied in the same manner to bit\nstrings. [5, adapted]\nbyte string An array of integers in which each integer is in the set {0, … , 255}.\nclaimed signatory From the verifier’s perspective, the claimed signatory is the entity that\npurportedly generated a digital signature. [1]\ndestroy An action applied to a key or a piece of secret data. After a key or a\npiece of secret data is destroyed, no information about its value can\nbe recovered. [1]\ndigital signature The result of a cryptographic transformation of data that, when prop-\nerly implemented, provides a mechanism for verifying origin authenti-\ncation, data integrity, and signatory non-repudiation. [1]\nentity An individual (person), organization, device, or process. Used inter-\nchangeably with party. [1]\nequivalent process Two processes are equivalent if the same output is produced when\nthe same values are input to each process (either as input parameters,\nas values made available during the process, or both). [1]\nextendable-output A function on bit strings in which the output can be extended to any\nfunction desired length. Approved XOFs (such as those specified in FIPS 202 [6])\nare designed to satisfy the following properties as long as the specified\noutput length is sufficiently long to prevent trivial attacks:\n1. (One-way) It is computationally infeasible to find any input that\nmaps to any new pre-specified output.\n2. (Collision-resistant) It is computationally infeasible to find any\ntwo distinct inputs that map to the same output. [7, adapted]\nfresh random value A previously unused output of a random bit generator.\nhash function A function on bit strings in which the length of the output is fixed.\nApproved hash functions (such as those specified in FIPS 180 [8] and\nFIPS 202 [6]) are designed to satisfy the following properties:\n2\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\n1. (One-way) It is computationally infeasible to find any input that\nmaps to any new pre-specified output\n2. (Collision-resistant) It is computationally infeasible to find any\ntwo distinct inputs that map to the same output. [1]\nhash value See message digest.\nkey A parameter used in conjunction with a cryptographic algorithm that\ndetermines its operation. Examples applicable to this standard include:\n1. The computation of a digital signature from data, and\n2. The verification of a digital signature. [1]\nkey pair A public key and its corresponding private key. [1]\nmessage The data that is signed. Also known as signed data during the signature\nverification and validation process. [1]\nmessage digest The result of applying a hash function to a message. Also known as a\nhash value. [1]\nnon-repudiation A service that is used to provide assurance of the integrity and origin\nof data in such a way that the integrity and origin can be verified and\nvalidated by a third party as having originated from a specific entity in\npossession of the private key (i.e., the signatory). [1]\nowner A key pair owner is the entity authorized to use the private key of a\nkey pair. [1]\nparty An individual (person), organization, device, or process. Used inter-\nchangeably with entity. [1]\nprivate key A cryptographic key that is used with an asymmetric (public-key) cryp-\ntographic algorithm. The private key is uniquely associated with the\nowner and is not made public. The private key is used to compute a\ndigital signature that may be verified using the corresponding public\nkey. [1]\npseudorandom A process or data produced by a process is said to be pseudorandom\nwhen the outcome is deterministic yet also effectively random as long\nas the internal action of the process is hidden from observation. For\ncryptographic purposes, “effectively random” means “computation-\nally indistinguishable from random within the limits of the intended\nsecurity strength.” [1]\npublic key A cryptographic key that is used with an asymmetric (public-key) cryp-\ntographic algorithm and is associated with a private key. The public\nkey is associated with an owner and may be made public. In the case\nof digital signatures, the public key is used to verify a digital signature\nthat was generated using the corresponding private key. [1]\n3\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\nsecurity category A number associated with the security strength of a post-quantum\ncryptographic algorithm, as specified by NIST (see [9, Sect. 5.6]).\nsecurity strength A number associated with the amount of work (i.e., the number of\noperations) that is required to break a cryptographic algorithm or\nsystem. [1]\nshall Used to indicate a requirement of this standard. [1]\nshould Used to indicate a strong recommendation but not a requirement of\nthis standard. Ignoring the recommendation could result in undesir-\nable results. [1]\nsignatory The entity that generates a digital signature on data using a private\nkey. [1]\nsignature generation The process of using a digital signature algorithm and a private key to\ngenerate a digital signature on data. [1]\nsignature validation The (mathematical) verification of the digital signature and obtain-\ning the appropriate assurances (e.g., public-key validity, private-key\npossession, etc.). [1]\nsignature verification The process of using a digital signature algorithm and a public key to\nverify a digital signature on data. [1]\nsigned data The data or message upon which a digital signature has been computed.\nAlso see message. [1]\nverifier The entity that verifies the authenticity of a digital signature using the\npublic key. [1]\n2.2 Acronyms\nADRS Address\nADRSc Compressed Address\nAES Advanced Encryption Standard\nDER Distinguished Encoding Rules\nFIPS Federal Information Processing Standard\nFORS Forest of Random Subsets\nITL Information Technology Laboratory\nMGF Mask Generation Function\nNIST National Institute of Standards and Technology\nOID Object Identifier\nPQC Post-Quantum Cryptography\nPRF Pseudorandom Function\n4\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\nSHA Secure Hash Algorithm\nSHAKE Secure Hash Algorithm KECCAK\nSP Special Publication\nRFC Request for Comments\nWOTS+ Winternitz One-Time Signature Plus\nXMSS eXtended Merkle Signature Scheme\nXOF eXtendable-Output Function\n2.3 Mathematical Symbols\n𝑋 ∥ 𝑌 The concatenation of two arrays 𝑋 and 𝑌. If 𝑋 is an array of length ℓ ,\n𝑥\nand 𝑌 is an array of length ℓ , then 𝑍 = 𝑋 ∥ 𝑌 is an array of length\n𝑦\nℓ + ℓ such that\n𝑥 𝑦\n𝑋[𝑖] if 0 ≤ 𝑖 < ℓ\n𝑍[𝑖] = { 𝑥\n𝑌 [𝑖 − ℓ ] if ℓ ≤ 𝑖 < ℓ +ℓ .\n𝑥 𝑥 𝑥 𝑦\n𝑋[𝑖 ∶ 𝑗] A subarray of 𝑋. If 𝑋 is an array of length ℓ , 0 ≤ 𝑖 < 𝑗 ≤ ℓ , and\n𝑥 𝑥\n𝑌 = 𝑋[𝑖 ∶ 𝑗], then 𝑌 is an array of length 𝑗 − 𝑖 such that 𝑌 [𝑘] =\n𝑋[𝑖 + 𝑘] for 0 ≤ 𝑘 < 𝑗 −𝑖.\nTrunc (𝑋) A truncation function that outputs the leftmost ℓ bytes of the input\nℓ\nbyte string 𝑋. If 𝑌 = Trunc (𝑋), then 𝑌 is a byte string (array) of\nℓ\nlength ℓ such that 𝑌 [𝑖] = 𝑋[𝑖] for 0 ≤ 𝑖 < ℓ (i.e., 𝑌 = 𝑋[0 ∶ ℓ]).\n|𝑋| The length (in bytes) of byte string 𝑋.\n⌈𝑎⌉ The ceiling of 𝑎; the smallest integer that is greater than or equal to 𝑎.\nFor example, ⌈5⌉ = 5, ⌈5.3⌉ = 6, and ⌈−2.1⌉ = −2. [1]\n⌊𝑎⌋ The floor of 𝑎; the largest integer that is less than or equal to 𝑎. For\nexample, ⌊5⌋ = 5, ⌊5.3⌋ = 5, and ⌊−2.1⌋ = −3. [1]\n𝑎 mod 𝑛 The unique remainder 𝑟, 0 ≤ 𝑟 ≤ (𝑛−1), when integer 𝑎 is divided\nby the positive integer 𝑛. For example, 23 mod 7 = 2. [1]\n𝑎 ⋅ 𝑏 The product of 𝑎 and 𝑏. For example, 3⋅5 = 15.\n𝑎𝑏 𝑎 raised to the power 𝑏. For example, 25 = 32.\nlog 𝑥 The base 2 logarithm of 𝑥. For example, log (16) = 4.\n2 2\n0b The prefix to a number that is represented in binary.\n0x The prefix to a number that is represented in hexadecimal. [1, adapted]\n𝑎 ≫ 𝑏 The logical right shift of 𝑎 by 𝑏 positions (i.e., 𝑎 ≫ 𝑏 = ⌊𝑎/2𝑏⌋). For\nexample, 0x73 ≫ 4 = 7. [10, adapted]\n5\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\n𝑎 ≪ 𝑏 The logical left shift of 𝑎 by 𝑏 positions (i.e., 𝑎 ≪ 𝑏 = 𝑎 ⋅ 2𝑏). For\nexample, 0x73 ≪ 4 = 0x730. [10, adapted]\n𝑎 ⊕ 𝑏 The bitwise exclusive-or of 𝑎 and 𝑏. For example, 115 ⊕ 1 = 114\n(115 ⊕ 1 = 0b01110011 ⊕ 0b00000001 = 0b01110010 = 114).\n𝑠 ← 𝑥 In pseudocode, this notation means that the variable 𝑠 is set to the\nvalue of the expression 𝑥.\n𝑠 ← $ − 𝔹𝑛 In pseudocode, this notation means that the variable 𝑠 is set to a\nbyte string of length 𝑛 chosen at random. A fresh random value is\ngenerated for each time this step is performed.\n⊥ A symbol indicating failure or the lack of output from an algorithm.\n6\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\n3. Overview of the SLH-DSA Signature Scheme\nSLH-DSA is a stateless hash-based signature scheme that is constructed using other hash-based\nsignature schemes as components: (1) a few-time signature scheme, forest of random subsets\n(FORS), and (2) a multi-time signature scheme, the eXtended Merkle Signature Scheme (XMSS).\nXMSS is constructed using the hash-based one-time signature scheme Winternitz One-Time\nSignature Plus (WOTS+) as a component.2\nConceptually, an SLH-DSA key pair consists of a very large set of FORS key pairs.3 The few-time\nsignature scheme FORS allows each key pair to safely sign a small number of messages. An\nSLH-DSA signature is created by computing a randomized hash of the message, using part of the\nresulting message digest to pseudorandomly select a FORS key, and signing the remaining part of\nthe message digest with that key. An SLH-DSA signature consists of the FORS signature and the\ninformation that authenticates the FORS public key. The authentication information is created\nusing XMSS signatures.\nXMSS is a multi-time signature scheme that is created using a combination of WOTS+ one-time\nsignatures and Merkle hash trees [13]. An XMSS key consists of 2ℎ′ WOTS+ keys and can sign\n2ℎ′ messages. The WOTS+ public keys are formed into a Merkle hash tree, and the root of the\ntree is the XMSS public key. (The Merkle hash tree formed from the WOTS+ keys is also referred\nto as an XMSS tree.) An XMSS signature consists of a WOTS+ signature and an authentication\npath within the Merkle hash tree for the WOTS+ public key. In Figure 1, triangles represent\nXMSS trees, squares represent the WOTS+ public keys, and circles represent the interior nodes\nof the hash tree. Within an XMSS tree, the square and circles that are filled in represent the\nauthentication path for the WOTS+ public key needed to verify the signature.\nThe authentication information for a FORS public key is a hypertree signature. A hypertree is a\ntree of XMSS trees, as depicted in Figure 1. The tree consists of 𝑑 layers4 in which the top layer\n(layer 𝑑 − 1) consists of a single XMSS tree, the next layer down (layer 𝑑 − 2) consists of 2ℎ′\nXMSS trees, and the lowest layer (layer 0) consists of 2(𝑑−1)ℎ′ XMSS trees. The public key of each\nXMSS key at layers 0 through 𝑑 − 2 is signed by an XMSS key at the next higher layer. The XMSS\nkeys at layer 0 collectively have 2𝑑ℎ′ = 2ℎ WOTS+ keys, which are used to sign the 2ℎ FORS\npublic keys in the SLH-DSA key pair. The sequence of 𝑑 XMSS signatures needed to authenticate\na FORS public key when starting with the public key of the XMSS key at layer 𝑑 −1 is a hypertree\nsignature. An SLH-DSA signature consists of a FORS signature along with a hypertree signature.\nAn SLH-DSA public key (Figure 16) contains two 𝑛-byte components: (1) PK.root, which is the\npublic key of the XMSS key at layer 𝑑 −1, and (2) PK.seed, which is used to provide domain\nseparation between different SLH-DSA key pairs. An SLH-DSA private key (Figure 15) consists of\nan 𝑛-byte seed SK.seed that is used to pseudorandomly generate all of the secret values for the\nWOTS+ and FORS keys and an 𝑛-byte key SK.prf that is used in the generation of the randomized\nhash of the message. An SLH-DSA private key also includes copies of PK.root and PK.seed, as\nthese values are needed during both signature generation and signature verification.\n2The WOTS+ and XMSS schemes that are used as components of SLH-DSA are not the same as the WOTS+ and\nXMSS schemes in RFC 8391 [11] and SP 800-208 [12].\n3For the parameter sets in this standard, an SLH-DSA key pair contains 263 , 264 , 266, or 268 FORS keys, which are\npseudorandomly generated from a single seed.\n4For the parameter sets in this standard, 𝑑 is 7, 8, 17, or 22.\n7\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\nPK.root\nlayer 𝑑 − 1 = 2\nWOTS+ signature\nlayer 1\nMerkle tree node\nWOTS+ signature\nWOTS+ public key\nFORS public key\nlayer 0\nWOTS+ signature\nFORS signature\nMessage\nFigure 1. An SLH-DSA signature\nThe WOTS+ one-time signature scheme is specified in Section 5, and the XMSS multi-time sig-\nnature scheme is specified in Section 6. Section 7 specifies the generation and verification of\nhypertree signatures. The FORS few-time signature scheme is specified in Section 8. Finally,\nSection 9 specifies the SLH-DSA key generation, signature, and verification functions. As the\nWOTS+ , XMSS, hypertree, and FORS schemes described in this standard are not intended for\nuse as stand-alone signature schemes, only the components of the schemes necessary to imple-\nment SLH-DSA are described. In particular, these sections do not include functions for key pair\ngeneration, and a signature verification function is only specified for hypertree signatures.\nWhen used in this standard, WOTS+ , XMSS, and FORS signatures are implicitly verified using\nfunctions to generate public keys from messages and signatures (see Sections 5.3, 6.3, and\n8.4). When verifying an SLH-DSA signature, the randomized hash of the message and the FORS\nsignature are used to compute a candidate FORS public key. The candidate FORS public key and\nthe WOTS+ signature from the layer 0 XMSS key are used to compute a candidate WOTS+ public\nkey, which is then used in conjunction with the corresponding authentication path to compute a\ncandidate XMSS public key. The candidate layer 0 XMSS public key is used along with the layer 1\n8\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\nXMSS signature to compute a candidate layer 1 XMSS public key. This process is repeated until a\ncandidate layer 𝑑 − 1 public key has been computed. SLH-DSA signature verification succeeds if\nthe computed candidate layer 𝑑 −1 XMSS public key is the same as the SLH-DSA public key root\nPK.root.\n3.1 Additional Requirements\nThis section specifies requirements for cryptographic modules that implement SLH-DSA. Sec-\ntion 3.2 discusses issues that implementers of cryptographic modules should take into considera-\ntion but that are not requirements. SP 800-89, Recommendation for Obtaining Assurances for\nDigital Signature Applications [3], specifies requirements that apply to the use of digital signature\nschemes.\nRandomness generation. SLH-DSA key generation (Algorithm 21) requires the generation of three\nrandom 𝑛-byte values: PK.seed, SK.seed, and SK.prf, where 𝑛 is 16, 24, or 32, depending on\nthe parameter set. For each invocation of key generation, each of these values shall be a fresh\n(i.e., not previously used) random value generated using an approved random bit generator\n(RBG), as prescribed in SP 800-90A, SP 800-90B, and SP 800-90C [14, 15, 16]. Moreover, the RBG\nused shall have a security strength of at least 8𝑛 bits. See Table 2 for the value of 𝑛 for each\nparameter set.\nDestruction of sensitive data. Data used internally by key generation and signing algorithms in\nintermediate computation steps could be used by an adversary to gain information about the\nprivate key and thereby compromise security. The data used internally by verification algorithms\nis similarly sensitive for some applications, including the verification of signatures that are used as\nbearer tokens (i.e., authentication secrets) or signatures on plaintext messages that are intended\nto be confidential. Intermediate values of the verification algorithm may reveal information\nabout its inputs (i.e., the message, signature, and public key), and in some applications, security\nor privacy requires one or more of these inputs to be confidential. Therefore, implementations of\nSLH-DSA shall ensure that any local copies of the inputs and any potentially sensitive intermediate\ndata are destroyed as soon as they are no longer needed.\nKey checks. SP 800-89 imposes requirements for the assurance of public-key validity and private-\nkey possession. In the case of SLH-DSA, where public-key validation is required, implementations\nshall verify that the public key is 2𝑛 bytes in length. When the assurance of private key possession\nis obtained via regeneration, the owner of the private key shall check that the private key is 4𝑛\nbytes in length and shall use SK.seed and PK.seed to recompute PK.root and compare the\nnewly generated value with the value in the private key currently held.\nFloating-point arithmetic. Implementations of SLH-DSA shall not use floating-point arithmetic,\nas rounding errors in floating point operations may lead to incorrect results in some cases. In all\npseudocode in this standard in which division is performed (e.g., 𝑥/𝑦) and 𝑦 may not divide 𝑥,\neither ⌊𝑥/𝑦⌋ or ⌈𝑥/𝑦⌉ is used. Both of these can be computed without floating-point arithmetic,\nas ordinary integer division 𝑥/𝑦 computes ⌊𝑥/𝑦⌋, and ⌈𝑥/𝑦⌉ = ⌊(𝑥+𝑦−1)/𝑦⌋ for non-negative\nintegers 𝑥 and positive integers 𝑦.\n9\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\nWhile the value of 𝑙𝑒𝑛 (see Equation 5.3) may be computed without using floating-point arith-\n2\nmetic (see Algorithm 1), it is recommended that this value be precomputed. For all parameter\nsets in this standard, 𝑙𝑒𝑛 is 3.\n2\nAlgorithm 1 gen_len (𝑛, 𝑙𝑔 )\n2 𝑤\nComputes 𝑙𝑒𝑛 (Equation 5.3).\n2\nInput: Security parameter 𝑛, bits per hash chain 𝑙𝑔 .\n𝑤\nOutput: 𝑙𝑒𝑛 .\n2\n1: 𝑤 ← 2𝑙𝑔 𝑤 ▷ Equation 5.1\n2: 𝑙𝑒𝑛 ← ⌊8⋅𝑛+𝑙𝑔 𝑤 −1 ⌋ ▷ Equation 5.2\n1 𝑙𝑔\n𝑤\n3: 𝑚𝑎𝑥_𝑐ℎ𝑒𝑐𝑘𝑠𝑢𝑚 = 𝑙𝑒𝑛 ⋅ (𝑤 − 1) ▷ maximum possible checksum value\n1\n4: 𝑙𝑒𝑛 ← 1 ▷ maximum value that may be signed using\n2\n5: 𝑐𝑎𝑝𝑎𝑐𝑖𝑡𝑦 ← 𝑤 ▷ 𝑙𝑒𝑛 hash chains is 𝑤𝑙𝑒𝑛 2 − 1 = 𝑐𝑎𝑝𝑎𝑐𝑖𝑡𝑦 − 1\n2\n6: while 𝑐𝑎𝑝𝑎𝑐𝑖𝑡𝑦 ≤ 𝑚𝑎𝑥_𝑐ℎ𝑒𝑐𝑘𝑠𝑢𝑚 do\n7: 𝑙𝑒𝑛 ← 𝑙𝑒𝑛 + 1\n2 2\n8: 𝑐𝑎𝑝𝑎𝑐𝑖𝑡𝑦 ← 𝑐𝑎𝑝𝑎𝑐𝑖𝑡𝑦 ⋅ 𝑤\n9: end while\n10: return 𝑙𝑒𝑛\n2\n3.2 Implementation Considerations\nThis section discusses some implementation considerations for SLH-DSA.\nDo not support component use. As WOTS+ , XMSS, FORS, and hypertree signature schemes are\nnot approved for use as stand-alone signature schemes, cryptographic modules should not make\ninterfaces to these components available to applications. SP 800-208 [12] specifies approved\nstateful hash-based signature schemes.\nSide-channel and fault attacks. For signature schemes, the secrecy of the private key is critical.\nCare must be taken to protect implementations against attacks, such as side-channel attacks\nor fault attacks [17, 18, 19, 20, 21]. A cryptographic device may leak critical information with\nside-channel analysis or attacks that allow internal data or keying material to be extracted without\nbreaking the cryptographic primitives.\n10",
    "question": "What is the structure and process of generating and verifying digital signatures in the SLH-DSA scheme?",
    "summary": "The FIPS 205 standard defines a stateless hash-based digital signature scheme called SLH-DSA, which uses components like FORS and XMSS. It outlines terms, acronyms, and mathematical symbols relevant to hash-based cryptography. The standard emphasizes the importance of randomness, security, and protection against side-channel and fault attacks to ensure the integrity and confidentiality of digital signatures."
  },
  {
    "start": 13,
    "end": 15,
    "text": "FIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\n4. Functions and Addressing\n4.1 Hash Functions and Pseudorandom Functions\nThe specification of SLH-DSA makes use of six functions — PRF , H , PRF, T , H, and\n𝑚𝑠𝑔 𝑚𝑠𝑔 ℓ\nF — that are all implemented using hash functions or XOFs with fixed output lengths. The inputs\nand output of each function are byte strings. In the following definitions, 𝔹 = {0,…,255}\ndenotes the set of all bytes, 𝔹𝑛 denotes the set of byte strings of length 𝑛 bytes, and 𝔹∗ denotes\nthe set of all byte strings. The ADRS input is described in Section 4.2.\n• PRF (SK.prf, 𝑜𝑝𝑡_𝑟𝑎𝑛𝑑, 𝑀) (𝔹𝑛 × 𝔹𝑛 × 𝔹∗ → 𝔹𝑛) is a pseudorandom function\n𝑚𝑠𝑔\n(PRF) that generates the randomizer (𝑅) for the randomized hashing of the message to be\nsigned.\n• H (𝑅, PK.seed, PK.root, 𝑀) (𝔹𝑛 × 𝔹𝑛 × 𝔹𝑛 × 𝔹∗ → 𝔹𝑚) is used to generate the\n𝑚𝑠𝑔\ndigest of the message to be signed.\n• PRF(PK.seed, SK.seed, ADRS) (𝔹𝑛 × 𝔹𝑛 × 𝔹32 → 𝔹𝑛) is a PRF that is used to\ngenerate the secret values in WOTS+ and FORS private keys.\n• T (PK.seed, ADRS, 𝑀 ) (𝔹𝑛 × 𝔹32 × 𝔹ℓ𝑛 → 𝔹𝑛) is a hash function that maps an\nℓ ℓ\nℓ𝑛-byte message to an 𝑛-byte message.\n• H(PK.seed, ADRS, 𝑀 ) (𝔹𝑛 × 𝔹32 × 𝔹2𝑛 → 𝔹𝑛) is a special case of T that takes a\n2 ℓ\n2𝑛-byte message as input.\n• F(PK.seed, ADRS, 𝑀 ) (𝔹𝑛 × 𝔹32 × 𝔹𝑛 → 𝔹𝑛) is a hash function that takes an 𝑛-byte\n1\nmessage as input and produces an 𝑛-byte output.\nThe specific instantiations for these functions differ for different parameter sets and are specified\nin Section 11.\n4.2 Addresses\nFour of the functions described in Section 4.1 take a 32-byte address (i.e., ADRS) as input. An\nADRS consists of public values that indicate the position of the value being computed by the\nfunction. A different ADRS value is used for each call to each function. In the case of PRF,\nthis is used to generate a large number of different secret values from a single seed. In the case\nof T , H, and F, it is used to mitigate multi-target attacks. In the pseudocode, where addresses\nℓ\nare passed as parameters, they may be passed either by reference or by value.\nThe structure of an ADRS conforms to word boundaries, with each word being 4 bytes long\nand values encoded as unsigned integers in big-endian byte order (see Figure 2). The first word\nof ADRS specifies the layer address, which is the height of an XMSS tree within the hypertree.\nTrees on the bottom layer have a height of zero, and the single XMSS tree at the top has a height\nof 𝑑 −1 (see Figure 1). The next three words of ADRS specify the tree address, which is the\nposition of an XMSS tree within a layer of the hypertree. The leftmost XMSS tree in a layer has a\ntree address of zero, and the rightmost XMSS tree in layer 𝐿 has a tree address of 2(𝑑−1−𝐿)ℎ′ − 1.\nThe next word is used to specify the type of the address, which differs depending on the use case.\n11\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\nThere are seven different types of address used in SLH-DSA, as described below.5 The address\ntype determines how the final 12 bytes of the address are to be interpreted. The algorithms\nin this standard are written based on the assumption that whenever the type in an ADRS is\nchanged, the final 12 bytes of the address are initialized to zero.\nlayer address 4 bytes\ntree address 12 bytes\n𝑡𝑦𝑝𝑒 4 bytes\n12 bytes\nFigure 2. Address (ADRS)\nThe type is set to WOTS_HASH (i.e., 𝑡𝑦𝑝𝑒 = 0) for a WOTS+ hash address (see Figure 3), which is\nused when computing hash chains in WOTS+ . When type is WOTS_HASH, the next word encodes\nthe key pair address, which is the index of the WOTS+ key pair within the XMSS tree specified\nby the layer and tree addresses, with the leftmost WOTS+ key having an index of zero and the\nrightmost WOTS+ key having an index of 2ℎ′ −1. Next is the chain address, which encodes the\nindex of the chain within WOTS+ , followed by the hash address, which encodes the address of\nthe hash function within the chain.\nlayer address layer address\ntree address tree address\n𝑡𝑦𝑝𝑒 = 0 (WOTS_HASH) 𝑡𝑦𝑝𝑒 = 1 (WOTS_PK)\nkey pair address 4 bytes key pair address 4 bytes\nchain address 4 bytes\n𝑝𝑎𝑑𝑑𝑖𝑛𝑔 = 0 8 bytes\nhash address 4 bytes\nFigure 3. WOTS+ hash address Figure 4. WOTS+ public-key compression address\nThe type is set to WOTS_PK (i.e., 𝑡𝑦𝑝𝑒 = 1) when compressing WOTS+ public keys (see Figure 4).\nAs when the type is WOTS_HASH, the next word encodes the index of the WOTS+ key pair within\nthe XMSS tree specified by the layer and tree addresses. The remaining two words of ADRS\nare not needed and are set to zero.\nThe type is set to TREE (i.e., 𝑡𝑦𝑝𝑒 = 2) when computing the hashes within the XMSS tree (see\nFigure 5). For this type of address, the next word is always set to zero. The following word\n5The type word will have a value of 0, 1, 2, 3, 4, 5, or 6. In order to improve readability, these values will be\nreferred to in this standard by the constants WOTS_HASH, WOTS_PK, TREE, FORS_TREE, FORS_ROOTS, WOTS_PRF,\nand FORS_PRF, respectively.\n12\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\nencodes the height of the node within the tree that is being computed, and the final word\nencodes the index of the node at that height.\nlayer address\ntree address\n𝑡𝑦𝑝𝑒 = 2 (TREE)\n𝑝𝑎𝑑𝑑𝑖𝑛𝑔 = 0 4 bytes\ntree height 4 bytes\ntree index 4 bytes\nFigure 5. Hash tree address\nThe type is set to FORS_TREE (i.e., 𝑡𝑦𝑝𝑒 = 3) when computing hashes within the FORS tree (see\nFigure 6). The next word is the key pair address, which encodes the FORS key that is used. The\nvalue is the same as the key pair address for the WOTS+ key used to sign the FORS key (see\nFigure 3 and Figure 4). The next two words — the tree height and tree index — encode the node\nwithin the FORS tree that is being computed. The tree height starts with zero for the leaf nodes.\nThe tree index is counted continuously across the 𝑘 different FORS trees. The leftmost node in\nthe leftmost tree has an index of zero, and the rightmost node in the rightmost tree at level 𝑗\nhas an index of 𝑘 ⋅ 2(𝑎−𝑗) − 1, where 𝑎 is the height of the tree.\nlayer address = 0 layer address = 0\ntree address tree address\n𝑡𝑦𝑝𝑒 = 3 (FORS_TREE) 𝑡𝑦𝑝𝑒 = 4 (FORS_ROOTS)\nkey pair address 4 bytes key pair address 4 bytes\ntree height 4 bytes\n𝑝𝑎𝑑𝑑𝑖𝑛𝑔 = 0 8 bytes\ntree index 4 bytes\nFigure 6. FORS tree address Figure 7. FORS tree roots compression address\nThe type is set to FORS_ROOTS (i.e., 𝑡𝑦𝑝𝑒 = 4) when compressing the 𝑘 FORS tree roots (see\nFigure 7). The next word is the key pair address, which has the same meaning as it does in the\nFORS_TREE address. The remaining two words of ADRS are not needed and are set to zero.\nThe type is set to WOTS_PRF (i.e., 𝑡𝑦𝑝𝑒 = 5) when generating secret values for WOTS+ keys (see\nFigure 8). The values for the other words in the address are set to the same values as for the\nWOTS_HASH address (Figure 3) used for the chain. The hash address is always set to zero.\n13\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\nlayer address layer address = 0\ntree address tree address\n𝑡𝑦𝑝𝑒 = 5 (WOTS_PRF) 𝑡𝑦𝑝𝑒 = 6 (FORS_PRF)\nkey pair address 4 bytes key pair address 4 bytes\nchain address 4 bytes tree height = 0 4 bytes\nhash address = 0 4 bytes tree index 4 bytes\nFigure 8. WOTS+ key generation address Figure 9. FORS key generation address\nThe type is set to FORS_PRF (i.e., 𝑡𝑦𝑝𝑒 = 6) when generating secret values for FORS keys (see\nFigure 9). The values for the other words in the address are set to the same values as for the\nFORS_TREE address (Figure 6) used for the same leaf node.\n4.3 Member Functions\nThe algorithms in this standard make use of member functions. If a complex data structure\n(e.g., an ADRS) contains a component 𝑋, then ADRS.getX() returns the value of 𝑋, and\nADRS.setX(𝑌) sets the component 𝑋 in ADRS to the value held by 𝑌. If a data structure 𝑠\ncontains multiple instances of 𝑋, then 𝑠.getX(𝑖) returns the value of the 𝑖th instance of 𝑋 in 𝑠.\nFor example, if 𝑠 is a FORS signature (Figure 14), then 𝑠.getAUTH(𝑖) returns the authentication\npath for the 𝑖th tree.\nWhenever the type in an address changes, the final 12 bytes of the address are initialized to zero.\nThe member function ADRS.setTypeAndClear(𝑌) for addresses sets the 𝑡𝑦𝑝𝑒 of the ADRS to\n𝑌 and sets the final 12 bytes of the ADRS to zero. 6\nTable 1 shows alternative notation for each of the member functions that operates on addresses.\nTable 1. Member functions for addresses\nMember function Expanded notation\nADRS.setLayerAddress(𝑙) ADRS ← toByte(𝑙, 4) ∥ ADRS[4 ∶ 32]\nADRS.setTreeAddress(𝑡) ADRS ← ADRS[0 ∶ 4] ∥ toByte(𝑡, 12) ∥ ADRS[16 ∶ 32]\nADRS.setTypeAndClear(𝑌) ADRS ← ADRS[0 ∶ 16] ∥ toByte(𝑌 , 4) ∥ toByte(0, 12)\nADRS.setKeyPairAddress(𝑖) ADRS ← ADRS[0 ∶ 20] ∥ toByte(𝑖, 4) ∥ ADRS[24 ∶ 32]\nADRS.setChainAddress(𝑖)\nADRS ← ADRS[0 ∶ 24] ∥ toByte(𝑖, 4) ∥ ADRS[28 ∶ 32]\nADRS.setTreeHeight(𝑖)\nADRS.setHashAddress(𝑖)\nADRS ← ADRS[0 ∶ 28] ∥ toByte(𝑖, 4)\nADRS.setTreeIndex(𝑖)\n𝑖 ← ADRS.getKeyPairAddress() 𝑖 ← toInt(ADRS[20 ∶ 24], 4)\n𝑖 ← ADRS.getTreeIndex() 𝑖 ← toInt(ADRS[28 ∶ 32], 4)\n6As noted in Section 4.2, the type (𝑌) is an integer. However, in the pseudocode, the constants WOTS_HASH, WOTS_PK,\nTREE, FORS_TREE, FORS_ROOTS, WOTS_PRF, and FORS_PRF are used in order to improve readability.\n14\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\n4.4 Arrays, Byte Strings, and Integers\nIf 𝑋 is a byte string of length 𝑛, then 𝑋[𝑖] for 𝑖 ∈ {0,…,𝑛−1} will refer to the 𝑖th element in\nthe string 𝑋. If 𝑋 is an array of 𝑚 𝑛-byte strings, then 𝑋[𝑖] for 𝑖 ∈ {0,…,𝑚−1} will refer to\nthe 𝑖th 𝑛-byte string in 𝑋, and 𝑋 will refer to the 𝑚 ⋅ 𝑛-byte string 𝑋[0] ∥ 𝑋[1] ∥ … 𝑋[𝑚 − 1].\nA byte string may be interpreted as the big-endian representation of an integer. In such cases, a\nbyte string 𝑋 of length 𝑛 is converted to the integer\n𝑋[0] ⋅ 256𝑛−1 + 𝑋[1] ⋅ 256𝑛−2 + … 𝑋[𝑛 − 2] ⋅ 256 + 𝑋[𝑛 − 1].\nSimilarly, an integer 𝑥 may be converted to a byte string of length 𝑛 by finding coefficients\n𝑥 , 𝑥 , … 𝑥 , 𝑥 ∈ {0, … , 255} such that\n0 1 𝑛−2 𝑛−1\n𝑥 = 𝑥 ⋅ 256𝑛−1 + 𝑥 ⋅ 256𝑛−2 + … 𝑥 ⋅ 256 + 𝑥\n0 1 𝑛−2 𝑛−1\nand then setting the byte string to be 𝑥 𝑥 … 𝑥 𝑥 .\n0 1 𝑛−2 𝑛−1\nAlgorithm 2 is a function that converts a byte string 𝑋 of length 𝑛 to an integer, and Algorithm 3\nis a function that converts an integer 𝑥 to a byte string of length 𝑛.\nAlgorithm 2 toInt(𝑋, 𝑛)\nConverts a byte string to an integer.\nInput: 𝑛-byte string 𝑋.\nOutput: Integer value of 𝑋.\n1: 𝑡𝑜𝑡𝑎𝑙 ← 0\n2: for 𝑖 from 0 to 𝑛 − 1 do\n3: 𝑡𝑜𝑡𝑎𝑙 ← 256 ⋅ 𝑡𝑜𝑡𝑎𝑙 + 𝑋[𝑖]\n4: end for\n5: return 𝑡𝑜𝑡𝑎𝑙\nAlgorithm 3 toByte(𝑥, 𝑛)\nConverts an integer to a byte string.\nInput: Integer 𝑥, string length 𝑛.\nOutput: Byte string of length 𝑛 containing binary representation of 𝑥 in big-endian byte-order.\n1: 𝑡𝑜𝑡𝑎𝑙 ← 𝑥\n2: for 𝑖 from 0 to 𝑛 − 1 do\n3: 𝑆[𝑛 − 1 − 𝑖] ← 𝑡𝑜𝑡𝑎𝑙 mod 256 ▷ least significant 8 bits of 𝑡𝑜𝑡𝑎𝑙\n4: 𝑡𝑜𝑡𝑎𝑙 ← 𝑡𝑜𝑡𝑎𝑙 ≫ 8\n5: end for\n6: return 𝑆\n15\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\nFor the WOTS+ and FORS schemes, the messages to be signed need to be split into a sequence\nof 𝑏-bit strings, where each 𝑏-bit string is interpreted as an integer between 0 and 2𝑏 −1.7 This\nis the equivalent of creating the base-2𝑏 representation of the message. The base_2b function\n(Algorithm 4) takes a byte string 𝑋, a bit string length 𝑏, and an output length 𝑜𝑢𝑡_𝑙𝑒𝑛 as input\nand returns an array of base-2𝑏 integers that represent the first 𝑜𝑢𝑡_𝑙𝑒𝑛 ⋅ 𝑏 bits of 𝑋 if the\nindividual bytes in 𝑋 are encoded as 8-bit strings in big-endian bit order. 𝑋 must be at least\n⌈𝑜𝑢𝑡_𝑙𝑒𝑛 ⋅ 𝑏/8⌉ bytes in length. As the value of 𝑏𝑖𝑡𝑠 will never exceed 𝑏 +7,a 𝑏 +7-bit unsigned\ninteger is sufficient to store 𝑡𝑜𝑡𝑎𝑙 (i.e., 𝑡𝑜𝑡𝑎𝑙 may be stored as a 32-bit unsigned integer).\nAlgorithm 4 base_2b(𝑋, 𝑏, 𝑜𝑢𝑡_𝑙𝑒𝑛)\nComputes the base 2𝑏 representation of 𝑋.\nInput: Byte string 𝑋 of length at least ⌈𝑜𝑢𝑡_ 𝑙𝑒𝑛⋅𝑏⌉, integer 𝑏, output length 𝑜𝑢𝑡_𝑙𝑒𝑛.\n8\nOutput: Array of 𝑜𝑢𝑡_𝑙𝑒𝑛 integers in the range [0,…,2𝑏 −1].\n1: 𝑖𝑛 ← 0\n2: 𝑏𝑖𝑡𝑠 ← 0\n3: 𝑡𝑜𝑡𝑎𝑙 ← 0\n4: for 𝑜𝑢𝑡 from 0 to 𝑜𝑢𝑡_𝑙𝑒𝑛 − 1 do\n5: while 𝑏𝑖𝑡𝑠 < 𝑏 do\n6: 𝑡𝑜𝑡𝑎𝑙 ← (𝑡𝑜𝑡𝑎𝑙 ≪ 8) + 𝑋[𝑖𝑛]\n7: 𝑖𝑛 ← 𝑖𝑛+1\n8: 𝑏𝑖𝑡𝑠 ← 𝑏𝑖𝑡𝑠 + 8\n9: end while\n10: 𝑏𝑖𝑡𝑠 ← 𝑏𝑖𝑡𝑠 − 𝑏\n11: 𝑏𝑎𝑠𝑒𝑏[𝑜𝑢𝑡] ← (𝑡𝑜𝑡𝑎𝑙 ≫ 𝑏𝑖𝑡𝑠) mod 2𝑏\n12: end for\n13: return 𝑏𝑎𝑠𝑒𝑏\n7𝑏 will be the value of 𝑙𝑔 when the base_2b function is used in WOTS +, and 𝑏 will be the value of 𝑎 when the\n𝑤\nbase_2b function is used in FORS. For the parameter sets in this standard, 𝑙𝑔 is 4, and 𝑎 is 6, 8, 9, 12, or 14.\n𝑤\n16",
    "question": "What are the different types of addresses used in the SLH-DSA standard and how do they determine the interpretation of the final 12 bytes of the address?",
    "summary": "The FIPS 205 standard defines six hash-based functions used in digital signatures, including PRF, H, T, and F, which are implemented with hash functions or XOFs. These functions use addresses (ADRS) to specify positions and prevent multi-target attacks. The ADRS is structured with layers, trees, and types, each determining how the final 12 bytes are interpreted for different cryptographic operations."
  },
  {
    "start": 16,
    "end": 18,
    "text": "FIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\n5. Winternitz One-Time Signature Plus Scheme\nThis section describes the WOTS+ one-time signature scheme that is a component of SLH-DSA.\nWOTS+ uses two parameters. The security parameter 𝑛 is the length in bytes of the messages\nthat may be signed as well as the length of the private key elements, public key elements, and\nsignature elements. For the parameter sets specified in this standard, 𝑛 may be 16, 24, or 32\n(see Table 2). The second parameter 𝑙𝑔 indicates the number of bits that are encoded by each\n𝑤\nhash chain that is used.8 𝑙𝑔 is 4 for all parameter sets in this standard. These parameters are\n𝑤\nused to compute four additional values:\n𝑤 = 2𝑙𝑔 𝑤 (5.1)\n8𝑛\n𝑙𝑒𝑛 = ⌈ ⌉ (5.2)\n1 𝑙𝑔\n𝑤\nlog (𝑙𝑒𝑛 ⋅ (𝑤 − 1))\n𝑙𝑒𝑛 = ⌊ 2 1 ⌋ + 1 (5.3)\n2 𝑙𝑔\n𝑤\n𝑙𝑒𝑛 = 𝑙𝑒𝑛 + 𝑙𝑒𝑛 (5.4)\n1 2\nWhen 𝑙𝑔 = 4, 𝑤 = 16, 𝑙𝑒𝑛 = 2𝑛, 𝑙𝑒𝑛 = 3, and 𝑙𝑒𝑛 = 2𝑛 + 3.\n𝑤 1 2\nA WOTS+ private key consists of 𝑙𝑒𝑛 secret values of length 𝑛. In SLH-DSA, these are all generated\nfrom an 𝑛-byte seed SK.seed using a PRF. Chains of length 𝑤 are then created from the secret\nvalues using a chaining function, and the end values from each of the chains are public values. The\nWOTS+ public key is computed as the hash of these public values. In order to create a signature,\nthe 8𝑛-bit message is first converted into an array of 𝑙𝑒𝑛 base-𝑤 integers. A checksum is then\n1\ncomputed for this string, and the checksum is converted into an array of 𝑙𝑒𝑛 base-𝑤 integers.\n2\nThe signature consists of the appropriate entries from the chains for each of the integers in the\nmessage and checksum arrays.\nThe WOTS+ functions make use of two helper functions: base_2b and chain. The base_2b function\n(Section 4.4) is used to break the message to be signed and the checksum value into arrays of\nbase-𝑤 integers. The chain function (Algorithm 5) is used to compute the hash chains.\nThe chain function takes an 𝑛-byte string 𝑋 and integers 𝑠 and 𝑖 (where 𝑖+𝑠 < 𝑤) as input and\nreturns the result of iterating a hash function F on the input 𝑠 times, starting from an index of\n𝑖. 9 The chain function also requires as input PK.seed, which is part of the SLH-DSA public key,\nand an address ADRS. The type in ADRS must be set to WOTS_HASH, and the layer address,\ntree address, key pair address, and chain address must be set to the address of the chain being\ncomputed. The chain function updates the hash address in ADRS with each iteration to specify\nthe current position in the chain prior to ADRS’s use in F.\n8In [10], the Winternitz parameter 𝑤 is used as the second WOTS+ parameter, where 𝑤 indicates the length of the\nhash chains that are used. This standard uses the parameter 𝑙𝑔 = log (𝑤) to simplify notation.\n𝑤 2\n9A start index of 0 indicates the beginning of the chain.\n17\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\nAlgorithm 5 chain(𝑋, 𝑖, 𝑠, PK.seed, ADRS)\nChaining function used in WOTS+ .\nInput: Input string 𝑋, start index 𝑖, number of steps 𝑠, public seed PK.seed, address ADRS.\nOutput: Value of F iterated 𝑠 times on 𝑋.\n1: 𝑡𝑚𝑝 ← 𝑋\n2: for 𝑗 from 𝑖 to 𝑖 + 𝑠 − 1 do\n3: ADRS.setHashAddress(𝑗)\n4: 𝑡𝑚𝑝 ← F(PK.seed, ADRS, 𝑡𝑚𝑝)\n5: end for\n6: return 𝑡𝑚𝑝\n5.1 WOTS\n+\nPublic-Key Generation\nThe wots_pkGen function (Algorithm 6) generates WOTS+ public keys. It takes SK.seed and\nPK.seed from the SLH-DSA private key and an address as input. The type in the address ADRS\nmust be set to WOTS_HASH, and the layer address, tree address, and key pair address must encode\nthe address of the WOTS+ public key to be generated.\nLines 4 through 9 in Algorithm 6 generate the public values, as described in Section 5. For each\nof the 𝑙𝑒𝑛 public values, the corresponding secret value is generated in lines 5 and 6, and the\nchain function is called to compute the end value of the chain of length 𝑤. Once the 𝑙𝑒𝑛 public\nvalues are computed, they are compressed into a single 𝑛-byte value in lines 10 through 13.\nAlgorithm 6 wots_pkGen(SK.seed, PK.seed, ADRS)\nGenerates a WOTS+ public key.\nInput: Secret seed SK.seed, public seed PK.seed, address ADRS.\nOutput: WOTS+ public key 𝑝𝑘.\n1: skADRS ← ADRS ▷ copy address to create key generation key address\n2: skADRS.setTypeAndClear(WOTS_PRF)\n3: skADRS.setKeyPairAddress(ADRS.getKeyPairAddress())\n4: for 𝑖 from 0 to 𝑙𝑒𝑛 − 1 do\n5: skADRS.setChainAddress(𝑖)\n6: 𝑠𝑘 ← PRF(PK.seed, SK.seed, skADRS) ▷ compute secret value for chain 𝑖\n7: ADRS.setChainAddress(𝑖)\n8: 𝑡𝑚𝑝[𝑖] ← chain(𝑠𝑘, 0, 𝑤 − 1, PK.seed, ADRS) ▷ compute public value for chain 𝑖\n9: end for\n10: wotspkADRS ← ADRS ▷ copy address to create WOTS+public key address\n11: wotspkADRS.setTypeAndClear(WOTS_PK)\n12: wotspkADRS.setKeyPairAddress(ADRS.getKeyPairAddress())\n13: 𝑝𝑘 ← T (PK.seed, wotspkADRS, 𝑡𝑚𝑝) ▷ compress public key\n𝑙𝑒𝑛\n14: return 𝑝𝑘\n18\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\n5.2 WOTS\n+\nSignature Generation\nA WOTS+ signature is an array of 𝑙𝑒𝑛 byte strings of length 𝑛, as shown in Figure 10. The wots_sign\nfunction (Algorithm 7) generates the signature by converting the 𝑛-byte message 𝑀10 into an\narray of 𝑙𝑒𝑛 base-𝑤 integers (line 2). A checksum is computed over 𝑀 (lines 3 through 5). The\n1\nchecksum is converted to a byte string, which is then converted into an array of 𝑙𝑒𝑛 base-𝑤\n2\nintegers (lines 6 and 7). The 𝑙𝑒𝑛 integers that represent the checksum are appended to the 𝑙𝑒𝑛\n2 1\nintegers that represent the message (line 7).11 For each of the 𝑙𝑒𝑛 base-𝑤 integers, the signature\nconsists of the corresponding node in one of the hash chains. For each of these integers, lines\n12 and 13 compute the secret value for the hash chain, and lines 14 and 15 compute the node in\nthe hash chain that corresponds to the integer. The selected nodes are concatenated to form\nthe WOTS+ signature.\nsig [0] 𝑛 bytes\nots\n⋯\nsig [𝑙𝑒𝑛 − 1] 𝑛 bytes\nots\nFigure 10. WOTS+ signature data format\nIn addition to the 𝑛-byte message to be signed, wots_sign takes SK.seed and PK.seed from\nthe SLH-DSA private key and an address as input. The type in the address ADRS must be set to\nWOTS_HASH, and the layer address, tree address, and key pair address must encode the address\nof the WOTS+ key that is used to sign the message.\n10In SLH-DSA, the message 𝑀 that is signed using WOTS+ is either an XMSS public key or a FORS public key.\n11In the case that 𝑙𝑔 = 4, the 𝑛-byte message is converted into an array of 2𝑛 base-16 integers (i.e., hexadecimal\n𝑤\ndigits). The checksum is encoded as two bytes with the least significant four bits being zeros, and the most\nsignificant 12 bits are appended to the message as an array of three base-16 integers.\n19\nFIPS 205 STATELESS HASH-BASED DIGITAL SIGNATURE STANDARD\nAlgorithm 7 wots_sign(𝑀, SK.seed, PK.seed, ADRS)\nGenerates a WOTS+ signature on an 𝑛-byte message.\nInput: Message 𝑀, secret seed SK.seed, public seed PK.seed, address ADRS.\nOutput: WOTS+ signature 𝑠𝑖𝑔.\n1: 𝑐𝑠𝑢𝑚 ← 0\n2: 𝑚𝑠𝑔 ← base_2b(𝑀,𝑙𝑔 ,𝑙𝑒𝑛 ) ▷ convert message to base 𝑤\n𝑤 1\n3: for 𝑖 from 0 to 𝑙𝑒𝑛 − 1 do ▷ compute checksum\n1\n4: 𝑐𝑠𝑢𝑚 ← 𝑐𝑠𝑢𝑚 + 𝑤 − 1 − 𝑚𝑠𝑔[𝑖]\n5: end for\n6: 𝑐𝑠𝑢𝑚 ← 𝑐𝑠𝑢𝑚 ≪ ((8 − ((𝑙𝑒𝑛 ⋅ 𝑙𝑔 ) mod 8)) mod 8) ▷ for 𝑙𝑔 = 4, left shift by 4\n2 𝑤 𝑤\n7: 𝑚𝑠𝑔 ← 𝑚𝑠𝑔 ∥ base_2b (toByte (𝑐𝑠𝑢𝑚, ⌈𝑙𝑒𝑛 2 ⋅𝑙𝑔 𝑤 ⌉) , 𝑙𝑔 , 𝑙𝑒𝑛 ) ▷ convert to base 𝑤\n8 𝑤 2\n8: skADRS ← ADRS ▷ copy address to create key generation key address\n9: skADRS.setTypeAndClear(WOTS_PRF)\n10: skADRS.setKeyPairAddress(ADRS.getKeyPairAddress())\n11: for 𝑖 from 0 to 𝑙𝑒𝑛 − 1 do\n12: skADRS.setChainAddress(𝑖)\n13: 𝑠𝑘 ← PRF(PK.seed, SK.seed, skADRS) ▷ compute chain 𝑖 secret value\n14: ADRS.setChainAddress(𝑖)\n15: 𝑠𝑖𝑔[𝑖] ← chain(𝑠𝑘, 0, 𝑚𝑠𝑔[𝑖], PK.seed, ADRS) ▷ compute chain 𝑖 signature value\n16: end for\n17: return 𝑠𝑖𝑔\n20",
    "question": "What are the parameters used in the WOTS+ one-time signature scheme and how are they utilized in generating the public key and signature?",
    "summary": "The WOTS+ one-time signature scheme is part of SLH-DSA and uses parameters 𝑛 and 𝑙𝑔 to generate keys and signatures. It creates hash chains from secret values and computes public keys by hashing the end values of these chains. To sign a message, it converts the message and checksum into base-𝑤 integers and selects corresponding nodes from the hash chains to form the signature."
  }
]