#!/bin/sh

# Define variables for reusability
SECRET_FILE="../secret"
REPO_URL="https://mungert69:`cat $SECRET_FILE`@github.com/Mungert69/NetworkMonitorProcessor"
DOCKER_COMPOSE_FILE="$HOME/code/NetworkMonitor/docker-compose-run-processor.yml"
CONTAINER_NAME="processor"

# Extract the image name from the docker-compose file (without the tag)
DOCKER_IMAGE_FULL=$(grep 'image:' $DOCKER_COMPOSE_FILE | awk '{ print $2 }')
DOCKER_IMAGE_NAME=$(echo $DOCKER_IMAGE_FULL | cut -d':' -f1)  # Extracts only the name, without the tag
echo "Docker Image Full is $DOCKER_IMAGE_FULL . Name is $DOCKER_IMAGE_NAME ."
# Step 1: Pull the latest code from GitHub
if ! git pull "$REPO_URL"; then
    echo "Failed to pull from GitHub repository. Exiting..."
    exit 1
fi

# Step 2: Build and publish the Docker container
if ! dotnet publish NetworkMonitorProcessor-debian12.csproj --os linux --arch x64 /t:PublishContainer -c Release; then
    echo "Failed to publish the Docker container. Exiting..."
    exit 1
fi

# Step 3: Start the container using Docker Compose
if ! docker compose -f "$DOCKER_COMPOSE_FILE" up -d; then
    echo "Failed to start the container using Docker Compose. Exiting..."
    exit 1
fi

# Step 4: Wait for the container to be ready (use a loop instead of sleep)
echo "Waiting for the container to be ready..."
until docker exec -it "$CONTAINER_NAME" bash -c "ls /app" >/dev/null 2>&1; do
    sleep 2
done

# Step 5: Update and install all required packages in one apt-get call
docker exec -it "$CONTAINER_NAME" bash -c "apt-get update && apt-get -y install \
    curl \
    nmap \
    postgresql \
    git-core \
    libpq-dev \
    libreadline-dev \
    libssl-dev \
    zlib1g-dev \
    build-essential \
    gconf-service \
    libasound2 \
    libatk1.0-0 \
    libc6 \
    libcairo2 \
    libcups2 \
    libdbus-1-3 \
    libexpat1 \
    libfontconfig1 \
    libgcc1 \
    libgconf-2-4 \
    libgdk-pixbuf2.0-0 \
    libglib2.0-0 \
    libgtk-3-0 \
    libnspr4 \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libstdc++6 \
    libx11-6 \
    libx11-xcb1 \
    libxcb1 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxi6 \
    libxrandr2 \
    libxrender1 \
    libxss1 \
    libxtst6 \
    ca-certificates \
    fonts-liberation \
    libappindicator1 \
    libnss3 \
    lsb-release \
    xdg-utils \
    libvulkan1 \
    libnss3-dev \
    libgdk-pixbuf2.0-dev \
    libxkbcommon-x11-0 \
    libxkbcommon0 \
    libdbus-1-dev \
    libxtst-dev \
    libxcomposite-dev \
    libxdamage-dev \
    libxrandr-dev \
    libxss-dev \
    libatspi2.0-0 xvfb libatk1.0-0 libatk-bridge2.0-0 libcups2 libxcomposite1 libxrandr2 libxdamage1 libxkbcommon-x11-0 libgbm1 libasound2 libnss3 libgdk-pixbuf2.0-0 libpango1.0-0 libpangoft2-1.0-0 libpangocairo-1.0-0"

# Step 6: Create symlink for nmap and install Metasploit
docker exec -it "$CONTAINER_NAME" bash -c "cd /app/openssl/bin && ln -s /usr/bin/nmap nmap"
docker exec -it "$CONTAINER_NAME" bash -c "curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && chmod 755 msfinstall && ./msfinstall"

# Step 7: Push both the version tag and latest tag
docker push "$DOCKER_IMAGE_FULL"  # Push the versioned image (e.g., 1.1.14)
docker commit  "$CONTAINER_NAME" "$DOCKER_IMAGE_NAME:latest"  # Commit to "latest"
docker push "$DOCKER_IMAGE_NAME:latest"  # Push the "latest" tag

# Step 8: Confirm completion
echo "The container is running, and the extra commands have been executed. Image has been pushed to Docker Hub as $DOCKER_IMAGE_FULL and $DOCKER_IMAGE_NAME:latest."

# Step 9: Stop the container using Docker Compose
if ! docker compose -f "$DOCKER_COMPOSE_FILE" down; then
    echo "Failed to stop the container using Docker Compose. Exiting..."
    exit 1
fi

